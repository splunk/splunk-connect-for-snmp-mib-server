#
# PySNMP MIB module WG102-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WG102-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, enterprises, IpAddress, Bits, Counter32, ModuleIdentity, Unsigned32, Integer32, NotificationType, Counter64, MibIdentifier, TimeTicks, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "enterprises", "IpAddress", "Bits", "Counter32", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "Counter64", "MibIdentifier", "TimeTicks", "NotificationType", "iso")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wirelessProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
wg102 = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3))
version = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000))
if mibBuilder.loadTexts: version.setLastUpdated('200409081800Z')
if mibBuilder.loadTexts: version.setOrganization('NETGEAR Inc.')
wirelessAPSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1))
wirelessAPManageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2))
wirelessAP24GGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3))
apMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMacAddress.setStatus('mandatory')
apFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFirmwareVersion.setStatus('mandatory')
apIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIPaddress.setStatus('mandatory')
apIPsubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIPsubnetMask.setStatus('mandatory')
apGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apGateway.setStatus('mandatory')
apDNSServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDNSServerIPAddress.setStatus('mandatory')
apDHCPMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("dhcp-Client", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDHCPMode.setStatus('mandatory')
apSystemName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSystemName.setStatus('mandatory')
apTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTimeZone.setStatus('mandatory')
apDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDaylightSaving.setStatus('mandatory')
apCountryDomain = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(410, 36, 124, 208, 40, 246, 250, 276, 372, 380, 392, 484, 528, 554, 578, 630, 340, 724, 752, 756, 826, 840))).clone(namedValues=NamedValues(("asia", 410), ("australia", 36), ("canada", 124), ("denmark", 208), ("europe", 40), ("finland", 246), ("france", 250), ("germany", 276), ("ireland", 372), ("italy", 380), ("japan", 392), ("mexico", 484), ("netherlands", 528), ("newZealand", 554), ("norway", 578), ("puertoRico", 630), ("southAmerica", 340), ("spain", 724), ("sweden", 752), ("switzerland", 756), ("unitedKingdom", 826), ("unitedStates", 840)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCountryDomain.setStatus('mandatory')
apDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDateTime.setStatus('mandatory')
apConnectedStation = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19))
apConnectedStationTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1), )
if mibBuilder.loadTexts: apConnectedStationTable.setStatus('mandatory')
apConnectedStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apConnectedStationEntry.setStatus('mandatory')
apConnectedStationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apConnectedStationMacAddr.setStatus('mandatory')
apConnectedStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1xAuthenticated", 0), ("macAuthenticated", 1), ("authenticating", 2), ("allow", 3), ("blocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apConnectedStationStatus.setStatus('mandatory')
apRebootNow = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-reboot", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRebootNow.setStatus('mandatory')
apResetToFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-reset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apResetToFactoryDefault.setStatus('mandatory')
apTrapReceiveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapReceiveIpAddress.setStatus('mandatory')
apSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPEnable.setStatus('mandatory')
apSNMPReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPReadCommunity.setStatus('mandatory')
apSNMPWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPWriteCommunity.setStatus('mandatory')
apAccessControl = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("loacl", 1), ("radiusBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccessControl.setStatus('mandatory')
apAccessControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13))
apAccessControlListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13, 1), )
if mibBuilder.loadTexts: apAccessControlListTable.setStatus('mandatory')
apAccessControlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apAccessControlListEntry.setStatus('mandatory')
apAccessControlListMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccessControlListMacAddr.setStatus('mandatory')
apCtlOperate = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 14))
apAddACLMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 14, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAddACLMacAddr.setStatus('mandatory')
apDelACLMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 14, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDelACLMacAddr.setStatus('mandatory')
apSyslog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslog.setStatus('mandatory')
apSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogPort.setStatus('mandatory')
apSyslogServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogServer.setStatus('mandatory')
apWirelessSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1))
apWirelessSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2))
apWirelessMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("b-and-g", 1), ("b", 2), ("g", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWirelessMode.setStatus('mandatory')
apOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("wirelessAccessPoint", 0), ("pointToPoint", 2), ("pointToMultiPoint", 3), ("repeaterAccessPoint", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apOperateMode.setStatus('mandatory')
apBridgeWlanClientAsoc = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBridgeWlanClientAsoc.setStatus('mandatory')
apSSID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSSID.setStatus('mandatory')
apChannelNo = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apChannelNo.setStatus('mandatory')
apRemoteMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 6), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRemoteMacAddress.setStatus('mandatory')
apChildMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apChildMacAddress.setStatus('mandatory')
apBroadcastSSID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBroadcastSSID.setStatus('mandatory')
apWirelessSeparation = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWirelessSeparation.setStatus('mandatory')
apFragmentationLength = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFragmentationLength.setStatus('mandatory')
apBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBeaconInterval.setStatus('mandatory')
apRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRTSThreshold.setStatus('mandatory')
apPreambleType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPreambleType.setStatus('mandatory')
apOutputPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("minimum", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apOutputPowerLevel.setStatus('mandatory')
apDTIM = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDTIM.setStatus('mandatory')
apSuperG = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSuperG.setStatus('mandatory')
apHTTPRedirect = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHTTPRedirect.setStatus('mandatory')
apHTTPRedirectURL = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHTTPRedirectURL.setStatus('mandatory')
apDataRate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("auto-negotiate", 0), ("rate-1Mbps", 1), ("rate-2Mbps", 2), ("rate-5dot5Mbps", 3), ("rate-11Mbps", 4), ("rate-6Mbps", 5), ("rate-9Mbps", 6), ("rate-12Mbps", 7), ("rate-18Mbps", 8), ("rate-24Mbps", 9), ("rate-36Mbps", 10), ("rate-48Mbps", 11), ("rate-54Mbps", 12), ("rate-108Mbps", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRate.setStatus('mandatory')
apStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20))
apWiredEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1))
apLanRecvPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRecvPacket.setStatus('current')
apLanTransPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTransPacket.setStatus('current')
apLanRecvBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRecvBytes.setStatus('current')
apLanTransBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTransBytes.setStatus('current')
apWirelessStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2))
apWlanRecvUnicastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvUnicastPacket.setStatus('current')
apWlanTransUnicastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransUnicastPacket.setStatus('current')
apWlanRecvBroadcastPsacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvBroadcastPsacket.setStatus('current')
apWlanTransBroadcastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransBroadcastPacket.setStatus('current')
apWlanRecvMulticastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvMulticastPacket.setStatus('current')
apWlanTransMulticastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransMulticastPacket.setStatus('current')
apWlanRecvPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvPacket.setStatus('current')
apWlanTransPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransPacket.setStatus('current')
apWlanRecvBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvBytes.setStatus('current')
apWlanTransBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransBytes.setStatus('current')
apPTMPallowList = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27))
mac1 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1.setStatus('mandatory')
mac2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2.setStatus('mandatory')
mac3 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3.setStatus('mandatory')
mac4 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4.setStatus('mandatory')
apSecuritySystem = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("wpa-psk", 2), ("wpa-802dot1x", 3), ("dot1x", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecuritySystem.setStatus('mandatory')
ap802dot1xWEPKeySize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("bit64", 1), ("bit128", 2), ("bit152", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap802dot1xWEPKeySize.setStatus('mandatory')
apWEPMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 2, 3, 7))).clone(namedValues=NamedValues(("open-64WEP-MODE", 0), ("open-128WEP-MODE", 1), ("open-152WEP-MODE", 6), ("share-64WEP-MODE", 2), ("share-128WEP-MODE", 3), ("share-152WEP-MODE", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPMode.setStatus('mandatory')
apWEPKeysSet = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4))
apKeys24GSetTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1), )
if mibBuilder.loadTexts: apKeys24GSetTable.setStatus('mandatory')
apKeys24GSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apKeys24GSetEntry.setStatus('mandatory')
apKeysSetEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeysSetEnabled.setStatus('mandatory')
apKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeys.setStatus('mandatory')
apWPANetworkKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPANetworkKey.setStatus('mandatory')
apWPAEncryption = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("tkip", 0), ("aes-ccmp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAEncryption.setStatus('mandatory')
apWPAGroupKeyUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAGroupKeyUpdate.setStatus('mandatory')
apWPAGroupKeyLifetime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAGroupKeyLifetime.setStatus('mandatory')
apWPAMembershipTerminatedGroupKeyUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAMembershipTerminatedGroupKeyUpdate.setStatus('mandatory')
apPrimaryRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusServer.setStatus('mandatory')
apPrimaryRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusPort.setStatus('mandatory')
apPrimaryRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusSharedKey.setStatus('mandatory')
apPrimaryRadiusAccountServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusAccountServer.setStatus('mandatory')
apPrimaryRadiusAccountPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusAccountPort.setStatus('mandatory')
apPrimaryRadiusAccountSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusAccountSharedKey.setStatus('mandatory')
apSecondaryRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusServer.setStatus('mandatory')
apSecondaryRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusPort.setStatus('mandatory')
apSecondaryRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusSharedKey.setStatus('mandatory')
apSecondaryRadiusAccountServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusAccountServer.setStatus('mandatory')
apSecondaryRadiusAccountPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusAccountPort.setStatus('mandatory')
apSecondaryRadiusAccountSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusAccountSharedKey.setStatus('mandatory')
apReauthenticationTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReauthenticationTime.setStatus('mandatory')
mibBuilder.exportSymbols("WG102-MIB", apOperateMode=apOperateMode, apWirelessSettingGroup=apWirelessSettingGroup, apWlanRecvPacket=apWlanRecvPacket, mac3=mac3, apDTIM=apDTIM, apWEPMode=apWEPMode, apBridgeWlanClientAsoc=apBridgeWlanClientAsoc, apPTMPallowList=apPTMPallowList, wirelessAP24GGroup=wirelessAP24GGroup, apConnectedStationTable=apConnectedStationTable, apKeys=apKeys, apChildMacAddress=apChildMacAddress, apKeys24GSetTable=apKeys24GSetTable, wirelessAPSystemGroup=wirelessAPSystemGroup, apBroadcastSSID=apBroadcastSSID, apLanTransPacket=apLanTransPacket, apWirelessStat=apWirelessStat, apTrapReceiveIpAddress=apTrapReceiveIpAddress, apSystemName=apSystemName, apWPAGroupKeyLifetime=apWPAGroupKeyLifetime, apWlanRecvUnicastPacket=apWlanRecvUnicastPacket, apWlanTransPacket=apWlanTransPacket, apConnectedStation=apConnectedStation, mac1=mac1, apIPaddress=apIPaddress, apSuperG=apSuperG, apWPAMembershipTerminatedGroupKeyUpdate=apWPAMembershipTerminatedGroupKeyUpdate, apResetToFactoryDefault=apResetToFactoryDefault, apSyslog=apSyslog, apDateTime=apDateTime, apWPANetworkKey=apWPANetworkKey, apConnectedStationStatus=apConnectedStationStatus, apConnectedStationMacAddr=apConnectedStationMacAddr, apSNMPReadCommunity=apSNMPReadCommunity, apFragmentationLength=apFragmentationLength, apChannelNo=apChannelNo, apWiredEthernetStat=apWiredEthernetStat, wirelessProducts=wirelessProducts, apPrimaryRadiusPort=apPrimaryRadiusPort, apSyslogPort=apSyslogPort, apDNSServerIPAddress=apDNSServerIPAddress, apCountryDomain=apCountryDomain, apTimeZone=apTimeZone, apBeaconInterval=apBeaconInterval, apWlanTransMulticastPacket=apWlanTransMulticastPacket, apAccessControl=apAccessControl, mac4=mac4, apLanRecvPacket=apLanRecvPacket, apRemoteMacAddress=apRemoteMacAddress, version=version, apHTTPRedirect=apHTTPRedirect, apRebootNow=apRebootNow, apSecuritySystem=apSecuritySystem, apDataRate=apDataRate, apSecondaryRadiusSharedKey=apSecondaryRadiusSharedKey, apWlanRecvBytes=apWlanRecvBytes, apPrimaryRadiusAccountServer=apPrimaryRadiusAccountServer, apSecondaryRadiusServer=apSecondaryRadiusServer, apPrimaryRadiusAccountPort=apPrimaryRadiusAccountPort, apSNMPEnable=apSNMPEnable, mac2=mac2, apPreambleType=apPreambleType, apHTTPRedirectURL=apHTTPRedirectURL, apReauthenticationTime=apReauthenticationTime, apOutputPowerLevel=apOutputPowerLevel, wirelessAPManageGroup=wirelessAPManageGroup, apSyslogServer=apSyslogServer, apWPAGroupKeyUpdate=apWPAGroupKeyUpdate, apWirelessMode=apWirelessMode, apWlanTransBytes=apWlanTransBytes, apDHCPMode=apDHCPMode, apRTSThreshold=apRTSThreshold, apLanRecvBytes=apLanRecvBytes, apDaylightSaving=apDaylightSaving, apKeysSetEnabled=apKeysSetEnabled, apWirelessSeparation=apWirelessSeparation, apSecondaryRadiusAccountServer=apSecondaryRadiusAccountServer, apDelACLMacAddr=apDelACLMacAddr, wg102=wg102, apPrimaryRadiusAccountSharedKey=apPrimaryRadiusAccountSharedKey, apSecondaryRadiusAccountPort=apSecondaryRadiusAccountPort, apWlanRecvMulticastPacket=apWlanRecvMulticastPacket, apPrimaryRadiusServer=apPrimaryRadiusServer, apConnectedStationEntry=apConnectedStationEntry, apIPsubnetMask=apIPsubnetMask, apAccessControlList=apAccessControlList, apStatistic=apStatistic, apWlanTransUnicastPacket=apWlanTransUnicastPacket, apSSID=apSSID, apWirelessSecurityGroup=apWirelessSecurityGroup, apWEPKeysSet=apWEPKeysSet, ap802dot1xWEPKeySize=ap802dot1xWEPKeySize, PYSNMP_MODULE_ID=version, apWlanTransBroadcastPacket=apWlanTransBroadcastPacket, apAccessControlListEntry=apAccessControlListEntry, apSecondaryRadiusPort=apSecondaryRadiusPort, apSecondaryRadiusAccountSharedKey=apSecondaryRadiusAccountSharedKey, apWlanRecvBroadcastPsacket=apWlanRecvBroadcastPsacket, apFirmwareVersion=apFirmwareVersion, apWPAEncryption=apWPAEncryption, apAccessControlListTable=apAccessControlListTable, apGateway=apGateway, apLanTransBytes=apLanTransBytes, apKeys24GSetEntry=apKeys24GSetEntry, apPrimaryRadiusSharedKey=apPrimaryRadiusSharedKey, apSNMPWriteCommunity=apSNMPWriteCommunity, apMacAddress=apMacAddress, apAccessControlListMacAddr=apAccessControlListMacAddr, apAddACLMacAddr=apAddACLMacAddr, apCtlOperate=apCtlOperate, netgear=netgear)
