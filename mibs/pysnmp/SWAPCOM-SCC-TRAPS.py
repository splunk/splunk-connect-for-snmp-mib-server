#
# PySNMP MIB module SWAPCOM-SCC-TRAPS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWAPCOM-SCC-TRAPS
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Bits, enterprises, iso, Gauge32, NotificationType, Integer32, Counter64, IpAddress, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Bits", "enterprises", "iso", "Gauge32", "NotificationType", "Integer32", "Counter64", "IpAddress", "MibIdentifier", "ObjectIdentity")
RowStatus, TruthValue, TimeInterval, StorageType, MacAddress, TestAndIncr, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TimeInterval", "StorageType", "MacAddress", "TestAndIncr", "TextualConvention", "DisplayString", "DateAndTime")
alarmProbeAlertSource, alarmProbeSeverity, alarmProbeAlertType = mibBuilder.importSymbols("SWAPCOM-SCC", "alarmProbeAlertSource", "alarmProbeSeverity", "alarmProbeAlertType")
swapcom = ModuleIdentity((1, 3, 6, 1, 4, 1, 11308))
swapcom.setRevisions(('1970-01-01 00:00',))
if mibBuilder.loadTexts: swapcom.setLastUpdated('2007381648Z')
if mibBuilder.loadTexts: swapcom.setOrganization('Organization name')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
sccTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 4))
sqlPoolUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 11308, 4, 1)).setObjects(("SWAPCOM-SCC", "alarmProbeAlertType"), ("SWAPCOM-SCC", "alarmProbeAlertSource"), ("SWAPCOM-SCC", "alarmProbeSeverity"))
if mibBuilder.loadTexts: sqlPoolUnavailable.setStatus('current')
sqlPoolHighCheckedOutConnections = NotificationType((1, 3, 6, 1, 4, 1, 11308, 4, 2)).setObjects(("SWAPCOM-SCC", "alarmProbeAlertType"), ("SWAPCOM-SCC", "alarmProbeAlertSource"), ("SWAPCOM-SCC", "alarmProbeSeverity"))
if mibBuilder.loadTexts: sqlPoolHighCheckedOutConnections.setStatus('current')
slsUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 11308, 4, 3)).setObjects(("SWAPCOM-SCC", "alarmProbeAlertType"), ("SWAPCOM-SCC", "alarmProbeAlertSource"), ("SWAPCOM-SCC", "alarmProbeSeverity"))
if mibBuilder.loadTexts: slsUnavailable.setStatus('current')
remotePlatformUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 11308, 4, 4)).setObjects(("SWAPCOM-SCC", "alarmProbeAlertType"), ("SWAPCOM-SCC", "alarmProbeAlertSource"), ("SWAPCOM-SCC", "alarmProbeSeverity"))
if mibBuilder.loadTexts: remotePlatformUnavailable.setStatus('current')
schedulerTaskError = NotificationType((1, 3, 6, 1, 4, 1, 11308, 4, 5)).setObjects(("SWAPCOM-SCC", "alarmProbeAlertType"), ("SWAPCOM-SCC", "alarmProbeAlertSource"), ("SWAPCOM-SCC", "alarmProbeSeverity"))
if mibBuilder.loadTexts: schedulerTaskError.setStatus('current')
mibBuilder.exportSymbols("SWAPCOM-SCC-TRAPS", sqlPoolUnavailable=sqlPoolUnavailable, sccTraps=sccTraps, PYSNMP_MODULE_ID=swapcom, remotePlatformUnavailable=remotePlatformUnavailable, swapcom=swapcom, org=org, enterprises=enterprises, dod=dod, internet=internet, slsUnavailable=slsUnavailable, sqlPoolHighCheckedOutConnections=sqlPoolHighCheckedOutConnections, schedulerTaskError=schedulerTaskError, private=private)
