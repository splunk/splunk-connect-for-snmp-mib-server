#
# PySNMP MIB module BESTPOWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BESTPOWER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:20:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ModuleIdentity, TimeTicks, enterprises, iso, Gauge32, Integer32, ObjectIdentity, Unsigned32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ModuleIdentity", "TimeTicks", "enterprises", "iso", "Gauge32", "Integer32", "ObjectIdentity", "Unsigned32", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class NonNegativeInteger(Integer32):
    pass

class PositiveInteger(Integer32):
    pass

bestPower = MibIdentifier((1, 3, 6, 1, 4, 1, 2947))
bestLink = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 4))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 7))
upsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 8))
upsIdentUpsName = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUpsName.setStatus('mandatory')
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentModel.setStatus('mandatory')
upsIdentVARating = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentVARating.setStatus('mandatory')
upsIdentUpsType = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standby", 1), ("online", 2), ("offline", 3), ("lineInteractive", 4), ("hybrid", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUpsType.setStatus('mandatory')
upsIdentUpsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUpsSerialNumber.setStatus('mandatory')
upsIdentUpsIdentification = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentUpsIdentification.setStatus('mandatory')
upsIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentFirmwareRevision.setStatus('mandatory')
upsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentDateOfManufacture.setStatus('mandatory')
upsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inverterOff", 1), ("inverterOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatus.setStatus('mandatory')
upsBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTimeOnBattery.setStatus('mandatory')
upsBatteryRuntimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeRemaining.setStatus('mandatory')
upsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltage.setStatus('mandatory')
upsBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCurrent.setStatus('mandatory')
upsBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTemperature.setStatus('mandatory')
upsBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryLastReplaceDate.setStatus('mandatory')
upsInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPhase.setStatus('mandatory')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
upsInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage.setStatus('mandatory')
upsInputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent.setStatus('mandatory')
upsInputPower = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPower.setStatus('mandatory')
upsInputPhase2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6))
upsInputP2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputP2.setStatus('mandatory')
upsInputFrequency2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency2.setStatus('mandatory')
upsInputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage2.setStatus('mandatory')
upsInputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent2.setStatus('mandatory')
upsInputPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPower2.setStatus('mandatory')
upsInputPhase3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7))
upsInputP3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputP3.setStatus('mandatory')
upsInputFrequency3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency3.setStatus('mandatory')
upsInputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage3.setStatus('mandatory')
upsInputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent3.setStatus('mandatory')
upsInputPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPower3.setStatus('mandatory')
upsOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onBypass", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputStatus.setStatus('mandatory')
upsOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPhase.setStatus('mandatory')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
upsOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage.setStatus('mandatory')
upsOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent.setStatus('mandatory')
upsOutputTruePower = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTruePower.setStatus('mandatory')
upsOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputApparentPower.setStatus('mandatory')
upsOutputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor.setStatus('mandatory')
upsOutputPercentLoad = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPercentLoad.setStatus('mandatory')
upsOutputPhase2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10))
upsOutputP2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputP2.setStatus('mandatory')
upsOutputFrequency2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency2.setStatus('mandatory')
upsOutputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage2.setStatus('mandatory')
upsOutputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent2.setStatus('mandatory')
upsOutputTruePower2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTruePower2.setStatus('mandatory')
upsOutputApparentPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputApparentPower2.setStatus('mandatory')
upsOutputPowerFactor2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor2.setStatus('mandatory')
upsOutputPhase3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11))
upsOutputP3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputP3.setStatus('mandatory')
upsOutputFrequency3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency3.setStatus('mandatory')
upsOutputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage3.setStatus('mandatory')
upsOutputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent3.setStatus('mandatory')
upsOutputTruePower3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTruePower3.setStatus('mandatory')
upsOutputApparentPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputApparentPower3.setStatus('mandatory')
upsOutputPowerFactor3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor3.setStatus('mandatory')
upsConfigLowRuntimeSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigLowRuntimeSetpoint.setStatus('mandatory')
upsConfigDelayBeforeRestart = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDelayBeforeRestart.setStatus('mandatory')
upsConfigDelayBeforeShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDelayBeforeShutdown.setStatus('mandatory')
upsConfigTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4))
upsConfigTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("logic", 2), ("inverter", 3), ("battery", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigTestLevel.setStatus('mandatory')
upsConfigDaysBetweenTests = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 366))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDaysBetweenTests.setStatus('mandatory')
upsConfigBatteryTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryTestDuration.setStatus('mandatory')
upsConfigScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5), )
if mibBuilder.loadTexts: upsConfigScheduleTable.setStatus('mandatory')
upsConfigScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1), ).setIndexNames((0, "BESTPOWER-MIB", "upsConfigScheduleIndex"))
if mibBuilder.loadTexts: upsConfigScheduleEntry.setStatus('mandatory')
upsConfigScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigScheduleIndex.setStatus('mandatory')
upsConfigScheduleShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleShutdownDay.setStatus('mandatory')
upsConfigScheduleShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleShutdownTime.setStatus('mandatory')
upsConfigScheduleRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleRestartDay.setStatus('mandatory')
upsConfigScheduleRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleRestartTime.setStatus('mandatory')
upsConfigbestLink = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8))
bestLinkHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkHistoryLogFrequency.setStatus('mandatory')
bestLinkRefreshFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkRefreshFrequency.setStatus('mandatory')
bestLinkNetId = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkNetId.setStatus('mandatory')
bestLinkGateway = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkGateway.setStatus('mandatory')
bestLinkNetMask = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkNetMask.setStatus('mandatory')
bestLinkSysDate = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkSysDate.setStatus('mandatory')
bestLinkSysTime = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkSysTime.setStatus('mandatory')
bestLinkTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkTftpFileName.setStatus('mandatory')
bestLinkTftpHost = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkTftpHost.setStatus('mandatory')
bestLinkFlashEEPROM = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkFlashEEPROM.setStatus('mandatory')
bestLinkPrimaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkPrimaryTimeServer.setStatus('mandatory')
bestLinkSecondaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkSecondaryTimeServer.setStatus('mandatory')
bestLinkSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bestLinkSoftwareVersion.setStatus('mandatory')
upsConfigTrapsReceivers = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9))
upsConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1), )
if mibBuilder.loadTexts: upsConfigTrapsReceiversTable.setStatus('mandatory')
upsConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1), ).setIndexNames((0, "BESTPOWER-MIB", "trapsIndex"))
if mibBuilder.loadTexts: upsConfigTrapsReceiversEntry.setStatus('mandatory')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
severityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: severityLevel.setStatus('mandatory')
receiverAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverAccept.setStatus('mandatory')
upsConfigRegisteredShutdownClients = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10))
upsRegisteredShutdownClientsTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1), )
if mibBuilder.loadTexts: upsRegisteredShutdownClientsTable.setStatus('mandatory')
upsRegisteredShutdownClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1, 1), ).setIndexNames((0, "BESTPOWER-MIB", "upsRegisteredShutdownClientsIndex"))
if mibBuilder.loadTexts: upsRegisteredShutdownClientsEntry.setStatus('mandatory')
upsRegisteredShutdownClientsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRegisteredShutdownClientsIndex.setStatus('mandatory')
upsRegisteredShutdownClientsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRegisteredShutdownClientsIPAddress.setStatus('mandatory')
upsRegisteredShutdownClientsTotalNumberOf = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRegisteredShutdownClientsTotalNumberOf.setStatus('mandatory')
upsControlTurnOffUPS = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("cancelUpsOff", 1), ("upsOff", 2), ("rebootUps", 3), ("cancelrebootUps", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlTurnOffUPS.setStatus('mandatory')
upsControlActivateUpsScheduling = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlActivateUpsScheduling.setStatus('mandatory')
upsManualTests = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noTestInitiated", 1), ("initiateManualBeeperTest", 2), ("initiateManualSystemTest", 3), ("initiateManualInverterTest", 4), ("initiateManualBatteryTest", 5), ("abortManualBeeperTest", 6), ("abortManualSystemTest", 7), ("abortManualInverterTest", 8), ("abortManualBatteryTest", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsManualTests.setStatus('mandatory')
upsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmsPresent.setStatus('mandatory')
upsLastKnownAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("onBattery", 1), ("lowRuntime", 2), ("nearLowBattery", 3), ("lowBattery", 4), ("highBattery", 5), ("checkBattery", 6), ("replaceBattery", 7), ("checkInverter", 8), ("batteriesDisconnected", 9), ("outputOverload", 10), ("lowAcOut", 11), ("circuitBreakerWarning", 12), ("circuitBreakerShdn", 13), ("bypassOn", 14), ("autoBypass", 15), ("siteWiringFault", 16), ("checkFan", 17), ("highAmbTemp", 18), ("highHSTemp", 19), ("highXFMRTemp", 20), ("highPFMTemp", 21), ("probeMissing", 22), ("checkPowerSupply", 23), ("tapRegulator", 24), ("relayFailure", 25), ("checkFuse", 26), ("checkMOV", 27), ("memoryError", 28), ("callService", 29), ("upsFailed", 30), ("userTest", 31), ("testInProgress", 32), ("diagnosticTestFailed", 33), ("ePO", 34), ("upsOff", 35), ("communicationsLost", 36), ("noAlarm", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsLastKnownAlarm.setStatus('mandatory')
upsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3), )
if mibBuilder.loadTexts: upsAlarmTable.setStatus('mandatory')
upsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1), ).setIndexNames((0, "BESTPOWER-MIB", "upsAlarmIndex"))
if mibBuilder.loadTexts: upsAlarmEntry.setStatus('mandatory')
upsAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmIndex.setStatus('mandatory')
upsAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("onBattery", 1), ("lowRuntime", 2), ("nearLowBattery", 3), ("lowBattery", 4), ("highBattery", 5), ("checkBattery", 6), ("replaceBattery", 7), ("checkInverter", 8), ("batteriesDisconnected", 9), ("outputOverload", 10), ("lowAcOut", 11), ("circuitBreakerWarning", 12), ("circuitBreakerShdn", 13), ("bypassOn", 14), ("autoBypass", 15), ("siteWiringFault", 16), ("checkFan", 17), ("highAmbTemp", 18), ("highHSTemp", 19), ("highXFMRTemp", 20), ("highPFMTemp", 21), ("probeMissing", 22), ("checkPowerSupply", 23), ("tapRegulator", 24), ("relayFailure", 25), ("checkFuse", 26), ("checkMOV", 27), ("memoryError", 28), ("callService", 29), ("upsFailed", 30), ("userTest", 31), ("testInProgress", 32), ("diagnosticTestFailed", 33), ("ePO", 34), ("upsOff", 35), ("communicationsLost", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmName.setStatus('mandatory')
upsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTime.setStatus('mandatory')
upsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4))
upsAlarmOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBattery.setStatus('mandatory')
upsAlarmLowRuntime = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowRuntime.setStatus('mandatory')
upsAlarmNearLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmNearLowBattery.setStatus('mandatory')
upsAlarmLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowBattery.setStatus('mandatory')
upsAlarmHighBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighBattery.setStatus('mandatory')
upsAlarmCheckBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckBattery.setStatus('mandatory')
upsAlarmReplaceBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmReplaceBattery.setStatus('mandatory')
upsAlarmCheckInverter = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckInverter.setStatus('mandatory')
upsAlarmBatteriesDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteriesDisconnected.setStatus('mandatory')
upsAlarmOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOverload.setStatus('mandatory')
upsAlarmLowAcOut = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowAcOut.setStatus('mandatory')
upsAlarmCircuitBreakerWarning = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCircuitBreakerWarning.setStatus('mandatory')
upsAlarmCircuitBreakerShdn = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCircuitBreakerShdn.setStatus('mandatory')
upsAlarmBypassOn = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBypassOn.setStatus('mandatory')
upsAlarmAutoBypass = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmAutoBypass.setStatus('mandatory')
upsAlarmSiteWiringFault = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmSiteWiringFault.setStatus('mandatory')
upsAlarmCheckFan = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckFan.setStatus('mandatory')
upsAlarmHighAmbTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighAmbTemp.setStatus('mandatory')
upsAlarmHighHSTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighHSTemp.setStatus('mandatory')
upsAlarmHighXFMRTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighXFMRTemp.setStatus('mandatory')
upsAlarmHighPFMTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighPFMTemp.setStatus('mandatory')
upsAlarmProbeMissing = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmProbeMissing.setStatus('mandatory')
upsAlarmCheckPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckPowerSupply.setStatus('mandatory')
upsAlarmTapRegulator = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTapRegulator.setStatus('mandatory')
upsAlarmRelayFailure = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmRelayFailure.setStatus('mandatory')
upsAlarmCheckFuse = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckFuse.setStatus('mandatory')
upsAlarmCheckMOV = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckMOV.setStatus('mandatory')
upsAlarmMemoryError = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmMemoryError.setStatus('mandatory')
upsAlarmCallService = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCallService.setStatus('mandatory')
upsAlarmupsFailed = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmupsFailed.setStatus('mandatory')
upsAlarmUserTest = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUserTest.setStatus('mandatory')
upsAlarmTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTestInProgress.setStatus('mandatory')
upsAlarmDiagnosticTestFailed = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDiagnosticTestFailed.setStatus('mandatory')
upsAlarmEPO = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmEPO.setStatus('mandatory')
upsAlarmUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUpsOff.setStatus('mandatory')
upsAlarmCommunicationsLost = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCommunicationsLost.setStatus('mandatory')
upsTrapPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,1))
upsTrapPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,2))
upsTrapUPSOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,3)).setObjects(("BESTPOWER-MIB", "upsBatteryTimeOnBattery"), ("BESTPOWER-MIB", "upsBatteryRuntimeRemaining"), ("BESTPOWER-MIB", "upsConfigLowRuntimeSetpoint"), ("BESTPOWER-MIB", "upsBatteryVoltage"))
upsTrapUPSNotOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,4))
upsTrapLowRuntime = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,5))
upsTrapUPSCanRunOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,6))
upsTrapNearLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,7)).setObjects(("BESTPOWER-MIB", "upsBatteryVoltage"))
upsTrapHighBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,8)).setObjects(("BESTPOWER-MIB", "upsBatteryVoltage"))
upsTrapBatteryOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,9))
upsTrapLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,10)).setObjects(("BESTPOWER-MIB", "upsBatteryVoltage"))
upsTrapCheckBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,11))
upsTrapReplaceBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,12))
upsTrapCheckInverter = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,13))
upsTrapBatteriesDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,14))
upsTrapOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,15))
upsTrapUPSNoLongerOverloaded = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,16))
upsTrapLowAcOut = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,17))
upsTrapCircuitBreakerWarning = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,18))
upsTrapCircuitBreakerOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,19))
upsTrapCircuitBreakerShdn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,20))
upsTrapBypassOn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,21))
upsTrapUPSOnline = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,22))
upsTrapSiteWiringFault = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,23))
upsTrapCheckFan = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,24))
upsTrapHighUPSTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,25))
upsTrapTempOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,26))
upsTrapHighHSTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,27))
upsTrapHSTempOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,28))
upsTrapHighXFMRTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,29))
upsTrapHighPFMTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,30))
upsTrapProbeMissing = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,31))
upsTrapProbeReconnected = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,32))
upsTrapCheckPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,33))
upsTrapTapRegulatorFault = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,34))
upsTrapRelayFailure = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,35))
upsTrapCheckFuse = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,36))
upsTrapCheckMOV = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,37))
upsTrapMemoryError = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,38))
upsTrapCallService = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,39))
upsTrapManualAlarmBeeperTestInitiated = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,40))
upsTrapManualAlarmBeeperTestAborted = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,41))
upsTrapScheduledTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,42))
upsTrapScheduledTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,43))
upsTrapCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,44))
upsTrapCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,45))
upsTrapUPSGoingDown = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,46))
upsTrapUPSTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,47))
upsTrapUPSSleeping = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,48))
upsTrapUPSWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,49))
upsTrapUPSRebooted = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,50))
upsTrapEmergencyPowerOFF = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,51))
upsTrapHistLogWarn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,52))
upsTrapEventLogWarn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,53))
upsTrapUPSFail = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,54))
mibBuilder.exportSymbols("BESTPOWER-MIB", upsAlarmCheckPowerSupply=upsAlarmCheckPowerSupply, upsConfigTest=upsConfigTest, upsOutputVoltage=upsOutputVoltage, upsTrapPowerFail=upsTrapPowerFail, upsTrapCheckBattery=upsTrapCheckBattery, upsInputFrequency=upsInputFrequency, upsConfigScheduleRestartDay=upsConfigScheduleRestartDay, upsConfigScheduleShutdownDay=upsConfigScheduleShutdownDay, upsTrapUPSGoingDown=upsTrapUPSGoingDown, bestLinkRefreshFrequency=bestLinkRefreshFrequency, upsTrapCheckPowerSupply=upsTrapCheckPowerSupply, upsAlarmSiteWiringFault=upsAlarmSiteWiringFault, upsTrapTapRegulatorFault=upsTrapTapRegulatorFault, upsAlarmIndex=upsAlarmIndex, upsConfigScheduleShutdownTime=upsConfigScheduleShutdownTime, upsOutputApparentPower3=upsOutputApparentPower3, upsOutputPowerFactor3=upsOutputPowerFactor3, upsAlarmCircuitBreakerWarning=upsAlarmCircuitBreakerWarning, upsInputVoltage3=upsInputVoltage3, upsInputFrequency2=upsInputFrequency2, upsAlarmLowAcOut=upsAlarmLowAcOut, upsIdentUpsType=upsIdentUpsType, upsAlarmCircuitBreakerShdn=upsAlarmCircuitBreakerShdn, upsOutputCurrent=upsOutputCurrent, upsAlarmEntry=upsAlarmEntry, upsWellKnownAlarms=upsWellKnownAlarms, upsInputP2=upsInputP2, upsBatteryStatus=upsBatteryStatus, upsTrapCheckFan=upsTrapCheckFan, upsTrapHighHSTemp=upsTrapHighHSTemp, upsTrapUPSNotOnBattery=upsTrapUPSNotOnBattery, upsInputPower3=upsInputPower3, upsRegisteredShutdownClientsEntry=upsRegisteredShutdownClientsEntry, PositiveInteger=PositiveInteger, upsInputVoltage=upsInputVoltage, upsTrapCommunicationLost=upsTrapCommunicationLost, upsOutputFrequency=upsOutputFrequency, upsOutputTruePower2=upsOutputTruePower2, bestLinkTftpHost=bestLinkTftpHost, upsConfigScheduleRestartTime=upsConfigScheduleRestartTime, upsInputCurrent2=upsInputCurrent2, upsConfigScheduleIndex=upsConfigScheduleIndex, bestLinkSysDate=bestLinkSysDate, bestLinkFlashEEPROM=bestLinkFlashEEPROM, upsConfigTrapsReceiversEntry=upsConfigTrapsReceiversEntry, upsConfigTrapsReceivers=upsConfigTrapsReceivers, upsAlarmBatteriesDisconnected=upsAlarmBatteriesDisconnected, upsTrapLowRuntime=upsTrapLowRuntime, upsAlarmOnBattery=upsAlarmOnBattery, upsInputP3=upsInputP3, upsTrapUPSTurnedOff=upsTrapUPSTurnedOff, upsTrapNearLowBattery=upsTrapNearLowBattery, upsAlarmCheckInverter=upsAlarmCheckInverter, upsControl=upsControl, upsAlarmBypassOn=upsAlarmBypassOn, upsAlarmDiagnosticTestFailed=upsAlarmDiagnosticTestFailed, upsTrapUPSNoLongerOverloaded=upsTrapUPSNoLongerOverloaded, upsTrapCircuitBreakerWarning=upsTrapCircuitBreakerWarning, upsRegisteredShutdownClientsIPAddress=upsRegisteredShutdownClientsIPAddress, upsTrapUPSOnBattery=upsTrapUPSOnBattery, trapsReceiverAddr=trapsReceiverAddr, upsAlarmCommunicationsLost=upsAlarmCommunicationsLost, trapsIndex=trapsIndex, bestLinkTftpFileName=bestLinkTftpFileName, upsIdentUpsSerialNumber=upsIdentUpsSerialNumber, upsOutputTruePower=upsOutputTruePower, upsTrapManualAlarmBeeperTestInitiated=upsTrapManualAlarmBeeperTestInitiated, upsOutputP3=upsOutputP3, upsAlarmTestInProgress=upsAlarmTestInProgress, upsControlActivateUpsScheduling=upsControlActivateUpsScheduling, upsTrapCheckFuse=upsTrapCheckFuse, upsOutputApparentPower2=upsOutputApparentPower2, receiverCommunityString=receiverCommunityString, upsTrapScheduledTestInProgress=upsTrapScheduledTestInProgress, upsTrapProbeReconnected=upsTrapProbeReconnected, upsTrapLowBattery=upsTrapLowBattery, NonNegativeInteger=NonNegativeInteger, upsBattery=upsBattery, upsRegisteredShutdownClientsTable=upsRegisteredShutdownClientsTable, upsRegisteredShutdownClientsTotalNumberOf=upsRegisteredShutdownClientsTotalNumberOf, upsTrapTempOK=upsTrapTempOK, upsTest=upsTest, upsBatteryCurrent=upsBatteryCurrent, upsAlarmTable=upsAlarmTable, upsIdentFirmwareRevision=upsIdentFirmwareRevision, upsConfigScheduleTable=upsConfigScheduleTable, bestLinkSoftwareVersion=bestLinkSoftwareVersion, bestLinkSecondaryTimeServer=bestLinkSecondaryTimeServer, upsAlarmReplaceBattery=upsAlarmReplaceBattery, upsAlarmOutputOverload=upsAlarmOutputOverload, upsAlarmupsFailed=upsAlarmupsFailed, upsInput=upsInput, upsTrapHighXFMRTemp=upsTrapHighXFMRTemp, upsConfigDelayBeforeShutdown=upsConfigDelayBeforeShutdown, upsTrapUPSFail=upsTrapUPSFail, upsAlarmLowRuntime=upsAlarmLowRuntime, upsConfigLowRuntimeSetpoint=upsConfigLowRuntimeSetpoint, upsAlarmCheckFuse=upsAlarmCheckFuse, upsOutputTruePower3=upsOutputTruePower3, upsOutputApparentPower=upsOutputApparentPower, upsAlarm=upsAlarm, upsAlarmsPresent=upsAlarmsPresent, upsAlarmHighHSTemp=upsAlarmHighHSTemp, upsAlarmHighPFMTemp=upsAlarmHighPFMTemp, upsTrapHighUPSTemp=upsTrapHighUPSTemp, upsOutputVoltage3=upsOutputVoltage3, upsConfigTestLevel=upsConfigTestLevel, upsOutputPercentLoad=upsOutputPercentLoad, upsTrapBatteriesDisconnected=upsTrapBatteriesDisconnected, upsIdentDateOfManufacture=upsIdentDateOfManufacture, upsInputPower=upsInputPower, upsOutputVoltage2=upsOutputVoltage2, upsTrapOutputOverload=upsTrapOutputOverload, upsOutputFrequency3=upsOutputFrequency3, upsConfigScheduleEntry=upsConfigScheduleEntry, upsIdentUpsName=upsIdentUpsName, upsAlarmName=upsAlarmName, upsOutput=upsOutput, severityLevel=severityLevel, upsAlarmCallService=upsAlarmCallService, upsTrapScheduledTestFailed=upsTrapScheduledTestFailed, upsBatteryTemperature=upsBatteryTemperature, upsTrapHighBattery=upsTrapHighBattery, upsTrapCheckInverter=upsTrapCheckInverter, upsTrapRelayFailure=upsTrapRelayFailure, upsTrapCircuitBreakerShdn=upsTrapCircuitBreakerShdn, upsBatteryTimeOnBattery=upsBatteryTimeOnBattery, upsAlarmMemoryError=upsAlarmMemoryError, upsOutputPhase3=upsOutputPhase3, upsTrapEmergencyPowerOFF=upsTrapEmergencyPowerOFF, upsControlTurnOffUPS=upsControlTurnOffUPS, bestLinkNetId=bestLinkNetId, upsOutputPowerFactor2=upsOutputPowerFactor2, upsTrapReplaceBattery=upsTrapReplaceBattery, upsAlarmAutoBypass=upsAlarmAutoBypass, upsTrapHistLogWarn=upsTrapHistLogWarn, upsInputPower2=upsInputPower2, upsAlarmLowBattery=upsAlarmLowBattery, upsTrapCommunicationRestored=upsTrapCommunicationRestored, upsAlarmNearLowBattery=upsAlarmNearLowBattery, upsAlarmUpsOff=upsAlarmUpsOff, upsConfigDelayBeforeRestart=upsConfigDelayBeforeRestart, upsAlarmEPO=upsAlarmEPO, upsConfigTrapsReceiversTable=upsConfigTrapsReceiversTable, upsIdentVARating=upsIdentVARating, upsTrapProbeMissing=upsTrapProbeMissing, bestLinkNetMask=bestLinkNetMask, bestLinkSysTime=bestLinkSysTime, upsBatteryRuntimeRemaining=upsBatteryRuntimeRemaining, bestLink=bestLink, upsManualTests=upsManualTests, upsOutputStatus=upsOutputStatus, upsBatteryLastReplaceDate=upsBatteryLastReplaceDate, receiverAccept=receiverAccept, upsOutputCurrent2=upsOutputCurrent2, upsAlarmHighAmbTemp=upsAlarmHighAmbTemp, upsInputPhase2=upsInputPhase2, upsTrapSiteWiringFault=upsTrapSiteWiringFault, upsTrapHighPFMTemp=upsTrapHighPFMTemp, upsIdentUpsIdentification=upsIdentUpsIdentification, upsTrapUPSSleeping=upsTrapUPSSleeping, bestPower=bestPower, bestLinkPrimaryTimeServer=bestLinkPrimaryTimeServer, upsConfigBatteryTestDuration=upsConfigBatteryTestDuration, upsConfigRegisteredShutdownClients=upsConfigRegisteredShutdownClients, upsAlarmTime=upsAlarmTime, upsTrapUPSRebooted=upsTrapUPSRebooted, upsOutputPowerFactor=upsOutputPowerFactor, upsAlarmCheckFan=upsAlarmCheckFan, upsOutputFrequency2=upsOutputFrequency2, upsAlarmHighXFMRTemp=upsAlarmHighXFMRTemp, upsInputCurrent=upsInputCurrent, upsAlarmRelayFailure=upsAlarmRelayFailure, upsConfig=upsConfig, bestLinkGateway=bestLinkGateway, bestLinkHistoryLogFrequency=bestLinkHistoryLogFrequency, upsTrapUPSCanRunOnBattery=upsTrapUPSCanRunOnBattery, upsInputFrequency3=upsInputFrequency3, upsTrapCircuitBreakerOK=upsTrapCircuitBreakerOK, upsInputPhase=upsInputPhase, upsIdentModel=upsIdentModel, upsAlarmHighBattery=upsAlarmHighBattery, upsTrapManualAlarmBeeperTestAborted=upsTrapManualAlarmBeeperTestAborted, upsInputVoltage2=upsInputVoltage2, upsBatteryVoltage=upsBatteryVoltage, upsAlarmUserTest=upsAlarmUserTest, upsTrapPowerRestored=upsTrapPowerRestored, upsTrapLowAcOut=upsTrapLowAcOut, upsAlarmCheckMOV=upsAlarmCheckMOV, upsTrapCallService=upsTrapCallService, upsTrapUPSOnline=upsTrapUPSOnline, upsIdent=upsIdent, upsAlarmCheckBattery=upsAlarmCheckBattery, upsAlarmTapRegulator=upsAlarmTapRegulator, upsOutputPhase2=upsOutputPhase2, upsTrapHSTempOK=upsTrapHSTempOK, upsTrapUPSWokeUp=upsTrapUPSWokeUp, upsTrapCheckMOV=upsTrapCheckMOV, upsOutputPhase=upsOutputPhase, upsLastKnownAlarm=upsLastKnownAlarm, upsConfigbestLink=upsConfigbestLink, upsInputCurrent3=upsInputCurrent3, upsConfigDaysBetweenTests=upsConfigDaysBetweenTests, upsTrapBatteryOK=upsTrapBatteryOK, upsOutputP2=upsOutputP2, upsOutputCurrent3=upsOutputCurrent3, upsTrapMemoryError=upsTrapMemoryError, upsTrapBypassOn=upsTrapBypassOn, upsAlarmProbeMissing=upsAlarmProbeMissing, upsInputPhase3=upsInputPhase3, upsTrapEventLogWarn=upsTrapEventLogWarn, upsRegisteredShutdownClientsIndex=upsRegisteredShutdownClientsIndex)
