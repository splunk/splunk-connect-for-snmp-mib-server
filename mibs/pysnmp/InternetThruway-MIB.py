#
# PySNMP MIB module InternetThruway-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/InternetThruway-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter32, NotificationType, MibIdentifier, Gauge32, Bits, iso, Integer32, TimeTicks, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter32", "NotificationType", "MibIdentifier", "Gauge32", "Bits", "iso", "Integer32", "TimeTicks", "enterprises", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nortel = MibIdentifier((1, 3, 6, 1, 4, 1, 562))
dialaccess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14))
csg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 1))
components = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 2))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 3))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 4))
ncServer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 5))
ss7 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 6))
omData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7))
disk = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1))
linkOMs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1))
maintenanceOMs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 2))
callOMs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3))
trunkGroupOMs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4))
phoneNumberOMs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5))
systemOMs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6))
nasOMs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7))
class TimeString(DisplayString):
    pass

partitionTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1), )
if mibBuilder.loadTexts: partitionTable.setStatus('mandatory')
partitionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1), ).setIndexNames((0, "InternetThruway-MIB", "partitionIndex"))
if mibBuilder.loadTexts: partitionTableEntry.setStatus('mandatory')
class PartitionSpaceStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("spaceAlarmOff", 1), ("spaceAlarmOn", 2))

partitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: partitionIndex.setStatus('mandatory')
partitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionName.setStatus('mandatory')
partitionPercentFull = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPercentFull.setStatus('mandatory')
partitionMegsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionMegsFree.setStatus('mandatory')
partitionSpaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1, 5), PartitionSpaceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSpaceStatus.setStatus('mandatory')
partitionSpaceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSpaceKey.setStatus('mandatory')
partitionSpaceTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 1, 1, 1, 1, 7), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSpaceTimeStamp.setStatus('mandatory')
componentTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10), )
if mibBuilder.loadTexts: componentTable.setStatus('mandatory')
componentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1), ).setIndexNames((0, "InternetThruway-MIB", "componentIndex"))
if mibBuilder.loadTexts: componentTableEntry.setStatus('mandatory')
class ComponentIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("oolsproxy", 1), ("climan", 2), ("arm", 3), ("sem", 4), ("hgm", 5), ("survman", 6), ("ss7scm", 7), ("ss7opm", 8), ("ss7cheni", 9))

class ComponentSysmanState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("inProvisionedState", 1), ("notInProvisionedState", 2), ("unknown", 3))

componentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 1), ComponentIndex())
if mibBuilder.loadTexts: componentIndex.setStatus('mandatory')
componentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentName.setStatus('mandatory')
compSecsInCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compSecsInCurrentState.setStatus('mandatory')
compProvStateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 4), ComponentSysmanState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compProvStateStatus.setStatus('mandatory')
compProvStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compProvStateKey.setStatus('mandatory')
compProvStateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 6), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compProvStateTimeStamp.setStatus('mandatory')
compDebugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compDebugStatus.setStatus('mandatory')
compDebugKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compDebugKey.setStatus('mandatory')
compDebugTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 9), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compDebugTimeStamp.setStatus('mandatory')
compRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compRestartStatus.setStatus('mandatory')
compRestartKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compRestartKey.setStatus('mandatory')
compRestartTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 2, 10, 1, 12), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compRestartTimeStamp.setStatus('mandatory')
linksetTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 1), )
if mibBuilder.loadTexts: linksetTable.setStatus('mandatory')
linksetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 1, 1), ).setIndexNames((0, "InternetThruway-MIB", "linksetIndex"))
if mibBuilder.loadTexts: linksetTableEntry.setStatus('mandatory')
class LinksetState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("available", 1), ("unAvailable", 2))

linksetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: linksetIndex.setStatus('mandatory')
linksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linksetId.setStatus('mandatory')
linksetAdjPointcode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linksetAdjPointcode.setStatus('mandatory')
linksetState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 1, 1, 4), LinksetState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linksetState.setStatus('mandatory')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2), )
if mibBuilder.loadTexts: linkTable.setStatus('mandatory')
linkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1), ).setIndexNames((0, "InternetThruway-MIB", "linksetIndex"), (0, "InternetThruway-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkTableEntry.setStatus('mandatory')
class LinkState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("available", 1), ("unAvailable", 2))

class LinkInhibitionState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unInhibited", 1), ("localInhibited", 2), ("remoteInhibited", 3), ("localRemoteInhibited", 4))

class LinkCongestionState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notCongested", 1), ("congested", 2))

class LinkAlignmentState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("aligned", 1), ("notAligned", 2))

linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: linkIndex.setStatus('mandatory')
linkId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkId.setStatus('mandatory')
linkHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkHostname.setStatus('mandatory')
linkCardDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCardDeviceName.setStatus('mandatory')
linkState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 5), LinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkState.setStatus('mandatory')
linkInhibitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 6), LinkInhibitionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInhibitionState.setStatus('mandatory')
linkCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 7), LinkCongestionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCongestionState.setStatus('mandatory')
linkAlignmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 8), LinkAlignmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignmentState.setStatus('mandatory')
linkNumMSUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumMSUReceived.setStatus('mandatory')
linkNumMSUDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumMSUDiscarded.setStatus('mandatory')
linkNumMSUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumMSUTransmitted.setStatus('mandatory')
linkNumSIFReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumSIFReceived.setStatus('mandatory')
linkNumSIFTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumSIFTransmitted.setStatus('mandatory')
linkNumAutoChangeovers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumAutoChangeovers.setStatus('mandatory')
linkNumUnexpectedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumUnexpectedMsgs.setStatus('mandatory')
routeTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3), )
if mibBuilder.loadTexts: routeTable.setStatus('mandatory')
routeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3, 1), ).setIndexNames((0, "InternetThruway-MIB", "routeIndex"))
if mibBuilder.loadTexts: routeTableEntry.setStatus('mandatory')
class RouteState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("accessible", 1), ("inaccessible", 2), ("restricted", 3))

routeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: routeIndex.setStatus('mandatory')
routeId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeId.setStatus('mandatory')
routeDestPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeDestPointCode.setStatus('mandatory')
routeState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3, 1, 4), RouteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeState.setStatus('mandatory')
routeRank = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeRank.setStatus('mandatory')
routeLinksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeLinksetId.setStatus('mandatory')
destinationTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 4), )
if mibBuilder.loadTexts: destinationTable.setStatus('mandatory')
destinationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 4, 1), ).setIndexNames((0, "InternetThruway-MIB", "destIndex"))
if mibBuilder.loadTexts: destinationTableEntry.setStatus('mandatory')
class DestinationState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("accessible", 1), ("inaccessible", 2), ("restricted", 3))

destIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: destIndex.setStatus('mandatory')
destPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destPointCode.setStatus('mandatory')
destState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 4, 1, 3), DestinationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destState.setStatus('mandatory')
destRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destRuleId.setStatus('mandatory')
ncServerId = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncServerId.setStatus('mandatory')
ncServerName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncServerName.setStatus('mandatory')
ncHostName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHostName.setStatus('mandatory')
ncEthernetName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncEthernetName.setStatus('mandatory')
ncEthernetIP = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncEthernetIP.setStatus('mandatory')
ncClusterName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncClusterName.setStatus('mandatory')
ncClusterIP = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncClusterIP.setStatus('mandatory')
ncOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncOperationalState.setStatus('mandatory')
ncStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStandbyState.setStatus('mandatory')
ncAvailabilityState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncAvailabilityState.setStatus('mandatory')
ncSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncSoftwareVersion.setStatus('mandatory')
class UpgradeInProgress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2)

ncUpgradeInProgress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 13), UpgradeInProgress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncUpgradeInProgress.setStatus('mandatory')
hgAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 10), )
if mibBuilder.loadTexts: hgAlarmTable.setStatus('mandatory')
hgAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 10, 1), ).setIndexNames((0, "InternetThruway-MIB", "hgIndex"))
if mibBuilder.loadTexts: hgAlarmTableEntry.setStatus('mandatory')
hgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hgIndex.setStatus('mandatory')
hgName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgName.setStatus('mandatory')
hgKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgKey.setStatus('mandatory')
hgAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 10, 1, 4), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgAlarmTimeStamp.setStatus('mandatory')
hgIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgIPAddress.setStatus('mandatory')
nasAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11), )
if mibBuilder.loadTexts: nasAlarmTable.setStatus('mandatory')
nasAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11, 1), ).setIndexNames((0, "InternetThruway-MIB", "nasIndex"))
if mibBuilder.loadTexts: nasAlarmTableEntry.setStatus('mandatory')
nasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: nasIndex.setStatus('mandatory')
nasName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasName.setStatus('mandatory')
nasKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasKey.setStatus('mandatory')
nasAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11, 1, 4), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasAlarmTimeStamp.setStatus('mandatory')
nasIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasIPAddress.setStatus('mandatory')
nasCmplxName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCmplxName.setStatus('mandatory')
ss7LinkFailureAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12), )
if mibBuilder.loadTexts: ss7LinkFailureAlarmTable.setStatus('mandatory')
ss7LinkFailureAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1), ).setIndexNames((0, "InternetThruway-MIB", "lfIndex"))
if mibBuilder.loadTexts: ss7LinkFailureAlarmTableEntry.setStatus('mandatory')
lfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: lfIndex.setStatus('mandatory')
lfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lfKey.setStatus('mandatory')
lfIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lfIPAddress.setStatus('mandatory')
lfLinkCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lfLinkCode.setStatus('mandatory')
lfTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 6), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lfTimeStamp.setStatus('mandatory')
lfName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lfName.setStatus('mandatory')
lfCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lfCardId.setStatus('mandatory')
lfLinkSet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 12, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lfLinkSet.setStatus('mandatory')
ss7LinkCongestionAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13), )
if mibBuilder.loadTexts: ss7LinkCongestionAlarmTable.setStatus('mandatory')
ss7LinkCongestionAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1), ).setIndexNames((0, "InternetThruway-MIB", "lcIndex"))
if mibBuilder.loadTexts: ss7LinkCongestionAlarmTableEntry.setStatus('mandatory')
lcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: lcIndex.setStatus('mandatory')
lcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcKey.setStatus('mandatory')
lcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIPAddress.setStatus('mandatory')
lcLinkCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLinkCode.setStatus('mandatory')
lcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 5), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcTimeStamp.setStatus('mandatory')
lcName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcName.setStatus('mandatory')
lcCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCardId.setStatus('mandatory')
lcLinkSet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLinkSet.setStatus('mandatory')
ss7ISUPFailureAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 14), )
if mibBuilder.loadTexts: ss7ISUPFailureAlarmTable.setStatus('mandatory')
ss7ISUPFailureAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 14, 1), ).setIndexNames((0, "InternetThruway-MIB", "ifIndex"))
if mibBuilder.loadTexts: ss7ISUPFailureAlarmTableEntry.setStatus('mandatory')
ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: ifIndex.setStatus('mandatory')
ifKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifKey.setStatus('mandatory')
ifIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIPAddress.setStatus('mandatory')
ifTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 14, 1, 4), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTimeStamp.setStatus('mandatory')
ifName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifName.setStatus('mandatory')
ss7ISUPCongestionAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15), )
if mibBuilder.loadTexts: ss7ISUPCongestionAlarmTable.setStatus('mandatory')
ss7ISUPCongestionAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15, 1), ).setIndexNames((0, "InternetThruway-MIB", "icIndex"))
if mibBuilder.loadTexts: ss7ISUPCongestionAlarmTableEntry.setStatus('mandatory')
icIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: icIndex.setStatus('mandatory')
icKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icKey.setStatus('mandatory')
icIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icIPAddress.setStatus('mandatory')
icCongestionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icCongestionLevel.setStatus('mandatory')
icTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15, 1, 5), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icTimeStamp.setStatus('mandatory')
icName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icName.setStatus('mandatory')
ss7MTP3CongestionAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16), )
if mibBuilder.loadTexts: ss7MTP3CongestionAlarmTable.setStatus('mandatory')
ss7MTP3CongestionAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16, 1), ).setIndexNames((0, "InternetThruway-MIB", "mtp3Index"))
if mibBuilder.loadTexts: ss7MTP3CongestionAlarmTableEntry.setStatus('mandatory')
mtp3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: mtp3Index.setStatus('mandatory')
mtp3Key = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3Key.setStatus('mandatory')
mtp3IPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3IPAddress.setStatus('mandatory')
mtp3CongestionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3CongestionLevel.setStatus('mandatory')
mtp3TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16, 1, 5), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3TimeStamp.setStatus('mandatory')
mtp3Name = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3Name.setStatus('mandatory')
ss7MTP2TrunkFailureAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17), )
if mibBuilder.loadTexts: ss7MTP2TrunkFailureAlarmTable.setStatus('mandatory')
ss7MTP2TrunkFailureAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1), ).setIndexNames((0, "InternetThruway-MIB", "mtp2Index"))
if mibBuilder.loadTexts: ss7MTP2TrunkFailureAlarmTableEntry.setStatus('mandatory')
class MTP2AlarmConditionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("fasError", 1), ("carrierLost", 2), ("synchroLost", 3), ("aisRcv", 4), ("remoteAlarmRcv", 5), ("tooHighBer", 6))

mtp2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: mtp2Index.setStatus('mandatory')
mtp2Key = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2Key.setStatus('mandatory')
mtp2IPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2IPAddress.setStatus('mandatory')
mtp2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2Name.setStatus('mandatory')
mtp2CardId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2CardId.setStatus('mandatory')
mtp2AlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1, 6), MTP2AlarmConditionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2AlarmCondition.setStatus('mandatory')
mtp2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 17, 1, 7), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2TimeStamp.setStatus('mandatory')
ss7LinksetFailureAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18), )
if mibBuilder.loadTexts: ss7LinksetFailureAlarmTable.setStatus('mandatory')
ss7LinksetFailureAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18, 1), ).setIndexNames((0, "InternetThruway-MIB", "lsFailureIndex"))
if mibBuilder.loadTexts: ss7LinksetFailureAlarmTableEntry.setStatus('mandatory')
lsFailureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: lsFailureIndex.setStatus('mandatory')
lsFailureKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFailureKey.setStatus('mandatory')
lsFailureIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFailureIPAddress.setStatus('mandatory')
lsFailureName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFailureName.setStatus('mandatory')
lsFailurePointcode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFailurePointcode.setStatus('mandatory')
lsFailureTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 18, 1, 6), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFailureTimeStamp.setStatus('mandatory')
ss7DestinationInaccessibleAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19), )
if mibBuilder.loadTexts: ss7DestinationInaccessibleAlarmTable.setStatus('mandatory')
ss7DestinationInaccessibleAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19, 1), ).setIndexNames((0, "InternetThruway-MIB", "destInaccessIndex"))
if mibBuilder.loadTexts: ss7DestinationInaccessibleAlarmTableEntry.setStatus('mandatory')
destInaccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: destInaccessIndex.setStatus('mandatory')
destInaccessKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destInaccessKey.setStatus('mandatory')
destInaccessIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destInaccessIPAddress.setStatus('mandatory')
destInaccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destInaccessName.setStatus('mandatory')
destInaccessPointcode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destInaccessPointcode.setStatus('mandatory')
destInaccessTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 19, 1, 6), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destInaccessTimeStamp.setStatus('mandatory')
ss7DestinationCongestedAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20), )
if mibBuilder.loadTexts: ss7DestinationCongestedAlarmTable.setStatus('mandatory')
ss7DestinationCongestedAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1), ).setIndexNames((0, "InternetThruway-MIB", "destCongestIndex"))
if mibBuilder.loadTexts: ss7DestinationCongestedAlarmTableEntry.setStatus('mandatory')
destCongestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: destCongestIndex.setStatus('mandatory')
destCongestKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destCongestKey.setStatus('mandatory')
destCongestIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destCongestIPAddress.setStatus('mandatory')
destCongestName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destCongestName.setStatus('mandatory')
destCongestPointcode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destCongestPointcode.setStatus('mandatory')
destCongestCongestionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destCongestCongestionLevel.setStatus('mandatory')
destCongestTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 20, 1, 7), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destCongestTimeStamp.setStatus('mandatory')
ss7LinkAlignmentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21), )
if mibBuilder.loadTexts: ss7LinkAlignmentAlarmTable.setStatus('mandatory')
ss7LinkAlignmentAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1), ).setIndexNames((0, "InternetThruway-MIB", "linkAlignIndex"))
if mibBuilder.loadTexts: ss7LinkAlignmentAlarmTableEntry.setStatus('mandatory')
linkAlignIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 1), Integer32())
if mibBuilder.loadTexts: linkAlignIndex.setStatus('mandatory')
linkAlignKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignKey.setStatus('mandatory')
linkAlignIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignIPAddress.setStatus('mandatory')
linkAlignName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignName.setStatus('mandatory')
linkAlignLinkCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignLinkCode.setStatus('mandatory')
linkAlignTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 6), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignTimeStamp.setStatus('mandatory')
linkAlignCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignCardId.setStatus('mandatory')
linkAlignLinkSet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 21, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAlignLinkSet.setStatus('mandatory')
csgComplexStateTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22))
cplxName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxName.setStatus('mandatory')
cplxLocEthernetName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxLocEthernetName.setStatus('mandatory')
cplxLocEthernetIP = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxLocEthernetIP.setStatus('mandatory')
cplxLocOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxLocOperationalState.setStatus('mandatory')
cplxLocStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxLocStandbyState.setStatus('mandatory')
cplxLocAvailabilityState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxLocAvailabilityState.setStatus('mandatory')
cplxMateEthernetName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxMateEthernetName.setStatus('mandatory')
cplxMateEthernetIP = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxMateEthernetIP.setStatus('mandatory')
cplxMateOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxMateOperationalState.setStatus('mandatory')
cplxMateStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxMateStandbyState.setStatus('mandatory')
cplxMateAvailabilityState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxMateAvailabilityState.setStatus('mandatory')
cplxAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 22, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cplxAlarmStatus.setStatus('mandatory')
lostServerAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 1), )
if mibBuilder.loadTexts: lostServerAlarmTable.setStatus('mandatory')
lostServerAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 1, 1), ).setIndexNames((0, "InternetThruway-MIB", "lsIndex"))
if mibBuilder.loadTexts: lostServerAlarmTableEntry.setStatus('mandatory')
lsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lsIndex.setStatus('mandatory')
lsKey = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsKey.setStatus('mandatory')
lsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsIPAddress.setStatus('mandatory')
lsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsName.setStatus('mandatory')
lsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 5, 1, 1, 5), TimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsTimeStamp.setStatus('mandatory')
alarmMaskInt1 = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 1), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmMaskInt1.setStatus('mandatory')
alarmStatusInt1 = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatusInt1.setStatus('mandatory')
alarmStatusInt2 = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatusInt2.setStatus('mandatory')
alarmStatusInt3 = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatusInt3.setStatus('mandatory')
alarmMaskInt2 = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 4, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmMaskInt2.setStatus('mandatory')
trapCompName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 1), DisplayString())
if mibBuilder.loadTexts: trapCompName.setStatus('mandatory')
trapFileName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 2), DisplayString())
if mibBuilder.loadTexts: trapFileName.setStatus('mandatory')
trapDate = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 3), TimeString())
if mibBuilder.loadTexts: trapDate.setStatus('mandatory')
trapGenericStr1 = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 4), DisplayString())
if mibBuilder.loadTexts: trapGenericStr1.setStatus('mandatory')
trapIdKey = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 5), Integer32())
if mibBuilder.loadTexts: trapIdKey.setStatus('mandatory')
trapIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 6), IpAddress())
if mibBuilder.loadTexts: trapIPAddress.setStatus('mandatory')
trapName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 7), DisplayString())
if mibBuilder.loadTexts: trapName.setStatus('mandatory')
trapTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 3, 8), DisplayString())
if mibBuilder.loadTexts: trapTimeStamp.setStatus('mandatory')
diskSpaceClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,1001)).setObjects(("InternetThruway-MIB", "partitionSpaceKey"), ("InternetThruway-MIB", "partitionIndex"), ("InternetThruway-MIB", "partitionName"), ("InternetThruway-MIB", "partitionPercentFull"), ("InternetThruway-MIB", "partitionSpaceTimeStamp"))
diskSpaceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,1004)).setObjects(("InternetThruway-MIB", "partitionSpaceKey"), ("InternetThruway-MIB", "partitionIndex"), ("InternetThruway-MIB", "partitionName"), ("InternetThruway-MIB", "partitionPercentFull"), ("InternetThruway-MIB", "partitionSpaceTimeStamp"))
etherCardTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,1011))
etherCardTrapMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,1014))
etherCardTrapCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,1015))
compDebugOff = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,2001)).setObjects(("InternetThruway-MIB", "compDebugKey"), ("InternetThruway-MIB", "componentIndex"), ("InternetThruway-MIB", "componentName"), ("InternetThruway-MIB", "compDebugTimeStamp"))
compDebugOn = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,2002)).setObjects(("InternetThruway-MIB", "compDebugKey"), ("InternetThruway-MIB", "componentIndex"), ("InternetThruway-MIB", "componentName"), ("InternetThruway-MIB", "compDebugTimeStamp"))
compStateClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,2011)).setObjects(("InternetThruway-MIB", "compProvStateKey"), ("InternetThruway-MIB", "componentIndex"), ("InternetThruway-MIB", "componentName"), ("InternetThruway-MIB", "compProvStateStatus"), ("InternetThruway-MIB", "compSecsInCurrentState"), ("InternetThruway-MIB", "compProvStateTimeStamp"))
compStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,2014)).setObjects(("InternetThruway-MIB", "compProvStateKey"), ("InternetThruway-MIB", "componentIndex"), ("InternetThruway-MIB", "componentName"), ("InternetThruway-MIB", "compProvStateStatus"), ("InternetThruway-MIB", "compSecsInCurrentState"), ("InternetThruway-MIB", "compProvStateTimeStamp"))
restartStateClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,2021)).setObjects(("InternetThruway-MIB", "compRestartKey"), ("InternetThruway-MIB", "componentIndex"), ("InternetThruway-MIB", "componentName"), ("InternetThruway-MIB", "compRestartStatus"), ("InternetThruway-MIB", "compRestartTimeStamp"))
restartStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,2024)).setObjects(("InternetThruway-MIB", "compRestartKey"), ("InternetThruway-MIB", "componentIndex"), ("InternetThruway-MIB", "componentName"), ("InternetThruway-MIB", "compRestartStatus"), ("InternetThruway-MIB", "compRestartTimeStamp"))
ss7LinkFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3004)).setObjects(("InternetThruway-MIB", "lfIndex"), ("InternetThruway-MIB", "lfKey"), ("InternetThruway-MIB", "lfIPAddress"), ("InternetThruway-MIB", "lfLinkCode"), ("InternetThruway-MIB", "lfName"), ("InternetThruway-MIB", "lfCardId"), ("InternetThruway-MIB", "lfLinkSet"), ("InternetThruway-MIB", "lfTimeStamp"))
ss7LinkFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3001)).setObjects(("InternetThruway-MIB", "lfIndex"), ("InternetThruway-MIB", "lfKey"), ("InternetThruway-MIB", "lfIPAddress"), ("InternetThruway-MIB", "lfLinkCode"), ("InternetThruway-MIB", "lfName"), ("InternetThruway-MIB", "lfCardId"), ("InternetThruway-MIB", "lfLinkSet"), ("InternetThruway-MIB", "lfTimeStamp"))
ss7LinkCongestionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3012)).setObjects(("InternetThruway-MIB", "lcIndex"), ("InternetThruway-MIB", "lcKey"), ("InternetThruway-MIB", "lcIPAddress"), ("InternetThruway-MIB", "lcLinkCode"), ("InternetThruway-MIB", "lcName"), ("InternetThruway-MIB", "lcCardId"), ("InternetThruway-MIB", "lcLinkSet"), ("InternetThruway-MIB", "lcTimeStamp"))
ss7LinkCongestionClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3011)).setObjects(("InternetThruway-MIB", "lcIndex"), ("InternetThruway-MIB", "lcKey"), ("InternetThruway-MIB", "lcIPAddress"), ("InternetThruway-MIB", "lcLinkCode"), ("InternetThruway-MIB", "lcName"), ("InternetThruway-MIB", "lcCardId"), ("InternetThruway-MIB", "lcLinkSet"), ("InternetThruway-MIB", "lcTimeStamp"))
ss7ISUPFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3025)).setObjects(("InternetThruway-MIB", "ifIndex"), ("InternetThruway-MIB", "ifKey"), ("InternetThruway-MIB", "ifIPAddress"), ("InternetThruway-MIB", "ifName"), ("InternetThruway-MIB", "ifTimeStamp"))
ss7ISUPFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3021)).setObjects(("InternetThruway-MIB", "ifIndex"), ("InternetThruway-MIB", "ifKey"), ("InternetThruway-MIB", "ifIPAddress"), ("InternetThruway-MIB", "ifName"), ("InternetThruway-MIB", "ifTimeStamp"))
ss7ISUPCongestionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3033)).setObjects(("InternetThruway-MIB", "icIndex"), ("InternetThruway-MIB", "icKey"), ("InternetThruway-MIB", "icIPAddress"), ("InternetThruway-MIB", "icCongestionLevel"), ("InternetThruway-MIB", "icName"), ("InternetThruway-MIB", "icTimeStamp"))
ss7ISUPCongestionClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3031)).setObjects(("InternetThruway-MIB", "icIndex"), ("InternetThruway-MIB", "icKey"), ("InternetThruway-MIB", "icIPAddress"), ("InternetThruway-MIB", "icCongestionLevel"), ("InternetThruway-MIB", "icName"), ("InternetThruway-MIB", "icTimeStamp"))
ss7FEPCongestionWarning = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3042)).setObjects(("InternetThruway-MIB", "trapIdKey"), ("InternetThruway-MIB", "trapIPAddress"), ("InternetThruway-MIB", "trapName"), ("InternetThruway-MIB", "trapTimeStamp"))
ss7BEPCongestionWarning = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3052)).setObjects(("InternetThruway-MIB", "trapIdKey"), ("InternetThruway-MIB", "trapIPAddress"), ("InternetThruway-MIB", "trapName"), ("InternetThruway-MIB", "trapTimeStamp"))
ss7MTP3CongestionMinor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3063)).setObjects(("InternetThruway-MIB", "mtp3Index"), ("InternetThruway-MIB", "mtp3Key"), ("InternetThruway-MIB", "mtp3IPAddress"), ("InternetThruway-MIB", "mtp3Name"), ("InternetThruway-MIB", "mtp3TimeStamp"))
ss7MTP3CongestionMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3064)).setObjects(("InternetThruway-MIB", "mtp3Index"), ("InternetThruway-MIB", "mtp3Key"), ("InternetThruway-MIB", "mtp3IPAddress"), ("InternetThruway-MIB", "mtp3Name"), ("InternetThruway-MIB", "mtp3TimeStamp"))
ss7MTP3CongestionCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3065)).setObjects(("InternetThruway-MIB", "mtp3Index"), ("InternetThruway-MIB", "mtp3Key"), ("InternetThruway-MIB", "mtp3IPAddress"), ("InternetThruway-MIB", "mtp3Name"), ("InternetThruway-MIB", "mtp3TimeStamp"))
ss7MTP3CongestionClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3061)).setObjects(("InternetThruway-MIB", "mtp3Index"), ("InternetThruway-MIB", "mtp3Key"), ("InternetThruway-MIB", "mtp3IPAddress"), ("InternetThruway-MIB", "mtp3Name"), ("InternetThruway-MIB", "mtp3TimeStamp"))
ss7MTP2TrunkFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3075)).setObjects(("InternetThruway-MIB", "mtp2Index"), ("InternetThruway-MIB", "mtp2Key"), ("InternetThruway-MIB", "mtp2IPAddress"), ("InternetThruway-MIB", "mtp2Name"), ("InternetThruway-MIB", "mtp2CardId"), ("InternetThruway-MIB", "mtp2AlarmCondition"), ("InternetThruway-MIB", "mtp2TimeStamp"))
ss7MTP2TrunkFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3071)).setObjects(("InternetThruway-MIB", "mtp2Index"), ("InternetThruway-MIB", "mtp2Key"), ("InternetThruway-MIB", "mtp2IPAddress"), ("InternetThruway-MIB", "mtp2Name"), ("InternetThruway-MIB", "mtp2CardId"), ("InternetThruway-MIB", "mtp2TimeStamp"))
ss7LinksetFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3085)).setObjects(("InternetThruway-MIB", "lsFailureIndex"), ("InternetThruway-MIB", "lsFailureKey"), ("InternetThruway-MIB", "lsFailureIPAddress"), ("InternetThruway-MIB", "lsFailureName"), ("InternetThruway-MIB", "lsFailurePointcode"), ("InternetThruway-MIB", "lsFailureTimeStamp"))
ss7LinksetFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3081)).setObjects(("InternetThruway-MIB", "lsFailureIndex"), ("InternetThruway-MIB", "lsFailureKey"), ("InternetThruway-MIB", "lsFailureIPAddress"), ("InternetThruway-MIB", "lsFailureName"), ("InternetThruway-MIB", "lsFailurePointcode"), ("InternetThruway-MIB", "lsFailureTimeStamp"))
ss7DestinationInaccessible = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3092)).setObjects(("InternetThruway-MIB", "destInaccessIndex"), ("InternetThruway-MIB", "destInaccessKey"), ("InternetThruway-MIB", "destInaccessIPAddress"), ("InternetThruway-MIB", "destInaccessName"), ("InternetThruway-MIB", "destInaccessPointcode"), ("InternetThruway-MIB", "destInaccessTimeStamp"))
ss7DestinationAccessible = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3091)).setObjects(("InternetThruway-MIB", "destInaccessIndex"), ("InternetThruway-MIB", "destInaccessKey"), ("InternetThruway-MIB", "destInaccessIPAddress"), ("InternetThruway-MIB", "destInaccessName"), ("InternetThruway-MIB", "destInaccessPointcode"), ("InternetThruway-MIB", "destInaccessTimeStamp"))
ss7DestinationCongestedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3103)).setObjects(("InternetThruway-MIB", "destCongestIndex"), ("InternetThruway-MIB", "destCongestKey"), ("InternetThruway-MIB", "destCongestIPAddress"), ("InternetThruway-MIB", "destCongestName"), ("InternetThruway-MIB", "destCongestPointcode"), ("InternetThruway-MIB", "destCongestCongestionLevel"), ("InternetThruway-MIB", "destCongestTimeStamp"))
ss7DestinationCongestedClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3101)).setObjects(("InternetThruway-MIB", "destCongestIndex"), ("InternetThruway-MIB", "destCongestKey"), ("InternetThruway-MIB", "destCongestIPAddress"), ("InternetThruway-MIB", "destCongestName"), ("InternetThruway-MIB", "destCongestPointcode"), ("InternetThruway-MIB", "destCongestCongestionLevel"), ("InternetThruway-MIB", "destCongestTimeStamp"))
ss7LinkAlignmentFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3114)).setObjects(("InternetThruway-MIB", "linkAlignIndex"), ("InternetThruway-MIB", "linkAlignKey"), ("InternetThruway-MIB", "linkAlignIPAddress"), ("InternetThruway-MIB", "linkAlignName"), ("InternetThruway-MIB", "linkAlignLinkCode"), ("InternetThruway-MIB", "linkAlignCardId"), ("InternetThruway-MIB", "linkAlignLinkSet"), ("InternetThruway-MIB", "linkAlignTimeStamp"))
ss7LinkAlignmentFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,3111)).setObjects(("InternetThruway-MIB", "linkAlignIndex"), ("InternetThruway-MIB", "linkAlignKey"), ("InternetThruway-MIB", "linkAlignIPAddress"), ("InternetThruway-MIB", "linkAlignName"), ("InternetThruway-MIB", "linkAlignLinkCode"), ("InternetThruway-MIB", "linkAlignCardId"), ("InternetThruway-MIB", "linkAlignLinkSet"), ("InternetThruway-MIB", "linkAlignTimeStamp"))
ncLostServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,4014)).setObjects(("InternetThruway-MIB", "lsIndex"), ("InternetThruway-MIB", "lsKey"), ("InternetThruway-MIB", "lsName"), ("InternetThruway-MIB", "lsIPAddress"), ("InternetThruway-MIB", "lsTimeStamp"))
ncFoundServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,4011)).setObjects(("InternetThruway-MIB", "lsIndex"), ("InternetThruway-MIB", "lsKey"), ("InternetThruway-MIB", "lsName"), ("InternetThruway-MIB", "lsIPAddress"), ("InternetThruway-MIB", "lsTimeStamp"))
ncStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,4022)).setObjects(("InternetThruway-MIB", "ncEthernetName"), ("InternetThruway-MIB", "ncEthernetIP"), ("InternetThruway-MIB", "ncOperationalState"), ("InternetThruway-MIB", "ncStandbyState"), ("InternetThruway-MIB", "ncAvailabilityState"))
csgComplexStateTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,4031)).setObjects(("InternetThruway-MIB", "cplxName"), ("InternetThruway-MIB", "cplxLocEthernetName"), ("InternetThruway-MIB", "cplxLocEthernetIP"), ("InternetThruway-MIB", "cplxLocOperationalState"), ("InternetThruway-MIB", "cplxLocStandbyState"), ("InternetThruway-MIB", "cplxLocAvailabilityState"), ("InternetThruway-MIB", "cplxMateEthernetName"), ("InternetThruway-MIB", "cplxMateEthernetIP"), ("InternetThruway-MIB", "cplxMateOperationalState"), ("InternetThruway-MIB", "cplxMateStandbyState"), ("InternetThruway-MIB", "cplxMateAvailabilityState"), ("InternetThruway-MIB", "cplxAlarmStatus"))
csgComplexStateTrapMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,4034)).setObjects(("InternetThruway-MIB", "cplxName"), ("InternetThruway-MIB", "cplxLocEthernetName"), ("InternetThruway-MIB", "cplxLocEthernetIP"), ("InternetThruway-MIB", "cplxLocOperationalState"), ("InternetThruway-MIB", "cplxLocStandbyState"), ("InternetThruway-MIB", "cplxLocAvailabilityState"), ("InternetThruway-MIB", "cplxMateEthernetName"), ("InternetThruway-MIB", "cplxMateEthernetIP"), ("InternetThruway-MIB", "cplxMateOperationalState"), ("InternetThruway-MIB", "cplxMateStandbyState"), ("InternetThruway-MIB", "cplxMateAvailabilityState"), ("InternetThruway-MIB", "cplxAlarmStatus"))
csgComplexStateTrapCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,4035)).setObjects(("InternetThruway-MIB", "cplxName"), ("InternetThruway-MIB", "cplxLocEthernetName"), ("InternetThruway-MIB", "cplxLocEthernetIP"), ("InternetThruway-MIB", "cplxLocOperationalState"), ("InternetThruway-MIB", "cplxLocStandbyState"), ("InternetThruway-MIB", "cplxLocAvailabilityState"), ("InternetThruway-MIB", "cplxMateEthernetName"), ("InternetThruway-MIB", "cplxMateEthernetIP"), ("InternetThruway-MIB", "cplxMateOperationalState"), ("InternetThruway-MIB", "cplxMateStandbyState"), ("InternetThruway-MIB", "cplxMateAvailabilityState"), ("InternetThruway-MIB", "cplxAlarmStatus"))
cisRetrievalFailureTrapMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,4044))
genericNormal = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9001)).setObjects(("InternetThruway-MIB", "trapIdKey"), ("InternetThruway-MIB", "trapGenericStr1"), ("InternetThruway-MIB", "trapTimeStamp"))
genericWarning = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9002)).setObjects(("InternetThruway-MIB", "trapIdKey"), ("InternetThruway-MIB", "trapGenericStr1"), ("InternetThruway-MIB", "trapTimeStamp"))
genericMinor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9003)).setObjects(("InternetThruway-MIB", "trapIdKey"), ("InternetThruway-MIB", "trapGenericStr1"), ("InternetThruway-MIB", "trapTimeStamp"))
genericMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9004)).setObjects(("InternetThruway-MIB", "trapIdKey"), ("InternetThruway-MIB", "trapGenericStr1"), ("InternetThruway-MIB", "trapTimeStamp"))
genericCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9005)).setObjects(("InternetThruway-MIB", "trapIdKey"), ("InternetThruway-MIB", "trapGenericStr1"), ("InternetThruway-MIB", "trapTimeStamp"))
hgStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9011)).setObjects(("InternetThruway-MIB", "hgKey"), ("InternetThruway-MIB", "hgIndex"), ("InternetThruway-MIB", "hgName"), ("InternetThruway-MIB", "hgIPAddress"), ("InternetThruway-MIB", "hgAlarmTimeStamp"))
hgStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9014)).setObjects(("InternetThruway-MIB", "hgKey"), ("InternetThruway-MIB", "hgIndex"), ("InternetThruway-MIB", "hgName"), ("InternetThruway-MIB", "hgIPAddress"), ("InternetThruway-MIB", "hgAlarmTimeStamp"))
nasStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9021)).setObjects(("InternetThruway-MIB", "nasKey"), ("InternetThruway-MIB", "nasIndex"), ("InternetThruway-MIB", "nasName"), ("InternetThruway-MIB", "nasIPAddress"), ("InternetThruway-MIB", "nasAlarmTimeStamp"), ("InternetThruway-MIB", "nasCmplxName"))
nasStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 2, 3) + (0,9024)).setObjects(("InternetThruway-MIB", "nasKey"), ("InternetThruway-MIB", "nasIndex"), ("InternetThruway-MIB", "nasName"), ("InternetThruway-MIB", "nasIPAddress"), ("InternetThruway-MIB", "nasAlarmTimeStamp"), ("InternetThruway-MIB", "nasCmplxName"))
linkOMTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1), )
if mibBuilder.loadTexts: linkOMTable.setStatus('mandatory')
linkOMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1), ).setIndexNames((0, "InternetThruway-MIB", "linksetIndex"), (0, "InternetThruway-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkOMTableEntry.setStatus('mandatory')
linkOMId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOMId.setStatus('mandatory')
linkOMSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOMSetId.setStatus('mandatory')
linkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFailures.setStatus('mandatory')
linkCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCongestions.setStatus('mandatory')
linkInhibits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInhibits.setStatus('mandatory')
linkTransmittedMSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTransmittedMSUs.setStatus('mandatory')
linkReceivedMSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReceivedMSUs.setStatus('mandatory')
linkRemoteProcOutages = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRemoteProcOutages.setStatus('mandatory')
bLATimerExpiries = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bLATimerExpiries.setStatus('mandatory')
rLCTimerExpiries = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rLCTimerExpiries.setStatus('mandatory')
uBATimerExpiries = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uBATimerExpiries.setStatus('mandatory')
rSATimerExpiries = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rSATimerExpiries.setStatus('mandatory')
outCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outCallAttempts.setStatus('mandatory')
outCallNormalCompletions = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outCallNormalCompletions.setStatus('mandatory')
outCallAbnormalCompletions = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outCallAbnormalCompletions.setStatus('mandatory')
userBusyOutCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBusyOutCallRejects.setStatus('mandatory')
tempFailOutCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempFailOutCallRejects.setStatus('mandatory')
userUnavailableOutCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUnavailableOutCallRejects.setStatus('mandatory')
abnormalReleaseOutCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: abnormalReleaseOutCallRejects.setStatus('mandatory')
otherOutCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherOutCallRejects.setStatus('mandatory')
cumulativeActiveOutCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeActiveOutCalls.setStatus('mandatory')
currentlyActiveOutCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyActiveOutCalls.setStatus('mandatory')
currentlyActiveDigitalOutCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyActiveDigitalOutCalls.setStatus('mandatory')
currentlyActiveAnalogOutCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyActiveAnalogOutCalls.setStatus('mandatory')
inCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inCallAttempts.setStatus('mandatory')
inCallNormalCompletions = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inCallNormalCompletions.setStatus('mandatory')
inCallAbnormalCompletions = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inCallAbnormalCompletions.setStatus('mandatory')
userBusyInCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBusyInCallRejects.setStatus('mandatory')
tempFailInCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempFailInCallRejects.setStatus('mandatory')
userUnavailableInCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUnavailableInCallRejects.setStatus('mandatory')
abnormalReleaseInCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: abnormalReleaseInCallRejects.setStatus('mandatory')
otherInCallRejects = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherInCallRejects.setStatus('mandatory')
cumulativeActiveInCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeActiveInCalls.setStatus('mandatory')
currentlyActiveInCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyActiveInCalls.setStatus('mandatory')
currentlyActiveDigitalInCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyActiveDigitalInCalls.setStatus('mandatory')
currentlyActiveAnalogInCalls = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyActiveAnalogInCalls.setStatus('mandatory')
trunkCallOMTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1), )
if mibBuilder.loadTexts: trunkCallOMTable.setStatus('mandatory')
trunkCallOMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1), ).setIndexNames((0, "InternetThruway-MIB", "trunkCallOMIndex"))
if mibBuilder.loadTexts: trunkCallOMTableEntry.setStatus('mandatory')
trunkCallOMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkCallOMIndex.setStatus('mandatory')
trunkGroupCLLI = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCLLI.setStatus('mandatory')
numberOfCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfCircuits.setStatus('mandatory')
trunkOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkOutCallAttempts.setStatus('mandatory')
trunkOutCallNormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkOutCallNormalCompletions.setStatus('mandatory')
trunkOutCallAbnormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkOutCallAbnormalCompletions.setStatus('mandatory')
trunkUserBusyOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkUserBusyOutCallRejects.setStatus('mandatory')
trunkTempFailOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkTempFailOutCallRejects.setStatus('mandatory')
trunkUserUnavailableOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkUserUnavailableOutCallRejects.setStatus('mandatory')
trunkAbnormalReleaseOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkAbnormalReleaseOutCallRejects.setStatus('mandatory')
trunkOtherOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkOtherOutCallRejects.setStatus('mandatory')
trunkCumulativeActiveOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCumulativeActiveOutCalls.setStatus('mandatory')
trunkCurrentlyActiveOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCurrentlyActiveOutCalls.setStatus('mandatory')
trunkCurrentlyActiveDigitalOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCurrentlyActiveDigitalOutCalls.setStatus('mandatory')
trunkCurrentlyActiveAnalogOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCurrentlyActiveAnalogOutCalls.setStatus('mandatory')
trunkInCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkInCallAttempts.setStatus('mandatory')
trunkInCallNormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkInCallNormalCompletions.setStatus('mandatory')
trunkInCallAbnormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkInCallAbnormalCompletions.setStatus('mandatory')
trunkUserBusyInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkUserBusyInCallRejects.setStatus('mandatory')
trunkTempFailInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkTempFailInCallRejects.setStatus('mandatory')
trunkUserUnavailableInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkUserUnavailableInCallRejects.setStatus('mandatory')
trunkAbnormalReleaseInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkAbnormalReleaseInCallRejects.setStatus('mandatory')
trunkOtherInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkOtherInCallRejects.setStatus('mandatory')
trunkCumulativeActiveInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCumulativeActiveInCalls.setStatus('mandatory')
trunkCurrentlyActiveInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCurrentlyActiveInCalls.setStatus('mandatory')
trunkCurrentlyActiveDigitalInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCurrentlyActiveDigitalInCalls.setStatus('mandatory')
trunkCurrentlyActiveAnalogInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCurrentlyActiveAnalogInCalls.setStatus('mandatory')
trunkAllActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkAllActiveCalls.setStatus('mandatory')
trunkOccupancyPerCCS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkOccupancyPerCCS.setStatus('mandatory')
trafficInCCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficInCCSs.setStatus('mandatory')
trafficInCCSIncomings = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficInCCSIncomings.setStatus('mandatory')
localBusyInCCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localBusyInCCSs.setStatus('mandatory')
remoteBusyInCCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 4, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteBusyInCCSs.setStatus('mandatory')
nasCallOMTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1), )
if mibBuilder.loadTexts: nasCallOMTable.setStatus('mandatory')
nasCallOMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1), ).setIndexNames((0, "InternetThruway-MIB", "nasCallOMIndex"))
if mibBuilder.loadTexts: nasCallOMTableEntry.setStatus('mandatory')
nasCallOMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: nasCallOMIndex.setStatus('mandatory')
nasName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasName1.setStatus('mandatory')
numberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPorts.setStatus('mandatory')
nasOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOutCallAttempts.setStatus('mandatory')
nasOutCallNormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOutCallNormalCompletions.setStatus('mandatory')
nasOutCallAbnormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOutCallAbnormalCompletions.setStatus('mandatory')
nasUserBusyOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasUserBusyOutCallRejects.setStatus('mandatory')
nasTempFailOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasTempFailOutCallRejects.setStatus('mandatory')
nasUserUnavailableOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasUserUnavailableOutCallRejects.setStatus('mandatory')
nasAbnormalReleaseOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasAbnormalReleaseOutCallRejects.setStatus('mandatory')
nasOtherOutCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOtherOutCallRejects.setStatus('mandatory')
nasCumulativeActiveOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCumulativeActiveOutCalls.setStatus('mandatory')
nasCurrentlyActiveOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCurrentlyActiveOutCalls.setStatus('mandatory')
nasCurrentlyActiveDigitalOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCurrentlyActiveDigitalOutCalls.setStatus('mandatory')
nasCurrentlyActiveAnalogOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCurrentlyActiveAnalogOutCalls.setStatus('mandatory')
nasInCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInCallAttempts.setStatus('mandatory')
nasInCallNormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInCallNormalCompletions.setStatus('mandatory')
nasInCallAbnormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInCallAbnormalCompletions.setStatus('mandatory')
nasUserBusyInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasUserBusyInCallRejects.setStatus('mandatory')
nasTempFailInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasTempFailInCallRejects.setStatus('mandatory')
nasUserUnavailableInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasUserUnavailableInCallRejects.setStatus('mandatory')
nasAbnormalReleaseInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasAbnormalReleaseInCallRejects.setStatus('mandatory')
nasOtherInCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOtherInCallRejects.setStatus('mandatory')
nasCumulativeActiveInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCumulativeActiveInCalls.setStatus('mandatory')
nasCurrentlyActiveInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCurrentlyActiveInCalls.setStatus('mandatory')
nasCurrentlyActiveDigitalInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCurrentlyActiveDigitalInCalls.setStatus('mandatory')
nasCurrentlyActiveAnalogInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCurrentlyActiveAnalogInCalls.setStatus('mandatory')
nasAllActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasAllActiveCalls.setStatus('mandatory')
nasMaxPortsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasMaxPortsUsed.setStatus('mandatory')
nasMinPortsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasMinPortsUsed.setStatus('mandatory')
nasCurrentlyInUsePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 7, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasCurrentlyInUsePorts.setStatus('mandatory')
phoneCallOMTable = MibTable((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1), )
if mibBuilder.loadTexts: phoneCallOMTable.setStatus('mandatory')
phoneCallOMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1), ).setIndexNames((0, "InternetThruway-MIB", "phoneCallOMIndex"))
if mibBuilder.loadTexts: phoneCallOMTableEntry.setStatus('mandatory')
phoneCallOMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: phoneCallOMIndex.setStatus('mandatory')
phoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneNumber.setStatus('mandatory')
phoneDialCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneDialCallAttempts.setStatus('mandatory')
phoneDialCallNormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneDialCallNormalCompletions.setStatus('mandatory')
phoneDialCallAbnormalCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneDialCallAbnormalCompletions.setStatus('mandatory')
phoneUserBusyDialCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneUserBusyDialCallRejects.setStatus('mandatory')
phoneTempFailDialCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneTempFailDialCallRejects.setStatus('mandatory')
phoneUserUnavailableDialCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneUserUnavailableDialCallRejects.setStatus('mandatory')
phoneAbnormalReleaseDialCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneAbnormalReleaseDialCallRejects.setStatus('mandatory')
phoneOtherDialCallRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneOtherDialCallRejects.setStatus('mandatory')
phoneCumulativeActiveDialCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneCumulativeActiveDialCalls.setStatus('mandatory')
phoneCurrentlyActiveDialCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneCurrentlyActiveDialCalls.setStatus('mandatory')
phoneCurrentlyActiveDigitalDialCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneCurrentlyActiveDigitalDialCalls.setStatus('mandatory')
phoneCurrentlyActiveAnalogDialCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneCurrentlyActiveAnalogDialCalls.setStatus('mandatory')
csgComplexCLLI = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csgComplexCLLI.setStatus('mandatory')
serverHostName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverHostName.setStatus('mandatory')
serverIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIpAddress.setStatus('mandatory')
serverCLLI = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCLLI.setStatus('mandatory')
mateServerHostName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mateServerHostName.setStatus('mandatory')
mateServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mateServerIpAddress.setStatus('mandatory')
serverMemSize = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMemSize.setStatus('mandatory')
provisionedDPCs = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provisionedDPCs.setStatus('mandatory')
provisionedCircuits = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provisionedCircuits.setStatus('mandatory')
inserviceCircuits = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inserviceCircuits.setStatus('mandatory')
provisionedNASes = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provisionedNASes.setStatus('mandatory')
aliveNASes = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aliveNASes.setStatus('mandatory')
inserviceNASes = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inserviceNASes.setStatus('mandatory')
provsionedCards = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provsionedCards.setStatus('mandatory')
inserviceCards = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inserviceCards.setStatus('mandatory')
provisionedPorts = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provisionedPorts.setStatus('mandatory')
inservicePorts = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inservicePorts.setStatus('mandatory')
userCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCPUUsage.setStatus('mandatory')
systemCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCPUUsage.setStatus('mandatory')
totalCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCPUUsage.setStatus('mandatory')
maxCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCPUUsage.setStatus('mandatory')
avgLoad = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgLoad.setStatus('mandatory')
systemCallRate = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCallRate.setStatus('mandatory')
contextSwitchRate = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextSwitchRate.setStatus('mandatory')
lastUpdateOMFile = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 2, 7, 6, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpdateOMFile.setStatus('mandatory')
mibBuilder.exportSymbols("InternetThruway-MIB", nasUserUnavailableInCallRejects=nasUserUnavailableInCallRejects, linkNumAutoChangeovers=linkNumAutoChangeovers, ss7ISUPCongestionAlarmTable=ss7ISUPCongestionAlarmTable, icIPAddress=icIPAddress, etherCardTrapMajor=etherCardTrapMajor, linksetId=linksetId, linkNumUnexpectedMsgs=linkNumUnexpectedMsgs, trunkCurrentlyActiveDigitalInCalls=trunkCurrentlyActiveDigitalInCalls, linkOMs=linkOMs, linkAlignIPAddress=linkAlignIPAddress, lfCardId=lfCardId, genericCritical=genericCritical, restartStateClear=restartStateClear, partitionMegsFree=partitionMegsFree, system=system, linkNumMSUDiscarded=linkNumMSUDiscarded, trunkCallOMTableEntry=trunkCallOMTableEntry, phoneDialCallAbnormalCompletions=phoneDialCallAbnormalCompletions, cplxLocEthernetIP=cplxLocEthernetIP, ss7LinkFailureAlarmTable=ss7LinkFailureAlarmTable, lfIndex=lfIndex, linkOMSetId=linkOMSetId, inCallAbnormalCompletions=inCallAbnormalCompletions, trunkUserUnavailableOutCallRejects=trunkUserUnavailableOutCallRejects, nasCurrentlyActiveInCalls=nasCurrentlyActiveInCalls, serverCLLI=serverCLLI, currentlyActiveOutCalls=currentlyActiveOutCalls, ncSoftwareVersion=ncSoftwareVersion, localBusyInCCSs=localBusyInCCSs, destCongestPointcode=destCongestPointcode, componentTable=componentTable, provisionedPorts=provisionedPorts, cplxLocEthernetName=cplxLocEthernetName, nasUserBusyOutCallRejects=nasUserBusyOutCallRejects, mtp3TimeStamp=mtp3TimeStamp, alarmMaskInt2=alarmMaskInt2, lfLinkSet=lfLinkSet, ss7LinkFailureAlarmTableEntry=ss7LinkFailureAlarmTableEntry, ss7DestinationCongestedAlarm=ss7DestinationCongestedAlarm, trapFileName=trapFileName, nortel=nortel, RouteState=RouteState, alarmStatusInt1=alarmStatusInt1, rLCTimerExpiries=rLCTimerExpiries, hgAlarmTable=hgAlarmTable, ss7DestinationCongestedAlarmTable=ss7DestinationCongestedAlarmTable, linkAlignName=linkAlignName, partitionSpaceKey=partitionSpaceKey, phoneNumber=phoneNumber, trapTimeStamp=trapTimeStamp, linkReceivedMSUs=linkReceivedMSUs, ss7DestinationCongestedClear=ss7DestinationCongestedClear, mtp2IPAddress=mtp2IPAddress, destInaccessPointcode=destInaccessPointcode, diskSpaceClear=diskSpaceClear, icKey=icKey, hgAlarmTimeStamp=hgAlarmTimeStamp, systemCPUUsage=systemCPUUsage, routeTableEntry=routeTableEntry, mtp2CardId=mtp2CardId, cisRetrievalFailureTrapMajor=cisRetrievalFailureTrapMajor, ss7FEPCongestionWarning=ss7FEPCongestionWarning, trapGenericStr1=trapGenericStr1, trunkUserBusyOutCallRejects=trunkUserBusyOutCallRejects, linkIndex=linkIndex, alarmMaskInt1=alarmMaskInt1, linkOMId=linkOMId, trunkAllActiveCalls=trunkAllActiveCalls, nasCallOMIndex=nasCallOMIndex, ncEthernetIP=ncEthernetIP, ss7ISUPFailureAlarmTable=ss7ISUPFailureAlarmTable, ss7MTP3CongestionMajor=ss7MTP3CongestionMajor, compRestartTimeStamp=compRestartTimeStamp, uBATimerExpiries=uBATimerExpiries, maintenanceOMs=maintenanceOMs, lsKey=lsKey, ComponentIndex=ComponentIndex, ss7LinkAlignmentFailureClear=ss7LinkAlignmentFailureClear, destCongestCongestionLevel=destCongestCongestionLevel, nasIPAddress=nasIPAddress, destinationTable=destinationTable, trunkCumulativeActiveInCalls=trunkCumulativeActiveInCalls, compRestartStatus=compRestartStatus, linkAlignCardId=linkAlignCardId, ncLostServerTrap=ncLostServerTrap, ncHostName=ncHostName, tempFailInCallRejects=tempFailInCallRejects, routeLinksetId=routeLinksetId, trapCompName=trapCompName, nasCumulativeActiveOutCalls=nasCumulativeActiveOutCalls, nasCumulativeActiveInCalls=nasCumulativeActiveInCalls, nasAlarmTimeStamp=nasAlarmTimeStamp, phoneUserUnavailableDialCallRejects=phoneUserUnavailableDialCallRejects, ss7LinkCongestionAlarmTable=ss7LinkCongestionAlarmTable, phoneCurrentlyActiveDialCalls=phoneCurrentlyActiveDialCalls, nasCmplxName=nasCmplxName, ifName=ifName, trunkUserBusyInCallRejects=trunkUserBusyInCallRejects, cplxAlarmStatus=cplxAlarmStatus, trunkTempFailOutCallRejects=trunkTempFailOutCallRejects, nasCurrentlyActiveAnalogOutCalls=nasCurrentlyActiveAnalogOutCalls, trunkCurrentlyActiveInCalls=trunkCurrentlyActiveInCalls, lfTimeStamp=lfTimeStamp, lsFailureKey=lsFailureKey, mtp2Key=mtp2Key, ss7MTP3CongestionCritical=ss7MTP3CongestionCritical, trunkTempFailInCallRejects=trunkTempFailInCallRejects, lfKey=lfKey, linkNumSIFTransmitted=linkNumSIFTransmitted, nasOtherInCallRejects=nasOtherInCallRejects, icTimeStamp=icTimeStamp, routeRank=routeRank, phoneCumulativeActiveDialCalls=phoneCumulativeActiveDialCalls, nasKey=nasKey, phoneUserBusyDialCallRejects=phoneUserBusyDialCallRejects, MTP2AlarmConditionType=MTP2AlarmConditionType, lsFailurePointcode=lsFailurePointcode, contextSwitchRate=contextSwitchRate, trunkOutCallAbnormalCompletions=trunkOutCallAbnormalCompletions, routeState=routeState, nasCurrentlyActiveAnalogInCalls=nasCurrentlyActiveAnalogInCalls, DestinationState=DestinationState, csgComplexCLLI=csgComplexCLLI, disk=disk, linkState=linkState, hgIndex=hgIndex, icCongestionLevel=icCongestionLevel, otherInCallRejects=otherInCallRejects, ss7LinksetFailureClear=ss7LinksetFailureClear, linksetState=linksetState, partitionTableEntry=partitionTableEntry, lastUpdateOMFile=lastUpdateOMFile, cumulativeActiveOutCalls=cumulativeActiveOutCalls, compDebugStatus=compDebugStatus, ncClusterName=ncClusterName, trunkOutCallAttempts=trunkOutCallAttempts, PartitionSpaceStatus=PartitionSpaceStatus, abnormalReleaseOutCallRejects=abnormalReleaseOutCallRejects, componentName=componentName, cplxLocStandbyState=cplxLocStandbyState, trapName=trapName, ss7LinksetFailureAlarmTable=ss7LinksetFailureAlarmTable, ss7MTP2TrunkFailureAlarmTableEntry=ss7MTP2TrunkFailureAlarmTableEntry, ss7LinkAlignmentFailureAlarm=ss7LinkAlignmentFailureAlarm, partitionSpaceStatus=partitionSpaceStatus, LinksetState=LinksetState, ss7DestinationAccessible=ss7DestinationAccessible, destPointCode=destPointCode, ss7MTP3CongestionAlarmTableEntry=ss7MTP3CongestionAlarmTableEntry, compDebugTimeStamp=compDebugTimeStamp, systemOMs=systemOMs, compProvStateTimeStamp=compProvStateTimeStamp, phoneDialCallAttempts=phoneDialCallAttempts, destIndex=destIndex, trunkOtherInCallRejects=trunkOtherInCallRejects, systemCallRate=systemCallRate, destInaccessKey=destInaccessKey, mateServerHostName=mateServerHostName, ss7LinksetFailureAlarm=ss7LinksetFailureAlarm, userCPUUsage=userCPUUsage, ss7MTP3CongestionAlarmTable=ss7MTP3CongestionAlarmTable, outCallNormalCompletions=outCallNormalCompletions, diskSpaceAlarm=diskSpaceAlarm, linkTable=linkTable, ncClusterIP=ncClusterIP, icName=icName, UpgradeInProgress=UpgradeInProgress, nasUserUnavailableOutCallRejects=nasUserUnavailableOutCallRejects, serverHostName=serverHostName, inserviceNASes=inserviceNASes, compDebugKey=compDebugKey, maxCPUUsage=maxCPUUsage, inserviceCards=inserviceCards, partitionName=partitionName, ncServer=ncServer, tempFailOutCallRejects=tempFailOutCallRejects, csg=csg, userBusyInCallRejects=userBusyInCallRejects, inservicePorts=inservicePorts, nasTempFailOutCallRejects=nasTempFailOutCallRejects, lostServerAlarmTable=lostServerAlarmTable, trafficInCCSs=trafficInCCSs, linkNumMSUReceived=linkNumMSUReceived, lsName=lsName, cplxMateOperationalState=cplxMateOperationalState, ss7DestinationInaccessible=ss7DestinationInaccessible, componentTableEntry=componentTableEntry, trunkGroupOMs=trunkGroupOMs, linkRemoteProcOutages=linkRemoteProcOutages, userBusyOutCallRejects=userBusyOutCallRejects, nasAbnormalReleaseInCallRejects=nasAbnormalReleaseInCallRejects, csgComplexStateTrapClear=csgComplexStateTrapClear, nasName=nasName, ncOperationalState=ncOperationalState, nasMaxPortsUsed=nasMaxPortsUsed, linksetAdjPointcode=linksetAdjPointcode, compProvStateStatus=compProvStateStatus, restartStateAlarm=restartStateAlarm, linkAlignKey=linkAlignKey, alarmStatusInt2=alarmStatusInt2, linkAlignIndex=linkAlignIndex, nasInCallAttempts=nasInCallAttempts, linkCardDeviceName=linkCardDeviceName, routeTable=routeTable, cplxMateAvailabilityState=cplxMateAvailabilityState, numberOfCircuits=numberOfCircuits, LinkState=LinkState, ss7ISUPCongestionAlarm=ss7ISUPCongestionAlarm, nasOMs=nasOMs, mtp3Index=mtp3Index, omData=omData, cplxMateEthernetIP=cplxMateEthernetIP, trunkInCallNormalCompletions=trunkInCallNormalCompletions, trunkOtherOutCallRejects=trunkOtherOutCallRejects, hgIPAddress=hgIPAddress, ss7MTP3CongestionMinor=ss7MTP3CongestionMinor, trunkCurrentlyActiveAnalogInCalls=trunkCurrentlyActiveAnalogInCalls, trunkCurrentlyActiveDigitalOutCalls=trunkCurrentlyActiveDigitalOutCalls, avgLoad=avgLoad, trafficInCCSIncomings=trafficInCCSIncomings, ss7DestinationInaccessibleAlarmTableEntry=ss7DestinationInaccessibleAlarmTableEntry, LinkInhibitionState=LinkInhibitionState, lsIndex=lsIndex, compStateClear=compStateClear, phoneCallOMIndex=phoneCallOMIndex, ss7ISUPCongestionClear=ss7ISUPCongestionClear, otherOutCallRejects=otherOutCallRejects, nasUserBusyInCallRejects=nasUserBusyInCallRejects, nasInCallNormalCompletions=nasInCallNormalCompletions, linkCongestions=linkCongestions, hgKey=hgKey, ss7=ss7, currentlyActiveAnalogInCalls=currentlyActiveAnalogInCalls, csgComplexStateTrapInfo=csgComplexStateTrapInfo, destInaccessIndex=destInaccessIndex, lcLinkSet=lcLinkSet, componentIndex=componentIndex, ss7ISUPFailureAlarm=ss7ISUPFailureAlarm, remoteBusyInCCSs=remoteBusyInCCSs, ifKey=ifKey, partitionPercentFull=partitionPercentFull, lcKey=lcKey, trapIPAddress=trapIPAddress, nasOutCallAbnormalCompletions=nasOutCallAbnormalCompletions, trunkCumulativeActiveOutCalls=trunkCumulativeActiveOutCalls, mtp3Key=mtp3Key, traps=traps, compStateAlarm=compStateAlarm, routeDestPointCode=routeDestPointCode, destinationTableEntry=destinationTableEntry, trapIdKey=trapIdKey, cplxName=cplxName, abnormalReleaseInCallRejects=abnormalReleaseInCallRejects, destCongestKey=destCongestKey)
mibBuilder.exportSymbols("InternetThruway-MIB", nasCallOMTableEntry=nasCallOMTableEntry, trunkGroupCLLI=trunkGroupCLLI, nasCurrentlyInUsePorts=nasCurrentlyInUsePorts, destCongestName=destCongestName, ncStateChangeTrap=ncStateChangeTrap, ncUpgradeInProgress=ncUpgradeInProgress, nasCurrentlyActiveDigitalOutCalls=nasCurrentlyActiveDigitalOutCalls, destState=destState, currentlyActiveDigitalOutCalls=currentlyActiveDigitalOutCalls, lcLinkCode=lcLinkCode, ss7LinkAlignmentAlarmTable=ss7LinkAlignmentAlarmTable, linkAlignmentState=linkAlignmentState, linksetTableEntry=linksetTableEntry, linkTableEntry=linkTableEntry, genericMajor=genericMajor, ss7LinkAlignmentAlarmTableEntry=ss7LinkAlignmentAlarmTableEntry, ComponentSysmanState=ComponentSysmanState, hgAlarmTableEntry=hgAlarmTableEntry, compDebugOff=compDebugOff, trunkAbnormalReleaseOutCallRejects=trunkAbnormalReleaseOutCallRejects, ss7LinkFailureAlarm=ss7LinkFailureAlarm, ss7LinkCongestionAlarmTableEntry=ss7LinkCongestionAlarmTableEntry, phoneCurrentlyActiveAnalogDialCalls=phoneCurrentlyActiveAnalogDialCalls, linkHostname=linkHostname, ss7ISUPCongestionAlarmTableEntry=ss7ISUPCongestionAlarmTableEntry, linkAlignTimeStamp=linkAlignTimeStamp, phoneTempFailDialCallRejects=phoneTempFailDialCallRejects, ss7LinkFailureClear=ss7LinkFailureClear, nasStatusAlarm=nasStatusAlarm, csgComplexStateTrapCritical=csgComplexStateTrapCritical, trunkCurrentlyActiveOutCalls=trunkCurrentlyActiveOutCalls, destCongestTimeStamp=destCongestTimeStamp, linkNumSIFReceived=linkNumSIFReceived, lcIndex=lcIndex, mtp2Index=mtp2Index, mtp3CongestionLevel=mtp3CongestionLevel, totalCPUUsage=totalCPUUsage, nasMinPortsUsed=nasMinPortsUsed, cplxMateEthernetName=cplxMateEthernetName, lsFailureName=lsFailureName, ss7ISUPFailureAlarmTableEntry=ss7ISUPFailureAlarmTableEntry, phoneAbnormalReleaseDialCallRejects=phoneAbnormalReleaseDialCallRejects, genericNormal=genericNormal, ss7LinkCongestionClear=ss7LinkCongestionClear, bLATimerExpiries=bLATimerExpiries, lfLinkCode=lfLinkCode, etherCardTrapClear=etherCardTrapClear, linkOMTableEntry=linkOMTableEntry, lsTimeStamp=lsTimeStamp, ss7LinkCongestionAlarm=ss7LinkCongestionAlarm, mtp2Name=mtp2Name, ss7MTP3CongestionClear=ss7MTP3CongestionClear, nasCallOMTable=nasCallOMTable, ncServerId=ncServerId, linkOMTable=linkOMTable, provisionedNASes=provisionedNASes, nasOtherOutCallRejects=nasOtherOutCallRejects, destCongestIPAddress=destCongestIPAddress, ss7MTP2TrunkFailureAlarm=ss7MTP2TrunkFailureAlarm, mateServerIpAddress=mateServerIpAddress, nasAlarmTable=nasAlarmTable, genericMinor=genericMinor, trapDate=trapDate, linkTransmittedMSUs=linkTransmittedMSUs, linkAlignLinkCode=linkAlignLinkCode, inserviceCircuits=inserviceCircuits, cumulativeActiveInCalls=cumulativeActiveInCalls, ifIPAddress=ifIPAddress, trunkOccupancyPerCCS=trunkOccupancyPerCCS, linkInhibits=linkInhibits, hgStatusClear=hgStatusClear, TimeString=TimeString, compRestartKey=compRestartKey, nasAlarmTableEntry=nasAlarmTableEntry, nasAllActiveCalls=nasAllActiveCalls, compProvStateKey=compProvStateKey, ss7LinksetFailureAlarmTableEntry=ss7LinksetFailureAlarmTableEntry, phoneDialCallNormalCompletions=phoneDialCallNormalCompletions, cplxMateStandbyState=cplxMateStandbyState, linkCongestionState=linkCongestionState, lostServerAlarmTableEntry=lostServerAlarmTableEntry, alarmStatusInt3=alarmStatusInt3, ifTimeStamp=ifTimeStamp, phoneOtherDialCallRejects=phoneOtherDialCallRejects, etherCardTrapCritical=etherCardTrapCritical, lcIPAddress=lcIPAddress, inCallNormalCompletions=inCallNormalCompletions, lsFailureIPAddress=lsFailureIPAddress, trunkInCallAbnormalCompletions=trunkInCallAbnormalCompletions, linkId=linkId, lfIPAddress=lfIPAddress, trunkOutCallNormalCompletions=trunkOutCallNormalCompletions, aliveNASes=aliveNASes, nasAbnormalReleaseOutCallRejects=nasAbnormalReleaseOutCallRejects, ncEthernetName=ncEthernetName, ncServerName=ncServerName, components=components, linksetTable=linksetTable, destRuleId=destRuleId, lcCardId=lcCardId, mtp2TimeStamp=mtp2TimeStamp, LinkCongestionState=LinkCongestionState, ifIndex=ifIndex, phoneCallOMTable=phoneCallOMTable, compSecsInCurrentState=compSecsInCurrentState, linkFailures=linkFailures, ss7MTP2TrunkFailureAlarmTable=ss7MTP2TrunkFailureAlarmTable, currentlyActiveDigitalInCalls=currentlyActiveDigitalInCalls, nasStatusClear=nasStatusClear, userUnavailableOutCallRejects=userUnavailableOutCallRejects, destInaccessIPAddress=destInaccessIPAddress, icIndex=icIndex, nasOutCallAttempts=nasOutCallAttempts, phoneCurrentlyActiveDigitalDialCalls=phoneCurrentlyActiveDigitalDialCalls, trunkCallOMIndex=trunkCallOMIndex, partitionTable=partitionTable, outCallAttempts=outCallAttempts, serverMemSize=serverMemSize, linksetIndex=linksetIndex, csgComplexStateTrapMajor=csgComplexStateTrapMajor, dialaccess=dialaccess, provsionedCards=provsionedCards, hgStatusAlarm=hgStatusAlarm, trunkAbnormalReleaseInCallRejects=trunkAbnormalReleaseInCallRejects, LinkAlignmentState=LinkAlignmentState, destInaccessTimeStamp=destInaccessTimeStamp, linkInhibitionState=linkInhibitionState, partitionIndex=partitionIndex, ncStandbyState=ncStandbyState, alarms=alarms, linkAlignLinkSet=linkAlignLinkSet, lsFailureTimeStamp=lsFailureTimeStamp, ss7DestinationInaccessibleAlarmTable=ss7DestinationInaccessibleAlarmTable, numberOfPorts=numberOfPorts, nasCurrentlyActiveDigitalInCalls=nasCurrentlyActiveDigitalInCalls, inCallAttempts=inCallAttempts, outCallAbnormalCompletions=outCallAbnormalCompletions, serverIpAddress=serverIpAddress, genericWarning=genericWarning, provisionedCircuits=provisionedCircuits, ss7MTP2TrunkFailureClear=ss7MTP2TrunkFailureClear, nasCurrentlyActiveOutCalls=nasCurrentlyActiveOutCalls, mtp3Name=mtp3Name, routeIndex=routeIndex, trunkCurrentlyActiveAnalogOutCalls=trunkCurrentlyActiveAnalogOutCalls, mtp3IPAddress=mtp3IPAddress, nasName1=nasName1, trunkInCallAttempts=trunkInCallAttempts, ss7DestinationCongestedAlarmTableEntry=ss7DestinationCongestedAlarmTableEntry, currentlyActiveInCalls=currentlyActiveInCalls, nasIndex=nasIndex, cplxLocOperationalState=cplxLocOperationalState, trunkCallOMTable=trunkCallOMTable, nasInCallAbnormalCompletions=nasInCallAbnormalCompletions, ncFoundServerTrap=ncFoundServerTrap, phoneNumberOMs=phoneNumberOMs, lfName=lfName, nasOutCallNormalCompletions=nasOutCallNormalCompletions, ss7BEPCongestionWarning=ss7BEPCongestionWarning, phoneCallOMTableEntry=phoneCallOMTableEntry, callOMs=callOMs, destInaccessName=destInaccessName, rSATimerExpiries=rSATimerExpiries, linkNumMSUTransmitted=linkNumMSUTransmitted, lsIPAddress=lsIPAddress, compDebugOn=compDebugOn, routeId=routeId, currentlyActiveAnalogOutCalls=currentlyActiveAnalogOutCalls, lsFailureIndex=lsFailureIndex, trunkUserUnavailableInCallRejects=trunkUserUnavailableInCallRejects, mtp2AlarmCondition=mtp2AlarmCondition, hgName=hgName, userUnavailableInCallRejects=userUnavailableInCallRejects, cplxLocAvailabilityState=cplxLocAvailabilityState, ncAvailabilityState=ncAvailabilityState, destCongestIndex=destCongestIndex, provisionedDPCs=provisionedDPCs, partitionSpaceTimeStamp=partitionSpaceTimeStamp, lcTimeStamp=lcTimeStamp, lcName=lcName, nasTempFailInCallRejects=nasTempFailInCallRejects, ss7ISUPFailureClear=ss7ISUPFailureClear)
