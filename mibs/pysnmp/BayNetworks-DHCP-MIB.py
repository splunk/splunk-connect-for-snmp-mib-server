#
# PySNMP MIB module BayNetworks-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BayNetworks-DHCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:25:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Integer32, Unsigned32, TimeTicks, MibIdentifier, Bits, NotificationType, ObjectIdentity, Gauge32, ModuleIdentity, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Integer32", "Unsigned32", "TimeTicks", "MibIdentifier", "Bits", "NotificationType", "ObjectIdentity", "Gauge32", "ModuleIdentity", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfDhcpServerGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDhcpServerGroup")
wfDhcpSvrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1))
wfDhcpSvrGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1))
wfDhcpSvrDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrDelete.setStatus('mandatory')
wfDhcpSvrDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrDisable.setStatus('mandatory')
wfDhcpSvrMgrIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrMgrIpAddr.setStatus('mandatory')
wfDhcpSvrMgrTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrMgrTcpPort.setStatus('mandatory')
wfDhcpSvrConfDetPings = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrConfDetPings.setStatus('mandatory')
wfDhcpSvrIcmpTmo = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 6), Integer32().clone(750)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrIcmpTmo.setStatus('mandatory')
wfDhcpSvrSafeModeDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrSafeModeDisable.setStatus('mandatory')
wfDhcpSvrMaxPendingLeases = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 8), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrMaxPendingLeases.setStatus('mandatory')
wfDhcpSvrDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrDebugLevel.setStatus('mandatory')
wfDhcpSvrMgrLocIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDhcpSvrMgrLocIpAddr.setStatus('mandatory')
wfDhcpSvrIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2), )
if mibBuilder.loadTexts: wfDhcpSvrIntfTable.setStatus('mandatory')
wfDhcpSvrIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1), ).setIndexNames((0, "BayNetworks-DHCP-MIB", "wfDhcpSvrIntfAddress"))
if mibBuilder.loadTexts: wfDhcpSvrIntfEntry.setStatus('mandatory')
wfDhcpSvrIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfAddress.setStatus('mandatory')
wfDhcpSvrIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfState.setStatus('mandatory')
wfDhcpSvrIntfPendLsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfPendLsCnt.setStatus('mandatory')
wfDhcpSvrIntfActLsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfActLsCnt.setStatus('mandatory')
wfDhcpSvrIntfCommits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfCommits.setStatus('mandatory')
wfDhcpSvrIntfCommitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfCommitFails.setStatus('mandatory')
wfDhcpSvrIntfCommitTmos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfCommitTmos.setStatus('mandatory')
wfDhcpSvrIntfIllegPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfIllegPkts.setStatus('mandatory')
wfDhcpSvrIntfDiscovers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfDiscovers.setStatus('mandatory')
wfDhcpSvrIntfBadDiscovers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfBadDiscovers.setStatus('mandatory')
wfDhcpSvrIntfReassgnLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfReassgnLeases.setStatus('mandatory')
wfDhcpSvrIntfNoFreeLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfNoFreeLeases.setStatus('mandatory')
wfDhcpSvrIntfDropdLeaseRqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfDropdLeaseRqs.setStatus('mandatory')
wfDhcpSvrIntfOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfOffers.setStatus('mandatory')
wfDhcpSvrIntfRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfRequests.setStatus('mandatory')
wfDhcpSvrIntfBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfBadRequests.setStatus('mandatory')
wfDhcpSvrIntfReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfReleases.setStatus('mandatory')
wfDhcpSvrIntfBadReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfBadReleases.setStatus('mandatory')
wfDhcpSvrIntfDeclines = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfDeclines.setStatus('mandatory')
wfDhcpSvrIntfBadDeclines = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfBadDeclines.setStatus('mandatory')
wfDhcpSvrIntfInforms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfInforms.setStatus('mandatory')
wfDhcpSvrIntfBadInforms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfBadInforms.setStatus('mandatory')
wfDhcpSvrIntfAddrConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrIntfAddrConflict.setStatus('mandatory')
wfDhcpSvrLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3), )
if mibBuilder.loadTexts: wfDhcpSvrLeaseTable.setStatus('mandatory')
wfDhcpSvrLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1), ).setIndexNames((0, "BayNetworks-DHCP-MIB", "wfDhcpSvrLeaseAddress"))
if mibBuilder.loadTexts: wfDhcpSvrLeaseEntry.setStatus('mandatory')
wfDhcpSvrLeaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("committed", 1), ("pending", 2), ("pendingfail", 3), ("pendingtmo", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseState.setStatus('mandatory')
wfDhcpSvrLeaseRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseRetries.setStatus('mandatory')
wfDhcpSvrLeaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseAddress.setStatus('mandatory')
wfDhcpSvrLeaseExpir = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseExpir.setStatus('mandatory')
wfDhcpSvrLeaseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseDuration.setStatus('mandatory')
wfDhcpSvrLeaseHwId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseHwId.setStatus('mandatory')
wfDhcpSvrLeaseClId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseClId.setStatus('mandatory')
wfDhcpSvrLeaseFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 24, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDhcpSvrLeaseFqdn.setStatus('mandatory')
mibBuilder.exportSymbols("BayNetworks-DHCP-MIB", wfDhcpSvrIcmpTmo=wfDhcpSvrIcmpTmo, wfDhcpSvrIntfTable=wfDhcpSvrIntfTable, wfDhcpSvrSafeModeDisable=wfDhcpSvrSafeModeDisable, wfDhcpSvrIntfState=wfDhcpSvrIntfState, wfDhcpSvrIntfNoFreeLeases=wfDhcpSvrIntfNoFreeLeases, wfDhcpSvrIntfBadDeclines=wfDhcpSvrIntfBadDeclines, wfDhcpSvrConfDetPings=wfDhcpSvrConfDetPings, wfDhcpSvrGroup=wfDhcpSvrGroup, wfDhcpSvrMgrIpAddr=wfDhcpSvrMgrIpAddr, wfDhcpSvrIntfCommitTmos=wfDhcpSvrIntfCommitTmos, wfDhcpSvrIntfBadReleases=wfDhcpSvrIntfBadReleases, wfDhcpSvrLeaseState=wfDhcpSvrLeaseState, wfDhcpSvrIntfBadInforms=wfDhcpSvrIntfBadInforms, wfDhcpSvrIntfDropdLeaseRqs=wfDhcpSvrIntfDropdLeaseRqs, wfDhcpSvrLeaseHwId=wfDhcpSvrLeaseHwId, wfDhcpSvrIntfDiscovers=wfDhcpSvrIntfDiscovers, wfDhcpSvrIntfEntry=wfDhcpSvrIntfEntry, wfDhcpSvrIntfReleases=wfDhcpSvrIntfReleases, wfDhcpSvrLeaseDuration=wfDhcpSvrLeaseDuration, wfDhcpSvrLeaseTable=wfDhcpSvrLeaseTable, wfDhcpSvrIntfPendLsCnt=wfDhcpSvrIntfPendLsCnt, wfDhcpSvrIntfReassgnLeases=wfDhcpSvrIntfReassgnLeases, wfDhcpSvrMaxPendingLeases=wfDhcpSvrMaxPendingLeases, wfDhcpSvrDelete=wfDhcpSvrDelete, wfDhcpSvrIntfCommits=wfDhcpSvrIntfCommits, wfDhcpSvrGeneral=wfDhcpSvrGeneral, wfDhcpSvrIntfAddress=wfDhcpSvrIntfAddress, wfDhcpSvrLeaseFqdn=wfDhcpSvrLeaseFqdn, wfDhcpSvrLeaseEntry=wfDhcpSvrLeaseEntry, wfDhcpSvrDisable=wfDhcpSvrDisable, wfDhcpSvrIntfBadDiscovers=wfDhcpSvrIntfBadDiscovers, wfDhcpSvrLeaseExpir=wfDhcpSvrLeaseExpir, wfDhcpSvrLeaseRetries=wfDhcpSvrLeaseRetries, wfDhcpSvrIntfOffers=wfDhcpSvrIntfOffers, wfDhcpSvrIntfRequests=wfDhcpSvrIntfRequests, wfDhcpSvrIntfDeclines=wfDhcpSvrIntfDeclines, wfDhcpSvrLeaseAddress=wfDhcpSvrLeaseAddress, wfDhcpSvrMgrTcpPort=wfDhcpSvrMgrTcpPort, wfDhcpSvrIntfActLsCnt=wfDhcpSvrIntfActLsCnt, wfDhcpSvrLeaseClId=wfDhcpSvrLeaseClId, wfDhcpSvrMgrLocIpAddr=wfDhcpSvrMgrLocIpAddr, wfDhcpSvrIntfInforms=wfDhcpSvrIntfInforms, wfDhcpSvrIntfAddrConflict=wfDhcpSvrIntfAddrConflict, wfDhcpSvrIntfCommitFails=wfDhcpSvrIntfCommitFails, wfDhcpSvrIntfIllegPkts=wfDhcpSvrIntfIllegPkts, wfDhcpSvrDebugLevel=wfDhcpSvrDebugLevel, wfDhcpSvrIntfBadRequests=wfDhcpSvrIntfBadRequests)
