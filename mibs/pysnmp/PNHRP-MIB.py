#
# PySNMP MIB module PNHRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PNHRP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:32:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, iso, TimeTicks, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, ObjectIdentity, Bits, Unsigned32, Counter64, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "TimeTicks", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Bits", "Unsigned32", "Counter64", "NotificationType", "IpAddress")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
xylanNHRP, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanNHRP")
pNHRPMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1))
pNHRPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1))
pNHRPConfigCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 1))
pNHRPConfigClient = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2))
pNHRPResolutionCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPResolutionCacheSize.setStatus('mandatory')
pNHRPIPExcludeTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 1, 2), )
if mibBuilder.loadTexts: pNHRPIPExcludeTable.setStatus('mandatory')
pNHRPIPExcludeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 1, 2, 1), ).setIndexNames((0, "PNHRP-MIB", "pNHRPIPExcludeAddress"))
if mibBuilder.loadTexts: pNHRPIPExcludeEntry.setStatus('mandatory')
pNHRPIPExcludeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: pNHRPIPExcludeAddress.setStatus('mandatory')
pNHRPIPExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPIPExcludeMask.setStatus('mandatory')
pNHRPIPExcludeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPIPExcludeRowStatus.setStatus('mandatory')
pNHRPDataRate = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPDataRate.setStatus('mandatory')
pNHRPPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2), )
if mibBuilder.loadTexts: pNHRPPortTable.setStatus('mandatory')
pNHRPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1), ).setIndexNames((0, "PNHRP-MIB", "pNHRPPortSlot"), (0, "PNHRP-MIB", "pNHRPPortIf"))
if mibBuilder.loadTexts: pNHRPPortEntry.setStatus('mandatory')
pNHRPPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: pNHRPPortSlot.setStatus('mandatory')
pNHRPPortIf = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: pNHRPPortIf.setStatus('mandatory')
pNHRPPortUseBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPPortUseBestEffort.setStatus('mandatory')
pNHRPPortPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPPortPeakCellRate.setStatus('mandatory')
pNHRPPortSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPPortSustainedCellRate.setStatus('mandatory')
pNHRPPortUseMyMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPPortUseMyMAC.setStatus('mandatory')
pNHRPPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 4, 1, 1, 2, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNHRPPortRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("PNHRP-MIB", pNHRPConfigClient=pNHRPConfigClient, pNHRPPortSustainedCellRate=pNHRPPortSustainedCellRate, pNHRPConfigCommon=pNHRPConfigCommon, pNHRPMIB=pNHRPMIB, pNHRPConfigGroup=pNHRPConfigGroup, pNHRPIPExcludeMask=pNHRPIPExcludeMask, pNHRPPortUseMyMAC=pNHRPPortUseMyMAC, pNHRPIPExcludeRowStatus=pNHRPIPExcludeRowStatus, pNHRPPortTable=pNHRPPortTable, pNHRPPortPeakCellRate=pNHRPPortPeakCellRate, pNHRPPortIf=pNHRPPortIf, pNHRPResolutionCacheSize=pNHRPResolutionCacheSize, pNHRPIPExcludeEntry=pNHRPIPExcludeEntry, pNHRPPortSlot=pNHRPPortSlot, pNHRPPortUseBestEffort=pNHRPPortUseBestEffort, pNHRPIPExcludeTable=pNHRPIPExcludeTable, pNHRPPortRowStatus=pNHRPPortRowStatus, pNHRPDataRate=pNHRPDataRate, pNHRPIPExcludeAddress=pNHRPIPExcludeAddress, pNHRPPortEntry=pNHRPPortEntry)
