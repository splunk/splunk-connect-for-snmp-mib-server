#
# PySNMP MIB module CPQIODRV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQIODRV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Bits, Counter32, NotificationType, Counter64, NotificationType, ObjectIdentity, Integer32, Gauge32, MibIdentifier, ModuleIdentity, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "NotificationType", "Counter64", "NotificationType", "ObjectIdentity", "Integer32", "Gauge32", "MibIdentifier", "ModuleIdentity", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqIoDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172))
cpqIoDrvMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 1))
cpqIoDrvComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2))
cpqIoDrvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 1))
cpqIoDrvExtn = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 2))
cpqIoDrvCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 3))
cpqIoDrvWrite = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 4))
cpqIoDrvTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 5))
cpqIoDrvProc = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 6))
cpqIoDrvMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 172, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvMibRevMajor.setStatus('mandatory')
cpqIoDrvMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 172, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvMibRevMinor.setStatus('mandatory')
cpqIoDrvMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 172, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvMibCondition.setStatus('mandatory')
cpqIoDrvInfoTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1), )
if mibBuilder.loadTexts: cpqIoDrvInfoTable.setStatus('mandatory')
cpqIoDrvInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvInfoIndex"))
if mibBuilder.loadTexts: cpqIoDrvInfoEntry.setStatus('mandatory')
cpqIoDrvInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoIndex.setStatus('mandatory')
cpqIoDrvInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoStatus.setStatus('mandatory')
cpqIoDrvInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvInfoName.setStatus('mandatory')
cpqIoDrvInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoSerialNumber.setStatus('mandatory')
cpqIoDrvInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPartNumber.setStatus('mandatory')
cpqIoDrvInfoSubVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoSubVendorPartNumber.setStatus('mandatory')
cpqIoDrvInfoSparesPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoSparesPartNumber.setStatus('mandatory')
cpqIoDrvInfoAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoAssemblyNumber.setStatus('mandatory')
cpqIoDrvInfoFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoFirmwareVersion.setStatus('mandatory')
cpqIoDrvInfoDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoDriverVersion.setStatus('mandatory')
cpqIoDrvInfoUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoUID.setStatus('mandatory')
cpqIoDrvInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("detached", 1), ("attached", 2), ("minimal", 3), ("error", 4), ("detaching", 5), ("attaching", 6), ("scanning", 7), ("formatting", 8), ("updating", 9), ("attach", 10), ("detach", 11), ("format", 12), ("update", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvInfoState.setStatus('mandatory')
cpqIoDrvInfoClientDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoClientDeviceName.setStatus('mandatory')
cpqIoDrvInfoBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvInfoBeacon.setStatus('mandatory')
cpqIoDrvInfoPCIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCIAddress.setStatus('mandatory')
cpqIoDrvInfoPCIDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCIDeviceID.setStatus('mandatory')
cpqIoDrvInfoPCISubdeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCISubdeviceID.setStatus('mandatory')
cpqIoDrvInfoPCIVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCIVendorID.setStatus('mandatory')
cpqIoDrvInfoPCISubvendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCISubvendorID.setStatus('mandatory')
cpqIoDrvInfoPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCISlot.setStatus('mandatory')
cpqIoDrvInfoWearoutIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoWearoutIndicator.setStatus('mandatory')
cpqIoDrvInfoFlashbackIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoFlashbackIndicator.setStatus('mandatory')
cpqIoDrvInfoNonWritableIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoNonWritableIndicator.setStatus('mandatory')
cpqIoDrvInfoCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoCurrentTemp.setStatus('mandatory')
cpqIoDrvInfoPercentLifeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPercentLifeRemaining.setStatus('mandatory')
cpqIoDrvInfoShortTermWearoutDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoShortTermWearoutDate.setStatus('mandatory')
cpqIoDrvInfoLongTermWearoutDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoLongTermWearoutDate.setStatus('mandatory')
cpqIoDrvInfoShortTermNonWritableDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoShortTermNonWritableDate.setStatus('mandatory')
cpqIoDrvInfoLongTermNonWritableDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoLongTermNonWritableDate.setStatus('mandatory')
cpqIoDrvExtnTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1), )
if mibBuilder.loadTexts: cpqIoDrvExtnTable.setStatus('mandatory')
cpqIoDrvExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvExtnIndex"))
if mibBuilder.loadTexts: cpqIoDrvExtnEntry.setStatus('mandatory')
cpqIoDrvExtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnIndex.setStatus('mandatory')
cpqIoDrvExtnTotalPhysicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalPhysicalCapacityU.setStatus('mandatory')
cpqIoDrvExtnTotalPhysicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalPhysicalCapacityL.setStatus('mandatory')
cpqIoDrvExtnUsablePhysicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsablePhysicalCapacityU.setStatus('mandatory')
cpqIoDrvExtnUsablePhysicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsablePhysicalCapacityL.setStatus('mandatory')
cpqIoDrvExtnUsedPhysicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsedPhysicalCapacityU.setStatus('mandatory')
cpqIoDrvExtnUsedPhysicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsedPhysicalCapacityL.setStatus('mandatory')
cpqIoDrvExtnTotalLogicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalLogicalCapacityU.setStatus('mandatory')
cpqIoDrvExtnTotalLogicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalLogicalCapacityL.setStatus('mandatory')
cpqIoDrvExtnAvailableLogicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnAvailableLogicalCapacityU.setStatus('mandatory')
cpqIoDrvExtnAvailableLogicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnAvailableLogicalCapacityL.setStatus('mandatory')
cpqIoDrvExtnBytesReadU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnBytesReadU.setStatus('mandatory')
cpqIoDrvExtnBytesReadL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnBytesReadL.setStatus('mandatory')
cpqIoDrvExtnPhysicalBytesWrittenU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnPhysicalBytesWrittenU.setStatus('mandatory')
cpqIoDrvExtnPhysicalBytesWrittenL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnPhysicalBytesWrittenL.setStatus('mandatory')
cpqIoDrvExtnLogicalBytesWrittenU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnLogicalBytesWrittenU.setStatus('mandatory')
cpqIoDrvExtnLogicalBytesWrittenL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnLogicalBytesWrittenL.setStatus('mandatory')
cpqIoDrvExtnShortTermStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermStartDate.setStatus('mandatory')
cpqIoDrvExtnShortTermWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermWindow.setStatus('mandatory')
cpqIoDrvExtnShortTermEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermEndDate.setStatus('mandatory')
cpqIoDrvExtnShortTermEndDateFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermEndDateFloat.setStatus('mandatory')
cpqIoDrvExtnLongTermStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermStartDate.setStatus('mandatory')
cpqIoDrvExtnLongTermWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermWindow.setStatus('mandatory')
cpqIoDrvExtnLongTermEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermEndDate.setStatus('mandatory')
cpqIoDrvExtnLongTermEndDateFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermEndDateFloat.setStatus('mandatory')
cpqIoDrvExtnWriteRateAutoCalc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnWriteRateAutoCalc.setStatus('mandatory')
cpqIoDrvExtnShortTermAvgU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermAvgU.setStatus('mandatory')
cpqIoDrvExtnShortTermAvgL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermAvgL.setStatus('mandatory')
cpqIoDrvExtnLongTermAvgU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermAvgU.setStatus('mandatory')
cpqIoDrvExtnLongTermAvgL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermAvgL.setStatus('mandatory')
cpqIoDrvExtnConfidenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnConfidenceInterval.setStatus('mandatory')
cpqIoDrvCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1), )
if mibBuilder.loadTexts: cpqIoDrvCapacityTable.setStatus('mandatory')
cpqIoDrvCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvCapacityInfoIndex"), (0, "CPQIODRV-MIB", "cpqIoDrvCapacityIndex"))
if mibBuilder.loadTexts: cpqIoDrvCapacityEntry.setStatus('mandatory')
cpqIoDrvCapacityInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityInfoIndex.setStatus('mandatory')
cpqIoDrvCapacityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityIndex.setStatus('optional')
cpqIoDrvCapacityValueU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityValueU.setStatus('mandatory')
cpqIoDrvCapacityValueL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityValueL.setStatus('mandatory')
cpqIoDrvCapacityTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityTimestamp.setStatus('mandatory')
cpqIoDrvWriteTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1), )
if mibBuilder.loadTexts: cpqIoDrvWriteTable.setStatus('optional')
cpqIoDrvWriteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvWriteInfoIndex"), (0, "CPQIODRV-MIB", "cpqIoDrvWriteIndex"))
if mibBuilder.loadTexts: cpqIoDrvWriteEntry.setStatus('optional')
cpqIoDrvWriteInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteInfoIndex.setStatus('mandatory')
cpqIoDrvWriteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteIndex.setStatus('optional')
cpqIoDrvWriteValueU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteValueU.setStatus('mandatory')
cpqIoDrvWriteValueL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteValueL.setStatus('mandatory')
cpqIoDrvWriteTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteTimestamp.setStatus('mandatory')
cpqIoDrvTempTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1), )
if mibBuilder.loadTexts: cpqIoDrvTempTable.setStatus('optional')
cpqIoDrvTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvTempInfoIndex"), (0, "CPQIODRV-MIB", "cpqIoDrvTempIndex"))
if mibBuilder.loadTexts: cpqIoDrvTempEntry.setStatus('optional')
cpqIoDrvTempInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempInfoIndex.setStatus('mandatory')
cpqIoDrvTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempIndex.setStatus('optional')
cpqIoDrvTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempValue.setStatus('mandatory')
cpqIoDrvTempTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempTimestamp.setStatus('mandatory')
cpqIoDrvProcTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1), )
if mibBuilder.loadTexts: cpqIoDrvProcTable.setStatus('optional')
cpqIoDrvProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvProcIndex"))
if mibBuilder.loadTexts: cpqIoDrvProcEntry.setStatus('optional')
cpqIoDrvProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcIndex.setStatus('optional')
cpqIoDrvProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcName.setStatus('mandatory')
cpqIoDrvProcState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcState.setStatus('mandatory')
cpqIoDrvProcRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcRAM.setStatus('mandatory')
cpqIoDrvProcCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcCPU.setStatus('mandatory')
cpqIoDrvWearoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoWearoutIndicator"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
cpqIoDrvNonWritableTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoNonWritableIndicator"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
cpqIoDrvFlashbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoFlashbackIndicator"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
cpqIoDrvTempHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoCurrentTemp"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
cpqIoDrvTempOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoCurrentTemp"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
cpqIoDrvErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoState"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
mibBuilder.exportSymbols("CPQIODRV-MIB", cpqIoDrvInfoName=cpqIoDrvInfoName, cpqIoDrvWriteInfoIndex=cpqIoDrvWriteInfoIndex, cpqIoDrvWriteValueL=cpqIoDrvWriteValueL, cpqIoDrvTempInfoIndex=cpqIoDrvTempInfoIndex, cpqIoDrvExtnShortTermEndDateFloat=cpqIoDrvExtnShortTermEndDateFloat, cpqIoDrvExtnUsedPhysicalCapacityL=cpqIoDrvExtnUsedPhysicalCapacityL, cpqIoDrvExtnTotalLogicalCapacityL=cpqIoDrvExtnTotalLogicalCapacityL, cpqIoDrvErrorTrap=cpqIoDrvErrorTrap, cpqIoDrvInfoShortTermWearoutDate=cpqIoDrvInfoShortTermWearoutDate, cpqIoDrvProcName=cpqIoDrvProcName, cpqIoDrvTempTimestamp=cpqIoDrvTempTimestamp, cpqIoDrvInfoSerialNumber=cpqIoDrvInfoSerialNumber, cpqIoDrvInfoSparesPartNumber=cpqIoDrvInfoSparesPartNumber, cpqIoDrvInfoTable=cpqIoDrvInfoTable, cpqIoDrvProcState=cpqIoDrvProcState, cpqIoDrvExtnLongTermAvgU=cpqIoDrvExtnLongTermAvgU, cpqIoDrvExtnAvailableLogicalCapacityL=cpqIoDrvExtnAvailableLogicalCapacityL, cpqIoDrvInfoPCIDeviceID=cpqIoDrvInfoPCIDeviceID, cpqIoDrvCapacityInfoIndex=cpqIoDrvCapacityInfoIndex, cpqIoDrvTempValue=cpqIoDrvTempValue, cpqIoDrvInfoIndex=cpqIoDrvInfoIndex, cpqIoDrvNonWritableTrap=cpqIoDrvNonWritableTrap, cpqIoDrvExtnWriteRateAutoCalc=cpqIoDrvExtnWriteRateAutoCalc, cpqIoDrvInfoFlashbackIndicator=cpqIoDrvInfoFlashbackIndicator, cpqIoDrvExtnShortTermEndDate=cpqIoDrvExtnShortTermEndDate, cpqIoDrvExtnShortTermAvgU=cpqIoDrvExtnShortTermAvgU, cpqIoDrvMibRevMinor=cpqIoDrvMibRevMinor, cpqIoDrvWriteTable=cpqIoDrvWriteTable, cpqIoDrvWriteTimestamp=cpqIoDrvWriteTimestamp, cpqIoDrvExtnUsedPhysicalCapacityU=cpqIoDrvExtnUsedPhysicalCapacityU, cpqIoDrvInfoSubVendorPartNumber=cpqIoDrvInfoSubVendorPartNumber, cpqIoDrvComponent=cpqIoDrvComponent, cpqIoDrvExtn=cpqIoDrvExtn, cpqIoDrvInfoAssemblyNumber=cpqIoDrvInfoAssemblyNumber, cpqIoDrvProcTable=cpqIoDrvProcTable, cpqIoDrvTempEntry=cpqIoDrvTempEntry, cpqIoDrvCapacityValueL=cpqIoDrvCapacityValueL, cpqIoDrvInfoEntry=cpqIoDrvInfoEntry, cpqIoDrvInfoLongTermWearoutDate=cpqIoDrvInfoLongTermWearoutDate, cpqIoDrvExtnShortTermWindow=cpqIoDrvExtnShortTermWindow, cpqIoDrvCapacityTable=cpqIoDrvCapacityTable, cpqIoDrvWriteValueU=cpqIoDrvWriteValueU, cpqIoDrvExtnPhysicalBytesWrittenU=cpqIoDrvExtnPhysicalBytesWrittenU, cpqIoDrvTempOkTrap=cpqIoDrvTempOkTrap, cpqIoDrvCapacityIndex=cpqIoDrvCapacityIndex, cpqIoDrvProc=cpqIoDrvProc, cpqIoDrvExtnPhysicalBytesWrittenL=cpqIoDrvExtnPhysicalBytesWrittenL, cpqIoDrvExtnIndex=cpqIoDrvExtnIndex, cpqIoDrvExtnLogicalBytesWrittenL=cpqIoDrvExtnLogicalBytesWrittenL, cpqIoDrvProcEntry=cpqIoDrvProcEntry, cpqIoDrvInfoPCISlot=cpqIoDrvInfoPCISlot, cpqIoDrvMibRevMajor=cpqIoDrvMibRevMajor, cpqIoDrvProcCPU=cpqIoDrvProcCPU, cpqIoDrvExtnShortTermStartDate=cpqIoDrvExtnShortTermStartDate, cpqIoDrvInfoNonWritableIndicator=cpqIoDrvInfoNonWritableIndicator, cpqIoDrvInfoPCISubvendorID=cpqIoDrvInfoPCISubvendorID, cpqIoDrvTempIndex=cpqIoDrvTempIndex, cpqIoDrv=cpqIoDrv, cpqIoDrvTempHighTrap=cpqIoDrvTempHighTrap, cpqIoDrvMibRev=cpqIoDrvMibRev, cpqIoDrvCapacity=cpqIoDrvCapacity, cpqIoDrvInfoPCISubdeviceID=cpqIoDrvInfoPCISubdeviceID, cpqIoDrvProcIndex=cpqIoDrvProcIndex, cpqIoDrvMibCondition=cpqIoDrvMibCondition, cpqIoDrvExtnTotalLogicalCapacityU=cpqIoDrvExtnTotalLogicalCapacityU, cpqIoDrvInfoWearoutIndicator=cpqIoDrvInfoWearoutIndicator, cpqIoDrvExtnLongTermStartDate=cpqIoDrvExtnLongTermStartDate, cpqIoDrvInfoPercentLifeRemaining=cpqIoDrvInfoPercentLifeRemaining, cpqIoDrvExtnLongTermAvgL=cpqIoDrvExtnLongTermAvgL, cpqIoDrvFlashbackTrap=cpqIoDrvFlashbackTrap, cpqIoDrvTemp=cpqIoDrvTemp, cpqIoDrvExtnEntry=cpqIoDrvExtnEntry, cpqIoDrvProcRAM=cpqIoDrvProcRAM, cpqIoDrvExtnAvailableLogicalCapacityU=cpqIoDrvExtnAvailableLogicalCapacityU, cpqIoDrvExtnTotalPhysicalCapacityU=cpqIoDrvExtnTotalPhysicalCapacityU, cpqIoDrvInfoPCIVendorID=cpqIoDrvInfoPCIVendorID, cpqIoDrvWrite=cpqIoDrvWrite, cpqIoDrvExtnBytesReadU=cpqIoDrvExtnBytesReadU, cpqIoDrvInfoFirmwareVersion=cpqIoDrvInfoFirmwareVersion, cpqIoDrvInfoCurrentTemp=cpqIoDrvInfoCurrentTemp, cpqIoDrvExtnShortTermAvgL=cpqIoDrvExtnShortTermAvgL, cpqIoDrvCapacityValueU=cpqIoDrvCapacityValueU, cpqIoDrvInfoBeacon=cpqIoDrvInfoBeacon, cpqIoDrvExtnUsablePhysicalCapacityL=cpqIoDrvExtnUsablePhysicalCapacityL, cpqIoDrvInfoState=cpqIoDrvInfoState, cpqIoDrvInfoClientDeviceName=cpqIoDrvInfoClientDeviceName, cpqIoDrvWearoutTrap=cpqIoDrvWearoutTrap, cpqIoDrvWriteEntry=cpqIoDrvWriteEntry, cpqIoDrvExtnLongTermEndDate=cpqIoDrvExtnLongTermEndDate, cpqIoDrvExtnConfidenceInterval=cpqIoDrvExtnConfidenceInterval, cpqIoDrvInfoLongTermNonWritableDate=cpqIoDrvInfoLongTermNonWritableDate, cpqIoDrvExtnUsablePhysicalCapacityU=cpqIoDrvExtnUsablePhysicalCapacityU, cpqIoDrvExtnTotalPhysicalCapacityL=cpqIoDrvExtnTotalPhysicalCapacityL, cpqIoDrvInfoShortTermNonWritableDate=cpqIoDrvInfoShortTermNonWritableDate, cpqIoDrvWriteIndex=cpqIoDrvWriteIndex, cpqIoDrvInfo=cpqIoDrvInfo, cpqIoDrvExtnTable=cpqIoDrvExtnTable, cpqIoDrvInfoStatus=cpqIoDrvInfoStatus, cpqIoDrvCapacityEntry=cpqIoDrvCapacityEntry, cpqIoDrvInfoUID=cpqIoDrvInfoUID, cpqIoDrvInfoPCIAddress=cpqIoDrvInfoPCIAddress, cpqIoDrvCapacityTimestamp=cpqIoDrvCapacityTimestamp, cpqIoDrvTempTable=cpqIoDrvTempTable, cpqIoDrvInfoPartNumber=cpqIoDrvInfoPartNumber, cpqIoDrvExtnLongTermEndDateFloat=cpqIoDrvExtnLongTermEndDateFloat, cpqIoDrvExtnLogicalBytesWrittenU=cpqIoDrvExtnLogicalBytesWrittenU, cpqIoDrvExtnBytesReadL=cpqIoDrvExtnBytesReadL, cpqIoDrvExtnLongTermWindow=cpqIoDrvExtnLongTermWindow, cpqIoDrvInfoDriverVersion=cpqIoDrvInfoDriverVersion)
