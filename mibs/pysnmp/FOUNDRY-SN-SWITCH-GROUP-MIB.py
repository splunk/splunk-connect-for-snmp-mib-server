#
# PySNMP MIB module FOUNDRY-SN-SWITCH-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-SWITCH-GROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:23:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
MacAddress, DisplayString = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "MacAddress", "DisplayString")
switch, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "switch")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, Integer32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, TimeTicks, ObjectIdentity, Unsigned32, Bits, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Integer32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Unsigned32", "Bits", "Counter32", "IpAddress")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
snSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3))
snSwitch.setRevisions(('2013-10-25 00:00', '2010-06-02 00:00', '2009-09-30 00:00',))
if mibBuilder.loadTexts: snSwitch.setLastUpdated('201310250000Z')
if mibBuilder.loadTexts: snSwitch.setOrganization('Brocade Communications Systems, Inc.')
class PhysAddress(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'

class PortMask(TextualConvention, Integer32):
    status = 'current'

class InterfaceId(TextualConvention, ObjectIdentifier):
    status = 'current'

class InterfaceId2(TextualConvention, ObjectIdentifier):
    status = 'current'

class VlanTagMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tagged", 1), ("untagged", 2), ("dual", 3))

class FdryVlanIdOrNoneTC(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), )
class BrcdVlanIdTC(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4090)

class BrcdVlanIdOrNoneTC(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4090), )
class PortQosTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 127))
    namedValues = NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("invalid", 127))

class PortPriorityTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 128))
    namedValues = NamedValues(("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8), ("nonPriority", 128))

snSwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1))
snVLanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2))
snSwPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3))
snFdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4))
snPortStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5))
snTrunkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6))
snSwSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 7))
snDhcpGatewayListInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8))
snDnsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9))
snMacFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10))
snNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11))
snRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12))
snTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13))
snQos = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14))
snAAA = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15))
snCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 16))
snVLanCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 17))
snNetFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18))
snSFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19))
snFDP = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20))
snVsrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21))
snArpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 22))
snWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23))
snMac = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24))
snPortMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25))
snSSH = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 26))
snSSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 27))
snMacAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 28))
snMetroRing = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 29))
snStacking = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 31))
fdryMacVlanMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 32))
fdryLinkAggregationGroupMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 33))
fdryDns2MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 34))
fdryDaiMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35))
fdryDhcpSnoopMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 36))
fdryIpSrcGuardMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 37))
brcdRouteMap = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 39))
brcdSPXMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40))
snSwGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noVLan", 1), ("vlanByPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupOperMode.setStatus('current')
snSwGroupIpL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupIpL3SwMode.setStatus('current')
snSwGroupIpMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupIpMcastMode.setStatus('current')
snSwGroupDefaultCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("nonDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupDefaultCfgMode.setStatus('current')
snSwGroupSwitchAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupSwitchAgeTime.setStatus('current')
snVLanGroupVlanCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanGroupVlanCurEntry.setStatus('current')
snVLanGroupSetAllVLan = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanGroupSetAllVLan.setStatus('current')
snSwPortSetAll = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortSetAll.setStatus('current')
snFdbTableCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbTableCurEntry.setStatus('current')
snFdbTableStationFlush = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("flush", 3), ("flushing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbTableStationFlush.setStatus('current')
snPortStpSetAll = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpSetAll.setStatus('current')
snSwProbePortNum = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwProbePortNum.setStatus('current')
snSw8021qTagMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSw8021qTagMode.setStatus('current')
snSwGlobalStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGlobalStpMode.setStatus('current')
snSwIpMcastQuerierMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIpMcastQuerierMode.setStatus('current')
snSwViolatorPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorPortNumber.setStatus('current')
snSwViolatorMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorMacAddress.setStatus('current')
snVLanGroupVlanMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanGroupVlanMaxEntry.setStatus('current')
snSwEosBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwEosBufferSize.setStatus('current')
snVLanByPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortEntrySize.setStatus('current')
snSwPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortEntrySize.setStatus('current')
snFdbStationEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbStationEntrySize.setStatus('current')
snPortStpEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpEntrySize.setStatus('current')
snSwEnableBridgeNewRootTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableBridgeNewRootTrap.setStatus('current')
snSwEnableBridgeTopoChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableBridgeTopoChangeTrap.setStatus('current')
snSwEnableLockedAddrViolationTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableLockedAddrViolationTrap.setStatus('current')
snSwIpxL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIpxL3SwMode.setStatus('current')
snVLanByIpSubnetMaxSubnets = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetMaxSubnets.setStatus('current')
snVLanByIpxNetMaxNetworks = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetMaxNetworks.setStatus('current')
snSwProtocolVLanMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwProtocolVLanMode.setStatus('deprecated')
snMacStationVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacStationVLanId.setStatus('deprecated')
snSwClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwClearCounters.setStatus('current')
snSw8021qTagType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 34), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSw8021qTagType.setStatus('current')
snSwBroadcastLimit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwBroadcastLimit.setStatus('current')
snSwMaxMacFilterPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwMaxMacFilterPerSystem.setStatus('current')
snSwMaxMacFilterPerPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwMaxMacFilterPerPort.setStatus('current')
snSwDefaultVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwDefaultVLanId.setStatus('current')
snSwGlobalAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("other", 3))).clone('negFullAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGlobalAutoNegotiate.setStatus('current')
snSwQosMechanism = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("strict", 0), ("weighted", 1))).clone('weighted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwQosMechanism.setStatus('current')
snSwSingleStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwSingleStpMode.setStatus('current')
snSwFastStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwFastStpMode.setStatus('current')
snSwViolatorIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorIfIndex.setStatus('current')
snSwSingleStpVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwSingleStpVLanId.setStatus('current')
snSwBroadcastLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 45), Unsigned32().clone(4294967295)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwBroadcastLimit2.setStatus('current')
snVLanByPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: snVLanByPortTable.setStatus('deprecated')
snVLanByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortVLanIndex"))
if mibBuilder.loadTexts: snVLanByPortEntry.setStatus('deprecated')
snVLanByPortVLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortVLanIndex.setStatus('deprecated')
snVLanByPortVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortVLanId.setStatus('deprecated')
snVLanByPortPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 3), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortPortMask.setStatus('deprecated')
snVLanByPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortQos.setStatus('deprecated')
snVLanByPortStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpMode.setStatus('deprecated')
snVLanByPortStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpPriority.setStatus('deprecated')
snVLanByPortStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupMaxAge.setStatus('deprecated')
snVLanByPortStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupHelloTime.setStatus('deprecated')
snVLanByPortStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupForwardDelay.setStatus('deprecated')
snVLanByPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortRowStatus.setStatus('deprecated')
snVLanByPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortOperState.setStatus('deprecated')
snVLanByPortBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseNumPorts.setStatus('deprecated')
snVLanByPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparentOnly", 2), ("sourcerouteOnly", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseType.setStatus('deprecated')
snVLanByPortStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpProtocolSpecification.setStatus('deprecated')
snVLanByPortStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 15), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpMaxAge.setStatus('deprecated')
snVLanByPortStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 16), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpHelloTime.setStatus('deprecated')
snVLanByPortStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpHoldTime.setStatus('deprecated')
snVLanByPortStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 18), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpForwardDelay.setStatus('deprecated')
snVLanByPortStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpTimeSinceTopologyChange.setStatus('deprecated')
snVLanByPortStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpTopChanges.setStatus('deprecated')
snVLanByPortStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpRootCost.setStatus('deprecated')
snVLanByPortStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpRootPort.setStatus('deprecated')
snVLanByPortStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 23), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpDesignatedRoot.setStatus('deprecated')
snVLanByPortBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseBridgeAddress.setStatus('deprecated')
snVLanByPortVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortVLanName.setStatus('deprecated')
snVLanByPortRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortRouterIntf.setStatus('deprecated')
snVLanByPortChassisPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortChassisPortMask.setStatus('deprecated')
snVLanByPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortPortList.setStatus('deprecated')
snVLanByPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: snVLanByPortMemberTable.setStatus('current')
snVLanByPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberPortId"))
if mibBuilder.loadTexts: snVLanByPortMemberEntry.setStatus('current')
snVLanByPortMemberVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortMemberVLanId.setStatus('current')
snVLanByPortMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortMemberPortId.setStatus('current')
snVLanByPortMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortMemberRowStatus.setStatus('current')
snVLanByPortMemberTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortMemberTagMode.setStatus('current')
snVLanByPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7), )
if mibBuilder.loadTexts: snVLanByPortCfgTable.setStatus('current')
snVLanByPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"))
if mibBuilder.loadTexts: snVLanByPortCfgEntry.setStatus('current')
snVLanByPortCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgVLanId.setStatus('current')
snVLanByPortCfgQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 2), PortQosTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgQos.setStatus('current')
snVLanByPortCfgStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpMode.setStatus('current')
snVLanByPortCfgStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpPriority.setStatus('current')
snVLanByPortCfgStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupMaxAge.setStatus('current')
snVLanByPortCfgStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupHelloTime.setStatus('current')
snVLanByPortCfgStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupForwardDelay.setStatus('current')
snVLanByPortCfgBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseNumPorts.setStatus('current')
snVLanByPortCfgBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparentOnly", 2), ("sourcerouteOnly", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseType.setStatus('current')
snVLanByPortCfgStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpProtocolSpecification.setStatus('current')
snVLanByPortCfgStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpMaxAge.setStatus('current')
snVLanByPortCfgStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpHelloTime.setStatus('current')
snVLanByPortCfgStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpHoldTime.setStatus('current')
snVLanByPortCfgStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpForwardDelay.setStatus('current')
snVLanByPortCfgStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpTimeSinceTopologyChange.setStatus('current')
snVLanByPortCfgStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpTopChanges.setStatus('current')
snVLanByPortCfgStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpRootCost.setStatus('current')
snVLanByPortCfgStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpRootPort.setStatus('current')
snVLanByPortCfgStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 19), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpDesignatedRoot.setStatus('current')
snVLanByPortCfgBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseBridgeAddress.setStatus('current')
snVLanByPortCfgVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgVLanName.setStatus('current')
snVLanByPortCfgRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgRouterIntf.setStatus('current')
snVLanByPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgRowStatus.setStatus('current')
snVLanByPortCfgStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpVersion.setStatus('current')
snVLanByPortCfgInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgInOctets.setStatus('current')
snVLanByPortCfgTransparentHwFlooding = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgTransparentHwFlooding.setStatus('current')
brcdVlanExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8), )
if mibBuilder.loadTexts: brcdVlanExtStatsTable.setStatus('current')
brcdVlanExtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdVlanExtStatsVlanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdVlanExtStatsIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdVlanExtStatsPriorityId"))
if mibBuilder.loadTexts: brcdVlanExtStatsEntry.setStatus('current')
brcdVlanExtStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 1), BrcdVlanIdTC())
if mibBuilder.loadTexts: brcdVlanExtStatsVlanId.setStatus('current')
brcdVlanExtStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: brcdVlanExtStatsIfIndex.setStatus('current')
brcdVlanExtStatsPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 3), PortPriorityTC())
if mibBuilder.loadTexts: brcdVlanExtStatsPriorityId.setStatus('current')
brcdVlanExtStatsInSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInSwitchedPkts.setStatus('current')
brcdVlanExtStatsInRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInRoutedPkts.setStatus('current')
brcdVlanExtStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInPkts.setStatus('current')
brcdVlanExtStatsOutSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutSwitchedPkts.setStatus('current')
brcdVlanExtStatsOutRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutRoutedPkts.setStatus('current')
brcdVlanExtStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutPkts.setStatus('current')
brcdVlanExtStatsInSwitchedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInSwitchedOctets.setStatus('current')
brcdVlanExtStatsInRoutedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInRoutedOctets.setStatus('current')
brcdVlanExtStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInOctets.setStatus('current')
brcdVlanExtStatsOutSwitchedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutSwitchedOctets.setStatus('current')
brcdVlanExtStatsOutRoutedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutRoutedOctets.setStatus('current')
brcdVlanExtStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutOctets.setStatus('current')
snVLanByProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: snVLanByProtocolTable.setStatus('current')
snVLanByProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByProtocolVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByProtocolIndex"))
if mibBuilder.loadTexts: snVLanByProtocolEntry.setStatus('current')
snVLanByProtocolVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolVLanId.setStatus('current')
snVLanByProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appleTalk", 3), ("decNet", 4), ("netBios", 5), ("others", 6), ("ipv6", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolIndex.setStatus('current')
snVLanByProtocolDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolDynamic.setStatus('current')
snVLanByProtocolStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 4), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolStaticMask.setStatus('deprecated')
snVLanByProtocolExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolExcludeMask.setStatus('deprecated')
snVLanByProtocolRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolRouterIntf.setStatus('current')
snVLanByProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolRowStatus.setStatus('current')
snVLanByProtocolDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 8), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolDynamicMask.setStatus('deprecated')
snVLanByProtocolChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolChassisStaticMask.setStatus('deprecated')
snVLanByProtocolChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolChassisExcludeMask.setStatus('deprecated')
snVLanByProtocolChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolChassisDynamicMask.setStatus('deprecated')
snVLanByProtocolVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolVLanName.setStatus('current')
snVLanByProtocolStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolStaticPortList.setStatus('current')
snVLanByProtocolExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolExcludePortList.setStatus('current')
snVLanByProtocolDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolDynamicPortList.setStatus('current')
snVLanByIpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: snVLanByIpSubnetTable.setStatus('current')
snVLanByIpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetIpAddress"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetSubnetMask"))
if mibBuilder.loadTexts: snVLanByIpSubnetEntry.setStatus('current')
snVLanByIpSubnetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetVLanId.setStatus('current')
snVLanByIpSubnetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetIpAddress.setStatus('current')
snVLanByIpSubnetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetSubnetMask.setStatus('current')
snVLanByIpSubnetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamic.setStatus('current')
snVLanByIpSubnetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetStaticMask.setStatus('deprecated')
snVLanByIpSubnetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetExcludeMask.setStatus('deprecated')
snVLanByIpSubnetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetRouterIntf.setStatus('current')
snVLanByIpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetRowStatus.setStatus('current')
snVLanByIpSubnetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 9), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicMask.setStatus('deprecated')
snVLanByIpSubnetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisStaticMask.setStatus('deprecated')
snVLanByIpSubnetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisExcludeMask.setStatus('deprecated')
snVLanByIpSubnetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisDynamicMask.setStatus('deprecated')
snVLanByIpSubnetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetVLanName.setStatus('current')
snVLanByIpSubnetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetStaticPortList.setStatus('current')
snVLanByIpSubnetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetExcludePortList.setStatus('current')
snVLanByIpSubnetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicPortList.setStatus('current')
snVLanByIpxNetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: snVLanByIpxNetTable.setStatus('current')
snVLanByIpxNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetNetworkNum"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetFrameType"))
if mibBuilder.loadTexts: snVLanByIpxNetEntry.setStatus('current')
snVLanByIpxNetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetVLanId.setStatus('current')
snVLanByIpxNetNetworkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetNetworkNum.setStatus('current')
snVLanByIpxNetFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("ipxEthernet8022", 1), ("ipxEthernet8023", 2), ("ipxEthernetII", 3), ("ipxEthernetSnap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetFrameType.setStatus('current')
snVLanByIpxNetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetDynamic.setStatus('current')
snVLanByIpxNetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetStaticMask.setStatus('deprecated')
snVLanByIpxNetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetExcludeMask.setStatus('deprecated')
snVLanByIpxNetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetRouterIntf.setStatus('current')
snVLanByIpxNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetRowStatus.setStatus('current')
snVLanByIpxNetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 9), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetDynamicMask.setStatus('deprecated')
snVLanByIpxNetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetChassisStaticMask.setStatus('deprecated')
snVLanByIpxNetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetChassisExcludeMask.setStatus('deprecated')
snVLanByIpxNetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetChassisDynamicMask.setStatus('deprecated')
snVLanByIpxNetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetVLanName.setStatus('current')
snVLanByIpxNetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetStaticPortList.setStatus('current')
snVLanByIpxNetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetExcludePortList.setStatus('current')
snVLanByIpxNetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetDynamicPortList.setStatus('current')
snVLanByATCableTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5), )
if mibBuilder.loadTexts: snVLanByATCableTable.setStatus('current')
snVLanByATCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByATCableVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByATCableIndex"))
if mibBuilder.loadTexts: snVLanByATCableEntry.setStatus('current')
snVLanByATCableVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByATCableVLanId.setStatus('current')
snVLanByATCableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByATCableIndex.setStatus('current')
snVLanByATCableRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableRouterIntf.setStatus('current')
snVLanByATCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableRowStatus.setStatus('current')
snVLanByATCableChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableChassisStaticMask.setStatus('deprecated')
snVLanByATCableVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableVLanName.setStatus('current')
snVLanByATCableStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableStaticPortList.setStatus('current')
snSwPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: snSwPortInfoTable.setStatus('deprecated')
snSwPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwPortInfoPortNum"))
if mibBuilder.loadTexts: snSwPortInfoEntry.setStatus('deprecated')
snSwPortInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoPortNum.setStatus('deprecated')
snSwPortInfoMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("input", 1), ("output", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoMonitorMode.setStatus('deprecated')
snSwPortInfoTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("auto", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoTagMode.setStatus('deprecated')
snSwPortInfoChnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoChnMode.setStatus('deprecated')
snSwPortInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("sAutoSense", 1), ("s10M", 2), ("s100M", 3), ("s1G", 4), ("s1GM", 5), ("s155M", 6), ("s10G", 7), ("s622M", 8), ("s2488M", 9), ("s9953M", 10), ("s16G", 11), ("s40G", 13), ("s2500M", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoSpeed.setStatus('deprecated')
snSwPortInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("other", 1), ("m100BaseTX", 2), ("m100BaseFX", 3), ("m1000BaseFX", 4), ("mT3", 5), ("m155ATM", 6), ("m1000BaseTX", 7), ("m622ATM", 8), ("m155POS", 9), ("m622POS", 10), ("m2488POS", 11), ("m10000BaseFX", 12), ("m9953POS", 13), ("m16GStacking", 14), ("m100GBaseFX", 15), ("m40GStacking", 16), ("m40GBaseFX", 17), ("m10000BaseTX", 18), ("m2500BaseTX", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoMediaType.setStatus('deprecated')
snSwPortInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoConnectorType.setStatus('deprecated')
snSwPortInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoAdminStatus.setStatus('deprecated')
snSwPortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoLinkStatus.setStatus('deprecated')
snSwPortInfoPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoPortQos.setStatus('deprecated')
snSwPortInfoPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoPhysAddress.setStatus('deprecated')
snSwPortStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInFrames.setStatus('deprecated')
snSwPortStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutFrames.setStatus('deprecated')
snSwPortStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsAlignErrors.setStatus('deprecated')
snSwPortStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFCSErrors.setStatus('deprecated')
snSwPortStatsMultiColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsMultiColliFrames.setStatus('deprecated')
snSwPortStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFrameTooLongs.setStatus('deprecated')
snSwPortStatsTxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsTxColliFrames.setStatus('deprecated')
snSwPortStatsRxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsRxColliFrames.setStatus('deprecated')
snSwPortStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFrameTooShorts.setStatus('deprecated')
snSwPortLockAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortLockAddressCount.setStatus('deprecated')
snSwPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortStpPortEnable.setStatus('deprecated')
snSwPortDhcpGateListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortDhcpGateListId.setStatus('deprecated')
snSwPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortName.setStatus('deprecated')
snSwPortStatsInBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInBcastFrames.setStatus('deprecated')
snSwPortStatsOutBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutBcastFrames.setStatus('deprecated')
snSwPortStatsInMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInMcastFrames.setStatus('deprecated')
snSwPortStatsOutMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutMcastFrames.setStatus('deprecated')
snSwPortStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInDiscard.setStatus('deprecated')
snSwPortStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutDiscard.setStatus('deprecated')
snSwPortStatsMacStations = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsMacStations.setStatus('deprecated')
snSwPortCacheGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortCacheGroupId.setStatus('deprecated')
snSwPortTransGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortTransGroupId.setStatus('deprecated')
snSwPortInfoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("global", 3), ("other", 4))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoAutoNegotiate.setStatus('deprecated')
snSwPortInfoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoFlowControl.setStatus('deprecated')
snSwPortInfoGigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 255))).clone(namedValues=NamedValues(("m1000BaseSX", 0), ("m1000BaseLX", 1), ("m1000BaseLH", 2), ("m1000BaseLHA", 3), ("m1000BaseLHB", 4), ("m1000BaseTX", 5), ("m10000BaseSR", 6), ("m10000BaseLR", 7), ("m10000BaseER", 8), ("sfpCWDM1470nm80Km", 9), ("sfpCWDM1490nm80Km", 10), ("sfpCWDM1510nm80Km", 11), ("sfpCWDM1530nm80Km", 12), ("sfpCWDM1550nm80Km", 13), ("sfpCWDM1570nm80Km", 14), ("sfpCWDM1590nm80Km", 15), ("sfpCWDM1610nm80Km", 16), ("sfpCWDM1470nm100Km", 17), ("sfpCWDM1490nm100Km", 18), ("sfpCWDM1510nm100Km", 19), ("sfpCWDM1530nm100Km", 20), ("sfpCWDM1550nm100Km", 21), ("sfpCWDM1570nm100Km", 22), ("sfpCWDM1590nm100Km", 23), ("sfpCWDM1610nm100Km", 24), ("m1000BaseLHX", 25), ("m1000BaseSX2", 26), ("m1000BaseGBXU", 27), ("m1000BaseGBXD", 28), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoGigType.setStatus('deprecated')
snSwPortStatsLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsLinkChange.setStatus('deprecated')
snSwPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortIfIndex.setStatus('deprecated')
snSwPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortDescr.setStatus('deprecated')
snSwPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInOctets.setStatus('deprecated')
snSwPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortOutOctets.setStatus('deprecated')
snSwPortStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInBitsPerSec.setStatus('deprecated')
snSwPortStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutBitsPerSec.setStatus('deprecated')
snSwPortStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInPktsPerSec.setStatus('deprecated')
snSwPortStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutPktsPerSec.setStatus('deprecated')
snSwPortStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInUtilization.setStatus('deprecated')
snSwPortStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutUtilization.setStatus('deprecated')
snSwPortFastSpanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortFastSpanPortEnable.setStatus('deprecated')
snSwPortFastSpanUplinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortFastSpanUplinkEnable.setStatus('deprecated')
snSwPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortVlanId.setStatus('deprecated')
snSwPortRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortRouteOnly.setStatus('deprecated')
snSwPortPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortPresent.setStatus('deprecated')
snSwPortGBICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gbic", 1), ("miniGBIC", 2), ("empty", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortGBICStatus.setStatus('deprecated')
snSwPortStatsInKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInKiloBitsPerSec.setStatus('deprecated')
snSwPortStatsOutKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutKiloBitsPerSec.setStatus('deprecated')
snSwPortLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortLoadInterval.setStatus('deprecated')
snSwPortTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 57), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortTagType.setStatus('deprecated')
snSwPortInLinePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("enableLegacyDevice", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerControl.setStatus('deprecated')
snSwPortInLinePowerWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerWattage.setStatus('deprecated')
snSwPortInLinePowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerClass.setStatus('deprecated')
snSwPortInLinePowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("critical", 1), ("high", 2), ("low", 3), ("medium", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerPriority.setStatus('deprecated')
snSwPortInfoMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoMirrorMode.setStatus('deprecated')
snSwPortStatsInJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInJumboFrames.setStatus('deprecated')
snSwPortStatsOutJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutJumboFrames.setStatus('deprecated')
snSwPortInLinePowerConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInLinePowerConsumed.setStatus('deprecated')
snSwPortInLinePowerPDType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInLinePowerPDType.setStatus('deprecated')
snSwIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5), )
if mibBuilder.loadTexts: snSwIfInfoTable.setStatus('current')
snSwIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwIfInfoPortNum"))
if mibBuilder.loadTexts: snSwIfInfoEntry.setStatus('current')
snSwIfInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoPortNum.setStatus('current')
snSwIfInfoMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("input", 1), ("output", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoMonitorMode.setStatus('deprecated')
snSwIfInfoMirrorPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoMirrorPorts.setStatus('current')
snSwIfInfoTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("dual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoTagMode.setStatus('current')
snSwIfInfoTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 5), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoTagType.setStatus('current')
snSwIfInfoChnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoChnMode.setStatus('current')
snSwIfInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("sAutoSense", 1), ("s10M", 2), ("s100M", 3), ("s1G", 4), ("s1GM", 5), ("s155M", 6), ("s10G", 7), ("s622M", 8), ("s2488M", 9), ("s9953M", 10), ("s16G", 11), ("s100G", 12), ("s40G", 13), ("s2500M", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoSpeed.setStatus('current')
snSwIfInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("other", 1), ("m100BaseTX", 2), ("m100BaseFX", 3), ("m1000BaseFX", 4), ("mT3", 5), ("m155ATM", 6), ("m1000BaseTX", 7), ("m622ATM", 8), ("m155POS", 9), ("m622POS", 10), ("m2488POS", 11), ("m10000BaseFX", 12), ("m9953POS", 13), ("m16GStacking", 14), ("m100GBaseFX", 15), ("m40GStacking", 16), ("m40GBaseFX", 17), ("m10000BaseTX", 18), ("m2500BaseTX", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoMediaType.setStatus('current')
snSwIfInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoConnectorType.setStatus('current')
snSwIfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoAdminStatus.setStatus('current')
snSwIfInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoLinkStatus.setStatus('current')
snSwIfInfoPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoPortQos.setStatus('current')
snSwIfInfoPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 13), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoPhysAddress.setStatus('current')
snSwIfLockAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfLockAddressCount.setStatus('current')
snSwIfStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfStpPortEnable.setStatus('current')
snSwIfDhcpGateListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfDhcpGateListId.setStatus('current')
snSwIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfName.setStatus('current')
snSwIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfDescr.setStatus('current')
snSwIfInfoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("global", 3), ("other", 4))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoAutoNegotiate.setStatus('current')
snSwIfInfoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoFlowControl.setStatus('current')
snSwIfInfoGigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 255))).clone(namedValues=NamedValues(("m1000BaseSX", 0), ("m1000BaseLX", 1), ("m1000BaseLH", 2), ("m1000BaseLHA", 3), ("m1000BaseLHB", 4), ("m1000BaseTX", 5), ("m10000BaseSR", 6), ("m10000BaseLR", 7), ("m10000BaseER", 8), ("sfpCWDM1470nm80Km", 9), ("sfpCWDM1490nm80Km", 10), ("sfpCWDM1510nm80Km", 11), ("sfpCWDM1530nm80Km", 12), ("sfpCWDM1550nm80Km", 13), ("sfpCWDM1570nm80Km", 14), ("sfpCWDM1590nm80Km", 15), ("sfpCWDM1610nm80Km", 16), ("sfpCWDM1470nm100Km", 17), ("sfpCWDM1490nm100Km", 18), ("sfpCWDM1510nm100Km", 19), ("sfpCWDM1530nm100Km", 20), ("sfpCWDM1550nm100Km", 21), ("sfpCWDM1570nm100Km", 22), ("sfpCWDM1590nm100Km", 23), ("sfpCWDM1610nm100Km", 24), ("m1000BaseLHX", 25), ("m1000BaseSX2", 26), ("mSFP1000BaseBXU", 27), ("mSFP1000BaseBXD", 28), ("mSFP100BaseBX", 29), ("mSFP100BaseBXU", 30), ("mSFP100BaseBXD", 31), ("mSFP100BaseFX", 32), ("mSFP100BaseFXIR", 33), ("mSFP100BaseFXLR", 34), ("m1000BaseLMC", 35), ("mXFP10000BaseSR", 36), ("mXFP10000BaseLR", 37), ("mXFP10000BaseER", 38), ("mXFP10000BaseSW", 39), ("mXFP10000BaseLW", 40), ("mXFP10000BaseEW", 41), ("mXFP10000BaseCX4", 42), ("mXFP10000BaseZR", 43), ("mXFP10000BaseZRD", 44), ("m1000BaseC6553", 45), ("mXFP10000BaseSRSW", 46), ("mXFP10000BaseLRLW", 47), ("mXFP10000BaseEREW", 48), ("m10000BaseT", 49), ("m2500BaseTX", 50), ("m1000BaseGBXU", 127), ("m1000BaseGBXD", 128), ("m1000BaseFBX", 129), ("m1000BaseFBXU", 130), ("m1000BaseFBXD", 131), ("m1000BaseFX", 132), ("m1000BaseFXIR", 133), ("m1000BaseFXLR", 134), ("m1000BaseXGSR", 136), ("m1000BaseXGLR", 137), ("m1000BaseXGER", 138), ("m1000BaseXGSW", 139), ("m1000BaseXGLW", 140), ("m1000BaseXGEW", 141), ("m1000BaseXGCX4", 142), ("m1000BaseXGZR", 143), ("m1000BaseXGZRD", 144), ("mCFP100GBaseSR10", 145), ("mCFP100GBaseLR4", 146), ("mCFP100GBaseER4", 147), ("mCFP100GBase10x10g2Km", 148), ("mCFP100GBase10x10g10Km", 149), ("qSFP40000BaseSR4", 150), ("qSFP40000Base10KmLR4", 151), ("mXFP10000BaseUSR", 152), ("mXFP10000BaseTwinax", 153), ("mCFP2-100GBaseSR10", 154), ("mCFP2-100GBaseLR4", 155), ("mCFP2-100GBaseER4", 156), ("mCFP2-100GBase10x10g2Km", 157), ("mCFP2-100GBase10x10g10Km", 158), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoGigType.setStatus('current')
snSwIfFastSpanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfFastSpanPortEnable.setStatus('current')
snSwIfFastSpanUplinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfFastSpanUplinkEnable.setStatus('current')
snSwIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfVlanId.setStatus('current')
snSwIfRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfRouteOnly.setStatus('current')
snSwIfPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfPresent.setStatus('current')
snSwIfGBICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gbic", 1), ("miniGBIC", 2), ("empty", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfGBICStatus.setStatus('current')
snSwIfLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfLoadInterval.setStatus('current')
snSwIfStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInFrames.setStatus('current')
snSwIfStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutFrames.setStatus('current')
snSwIfStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsAlignErrors.setStatus('current')
snSwIfStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsFCSErrors.setStatus('current')
snSwIfStatsMultiColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsMultiColliFrames.setStatus('current')
snSwIfStatsTxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsTxColliFrames.setStatus('current')
snSwIfStatsRxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsRxColliFrames.setStatus('current')
snSwIfStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsFrameTooLongs.setStatus('current')
snSwIfStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsFrameTooShorts.setStatus('current')
snSwIfStatsInBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInBcastFrames.setStatus('current')
snSwIfStatsOutBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutBcastFrames.setStatus('current')
snSwIfStatsInMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInMcastFrames.setStatus('current')
snSwIfStatsOutMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutMcastFrames.setStatus('current')
snSwIfStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInDiscard.setStatus('current')
snSwIfStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutDiscard.setStatus('current')
snSwIfStatsMacStations = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsMacStations.setStatus('current')
snSwIfStatsLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsLinkChange.setStatus('current')
snSwIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInOctets.setStatus('current')
snSwIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfOutOctets.setStatus('current')
snSwIfStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInBitsPerSec.setStatus('current')
snSwIfStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutBitsPerSec.setStatus('current')
snSwIfStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInPktsPerSec.setStatus('current')
snSwIfStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutPktsPerSec.setStatus('current')
snSwIfStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInUtilization.setStatus('current')
snSwIfStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutUtilization.setStatus('current')
snSwIfStatsInKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInKiloBitsPerSec.setStatus('current')
snSwIfStatsOutKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutKiloBitsPerSec.setStatus('current')
snSwIfStatsInJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInJumboFrames.setStatus('current')
snSwIfStatsOutJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutJumboFrames.setStatus('current')
snSwIfInfoMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoMirrorMode.setStatus('current')
snSwIfMacLearningDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 59), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfMacLearningDisable.setStatus('current')
snSwIfInfoL2FowardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("globalConfig", 3))).clone('globalConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoL2FowardEnable.setStatus('current')
snSwIfInfoAllowAllVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 61), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoAllowAllVlan.setStatus('current')
snSwIfInfoNativeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 62), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoNativeMacAddress.setStatus('current')
snInterfaceId = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2))
snEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 1))
snPosInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 2))
snAtmInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 3))
snVirtualInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 4))
snLoopbackInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 5))
snGreTunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 6))
snSubInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 7))
snMplsTunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 8))
snPvcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 9))
snMgmtEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 10))
snTrunkInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 11))
snVirtualMgmtInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 12))
sn6to4TunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 13))
snInterfaceLookupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3), )
if mibBuilder.loadTexts: snInterfaceLookupTable.setStatus('current')
snInterfaceLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snInterfaceLookupInterfaceId"))
if mibBuilder.loadTexts: snInterfaceLookupEntry.setStatus('current')
snInterfaceLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1, 1), InterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookupInterfaceId.setStatus('current')
snInterfaceLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookupIfIndex.setStatus('current')
snIfIndexLookupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4), )
if mibBuilder.loadTexts: snIfIndexLookupTable.setStatus('current')
snIfIndexLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfIndexLookupIfIndex"))
if mibBuilder.loadTexts: snIfIndexLookupEntry.setStatus('current')
snIfIndexLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookupIfIndex.setStatus('current')
snIfIndexLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1, 2), InterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookupInterfaceId.setStatus('current')
snInterfaceLookup2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7), )
if mibBuilder.loadTexts: snInterfaceLookup2Table.setStatus('current')
snInterfaceLookup2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snInterfaceLookup2InterfaceId"))
if mibBuilder.loadTexts: snInterfaceLookup2Entry.setStatus('current')
snInterfaceLookup2InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1, 1), InterfaceId2())
if mibBuilder.loadTexts: snInterfaceLookup2InterfaceId.setStatus('current')
snInterfaceLookup2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookup2IfIndex.setStatus('current')
snIfIndexLookup2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8), )
if mibBuilder.loadTexts: snIfIndexLookup2Table.setStatus('current')
snIfIndexLookup2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfIndexLookup2IfIndex"))
if mibBuilder.loadTexts: snIfIndexLookup2Entry.setStatus('current')
snIfIndexLookup2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: snIfIndexLookup2IfIndex.setStatus('current')
snIfIndexLookup2InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1, 2), InterfaceId2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookup2InterfaceId.setStatus('current')
snIfOpticalMonitoringInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6), )
if mibBuilder.loadTexts: snIfOpticalMonitoringInfoTable.setStatus('current')
snIfOpticalMonitoringInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snIfOpticalMonitoringInfoEntry.setStatus('current')
snIfOpticalMonitoringTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringTemperature.setStatus('current')
snIfOpticalMonitoringTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringTxPower.setStatus('current')
snIfOpticalMonitoringRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringRxPower.setStatus('current')
snIfOpticalMonitoringTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringTxBiasCurrent.setStatus('current')
snIfMediaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9), )
if mibBuilder.loadTexts: snIfMediaInfoTable.setStatus('current')
snIfMediaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snIfMediaInfoEntry.setStatus('current')
snIfMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaType.setStatus('current')
snIfMediaVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaVendorName.setStatus('current')
snIfMediaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaVersion.setStatus('current')
snIfMediaPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaPartNumber.setStatus('current')
snIfMediaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaSerialNumber.setStatus('current')
snIfOpticalLaneMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10), )
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTable.setStatus('current')
snIfOpticalLaneMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfOpticalLaneMonitoringLane"))
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringEntry.setStatus('current')
snIfOpticalLaneMonitoringLane = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringLane.setStatus('current')
snIfOpticalLaneMonitoringTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTemperature.setStatus('current')
snIfOpticalLaneMonitoringTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTxPower.setStatus('current')
snIfOpticalLaneMonitoringRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringRxPower.setStatus('current')
snIfOpticalLaneMonitoringTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTxBiasCurrent.setStatus('current')
brcdIfEgressCounterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11), )
if mibBuilder.loadTexts: brcdIfEgressCounterInfoTable.setStatus('current')
brcdIfEgressCounterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdIfEgressCounterIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdIfEgressCounterQueueId"))
if mibBuilder.loadTexts: brcdIfEgressCounterInfoEntry.setStatus('current')
brcdIfEgressCounterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdIfEgressCounterIfIndex.setStatus('current')
brcdIfEgressCounterQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 2), Integer32())
if mibBuilder.loadTexts: brcdIfEgressCounterQueueId.setStatus('current')
brcdIfEgressCounterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("unicast", 2), ("multicast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdIfEgressCounterType.setStatus('current')
brcdIfEgressCounterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdIfEgressCounterPkts.setStatus('current')
brcdIfEgressCounterDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdIfEgressCounterDropPkts.setStatus('current')
snFdbTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1), )
if mibBuilder.loadTexts: snFdbTable.setStatus('current')
snFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdbStationIndex"))
if mibBuilder.loadTexts: snFdbEntry.setStatus('current')
snFdbStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbStationIndex.setStatus('current')
snFdbStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationAddr.setStatus('current')
snFdbStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationPort.setStatus('current')
snFdbVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbVLanId.setStatus('current')
snFdbStationQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationQos.setStatus('current')
snFdbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("host", 1), ("router", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationType.setStatus('current')
snFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbRowStatus.setStatus('current')
snFdbStationIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 8), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationIf.setStatus('current')
snPortStpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1), )
if mibBuilder.loadTexts: snPortStpTable.setStatus('deprecated')
snPortStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortStpVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortStpPortNum"))
if mibBuilder.loadTexts: snPortStpEntry.setStatus('deprecated')
snPortStpVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpVLanId.setStatus('deprecated')
snPortStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortNum.setStatus('deprecated')
snPortStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortPriority.setStatus('deprecated')
snPortStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPathCost.setStatus('deprecated')
snPortStpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpOperState.setStatus('deprecated')
snPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))))
if mibBuilder.loadTexts: snPortStpPortEnable.setStatus('deprecated')
snPortStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 7), Counter32())
if mibBuilder.loadTexts: snPortStpPortForwardTransitions.setStatus('deprecated')
snPortStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("preforwarding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortState.setStatus('deprecated')
snPortStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedCost.setStatus('deprecated')
snPortStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedRoot.setStatus('deprecated')
snPortStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedBridge.setStatus('deprecated')
snPortStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedPort.setStatus('deprecated')
snPortStpPortAdminRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortAdminRstp.setStatus('deprecated')
snPortStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortProtocolMigration.setStatus('deprecated')
snPortStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortAdminEdgePort.setStatus('deprecated')
snPortStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortAdminPointToPoint.setStatus('deprecated')
snIfStpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: snIfStpTable.setStatus('current')
snIfStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfStpVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfStpPortNum"))
if mibBuilder.loadTexts: snIfStpEntry.setStatus('current')
snIfStpVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpVLanId.setStatus('current')
snIfStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortNum.setStatus('current')
snIfStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortPriority.setStatus('current')
snIfStpCfgPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpCfgPathCost.setStatus('current')
snIfStpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpOperState.setStatus('current')
snIfStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("preforwarding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortState.setStatus('current')
snIfStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedCost.setStatus('current')
snIfStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedRoot.setStatus('current')
snIfStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedBridge.setStatus('current')
snIfStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedPort.setStatus('current')
snIfStpPortAdminRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortAdminRstp.setStatus('current')
snIfStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortProtocolMigration.setStatus('current')
snIfStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortAdminEdgePort.setStatus('current')
snIfStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortAdminPointToPoint.setStatus('current')
snIfStpOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpOperPathCost.setStatus('current')
snIfStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alternate", 1), ("root", 2), ("designated", 3), ("backupRole", 4), ("disabledRole", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortRole.setStatus('current')
snIfStpBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpBPDUTransmitted.setStatus('current')
snIfStpBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpBPDUReceived.setStatus('current')
snIfRstpConfigBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpConfigBPDUReceived.setStatus('current')
snIfRstpTCNBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpTCNBPDUReceived.setStatus('current')
snIfRstpConfigBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpConfigBPDUTransmitted.setStatus('current')
snIfRstpTCNBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpTCNBPDUTransmitted.setStatus('current')
snTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1), )
if mibBuilder.loadTexts: snTrunkTable.setStatus('current')
snTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snTrunkIndex"))
if mibBuilder.loadTexts: snTrunkEntry.setStatus('current')
snTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrunkIndex.setStatus('current')
snTrunkPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 2), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrunkPortMask.setStatus('current')
snTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrunkType.setStatus('current')
snMSTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2), )
if mibBuilder.loadTexts: snMSTrunkTable.setStatus('current')
snMSTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMSTrunkPortIndex"))
if mibBuilder.loadTexts: snMSTrunkEntry.setStatus('current')
snMSTrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMSTrunkPortIndex.setStatus('current')
snMSTrunkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkPortList.setStatus('current')
snMSTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkType.setStatus('current')
snMSTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkRowStatus.setStatus('current')
snMSTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3), )
if mibBuilder.loadTexts: snMSTrunkIfTable.setStatus('current')
snMSTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMSTrunkIfIndex"))
if mibBuilder.loadTexts: snMSTrunkIfEntry.setStatus('current')
snMSTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMSTrunkIfIndex.setStatus('current')
snMSTrunkIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkIfList.setStatus('current')
snMSTrunkIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkIfType.setStatus('current')
snMSTrunkIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkIfRowStatus.setStatus('current')
snSwSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwSummaryMode.setStatus('current')
snDhcpGatewayListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1), )
if mibBuilder.loadTexts: snDhcpGatewayListTable.setStatus('current')
snDhcpGatewayListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snDhcpGatewayListId"))
if mibBuilder.loadTexts: snDhcpGatewayListEntry.setStatus('current')
snDhcpGatewayListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDhcpGatewayListId.setStatus('current')
snDhcpGatewayListAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDhcpGatewayListAddrList.setStatus('current')
snDhcpGatewayListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDhcpGatewayListRowStatus.setStatus('current')
snDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDnsDomainName.setStatus('current')
snDnsGatewayIpAddrList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDnsGatewayIpAddrList.setStatus('current')
snMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1), )
if mibBuilder.loadTexts: snMacFilterTable.setStatus('current')
snMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterIndex"))
if mibBuilder.loadTexts: snMacFilterEntry.setStatus('current')
snMacFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterIndex.setStatus('current')
snMacFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterAction.setStatus('current')
snMacFilterSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterSourceMac.setStatus('current')
snMacFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterSourceMask.setStatus('current')
snMacFilterDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterDestMac.setStatus('current')
snMacFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterDestMask.setStatus('current')
snMacFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("equal", 0), ("notEqual", 1), ("less", 2), ("greater", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterOperator.setStatus('current')
snMacFilterFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 0), ("ethernet", 1), ("llc", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterFrameType.setStatus('current')
snMacFilterFrameTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterFrameTypeNum.setStatus('current')
snMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterRowStatus.setStatus('current')
snMacFilterPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2), )
if mibBuilder.loadTexts: snMacFilterPortAccessTable.setStatus('deprecated')
snMacFilterPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterPortAccessPortIndex"))
if mibBuilder.loadTexts: snMacFilterPortAccessEntry.setStatus('deprecated')
snMacFilterPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterPortAccessPortIndex.setStatus('deprecated')
snMacFilterPortAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterPortAccessFilters.setStatus('deprecated')
snMacFilterPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterPortAccessRowStatus.setStatus('deprecated')
snMacFilterIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3), )
if mibBuilder.loadTexts: snMacFilterIfAccessTable.setStatus('current')
snMacFilterIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterIfAccessPortIndex"))
if mibBuilder.loadTexts: snMacFilterIfAccessEntry.setStatus('current')
snMacFilterIfAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterIfAccessPortIndex.setStatus('current')
snMacFilterIfAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterIfAccessFilters.setStatus('current')
snMacFilterIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterIfAccessRowStatus.setStatus('current')
snNTPGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1))
snNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPPollInterval.setStatus('current')
snNTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("alaska", 0), ("aleutian", 1), ("arizona", 2), ("central", 3), ("eastIndiana", 4), ("eastern", 5), ("hawaii", 6), ("michigan", 7), ("mountain", 8), ("pacific", 9), ("samoa", 10), ("gmtPlus1200", 11), ("gmtPlus1100", 12), ("gmtPlus1000", 13), ("gmtPlus0900", 14), ("gmtPlus0800", 15), ("gmtPlus0700", 16), ("gmtPlus0600", 17), ("gmtPlus0500", 18), ("gmtPlus0400", 19), ("gmtPlus0300", 20), ("gmtPlus0200", 21), ("gmtPlus0100", 22), ("gmt", 23), ("gmtMinus0100", 24), ("gmtMinus0200", 25), ("gmtMinus0300", 26), ("gmtMinus0400", 27), ("gmtMinus0500", 28), ("gmtMinus0600", 29), ("gmtMinus0700", 30), ("gmtMinus0800", 31), ("gmtMinus0900", 32), ("gmtMinus1000", 33), ("gmtMinus1100", 34), ("gmtMinus1200", 35), ("gmtPlus1130", 36), ("gmtPlus1030", 37), ("gmtPlus0930", 38), ("gmtPlus0630", 39), ("gmtPlus0530", 40), ("gmtPlus0430", 41), ("gmtPlus0330", 42), ("gmtMinus0330", 43), ("gmtMinus0830", 44), ("gmtMinus0930", 45))).clone('gmt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPTimeZone.setStatus('current')
snNTPSummerTimeEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSummerTimeEnable.setStatus('current')
snNTPSystemClock = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSystemClock.setStatus('current')
snNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("synchronize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSync.setStatus('current')
snNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2), )
if mibBuilder.loadTexts: snNTPServerTable.setStatus('current')
snNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNTPServerIp"))
if mibBuilder.loadTexts: snNTPServerEntry.setStatus('current')
snNTPServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNTPServerIp.setStatus('current')
snNTPServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPServerVersion.setStatus('current')
snNTPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPServerRowStatus.setStatus('current')
snRadiusGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1))
snRadiusSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRadiusSNMPAccess.setStatus('current')
snRadiusEnableTelnetAuth = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusEnableTelnetAuth.setStatus('current')
snRadiusRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusRetransmit.setStatus('current')
snRadiusTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusTimeOut.setStatus('current')
snRadiusDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusDeadTime.setStatus('current')
snRadiusKey = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusKey.setStatus('current')
snRadiusLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusLoginMethod.setStatus('current')
snRadiusEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusEnableMethod.setStatus('current')
snRadiusWebServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusWebServerMethod.setStatus('current')
snRadiusSNMPServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusSNMPServerMethod.setStatus('current')
snRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2), )
if mibBuilder.loadTexts: snRadiusServerTable.setStatus('current')
snRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snRadiusServerIp"))
if mibBuilder.loadTexts: snRadiusServerEntry.setStatus('current')
snRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRadiusServerIp.setStatus('current')
snRadiusServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 2), Integer32().clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerAuthPort.setStatus('current')
snRadiusServerAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 3), Integer32().clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerAcctPort.setStatus('current')
snRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerRowStatus.setStatus('current')
snRadiusServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerRowKey.setStatus('current')
snRadiusServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("authenticationOnly", 2), ("authorizationOnly", 3), ("accountingOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerUsage.setStatus('current')
snTacacsGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1))
snTacacsRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsRetransmit.setStatus('current')
snTacacsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsTimeOut.setStatus('current')
snTacacsDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsDeadTime.setStatus('current')
snTacacsKey = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsKey.setStatus('current')
snTacacsSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTacacsSNMPAccess.setStatus('current')
snTacacsServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2), )
if mibBuilder.loadTexts: snTacacsServerTable.setStatus('current')
snTacacsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snTacacsServerIp"))
if mibBuilder.loadTexts: snTacacsServerEntry.setStatus('current')
snTacacsServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTacacsServerIp.setStatus('current')
snTacacsServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 2), Integer32().clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerAuthPort.setStatus('current')
snTacacsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerRowStatus.setStatus('current')
snTacacsServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerRowKey.setStatus('current')
snTacacsServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("authenticationOnly", 2), ("authorizationOnly", 3), ("accountingOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerUsage.setStatus('current')
snQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1), )
if mibBuilder.loadTexts: snQosProfileTable.setStatus('current')
snQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snQosProfileIndex"))
if mibBuilder.loadTexts: snQosProfileEntry.setStatus('current')
snQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosProfileIndex.setStatus('current')
snQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosProfileName.setStatus('current')
snQosProfileRequestedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosProfileRequestedBandwidth.setStatus('current')
snQosProfileCalculatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosProfileCalculatedBandwidth.setStatus('current')
snQosBindTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2), )
if mibBuilder.loadTexts: snQosBindTable.setStatus('current')
snQosBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snQosBindIndex"))
if mibBuilder.loadTexts: snQosBindEntry.setStatus('current')
snQosBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosBindIndex.setStatus('current')
snQosBindPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosBindPriority.setStatus('current')
snQosBindProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosBindProfileIndex.setStatus('current')
snDosAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3))
snDosAttackGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1))
snDosAttackICMPDropCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackICMPDropCount.setStatus('current')
snDosAttackICMPBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackICMPBlockCount.setStatus('current')
snDosAttackSYNDropCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackSYNDropCount.setStatus('current')
snDosAttackSYNBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackSYNBlockCount.setStatus('current')
snDosAttackPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2), )
if mibBuilder.loadTexts: snDosAttackPortTable.setStatus('current')
snDosAttackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snDosAttackPort"))
if mibBuilder.loadTexts: snDosAttackPortEntry.setStatus('current')
snDosAttackPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPort.setStatus('current')
snDosAttackPortICMPDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortICMPDropCount.setStatus('current')
snDosAttackPortICMPBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortICMPBlockCount.setStatus('current')
snDosAttackPortSYNDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortSYNDropCount.setStatus('current')
snDosAttackPortSYNBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortSYNBlockCount.setStatus('current')
snAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 1))
snAuthorization = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2))
snAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3))
snAuthorizationCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationCommandMethods.setStatus('current')
snAuthorizationCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5))).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationCommandLevel.setStatus('current')
snAuthorizationExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationExec.setStatus('current')
snAccountingCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingCommandMethods.setStatus('current')
snAccountingCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5))).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingCommandLevel.setStatus('current')
snAccountingExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingExec.setStatus('current')
snAccountingSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingSystem.setStatus('current')
snNetFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1))
snNetFlowGblEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblEnable.setStatus('current')
snNetFlowGblVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 5))).clone(namedValues=NamedValues(("versionNotSet", 0), ("version1", 1), ("version5", 5))).clone('version5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblVersion.setStatus('current')
snNetFlowGblProtocolDisable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblProtocolDisable.setStatus('current')
snNetFlowGblActiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblActiveTimeout.setStatus('current')
snNetFlowGblInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblInactiveTimeout.setStatus('current')
snNetFlowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2), )
if mibBuilder.loadTexts: snNetFlowCollectorTable.setStatus('current')
snNetFlowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowCollectorIndex"))
if mibBuilder.loadTexts: snNetFlowCollectorEntry.setStatus('current')
snNetFlowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowCollectorIndex.setStatus('current')
snNetFlowCollectorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorIp.setStatus('current')
snNetFlowCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorUdpPort.setStatus('current')
snNetFlowCollectorSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorSourceInterface.setStatus('current')
snNetFlowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorRowStatus.setStatus('current')
snNetFlowAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3), )
if mibBuilder.loadTexts: snNetFlowAggregationTable.setStatus('current')
snNetFlowAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowAggregationIndex"))
if mibBuilder.loadTexts: snNetFlowAggregationEntry.setStatus('current')
snNetFlowAggregationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("as", 1), ("protocolPort", 2), ("destPrefix", 3), ("sourcePrefix", 4), ("prefix", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowAggregationIndex.setStatus('current')
snNetFlowAggregationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationIp.setStatus('current')
snNetFlowAggregationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationUdpPort.setStatus('current')
snNetFlowAggregationSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationSourceInterface.setStatus('current')
snNetFlowAggregationNumberOfCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationNumberOfCacheEntries.setStatus('current')
snNetFlowAggregationActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationActiveTimeout.setStatus('current')
snNetFlowAggregationInactiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationInactiveTimeout.setStatus('current')
snNetFlowAggregationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationEnable.setStatus('current')
snNetFlowAggregationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationRowStatus.setStatus('current')
snNetFlowIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4), )
if mibBuilder.loadTexts: snNetFlowIfTable.setStatus('current')
snNetFlowIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowIfIndex"))
if mibBuilder.loadTexts: snNetFlowIfEntry.setStatus('current')
snNetFlowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowIfIndex.setStatus('current')
snNetFlowIfFlowSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowIfFlowSwitching.setStatus('current')
snSFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 1))
snSflowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2), )
if mibBuilder.loadTexts: snSflowCollectorTable.setStatus('current')
snSflowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSflowCollectorIndex"))
if mibBuilder.loadTexts: snSflowCollectorEntry.setStatus('current')
snSflowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSflowCollectorIndex.setStatus('current')
snSflowCollectorIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorIP.setStatus('current')
snSflowCollectorUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorUDPPort.setStatus('current')
snSflowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSuch", 0), ("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorRowStatus.setStatus('current')
snFdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1))
snFdpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1))
snFdpCache = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2))
snFdpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3))
snFdpCachedAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4))
snFdpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1), )
if mibBuilder.loadTexts: snFdpInterfaceTable.setStatus('current')
snFdpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpInterfaceIfIndex"))
if mibBuilder.loadTexts: snFdpInterfaceEntry.setStatus('current')
snFdpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snFdpInterfaceIfIndex.setStatus('current')
snFdpInterfaceFdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpInterfaceFdpEnable.setStatus('current')
snFdpInterfaceCdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpInterfaceCdpEnable.setStatus('current')
snFdpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1), )
if mibBuilder.loadTexts: snFdpCacheTable.setStatus('current')
snFdpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCacheIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCacheDeviceIndex"))
if mibBuilder.loadTexts: snFdpCacheEntry.setStatus('current')
snFdpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snFdpCacheIfIndex.setStatus('current')
snFdpCacheDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snFdpCacheDeviceIndex.setStatus('current')
snFdpCacheDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDeviceId.setStatus('current')
snFdpCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheAddressType.setStatus('current')
snFdpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheAddress.setStatus('current')
snFdpCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheVersion.setStatus('current')
snFdpCacheDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDevicePort.setStatus('current')
snFdpCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePlatform.setStatus('current')
snFdpCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheCapabilities.setStatus('current')
snFdpCacheVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fdp", 1), ("cdp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheVendorId.setStatus('current')
snFdpCacheIsAggregateVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheIsAggregateVlan.setStatus('current')
snFdpCacheTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheTagType.setStatus('current')
snFdpCachePortVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePortVlanMask.setStatus('current')
snFdpCachePortTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("dual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePortTagMode.setStatus('current')
snFdpCacheDefaultTrafficeVlanIdForDualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDefaultTrafficeVlanIdForDualMode.setStatus('current')
snFdpGlobalRun = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalRun.setStatus('current')
snFdpGlobalMessageInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalMessageInterval.setStatus('current')
snFdpGlobalHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalHoldTime.setStatus('current')
snFdpGlobalCdpRun = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalCdpRun.setStatus('current')
snFdpCachedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1), )
if mibBuilder.loadTexts: snFdpCachedAddressTable.setStatus('current')
snFdpCachedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceAddrEntryIndex"))
if mibBuilder.loadTexts: snFdpCachedAddressEntry.setStatus('current')
snFdpCachedAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snFdpCachedAddrIfIndex.setStatus('current')
snFdpCachedAddrDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snFdpCachedAddrDeviceIndex.setStatus('current')
snFdpCachedAddrDeviceAddrEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: snFdpCachedAddrDeviceAddrEntryIndex.setStatus('current')
snFdpCachedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachedAddrType.setStatus('current')
snFdpCachedAddrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachedAddrValue.setStatus('current')
snMacSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1))
snPortMacSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1))
snPortMacGlobalSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2))
snPortMacSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1), )
if mibBuilder.loadTexts: snPortMacSecurityTable.setStatus('current')
snPortMacSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityResource"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityQueryIndex"))
if mibBuilder.loadTexts: snPortMacSecurityEntry.setStatus('current')
snPortMacSecurityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIfIndex.setStatus('current')
snPortMacSecurityResource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityResource.setStatus('current')
snPortMacSecurityQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityQueryIndex.setStatus('current')
snPortMacSecurityMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityMAC.setStatus('current')
snPortMacSecurityAgeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAgeLeft.setStatus('current')
snPortMacSecurityShutdownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityShutdownStatus.setStatus('current')
snPortMacSecurityShutdownTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityShutdownTimeLeft.setStatus('current')
snPortMacSecurityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityVlanId.setStatus('current')
snPortMacSecurityModuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2), )
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTable.setStatus('current')
snPortMacSecurityModuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityModuleStatSlotNum"))
if mibBuilder.loadTexts: snPortMacSecurityModuleStatEntry.setStatus('current')
snPortMacSecurityModuleStatSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatSlotNum.setStatus('current')
snPortMacSecurityModuleStatTotalSecurityPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalSecurityPorts.setStatus('current')
snPortMacSecurityModuleStatTotalMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalMACs.setStatus('current')
snPortMacSecurityModuleStatViolationCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatViolationCounts.setStatus('current')
snPortMacSecurityModuleStatTotalShutdownPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalShutdownPorts.setStatus('current')
snPortMacSecurityIntfContentTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3), )
if mibBuilder.loadTexts: snPortMacSecurityIntfContentTable.setStatus('current')
snPortMacSecurityIntfContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfContentIfIndex"))
if mibBuilder.loadTexts: snPortMacSecurityIntfContentEntry.setStatus('current')
snPortMacSecurityIntfContentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snPortMacSecurityIntfContentIfIndex.setStatus('current')
snPortMacSecurityIntfContentSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentSecurity.setStatus('current')
snPortMacSecurityIntfContentViolationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("shutdown", 0), ("restrict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentViolationType.setStatus('current')
snPortMacSecurityIntfContentShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentShutdownTime.setStatus('current')
snPortMacSecurityIntfContentShutdownTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentShutdownTimeLeft.setStatus('current')
snPortMacSecurityIntfContentAgeOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentAgeOutTime.setStatus('current')
snPortMacSecurityIntfContentMaxLockedMacAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentMaxLockedMacAllowed.setStatus('current')
snPortMacSecurityIntfContentTotalMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentTotalMACs.setStatus('current')
snPortMacSecurityIntfContentViolationCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentViolationCounts.setStatus('current')
snPortMacSecurityIntfMacTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4), )
if mibBuilder.loadTexts: snPortMacSecurityIntfMacTable.setStatus('current')
snPortMacSecurityIntfMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfMacIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfMacAddress"))
if mibBuilder.loadTexts: snPortMacSecurityIntfMacEntry.setStatus('current')
snPortMacSecurityIntfMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacIfIndex.setStatus('current')
snPortMacSecurityIntfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacAddress.setStatus('current')
snPortMacSecurityIntfMacVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacVlanId.setStatus('current')
snPortMacSecurityIntfMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacRowStatus.setStatus('current')
snPortMacSecurityAutosaveMacTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5), )
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacTable.setStatus('current')
snPortMacSecurityAutosaveMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacResource"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacQueryIndex"))
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacEntry.setStatus('current')
snPortMacSecurityAutosaveMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacIfIndex.setStatus('current')
snPortMacSecurityAutosaveMacResource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacResource.setStatus('current')
snPortMacSecurityAutosaveMacQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacQueryIndex.setStatus('current')
snPortMacSecurityAutosaveMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacAddress.setStatus('current')
snPortMacGlobalSecurityFeature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacGlobalSecurityFeature.setStatus('current')
snPortMacGlobalSecurityAgeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacGlobalSecurityAgeOutTime.setStatus('current')
snPortMacGlobalSecurityAutosave = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacGlobalSecurityAutosave.setStatus('current')
snPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1), )
if mibBuilder.loadTexts: snPortMonitorTable.setStatus('current')
snPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMonitorIfIndex"))
if mibBuilder.loadTexts: snPortMonitorEntry.setStatus('current')
snPortMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snPortMonitorIfIndex.setStatus('current')
snPortMonitorMirrorList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMonitorMirrorList.setStatus('current')
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snPortMacSecurityEntry=snPortMacSecurityEntry, snMSTrunkIfList=snMSTrunkIfList, snSwIfInfoMediaType=snSwIfInfoMediaType, snSwGlobalStpMode=snSwGlobalStpMode, Timeout=Timeout, snPortMonitorTable=snPortMonitorTable, snSwSummaryMode=snSwSummaryMode, snSwIfInOctets=snSwIfInOctets, snVLanByPortCfgStpRootPort=snVLanByPortCfgStpRootPort, snRadiusGeneral=snRadiusGeneral, snMacFilterPortAccessEntry=snMacFilterPortAccessEntry, snRadius=snRadius, snPortStpEntry=snPortStpEntry, snVLanByPortStpProtocolSpecification=snVLanByPortStpProtocolSpecification, snVLanByPortPortMask=snVLanByPortPortMask, snVLanByPortMemberEntry=snVLanByPortMemberEntry, snVLanByPortCfgTransparentHwFlooding=snVLanByPortCfgTransparentHwFlooding, snVLanByIpSubnetEntry=snVLanByIpSubnetEntry, snDhcpGatewayListId=snDhcpGatewayListId, snVLanByPortStpGroupMaxAge=snVLanByPortStpGroupMaxAge, brcdVlanExtStatsInOctets=brcdVlanExtStatsInOctets, snVLanByProtocolExcludePortList=snVLanByProtocolExcludePortList, snRadiusServerIp=snRadiusServerIp, snMacFilterIndex=snMacFilterIndex, FdryVlanIdOrNoneTC=FdryVlanIdOrNoneTC, snVLanByIpxNetRouterIntf=snVLanByIpxNetRouterIntf, snVLanByIpxNetExcludeMask=snVLanByIpxNetExcludeMask, snTacacsDeadTime=snTacacsDeadTime, snMSTrunkTable=snMSTrunkTable, brcdVlanExtStatsInSwitchedOctets=brcdVlanExtStatsInSwitchedOctets, snRadiusServerRowKey=snRadiusServerRowKey, snVLanByIpxNetVLanName=snVLanByIpxNetVLanName, snPortMacSecurityIntfContentTotalMACs=snPortMacSecurityIntfContentTotalMACs, snSwPortInfoPortQos=snSwPortInfoPortQos, snRadiusServerUsage=snRadiusServerUsage, snVLanByIpSubnetIpAddress=snVLanByIpSubnetIpAddress, snSwPortStatsInBcastFrames=snSwPortStatsInBcastFrames, snTacacsGeneral=snTacacsGeneral, snMSTrunkIfEntry=snMSTrunkIfEntry, snPortStpPortDesignatedRoot=snPortStpPortDesignatedRoot, snSwIfGBICStatus=snSwIfGBICStatus, snSflowCollectorIndex=snSflowCollectorIndex, snFdbStationIndex=snFdbStationIndex, brcdIfEgressCounterInfoEntry=brcdIfEgressCounterInfoEntry, snIfRstpTCNBPDUTransmitted=snIfRstpTCNBPDUTransmitted, snNetFlowGblActiveTimeout=snNetFlowGblActiveTimeout, snSflowCollectorUDPPort=snSflowCollectorUDPPort, snSwPortStatsMultiColliFrames=snSwPortStatsMultiColliFrames, snVLanByPortCfgStpGroupHelloTime=snVLanByPortCfgStpGroupHelloTime, snVLanByPortStpHoldTime=snVLanByPortStpHoldTime, fdryDaiMIB=fdryDaiMIB, snSwIfStatsTxColliFrames=snSwIfStatsTxColliFrames, snAuthentication=snAuthentication, snNetFlowIfTable=snNetFlowIfTable, snNetFlowAggregationEnable=snNetFlowAggregationEnable, sn6to4TunnelInterface=sn6to4TunnelInterface, snPortMacSecurityAgeLeft=snPortMacSecurityAgeLeft, brcdVlanExtStatsInPkts=brcdVlanExtStatsInPkts, snSwPortInfoPhysAddress=snSwPortInfoPhysAddress, snQosProfileEntry=snQosProfileEntry, snMacFilterIfAccessEntry=snMacFilterIfAccessEntry, snSwPortVlanId=snSwPortVlanId, snSwPortStatsOutUtilization=snSwPortStatsOutUtilization, PhysAddress=PhysAddress, snRadiusServerAuthPort=snRadiusServerAuthPort, snVLanCAR=snVLanCAR, snSwPortStatsOutJumboFrames=snSwPortStatsOutJumboFrames, snSwIfStatsOutFrames=snSwIfStatsOutFrames, snSwIfInfoAllowAllVlan=snSwIfInfoAllowAllVlan, snSwPortStatsFCSErrors=snSwPortStatsFCSErrors, snDhcpGatewayListRowStatus=snDhcpGatewayListRowStatus, snSwPortStatsFrameTooShorts=snSwPortStatsFrameTooShorts, snSwIfInfoPortQos=snSwIfInfoPortQos, snNTPSummerTimeEnable=snNTPSummerTimeEnable, snNTPSync=snNTPSync, snSSH=snSSH, snSwPortStatsOutBitsPerSec=snSwPortStatsOutBitsPerSec, snVLanByPortStpMaxAge=snVLanByPortStpMaxAge, snSwPortName=snSwPortName, snVLanByIpxNetChassisDynamicMask=snVLanByIpxNetChassisDynamicMask, snVirtualMgmtInterface=snVirtualMgmtInterface, snSwIfStatsOutKiloBitsPerSec=snSwIfStatsOutKiloBitsPerSec, snSwViolatorIfIndex=snSwViolatorIfIndex, snVLanByPortCfgStpGroupMaxAge=snVLanByPortCfgStpGroupMaxAge, snSwIfStatsOutUtilization=snSwIfStatsOutUtilization, snVLanByProtocolRouterIntf=snVLanByProtocolRouterIntf, snSwIfStatsInPktsPerSec=snSwIfStatsInPktsPerSec, snVLanByPortCfgRouterIntf=snVLanByPortCfgRouterIntf, snTrunkInfo=snTrunkInfo, snPortStpPortAdminRstp=snPortStpPortAdminRstp, brcdIfEgressCounterPkts=brcdIfEgressCounterPkts, snMacFilterPortAccessFilters=snMacFilterPortAccessFilters, snVLanByATCableIndex=snVLanByATCableIndex, snQosBindEntry=snQosBindEntry, snVLanByPortCfgStpTopChanges=snVLanByPortCfgStpTopChanges, snNetFlowGlb=snNetFlowGlb, snMacAuth=snMacAuth, snPortMacSecurityShutdownStatus=snPortMacSecurityShutdownStatus, snNetFlowIfIndex=snNetFlowIfIndex, snSwIfStatsOutPktsPerSec=snSwIfStatsOutPktsPerSec, snVLanByIpSubnetRouterIntf=snVLanByIpSubnetRouterIntf, snSwPortInfoAdminStatus=snSwPortInfoAdminStatus, snMacFilterEntry=snMacFilterEntry, snSwIfInfoTable=snSwIfInfoTable, snSwEnableBridgeNewRootTrap=snSwEnableBridgeNewRootTrap, snNetFlowCollectorIndex=snNetFlowCollectorIndex, snVLanByPortStpForwardDelay=snVLanByPortStpForwardDelay, snFdbVLanId=snFdbVLanId, snVLanGroupVlanCurEntry=snVLanGroupVlanCurEntry, snPortMacSecurityShutdownTimeLeft=snPortMacSecurityShutdownTimeLeft, snQosBindIndex=snQosBindIndex, snIfMediaSerialNumber=snIfMediaSerialNumber, snVLanByIpxNetVLanId=snVLanByIpxNetVLanId, snFDP=snFDP, snVLanByPortMemberPortId=snVLanByPortMemberPortId, snIfStpBPDUTransmitted=snIfStpBPDUTransmitted, snPortMacSecurityModuleStatSlotNum=snPortMacSecurityModuleStatSlotNum, snSwPortStatsInPktsPerSec=snSwPortStatsInPktsPerSec, snMetroRing=snMetroRing, brcdVlanExtStatsOutRoutedPkts=brcdVlanExtStatsOutRoutedPkts, snAuthorizationExec=snAuthorizationExec, snNetFlowAggregationEntry=snNetFlowAggregationEntry, snFdpInterfaceFdpEnable=snFdpInterfaceFdpEnable, snTacacsServerIp=snTacacsServerIp, snSwPortInfoPortNum=snSwPortInfoPortNum, snTacacsServerRowStatus=snTacacsServerRowStatus, snPortMacSecurityModuleStatTable=snPortMacSecurityModuleStatTable, snTrunkEntry=snTrunkEntry, snFdpInterfaceTable=snFdpInterfaceTable, snSwIfStatsInMcastFrames=snSwIfStatsInMcastFrames, snIfRstpConfigBPDUReceived=snIfRstpConfigBPDUReceived, snMSTrunkIfIndex=snMSTrunkIfIndex, snSwIfInfoMirrorMode=snSwIfInfoMirrorMode, snFdpInterfaceEntry=snFdpInterfaceEntry, snPortStpPortDesignatedCost=snPortStpPortDesignatedCost, snIfOpticalLaneMonitoringTxBiasCurrent=snIfOpticalLaneMonitoringTxBiasCurrent, snFdbInfo=snFdbInfo, snVLanByATCableVLanId=snVLanByATCableVLanId, snIfStpPortAdminPointToPoint=snIfStpPortAdminPointToPoint, snSwPortStatsInDiscard=snSwPortStatsInDiscard, snPortMacSecurity=snPortMacSecurity, snNetFlowAggregationRowStatus=snNetFlowAggregationRowStatus, snPortMacSecurityAutosaveMacResource=snPortMacSecurityAutosaveMacResource, snVLanByPortVLanIndex=snVLanByPortVLanIndex, snDosAttackPortSYNBlockCount=snDosAttackPortSYNBlockCount, snFdpCachedAddrIfIndex=snFdpCachedAddrIfIndex, snFdbEntry=snFdbEntry, brcdVlanExtStatsInSwitchedPkts=brcdVlanExtStatsInSwitchedPkts, snRadiusServerEntry=snRadiusServerEntry, snFdpCacheDeviceIndex=snFdpCacheDeviceIndex, snSwIpMcastQuerierMode=snSwIpMcastQuerierMode, snMacFilterOperator=snMacFilterOperator, snPortMacGlobalSecurityAgeOutTime=snPortMacGlobalSecurityAgeOutTime, snSwIfStatsInKiloBitsPerSec=snSwIfStatsInKiloBitsPerSec, snPortMacSecurityModuleStatEntry=snPortMacSecurityModuleStatEntry, snSwIfStatsOutBitsPerSec=snSwIfStatsOutBitsPerSec, snVLanByPortMemberVLanId=snVLanByPortMemberVLanId, snPortMacSecurityIntfMacVlanId=snPortMacSecurityIntfMacVlanId, snSwPortGBICStatus=snSwPortGBICStatus, snTrunkTable=snTrunkTable, snFdpInterfaceIfIndex=snFdpInterfaceIfIndex, snFdpCacheAddressType=snFdpCacheAddressType, snMacFilterPortAccessTable=snMacFilterPortAccessTable, snPortMacSecurityIntfContentSecurity=snPortMacSecurityIntfContentSecurity, snSwPortInfoTable=snSwPortInfoTable, snSwMaxMacFilterPerPort=snSwMaxMacFilterPerPort, snVLanByPortOperState=snVLanByPortOperState, snIfIndexLookup2Table=snIfIndexLookup2Table, snPortStpPortDesignatedBridge=snPortStpPortDesignatedBridge, snNetFlowAggregationNumberOfCacheEntries=snNetFlowAggregationNumberOfCacheEntries, snMacSecurity=snMacSecurity, snRadiusServerTable=snRadiusServerTable, snPortMacSecurityIntfContentEntry=snPortMacSecurityIntfContentEntry, snVLanByPortVLanName=snVLanByPortVLanName, snVLanByProtocolVLanId=snVLanByProtocolVLanId, snSwQosMechanism=snSwQosMechanism, snNetFlowAggregationTable=snNetFlowAggregationTable, snSwPortStatsInFrames=snSwPortStatsInFrames, snFdbStationType=snFdbStationType, snMgmtEthernetInterface=snMgmtEthernetInterface, snSwGroupIpMcastMode=snSwGroupIpMcastMode, snTacacsRetransmit=snTacacsRetransmit, snVLanByProtocolRowStatus=snVLanByProtocolRowStatus, snSwIfStatsOutBcastFrames=snSwIfStatsOutBcastFrames, snPortStpPortNum=snPortStpPortNum, snVLanByProtocolDynamicPortList=snVLanByProtocolDynamicPortList, snSwPortOutOctets=snSwPortOutOctets, snMacFilterTable=snMacFilterTable, snSwPortInLinePowerPriority=snSwPortInLinePowerPriority, snIfIndexLookup2Entry=snIfIndexLookup2Entry, snNTPGeneral=snNTPGeneral, snPortMacSecurityAutosaveMacIfIndex=snPortMacSecurityAutosaveMacIfIndex, snSwIfInfoLinkStatus=snSwIfInfoLinkStatus, snSwIfPresent=snSwIfPresent, snVLanByIpxNetMaxNetworks=snVLanByIpxNetMaxNetworks, snIfStpBPDUReceived=snIfStpBPDUReceived, snFdpGlobalCdpRun=snFdpGlobalCdpRun, snDosAttackPortEntry=snDosAttackPortEntry, snFdbTableStationFlush=snFdbTableStationFlush, snVLanByIpxNetDynamicPortList=snVLanByIpxNetDynamicPortList, snArpInfo=snArpInfo, brcdVlanExtStatsOutSwitchedOctets=brcdVlanExtStatsOutSwitchedOctets, snFdpCachePortVlanMask=snFdpCachePortVlanMask, snFdbStationAddr=snFdbStationAddr, snFdpCachedAddressEntry=snFdpCachedAddressEntry, snMacFilterIfAccessPortIndex=snMacFilterIfAccessPortIndex, snPortMacSecurityResource=snPortMacSecurityResource, snSwPortInfoMediaType=snSwPortInfoMediaType, snNetFlowAggregationSourceInterface=snNetFlowAggregationSourceInterface, snMacFilterSourceMask=snMacFilterSourceMask, snSwIfInfoChnMode=snSwIfInfoChnMode, snVLanByIpSubnetSubnetMask=snVLanByIpSubnetSubnetMask, snRadiusLoginMethod=snRadiusLoginMethod, snVLanByATCableTable=snVLanByATCableTable, snAuthorizationCommandLevel=snAuthorizationCommandLevel, BrcdVlanIdTC=BrcdVlanIdTC, snVLanByProtocolTable=snVLanByProtocolTable, snPortMacSecurityIntfContentTable=snPortMacSecurityIntfContentTable, snVLanByATCableStaticPortList=snVLanByATCableStaticPortList, snMacFilterAction=snMacFilterAction, snVLanByPortMemberTable=snVLanByPortMemberTable, snFdpGlobalRun=snFdpGlobalRun, snMSTrunkType=snMSTrunkType, snInterfaceLookupTable=snInterfaceLookupTable, snFdpGlobalHoldTime=snFdpGlobalHoldTime, snVLanByProtocolStaticMask=snVLanByProtocolStaticMask, snIfOpticalMonitoringTemperature=snIfOpticalMonitoringTemperature, snTacacsServerRowKey=snTacacsServerRowKey, snSwPortInLinePowerPDType=snSwPortInLinePowerPDType, snPortMacSecurityAutosaveMacTable=snPortMacSecurityAutosaveMacTable, snMSTrunkEntry=snMSTrunkEntry, snSwIpxL3SwMode=snSwIpxL3SwMode, snVLanByIpSubnetStaticMask=snVLanByIpSubnetStaticMask, snIfMediaInfoTable=snIfMediaInfoTable, snFdbStationQos=snFdbStationQos, snQosProfileCalculatedBandwidth=snQosProfileCalculatedBandwidth, snSflowCollectorTable=snSflowCollectorTable, snMacStationVLanId=snMacStationVLanId, snSflowCollectorEntry=snSflowCollectorEntry, snPortStpTable=snPortStpTable, snQosProfileRequestedBandwidth=snQosProfileRequestedBandwidth, snVLanByProtocolExcludeMask=snVLanByProtocolExcludeMask, PYSNMP_MODULE_ID=snSwitch, snSwPortStatsInJumboFrames=snSwPortStatsInJumboFrames, snRadiusWebServerMethod=snRadiusWebServerMethod, snFdpCachePlatform=snFdpCachePlatform, snMacFilterPortAccessPortIndex=snMacFilterPortAccessPortIndex, PortPriorityTC=PortPriorityTC, snVLanByPortEntrySize=snVLanByPortEntrySize, snQosBindPriority=snQosBindPriority, snFdpCacheDefaultTrafficeVlanIdForDualMode=snFdpCacheDefaultTrafficeVlanIdForDualMode, snMacFilterDestMac=snMacFilterDestMac, snVLanByPortCfgStpHoldTime=snVLanByPortCfgStpHoldTime, snVLanByPortBaseType=snVLanByPortBaseType)
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snInterfaceId=snInterfaceId, snNetFlow=snNetFlow, snIfStpPortDesignatedPort=snIfStpPortDesignatedPort, snNetFlowCollectorUdpPort=snNetFlowCollectorUdpPort, snSwGroupSwitchAgeTime=snSwGroupSwitchAgeTime, snSwPortInfoFlowControl=snSwPortInfoFlowControl, snPortMacSecurityQueryIndex=snPortMacSecurityQueryIndex, snVLanByPortStpGroupHelloTime=snVLanByPortStpGroupHelloTime, snVLanByPortCfgStpMode=snVLanByPortCfgStpMode, snSwIfStatsFCSErrors=snSwIfStatsFCSErrors, snSwPortStatsLinkChange=snSwPortStatsLinkChange, snFdpCacheVendorId=snFdpCacheVendorId, snInterfaceLookupEntry=snInterfaceLookupEntry, snSw8021qTagMode=snSw8021qTagMode, snSwIfInfoGigType=snSwIfInfoGigType, snPortMacSecurityModuleStatTotalShutdownPorts=snPortMacSecurityModuleStatTotalShutdownPorts, snSwIfInfoTagType=snSwIfInfoTagType, snIfStpPortProtocolMigration=snIfStpPortProtocolMigration, snFdpCacheVersion=snFdpCacheVersion, snVLanByPortCfgTable=snVLanByPortCfgTable, brcdVlanExtStatsOutOctets=brcdVlanExtStatsOutOctets, snRadiusRetransmit=snRadiusRetransmit, snIfStpOperState=snIfStpOperState, snIfIndexLookup2IfIndex=snIfIndexLookup2IfIndex, snPortStpOperState=snPortStpOperState, snIfStpPortAdminEdgePort=snIfStpPortAdminEdgePort, snDnsGatewayIpAddrList=snDnsGatewayIpAddrList, snVLanByPortBaseBridgeAddress=snVLanByPortBaseBridgeAddress, snVLanByProtocolDynamicMask=snVLanByProtocolDynamicMask, snDosAttackPortICMPBlockCount=snDosAttackPortICMPBlockCount, snSwIfInfoTagMode=snSwIfInfoTagMode, snVLanByIpxNetRowStatus=snVLanByIpxNetRowStatus, snVLanByIpxNetEntry=snVLanByIpxNetEntry, snIfOpticalLaneMonitoringTable=snIfOpticalLaneMonitoringTable, snSwIfStatsFrameTooShorts=snSwIfStatsFrameTooShorts, snSwPortLoadInterval=snSwPortLoadInterval, snSwPortInfoEntry=snSwPortInfoEntry, snPortStpPortAdminPointToPoint=snPortStpPortAdminPointToPoint, snIfRstpConfigBPDUTransmitted=snIfRstpConfigBPDUTransmitted, snVLanByPortMemberRowStatus=snVLanByPortMemberRowStatus, snNetFlowGblInactiveTimeout=snNetFlowGblInactiveTimeout, snVLanByProtocolIndex=snVLanByProtocolIndex, snNetFlowGblEnable=snNetFlowGblEnable, snNetFlowAggregationUdpPort=snNetFlowAggregationUdpPort, snSwIfStatsMacStations=snSwIfStatsMacStations, snTrunkPortMask=snTrunkPortMask, snVLanByIpSubnetChassisExcludeMask=snVLanByIpSubnetChassisExcludeMask, snPortMonitorIfIndex=snPortMonitorIfIndex, snMac=snMac, snVLanByPortBaseNumPorts=snVLanByPortBaseNumPorts, snSwPortIfIndex=snSwPortIfIndex, snQosProfileTable=snQosProfileTable, brcdVlanExtStatsPriorityId=brcdVlanExtStatsPriorityId, snAccountingCommandLevel=snAccountingCommandLevel, brcdIfEgressCounterInfoTable=brcdIfEgressCounterInfoTable, snDosAttackSYNBlockCount=snDosAttackSYNBlockCount, brcdVlanExtStatsTable=brcdVlanExtStatsTable, snPortMacGlobalSecurityFeature=snPortMacGlobalSecurityFeature, InterfaceId=InterfaceId, snSwIfInfoAdminStatus=snSwIfInfoAdminStatus, snVLanByPortCfgStpMaxAge=snVLanByPortCfgStpMaxAge, snIfIndexLookupTable=snIfIndexLookupTable, snSwPortSetAll=snSwPortSetAll, snFdpCachedAddressTable=snFdpCachedAddressTable, snVLanByIpSubnetMaxSubnets=snVLanByIpSubnetMaxSubnets, snSwPortStatsInBitsPerSec=snSwPortStatsInBitsPerSec, snSwIfStatsOutDiscard=snSwIfStatsOutDiscard, brcdVlanExtStatsOutRoutedOctets=brcdVlanExtStatsOutRoutedOctets, snFdbTable=snFdbTable, snSwIfStatsMultiColliFrames=snSwIfStatsMultiColliFrames, brcdSPXMIB=brcdSPXMIB, snSwPortStatsInUtilization=snSwPortStatsInUtilization, snIfOpticalMonitoringTxPower=snIfOpticalMonitoringTxPower, snIfStpPortDesignatedRoot=snIfStpPortDesignatedRoot, snVLanByPortCfgStpGroupForwardDelay=snVLanByPortCfgStpGroupForwardDelay, snSwPortTagType=snSwPortTagType, snFdpInterfaceCdpEnable=snFdpInterfaceCdpEnable, snFdpCacheDevicePort=snFdpCacheDevicePort, snPortMacSecurityIntfContentShutdownTimeLeft=snPortMacSecurityIntfContentShutdownTimeLeft, snIfOpticalMonitoringInfoTable=snIfOpticalMonitoringInfoTable, snRadiusDeadTime=snRadiusDeadTime, snSwIfStatsOutJumboFrames=snSwIfStatsOutJumboFrames, snVLanByPortCfgInOctets=snVLanByPortCfgInOctets, snNTPServerRowStatus=snNTPServerRowStatus, snFdpCacheTagType=snFdpCacheTagType, snVLanInfo=snVLanInfo, snMSTrunkIfType=snMSTrunkIfType, snVLanByATCableChassisStaticMask=snVLanByATCableChassisStaticMask, snPvcInterface=snPvcInterface, fdryDns2MIB=fdryDns2MIB, snVLanByIpSubnetExcludeMask=snVLanByIpSubnetExcludeMask, snIfStpTable=snIfStpTable, snMplsTunnelInterface=snMplsTunnelInterface, snInterfaceLookupInterfaceId=snInterfaceLookupInterfaceId, snSwIfStatsRxColliFrames=snSwIfStatsRxColliFrames, snNetFlowCollectorRowStatus=snNetFlowCollectorRowStatus, snNetFlowIfEntry=snNetFlowIfEntry, snPortMacSecurityIntfMacAddress=snPortMacSecurityIntfMacAddress, snSwPortInLinePowerConsumed=snSwPortInLinePowerConsumed, brcdVlanExtStatsEntry=brcdVlanExtStatsEntry, snAuthorizationCommandMethods=snAuthorizationCommandMethods, snPortMacSecurityVlanId=snPortMacSecurityVlanId, snIfIndexLookupInterfaceId=snIfIndexLookupInterfaceId, snIfStpPortAdminRstp=snIfStpPortAdminRstp, snSflowCollectorRowStatus=snSflowCollectorRowStatus, snVLanByIpSubnetDynamicMask=snVLanByIpSubnetDynamicMask, snPortMacGlobalSecurity=snPortMacGlobalSecurity, snPortMacSecurityAutosaveMacEntry=snPortMacSecurityAutosaveMacEntry, snSwIfStatsInFrames=snSwIfStatsInFrames, snRadiusEnableMethod=snRadiusEnableMethod, snSwPortDhcpGateListId=snSwPortDhcpGateListId, snMacFilterDestMask=snMacFilterDestMask, snVLanByPortStpTimeSinceTopologyChange=snVLanByPortStpTimeSinceTopologyChange, snVLanByPortCfgStpRootCost=snVLanByPortCfgStpRootCost, snSwPortInfoTagMode=snSwPortInfoTagMode, snVLanByPortRowStatus=snVLanByPortRowStatus, snIfOpticalMonitoringTxBiasCurrent=snIfOpticalMonitoringTxBiasCurrent, snEthernetInterface=snEthernetInterface, snNetFlowCollectorSourceInterface=snNetFlowCollectorSourceInterface, snVLanByIpSubnetRowStatus=snVLanByIpSubnetRowStatus, snVLanByIpSubnetStaticPortList=snVLanByIpSubnetStaticPortList, snPortMacSecurityIntfContentAgeOutTime=snPortMacSecurityIntfContentAgeOutTime, snTacacsServerTable=snTacacsServerTable, snVLanByIpSubnetExcludePortList=snVLanByIpSubnetExcludePortList, snVLanByIpSubnetVLanId=snVLanByIpSubnetVLanId, snMacFilterFrameType=snMacFilterFrameType, snMacFilterRowStatus=snMacFilterRowStatus, snVLanByPortStpPriority=snVLanByPortStpPriority, snVLanByIpSubnetChassisStaticMask=snVLanByIpSubnetChassisStaticMask, snAtmInterface=snAtmInterface, snVLanByPortMemberTagMode=snVLanByPortMemberTagMode, snDhcpGatewayListEntry=snDhcpGatewayListEntry, BrcdVlanIdOrNoneTC=BrcdVlanIdOrNoneTC, snIfIndexLookup2InterfaceId=snIfIndexLookup2InterfaceId, snVLanByProtocolVLanName=snVLanByProtocolVLanName, snMacFilterIfAccessFilters=snMacFilterIfAccessFilters, snMacFilterIfAccessTable=snMacFilterIfAccessTable, snSwIfRouteOnly=snSwIfRouteOnly, snSwPortInfoConnectorType=snSwPortInfoConnectorType, snSwDefaultVLanId=snSwDefaultVLanId, snIfMediaVendorName=snIfMediaVendorName, snSwitch=snSwitch, snDhcpGatewayListAddrList=snDhcpGatewayListAddrList, snSwIfInfoEntry=snSwIfInfoEntry, snPortMacSecurityAutosaveMacQueryIndex=snPortMacSecurityAutosaveMacQueryIndex, snSwIfMacLearningDisable=snSwIfMacLearningDisable, snFdpCacheIfIndex=snFdpCacheIfIndex, snSwPortLockAddressCount=snSwPortLockAddressCount, snGreTunnelInterface=snGreTunnelInterface, snPortMacSecurityIntfContentViolationType=snPortMacSecurityIntfContentViolationType, snDosAttack=snDosAttack, snSwPortInfoLinkStatus=snSwPortInfoLinkStatus, snMacFilterFrameTypeNum=snMacFilterFrameTypeNum, snVLanByIpxNetDynamicMask=snVLanByIpxNetDynamicMask, snSwIfInfoMirrorPorts=snSwIfInfoMirrorPorts, snSwEosBufferSize=snSwEosBufferSize, snVLanByProtocolDynamic=snVLanByProtocolDynamic, snNTP=snNTP, snVLanByPortCfgStpVersion=snVLanByPortCfgStpVersion, InterfaceId2=InterfaceId2, snPortMacSecurityModuleStatViolationCounts=snPortMacSecurityModuleStatViolationCounts, snFdpCacheDeviceId=snFdpCacheDeviceId, snRadiusSNMPAccess=snRadiusSNMPAccess, brcdVlanExtStatsIfIndex=brcdVlanExtStatsIfIndex, snSwPortInfoMonitorMode=snSwPortInfoMonitorMode, snSwPortStatsRxColliFrames=snSwPortStatsRxColliFrames, snPortStpPortProtocolMigration=snPortStpPortProtocolMigration, snAccounting=snAccounting, snVLanByPortQos=snVLanByPortQos, snVLanByProtocolEntry=snVLanByProtocolEntry, snVLanByIpxNetFrameType=snVLanByIpxNetFrameType, snRadiusEnableTelnetAuth=snRadiusEnableTelnetAuth, snPortStpInfo=snPortStpInfo, snSwClearCounters=snSwClearCounters, snIfOpticalLaneMonitoringRxPower=snIfOpticalLaneMonitoringRxPower, snSwSingleStpVLanId=snSwSingleStpVLanId, snDosAttackPortTable=snDosAttackPortTable, snQosBindTable=snQosBindTable, snIfMediaPartNumber=snIfMediaPartNumber, snNetFlowAggregationIp=snNetFlowAggregationIp, snPortMonitor=snPortMonitor, snVLanByPortCfgBaseType=snVLanByPortCfgBaseType, brcdVlanExtStatsInRoutedPkts=brcdVlanExtStatsInRoutedPkts, snVLanByIpxNetStaticMask=snVLanByIpxNetStaticMask, snVLanByPortCfgStpDesignatedRoot=snVLanByPortCfgStpDesignatedRoot, snSwIfInfoNativeMacAddress=snSwIfInfoNativeMacAddress, snNTPServerEntry=snNTPServerEntry, snSwPortStatsOutPktsPerSec=snSwPortStatsOutPktsPerSec, snSwPortInOctets=snSwPortInOctets, snInterfaceLookup2InterfaceId=snInterfaceLookup2InterfaceId, snVLanByIpxNetDynamic=snVLanByIpxNetDynamic, snSflowCollectorIP=snSflowCollectorIP, snRadiusServerAcctPort=snRadiusServerAcctPort, snVLanByPortCfgRowStatus=snVLanByPortCfgRowStatus, snPortMacSecurityModuleStatTotalSecurityPorts=snPortMacSecurityModuleStatTotalSecurityPorts, snVirtualInterface=snVirtualInterface, snFdpMIBObjects=snFdpMIBObjects, snSwIfInfoConnectorType=snSwIfInfoConnectorType, snVLanByPortRouterIntf=snVLanByPortRouterIntf, snSwIfDhcpGateListId=snSwIfDhcpGateListId, snFdbStationEntrySize=snFdbStationEntrySize, brcdIfEgressCounterQueueId=brcdIfEgressCounterQueueId, snNetFlowCollectorEntry=snNetFlowCollectorEntry, snSwPortStatsOutDiscard=snSwPortStatsOutDiscard, snVLanByPortCfgQos=snVLanByPortCfgQos, snSwIfLockAddressCount=snSwIfLockAddressCount, snIfOpticalLaneMonitoringLane=snIfOpticalLaneMonitoringLane, snNetFlowIfFlowSwitching=snNetFlowIfFlowSwitching, snRadiusKey=snRadiusKey, snTacacsServerUsage=snTacacsServerUsage, snSwGroupOperMode=snSwGroupOperMode, snSwPortEntrySize=snSwPortEntrySize, snTacacsKey=snTacacsKey, snSwPortInfoChnMode=snSwPortInfoChnMode, snVLanByIpSubnetTable=snVLanByIpSubnetTable, snDhcpGatewayListInfo=snDhcpGatewayListInfo, snSwIfInfoFlowControl=snSwIfInfoFlowControl, snPortMacSecurityIntfMacEntry=snPortMacSecurityIntfMacEntry, snSwPortStatsAlignErrors=snSwPortStatsAlignErrors, snFdbStationIf=snFdbStationIf, snVLanByPortCfgBaseNumPorts=snVLanByPortCfgBaseNumPorts, snSwPortInfoMirrorMode=snSwPortInfoMirrorMode, snNetFlowGblVersion=snNetFlowGblVersion, snSwPortPresent=snSwPortPresent, PortMask=PortMask, snSwPortStatsMacStations=snSwPortStatsMacStations, snVLanByIpxNetNetworkNum=snVLanByIpxNetNetworkNum, snIfStpPortDesignatedCost=snIfStpPortDesignatedCost, snIfMediaType=snIfMediaType, snVLanByPortCfgStpForwardDelay=snVLanByPortCfgStpForwardDelay, snNTPServerTable=snNTPServerTable, snIfStpPortNum=snIfStpPortNum, snNTPPollInterval=snNTPPollInterval, snFdpGlobal=snFdpGlobal, snVLanByIpSubnetDynamic=snVLanByIpSubnetDynamic, snSwPortInfoAutoNegotiate=snSwPortInfoAutoNegotiate, snSwSingleStpMode=snSwSingleStpMode, PortQosTC=PortQosTC, snSwPortInfoGigType=snSwPortInfoGigType, snVLanByATCableRouterIntf=snVLanByATCableRouterIntf, snSwIfStatsFrameTooLongs=snSwIfStatsFrameTooLongs, snSwPortStatsFrameTooLongs=snSwPortStatsFrameTooLongs, snTacacs=snTacacs, snSwIfDescr=snSwIfDescr, snPosInterface=snPosInterface, snIfStpOperPathCost=snIfStpOperPathCost, fdryIpSrcGuardMIB=fdryIpSrcGuardMIB, snVLanByPortStpHelloTime=snVLanByPortStpHelloTime, snSwIfInfoSpeed=snSwIfInfoSpeed, snIfMediaVersion=snIfMediaVersion, snIfStpVLanId=snIfStpVLanId, snSwMaxMacFilterPerSystem=snSwMaxMacFilterPerSystem, snDosAttackPortICMPDropCount=snDosAttackPortICMPDropCount, snQosBindProfileIndex=snQosBindProfileIndex)
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snInterfaceLookupIfIndex=snInterfaceLookupIfIndex, snPortMacSecurityIntfContentMaxLockedMacAllowed=snPortMacSecurityIntfContentMaxLockedMacAllowed, snSwIfStatsLinkChange=snSwIfStatsLinkChange, snPortStpEntrySize=snPortStpEntrySize, snPortMacSecurityIntfContentIfIndex=snPortMacSecurityIntfContentIfIndex, snTacacsServerEntry=snTacacsServerEntry, snPortStpPortPriority=snPortStpPortPriority, snAccountingSystem=snAccountingSystem, snMSTrunkIfTable=snMSTrunkIfTable, snNetFlowGblProtocolDisable=snNetFlowGblProtocolDisable, snMacFilterIfAccessRowStatus=snMacFilterIfAccessRowStatus, snVLanByPortTable=snVLanByPortTable, snVLanByPortCfgStpProtocolSpecification=snVLanByPortCfgStpProtocolSpecification, snPortStpPortDesignatedPort=snPortStpPortDesignatedPort, snVLanByIpSubnetVLanName=snVLanByIpSubnetVLanName, snFdpGlobalMessageInterval=snFdpGlobalMessageInterval, snPortMacGlobalSecurityAutosave=snPortMacGlobalSecurityAutosave, brcdVlanExtStatsOutSwitchedPkts=brcdVlanExtStatsOutSwitchedPkts, snPortMonitorMirrorList=snPortMonitorMirrorList, snSwIfStatsAlignErrors=snSwIfStatsAlignErrors, fdryDhcpSnoopMIB=fdryDhcpSnoopMIB, snVLanGroupVlanMaxEntry=snVLanGroupVlanMaxEntry, snNTPServerVersion=snNTPServerVersion, snFdpCacheCapabilities=snFdpCacheCapabilities, snPortMacSecurityModuleStatTotalMACs=snPortMacSecurityModuleStatTotalMACs, snFdpCachePortTagMode=snFdpCachePortTagMode, snSFlowGlb=snSFlowGlb, snRadiusSNMPServerMethod=snRadiusSNMPServerMethod, snVLanByPortCfgStpHelloTime=snVLanByPortCfgStpHelloTime, snPortStpVLanId=snPortStpVLanId, snVLanByIpSubnetDynamicPortList=snVLanByIpSubnetDynamicPortList, snTacacsTimeOut=snTacacsTimeOut, snSwIfStpPortEnable=snSwIfStpPortEnable, snPortStpPortEnable=snPortStpPortEnable, snPortMacSecurityIfIndex=snPortMacSecurityIfIndex, snVLanByIpxNetTable=snVLanByIpxNetTable, snVLanByPortStpRootCost=snVLanByPortStpRootCost, snSwIfStatsInBitsPerSec=snSwIfStatsInBitsPerSec, snIfRstpTCNBPDUReceived=snIfRstpTCNBPDUReceived, snSwIfLoadInterval=snSwIfLoadInterval, snNetFlowAggregationActiveTimeout=snNetFlowAggregationActiveTimeout, snVLanByPortCfgEntry=snVLanByPortCfgEntry, snFdpCachedAddrType=snFdpCachedAddrType, snSwViolatorPortNumber=snSwViolatorPortNumber, snPortMacSecurityTable=snPortMacSecurityTable, brcdIfEgressCounterIfIndex=brcdIfEgressCounterIfIndex, snFdpInterface=snFdpInterface, snVLanByPortCfgBaseBridgeAddress=snVLanByPortCfgBaseBridgeAddress, snFdbTableCurEntry=snFdbTableCurEntry, snSwIfStatsOutMcastFrames=snSwIfStatsOutMcastFrames, snPortMacSecurityIntfContentShutdownTime=snPortMacSecurityIntfContentShutdownTime, snMSTrunkPortIndex=snMSTrunkPortIndex, snSw8021qTagType=snSw8021qTagType, snSwGroupIpL3SwMode=snSwGroupIpL3SwMode, snVLanByProtocolChassisStaticMask=snVLanByProtocolChassisStaticMask, snRadiusServerRowStatus=snRadiusServerRowStatus, snPortStpPathCost=snPortStpPathCost, snSwPortStatsOutMcastFrames=snSwPortStatsOutMcastFrames, snPortStpPortState=snPortStpPortState, snSwFastStpMode=snSwFastStpMode, snIfStpPortPriority=snIfStpPortPriority, snStacking=snStacking, brcdRouteMap=brcdRouteMap, brcdVlanExtStatsInRoutedOctets=brcdVlanExtStatsInRoutedOctets, snVLanByPortEntry=snVLanByPortEntry, snSwPortStatsInMcastFrames=snSwPortStatsInMcastFrames, snSwPortInfoSpeed=snSwPortInfoSpeed, snDosAttackICMPBlockCount=snDosAttackICMPBlockCount, snVLanByPortStpRootPort=snVLanByPortStpRootPort, snIfStpPortDesignatedBridge=snIfStpPortDesignatedBridge, snVLanByPortStpGroupForwardDelay=snVLanByPortStpGroupForwardDelay, snVLanByIpxNetStaticPortList=snVLanByIpxNetStaticPortList, snIfIndexLookupEntry=snIfIndexLookupEntry, snIfOpticalLaneMonitoringTemperature=snIfOpticalLaneMonitoringTemperature, snSwPortStpPortEnable=snSwPortStpPortEnable, snSwBroadcastLimit2=snSwBroadcastLimit2, VlanTagMode=VlanTagMode, snVLanByPortCfgStpPriority=snVLanByPortCfgStpPriority, snPortMacSecurityMAC=snPortMacSecurityMAC, snIfStpPortState=snIfStpPortState, snWireless=snWireless, snVLanByPortCfgStpTimeSinceTopologyChange=snVLanByPortCfgStpTimeSinceTopologyChange, fdryMacVlanMIB=fdryMacVlanMIB, snIfStpCfgPathCost=snIfStpCfgPathCost, snVLanByPortStpTopChanges=snVLanByPortStpTopChanges, snSwPortInLinePowerClass=snSwPortInLinePowerClass, snFdpCachedAddr=snFdpCachedAddr, snMSTrunkRowStatus=snMSTrunkRowStatus, snSwProbePortNum=snSwProbePortNum, snVLanByIpxNetChassisExcludeMask=snVLanByIpxNetChassisExcludeMask, snSwPortCacheGroupId=snSwPortCacheGroupId, snMacFilter=snMacFilter, snSwIfVlanId=snSwIfVlanId, snVLanByPortCfgVLanId=snVLanByPortCfgVLanId, snSwPortInfo=snSwPortInfo, snSwPortRouteOnly=snSwPortRouteOnly, snIfOpticalLaneMonitoringTxPower=snIfOpticalLaneMonitoringTxPower, brcdVlanExtStatsVlanId=brcdVlanExtStatsVlanId, snAAA=snAAA, snVLanByATCableRowStatus=snVLanByATCableRowStatus, snVLanByPortCfgVLanName=snVLanByPortCfgVLanName, snVLanByIpxNetExcludePortList=snVLanByIpxNetExcludePortList, snPortStpPortAdminEdgePort=snPortStpPortAdminEdgePort, snSwIfStatsInBcastFrames=snSwIfStatsInBcastFrames, snTacacsServerAuthPort=snTacacsServerAuthPort, snVLanByProtocolStaticPortList=snVLanByProtocolStaticPortList, snPortMacSecurityIntfMacIfIndex=snPortMacSecurityIntfMacIfIndex, snSwIfFastSpanPortEnable=snSwIfFastSpanPortEnable, snSubInterface=snSubInterface, snSwIfStatsInJumboFrames=snSwIfStatsInJumboFrames, snAccountingCommandMethods=snAccountingCommandMethods, snMacFilterPortAccessRowStatus=snMacFilterPortAccessRowStatus, BridgeId=BridgeId, snVLanByPortChassisPortMask=snVLanByPortChassisPortMask, snSwPortStatsOutFrames=snSwPortStatsOutFrames, brcdVlanExtStatsOutPkts=brcdVlanExtStatsOutPkts, snVLanByPortStpDesignatedRoot=snVLanByPortStpDesignatedRoot, snSwPortStatsTxColliFrames=snSwPortStatsTxColliFrames, snDosAttackPort=snDosAttackPort, snIfStpPortRole=snIfStpPortRole, snVsrp=snVsrp, snSwSummary=snSwSummary, snSwIfInfoL2FowardEnable=snSwIfInfoL2FowardEnable, snMSTrunkPortList=snMSTrunkPortList, snSwPortInLinePowerWattage=snSwPortInLinePowerWattage, snDosAttackICMPDropCount=snDosAttackICMPDropCount, snPortMacSecurityIntfMacRowStatus=snPortMacSecurityIntfMacRowStatus, snRadiusTimeOut=snRadiusTimeOut, snSwPortInLinePowerControl=snSwPortInLinePowerControl, snVLanByIpSubnetChassisDynamicMask=snVLanByIpSubnetChassisDynamicMask, snSwPortDescr=snSwPortDescr, snSwBroadcastLimit=snSwBroadcastLimit, snSwIfFastSpanUplinkEnable=snSwIfFastSpanUplinkEnable, snQosProfileName=snQosProfileName, snNTPSystemClock=snNTPSystemClock, snSwGroupDefaultCfgMode=snSwGroupDefaultCfgMode, snDosAttackGlobal=snDosAttackGlobal, snFdpCacheAddress=snFdpCacheAddress, snVLanGroupSetAllVLan=snVLanGroupSetAllVLan, snIfMediaInfoEntry=snIfMediaInfoEntry, snMSTrunkIfRowStatus=snMSTrunkIfRowStatus, snSwIfOutOctets=snSwIfOutOctets, snIfOpticalMonitoringInfoEntry=snIfOpticalMonitoringInfoEntry, snDnsDomainName=snDnsDomainName, snNTPServerIp=snNTPServerIp, snVLanByPortStpMode=snVLanByPortStpMode, snFdpCachedAddrDeviceIndex=snFdpCachedAddrDeviceIndex, snAuthorization=snAuthorization, snIfStpEntry=snIfStpEntry, snSwPortFastSpanUplinkEnable=snSwPortFastSpanUplinkEnable, snFdpCacheIsAggregateVlan=snFdpCacheIsAggregateVlan, snInterfaceLookup2Table=snInterfaceLookup2Table, snFdpCache=snFdpCache, snIfIndexLookupIfIndex=snIfIndexLookupIfIndex, snLoopbackInterface=snLoopbackInterface, snSSL=snSSL, snDnsInfo=snDnsInfo, snFdpCachedAddrDeviceAddrEntryIndex=snFdpCachedAddrDeviceAddrEntryIndex, snSwProtocolVLanMode=snSwProtocolVLanMode, snPortStpPortForwardTransitions=snPortStpPortForwardTransitions, brcdIfEgressCounterDropPkts=brcdIfEgressCounterDropPkts, snFdpCacheEntry=snFdpCacheEntry, snSwIfName=snSwIfName, snSFlow=snSFlow, snDosAttackPortSYNDropCount=snDosAttackPortSYNDropCount, snSwIfInfoPortNum=snSwIfInfoPortNum, snSwPortTransGroupId=snSwPortTransGroupId, snDosAttackSYNDropCount=snDosAttackSYNDropCount, snVLanByATCableVLanName=snVLanByATCableVLanName, snNetFlowCollectorTable=snNetFlowCollectorTable, snFdbStationPort=snFdbStationPort, snSwEnableLockedAddrViolationTrap=snSwEnableLockedAddrViolationTrap, snSwPortStatsInKiloBitsPerSec=snSwPortStatsInKiloBitsPerSec, snVLanByProtocolChassisExcludeMask=snVLanByProtocolChassisExcludeMask, brcdIfEgressCounterType=brcdIfEgressCounterType, snPortStpSetAll=snPortStpSetAll, snInterfaceLookup2IfIndex=snInterfaceLookup2IfIndex, snSwIfStatsInDiscard=snSwIfStatsInDiscard, snFdbRowStatus=snFdbRowStatus, snNetFlowAggregationIndex=snNetFlowAggregationIndex, snSwGlobalAutoNegotiate=snSwGlobalAutoNegotiate, snSwIfStatsInUtilization=snSwIfStatsInUtilization, snNetFlowCollectorIp=snNetFlowCollectorIp, snVLanByIpxNetChassisStaticMask=snVLanByIpxNetChassisStaticMask, snSwPortStatsOutBcastFrames=snSwPortStatsOutBcastFrames, snQos=snQos, snVLanByATCableEntry=snVLanByATCableEntry, snNTPTimeZone=snNTPTimeZone, snSwIfInfoMonitorMode=snSwIfInfoMonitorMode, snNetFlowAggregationInactiveTimeout=snNetFlowAggregationInactiveTimeout, snMacFilterSourceMac=snMacFilterSourceMac, snSwIfInfoAutoNegotiate=snSwIfInfoAutoNegotiate, snDhcpGatewayListTable=snDhcpGatewayListTable, snSwInfo=snSwInfo, snPortMacSecurityIntfMacTable=snPortMacSecurityIntfMacTable, snSwEnableBridgeTopoChangeTrap=snSwEnableBridgeTopoChangeTrap, snFdpCachedAddrValue=snFdpCachedAddrValue, snSwPortFastSpanPortEnable=snSwPortFastSpanPortEnable, snSwViolatorMacAddress=snSwViolatorMacAddress, snQosProfileIndex=snQosProfileIndex, snTrunkInterface=snTrunkInterface, snSwPortStatsOutKiloBitsPerSec=snSwPortStatsOutKiloBitsPerSec, snPortMacSecurityIntfContentViolationCounts=snPortMacSecurityIntfContentViolationCounts, snPortMonitorEntry=snPortMonitorEntry, snVLanByPortVLanId=snVLanByPortVLanId, snTacacsSNMPAccess=snTacacsSNMPAccess, snAccountingExec=snAccountingExec, snIfOpticalLaneMonitoringEntry=snIfOpticalLaneMonitoringEntry, snTrunkType=snTrunkType, snInterfaceLookup2Entry=snInterfaceLookup2Entry, snIfOpticalMonitoringRxPower=snIfOpticalMonitoringRxPower, snFdpCacheTable=snFdpCacheTable, snCAR=snCAR, fdryLinkAggregationGroupMIB=fdryLinkAggregationGroupMIB, snVLanByPortPortList=snVLanByPortPortList, snPortMacSecurityAutosaveMacAddress=snPortMacSecurityAutosaveMacAddress, snSwIfInfoPhysAddress=snSwIfInfoPhysAddress, snTrunkIndex=snTrunkIndex, snVLanByProtocolChassisDynamicMask=snVLanByProtocolChassisDynamicMask)
