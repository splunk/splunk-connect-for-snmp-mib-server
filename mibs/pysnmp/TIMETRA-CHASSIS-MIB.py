#
# PySNMP MIB module TIMETRA-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:09:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibIdentifier, Unsigned32, Integer32, Counter64, ModuleIdentity, ObjectIdentity, Gauge32, IpAddress, NotificationType, iso, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Unsigned32", "Integer32", "Counter64", "ModuleIdentity", "ObjectIdentity", "Gauge32", "IpAddress", "NotificationType", "iso", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowPointer, TruthValue, DateAndTime, TimeInterval, TextualConvention, RowStatus, TimeStamp, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowPointer", "TruthValue", "DateAndTime", "TimeInterval", "TextualConvention", "RowStatus", "TimeStamp", "MacAddress")
timetraSRMIBModules, tmnxSRObjs, tmnxSRNotifyPrefix, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRNotifyPrefix", "tmnxSRConfs")
TItemDescription, TmnxIpSecIsaOperFlags, TmnxEnabledDisabled, TNamedItemOrEmpty, TmnxOperState, TmnxActionType, TPlcrBurstSizeBytesOverride, TmnxIngPolicerStatMode, THPolCIRRateOverride, TNamedItem, THPolPIRRateOverride, TIngPolicerId, TmnxPortID, TmnxIngPolicerStatModeOverride, THsmdaPIRMRateOverride, TmnxAdminState, TPerPacketOffsetOvr, THsmdaWeightOverride = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TItemDescription", "TmnxIpSecIsaOperFlags", "TmnxEnabledDisabled", "TNamedItemOrEmpty", "TmnxOperState", "TmnxActionType", "TPlcrBurstSizeBytesOverride", "TmnxIngPolicerStatMode", "THPolCIRRateOverride", "TNamedItem", "THPolPIRRateOverride", "TIngPolicerId", "TmnxPortID", "TmnxIngPolicerStatModeOverride", "THsmdaPIRMRateOverride", "TmnxAdminState", "TPerPacketOffsetOvr", "THsmdaWeightOverride")
tmnxChassisMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 2))
tmnxChassisMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-03-16 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))
if mibBuilder.loadTexts: tmnxChassisMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: tmnxChassisMIBModule.setOrganization('Alcatel-Lucent')
tmnxHwObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2))
tmnxChassisObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1))
tmnxSlotObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 2))
tmnxCardObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3))
tmnxChassisNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6))
tmnxChassisAdminObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8))
tmnxHwNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2))
tmnxChassisNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1))
tmnxChassisNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0))
tmnxHwConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2))
tmnxChassisConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1))
class TmnxAlarmState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("alarmActive", 1), ("alarmCleared", 2))

class TmnxChassisIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

class TmnxChassisIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32)

class TmnxHwIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class TmnxHwIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TmnxHwClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 30))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("chassis", 3), ("container", 4), ("powerSupply", 5), ("fan", 6), ("sensor", 7), ("ioModule", 8), ("cpmModule", 9), ("fabricModule", 10), ("mdaModule", 11), ("flashDiskModule", 12), ("port", 13), ("mcm", 14), ("ccm", 15), ("alarmInputModule", 16), ("vwmShelfModule", 30))

class TmnxCardType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxCardSuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalid-card-type", 0), ("unassigned", 1), ("supp-card-type-2", 2), ("supp-card-type-3", 3), ("supp-card-type-4", 4), ("supp-card-type-5", 5), ("supp-card-type-6", 6), ("supp-card-type-7", 7), ("supp-card-type-8", 8), ("supp-card-type-9", 9), ("supp-card-type-10", 10), ("supp-card-type-11", 11), ("supp-card-type-12", 12), ("supp-card-type-13", 13), ("supp-card-type-14", 14), ("supp-card-type-15", 15), ("supp-card-type-16", 16), ("supp-card-type-17", 17), ("supp-card-type-18", 18), ("supp-card-type-19", 19), ("supp-card-type-20", 20), ("supp-card-type-21", 21), ("supp-card-type-22", 22), ("supp-card-type-23", 23), ("supp-card-type-24", 24), ("supp-card-type-25", 25), ("supp-card-type-26", 26), ("supp-card-type-27", 27), ("supp-card-type-28", 28), ("supp-card-type-29", 29), ("supp-card-type-30", 30), ("supp-card-type-31", 31), ("supp-card-type-32", 32), ("supp-card-type-33", 33), ("supp-card-type-34", 34), ("supp-card-type-35", 35), ("supp-card-type-36", 36), ("supp-card-type-37", 37), ("supp-card-type-38", 38), ("supp-card-type-39", 39), ("supp-card-type-40", 40), ("supp-card-type-41", 41), ("supp-card-type-42", 42), ("supp-card-type-43", 43), ("supp-card-type-44", 44), ("supp-card-type-45", 45), ("supp-card-type-46", 46), ("supp-card-type-47", 47), ("supp-card-type-48", 48), ("supp-card-type-49", 49), ("supp-card-type-50", 50), ("supp-card-type-51", 51), ("supp-card-type-52", 52), ("supp-card-type-53", 53), ("supp-card-type-54", 54), ("supp-card-type-55", 55), ("supp-card-type-56", 56), ("supp-card-type-57", 57), ("supp-card-type-58", 58), ("supp-card-type-59", 59), ("supp-card-type-60", 60), ("supp-card-type-61", 61), ("supp-card-type-62", 62), ("supp-card-type-63", 63))

class TmnxFabricType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxFabricSuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalidCardType", 0), ("unassigned", 1), ("suppCardType2", 2), ("suppCardType3", 3), ("suppCardType4", 4), ("suppCardType5", 5), ("suppCardType6", 6), ("suppCardType7", 7), ("suppCardType8", 8), ("suppCardType9", 9), ("suppCardType10", 10), ("suppCardType11", 11), ("suppCardType12", 12), ("suppCardType13", 13), ("suppCardType14", 14), ("suppCardType15", 15), ("suppCardType16", 16), ("suppCardType17", 17), ("suppCardType18", 18), ("suppCardType19", 19), ("suppCardType20", 20), ("suppCardType21", 21), ("suppCardType22", 22), ("suppCardType23", 23), ("suppCardType24", 24), ("suppCardType25", 25), ("suppCardType26", 26), ("suppCardType27", 27), ("suppCardType28", 28), ("suppCardType29", 29), ("suppCardType30", 30), ("suppCardType31", 31), ("suppCardType32", 32), ("suppCardType33", 33), ("suppCardType34", 34), ("suppCardType35", 35), ("suppCardType36", 36), ("suppCardType37", 37), ("suppCardType38", 38), ("suppCardType39", 39), ("suppCardType40", 40), ("suppCardType41", 41), ("suppCardType42", 42), ("suppCardType43", 43), ("suppCardType44", 44), ("suppCardType45", 45), ("suppCardType46", 46), ("suppCardType47", 47), ("suppCardType48", 48), ("suppCardType49", 49), ("suppCardType50", 50), ("suppCardType51", 51), ("suppCardType52", 52), ("suppCardType53", 53), ("suppCardType54", 54), ("suppCardType55", 55), ("suppCardType56", 56), ("suppCardType57", 57), ("suppCardType58", 58), ("suppCardType59", 59), ("suppCardType60", 60), ("suppCardType61", 61), ("suppCardType62", 62), ("suppCardType63", 63))

class TmnxCardRebootType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cardReset", 1), ("notApplicable", 2), ("cardPowerCycle", 3))

class TmnxChassisType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxDeviceState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("deviceStateUnknown", 1), ("deviceNotEquipped", 2), ("deviceStateOk", 3), ("deviceStateFailed", 4), ("deviceStateOutOfService", 5))

class TmnxLEDState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ledOff", 1), ("ledRed", 2), ("ledAmber", 3), ("ledYellow", 4), ("ledGreen", 5), ("ledAmberBlink", 6), ("ledYellowBlink", 7), ("ledGreenBlink", 8))

class TmnxMdaType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxMDASuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalid-MDA-type", 0), ("unassigned", 1), ("supp-MDA-type-2", 2), ("supp-MDA-type-3", 3), ("supp-MDA-type-4", 4), ("supp-MDA-type-5", 5), ("supp-MDA-type-6", 6), ("supp-MDA-type-7", 7), ("supp-MDA-type-8", 8), ("supp-MDA-type-9", 9), ("supp-MDA-type-10", 10), ("supp-MDA-type-11", 11), ("supp-MDA-type-12", 12), ("supp-MDA-type-13", 13), ("supp-MDA-type-14", 14), ("supp-MDA-type-15", 15), ("supp-MDA-type-16", 16), ("supp-MDA-type-17", 17), ("supp-MDA-type-18", 18), ("supp-MDA-type-19", 19), ("supp-MDA-type-20", 20), ("supp-MDA-type-21", 21), ("supp-MDA-type-22", 22), ("supp-MDA-type-23", 23), ("supp-MDA-type-24", 24), ("supp-MDA-type-25", 25), ("supp-MDA-type-26", 26), ("supp-MDA-type-27", 27), ("supp-MDA-type-28", 28), ("supp-MDA-type-29", 29), ("supp-MDA-type-30", 30), ("supp-MDA-type-31", 31), ("supp-MDA-type-32", 32), ("supp-MDA-type-33", 33), ("supp-MDA-type-34", 34), ("supp-MDA-type-35", 35), ("supp-MDA-type-36", 36), ("supp-MDA-type-37", 37), ("supp-MDA-type-38", 38), ("supp-MDA-type-39", 39), ("supp-MDA-type-40", 40), ("supp-MDA-type-41", 41), ("supp-MDA-type-42", 42), ("supp-MDA-type-43", 43), ("supp-MDA-type-44", 44), ("supp-MDA-type-45", 45), ("supp-MDA-type-46", 46), ("supp-MDA-type-47", 47), ("supp-MDA-type-48", 48), ("supp-MDA-type-49", 49), ("supp-MDA-type-50", 50), ("supp-MDA-type-51", 51), ("supp-MDA-type-52", 52), ("supp-MDA-type-53", 53), ("supp-MDA-type-54", 54), ("supp-MDA-type-55", 55), ("supp-MDA-type-56", 56), ("supp-MDA-type-57", 57), ("supp-MDA-type-58", 58), ("supp-MDA-type-59", 59), ("supp-MDA-type-60", 60), ("supp-MDA-type-61", 61), ("supp-MDA-type-62", 62), ("supp-MDA-type-63", 63), ("supp-MDA-type-64", 64), ("supp-MDA-type-65", 65), ("supp-MDA-type-66", 66), ("supp-MDA-type-67", 67), ("supp-MDA-type-68", 68), ("supp-MDA-type-69", 69), ("supp-MDA-type-70", 70), ("supp-MDA-type-71", 71), ("supp-MDA-type-72", 72), ("supp-MDA-type-73", 73), ("supp-MDA-type-74", 74), ("supp-MDA-type-75", 75), ("supp-MDA-type-76", 76), ("supp-MDA-type-77", 77), ("supp-MDA-type-78", 78), ("supp-MDA-type-79", 79), ("supp-MDA-type-80", 80), ("supp-MDA-type-81", 81), ("supp-MDA-type-82", 82), ("supp-MDA-type-83", 83), ("supp-MDA-type-84", 84), ("supp-MDA-type-85", 85), ("supp-MDA-type-86", 86), ("supp-MDA-type-87", 87), ("supp-MDA-type-88", 88), ("supp-MDA-type-89", 89), ("supp-MDA-type-90", 90), ("supp-MDA-type-91", 91), ("supp-MDA-type-92", 92), ("supp-MDA-type-93", 93), ("supp-MDA-type-94", 94), ("supp-MDA-type-95", 95), ("supp-MDA-type-96", 96), ("supp-MDA-type-97", 97), ("supp-MDA-type-98", 98), ("supp-MDA-type-99", 99), ("supp-MDA-type-100", 100), ("supp-MDA-type-101", 101), ("supp-MDA-type-102", 102), ("supp-MDA-type-103", 103), ("supp-MDA-type-104", 104), ("supp-MDA-type-105", 105), ("supp-MDA-type-106", 106), ("supp-MDA-type-107", 107), ("supp-MDA-type-108", 108), ("supp-MDA-type-109", 109), ("supp-MDA-type-110", 110), ("supp-MDA-type-111", 111))

class TmnxMDAChanType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("unknown", 0), ("sonetSts768", 1), ("sonetSts192", 2), ("sonetSts48", 3), ("sonetSts12", 4), ("sonetSts3", 5), ("sonetSts1", 6), ("sdhTug3", 7), ("sonetVtg", 8), ("sonetVt15", 9), ("sonetVt2", 10), ("sonetVt3", 11), ("sonetVt6", 12), ("pdhTu3", 13), ("pdhDs3", 14), ("pdhE3", 15), ("pdhDs1", 16), ("pdhE1", 17), ("pdhDs0Grp", 18))

class TmnxMdaAtmMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("max8kVc", 1), ("max16kVc", 2))

class TmnxCcmType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxMcmType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxSlotNum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class TmnxSlotNumOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 128)

class TmnxPortAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4))

class TmnxChassisMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("modeA", 1), ("modeB", 2), ("modeC", 3), ("modeD", 4))

class TmnxSETSRefSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("otherCPM", 0), ("reference1", 1), ("reference2", 2), ("bits1", 3), ("bits2", 4), ("ptp", 5), ("noReference", 6))

class TmnxSETSRefQualified(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("qualified", 1), ("not-qualified", 2))

class TmnxSETSRefAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("los", 0), ("oof", 1), ("oopir", 2))

class TmnxBITSIfType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("t1-esf", 1), ("t1-sf", 2), ("e1-pcm30crc", 3), ("e1-pcm31crc", 4))

class TmnxSSMQualityLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("unknown", 0), ("prs", 1), ("stu", 2), ("st2", 3), ("tnc", 4), ("st3e", 5), ("st3", 6), ("smc", 7), ("st4", 8), ("dus", 9), ("prc", 10), ("ssua", 11), ("ssub", 12), ("sec", 13), ("dnu", 14), ("inv", 15), ("pno", 16), ("eec1", 17), ("eec2", 18), ("failed", 19))

class TmnxRefInState(TextualConvention, Integer32):
    reference = "IEEE Std 1588-2008 'IEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems'"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("disabled", 0), ("unqualified", 1), ("standby", 2), ("up", 3), ("previousFailure", 4), ("lowQuality", 5), ("lof", 6), ("ais", 7), ("ghost", 8), ("validating", 9), ("reserved-10", 10), ("reserved-11", 11), ("reserved-12", 12), ("fer", 13), ("reserved-14", 14), ("reserved-15", 15), ("reserved-16", 16), ("ptpAdminDisabled", 17), ("ptpOperDown", 18), ("ptpNoParentClock", 19))

class TmnxBITSOutSource(TextualConvention, Integer32):
    reference = 'ITU-T G.8264/Y.1364 Distribution of timing through packet networks, Section A.7.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("lineRef", 1), ("internalClock", 2))

class TmnxCcagId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8), )
class TmnxCcagRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100000000), )
class TmnxCcagRateOption(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("aggregate", 1), ("cca", 2))

class TmnxChassisPemType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("unknown", 1), ("pem", 2), ("pem-3", 3), ("peq", 4))

class TmnxCardSlotBitMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("slot1", 0), ("slot2", 1), ("slot3", 2), ("slot4", 3), ("slot5", 4), ("slot6", 5), ("slot7", 6), ("slot8", 7), ("slot9", 8), ("slot10", 9), ("slot11", 10), ("slot12", 11), ("slot13", 12), ("slot14", 13), ("slot15", 14), ("slot16", 15))

class TmnxTunnelGroupId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 16)

class TmnxTunnelGroupIdOrZero(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), )
tmnxChassisTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTotalNumber.setStatus('current')
tmnxChassisLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisLastChange.setStatus('current')
tmnxChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: tmnxChassisTable.setStatus('current')
tmnxChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"))
if mibBuilder.loadTexts: tmnxChassisEntry.setStatus('current')
tmnxChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 1), TmnxChassisIndex())
if mibBuilder.loadTexts: tmnxChassisIndex.setStatus('current')
tmnxChassisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisRowStatus.setStatus('current')
tmnxChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisName.setStatus('current')
tmnxChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 4), TmnxChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisType.setStatus('current')
tmnxChassisLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisLocation.setStatus('current')
tmnxChassisCoordinates = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisCoordinates.setStatus('current')
tmnxChassisNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumSlots.setStatus('current')
tmnxChassisNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumPorts.setStatus('current')
tmnxChassisNumPwrSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumPwrSupplies.setStatus('current')
tmnxChassisNumFanTrays = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumFanTrays.setStatus('current')
tmnxChassisNumFans = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumFans.setStatus('current')
tmnxChassisCriticalLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 12), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisCriticalLEDState.setStatus('current')
tmnxChassisMajorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 13), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisMajorLEDState.setStatus('current')
tmnxChassisMinorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 14), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisMinorLEDState.setStatus('current')
tmnxChassisBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisBaseMacAddress.setStatus('current')
tmnxChassisCLLICode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisCLLICode.setStatus('current')
tmnxChassisReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 17), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisReboot.setStatus('current')
tmnxChassisUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 18), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisUpgrade.setStatus('current')
tmnxChassisAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 19), TmnxChassisMode().clone('modeA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisAdminMode.setStatus('current')
tmnxChassisOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 20), TmnxChassisMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOperMode.setStatus('current')
tmnxChassisModeForce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisModeForce.setStatus('current')
tmnxChassisUpdateWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 600)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisUpdateWaitTime.setStatus('obsolete')
tmnxChassisUpdateTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisUpdateTimeLeft.setStatus('current')
tmnxChassisOverTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stateOk", 1), ("stateOverTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOverTempState.setStatus('current')
tmnxChassisMixedModeIomAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 25), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisMixedModeIomAdminMode.setStatus('current')
tmnxChassisMixedModeIomUpgrList = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 26), Bits().clone(namedValues=NamedValues(("iomSlot1", 0), ("iomSlot2", 1), ("iomSlot3", 2), ("iomSlot4", 3), ("iomSlot5", 4), ("iomSlot6", 5), ("iomSlot7", 6), ("iomSlot8", 7), ("iomSlot9", 8), ("iomSlot10", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisMixedModeIomUpgrList.setStatus('current')
tmnxChassisRedForcedSingleSfm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisRedForcedSingleSfm.setStatus('current')
tmnxChassisFanTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: tmnxChassisFanTable.setStatus('current')
tmnxChassisFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisFanIndex"))
if mibBuilder.loadTexts: tmnxChassisFanEntry.setStatus('current')
tmnxChassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxChassisFanIndex.setStatus('current')
tmnxChassisFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanOperStatus.setStatus('current')
tmnxChassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("unknown", 1), ("halfSpeed", 2), ("fullSpeed", 3), ("lowSpeed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanSpeed.setStatus('current')
tmnxChassisFanRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("fan1", 1), ("hfFan2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanRevision.setStatus('current')
tmnxChassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5), )
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTable.setStatus('current')
tmnxChassisPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyId"))
if mibBuilder.loadTexts: tmnxChassisPowerSupplyEntry.setStatus('current')
tmnxChassisPowerSupplyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxChassisPowerSupplyId.setStatus('current')
tmnxChassisPowerSupplyACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyACStatus.setStatus('current')
tmnxChassisPowerSupplyDCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 3), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyDCStatus.setStatus('current')
tmnxChassisPowerSupplyTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 4), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTempStatus.setStatus('current')
tmnxChassisPowerSupplyTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 5), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTempThreshold.setStatus('current')
tmnxChassisPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 6), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupply1Status.setStatus('current')
tmnxChassisPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 7), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupply2Status.setStatus('current')
tmnxChassisPowerSupplyAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("dc", 1), ("acSingle", 2), ("acMultiple", 3), ("default", 4))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyAssignedType.setStatus('current')
tmnxChassisPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 9), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyInputStatus.setStatus('current')
tmnxChassisPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 10), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyOutputStatus.setStatus('current')
tmnxChassisPowerSupplyPemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 11), TmnxChassisPemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyPemType.setStatus('current')
tmnxChassisTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6), )
if mibBuilder.loadTexts: tmnxChassisTypeTable.setStatus('current')
tmnxChassisTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisTypeIndex"))
if mibBuilder.loadTexts: tmnxChassisTypeEntry.setStatus('current')
tmnxChassisTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 1), TmnxChassisType())
if mibBuilder.loadTexts: tmnxChassisTypeIndex.setStatus('current')
tmnxChassisTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeName.setStatus('current')
tmnxChassisTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeDescription.setStatus('current')
tmnxChassisTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeStatus.setStatus('current')
tmnxHwLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwLastChange.setStatus('current')
tmnxHwTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8), )
if mibBuilder.loadTexts: tmnxHwTable.setStatus('current')
tmnxHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"))
if mibBuilder.loadTexts: tmnxHwEntry.setStatus('current')
tmnxHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 1), TmnxHwIndex())
if mibBuilder.loadTexts: tmnxHwIndex.setStatus('current')
tmnxHwID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwID.setStatus('current')
tmnxHwMfgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgString.setStatus('current')
tmnxHwMfgBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgBoardNumber.setStatus('current')
tmnxHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSerialNumber.setStatus('current')
tmnxHwManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwManufactureDate.setStatus('current')
tmnxHwClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 7), TmnxHwClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwClass.setStatus('current')
tmnxHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwName.setStatus('current')
tmnxHwAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAlias.setStatus('current')
tmnxHwAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 10), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAssetID.setStatus('current')
tmnxHwCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwCLEI.setStatus('current')
tmnxHwIsFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwIsFRU.setStatus('current')
tmnxHwContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwContainedIn.setStatus('current')
tmnxHwParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwParentRelPos.setStatus('current')
tmnxHwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4), ("operateSwitch", 5))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAdminState.setStatus('current')
tmnxHwOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("diagnosing", 4), ("failed", 5), ("booting", 6), ("empty", 7), ("provisioned", 8), ("unprovisioned", 9), ("upgrade", 10), ("downgrade", 11), ("inServiceUpgrade", 12), ("inServiceDowngrade", 13), ("resetPending", 14), ("softReset", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwOperState.setStatus('current')
tmnxHwTempSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTempSensor.setStatus('current')
tmnxHwTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 18), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTemperature.setStatus('current')
tmnxHwTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 19), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTempThreshold.setStatus('current')
tmnxHwBootCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwBootCodeVersion.setStatus('current')
tmnxHwSoftwareCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSoftwareCodeVersion.setStatus('current')
tmnxHwSwLastBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwLastBoot.setStatus('current')
tmnxHwSwState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("hwFailure", 1), ("swFailure", 2), ("hwInitting", 3), ("swDownloading", 4), ("swInitting", 5), ("swInitted", 6), ("swRunning", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwState.setStatus('obsolete')
tmnxHwAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 24), TmnxAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwAlarmState.setStatus('current')
tmnxHwLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 25), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwLastAlarmEvent.setStatus('current')
tmnxHwClearAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 26), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwClearAlarms.setStatus('current')
tmnxHwSwImageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwImageSource.setStatus('current')
tmnxHwMfgDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgDeviations.setStatus('current')
tmnxHwBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 29), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwBaseMacAddress.setStatus('current')
tmnxHwFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwFailureReason.setStatus('current')
tmnxHwEquippedPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pfUnknown", 0), ("pf7750", 1), ("pf7450", 2), ("pf7710", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwEquippedPlatform.setStatus('current')
tmnxHwMfgAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgAssemblyNumber.setStatus('current')
tmnxHwFirmwareCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwFirmwareCodeVersion.setStatus('current')
tmnxHwContainsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9), )
if mibBuilder.loadTexts: tmnxHwContainsTable.setStatus('current')
tmnxHwContainsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if mibBuilder.loadTexts: tmnxHwContainsEntry.setStatus('current')
tmnxHwContainedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1, 1), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwContainedIndex.setStatus('current')
tmnxCcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10), )
if mibBuilder.loadTexts: tmnxCcmTable.setStatus('current')
tmnxCcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcmIndex"))
if mibBuilder.loadTexts: tmnxCcmEntry.setStatus('current')
tmnxCcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxCcmIndex.setStatus('current')
tmnxCcmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmOperStatus.setStatus('current')
tmnxCcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 3), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmHwIndex.setStatus('current')
tmnxCcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 4), TmnxCcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmEquippedType.setStatus('current')
tmnxCcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11), )
if mibBuilder.loadTexts: tmnxCcmTypeTable.setStatus('current')
tmnxCcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcmTypeIndex"))
if mibBuilder.loadTexts: tmnxCcmTypeEntry.setStatus('current')
tmnxCcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 1), TmnxCcmType())
if mibBuilder.loadTexts: tmnxCcmTypeIndex.setStatus('current')
tmnxCcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeName.setStatus('current')
tmnxCcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeDescription.setStatus('current')
tmnxCcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeStatus.setStatus('current')
tmnxFanTrayComponentTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12), )
if mibBuilder.loadTexts: tmnxFanTrayComponentTable.setStatus('current')
tmnxFanTrayComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisFanIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFanTrayCompIndex"))
if mibBuilder.loadTexts: tmnxFanTrayComponentEntry.setStatus('current')
tmnxFanTrayCompIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxFanTrayCompIndex.setStatus('current')
tmnxFanTrayCompSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFanTrayCompSpeed.setStatus('current')
tmnxHwResourceTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13), )
if mibBuilder.loadTexts: tmnxHwResourceTable.setStatus('current')
tmnxHwResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"))
if mibBuilder.loadTexts: tmnxHwResourceEntry.setStatus('current')
tmnxHwResourceCurrentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceCurrentVoltage.setStatus('current')
tmnxHwResourcePeakVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakVoltage.setStatus('current')
tmnxHwResourcePeakVoltageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakVoltageTime.setStatus('current')
tmnxHwResourceMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinVoltage.setStatus('current')
tmnxHwResourceMinVoltageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinVoltageTime.setStatus('current')
tmnxHwResourceCurrentWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceCurrentWattage.setStatus('current')
tmnxHwResourcePeakWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakWattage.setStatus('current')
tmnxHwResourcePeakWattageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakWattageTime.setStatus('current')
tmnxHwResourceMinWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinWattage.setStatus('current')
tmnxHwResourceMinWattageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinWattageTime.setStatus('current')
tmnxHwResourceCurrentAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceCurrentAmperage.setStatus('current')
tmnxHwResourcePeakAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakAmperage.setStatus('current')
tmnxHwResourcePeakAmperageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakAmperageTime.setStatus('current')
tmnxHwResourceMinAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinAmperage.setStatus('current')
tmnxHwResourceMinAmperageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinAmperageTime.setStatus('current')
tmnxCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLastChange.setStatus('current')
tmnxCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2), )
if mibBuilder.loadTexts: tmnxCardTable.setStatus('current')
tmnxCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"))
if mibBuilder.loadTexts: tmnxCardEntry.setStatus('current')
tmnxCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 1), TmnxSlotNum())
if mibBuilder.loadTexts: tmnxCardSlotNum.setStatus('current')
tmnxCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 2), TmnxCardSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardSupportedTypes.setStatus('current')
tmnxCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 3), TmnxCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardAllowedTypes.setStatus('obsolete')
tmnxCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 4), TmnxCardType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardAssignedType.setStatus('current')
tmnxCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 5), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardEquippedType.setStatus('current')
tmnxCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardHwIndex.setStatus('current')
tmnxCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 10), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardClockSource.setStatus('current')
tmnxCardNumMdaSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNumMdaSlots.setStatus('current')
tmnxCardNumMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNumMdas.setStatus('current')
tmnxCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 13), TmnxCardRebootType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardReboot.setStatus('current')
tmnxCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 14), Unsigned32()).setUnits('Mega-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardMemorySize.setStatus('current')
tmnxCardNamedPoolAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 15), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardNamedPoolAdminMode.setStatus('current')
tmnxCardNamedPoolOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 16), TmnxAdminState().clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNamedPoolOperMode.setStatus('current')
tmnxCardSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 17), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardSoftReset.setStatus('current')
tmnxCardLastBootupReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("hardReboot", 0), ("softReset", 1), ("powerCycle", 2), ("clearCard", 3), ("activitySwitch", 4), ("configChange", 5), ("runtimeFail", 6), ("bootFail", 7), ("unexpected", 8), ("issuTimeout", 9), ("reinserted", 10), ("issuHardReboot", 11), ("ccmFail", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLastBootupReason.setStatus('current')
tmnxCardCmplx1IngrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1IngrFcsOccur.setStatus('current')
tmnxCardCmplx1IngrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1IngrFcsOccurTime.setStatus('current')
tmnxCardCmplx1EgrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1EgrFcsOccur.setStatus('current')
tmnxCardCmplx1EgrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1EgrFcsOccurTime.setStatus('current')
tmnxCardCmplx2IngrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2IngrFcsOccur.setStatus('current')
tmnxCardCmplx2IngrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2IngrFcsOccurTime.setStatus('current')
tmnxCardCmplx2EgrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2EgrFcsOccur.setStatus('current')
tmnxCardCmplx2EgrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2EgrFcsOccurTime.setStatus('current')
tmnxCardCmplx1MemParityOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1MemParityOccur.setStatus('current')
tmnxCardCmplx1MemParityOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 28), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1MemParityOccurTime.setStatus('current')
tmnxCardCmplx2MemParityOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2MemParityOccur.setStatus('current')
tmnxCardCmplx2MemParityOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2MemParityOccurTime.setStatus('current')
tmnxCardCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 31), Bits().clone(namedValues=NamedValues(("sr", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardCapability.setStatus('current')
tmnxCardCmplx1CAMErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1CAMErrorOccur.setStatus('current')
tmnxCardCmplx1CAMErrorOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 33), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1CAMErrorOccurTime.setStatus('current')
tmnxCardCmplx2CAMErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2CAMErrorOccur.setStatus('current')
tmnxCardCmplx2CAMErrorOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 35), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2CAMErrorOccurTime.setStatus('current')
tmnxCardFailOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 36), Bits().clone(namedValues=NamedValues(("memoryEventGroupA", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardFailOnError.setStatus('current')
tmnxCardCmplx1EgrFcsSrcSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 37), TmnxCardSlotBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1EgrFcsSrcSlots.setStatus('current')
tmnxCardCmplx2EgrFcsSrcSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 38), TmnxCardSlotBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2EgrFcsSrcSlots.setStatus('current')
tmnxCardHardResetUnsupMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardHardResetUnsupMdas.setStatus('current')
tmnxCpmCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardLastChange.setStatus('current')
tmnxCpmCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4), )
if mibBuilder.loadTexts: tmnxCpmCardTable.setStatus('current')
tmnxCpmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
if mibBuilder.loadTexts: tmnxCpmCardEntry.setStatus('current')
tmnxCpmCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 1), TmnxSlotNum())
if mibBuilder.loadTexts: tmnxCpmCardSlotNum.setStatus('current')
tmnxCpmCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxCpmCardNum.setStatus('current')
tmnxCpmCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 3), TmnxCardSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardSupportedTypes.setStatus('current')
tmnxCpmCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 4), TmnxCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardAllowedTypes.setStatus('obsolete')
tmnxCpmCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 5), TmnxCardType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardAssignedType.setStatus('current')
tmnxCpmCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 6), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardEquippedType.setStatus('current')
tmnxCpmCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 7), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardHwIndex.setStatus('current')
tmnxCpmCardBootOptionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 8), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionVersion.setStatus('current')
tmnxCpmCardBootOptionLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionLastModified.setStatus('current')
tmnxCpmCardConfigBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 10), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigBootedVersion.setStatus('current')
tmnxCpmCardIndexBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 11), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardIndexBootedVersion.setStatus('current')
tmnxCpmCardConfigLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigLastModified.setStatus('current')
tmnxCpmCardConfigLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigLastSaved.setStatus('current')
tmnxCpmCardRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("singleton", 1), ("redundantActive", 2), ("redundantStandby", 3), ("redundantSplit", 4), ("redundantDisabled", 5), ("redundantSyncing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardRedundant.setStatus('current')
tmnxCpmCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 15), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardClockSource.setStatus('current')
tmnxCpmCardNumCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardNumCpus.setStatus('current')
tmnxCpmCardCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("mips", 2), ("pentium-pc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCpuType.setStatus('current')
tmnxCpmCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 18), Unsigned32()).setUnits('Mega-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardMemorySize.setStatus('current')
tmnxCpmCardSwitchToRedundantCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardSwitchToRedundantCard.setStatus('current')
tmnxCpmCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 20), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardReboot.setStatus('current')
tmnxCpmCardRereadBootOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardRereadBootOptions.setStatus('current')
tmnxCpmCardConfigFileLastBooted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastBooted.setStatus('current')
tmnxCpmCardConfigFileLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastSaved.setStatus('current')
tmnxCpmCardConfigFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastBootedHeader.setStatus('current')
tmnxCpmCardIndexFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardIndexFileLastBootedHeader.setStatus('current')
tmnxCpmCardBootOptionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionSource.setStatus('current')
tmnxCpmCardConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigSource.setStatus('current')
tmnxCpmCardBootOptionLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionLastSaved.setStatus('current')
tmnxCpmCardMasterSlaveRefState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryRef", 1), ("secondaryRef", 2), ("notInitialized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardMasterSlaveRefState.setStatus('current')
tmnxCpmCardConfigUserLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigUserLastModified.setStatus('current')
tmnxCpmCardCmplxCAMErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxCAMErrOccur.setStatus('current')
tmnxCpmCardCmplxCAMErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 33), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxCAMErrOccurTime.setStatus('current')
tmnxCpmCardOscillatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcxo", 2), ("ocxo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardOscillatorType.setStatus('current')
tmnxFabricLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricLastChange.setStatus('current')
tmnxFabricTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6), )
if mibBuilder.loadTexts: tmnxFabricTable.setStatus('current')
tmnxFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFabricSlotNum"))
if mibBuilder.loadTexts: tmnxFabricEntry.setStatus('current')
tmnxFabricSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxFabricSlotNum.setStatus('current')
tmnxFabricAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 2), TmnxFabricType().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFabricAssignedType.setStatus('current')
tmnxFabricEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 3), TmnxFabricType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricEquippedType.setStatus('current')
tmnxFabricHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 4), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricHwIndex.setStatus('current')
tmnxFabricSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 5), TmnxFabricSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricSupportedTypes.setStatus('current')
tmnxFabricReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 6), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFabricReboot.setStatus('current')
tmnxCpmFlashTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7), )
if mibBuilder.loadTexts: tmnxCpmFlashTable.setStatus('current')
tmnxCpmFlashEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmFlashId"))
if mibBuilder.loadTexts: tmnxCpmFlashEntry.setStatus('current')
tmnxCpmFlashId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tmnxCpmFlashId.setStatus('current')
tmnxCpmFlashOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashOperStatus.setStatus('current')
tmnxCpmFlashSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashSerialNumber.setStatus('current')
tmnxCpmFlashFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 4), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashFirmwareRevision.setStatus('current')
tmnxCpmFlashModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 5), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashModelNumber.setStatus('current')
tmnxCpmFlashCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 6), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashCapacity.setStatus('current')
tmnxCpmFlashUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 7), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashUsed.setStatus('current')
tmnxCpmFlashHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 8), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashHwIndex.setStatus('current')
tmnxMDATable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8), )
if mibBuilder.loadTexts: tmnxMDATable.setStatus('current')
tmnxMDAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxMDAEntry.setStatus('current')
tmnxMDASlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tmnxMDASlotNum.setStatus('current')
tmnxMDASupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 2), TmnxMDASuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDASupportedTypes.setStatus('current')
tmnxMDAAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 3), TmnxMdaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAllowedTypes.setStatus('obsolete')
tmnxMDAAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 4), TmnxMdaType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAssignedType.setStatus('current')
tmnxMDAEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 5), TmnxMdaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAEquippedType.setStatus('current')
tmnxMDAHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAHwIndex.setStatus('current')
tmnxMDAMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxPorts.setStatus('current')
tmnxMDAEquippedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAEquippedPorts.setStatus('current')
tmnxMDATxTimingSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cpm-card-A", 1), ("cpm-card-B", 2), ("local", 3), ("holdover", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDATxTimingSelected.setStatus('current')
tmnxMDASyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qualified", 1), ("not-qualified", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDASyncIfTimingStatus.setStatus('current')
tmnxMDANetworkIngQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 12), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDANetworkIngQueues.setStatus('current')
tmnxMDACapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 13), Bits().clone(namedValues=NamedValues(("isEthernet", 0), ("isSonet", 1), ("isTDM", 2), ("supportsPPP", 3), ("supportsFR", 4), ("supportsATM", 5), ("supportscHDLC", 6), ("isCMA", 7), ("supportsCEM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDACapabilities.setStatus('current')
tmnxMDAMinChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 14), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMinChannelization.setStatus('current')
tmnxMDAMaxChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 15), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxChannelization.setStatus('current')
tmnxMDAMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxChannels.setStatus('current')
tmnxMDAChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAChannelsInUse.setStatus('current')
tmnxMDACcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 18), TmnxCcagId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDACcagId.setStatus('current')
tmnxMDAReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAReboot.setStatus('current')
tmnxMDAHiBwMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastSource.setStatus('current')
tmnxMDAHiBwMcastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastAlarm.setStatus('current')
tmnxMDAHiBwMcastTapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastTapCount.setStatus('current')
tmnxMDAHiBwMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastGroup.setStatus('current')
tmnxMDAClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("adaptive", 1), ("differential", 2))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAClockMode.setStatus('current')
tmnxMDADiffTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(19440, 19440), ValueRangeConstraint(77760, 77760), ValueRangeConstraint(103680, 103680), ))).setUnits('kilohertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDADiffTimestampFreq.setStatus('current')
tmnxMDAIngHsmdaSchedPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 26), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngHsmdaSchedPolicy.setStatus('obsolete')
tmnxMDAMcPathMgmtBwPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 27), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtBwPlcyName.setStatus('current')
tmnxMDAMcPathMgmtPriPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2000), ))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtPriPathLimit.setStatus('current')
tmnxMDAMcPathMgmtSecPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2000), ))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtSecPathLimit.setStatus('current')
tmnxMDAMcPathMgmtAncPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 5000), ))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAncPathLimit.setStatus('current')
tmnxMDAMcPathMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 31), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAdminState.setStatus('current')
tmnxMDAIngNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 32), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngNamedPoolPolicy.setStatus('current')
tmnxMDAEgrNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 33), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrNamedPoolPolicy.setStatus('current')
tmnxMDAIngHsmdaPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 34), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngHsmdaPoolPolicy.setStatus('obsolete')
tmnxMDAEgrHsmdaPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 35), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrHsmdaPoolPolicy.setStatus('current')
tmnxMDAMcPathMgmtPriInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 36), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtPriInUseBw.setStatus('current')
tmnxMDAMcPathMgmtSecInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 37), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtSecInUseBw.setStatus('current')
tmnxMDAMcPathMgmtAncInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 38), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAncInUseBw.setStatus('current')
tmnxMDAMcPathMgmtBlkHoleInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 39), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtBlkHoleInUseBw.setStatus('current')
tmnxMDASynchronousEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDASynchronousEthernet.setStatus('current')
tmnxMDAXplErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 41), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAXplErrorTime.setStatus('current')
tmnxMDAXplFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAXplFailedCount.setStatus('current')
tmnxMDAAtmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 43), TmnxMdaAtmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAtmMode.setStatus('current')
tmnxMDAEgrHsmdaThrshLoBrstMult = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 65536), )).clone(-1)).setUnits('bytes per megabit of rate').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrHsmdaThrshLoBrstMult.setStatus('current')
tmnxMDAEgrHsmdaThrshHiBrstInc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65536), )).clone(-1)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrHsmdaThrshHiBrstInc.setStatus('current')
tmnxMDAIsaTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 46), TmnxTunnelGroupIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIsaTunnelGroup.setStatus('current')
tmnxMDAIsaTunnelGroupInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAIsaTunnelGroupInUse.setStatus('current')
tmnxCardTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9), )
if mibBuilder.loadTexts: tmnxCardTypeTable.setStatus('current')
tmnxCardTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardTypeIndex"))
if mibBuilder.loadTexts: tmnxCardTypeEntry.setStatus('current')
tmnxCardTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 1), TmnxCardType())
if mibBuilder.loadTexts: tmnxCardTypeIndex.setStatus('current')
tmnxCardTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeName.setStatus('current')
tmnxCardTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeDescription.setStatus('current')
tmnxCardTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeStatus.setStatus('current')
tmnxMdaTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10), )
if mibBuilder.loadTexts: tmnxMdaTypeTable.setStatus('current')
tmnxMdaTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxMdaTypeIndex"))
if mibBuilder.loadTexts: tmnxMdaTypeEntry.setStatus('current')
tmnxMdaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 1), TmnxMdaType())
if mibBuilder.loadTexts: tmnxMdaTypeIndex.setStatus('current')
tmnxMdaTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeName.setStatus('current')
tmnxMdaTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeDescription.setStatus('current')
tmnxMdaTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeStatus.setStatus('current')
tmnxSyncIfTimingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11), )
if mibBuilder.loadTexts: tmnxSyncIfTimingTable.setStatus('current')
tmnxSyncIfTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1), )
tmnxCpmCardEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingEntry"))
tmnxSyncIfTimingEntry.setIndexNames(*tmnxCpmCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxSyncIfTimingEntry.setStatus('current')
tmnxSyncIfTimingRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRevert.setStatus('current')
tmnxSyncIfTimingRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 2), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder1.setStatus('current')
tmnxSyncIfTimingRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 3), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder2.setStatus('current')
tmnxSyncIfTimingRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1SrcPort.setStatus('current')
tmnxSyncIfTimingRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 5), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1AdminStatus.setStatus('current')
tmnxSyncIfTimingRef1InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1InUse.setStatus('current')
tmnxSyncIfTimingRef1Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 7), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1Qualified.setStatus('current')
tmnxSyncIfTimingRef1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 8), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1Alarm.setStatus('current')
tmnxSyncIfTimingRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 9), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2SrcPort.setStatus('current')
tmnxSyncIfTimingRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 10), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2AdminStatus.setStatus('current')
tmnxSyncIfTimingRef2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2InUse.setStatus('current')
tmnxSyncIfTimingRef2Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 12), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2Qualified.setStatus('current')
tmnxSyncIfTimingRef2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 13), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2Alarm.setStatus('current')
tmnxSyncIfTimingFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 14), Integer32()).setUnits('parts-per-million').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingFreqOffset.setStatus('current')
tmnxSyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-present", 1), ("master-freerun", 2), ("master-holdover", 3), ("master-locked", 4), ("slave", 5), ("acquiring", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingStatus.setStatus('current')
tmnxSyncIfTimingRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 16), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder3.setStatus('current')
tmnxSyncIfTimingBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 17), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSIfType.setStatus('current')
tmnxSyncIfTimingBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 18), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSAdminStatus.setStatus('current')
tmnxSyncIfTimingBITSInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSInUse.setStatus('current')
tmnxSyncIfTimingBITSQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 20), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSQualified.setStatus('current')
tmnxSyncIfTimingBITSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 21), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSAlarm.setStatus('current')
tmnxSyncIfTimingRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 22), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1SrcHw.setStatus('current')
tmnxSyncIfTimingRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 23), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1BITSIfType.setStatus('current')
tmnxSyncIfTimingRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 24), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2SrcHw.setStatus('current')
tmnxSyncIfTimingRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 25), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2BITSIfType.setStatus('current')
tmnxSyncIfTimingBITSOutAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 26), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutAdmStatus.setStatus('current')
tmnxSyncIfTimingBITSOutLineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lengthNotApplicable", 0), ("length0To110", 1), ("length110To220", 2), ("length220To330", 3), ("length330To440", 4), ("length440To550", 5), ("length550To660", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutLineLen.setStatus('current')
tmnxSyncIfTimingRef1CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 28), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1CfgQltyLevel.setStatus('current')
tmnxSyncIfTimingRef1RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 29), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1RxQltyLevel.setStatus('current')
tmnxSyncIfTimingRef2CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 30), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2CfgQltyLevel.setStatus('current')
tmnxSyncIfTimingRef2RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 31), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2RxQltyLevel.setStatus('current')
tmnxSyncIfTimingBITSCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 32), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSCfgQltyLevel.setStatus('current')
tmnxSyncIfTimingBITSRxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 33), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSRxQltyLevel.setStatus('current')
tmnxSyncIfTimingBITS2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2InUse.setStatus('current')
tmnxSyncIfTimingBITS2Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 35), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2Qualified.setStatus('current')
tmnxSyncIfTimingBITS2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 36), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2Alarm.setStatus('current')
tmnxSyncIfTimingBITS2RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 37), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2RxQltyLevel.setStatus('current')
tmnxSyncIfTimingRef1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 38), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1State.setStatus('current')
tmnxSyncIfTimingRef2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 39), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2State.setStatus('current')
tmnxSyncIfTimingBITSState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 40), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSState.setStatus('current')
tmnxSyncIfTimingBITS2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 41), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2State.setStatus('current')
tmnxSyncIfTimingRef1NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1NationalUse.setStatus('current')
tmnxSyncIfTimingRef2NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2NationalUse.setStatus('current')
tmnxSyncIfTimingBITSNationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSNationalUse.setStatus('current')
tmnxSyncIfTimingQLSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 45), TmnxEnabledDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingQLSelection.setStatus('current')
tmnxSyncIfTimingOtherCPMInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 46), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMInUse.setStatus('current')
tmnxSyncIfTimingOtherCPMQual = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 47), TmnxSETSRefQualified().clone('not-qualified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMQual.setStatus('current')
tmnxSyncIfTimingOtherCPMAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 48), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMAlarm.setStatus('current')
tmnxSyncIfTimingOtherCPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 49), TmnxRefInState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMState.setStatus('current')
tmnxSyncIfTimingBITSOutRefSel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 50), TmnxSETSRefSource().clone('noReference')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutRefSel.setStatus('current')
tmnxSyncIfTimingBITSTxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 51), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSTxQltyLevel.setStatus('current')
tmnxSyncIfTimingBITS2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 52), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2AdminStatus.setStatus('current')
tmnxSyncIfTimingSystemQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 53), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingSystemQltyLevel.setStatus('current')
tmnxSyncIfTimingRefOrder4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 54), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder4.setStatus('current')
tmnxSyncIfTimingPTPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 55), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPAdminStatus.setStatus('current')
tmnxSyncIfTimingPTPInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPInUse.setStatus('current')
tmnxSyncIfTimingPTPQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 57), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPQualified.setStatus('current')
tmnxSyncIfTimingPTPAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 58), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPAlarm.setStatus('current')
tmnxSyncIfTimingPTPCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 59), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPCfgQltyLevel.setStatus('current')
tmnxSyncIfTimingPTPRxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 60), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPRxQltyLevel.setStatus('current')
tmnxSyncIfTimingPTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 61), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPState.setStatus('current')
tmnxSyncIfTimingBITSOutSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 62), TmnxBITSOutSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutSource.setStatus('current')
tmnxSyncIfTimingRefOrder5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 70), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder5.setStatus('current')
tmnxSyncIfTimingBITS2InAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 71), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2InAdminStatus.setStatus('current')
tmnxSyncIfTimingBITS2OutAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 72), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2OutAdminStatus.setStatus('current')
tmnxSyncIfTimingBITS2TxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 73), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2TxQltyLevel.setStatus('current')
tmnxChassisAdminCtrlObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1))
tmnxChassisAdminValueObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2))
tSyncIfTimingAdmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1), )
if mibBuilder.loadTexts: tSyncIfTimingAdmTable.setStatus('current')
tSyncIfTimingAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
if mibBuilder.loadTexts: tSyncIfTimingAdmEntry.setStatus('current')
tSyncIfTimingAdmRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRevert.setStatus('current')
tSyncIfTimingAdmRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 2), TmnxSETSRefSource().clone('bits1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder1.setStatus('current')
tSyncIfTimingAdmRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 3), TmnxSETSRefSource().clone('reference1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder2.setStatus('current')
tSyncIfTimingAdmRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 4), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1SrcPort.setStatus('current')
tSyncIfTimingAdmRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 5), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1AdminStatus.setStatus('current')
tSyncIfTimingAdmRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 6), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2SrcPort.setStatus('current')
tSyncIfTimingAdmRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 7), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2AdminStatus.setStatus('current')
tSyncIfTimingAdmChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmChanged.setStatus('current')
tSyncIfTimingAdmRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 9), TmnxSETSRefSource().clone('reference2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder3.setStatus('current')
tSyncIfTimingAdmBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 10), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSIfType.setStatus('current')
tSyncIfTimingAdmBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 11), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSAdminStatus.setStatus('current')
tSyncIfTimingAdmRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 12), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1SrcHw.setStatus('current')
tSyncIfTimingAdmRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 13), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1BITSIfType.setStatus('current')
tSyncIfTimingAdmRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 14), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2SrcHw.setStatus('current')
tSyncIfTimingAdmRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 15), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2BITSIfType.setStatus('current')
tSyncIfTimingAdmBITSOutAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 16), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutAdmStatus.setStatus('current')
tSyncIfTimingAdmBITSOutLineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lengthNotApplicable", 0), ("length0To110", 1), ("length110To220", 2), ("length220To330", 3), ("length330To440", 4), ("length440To550", 5), ("length550To660", 6))).clone('lengthNotApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutLineLen.setStatus('current')
tSyncIfTimingAdmRef1CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 18), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1CfgQltyLevel.setStatus('current')
tSyncIfTimingAdmRef2CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 19), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2CfgQltyLevel.setStatus('current')
tSyncIfTimingAdmBITSCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 20), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSCfgQltyLevel.setStatus('current')
tSyncIfTimingAdmRef1NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1NationalUse.setStatus('current')
tSyncIfTimingAdmRef2NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2NationalUse.setStatus('current')
tSyncIfTimingAdmBITSNationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSNationalUse.setStatus('current')
tSyncIfTimingAdmQLSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 24), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmQLSelection.setStatus('current')
tSyncIfTimingAdmRefOrder4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 25), TmnxSETSRefSource().clone('ptp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder4.setStatus('current')
tSyncIfTimingAdmPTPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 26), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmPTPAdminStatus.setStatus('current')
tSyncIfTimingAdmPTPCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 27), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmPTPCfgQltyLevel.setStatus('current')
tSyncIfTimingAdmBITSOutSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 28), TmnxBITSOutSource().clone('internalClock')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutSource.setStatus('current')
tSyncIfTimingAdmRefOrder5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 50), TmnxSETSRefSource().clone('bits2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder5.setStatus('current')
tSyncIfTimingAdmBITS2InAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 51), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITS2InAdminStatus.setStatus('current')
tSyncIfTimingAdmBITS2OutAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 52), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITS2OutAdminStatus.setStatus('current')
tmnxChassisAdminOwner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminOwner.setStatus('current')
tmnxChassisAdminControlApply = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("initialize", 2), ("commit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminControlApply.setStatus('current')
tmnxChassisAdminLastSetTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 3), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisAdminLastSetTimer.setStatus('current')
tmnxChassisAdminLastSetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 4), TimeInterval().clone(180000)).setUnits('centiseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminLastSetTimeout.setStatus('current')
tmnxCcagTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12), )
if mibBuilder.loadTexts: tmnxCcagTable.setStatus('current')
tmnxCcagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"))
if mibBuilder.loadTexts: tmnxCcagEntry.setStatus('current')
tmnxCcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 1), TmnxCcagId())
if mibBuilder.loadTexts: tmnxCcagId.setStatus('current')
tmnxCcagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagRowStatus.setStatus('current')
tmnxCcagLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagLastChanged.setStatus('current')
tmnxCcagDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 4), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagDescription.setStatus('current')
tmnxCcagAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 5), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagAdminStatus.setStatus('current')
tmnxCcagOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagOperStatus.setStatus('current')
tmnxCcagCcaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 7), TmnxCcagRate().clone(-1)).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagCcaRate.setStatus('current')
tmnxCcagAccessAdaptQos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("distribute", 2))).clone('distribute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagAccessAdaptQos.setStatus('current')
tmnxCcagPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13), )
if mibBuilder.loadTexts: tmnxCcagPathTable.setStatus('current')
tmnxCcagPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"))
if mibBuilder.loadTexts: tmnxCcagPathEntry.setStatus('current')
tmnxCcagPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2))))
if mibBuilder.loadTexts: tmnxCcagPathId.setStatus('current')
tmnxCcagPathLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathLastChanged.setStatus('current')
tmnxCcagPathRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 3), TmnxCcagRate().clone(-1)).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathRate.setStatus('current')
tmnxCcagPathRateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 4), TmnxCcagRateOption().clone('aggregate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathRateOption.setStatus('current')
tmnxCcagPathWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathWeight.setStatus('current')
tmnxCcagPathCcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14), )
if mibBuilder.loadTexts: tmnxCcagPathCcTable.setStatus('current')
tmnxCcagPathCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcType"))
if mibBuilder.loadTexts: tmnxCcagPathCcEntry.setStatus('current')
tmnxCcagPathCcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sapsap", 1), ("sapnet", 2), ("netsap", 3))))
if mibBuilder.loadTexts: tmnxCcagPathCcType.setStatus('current')
tmnxCcagPathCcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcLastChanged.setStatus('current')
tmnxCcagPathCcEgrPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcEgrPoolResvCbs.setStatus('current')
tmnxCcagPathCcEgrPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 4), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcEgrPoolSlpPlcy.setStatus('current')
tmnxCcagPathCcIngPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcIngPoolResvCbs.setStatus('current')
tmnxCcagPathCcIngPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 6), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcIngPoolSlpPlcy.setStatus('current')
tmnxCcagPathCcAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcAcctPolicyId.setStatus('current')
tmnxCcagPathCcCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcCollectStats.setStatus('current')
tmnxCcagPathCcQueuePlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 9), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcQueuePlcy.setStatus('current')
tmnxCcagPathCcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcMac.setStatus('current')
tmnxCcagPathCcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcMtu.setStatus('current')
tmnxCcagPathCcUserAssignedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcUserAssignedMac.setStatus('current')
tmnxCcagPathCcHwMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcHwMac.setStatus('current')
tmnxMcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15), )
if mibBuilder.loadTexts: tmnxMcmTable.setStatus('current')
tmnxMcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMcmSlotNum"))
if mibBuilder.loadTexts: tmnxMcmEntry.setStatus('current')
tmnxMcmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tmnxMcmSlotNum.setStatus('current')
tmnxMcmSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 2), TmnxMcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmSupportedTypes.setStatus('current')
tmnxMcmAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 3), TmnxMcmType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMcmAssignedType.setStatus('current')
tmnxMcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 4), TmnxMcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmEquippedType.setStatus('current')
tmnxMcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 5), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmHwIndex.setStatus('current')
tmnxMcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16), )
if mibBuilder.loadTexts: tmnxMcmTypeTable.setStatus('current')
tmnxMcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxMcmTypeIndex"))
if mibBuilder.loadTexts: tmnxMcmTypeEntry.setStatus('current')
tmnxMcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 1), TmnxMcmType())
if mibBuilder.loadTexts: tmnxMcmTypeIndex.setStatus('current')
tmnxMcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeName.setStatus('current')
tmnxMcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeDescription.setStatus('current')
tmnxMcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeStatus.setStatus('current')
tmnxIPsecIsaGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTableLastChanged.setStatus('current')
tmnxIPsecIsaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18), )
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTable.setStatus('current')
tmnxIPsecIsaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpId"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpEntry.setStatus('current')
tmnxIPsecIsaGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 1), TmnxTunnelGroupId())
if mibBuilder.loadTexts: tmnxIPsecIsaGrpId.setStatus('current')
tmnxIPsecIsaGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpRowStatus.setStatus('current')
tmnxIPsecIsaGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpLastChanged.setStatus('current')
tmnxIPsecIsaGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpDescription.setStatus('current')
tmnxIPsecIsaGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpAdminState.setStatus('current')
tmnxIPsecIsaGrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpOperState.setStatus('current')
tmnxIPsecIsaGrpIsaChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 7), TmnxChassisIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIsaChassis.setStatus('current')
tmnxIPsecIsaGrpPrimaryIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 8), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpPrimaryIsa.setStatus('current')
tmnxIPsecIsaGrpBackupIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 9), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpBackupIsa.setStatus('current')
tmnxIPsecIsaGrpActiveIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 10), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpActiveIsa.setStatus('current')
tmnxIPsecIsaGrpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTunnels.setStatus('current')
tmnxIPsecIsaGrpMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpMaxTunnels.setStatus('current')
tmnxIPsecIsaGrpTunnelReassembly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setUnits('milli-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTunnelReassembly.setStatus('current')
tmnxIPsecIsaGrpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 14), TmnxIpSecIsaOperFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpOperFlags.setStatus('current')
tmnxIPsecIsaGrpMultiActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpMultiActive.setStatus('current')
tmnxIPsecIsaGrpActiveMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpActiveMda.setStatus('current')
tmnxIPsecIsaGrpIpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIpTunnels.setStatus('current')
tmnxIPsecIsaGrpIpMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIpMaxTunnels.setStatus('current')
tmnxHsmdaMdaSchOvrTblLastChangd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrTblLastChangd.setStatus('obsolete')
tmnxHsmdaMdaSchOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20), )
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrTable.setStatus('obsolete')
tmnxHsmdaMdaSchOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrEntry.setStatus('obsolete')
tmnxHsmdaMdaSchOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrRowStatus.setStatus('obsolete')
tmnxHsmdaMdaSchOvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrLastChanged.setStatus('obsolete')
tmnxHsmdaMdaSchOvrMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 3), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrMaxRate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrGrp1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 4), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrGrp1Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrGrp2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 5), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrGrp2Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 6), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass1Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass1WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 7), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass1WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 8), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass2Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass2WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 9), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass2WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 10), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass3Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass3WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 11), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass3WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 12), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass4Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass4WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 13), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass4WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 14), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass5Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass5WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 15), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass5WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 16), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass6Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass6WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 17), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass6WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 18), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass7Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass7WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 19), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass7WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 20), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass8Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass8WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 21), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass8WtInGrp.setStatus('obsolete')
tmnxFPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21), )
if mibBuilder.loadTexts: tmnxFPTable.setStatus('current')
tmnxFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"))
if mibBuilder.loadTexts: tmnxFPEntry.setStatus('current')
tmnxFPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxFPNum.setStatus('current')
tmnxFPMcPathMgmtBwPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 2), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPMcPathMgmtBwPlcyName.setStatus('current')
tmnxFPMcPathMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 3), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPMcPathMgmtAdminState.setStatus('current')
tmnxFPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPLastChanged.setStatus('current')
tmnxFPHiBwMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastSource.setStatus('current')
tmnxFPHiBwMcastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastAlarm.setStatus('current')
tmnxFPHiBwMcastTapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPHiBwMcastTapCount.setStatus('current')
tmnxFPHiBwMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastGroup.setStatus('current')
tmnxFPWredBufAllocMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredBufAllocMin.setStatus('current')
tmnxFPWredBufAllocMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredBufAllocMax.setStatus('current')
tmnxFPWredResvCbsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredResvCbsMin.setStatus('current')
tmnxFPWredResvCbsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredResvCbsMax.setStatus('current')
tmnxFPWredSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 13), TNamedItemOrEmpty().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredSlopePolicy.setStatus('current')
tmnxFPWredAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 14), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredAdminState.setStatus('current')
tmnxFPHiBwMcastDefaultPathsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastDefaultPathsOnly.setStatus('current')
tmnxFPAccIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpTableLastChgd.setStatus('current')
tmnxFPAccIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23), )
if mibBuilder.loadTexts: tmnxFPAccIngQGrpTable.setStatus('current')
tmnxFPAccIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"))
if mibBuilder.loadTexts: tmnxFPAccIngQGrpEntry.setStatus('current')
tmnxFPAccIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxFPAccIngQGrpName.setStatus('current')
tmnxFPAccIngQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tmnxFPAccIngQGrpInstanceId.setStatus('current')
tmnxFPAccIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpRowStatus.setStatus('current')
tmnxFPAccIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpLastChgd.setStatus('current')
tmnxFPAccIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpAcctgPolId.setStatus('current')
tmnxFPAccIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpCollectStats.setStatus('current')
tmnxFPAccIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpDescr.setStatus('current')
tmnxFPAccIngQGrpPolicerPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPolicerPol.setStatus('current')
tmnxFPNetIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpTableLastChgd.setStatus('current')
tmnxFPNetIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25), )
if mibBuilder.loadTexts: tmnxFPNetIngQGrpTable.setStatus('current')
tmnxFPNetIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"))
if mibBuilder.loadTexts: tmnxFPNetIngQGrpEntry.setStatus('current')
tmnxFPNetIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxFPNetIngQGrpName.setStatus('current')
tmnxFPNetIngQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tmnxFPNetIngQGrpInstanceId.setStatus('current')
tmnxFPNetIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpRowStatus.setStatus('current')
tmnxFPNetIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpLastChgd.setStatus('current')
tmnxFPNetIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpAcctgPolId.setStatus('current')
tmnxFPNetIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpCollectStats.setStatus('current')
tmnxFPNetIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpDescr.setStatus('current')
tmnxFPNetIngQGrpPolicerPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPolicerPol.setStatus('current')
tmnxFPNetIngQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27), )
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatTable.setStatus('current')
tmnxFPNetIngQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPStatPolicerId"))
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatEntry.setStatus('current')
tmnxFPNetIngQGrpPStatPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatPolicerId.setStatus('current')
tmnxFPNetIngQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 2), TmnxIngPolicerStatMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatMode.setStatus('current')
tmnxFPNetIngQgPStOffHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioPkts.setStatus('current')
tmnxFPNetIngQgPStOffHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStOffHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioPkts.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStOffLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioPkts.setStatus('current')
tmnxFPNetIngQgPStOffLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStOffLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioPkts.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStOffHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioOcts.setStatus('current')
tmnxFPNetIngQgPStOffHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStOffHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioOcts.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStOffLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioOcts.setStatus('current')
tmnxFPNetIngQgPStOffLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStOffLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioOcts.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfPkts.setStatus('current')
tmnxFPNetIngQgPStFwdInProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfPktsL.setStatus('current')
tmnxFPNetIngQgPStFwdInProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfPktsH.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfPkts.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfPktsL.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfPktsH.setStatus('current')
tmnxFPNetIngQgPStFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfOcts.setStatus('current')
tmnxFPNetIngQgPStFwdInProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfOctsL.setStatus('current')
tmnxFPNetIngQgPStFwdInProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfOctsH.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfOcts.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfOctsL.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfOctsH.setStatus('current')
tmnxFPNetIngQgPStUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolPktsOff.setStatus('current')
tmnxFPNetIngQgPStUncolPktsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolPktsOffL.setStatus('current')
tmnxFPNetIngQgPStUncolPktsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolPktsOffH.setStatus('current')
tmnxFPNetIngQgPStUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolOctsOff.setStatus('current')
tmnxFPNetIngQgPStUncolOctsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolOctsOffL.setStatus('current')
tmnxFPNetIngQgPStUncolOctsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolOctsOffH.setStatus('current')
tmnxFPAccIngQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28), )
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatTable.setStatus('current')
tmnxFPAccIngQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPStatPolicerId"))
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatEntry.setStatus('current')
tmnxFPAccIngQGrpPStatPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatPolicerId.setStatus('current')
tmnxFPAccIngQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 2), TmnxIngPolicerStatMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatMode.setStatus('current')
tmnxFPAccIngQgPStOffHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioPkts.setStatus('current')
tmnxFPAccIngQgPStOffHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStOffHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioPkts.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStOffLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioPkts.setStatus('current')
tmnxFPAccIngQgPStOffLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStOffLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioPkts.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStOffHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioOcts.setStatus('current')
tmnxFPAccIngQgPStOffHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStOffHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioOcts.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStOffLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioOcts.setStatus('current')
tmnxFPAccIngQgPStOffLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStOffLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioOcts.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfPkts.setStatus('current')
tmnxFPAccIngQgPStFwdInProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfPktsL.setStatus('current')
tmnxFPAccIngQgPStFwdInProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfPktsH.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfPkts.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfPktsL.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfPktsH.setStatus('current')
tmnxFPAccIngQgPStFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfOcts.setStatus('current')
tmnxFPAccIngQgPStFwdInProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfOctsL.setStatus('current')
tmnxFPAccIngQgPStFwdInProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfOctsH.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfOcts.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfOctsL.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfOctsH.setStatus('current')
tmnxFPAccIngQgPStUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolPktsOff.setStatus('current')
tmnxFPAccIngQgPStUncolPktsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolPktsOffL.setStatus('current')
tmnxFPAccIngQgPStUncolPktsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolPktsOffH.setStatus('current')
tmnxFPAccIngQgPStUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolOctsOff.setStatus('current')
tmnxFPAccIngQgPStUncolOctsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolOctsOffL.setStatus('current')
tmnxFPAccIngQgPStUncolOctsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolOctsOffH.setStatus('current')
tFPAccIngQGrpPlcrOvrTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrTblLstChgd.setStatus('current')
tFPAccIngQGrpPlcrOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30), )
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrTable.setStatus('current')
tFPAccIngQGrpPlcrOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrPolicerId"))
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrEntry.setStatus('current')
tFPAccIngQGrpPlcrOvrPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrPolicerId.setStatus('current')
tFPAccIngQGrpPlcrOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrRowStatus.setStatus('current')
tFPAccIngQGrpPlcrOvrLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrLastChgd.setStatus('current')
tFPAccIngQGrpPlcrOvrAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 4), THPolPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrAdminPIR.setStatus('current')
tFPAccIngQGrpPlcrOvrAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 5), THPolCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrAdminCIR.setStatus('current')
tFPAccIngQGrpPlcrOvrStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 6), TmnxIngPolicerStatModeOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrStatMode.setStatus('current')
tFPAccIngQGrpPlcrOvrMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 7), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrMBS.setStatus('current')
tFPAccIngQGrpPlcrOvrCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 8), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrCBS.setStatus('current')
tFPAccIngQGrpPlcrOvrPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 9), TPerPacketOffsetOvr().clone(-128)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrPktOffset.setStatus('current')
tFPAccIngQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31), )
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatTable.setStatus('current')
tFPAccIngQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatName"))
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatEntry.setStatus('current')
tFPAccIngQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatName.setStatus('current')
tFPAccIngQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdPkts.setStatus('current')
tFPAccIngQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdPktsL.setStatus('current')
tFPAccIngQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdPktsH.setStatus('current')
tFPAccIngQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdOcts.setStatus('current')
tFPAccIngQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdOctsL.setStatus('current')
tFPAccIngQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdOctsH.setStatus('current')
tFPNetIngQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32), )
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatTable.setStatus('current')
tFPNetIngQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatName"))
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatEntry.setStatus('current')
tFPNetIngQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatName.setStatus('current')
tFPNetIngQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdPkts.setStatus('current')
tFPNetIngQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdPktsL.setStatus('current')
tFPNetIngQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdPktsH.setStatus('current')
tFPNetIngQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdOcts.setStatus('current')
tFPNetIngQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdOctsL.setStatus('current')
tFPNetIngQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdOctsH.setStatus('current')
tmnxVirtualSchedulerAdjTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33), )
if mibBuilder.loadTexts: tmnxVirtualSchedulerAdjTable.setStatus('current')
tmnxVirtualSchedulerAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1), )
tmnxCardEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxVirtualSchedulerAdjEntry"))
tmnxVirtualSchedulerAdjEntry.setIndexNames(*tmnxCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxVirtualSchedulerAdjEntry.setStatus('current')
tmnxCardRateCalcFastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardRateCalcFastQueue.setStatus('current')
tmnxCardRateCalcSlowQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardRateCalcSlowQueue.setStatus('current')
tmnxCardSchedRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardSchedRun.setStatus('current')
tmnxCardTaskScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardTaskScheduling.setStatus('current')
tmnxCardSlowQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000)).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardSlowQueueThresh.setStatus('current')
tmnxFabricTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26), )
if mibBuilder.loadTexts: tmnxFabricTypeTable.setStatus('current')
tmnxFabricTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxFabricTypeIndex"))
if mibBuilder.loadTexts: tmnxFabricTypeEntry.setStatus('current')
tmnxFabricTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 1), TmnxFabricType())
if mibBuilder.loadTexts: tmnxFabricTypeIndex.setStatus('current')
tmnxFabricTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricTypeName.setStatus('current')
tmnxFabricTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricTypeDescription.setStatus('current')
tmnxFabricTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricTypeStatus.setStatus('current')
tmnxEqNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 1), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxEqNotificationRow.setStatus('current')
tmnxEqTypeNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 2), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxEqTypeNotificationRow.setStatus('current')
tmnxChassisNotifyChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 3), TmnxChassisIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyChassisId.setStatus('current')
tmnxChassisNotifyHwIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 4), TmnxHwIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyHwIndex.setStatus('current')
tmnxRedSecondaryCPMStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("fail", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxRedSecondaryCPMStatus.setStatus('current')
tmnxChassisNotifyOID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 6), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyOID.setStatus('current')
tmnxSyncIfTimingNotifyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 0), ("los", 1), ("oof", 2), ("oopir", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSyncIfTimingNotifyAlarm.setStatus('current')
tmnxChassisNotifyMismatchedVer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyMismatchedVer.setStatus('current')
tmnxChassisNotifySoftwareLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifySoftwareLocation.setStatus('current')
tmnxChassisNotifyCardFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardFailureReason.setStatus('current')
tmnxChassisNotifyCardName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardName.setStatus('current')
tmnxChassisNotifyCardSyncFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardSyncFile.setStatus('current')
tmnxCardComplexNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardComplexNumber.setStatus('current')
tmnxCardFwdDirection = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardFwdDirection.setStatus('current')
tmnxCardSoftResetState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initiated", 1), ("aborted", 2), ("complete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardSoftResetState.setStatus('current')
tmnxMdaNotifyType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 16), TmnxMdaType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxMdaNotifyType.setStatus('current')
tmnxCardSrcSlotBitmap = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 17), TmnxCardSlotBitMap()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardSrcSlotBitmap.setStatus('current')
tmnxHwConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxHwConfigChange.setStatus('obsolete')
tmnxEnvTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"))
if mibBuilder.loadTexts: tmnxEnvTempTooHigh.setStatus('current')
tmnxEqPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyFailure.setStatus('current')
tmnxEqPowerSupplyInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyInserted.setStatus('current')
tmnxEqPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyRemoved.setStatus('current')
tmnxEqFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"))
if mibBuilder.loadTexts: tmnxEqFanFailure.setStatus('current')
tmnxEqCardFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"))
if mibBuilder.loadTexts: tmnxEqCardFailure.setStatus('current')
tmnxEqCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"))
if mibBuilder.loadTexts: tmnxEqCardInserted.setStatus('current')
tmnxEqCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"))
if mibBuilder.loadTexts: tmnxEqCardRemoved.setStatus('current')
tmnxEqWrongCard = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqWrongCard.setStatus('current')
tmnxEqCpuFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqCpuFailure.setStatus('obsolete')
tmnxEqMemoryFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqMemoryFailure.setStatus('obsolete')
tmnxEqBackdoorBusFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"))
if mibBuilder.loadTexts: tmnxEqBackdoorBusFailure.setStatus('obsolete')
tmnxPeSoftwareError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeSoftwareError.setStatus('obsolete')
tmnxPeSoftwareAbnormalHalt = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeSoftwareAbnormalHalt.setStatus('obsolete')
tmnxPeSoftwareVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeSoftwareVersionMismatch.setStatus('current')
tmnxPeOutOfMemory = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeOutOfMemory.setStatus('obsolete')
tmnxPeConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeConfigurationError.setStatus('obsolete')
tmnxPeStorageProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 19)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeStorageProblem.setStatus('obsolete')
tmnxPeCpuCyclesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 20)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeCpuCyclesExceeded.setStatus('obsolete')
tmnxRedPrimaryCPMFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 21)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedPrimaryCPMFail.setStatus('current')
tmnxRedSecondaryCPMStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 22)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"))
if mibBuilder.loadTexts: tmnxRedSecondaryCPMStatusChange.setStatus('obsolete')
tmnxRedRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 23)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedRestoreSuccess.setStatus('obsolete')
tmnxRedRestoreFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 24)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedRestoreFail.setStatus('obsolete')
tmnxChassisNotificationClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 25)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"))
if mibBuilder.loadTexts: tmnxChassisNotificationClear.setStatus('current')
tmnxEqSyncIfTimingHoldover = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 26)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingHoldover.setStatus('current')
tmnxEqSyncIfTimingHoldoverClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 27)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingHoldoverClear.setStatus('current')
tmnxEqSyncIfTimingRef1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 28)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1Alarm.setStatus('current')
tmnxEqSyncIfTimingRef1AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 29)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1AlarmClear.setStatus('current')
tmnxEqSyncIfTimingRef2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 30)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2Alarm.setStatus('current')
tmnxEqSyncIfTimingRef2AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 31)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2AlarmClear.setStatus('current')
tmnxEqFlashDataLoss = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 32)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"))
if mibBuilder.loadTexts: tmnxEqFlashDataLoss.setStatus('current')
tmnxEqFlashDiskFull = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 33)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"))
if mibBuilder.loadTexts: tmnxEqFlashDiskFull.setStatus('current')
tmnxPeSoftwareLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 34)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"))
if mibBuilder.loadTexts: tmnxPeSoftwareLoadFailed.setStatus('current')
tmnxPeBootloaderVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 35)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeBootloaderVersionMismatch.setStatus('current')
tmnxPeBootromVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 36)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeBootromVersionMismatch.setStatus('current')
tmnxPeFPGAVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 37)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeFPGAVersionMismatch.setStatus('current')
tmnxEqSyncIfTimingBITSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 38)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSAlarm.setStatus('current')
tmnxEqSyncIfTimingBITSAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 39)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSAlarmClear.setStatus('current')
tmnxEqCardFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 40)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqCardFirmwareUpgraded.setStatus('current')
tmnxChassisUpgradeInProgress = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 41)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisUpgradeInProgress.setStatus('current')
tmnxChassisUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 42)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisUpgradeComplete.setStatus('current')
tmnxChassisHiBwMcastAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 43)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisHiBwMcastAlarm.setStatus('current')
tmnxEqMdaCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 44)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqMdaCfgNotCompatible.setStatus('current')
tmnxCpmCardSyncFileNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 45)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSyncFile"))
if mibBuilder.loadTexts: tmnxCpmCardSyncFileNotPresent.setStatus('current')
tmnxEqMdaXplError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 46)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAXplFailedCount"))
if mibBuilder.loadTexts: tmnxEqMdaXplError.setStatus('current')
tmnxEqCardPChipError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 47)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFwdDirection"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSrcSlotBitmap"))
if mibBuilder.loadTexts: tmnxEqCardPChipError.setStatus('current')
tmnxEqCardSoftResetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 48)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSoftResetState"))
if mibBuilder.loadTexts: tmnxEqCardSoftResetAlarm.setStatus('current')
tmnxEqMdaSyncENotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 49)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqMdaSyncENotCompatible.setStatus('current')
tmnxIPsecIsaGrpActiveIsaChgd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 50)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpPrimaryIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpBackupIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpActiveIsaChgd.setStatus('current')
tmnxEqCardPChipMemoryEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 51)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardPChipMemoryEvent.setStatus('current')
tmnxIPsecIsaGrpUnableToSwitch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 52)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpUnableToSwitch.setStatus('current')
tmnxIPsecIsaGrpTnlLowWMark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 53)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTnlLowWMark.setStatus('current')
tmnxIPsecIsaGrpTnlHighWMark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 54)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTnlHighWMark.setStatus('current')
tmnxIPsecIsaGrpTnlMax = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 55)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTnlMax.setStatus('current')
tmnxEqSyncIfTimingRef1Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 56)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1RxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1Quality.setStatus('current')
tmnxEqSyncIfTimingRef2Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 57)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2RxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2Quality.setStatus('current')
tmnxEqSyncIfTimingBITSQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 58)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSRxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSQuality.setStatus('current')
tmnxEqSyncIfTimingBITS2Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 59)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2RxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITS2Quality.setStatus('current')
tmnxEqSyncIfTimingRefSwitch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 60)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPInUse"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRefSwitch.setStatus('current')
tmnxEqSyncIfTimingBITS2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 61)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITS2Alarm.setStatus('current')
tmnxEqSyncIfTimingBITS2AlarmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 62)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITS2AlarmClr.setStatus('current')
tmnxEqSyncIfTimingBITSOutRefChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 63)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutRefSel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSOutRefChg.setStatus('current')
tmnxEqCardPChipCamEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 64)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardPChipCamEvent.setStatus('current')
tmnxEqSyncIfTimingSystemQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 65)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingSystemQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingSystemQuality.setStatus('current')
tmnxEqHwEnhancedCapability = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 66)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqHwEnhancedCapability.setStatus('current')
tmnxEqSyncIfTimingPTPQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 67)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPRxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingPTPQuality.setStatus('current')
tmnxEqSyncIfTimingPTPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 68)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingPTPAlarm.setStatus('current')
tmnxEqSyncIfTimingPTPAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 69)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingPTPAlarmClear.setStatus('current')
tmnxPeFirmwareVersionWarning = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 70)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFirmwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeFirmwareVersionWarning.setStatus('current')
tmnxMDAIsaTunnelGroupChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 71)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroup"))
if mibBuilder.loadTexts: tmnxMDAIsaTunnelGroupChange.setStatus('current')
tmnxChassisCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1))
tmnxChassisGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2))
tmnxChassisV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV4v0Compliance = tmnxChassisV4v0Compliance.setStatus('obsolete')
tmnxChassisV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0Compliance = tmnxChassisV5v0Compliance.setStatus('obsolete')
tmnxChassis7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7750V6v0Compliance = tmnxChassis7750V6v0Compliance.setStatus('obsolete')
tmnxChassis7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7450V6v0Compliance = tmnxChassis7450V6v0Compliance.setStatus('obsolete')
tmnxChassis7750V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7750V6v1Compliance = tmnxChassis7750V6v1Compliance.setStatus('obsolete')
tmnxChassis7450V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7450V6v1Compliance = tmnxChassis7450V6v1Compliance.setStatus('obsolete')
tmnxChassis7750V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7750V7v0Compliance = tmnxChassis7750V7v0Compliance.setStatus('obsolete')
tmnxChassis7450V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7450V7v0Compliance = tmnxChassis7450V7v0Compliance.setStatus('obsolete')
tmnxChassis7x50V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7x50V8v0Compliance = tmnxChassis7x50V8v0Compliance.setStatus('obsolete')
tmnxChassisV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV9v0Compliance = tmnxChassisV9v0Compliance.setStatus('obsolete')
tmnxChassisV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV10v0Compliance = tmnxChassisV10v0Compliance.setStatus('current')
tmnxChassisComp7710 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5))
tmnxChassisComp7710V3v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V3v0 = tmnxChassisComp7710V3v0.setStatus('obsolete')
tmnxChassisComp7710V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V5v0 = tmnxChassisComp7710V5v0.setStatus('obsolete')
tmnxChassisComp7710V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V6v0 = tmnxChassisComp7710V6v0.setStatus('obsolete')
tmnxChassisComp7710V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V6v1 = tmnxChassisComp7710V6v1.setStatus('obsolete')
tmnxChassisComp7710V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V7v0 = tmnxChassisComp7710V7v0.setStatus('obsolete')
tmnxChassisComp7710V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V8v0 = tmnxChassisComp7710V8v0.setStatus('obsolete')
tmnxChassisNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqNotificationRow"), ("TIMETRA-CHASSIS-MIB", "tmnxEqTypeNotificationRow"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsGroup = tmnxChassisNotifyObjsGroup.setStatus('current')
tmnxChassisNotifyObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwConfigChange"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCpuFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMemoryFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqBackdoorBusFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareError"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareAbnormalHalt"), ("TIMETRA-CHASSIS-MIB", "tmnxPeOutOfMemory"), ("TIMETRA-CHASSIS-MIB", "tmnxPeConfigurationError"), ("TIMETRA-CHASSIS-MIB", "tmnxPeStorageProblem"), ("TIMETRA-CHASSIS-MIB", "tmnxPeCpuCyclesExceeded"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatusChange"), ("TIMETRA-CHASSIS-MIB", "tmnxRedRestoreSuccess"), ("TIMETRA-CHASSIS-MIB", "tmnxRedRestoreFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObsoleteGroup = tmnxChassisNotifyObsoleteGroup.setStatus('current')
tmnxChassisV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV3v0Group = tmnxChassisV3v0Group.setStatus('obsolete')
tmnxMDAV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV3v0Group = tmnxMDAV3v0Group.setStatus('obsolete')
tmnxChassisObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwSwState"), ("TIMETRA-CHASSIS-MIB", "tmnxCardAllowedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardAllowedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAllowedTypes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisObsoleteGroup = tmnxChassisObsoleteGroup.setStatus('current')
tmnxCardV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCardAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCardClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNumMdaSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNumMdas"), ("TIMETRA-CHASSIS-MIB", "tmnxCardReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCardMemorySize"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastModified"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigBootedVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexBootedVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastModified"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRedundant"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardNumCpus"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCpuType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardMemorySize"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSwitchToRedundantCard"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRereadBootOptions"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBooted"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBootedHeader"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexFileLastBootedHeader"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashFirmwareRevision"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashModelNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashCapacity"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashUsed"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRevert"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder1"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder2"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcPort"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcPort"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingFreqOffset"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder3"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSIfType"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSQualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRevert"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder1"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder2"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcPort"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcPort"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmChanged"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder3"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminOwner"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminControlApply"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimer"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimeout"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2OutAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV3v0Group = tmnxCardV3v0Group.setStatus('current')
tmnxMDAV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV4v0Group = tmnxMDAV4v0Group.setStatus('obsolete')
tmnxChassisNotificationV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV4v0Group = tmnxChassisNotificationV4v0Group.setStatus('obsolete')
tmnx7710HwV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisOverTempState"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardMasterSlaveRefState"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710HwV3v0Group = tmnx7710HwV3v0Group.setStatus('current')
tmnxChassisV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0Group = tmnxChassisV5v0Group.setStatus('current')
tmnxChassisV5v0ObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0ObsoleteGroup = tmnxChassisV5v0ObsoleteGroup.setStatus('current')
tmnx77x0CESMDAV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAClockMode"), ("TIMETRA-CHASSIS-MIB", "tmnxMDADiffTimestampFreq"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngNamedPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrNamedPoolPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx77x0CESMDAV6v0Group = tmnx77x0CESMDAV6v0Group.setStatus('current')
tmnxIPsecIsaGrpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 19)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTableLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIsaChassis"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpPrimaryIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpBackupIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIPsecIsaGrpV6v0Group = tmnxIPsecIsaGrpV6v0Group.setStatus('current')
tmnxChassisNotificationV3v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 20)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV3v0Group = tmnxChassisNotificationV3v0Group.setStatus('obsolete')
tmnxChassisNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 21)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV6v0Group = tmnxChassisNotificationV6v0Group.setStatus('obsolete')
tmnx7710SETSRefSrcHwV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 22)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcHw"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcHw"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcHw"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcHw"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2BITSIfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710SETSRefSrcHwV6v0Group = tmnx7710SETSRefSrcHwV6v0Group.setStatus('current')
tmnxChassisHsmdaV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 23)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaSchedPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrTblLastChangd"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaPoolPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHsmdaV6v0Group = tmnxChassisHsmdaV6v0Group.setStatus('obsolete')
tmnxMDAMcPathMgmtV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 24)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBwPlcyName"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBlkHoleInUseBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAMcPathMgmtV6v0Group = tmnxMDAMcPathMgmtV6v0Group.setStatus('current')
tmnxCardV6v0NamedPoolPlcyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 25)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV6v0NamedPoolPlcyGroup = tmnxCardV6v0NamedPoolPlcyGroup.setStatus('current')
tmnxChassisNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 26)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSyncFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV6v0Group = tmnxChassisNotifyObjsV6v0Group.setStatus('current')
tmnxChassisV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 27)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyPemType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSoftReset"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLastBootupReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV6v1Group = tmnxChassisV6v1Group.setStatus('current')
tmnxFPMcPathMgmtV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 28)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtBwPlcyName"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxFPLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastDefaultPathsOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPMcPathMgmtV6v1Group = tmnxFPMcPathMgmtV6v1Group.setStatus('current')
tmnxMDAV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 29)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASynchronousEthernet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV6v1Group = tmnxMDAV6v1Group.setStatus('current')
tmnxMDACcagV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 30)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDACcagV6v1Group = tmnxMDACcagV6v1Group.setStatus('current')
tmnxMdaXplV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 31)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAXplErrorTime"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAXplFailedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaXplV5v0Group = tmnxMdaXplV5v0Group.setStatus('current')
tmnxChassisNotifyObjsV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 32)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFwdDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV5v0Group = tmnxChassisNotifyObjsV5v0Group.setStatus('current')
tmnxChassisNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 33)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV5v0Group = tmnxChassisNotificationV5v0Group.setStatus('obsolete')
tmnxChassisNotificationV6v1Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 34)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardSoftResetAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipCamEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV6v1Group = tmnxChassisNotificationV6v1Group.setStatus('obsolete')
tmnxChassisNotifyObjsV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 35)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardSoftResetState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV6v1Group = tmnxChassisNotifyObjsV6v1Group.setStatus('current')
tmnxChassisNotificationV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 36)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardSoftResetAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaSyncENotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsaChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpUnableToSwitch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipCamEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqHwEnhancedCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV7v0Group = tmnxChassisNotificationV7v0Group.setStatus('current')
tmnxChassisUserModV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 37)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigUserLastModified"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisUserModV7v0Group = tmnxChassisUserModV7v0Group.setStatus('current')
tmnxCardPchipV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 38)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccurTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardPchipV5v0Group = tmnxCardPchipV5v0Group.setStatus('current')
tmnxFPWredV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 39)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPWredBufAllocMin"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredBufAllocMax"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredResvCbsMin"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredResvCbsMax"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredSlopePolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPWredV7v0Group = tmnxFPWredV7v0Group.setStatus('current')
tmnxChassisV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 40)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisFanRevision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV7v0Group = tmnxChassisV7v0Group.setStatus('current')
tmnxIPsecV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 41)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIPsecV7v0Group = tmnxIPsecV7v0Group.setStatus('current')
tmnxIPsecNotifV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 42)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlLowWMark"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlHighWMark"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIPsecNotifV7v0Group = tmnxIPsecNotifV7v0Group.setStatus('current')
tmnxSyncV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 43)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncV6v0Group = tmnxSyncV6v0Group.setStatus('current')
tmnxSyncIfTimingV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 44)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutAdmStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutLineLen"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSRxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1NationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2NationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSNationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingQLSelection"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMQual"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMState"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutRefSel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSTxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingSystemQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutAdmStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutLineLen"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1NationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2NationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSNationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmQLSelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingV8v0Group = tmnxSyncIfTimingV8v0Group.setStatus('current')
tmnxSyncIfTimingNotifV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 45)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSQuality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRefSwitch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2AlarmClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSOutRefChg"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingSystemQuality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingNotifV8v0Group = tmnxSyncIfTimingNotifV8v0Group.setStatus('current')
tmnxChassisV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 46)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwEquippedPlatform"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRedForcedSingleSfm"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV8v0Group = tmnxChassisV8v0Group.setStatus('current')
tmnxChassisMixedModeIomV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 47)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomUpgrList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisMixedModeIomV8v0Group = tmnxChassisMixedModeIomV8v0Group.setStatus('current')
tmnxCardCamErrorV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 48)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxCAMErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxCAMErrOccurTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardCamErrorV6v1Group = tmnxCardCamErrorV6v1Group.setStatus('current')
tmnxChassisV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 49)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardLastBootupReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV6v0Group = tmnxChassisV6v0Group.setStatus('obsolete')
tmnxCardV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 50)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardFailOnError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV7v0Group = tmnxCardV7v0Group.setStatus('current')
tmnxAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 51)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAAtmMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmGroup = tmnxAtmGroup.setStatus('current')
tmnxChassisHwV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 52)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwMfgAssemblyNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwV6v1Group = tmnxChassisHwV6v1Group.setStatus('current')
tmnxChassisHwV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 53)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardOscillatorType"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFirmwareCodeVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwV9v0Group = tmnxChassisHwV9v0Group.setStatus('current')
tmnxSyncIfTimingV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 54)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder4"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPQualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPRxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPState"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutSource"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder4"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmPTPAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmPTPCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutSource"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder5"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder5"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingV9v0Group = tmnxSyncIfTimingV9v0Group.setStatus('current')
tmnxSyncIfTimingNotifyV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 55)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPQuality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingNotifyV9v0Group = tmnxSyncIfTimingNotifyV9v0Group.setStatus('current')
tmnxChassisNotifyObjsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 56)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV9v0Group = tmnxChassisNotifyObjsV9v0Group.setStatus('current')
tmnxMDAV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 57)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshLoBrstMult"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshHiBrstInc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV9v0Group = tmnxMDAV9v0Group.setStatus('current')
tmnxCardPchipV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 58)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsSrcSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsSrcSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardPchipV8v0Group = tmnxCardPchipV8v0Group.setStatus('current')
tmnxChassisNotifyObjsV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 59)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardSrcSlotBitmap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV8v0Group = tmnxChassisNotifyObjsV8v0Group.setStatus('current')
tmnxFPQGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 60)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpAcctgPolId"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpDescr"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPolicerPol"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpTableLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpAcctgPolId"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpDescr"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPolicerPol"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpTableLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPStatMode"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPStatMode"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOffH"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPkts"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPktsL"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPktsH"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOcts"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOctsL"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOctsH"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPkts"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPktsL"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPktsH"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOcts"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOctsL"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOctsH"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPQGrpGroup = tmnxFPQGrpGroup.setStatus('current')
tmnxCardV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 61)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardHardResetUnsupMdas"), ("TIMETRA-CHASSIS-MIB", "tmnxCardRateCalcFastQueue"), ("TIMETRA-CHASSIS-MIB", "tmnxCardRateCalcSlowQueue"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSchedRun"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTaskScheduling"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSlowQueueThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV10v0Group = tmnxCardV10v0Group.setStatus('current')
tmnxIpsecV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 62)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnelReassembly"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpOperFlags"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIpMaxTunnels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIpsecV10v0Group = tmnxIpsecV10v0Group.setStatus('current')
tmnxChassisV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 63)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFanTrayCompSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakVoltageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinVoltageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakWattageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinWattageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakAmperageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinAmperageTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV10v0Group = tmnxChassisV10v0Group.setStatus('current')
tmnxChassisNotificationV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 64)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPeFirmwareVersionWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV9v0Group = tmnxChassisNotificationV9v0Group.setStatus('current')
tmnxFPQGrpV10v0R4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 65)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrTblLstChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrAdminPIR"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrAdminCIR"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrStatMode"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrMBS"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrCBS"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrPktOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPQGrpV10v0R4Group = tmnxFPQGrpV10v0R4Group.setStatus('current')
tmnxMdaV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 66)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMultiActive"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveMda"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaV10v0Group = tmnxMdaV10v0Group.setStatus('current')
tmnxMdaObsoletedV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 67)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaSchedPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrTblLastChangd"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8WtInGrp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaObsoletedV10v0Group = tmnxMdaObsoletedV10v0Group.setStatus('current')
tmnxChassisNotifyV10v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 69)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyV10v0Group = tmnxChassisNotifyV10v0Group.setStatus('current')
tmnxMdaHsmdaPoolV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 70)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaPoolPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaHsmdaPoolV10v0Group = tmnxMdaHsmdaPoolV10v0Group.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxFPAccIngQgPStOffLPrioPkts=tmnxFPAccIngQgPStOffLPrioPkts, tmnxHwFirmwareCodeVersion=tmnxHwFirmwareCodeVersion, tmnxPeBootromVersionMismatch=tmnxPeBootromVersionMismatch, tmnxChassisAdminValueObjs=tmnxChassisAdminValueObjs, tmnxSyncIfTimingPTPAdminStatus=tmnxSyncIfTimingPTPAdminStatus, tmnxChassisComp7710V3v0=tmnxChassisComp7710V3v0, tmnxChassisV9v0Compliance=tmnxChassisV9v0Compliance, tFPAccIngQGrpPlcrOvrEntry=tFPAccIngQGrpPlcrOvrEntry, tmnxCpmCardIndexFileLastBootedHeader=tmnxCpmCardIndexFileLastBootedHeader, tmnxCcagPathCcMtu=tmnxCcagPathCcMtu, tmnxHwResourcePeakAmperage=tmnxHwResourcePeakAmperage, tmnxHwResourceCurrentWattage=tmnxHwResourceCurrentWattage, tmnxFPNetIngQgPStDrpLPrioPktsL=tmnxFPNetIngQgPStDrpLPrioPktsL, TmnxCcagId=TmnxCcagId, tmnxChassisLocation=tmnxChassisLocation, tmnxChassisNumFans=tmnxChassisNumFans, tmnxCardTypeIndex=tmnxCardTypeIndex, tmnxFPNetIngQgPStDrpHPrioPktsL=tmnxFPNetIngQgPStDrpHPrioPktsL, tmnxFabricEquippedType=tmnxFabricEquippedType, tmnxCcmTypeDescription=tmnxCcmTypeDescription, TmnxMDASuppType=TmnxMDASuppType, tmnxMDAXplFailedCount=tmnxMDAXplFailedCount, tmnxSyncIfTimingBITS2InUse=tmnxSyncIfTimingBITS2InUse, tmnxEqSyncIfTimingBITSOutRefChg=tmnxEqSyncIfTimingBITSOutRefChg, tmnxFPNetIngQGrpEntry=tmnxFPNetIngQGrpEntry, TmnxCardSuppType=TmnxCardSuppType, tmnxChassisFanTable=tmnxChassisFanTable, tmnxCardComplexNumber=tmnxCardComplexNumber, tmnxEqSyncIfTimingBITS2Quality=tmnxEqSyncIfTimingBITS2Quality, TmnxCcmType=TmnxCcmType, tmnxMdaTypeEntry=tmnxMdaTypeEntry, tmnxChassisCoordinates=tmnxChassisCoordinates, tmnxHwSwLastBoot=tmnxHwSwLastBoot, tmnxChassisObjs=tmnxChassisObjs, tmnxCpmCardConfigSource=tmnxCpmCardConfigSource, tmnxCardV6v0NamedPoolPlcyGroup=tmnxCardV6v0NamedPoolPlcyGroup, tmnxHwResourceMinVoltageTime=tmnxHwResourceMinVoltageTime, tmnxCcagLastChanged=tmnxCcagLastChanged, tmnxFPHiBwMcastTapCount=tmnxFPHiBwMcastTapCount, tmnxChassisV7v0Group=tmnxChassisV7v0Group, tmnxHwResourcePeakWattageTime=tmnxHwResourcePeakWattageTime, tmnxChassisNotificationV6v0Group=tmnxChassisNotificationV6v0Group, tmnxSyncIfTimingBITS2State=tmnxSyncIfTimingBITS2State, tmnxFPAccIngQgPStDrpLPrioOctsH=tmnxFPAccIngQgPStDrpLPrioOctsH, tmnxCardSupportedTypes=tmnxCardSupportedTypes, tmnxChassisNotificationV7v0Group=tmnxChassisNotificationV7v0Group, tmnxIPsecIsaGrpTable=tmnxIPsecIsaGrpTable, tmnxCardTaskScheduling=tmnxCardTaskScheduling, tmnxChassisV6v1Group=tmnxChassisV6v1Group, tSyncIfTimingAdmEntry=tSyncIfTimingAdmEntry, tmnxFabricTable=tmnxFabricTable, tmnxCardMemorySize=tmnxCardMemorySize, tFPNetIngQGrpArbitStatFwdPkts=tFPNetIngQGrpArbitStatFwdPkts, tmnxHwResourcePeakVoltage=tmnxHwResourcePeakVoltage, tmnxFPAccIngQgPStFwdInProfPkts=tmnxFPAccIngQgPStFwdInProfPkts, tmnxFPAccIngQGrpPolicerPol=tmnxFPAccIngQGrpPolicerPol, tmnxFPNetIngQgPStUncolOctsOffL=tmnxFPNetIngQgPStUncolOctsOffL, tmnxCardRateCalcSlowQueue=tmnxCardRateCalcSlowQueue, tmnxCpmCardEntry=tmnxCpmCardEntry, tmnxHsmdaMdaSchOvrRowStatus=tmnxHsmdaMdaSchOvrRowStatus, tmnxMDAV6v1Group=tmnxMDAV6v1Group, tmnxSyncV6v0Group=tmnxSyncV6v0Group, tmnxMDASynchronousEthernet=tmnxMDASynchronousEthernet, tmnxChassisNotificationV3v0Group=tmnxChassisNotificationV3v0Group, tmnxMcmSlotNum=tmnxMcmSlotNum, tmnxFabricTypeStatus=tmnxFabricTypeStatus, tmnxSyncIfTimingPTPState=tmnxSyncIfTimingPTPState, tmnxFabricSlotNum=tmnxFabricSlotNum, tmnxSyncIfTimingRef2Alarm=tmnxSyncIfTimingRef2Alarm, tmnxCpmCardIndexBootedVersion=tmnxCpmCardIndexBootedVersion, tmnxIPsecIsaGrpLastChanged=tmnxIPsecIsaGrpLastChanged, tmnxChassisNotifyMismatchedVer=tmnxChassisNotifyMismatchedVer, tmnxPeConfigurationError=tmnxPeConfigurationError, TmnxCardType=TmnxCardType, tmnxCardSlowQueueThresh=tmnxCardSlowQueueThresh, tmnxEqMdaCfgNotCompatible=tmnxEqMdaCfgNotCompatible, tmnxMDAEgrNamedPoolPolicy=tmnxMDAEgrNamedPoolPolicy, tmnxIPsecIsaGrpAdminState=tmnxIPsecIsaGrpAdminState, tmnxSyncIfTimingRefOrder5=tmnxSyncIfTimingRefOrder5, tmnxCardCmplx1EgrFcsSrcSlots=tmnxCardCmplx1EgrFcsSrcSlots, tmnxCpmCardBootOptionVersion=tmnxCpmCardBootOptionVersion, tmnxChassisNotificationObjects=tmnxChassisNotificationObjects, tmnxEqFlashDiskFull=tmnxEqFlashDiskFull, tmnxHsmdaMdaSchOvrClass2WtInGrp=tmnxHsmdaMdaSchOvrClass2WtInGrp, tFPNetIngQGrpArbitStatTable=tFPNetIngQGrpArbitStatTable, tmnxChassisNotifyPrefix=tmnxChassisNotifyPrefix, tmnxHsmdaMdaSchOvrClass1WtInGrp=tmnxHsmdaMdaSchOvrClass1WtInGrp, tmnxChassisComp7710V7v0=tmnxChassisComp7710V7v0, tmnxChassisPowerSupplyOutputStatus=tmnxChassisPowerSupplyOutputStatus, tmnxCcagDescription=tmnxCcagDescription, tmnxMDAChannelsInUse=tmnxMDAChannelsInUse, tmnxSyncIfTimingPTPRxQltyLevel=tmnxSyncIfTimingPTPRxQltyLevel, tmnxIPsecIsaGrpTableLastChanged=tmnxIPsecIsaGrpTableLastChanged, tFPAccIngQGrpPlcrOvrRowStatus=tFPAccIngQGrpPlcrOvrRowStatus, tmnxCardCmplx1MemParityOccur=tmnxCardCmplx1MemParityOccur, tmnxCardNamedPoolAdminMode=tmnxCardNamedPoolAdminMode, tmnxChassisTypeEntry=tmnxChassisTypeEntry, tmnxChassisAdminMode=tmnxChassisAdminMode, tmnxEnvTempTooHigh=tmnxEnvTempTooHigh, TmnxTunnelGroupId=TmnxTunnelGroupId, tmnxHwContainsTable=tmnxHwContainsTable, tmnxSyncIfTimingRef2NationalUse=tmnxSyncIfTimingRef2NationalUse, tmnxChassisTypeIndex=tmnxChassisTypeIndex, tmnxFPNetIngQgPStFwdInProfPktsH=tmnxFPNetIngQgPStFwdInProfPktsH, tmnxChassisMajorLEDState=tmnxChassisMajorLEDState, tSyncIfTimingAdmChanged=tSyncIfTimingAdmChanged, tmnxEqSyncIfTimingHoldover=tmnxEqSyncIfTimingHoldover, tmnx7710HwV3v0Group=tmnx7710HwV3v0Group, TmnxBITSOutSource=TmnxBITSOutSource, tmnxSyncIfTimingBITSOutLineLen=tmnxSyncIfTimingBITSOutLineLen, tmnxHwEquippedPlatform=tmnxHwEquippedPlatform, tmnxCardV10v0Group=tmnxCardV10v0Group, tmnxCcagId=tmnxCcagId, tmnxChassisV8v0Group=tmnxChassisV8v0Group, tSyncIfTimingAdmPTPCfgQltyLevel=tSyncIfTimingAdmPTPCfgQltyLevel, tmnxMDAClockMode=tmnxMDAClockMode, tmnxCardCmplx2EgrFcsOccurTime=tmnxCardCmplx2EgrFcsOccurTime, tmnxChassisPowerSupplyTable=tmnxChassisPowerSupplyTable, tmnxChassisNotifyObsoleteGroup=tmnxChassisNotifyObsoleteGroup, TmnxChassisType=TmnxChassisType, tmnxHsmdaMdaSchOvrTblLastChangd=tmnxHsmdaMdaSchOvrTblLastChangd, tmnxChassisV6v0Group=tmnxChassisV6v0Group, tmnxHwOperState=tmnxHwOperState, tmnxEqTypeNotificationRow=tmnxEqTypeNotificationRow, tmnxCcagPathRateOption=tmnxCcagPathRateOption, tmnxCcagPathWeight=tmnxCcagPathWeight, tmnxSlotObjs=tmnxSlotObjs, tmnxFPAccIngQGrpName=tmnxFPAccIngQGrpName, tmnxChassisV5v0ObsoleteGroup=tmnxChassisV5v0ObsoleteGroup, tmnxFanTrayCompSpeed=tmnxFanTrayCompSpeed, tmnxChassisLastChange=tmnxChassisLastChange, tmnxFPAccIngQGrpPStatEntry=tmnxFPAccIngQGrpPStatEntry, tmnxCpmFlashModelNumber=tmnxCpmFlashModelNumber, tmnxSyncIfTimingRefOrder3=tmnxSyncIfTimingRefOrder3, tSyncIfTimingAdmRef1AdminStatus=tSyncIfTimingAdmRef1AdminStatus, tmnxEqSyncIfTimingBITSQuality=tmnxEqSyncIfTimingBITSQuality, TmnxFabricType=TmnxFabricType, tmnxHsmdaMdaSchOvrClass6Rate=tmnxHsmdaMdaSchOvrClass6Rate, TmnxCardSlotBitMap=TmnxCardSlotBitMap, tmnxChassisReboot=tmnxChassisReboot, tmnxCardAllowedTypes=tmnxCardAllowedTypes, tmnxIPsecIsaGrpOperFlags=tmnxIPsecIsaGrpOperFlags, tmnxFabricTypeDescription=tmnxFabricTypeDescription, tmnxCpmCardSupportedTypes=tmnxCpmCardSupportedTypes, tmnxChassisUserModV7v0Group=tmnxChassisUserModV7v0Group, tmnxChassisComp7710V5v0=tmnxChassisComp7710V5v0, tmnxFPNetIngQgPStOffLPrioOcts=tmnxFPNetIngQgPStOffLPrioOcts, tmnxEqFanFailure=tmnxEqFanFailure, tmnxCpmCardRereadBootOptions=tmnxCpmCardRereadBootOptions, tmnxFPQGrpV10v0R4Group=tmnxFPQGrpV10v0R4Group, tmnxChassisUpgradeInProgress=tmnxChassisUpgradeInProgress, tmnxFPNetIngQgPStFwdInProfOcts=tmnxFPNetIngQgPStFwdInProfOcts, tmnxPeBootloaderVersionMismatch=tmnxPeBootloaderVersionMismatch, tSyncIfTimingAdmRef2NationalUse=tSyncIfTimingAdmRef2NationalUse, tmnxHwAlias=tmnxHwAlias, tmnxCardHwIndex=tmnxCardHwIndex, tmnxSyncIfTimingRef1AdminStatus=tmnxSyncIfTimingRef1AdminStatus, TmnxPortAdminStatus=TmnxPortAdminStatus, tmnxMcmTypeDescription=tmnxMcmTypeDescription, tmnxEqSyncIfTimingRef1AlarmClear=tmnxEqSyncIfTimingRef1AlarmClear, tmnxEqCardFirmwareUpgraded=tmnxEqCardFirmwareUpgraded, tmnxFPAccIngQgPStFwdInProfOctsH=tmnxFPAccIngQgPStFwdInProfOctsH, tmnx77x0CESMDAV6v0Group=tmnx77x0CESMDAV6v0Group, tmnxCpmCardConfigBootedVersion=tmnxCpmCardConfigBootedVersion, tmnxCcmEntry=tmnxCcmEntry, tmnxIPsecIsaGrpEntry=tmnxIPsecIsaGrpEntry, tmnxFPNetIngQGrpName=tmnxFPNetIngQGrpName, tmnxFPNetIngQgPStOffHPrioPktsL=tmnxFPNetIngQgPStOffHPrioPktsL, tmnxCpmCardConfigFileLastBootedHeader=tmnxCpmCardConfigFileLastBootedHeader, tmnxSyncIfTimingRef2SrcPort=tmnxSyncIfTimingRef2SrcPort, tmnxSyncIfTimingRef2BITSIfType=tmnxSyncIfTimingRef2BITSIfType, tmnxCcagAdminStatus=tmnxCcagAdminStatus, tmnxFPAccIngQgPStFwdOutProfPkts=tmnxFPAccIngQgPStFwdOutProfPkts, tmnxFPHiBwMcastSource=tmnxFPHiBwMcastSource, tmnxFPNetIngQgPStOffLPrioPktsH=tmnxFPNetIngQgPStOffLPrioPktsH, tmnxFPNetIngQGrpLastChgd=tmnxFPNetIngQGrpLastChgd, tSyncIfTimingAdmBITSOutLineLen=tSyncIfTimingAdmBITSOutLineLen, tmnxChassisPowerSupplyInputStatus=tmnxChassisPowerSupplyInputStatus, tFPAccIngQGrpArbitStatFwdPkts=tFPAccIngQGrpArbitStatFwdPkts, tmnxSyncIfTimingNotifyAlarm=tmnxSyncIfTimingNotifyAlarm, tmnxSyncIfTimingOtherCPMAlarm=tmnxSyncIfTimingOtherCPMAlarm, tmnxFPNetIngQgPStDrpLPrioPktsH=tmnxFPNetIngQgPStDrpLPrioPktsH, tmnxChassisPowerSupplyDCStatus=tmnxChassisPowerSupplyDCStatus, tmnxFanTrayComponentTable=tmnxFanTrayComponentTable, tmnxMDAHiBwMcastSource=tmnxMDAHiBwMcastSource, tFPAccIngQGrpPlcrOvrCBS=tFPAccIngQGrpPlcrOvrCBS, tmnxFPNetIngQgPStDrpHPrioOctsH=tmnxFPNetIngQgPStDrpHPrioOctsH, tmnxFPWredSlopePolicy=tmnxFPWredSlopePolicy, tmnxFPNetIngQgPStFwdInProfOctsL=tmnxFPNetIngQgPStFwdInProfOctsL, tmnxMdaTypeTable=tmnxMdaTypeTable, tmnxChassisPowerSupplyAssignedType=tmnxChassisPowerSupplyAssignedType, tmnxSyncIfTimingRef1Alarm=tmnxSyncIfTimingRef1Alarm, tmnxMDAAssignedType=tmnxMDAAssignedType, tmnxCardCmplx1CAMErrorOccurTime=tmnxCardCmplx1CAMErrorOccurTime, tmnxHsmdaMdaSchOvrGrp2Rate=tmnxHsmdaMdaSchOvrGrp2Rate, tmnxCpmCardSyncFileNotPresent=tmnxCpmCardSyncFileNotPresent, tmnxFPNetIngQgPStOffHPrioOctsL=tmnxFPNetIngQgPStOffHPrioOctsL, tmnxFPNetIngQgPStDrpHPrioOcts=tmnxFPNetIngQgPStDrpHPrioOcts, tmnxHwResourceMinAmperage=tmnxHwResourceMinAmperage, tmnxFPAccIngQgPStOffHPrioOcts=tmnxFPAccIngQgPStOffHPrioOcts, tmnxEqMemoryFailure=tmnxEqMemoryFailure, tmnxSyncIfTimingPTPAlarm=tmnxSyncIfTimingPTPAlarm, tmnxFPNetIngQgPStDrpLPrioPkts=tmnxFPNetIngQgPStDrpLPrioPkts, tFPAccIngQGrpPlcrOvrPolicerId=tFPAccIngQGrpPlcrOvrPolicerId, tmnxCardClockSource=tmnxCardClockSource, tmnxMDACcagV6v1Group=tmnxMDACcagV6v1Group, tmnxSyncIfTimingBITSAlarm=tmnxSyncIfTimingBITSAlarm, tmnxMDAMaxChannels=tmnxMDAMaxChannels, tmnxChassisTable=tmnxChassisTable, tSyncIfTimingAdmBITSCfgQltyLevel=tSyncIfTimingAdmBITSCfgQltyLevel, tmnxMDAMcPathMgmtPriPathLimit=tmnxMDAMcPathMgmtPriPathLimit, tmnxCcagEntry=tmnxCcagEntry, tmnxFPLastChanged=tmnxFPLastChanged, tmnxChassisFanRevision=tmnxChassisFanRevision, tmnxMDAIsaTunnelGroup=tmnxMDAIsaTunnelGroup, tmnxHsmdaMdaSchOvrMaxRate=tmnxHsmdaMdaSchOvrMaxRate, tmnxRedSecondaryCPMStatus=tmnxRedSecondaryCPMStatus, tmnxChassisNotifyObjsV5v0Group=tmnxChassisNotifyObjsV5v0Group, tmnxMDAMcPathMgmtAdminState=tmnxMDAMcPathMgmtAdminState, tmnxChassisHiBwMcastAlarm=tmnxChassisHiBwMcastAlarm, tmnxMDAMaxPorts=tmnxMDAMaxPorts, tmnxMDAHiBwMcastAlarm=tmnxMDAHiBwMcastAlarm, tmnxFPNetIngQGrpPStatEntry=tmnxFPNetIngQGrpPStatEntry, tmnxHwManufactureDate=tmnxHwManufactureDate, tmnxMdaHsmdaPoolV10v0Group=tmnxMdaHsmdaPoolV10v0Group, tmnxMcmTypeEntry=tmnxMcmTypeEntry, tmnxIPsecIsaGrpBackupIsa=tmnxIPsecIsaGrpBackupIsa, tmnxFPMcPathMgmtV6v1Group=tmnxFPMcPathMgmtV6v1Group, tmnxFPAccIngQGrpCollectStats=tmnxFPAccIngQGrpCollectStats, tmnxCpmCardConfigLastModified=tmnxCpmCardConfigLastModified, tmnxFPNetIngQGrpPStatPolicerId=tmnxFPNetIngQGrpPStatPolicerId, tmnxCpmCardClockSource=tmnxCpmCardClockSource, tmnxCpmCardRedundant=tmnxCpmCardRedundant, tmnxSyncIfTimingOtherCPMQual=tmnxSyncIfTimingOtherCPMQual, tmnxMcmHwIndex=tmnxMcmHwIndex, tmnxHwSwImageSource=tmnxHwSwImageSource, tmnxFPMcPathMgmtAdminState=tmnxFPMcPathMgmtAdminState, tmnxSyncIfTimingBITSNationalUse=tmnxSyncIfTimingBITSNationalUse, tmnxChassisAdminLastSetTimeout=tmnxChassisAdminLastSetTimeout, tmnxChassisNumPorts=tmnxChassisNumPorts, tmnxFPNetIngQGrpTable=tmnxFPNetIngQGrpTable, tmnxFPAccIngQgPStDrpLPrioOcts=tmnxFPAccIngQgPStDrpLPrioOcts, tmnxSyncIfTimingStatus=tmnxSyncIfTimingStatus, tmnxHsmdaMdaSchOvrLastChanged=tmnxHsmdaMdaSchOvrLastChanged, tmnxEqSyncIfTimingRef2AlarmClear=tmnxEqSyncIfTimingRef2AlarmClear, tmnxHwResourcePeakAmperageTime=tmnxHwResourcePeakAmperageTime, tmnxMdaObsoletedV10v0Group=tmnxMdaObsoletedV10v0Group, tmnxMDAMcPathMgmtBwPlcyName=tmnxMDAMcPathMgmtBwPlcyName, tmnxFPNum=tmnxFPNum, tmnxEqCpuFailure=tmnxEqCpuFailure, tmnxCcagPathCcEntry=tmnxCcagPathCcEntry, tmnxChassisNotifyCardSyncFile=tmnxChassisNotifyCardSyncFile, tmnxPeSoftwareVersionMismatch=tmnxPeSoftwareVersionMismatch, tmnxChassisRedForcedSingleSfm=tmnxChassisRedForcedSingleSfm)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tSyncIfTimingAdmBITSOutSource=tSyncIfTimingAdmBITSOutSource, tmnxCpmCardHwIndex=tmnxCpmCardHwIndex, tmnxChassisNotifyHwIndex=tmnxChassisNotifyHwIndex, tmnxPeSoftwareAbnormalHalt=tmnxPeSoftwareAbnormalHalt, tmnxSyncIfTimingRef1Qualified=tmnxSyncIfTimingRef1Qualified, tmnxFPHiBwMcastDefaultPathsOnly=tmnxFPHiBwMcastDefaultPathsOnly, tmnxFPNetIngQgPStFwdOutProfPktsH=tmnxFPNetIngQgPStFwdOutProfPktsH, tmnxMDAMaxChannelization=tmnxMDAMaxChannelization, tmnxChassisNumSlots=tmnxChassisNumSlots, tmnxIpsecV10v0Group=tmnxIpsecV10v0Group, tmnxMDAMcPathMgmtBlkHoleInUseBw=tmnxMDAMcPathMgmtBlkHoleInUseBw, tmnxChassis7450V6v1Compliance=tmnxChassis7450V6v1Compliance, tmnxHsmdaMdaSchOvrClass8WtInGrp=tmnxHsmdaMdaSchOvrClass8WtInGrp, tmnxChassis7450V6v0Compliance=tmnxChassis7450V6v0Compliance, tmnxCardSrcSlotBitmap=tmnxCardSrcSlotBitmap, TmnxAlarmState=TmnxAlarmState, tmnxCardEntry=tmnxCardEntry, tmnxCcagPathRate=tmnxCcagPathRate, tmnxIPsecIsaGrpActiveIsaChgd=tmnxIPsecIsaGrpActiveIsaChgd, tmnxFPNetIngQgPStDrpLPrioOcts=tmnxFPNetIngQgPStDrpLPrioOcts, tmnxFPNetIngQGrpPStatTable=tmnxFPNetIngQGrpPStatTable, tFPAccIngQGrpArbitStatFwdOcts=tFPAccIngQGrpArbitStatFwdOcts, tmnxCardSlotNum=tmnxCardSlotNum, tFPAccIngQGrpPlcrOvrStatMode=tFPAccIngQGrpPlcrOvrStatMode, tmnxMDAAllowedTypes=tmnxMDAAllowedTypes, tmnxIPsecIsaGrpRowStatus=tmnxIPsecIsaGrpRowStatus, tmnxEqSyncIfTimingPTPQuality=tmnxEqSyncIfTimingPTPQuality, tmnxFPAccIngQgPStFwdOutProfOctsH=tmnxFPAccIngQgPStFwdOutProfOctsH, tmnxFPNetIngQGrpAcctgPolId=tmnxFPNetIngQGrpAcctgPolId, tmnxFPAccIngQgPStOffLPrioOcts=tmnxFPAccIngQgPStOffLPrioOcts, tmnxFPNetIngQGrpInstanceId=tmnxFPNetIngQGrpInstanceId, tmnxHwTemperature=tmnxHwTemperature, tmnxCardTypeDescription=tmnxCardTypeDescription, tmnxVirtualSchedulerAdjTable=tmnxVirtualSchedulerAdjTable, tmnxFPAccIngQgPStDrpLPrioOctsL=tmnxFPAccIngQgPStDrpLPrioOctsL, tmnxCpmCardCpuType=tmnxCpmCardCpuType, tmnxRedRestoreSuccess=tmnxRedRestoreSuccess, tmnxCardTable=tmnxCardTable, tmnxChassisComp7710V6v1=tmnxChassisComp7710V6v1, tmnxCpmCardConfigFileLastSaved=tmnxCpmCardConfigFileLastSaved, tmnxCpmFlashTable=tmnxCpmFlashTable, tmnxMDAEquippedPorts=tmnxMDAEquippedPorts, tmnxMDAIngHsmdaSchedPolicy=tmnxMDAIngHsmdaSchedPolicy, tSyncIfTimingAdmQLSelection=tSyncIfTimingAdmQLSelection, tmnxChassisPowerSupply1Status=tmnxChassisPowerSupply1Status, tmnxCardCmplx2EgrFcsOccur=tmnxCardCmplx2EgrFcsOccur, tmnxFPAccIngQgPStFwdOutProfPktsH=tmnxFPAccIngQgPStFwdOutProfPktsH, tmnxChassisMixedModeIomAdminMode=tmnxChassisMixedModeIomAdminMode, tmnxCardEquippedType=tmnxCardEquippedType, TmnxSSMQualityLevel=TmnxSSMQualityLevel, tmnxFPNetIngQgPStFwdInProfPktsL=tmnxFPNetIngQgPStFwdInProfPktsL, tmnxMdaNotifyType=tmnxMdaNotifyType, tmnxHwResourceEntry=tmnxHwResourceEntry, tmnxMdaTypeIndex=tmnxMdaTypeIndex, tmnxChassisNotificationV9v0Group=tmnxChassisNotificationV9v0Group, tmnxHsmdaMdaSchOvrClass8Rate=tmnxHsmdaMdaSchOvrClass8Rate, tmnxCcmTypeTable=tmnxCcmTypeTable, tmnxMDAMcPathMgmtAncInUseBw=tmnxMDAMcPathMgmtAncInUseBw, tmnxChassisMinorLEDState=tmnxChassisMinorLEDState, tmnxFPNetIngQgPStDrpLPrioOctsL=tmnxFPNetIngQgPStDrpLPrioOctsL, tSyncIfTimingAdmBITSOutAdmStatus=tSyncIfTimingAdmBITSOutAdmStatus, tSyncIfTimingAdmRefOrder1=tSyncIfTimingAdmRefOrder1, tmnxHwSerialNumber=tmnxHwSerialNumber, tmnxMDAMcPathMgmtSecPathLimit=tmnxMDAMcPathMgmtSecPathLimit, TmnxFabricSuppType=TmnxFabricSuppType, tmnxCardTypeEntry=tmnxCardTypeEntry, tSyncIfTimingAdmRefOrder2=tSyncIfTimingAdmRefOrder2, tmnxCardCamErrorV6v1Group=tmnxCardCamErrorV6v1Group, tSyncIfTimingAdmRefOrder3=tSyncIfTimingAdmRefOrder3, tmnxChassisPowerSupplyEntry=tmnxChassisPowerSupplyEntry, tmnxHwCLEI=tmnxHwCLEI, tmnxChassisConformance=tmnxChassisConformance, tFPAccIngQGrpPlcrOvrAdminCIR=tFPAccIngQGrpPlcrOvrAdminCIR, tmnxSyncIfTimingQLSelection=tmnxSyncIfTimingQLSelection, tmnxMDAAtmMode=tmnxMDAAtmMode, tmnxMDAXplErrorTime=tmnxMDAXplErrorTime, tmnxEqMdaXplError=tmnxEqMdaXplError, tmnxCardCmplx2IngrFcsOccur=tmnxCardCmplx2IngrFcsOccur, tmnxCardSoftReset=tmnxCardSoftReset, tmnxHwName=tmnxHwName, tmnxCardNamedPoolOperMode=tmnxCardNamedPoolOperMode, tmnxSyncIfTimingRef2AdminStatus=tmnxSyncIfTimingRef2AdminStatus, TmnxMcmType=TmnxMcmType, tmnxIPsecIsaGrpTunnelReassembly=tmnxIPsecIsaGrpTunnelReassembly, tmnxMDAV3v0Group=tmnxMDAV3v0Group, tmnxCpmFlashUsed=tmnxCpmFlashUsed, tmnxMDAMcPathMgmtSecInUseBw=tmnxMDAMcPathMgmtSecInUseBw, tFPNetIngQGrpArbitStatFwdPktsL=tFPNetIngQGrpArbitStatFwdPktsL, tmnxFPAccIngQgPStOffLPrioOctsH=tmnxFPAccIngQgPStOffLPrioOctsH, tFPNetIngQGrpArbitStatEntry=tFPNetIngQGrpArbitStatEntry, tmnxCcmTypeEntry=tmnxCcmTypeEntry, tmnxCpmCardCmplxCAMErrOccur=tmnxCpmCardCmplxCAMErrOccur, tmnxHwTempSensor=tmnxHwTempSensor, tmnxCcagPathCcIngPoolResvCbs=tmnxCcagPathCcIngPoolResvCbs, tFPAccIngQGrpArbitStatFwdPktsH=tFPAccIngQGrpArbitStatFwdPktsH, tmnxCcagPathTable=tmnxCcagPathTable, tmnxSyncIfTimingRef2Qualified=tmnxSyncIfTimingRef2Qualified, tmnxChassisNumPwrSupplies=tmnxChassisNumPwrSupplies, tmnxFPWredBufAllocMin=tmnxFPWredBufAllocMin, tmnxSyncIfTimingRef2CfgQltyLevel=tmnxSyncIfTimingRef2CfgQltyLevel, tmnxSyncIfTimingRefOrder4=tmnxSyncIfTimingRefOrder4, tmnxChassisMixedModeIomUpgrList=tmnxChassisMixedModeIomUpgrList, tmnxChassisV5v0Compliance=tmnxChassisV5v0Compliance, tmnxFPNetIngQgPStUncolOctsOffH=tmnxFPNetIngQgPStUncolOctsOffH, tmnxCardV3v0Group=tmnxCardV3v0Group, tmnxMcmEquippedType=tmnxMcmEquippedType, tmnxFPQGrpGroup=tmnxFPQGrpGroup, tmnxChassisPowerSupply2Status=tmnxChassisPowerSupply2Status, tmnxCcagPathLastChanged=tmnxCcagPathLastChanged, tmnxSyncIfTimingRef1SrcHw=tmnxSyncIfTimingRef1SrcHw, tmnxFPAccIngQgPStDrpHPrioPktsH=tmnxFPAccIngQgPStDrpHPrioPktsH, tmnxCpmFlashSerialNumber=tmnxCpmFlashSerialNumber, tSyncIfTimingAdmRef2CfgQltyLevel=tSyncIfTimingAdmRef2CfgQltyLevel, tSyncIfTimingAdmBITSNationalUse=tSyncIfTimingAdmBITSNationalUse, tSyncIfTimingAdmBITS2OutAdminStatus=tSyncIfTimingAdmBITS2OutAdminStatus, tFPAccIngQGrpArbitStatFwdOctsH=tFPAccIngQGrpArbitStatFwdOctsH, tmnxSyncIfTimingV8v0Group=tmnxSyncIfTimingV8v0Group, tmnxHwResourceMinVoltage=tmnxHwResourceMinVoltage, tmnxHwMfgBoardNumber=tmnxHwMfgBoardNumber, tmnxMDAReboot=tmnxMDAReboot, tmnxChassisTypeName=tmnxChassisTypeName, tmnxIPsecIsaGrpOperState=tmnxIPsecIsaGrpOperState, tmnxHsmdaMdaSchOvrGrp1Rate=tmnxHsmdaMdaSchOvrGrp1Rate, tmnxFPNetIngQGrpPolicerPol=tmnxFPNetIngQGrpPolicerPol, tmnxFPAccIngQgPStUncolPktsOffH=tmnxFPAccIngQgPStUncolPktsOffH, tmnxCardCmplx1CAMErrorOccur=tmnxCardCmplx1CAMErrorOccur, tmnxCcagPathCcQueuePlcy=tmnxCcagPathCcQueuePlcy, tmnxFPEntry=tmnxFPEntry, tmnxFPAccIngQgPStOffLPrioPktsL=tmnxFPAccIngQgPStOffLPrioPktsL, tmnxHsmdaMdaSchOvrClass7Rate=tmnxHsmdaMdaSchOvrClass7Rate, tmnxFPNetIngQgPStFwdOutProfPktsL=tmnxFPNetIngQgPStFwdOutProfPktsL, tmnxChassisHwV6v1Group=tmnxChassisHwV6v1Group, tmnxEqSyncIfTimingPTPAlarm=tmnxEqSyncIfTimingPTPAlarm, tmnxSyncIfTimingRef1State=tmnxSyncIfTimingRef1State, tmnxFPNetIngQgPStOffLPrioPktsL=tmnxFPNetIngQgPStOffLPrioPktsL, tmnxIPsecIsaGrpActiveIsa=tmnxIPsecIsaGrpActiveIsa, tmnxChassisUpdateWaitTime=tmnxChassisUpdateWaitTime, tmnxFPAccIngQgPStOffHPrioPktsH=tmnxFPAccIngQgPStOffHPrioPktsH, tmnxMcmTypeName=tmnxMcmTypeName, tmnxIPsecIsaGrpUnableToSwitch=tmnxIPsecIsaGrpUnableToSwitch, tmnxCpmCardMasterSlaveRefState=tmnxCpmCardMasterSlaveRefState, tmnxCpmFlashId=tmnxCpmFlashId, tmnxMcmEntry=tmnxMcmEntry, tmnxHsmdaMdaSchOvrClass1Rate=tmnxHsmdaMdaSchOvrClass1Rate, tmnxHsmdaMdaSchOvrClass7WtInGrp=tmnxHsmdaMdaSchOvrClass7WtInGrp, tmnxMDANetworkIngQueues=tmnxMDANetworkIngQueues, tmnxCpmCardSlotNum=tmnxCpmCardSlotNum, tmnxCardSoftResetState=tmnxCardSoftResetState, tmnxFPNetIngQgPStOffLPrioOctsL=tmnxFPNetIngQgPStOffLPrioOctsL, tmnxCpmCardConfigLastSaved=tmnxCpmCardConfigLastSaved, tmnxFPNetIngQGrpDescr=tmnxFPNetIngQGrpDescr, tmnxRedRestoreFail=tmnxRedRestoreFail, tmnxFPAccIngQgPStDrpLPrioPktsH=tmnxFPAccIngQgPStDrpLPrioPktsH, tmnxCardReboot=tmnxCardReboot, tmnxIPsecIsaGrpTnlMax=tmnxIPsecIsaGrpTnlMax, tmnxChassisHwV9v0Group=tmnxChassisHwV9v0Group, tmnxChassisNotifyV10v0Group=tmnxChassisNotifyV10v0Group, tmnxIPsecNotifV7v0Group=tmnxIPsecNotifV7v0Group, tSyncIfTimingAdmRef2AdminStatus=tSyncIfTimingAdmRef2AdminStatus, tmnxSyncIfTimingRef2RxQltyLevel=tmnxSyncIfTimingRef2RxQltyLevel, tmnxCpmCardOscillatorType=tmnxCpmCardOscillatorType, tmnxEqCardRemoved=tmnxEqCardRemoved, tmnxCardPchipV8v0Group=tmnxCardPchipV8v0Group, tmnxChassisFanSpeed=tmnxChassisFanSpeed, tmnxFabricTypeTable=tmnxFabricTypeTable, tmnxChassis7750V6v0Compliance=tmnxChassis7750V6v0Compliance, tmnxCcagPathCcCollectStats=tmnxCcagPathCcCollectStats, tmnxFPAccIngQgPStFwdInProfPktsL=tmnxFPAccIngQgPStFwdInProfPktsL, tmnxSyncIfTimingBITSState=tmnxSyncIfTimingBITSState, tmnxRedPrimaryCPMFail=tmnxRedPrimaryCPMFail, tmnxCcmOperStatus=tmnxCcmOperStatus, tmnxSyncIfTimingRef2SrcHw=tmnxSyncIfTimingRef2SrcHw, tmnxSyncIfTimingFreqOffset=tmnxSyncIfTimingFreqOffset, tmnxCcagAccessAdaptQos=tmnxCcagAccessAdaptQos, tmnxFPNetIngQgPStFwdOutProfPkts=tmnxFPNetIngQgPStFwdOutProfPkts, tmnxChassisAdminCtrlObjs=tmnxChassisAdminCtrlObjs, tmnxFPAccIngQgPStUncolOctsOff=tmnxFPAccIngQgPStUncolOctsOff, tmnxChassisNotifySoftwareLocation=tmnxChassisNotifySoftwareLocation, tmnxSyncIfTimingRef1CfgQltyLevel=tmnxSyncIfTimingRef1CfgQltyLevel, tmnxEqCardSoftResetAlarm=tmnxEqCardSoftResetAlarm, tFPAccIngQGrpPlcrOvrLastChgd=tFPAccIngQGrpPlcrOvrLastChgd, tmnxHwContainsEntry=tmnxHwContainsEntry, tmnxPeSoftwareLoadFailed=tmnxPeSoftwareLoadFailed, tFPAccIngQGrpPlcrOvrAdminPIR=tFPAccIngQGrpPlcrOvrAdminPIR, TmnxMdaAtmMode=TmnxMdaAtmMode, tmnxMDAIngHsmdaPoolPolicy=tmnxMDAIngHsmdaPoolPolicy, tmnxChassisPowerSupplyACStatus=tmnxChassisPowerSupplyACStatus, tmnxCcagPathCcUserAssignedMac=tmnxCcagPathCcUserAssignedMac, tmnxCpmCardLastChange=tmnxCpmCardLastChange, tmnxFPAccIngQGrpRowStatus=tmnxFPAccIngQGrpRowStatus, tmnxHwLastChange=tmnxHwLastChange, tmnxSyncIfTimingBITSInUse=tmnxSyncIfTimingBITSInUse, tmnxHsmdaMdaSchOvrClass5Rate=tmnxHsmdaMdaSchOvrClass5Rate, tmnxCpmCardBootOptionLastModified=tmnxCpmCardBootOptionLastModified, tmnxMdaTypeDescription=tmnxMdaTypeDescription, tmnxCcagPathCcLastChanged=tmnxCcagPathCcLastChanged, tmnxIPsecIsaGrpMultiActive=tmnxIPsecIsaGrpMultiActive, tmnxCpmCardConfigFileLastBooted=tmnxCpmCardConfigFileLastBooted, tmnxFPAccIngQGrpInstanceId=tmnxFPAccIngQGrpInstanceId, tmnxFPNetIngQgPStFwdInProfOctsH=tmnxFPNetIngQgPStFwdInProfOctsH, tmnxMDAMcPathMgmtV6v0Group=tmnxMDAMcPathMgmtV6v0Group, tmnxCcmIndex=tmnxCcmIndex, TmnxLEDState=TmnxLEDState, tmnxCardCmplx2IngrFcsOccurTime=tmnxCardCmplx2IngrFcsOccurTime, tmnxCardAssignedType=tmnxCardAssignedType, tmnxFabricSupportedTypes=tmnxFabricSupportedTypes, tmnxIPsecIsaGrpIpTunnels=tmnxIPsecIsaGrpIpTunnels, tmnxSyncIfTimingBITSRxQltyLevel=tmnxSyncIfTimingBITSRxQltyLevel, tmnxFPNetIngQgPStFwdOutProfOctsH=tmnxFPNetIngQgPStFwdOutProfOctsH, tmnxSyncIfTimingBITS2RxQltyLevel=tmnxSyncIfTimingBITS2RxQltyLevel, tmnxSyncIfTimingSystemQltyLevel=tmnxSyncIfTimingSystemQltyLevel, tmnxChassisNotificationV6v1Group=tmnxChassisNotificationV6v1Group, tmnxChassisTypeDescription=tmnxChassisTypeDescription, TmnxChassisIndex=TmnxChassisIndex, tSyncIfTimingAdmRef1NationalUse=tSyncIfTimingAdmRef1NationalUse, tmnxFPAccIngQgPStDrpHPrioOctsH=tmnxFPAccIngQgPStDrpHPrioOctsH, tmnxChassisPowerSupplyPemType=tmnxChassisPowerSupplyPemType, tmnxFanTrayComponentEntry=tmnxFanTrayComponentEntry, tmnxMdaTypeName=tmnxMdaTypeName, tmnxMDAMcPathMgmtAncPathLimit=tmnxMDAMcPathMgmtAncPathLimit, tmnxSyncIfTimingBITS2OutAdminStatus=tmnxSyncIfTimingBITS2OutAdminStatus, tSyncIfTimingAdmTable=tSyncIfTimingAdmTable, tFPAccIngQGrpPlcrOvrTblLstChgd=tFPAccIngQGrpPlcrOvrTblLstChgd, tmnxSyncIfTimingBITS2InAdminStatus=tmnxSyncIfTimingBITS2InAdminStatus, tmnxSyncIfTimingBITSCfgQltyLevel=tmnxSyncIfTimingBITSCfgQltyLevel, tmnxChassisTypeStatus=tmnxChassisTypeStatus, TmnxSETSRefQualified=TmnxSETSRefQualified, tmnxIPsecIsaGrpTunnels=tmnxIPsecIsaGrpTunnels, tmnxChassisComp7710V8v0=tmnxChassisComp7710V8v0, tmnxChassisNotifyObjsV8v0Group=tmnxChassisNotifyObjsV8v0Group, tmnxHwResourceMinAmperageTime=tmnxHwResourceMinAmperageTime, tmnxSyncIfTimingRefOrder1=tmnxSyncIfTimingRefOrder1, tFPAccIngQGrpArbitStatFwdOctsL=tFPAccIngQGrpArbitStatFwdOctsL, tmnxEqSyncIfTimingRef2Quality=tmnxEqSyncIfTimingRef2Quality, tmnxMdaTypeStatus=tmnxMdaTypeStatus, tmnxSyncIfTimingBITSIfType=tmnxSyncIfTimingBITSIfType, tmnxSyncIfTimingNotifV8v0Group=tmnxSyncIfTimingNotifV8v0Group, tmnxHwLastAlarmEvent=tmnxHwLastAlarmEvent, tmnxFPNetIngQgPStDrpHPrioPkts=tmnxFPNetIngQgPStDrpHPrioPkts, tmnxCardCmplx2EgrFcsSrcSlots=tmnxCardCmplx2EgrFcsSrcSlots, tSyncIfTimingAdmBITSIfType=tSyncIfTimingAdmBITSIfType, tmnxFPAccIngQgPStOffHPrioOctsL=tmnxFPAccIngQgPStOffHPrioOctsL, tmnxSyncIfTimingBITS2AdminStatus=tmnxSyncIfTimingBITS2AdminStatus, tmnxCcagPathCcTable=tmnxCcagPathCcTable, tmnxSyncIfTimingPTPInUse=tmnxSyncIfTimingPTPInUse, tmnxFPNetIngQgPStUncolPktsOffL=tmnxFPNetIngQgPStUncolPktsOffL, tmnxIPsecIsaGrpV6v0Group=tmnxIPsecIsaGrpV6v0Group, tmnxSyncIfTimingPTPQualified=tmnxSyncIfTimingPTPQualified, tmnxMDACcagId=tmnxMDACcagId, tmnxFPAccIngQgPStUncolOctsOffL=tmnxFPAccIngQgPStUncolOctsOffL, tmnxHwContainedIndex=tmnxHwContainedIndex, tmnxFPAccIngQGrpAcctgPolId=tmnxFPAccIngQGrpAcctgPolId, tmnxChassisV10v0Compliance=tmnxChassisV10v0Compliance, tmnxMDAIsaTunnelGroupChange=tmnxMDAIsaTunnelGroupChange)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxCardHardResetUnsupMdas=tmnxCardHardResetUnsupMdas, tmnxCardLastBootupReason=tmnxCardLastBootupReason, tmnxFPAccIngQgPStDrpLPrioPkts=tmnxFPAccIngQgPStDrpLPrioPkts, tmnxChassisTotalNumber=tmnxChassisTotalNumber, tmnxEqSyncIfTimingRef2Alarm=tmnxEqSyncIfTimingRef2Alarm, tmnxChassisGroups=tmnxChassisGroups, tmnxCpmFlashEntry=tmnxCpmFlashEntry, tmnxSyncIfTimingBITS2Qualified=tmnxSyncIfTimingBITS2Qualified, tmnxFPNetIngQgPStOffHPrioPktsH=tmnxFPNetIngQgPStOffHPrioPktsH, tmnxMdaV10v0Group=tmnxMdaV10v0Group, tmnxCardCmplx1MemParityOccurTime=tmnxCardCmplx1MemParityOccurTime, tmnxEqSyncIfTimingBITS2Alarm=tmnxEqSyncIfTimingBITS2Alarm, tmnxHwConformance=tmnxHwConformance, tmnxFPAccIngQgPStDrpHPrioOcts=tmnxFPAccIngQgPStDrpHPrioOcts, tmnxHwClass=tmnxHwClass, TmnxSETSRefAlarm=TmnxSETSRefAlarm, tSyncIfTimingAdmRevert=tSyncIfTimingAdmRevert, tmnxFPNetIngQgPStOffHPrioOcts=tmnxFPNetIngQgPStOffHPrioOcts, tmnxMcmTypeTable=tmnxMcmTypeTable, tmnxChassisPowerSupplyTempThreshold=tmnxChassisPowerSupplyTempThreshold, tmnxCcagPathCcAcctPolicyId=tmnxCcagPathCcAcctPolicyId, tmnxCardRateCalcFastQueue=tmnxCardRateCalcFastQueue, tmnxHwID=tmnxHwID, tmnxFabricEntry=tmnxFabricEntry, tmnxFPAccIngQgPStFwdInProfOctsL=tmnxFPAccIngQgPStFwdInProfOctsL, tmnxChassisNotifyObjsGroup=tmnxChassisNotifyObjsGroup, tmnxChassisNumFanTrays=tmnxChassisNumFanTrays, tFPNetIngQGrpArbitStatFwdOctsH=tFPNetIngQGrpArbitStatFwdOctsH, tmnxIPsecIsaGrpTnlHighWMark=tmnxIPsecIsaGrpTnlHighWMark, tmnxSyncIfTimingBITS2TxQltyLevel=tmnxSyncIfTimingBITS2TxQltyLevel, tmnxHwResourceCurrentAmperage=tmnxHwResourceCurrentAmperage, tmnxCpmFlashHwIndex=tmnxCpmFlashHwIndex, tmnxSyncIfTimingBITSQualified=tmnxSyncIfTimingBITSQualified, tmnxCcagTable=tmnxCcagTable, tmnxChassis7750V7v0Compliance=tmnxChassis7750V7v0Compliance, tmnxEqCardFailure=tmnxEqCardFailure, tmnxCpmCardSwitchToRedundantCard=tmnxCpmCardSwitchToRedundantCard, tmnxFPAccIngQgPStOffHPrioPkts=tmnxFPAccIngQgPStOffHPrioPkts, tmnxChassisModeForce=tmnxChassisModeForce, tmnxSyncIfTimingRefOrder2=tmnxSyncIfTimingRefOrder2, tmnxCcagRowStatus=tmnxCcagRowStatus, tmnxMDAHiBwMcastTapCount=tmnxMDAHiBwMcastTapCount, TmnxHwIndex=TmnxHwIndex, tmnxCcagPathCcHwMac=tmnxCcagPathCcHwMac, tSyncIfTimingAdmBITS2InAdminStatus=tSyncIfTimingAdmBITS2InAdminStatus, tmnxFPAccIngQgPStFwdOutProfOcts=tmnxFPAccIngQgPStFwdOutProfOcts, tmnxCcagPathEntry=tmnxCcagPathEntry, tmnxFabricReboot=tmnxFabricReboot, tmnxCcmHwIndex=tmnxCcmHwIndex, tmnxIPsecIsaGrpActiveMda=tmnxIPsecIsaGrpActiveMda, tmnxEqPowerSupplyInserted=tmnxEqPowerSupplyInserted, tmnxHwAssetID=tmnxHwAssetID, tmnxPeCpuCyclesExceeded=tmnxPeCpuCyclesExceeded, tmnxChassisBaseMacAddress=tmnxChassisBaseMacAddress, tmnxChassisOperMode=tmnxChassisOperMode, tmnxFPNetIngQgPStFwdOutProfOctsL=tmnxFPNetIngQgPStFwdOutProfOctsL, tSyncIfTimingAdmBITSAdminStatus=tSyncIfTimingAdmBITSAdminStatus, tmnxSyncIfTimingBITSOutSource=tmnxSyncIfTimingBITSOutSource, tmnxEqWrongCard=tmnxEqWrongCard, tmnxHsmdaMdaSchOvrClass3Rate=tmnxHsmdaMdaSchOvrClass3Rate, tmnxMDAMcPathMgmtPriInUseBw=tmnxMDAMcPathMgmtPriInUseBw, tmnxEqCardInserted=tmnxEqCardInserted, tmnxPeFPGAVersionMismatch=tmnxPeFPGAVersionMismatch, tmnxChassisFanEntry=tmnxChassisFanEntry, tmnxCardCmplx2MemParityOccurTime=tmnxCardCmplx2MemParityOccurTime, tmnxHwResourceMinWattage=tmnxHwResourceMinWattage, tmnxEqFlashDataLoss=tmnxEqFlashDataLoss, tmnxHwSoftwareCodeVersion=tmnxHwSoftwareCodeVersion, tmnxChassisHsmdaV6v0Group=tmnxChassisHsmdaV6v0Group, tmnxChassis7750V6v1Compliance=tmnxChassis7750V6v1Compliance, tmnxChassisAdminLastSetTimer=tmnxChassisAdminLastSetTimer, tmnxCardFailOnError=tmnxCardFailOnError, tmnxFabricHwIndex=tmnxFabricHwIndex, tmnxEqSyncIfTimingSystemQuality=tmnxEqSyncIfTimingSystemQuality, tmnxFPNetIngQgPStDrpHPrioOctsL=tmnxFPNetIngQgPStDrpHPrioOctsL, tmnxCpmFlashOperStatus=tmnxCpmFlashOperStatus, TmnxMdaType=TmnxMdaType, tmnxMcmAssignedType=tmnxMcmAssignedType, tmnxMcmTable=tmnxMcmTable, tmnxMDAEquippedType=tmnxMDAEquippedType, tFPAccIngQGrpPlcrOvrMBS=tFPAccIngQGrpPlcrOvrMBS, tmnxFanTrayCompIndex=tmnxFanTrayCompIndex, tmnxCardTypeTable=tmnxCardTypeTable, TmnxBITSIfType=TmnxBITSIfType, tmnxIPsecIsaGrpTnlLowWMark=tmnxIPsecIsaGrpTnlLowWMark, tmnxIPsecIsaGrpIsaChassis=tmnxIPsecIsaGrpIsaChassis, tmnxChassisMixedModeIomV8v0Group=tmnxChassisMixedModeIomV8v0Group, tmnxHsmdaMdaSchOvrClass2Rate=tmnxHsmdaMdaSchOvrClass2Rate, tmnxCcagPathCcMac=tmnxCcagPathCcMac, tmnxCardCapability=tmnxCardCapability, tmnxEqHwEnhancedCapability=tmnxEqHwEnhancedCapability, tmnxFabricTypeIndex=tmnxFabricTypeIndex, tmnxAtmGroup=tmnxAtmGroup, tmnxEqNotificationRow=tmnxEqNotificationRow, tmnxFPNetIngQgPStDrpLPrioOctsH=tmnxFPNetIngQgPStDrpLPrioOctsH, PYSNMP_MODULE_ID=tmnxChassisMIBModule, tmnxHwFailureReason=tmnxHwFailureReason, tmnxEqSyncIfTimingBITS2AlarmClr=tmnxEqSyncIfTimingBITS2AlarmClr, tmnxChassis7450V7v0Compliance=tmnxChassis7450V7v0Compliance, tmnxChassisNotifyChassisId=tmnxChassisNotifyChassisId, tmnxHwResourceCurrentVoltage=tmnxHwResourceCurrentVoltage, tmnxHwMfgDeviations=tmnxHwMfgDeviations, tmnxMcmTypeIndex=tmnxMcmTypeIndex, tmnxFPNetIngQgPStOffLPrioOctsH=tmnxFPNetIngQgPStOffLPrioOctsH, tmnxChassisNotifyOID=tmnxChassisNotifyOID, tmnxChassisNotificationClear=tmnxChassisNotificationClear, tmnxSyncIfTimingRef1RxQltyLevel=tmnxSyncIfTimingRef1RxQltyLevel, tmnxEqSyncIfTimingPTPAlarmClear=tmnxEqSyncIfTimingPTPAlarmClear, tSyncIfTimingAdmRef2SrcHw=tSyncIfTimingAdmRef2SrcHw, tmnxChassisEntry=tmnxChassisEntry, tmnxHsmdaMdaSchOvrClass4Rate=tmnxHsmdaMdaSchOvrClass4Rate, tmnxEqBackdoorBusFailure=tmnxEqBackdoorBusFailure, tmnxFPAccIngQgPStDrpLPrioPktsL=tmnxFPAccIngQgPStDrpLPrioPktsL, tmnxHwResourcePeakVoltageTime=tmnxHwResourcePeakVoltageTime, tmnxMDAIngNamedPoolPolicy=tmnxMDAIngNamedPoolPolicy, tmnxEqCardPChipCamEvent=tmnxEqCardPChipCamEvent, tmnxChassisNotificationV5v0Group=tmnxChassisNotificationV5v0Group, tmnxMDAMinChannelization=tmnxMDAMinChannelization, tmnxCardSchedRun=tmnxCardSchedRun, tmnxFPAccIngQGrpPStatMode=tmnxFPAccIngQGrpPStatMode, TmnxHwIndexOrZero=TmnxHwIndexOrZero, tmnxFPAccIngQgPStUncolOctsOffH=tmnxFPAccIngQgPStUncolOctsOffH, tmnxChassisNotification=tmnxChassisNotification, tmnxSyncIfTimingV9v0Group=tmnxSyncIfTimingV9v0Group, tmnxMDAEgrHsmdaPoolPolicy=tmnxMDAEgrHsmdaPoolPolicy, tmnxHsmdaMdaSchOvrTable=tmnxHsmdaMdaSchOvrTable, tmnxChassisNotifyCardFailureReason=tmnxChassisNotifyCardFailureReason, tmnxHwParentRelPos=tmnxHwParentRelPos, tmnxHwTempThreshold=tmnxHwTempThreshold, tmnxHsmdaMdaSchOvrClass4WtInGrp=tmnxHsmdaMdaSchOvrClass4WtInGrp, tmnxFabricTypeName=tmnxFabricTypeName, tmnxSyncIfTimingRef1SrcPort=tmnxSyncIfTimingRef1SrcPort, tmnxHwAlarmState=tmnxHwAlarmState, tmnxCardCmplx2CAMErrorOccur=tmnxCardCmplx2CAMErrorOccur, tmnxChassisTypeTable=tmnxChassisTypeTable, TmnxCcagRate=TmnxCcagRate, tmnxCardNumMdaSlots=tmnxCardNumMdaSlots, tmnxFPNetIngQgPStFwdOutProfOcts=tmnxFPNetIngQgPStFwdOutProfOcts, tFPAccIngQGrpArbitStatEntry=tFPAccIngQGrpArbitStatEntry, tmnxChassisV4v0Compliance=tmnxChassisV4v0Compliance, tmnxSyncIfTimingNotifyV9v0Group=tmnxSyncIfTimingNotifyV9v0Group, tmnxMDAEgrHsmdaThrshHiBrstInc=tmnxMDAEgrHsmdaThrshHiBrstInc, tmnxFPNetIngQGrpTableLastChgd=tmnxFPNetIngQGrpTableLastChgd, tmnxSyncIfTimingPTPCfgQltyLevel=tmnxSyncIfTimingPTPCfgQltyLevel, tmnxMDAHwIndex=tmnxMDAHwIndex, tmnxIPsecV7v0Group=tmnxIPsecV7v0Group, tmnxHsmdaMdaSchOvrClass6WtInGrp=tmnxHsmdaMdaSchOvrClass6WtInGrp, TmnxChassisPemType=TmnxChassisPemType, tFPAccIngQGrpArbitStatName=tFPAccIngQGrpArbitStatName, tmnxEqSyncIfTimingRef1Quality=tmnxEqSyncIfTimingRef1Quality, tmnxFPAccIngQGrpTable=tmnxFPAccIngQGrpTable, tmnxCardCmplx1EgrFcsOccur=tmnxCardCmplx1EgrFcsOccur, tmnxFPNetIngQGrpPStatMode=tmnxFPNetIngQGrpPStatMode, tmnxMDAEgrHsmdaThrshLoBrstMult=tmnxMDAEgrHsmdaThrshLoBrstMult, tmnxFPAccIngQgPStUncolPktsOff=tmnxFPAccIngQgPStUncolPktsOff, TmnxRefInState=TmnxRefInState, tmnxHwObjs=tmnxHwObjs, tmnxChassisRowStatus=tmnxChassisRowStatus, tFPNetIngQGrpArbitStatFwdPktsH=tFPNetIngQGrpArbitStatFwdPktsH, tFPAccIngQGrpPlcrOvrTable=tFPAccIngQGrpPlcrOvrTable, tmnxEqSyncIfTimingRefSwitch=tmnxEqSyncIfTimingRefSwitch, tmnxPeFirmwareVersionWarning=tmnxPeFirmwareVersionWarning, tmnxEqMdaSyncENotCompatible=tmnxEqMdaSyncENotCompatible, tSyncIfTimingAdmPTPAdminStatus=tSyncIfTimingAdmPTPAdminStatus, tmnxFPMcPathMgmtBwPlcyName=tmnxFPMcPathMgmtBwPlcyName, tmnxFPNetIngQgPStOffHPrioPkts=tmnxFPNetIngQgPStOffHPrioPkts, tmnxHwIndex=tmnxHwIndex, tmnxHsmdaMdaSchOvrClass5WtInGrp=tmnxHsmdaMdaSchOvrClass5WtInGrp, tmnxFPAccIngQgPStOffLPrioPktsH=tmnxFPAccIngQgPStOffLPrioPktsH, tmnxMDASupportedTypes=tmnxMDASupportedTypes, tmnxHwEntry=tmnxHwEntry, tmnxCcagPathCcType=tmnxCcagPathCcType, tmnxFPWredResvCbsMax=tmnxFPWredResvCbsMax, tFPNetIngQGrpArbitStatFwdOctsL=tFPNetIngQGrpArbitStatFwdOctsL, tmnxCpmCardBootOptionSource=tmnxCpmCardBootOptionSource, tmnxHwTable=tmnxHwTable, tmnxFPWredBufAllocMax=tmnxFPWredBufAllocMax, tmnxCpmCardAssignedType=tmnxCpmCardAssignedType, tmnxCpmCardCmplxCAMErrOccurTime=tmnxCpmCardCmplxCAMErrOccurTime, tmnxHwResourceTable=tmnxHwResourceTable, tmnxCardNumMdas=tmnxCardNumMdas, tmnxMcmTypeStatus=tmnxMcmTypeStatus, tmnxFPNetIngQgPStUncolPktsOff=tmnxFPNetIngQgPStUncolPktsOff, tmnxChassisIndex=tmnxChassisIndex, tmnxHwMfgString=tmnxHwMfgString, tmnxCcmTypeStatus=tmnxCcmTypeStatus, tmnxSyncIfTimingBITSTxQltyLevel=tmnxSyncIfTimingBITSTxQltyLevel, tmnxCcmTypeIndex=tmnxCcmTypeIndex, tmnxEqPowerSupplyRemoved=tmnxEqPowerSupplyRemoved, tmnxChassisObsoleteGroup=tmnxChassisObsoleteGroup, tmnxHwClearAlarms=tmnxHwClearAlarms, tmnxSyncIfTimingOtherCPMState=tmnxSyncIfTimingOtherCPMState, tmnxCcmTypeName=tmnxCcmTypeName, tmnxMDAV4v0Group=tmnxMDAV4v0Group, tmnxHwConfigChange=tmnxHwConfigChange, tmnxMDACapabilities=tmnxMDACapabilities, tmnx7710SETSRefSrcHwV6v0Group=tmnx7710SETSRefSrcHwV6v0Group, tmnxCcagPathId=tmnxCcagPathId, TmnxChassisMode=TmnxChassisMode, tmnxSyncIfTimingRef2State=tmnxSyncIfTimingRef2State, tmnxFPTable=tmnxFPTable, TmnxSETSRefSource=TmnxSETSRefSource, tmnxChassisName=tmnxChassisName, tmnxIPsecIsaGrpPrimaryIsa=tmnxIPsecIsaGrpPrimaryIsa, tmnxChassis7x50V8v0Compliance=tmnxChassis7x50V8v0Compliance, tmnxCpmCardReboot=tmnxCpmCardReboot, tmnxChassisNotificationV4v0Group=tmnxChassisNotificationV4v0Group, tmnxChassisType=tmnxChassisType, tmnxFPNetIngQgPStUncolOctsOff=tmnxFPNetIngQgPStUncolOctsOff, tmnxCardCmplx1EgrFcsOccurTime=tmnxCardCmplx1EgrFcsOccurTime, tmnxMDADiffTimestampFreq=tmnxMDADiffTimestampFreq, tSyncIfTimingAdmRefOrder4=tSyncIfTimingAdmRefOrder4, tSyncIfTimingAdmRef1BITSIfType=tSyncIfTimingAdmRef1BITSIfType, tmnxCardCmplx1IngrFcsOccur=tmnxCardCmplx1IngrFcsOccur, tmnxCcagOperStatus=tmnxCcagOperStatus, tmnxFabricLastChange=tmnxFabricLastChange, tmnxFabricAssignedType=tmnxFabricAssignedType, tFPAccIngQGrpPlcrOvrPktOffset=tFPAccIngQGrpPlcrOvrPktOffset, tmnxIPsecIsaGrpId=tmnxIPsecIsaGrpId, tmnxPeSoftwareError=tmnxPeSoftwareError, tmnxHwMfgAssemblyNumber=tmnxHwMfgAssemblyNumber, tmnxCardCmplx2MemParityOccur=tmnxCardCmplx2MemParityOccur, tmnxEqCardPChipError=tmnxEqCardPChipError, TmnxHwClass=TmnxHwClass, tmnxHwSwState=tmnxHwSwState, tmnxChassisComp7710=tmnxChassisComp7710, TmnxChassisIndexOrZero=TmnxChassisIndexOrZero, tmnxFPAccIngQgPStDrpHPrioOctsL=tmnxFPAccIngQgPStDrpHPrioOctsL, tmnxFPAccIngQgPStOffHPrioPktsL=tmnxFPAccIngQgPStOffHPrioPktsL, tmnxEqPowerSupplyFailure=tmnxEqPowerSupplyFailure, tmnxHwResourcePeakWattage=tmnxHwResourcePeakWattage, tmnxCpmCardConfigUserLastModified=tmnxCpmCardConfigUserLastModified, tmnxMDATable=tmnxMDATable, tmnxFPAccIngQgPStOffHPrioOctsH=tmnxFPAccIngQgPStOffHPrioOctsH, tmnxSyncIfTimingRef1BITSIfType=tmnxSyncIfTimingRef1BITSIfType, tmnxChassisFanIndex=tmnxChassisFanIndex, tmnxChassisOverTempState=tmnxChassisOverTempState, tSyncIfTimingAdmRef1CfgQltyLevel=tSyncIfTimingAdmRef1CfgQltyLevel, tmnxFPAccIngQgPStFwdInProfPktsH=tmnxFPAccIngQgPStFwdInProfPktsH, tmnxCpmCardMemorySize=tmnxCpmCardMemorySize, tmnxFPAccIngQGrpPStatTable=tmnxFPAccIngQGrpPStatTable, tSyncIfTimingAdmRef2BITSIfType=tSyncIfTimingAdmRef2BITSIfType, tmnxFPAccIngQgPStFwdOutProfPktsL=tmnxFPAccIngQgPStFwdOutProfPktsL, tmnxFPAccIngQgPStFwdInProfOcts=tmnxFPAccIngQgPStFwdInProfOcts, tmnxChassisV10v0Group=tmnxChassisV10v0Group, tmnxSyncIfTimingBITSOutRefSel=tmnxSyncIfTimingBITSOutRefSel, tmnxHwBaseMacAddress=tmnxHwBaseMacAddress, tmnxCpmCardAllowedTypes=tmnxCpmCardAllowedTypes, tmnxChassisAdminOwner=tmnxChassisAdminOwner, tmnxMdaXplV5v0Group=tmnxMdaXplV5v0Group, tmnxCcagPathCcEgrPoolSlpPlcy=tmnxCcagPathCcEgrPoolSlpPlcy, TmnxTunnelGroupIdOrZero=TmnxTunnelGroupIdOrZero, tmnxCpmCardNum=tmnxCpmCardNum, tFPNetIngQGrpArbitStatFwdOcts=tFPNetIngQGrpArbitStatFwdOcts)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", TmnxDeviceState=TmnxDeviceState, tmnxChassisUpdateTimeLeft=tmnxChassisUpdateTimeLeft, tmnxMDAV9v0Group=tmnxMDAV9v0Group, tFPAccIngQGrpArbitStatTable=tFPAccIngQGrpArbitStatTable, tmnxCpmCardBootOptionLastSaved=tmnxCpmCardBootOptionLastSaved, tmnxFPAccIngQgPStUncolPktsOffL=tmnxFPAccIngQgPStUncolPktsOffL, tmnxHwAdminState=tmnxHwAdminState, tmnxCpmFlashFirmwareRevision=tmnxCpmFlashFirmwareRevision, tmnxFPAccIngQGrpLastChgd=tmnxFPAccIngQGrpLastChgd, tmnxCcmEquippedType=tmnxCcmEquippedType, tmnxCardTypeName=tmnxCardTypeName, tmnxPeStorageProblem=tmnxPeStorageProblem, tmnxSyncIfTimingBITSAdminStatus=tmnxSyncIfTimingBITSAdminStatus, tmnxCpmFlashCapacity=tmnxCpmFlashCapacity, tmnxFPHiBwMcastAlarm=tmnxFPHiBwMcastAlarm, tmnxFPNetIngQgPStUncolPktsOffH=tmnxFPNetIngQgPStUncolPktsOffH, tmnxEqSyncIfTimingHoldoverClear=tmnxEqSyncIfTimingHoldoverClear, tmnxChassisCriticalLEDState=tmnxChassisCriticalLEDState, tmnxFPAccIngQGrpEntry=tmnxFPAccIngQGrpEntry, tmnxChassisPowerSupplyId=tmnxChassisPowerSupplyId, tSyncIfTimingAdmRefOrder5=tSyncIfTimingAdmRefOrder5, tmnxFPAccIngQGrpTableLastChgd=tmnxFPAccIngQGrpTableLastChgd, tmnxChassisAdminObjects=tmnxChassisAdminObjects, tmnxSyncIfTimingRevert=tmnxSyncIfTimingRevert, tmnxMcmSupportedTypes=tmnxMcmSupportedTypes, tmnxChassisUpgrade=tmnxChassisUpgrade, tmnxFPNetIngQgPStOffHPrioOctsH=tmnxFPNetIngQgPStOffHPrioOctsH, tmnxSyncIfTimingBITS2Alarm=tmnxSyncIfTimingBITS2Alarm, tmnxMDASlotNum=tmnxMDASlotNum, tmnxFPWredAdminState=tmnxFPWredAdminState, tmnxChassisNotifyObjsV6v1Group=tmnxChassisNotifyObjsV6v1Group, tmnxChassisMIBModule=tmnxChassisMIBModule, TmnxSlotNumOrZero=TmnxSlotNumOrZero, tmnxCpmCardEquippedType=tmnxCpmCardEquippedType, TmnxCardRebootType=TmnxCardRebootType, tmnxIPsecIsaGrpDescription=tmnxIPsecIsaGrpDescription, tmnxHwContainedIn=tmnxHwContainedIn, tmnxSyncIfTimingEntry=tmnxSyncIfTimingEntry, tmnxMDAHiBwMcastGroup=tmnxMDAHiBwMcastGroup, tmnxHwBootCodeVersion=tmnxHwBootCodeVersion, tmnxSyncIfTimingRef1InUse=tmnxSyncIfTimingRef1InUse, tmnxSyncIfTimingBITSOutAdmStatus=tmnxSyncIfTimingBITSOutAdmStatus, tmnxFPNetIngQgPStOffLPrioPkts=tmnxFPNetIngQgPStOffLPrioPkts, tmnxEqSyncIfTimingBITSAlarm=tmnxEqSyncIfTimingBITSAlarm, tSyncIfTimingAdmRef1SrcPort=tSyncIfTimingAdmRef1SrcPort, tmnxChassisV3v0Group=tmnxChassisV3v0Group, tmnxCardCmplx2CAMErrorOccurTime=tmnxCardCmplx2CAMErrorOccurTime, tmnxFPNetIngQgPStDrpHPrioPktsH=tmnxFPNetIngQgPStDrpHPrioPktsH, tmnxCcagCcaRate=tmnxCcagCcaRate, tmnxCardV7v0Group=tmnxCardV7v0Group, tmnxFPWredResvCbsMin=tmnxFPWredResvCbsMin, tmnxCardPchipV5v0Group=tmnxCardPchipV5v0Group, tmnxChassisCLLICode=tmnxChassisCLLICode, tmnxMDAIsaTunnelGroupInUse=tmnxMDAIsaTunnelGroupInUse, tmnxRedSecondaryCPMStatusChange=tmnxRedSecondaryCPMStatusChange, tmnxSyncIfTimingRef1NationalUse=tmnxSyncIfTimingRef1NationalUse, tmnxIPsecIsaGrpMaxTunnels=tmnxIPsecIsaGrpMaxTunnels, tmnxFPWredV7v0Group=tmnxFPWredV7v0Group, tmnxChassisFanOperStatus=tmnxChassisFanOperStatus, tSyncIfTimingAdmRef1SrcHw=tSyncIfTimingAdmRef1SrcHw, tmnxCpmCardNumCpus=tmnxCpmCardNumCpus, tmnxEqSyncIfTimingBITSAlarmClear=tmnxEqSyncIfTimingBITSAlarmClear, tmnxCcagPathCcEgrPoolResvCbs=tmnxCcagPathCcEgrPoolResvCbs, tmnxPeOutOfMemory=tmnxPeOutOfMemory, tmnxCardObjs=tmnxCardObjs, tmnxCpmCardTable=tmnxCpmCardTable, tmnxFabricTypeEntry=tmnxFabricTypeEntry, tmnxFPNetIngQgPStFwdInProfPkts=tmnxFPNetIngQgPStFwdInProfPkts, tmnxChassisComp7710V6v0=tmnxChassisComp7710V6v0, tmnxSyncIfTimingOtherCPMInUse=tmnxSyncIfTimingOtherCPMInUse, tmnxCardTypeStatus=tmnxCardTypeStatus, tmnxFPAccIngQgPStDrpHPrioPkts=tmnxFPAccIngQgPStDrpHPrioPkts, tmnxChassisPowerSupplyTempStatus=tmnxChassisPowerSupplyTempStatus, tmnxCcmTable=tmnxCcmTable, tmnxChassisNotifyCardName=tmnxChassisNotifyCardName, tSyncIfTimingAdmRef2SrcPort=tSyncIfTimingAdmRef2SrcPort, tmnxChassisNotifyObjsV9v0Group=tmnxChassisNotifyObjsV9v0Group, tFPAccIngQGrpArbitStatFwdPktsL=tFPAccIngQGrpArbitStatFwdPktsL, tmnxChassisCompliances=tmnxChassisCompliances, tmnxChassisNotifyObjsV6v0Group=tmnxChassisNotifyObjsV6v0Group, TmnxCcagRateOption=TmnxCcagRateOption, tmnxFPNetIngQGrpCollectStats=tmnxFPNetIngQGrpCollectStats, tmnxFPNetIngQGrpRowStatus=tmnxFPNetIngQGrpRowStatus, tmnxSyncIfTimingTable=tmnxSyncIfTimingTable, tmnxCardCmplx1IngrFcsOccurTime=tmnxCardCmplx1IngrFcsOccurTime, tmnxChassisV5v0Group=tmnxChassisV5v0Group, tmnxMDATxTimingSelected=tmnxMDATxTimingSelected, tmnxCardLastChange=tmnxCardLastChange, tmnxHsmdaMdaSchOvrEntry=tmnxHsmdaMdaSchOvrEntry, tmnxVirtualSchedulerAdjEntry=tmnxVirtualSchedulerAdjEntry, tFPNetIngQGrpArbitStatName=tFPNetIngQGrpArbitStatName, TmnxMDAChanType=TmnxMDAChanType, tmnxCcagPathCcIngPoolSlpPlcy=tmnxCcagPathCcIngPoolSlpPlcy, tmnxEqCardPChipMemoryEvent=tmnxEqCardPChipMemoryEvent, tmnxFPAccIngQGrpPStatPolicerId=tmnxFPAccIngQGrpPStatPolicerId, tmnxEqSyncIfTimingRef1Alarm=tmnxEqSyncIfTimingRef1Alarm, tmnxFPAccIngQgPStDrpHPrioPktsL=tmnxFPAccIngQgPStDrpHPrioPktsL, tmnxIPsecIsaGrpIpMaxTunnels=tmnxIPsecIsaGrpIpMaxTunnels, tmnxHwIsFRU=tmnxHwIsFRU, tmnxFPAccIngQgPStOffLPrioOctsL=tmnxFPAccIngQgPStOffLPrioOctsL, tmnxChassisUpgradeComplete=tmnxChassisUpgradeComplete, tmnxMDASyncIfTimingStatus=tmnxMDASyncIfTimingStatus, tmnxFPAccIngQgPStFwdOutProfOctsL=tmnxFPAccIngQgPStFwdOutProfOctsL, tmnxFPHiBwMcastGroup=tmnxFPHiBwMcastGroup, tmnxChassisAdminControlApply=tmnxChassisAdminControlApply, tmnxSyncIfTimingRef2InUse=tmnxSyncIfTimingRef2InUse, tmnxMDAEntry=tmnxMDAEntry, tmnxHwNotification=tmnxHwNotification, TmnxSlotNum=TmnxSlotNum, tmnxHwResourceMinWattageTime=tmnxHwResourceMinWattageTime, tmnxFPAccIngQGrpDescr=tmnxFPAccIngQGrpDescr, tmnxCardFwdDirection=tmnxCardFwdDirection, tmnxHsmdaMdaSchOvrClass3WtInGrp=tmnxHsmdaMdaSchOvrClass3WtInGrp)
