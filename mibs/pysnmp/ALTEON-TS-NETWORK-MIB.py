#
# PySNMP MIB module ALTEON-TS-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-TS-NETWORK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:05:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
stats, information, operCmds = mibBuilder.importSymbols("ALTEON-TIGON-SWITCH-MIB", "stats", "information", "operCmds")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Gauge32, Unsigned32, NotificationType, Integer32, Counter64, ObjectIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Gauge32", "Unsigned32", "NotificationType", "Integer32", "Counter64", "ObjectIdentity", "Counter32", "TimeTicks")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
iprouting = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3))
vrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15))
ripStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9))
ospfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22))
ip_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3)).setLabel("ip-info")
vrrp_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4)).setLabel("vrrp-info")
ospfinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5))
vrrpOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5))
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('mandatory')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('mandatory')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('mandatory')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('mandatory')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('mandatory')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('mandatory')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('mandatory')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('mandatory')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('mandatory')
ipCurCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setStatus('mandatory')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('mandatory')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('mandatory')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('mandatory')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('mandatory')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('mandatory')
ipNewCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setStatus('mandatory')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('mandatory')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('mandatory')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('mandatory')
ipNewCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setStatus('mandatory')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('mandatory')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('mandatory')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('mandatory')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('mandatory')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('mandatory')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('mandatory')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('mandatory')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('mandatory')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('mandatory')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('mandatory')
ipCurCfgGwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwVlan.setStatus('mandatory')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('mandatory')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('mandatory')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('mandatory')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('mandatory')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('mandatory')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('mandatory')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('mandatory')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('mandatory')
ipNewCfgGwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwVlan.setStatus('mandatory')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('mandatory')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('mandatory')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('mandatory')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('mandatory')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('mandatory')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('mandatory')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('mandatory')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('mandatory')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('mandatory')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('mandatory')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('mandatory')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('mandatory')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('mandatory')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('mandatory')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('mandatory')
ipForward = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9))
ripConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1))
ripCurCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgSupply.setStatus('mandatory')
ripNewCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgSupply.setStatus('mandatory')
ripCurCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgListen.setStatus('mandatory')
ripNewCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgListen.setStatus('mandatory')
ripCurCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgDefListen.setStatus('mandatory')
ripNewCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgDefListen.setStatus('mandatory')
ripCurCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setStatus('mandatory')
ripNewCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setStatus('mandatory')
ripCurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setStatus('mandatory')
ripNewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setStatus('mandatory')
ripCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgState.setStatus('mandatory')
ripNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgState.setStatus('mandatory')
ripCurCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setStatus('mandatory')
ripNewCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setStatus('mandatory')
ripCurCfgVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgVip.setStatus('mandatory')
ripNewCfgVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgVip.setStatus('mandatory')
ipFwdCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2), )
if mibBuilder.loadTexts: ipFwdCurCfgPortTable.setStatus('mandatory')
ipFwdCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdCurCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgPortEntry.setStatus('mandatory')
ipFwdCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortIndex.setStatus('mandatory')
ipFwdCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortState.setStatus('mandatory')
ipFwdNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3), )
if mibBuilder.loadTexts: ipFwdNewCfgPortTable.setStatus('mandatory')
ipFwdNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdNewCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgPortEntry.setStatus('mandatory')
ipFwdNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgPortIndex.setStatus('mandatory')
ipFwdNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgPortState.setStatus('mandatory')
ipFwdCurCfgLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14), )
if mibBuilder.loadTexts: ipFwdCurCfgLocalTable.setStatus('mandatory')
ipFwdCurCfgLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdCurCfgLocalIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgLocalEntry.setStatus('mandatory')
ipFwdCurCfgLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalIndex.setStatus('mandatory')
ipFwdCurCfgLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalSubnet.setStatus('mandatory')
ipFwdCurCfgLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalMask.setStatus('mandatory')
ipFwdNewCfgLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15), )
if mibBuilder.loadTexts: ipFwdNewCfgLocalTable.setStatus('mandatory')
ipFwdNewCfgLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdNewCfgLocalIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgLocalEntry.setStatus('mandatory')
ipFwdNewCfgLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgLocalIndex.setStatus('mandatory')
ipFwdNewCfgLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalSubnet.setStatus('mandatory')
ipFwdNewCfgLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalMask.setStatus('mandatory')
ipFwdNewCfgLocalDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalDelete.setStatus('mandatory')
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('mandatory')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('mandatory')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('mandatory')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('mandatory')
ipFwdPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdPortTableMaxSize.setStatus('mandatory')
ipFwdLocalTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdLocalTableMaxSize.setStatus('mandatory')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('mandatory')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('mandatory')
ipCurCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwMetric.setStatus('mandatory')
ipNewCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwMetric.setStatus('mandatory')
ipCurCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setStatus('mandatory')
ipNewCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setStatus('mandatory')
ipCurCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setStatus('mandatory')
ipNewCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setStatus('mandatory')
ipCurCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpState.setStatus('mandatory')
ipNewCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpState.setStatus('mandatory')
ipStaticRouteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setStatus('mandatory')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('mandatory')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('mandatory')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('mandatory')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('mandatory')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('mandatory')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('mandatory')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('mandatory')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('mandatory')
vrrpCurCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setStatus('mandatory')
vrrpNewCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setStatus('mandatory')
vrrpCurCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setStatus('mandatory')
vrrpNewCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setStatus('mandatory')
vrrpCurCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setStatus('mandatory')
vrrpNewCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setStatus('mandatory')
vrrpCurCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setStatus('mandatory')
vrrpNewCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setStatus('mandatory')
vrrpCurCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrvInc.setStatus('mandatory')
vrrpNewCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrvInc.setStatus('mandatory')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('mandatory')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('mandatory')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('mandatory')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('mandatory')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('mandatory')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('mandatory')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('mandatory')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('mandatory')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('mandatory')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('mandatory')
vrrpCurCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setStatus('mandatory')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('mandatory')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('mandatory')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('mandatory')
vrrpCurCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setStatus('mandatory')
vrrpCurCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setStatus('mandatory')
vrrpCurCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setStatus('mandatory')
vrrpCurCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrv.setStatus('mandatory')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('mandatory')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('mandatory')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('mandatory')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('mandatory')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('mandatory')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('mandatory')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('mandatory')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('mandatory')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('mandatory')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('mandatory')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('mandatory')
vrrpNewCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setStatus('mandatory')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('mandatory')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('mandatory')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('mandatory')
vrrpNewCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setStatus('mandatory')
vrrpNewCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setStatus('mandatory')
vrrpNewCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setStatus('mandatory')
vrrpNewCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrv.setStatus('mandatory')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('mandatory')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('mandatory')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('mandatory')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('mandatory')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('mandatory')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('mandatory')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('mandatory')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('mandatory')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('mandatory')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('mandatory')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrv.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrv.setStatus('mandatory')
vrrpVirtRtrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setStatus('mandatory')
vrrpIfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setStatus('mandatory')
vrrpVirtRtrGrpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setStatus('mandatory')
ripStatInPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPkts.setStatus('mandatory')
ripStatOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPkts.setStatus('mandatory')
ripStatInErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInErrorPkts.setStatus('mandatory')
ripStatRoutesAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatRoutesAgedOut.setStatus('mandatory')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('mandatory')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('mandatory')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('mandatory')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('mandatory')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('mandatory')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('mandatory')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('mandatory')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('mandatory')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('mandatory')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('mandatory')
vrrpStatOutBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setStatus('mandatory')
ipRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1), )
if mibBuilder.loadTexts: ipRouteInfoTable.setStatus('mandatory')
ipRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipRouteInfoIndx"))
if mibBuilder.loadTexts: ipRouteInfoEntry.setStatus('mandatory')
ipRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoIndx.setStatus('mandatory')
ipRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoDestIp.setStatus('mandatory')
ipRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMask.setStatus('mandatory')
ipRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway.setStatus('mandatory')
ipRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("fixed", 1), ("icmp", 2), ("static", 3), ("snmp", 4), ("addr", 5), ("rip", 6), ("broadcast", 7), ("martian", 8), ("multicast", 9), ("vip", 10), ("bgp", 11), ("none", 12), ("ospf", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoTag.setStatus('mandatory')
ipRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoType.setStatus('mandatory')
ipRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoInterface.setStatus('mandatory')
ospfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21))
ospfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1))
ospfCurCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setStatus('mandatory')
ospfNewCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setStatus('mandatory')
ospfCurCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setStatus('mandatory')
ospfNewCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setStatus('mandatory')
ospfIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setStatus('mandatory')
ospfAreaTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setStatus('mandatory')
ospfRangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setStatus('mandatory')
ospfVirtIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setStatus('mandatory')
ospfHostTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfHostTableMaxSize.setStatus('mandatory')
ospfCurCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2), )
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setStatus('mandatory')
ospfCurCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfCurCfgAreaIndex"), (0, "ALTEON-TS-NETWORK-MIB", "ospfCurCfgAreaId"))
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setStatus('mandatory')
ospfCurCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setStatus('mandatory')
ospfCurCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaId.setStatus('mandatory')
ospfCurCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setStatus('mandatory')
ospfCurCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setStatus('mandatory')
ospfNewCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3), )
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setStatus('mandatory')
ospfNewCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfNewCfgAreaIndex"), (0, "ALTEON-TS-NETWORK-MIB", "ospfNewCfgAreaId"))
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setStatus('mandatory')
ospfNewCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setStatus('mandatory')
ospfNewCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaId.setStatus('mandatory')
ospfNewCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setStatus('mandatory')
ospfNewCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setStatus('mandatory')
ospfGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1))
ospfCumRxTxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1))
ospfCumNbrChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2))
ospfCumIntfChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3))
ospfTimersKickOffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4))
ospfArea = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2))
ospfAreaRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1), )
if mibBuilder.loadTexts: ospfAreaRxTxStats.setStatus('mandatory')
ospfAreaRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaRxTxIndex"))
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setStatus('mandatory')
ospfAreaRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setStatus('mandatory')
ospfAreaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxPkts.setStatus('mandatory')
ospfAreaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxPkts.setStatus('mandatory')
ospfAreaRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxHello.setStatus('mandatory')
ospfAreaTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxHello.setStatus('mandatory')
ospfAreaRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxDatabase.setStatus('mandatory')
ospfAreaTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxDatabase.setStatus('mandatory')
ospfAreaRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setStatus('mandatory')
ospfAreaTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setStatus('mandatory')
ospfAreaRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setStatus('mandatory')
ospfAreaTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setStatus('mandatory')
ospfAreaRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setStatus('mandatory')
ospfAreaTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setStatus('mandatory')
ospfAreaNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2), )
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setStatus('mandatory')
ospfAreaNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaNbrIndex"))
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setStatus('mandatory')
ospfAreaNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrIndex.setStatus('mandatory')
ospfAreaNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrhello.setStatus('mandatory')
ospfAreaNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrStart.setStatus('mandatory')
ospfAreaNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setStatus('mandatory')
ospfAreaNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setStatus('mandatory')
ospfAreaNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setStatus('mandatory')
ospfAreaNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setStatus('mandatory')
ospfAreaNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setStatus('mandatory')
ospfAreaNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setStatus('mandatory')
ospfAreaNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN1way.setStatus('mandatory')
ospfAreaNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setStatus('mandatory')
ospfAreaNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrDown.setStatus('mandatory')
ospfAreaChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3), )
if mibBuilder.loadTexts: ospfAreaChangeStats.setStatus('mandatory')
ospfAreaChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaIntfIndex"))
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setStatus('mandatory')
ospfAreaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfIndex.setStatus('mandatory')
ospfAreaIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfHello.setStatus('mandatory')
ospfAreaIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfDown.setStatus('mandatory')
ospfAreaIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfLoop.setStatus('mandatory')
ospfAreaIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setStatus('mandatory')
ospfAreaIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setStatus('mandatory')
ospfAreaIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfBackup.setStatus('mandatory')
ospfAreaIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setStatus('mandatory')
ospfInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3))
ospfIntfRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1), )
if mibBuilder.loadTexts: ospfIntfRxTxStats.setStatus('mandatory')
ospfIntfRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIntfRxTxIndex"))
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setStatus('mandatory')
ospfIntfRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setStatus('mandatory')
ospfIntfRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxPkts.setStatus('mandatory')
ospfIntfTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxPkts.setStatus('mandatory')
ospfIntfRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxHello.setStatus('mandatory')
ospfIntfTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxHello.setStatus('mandatory')
ospfIntfRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxDatabase.setStatus('mandatory')
ospfIntfTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxDatabase.setStatus('mandatory')
ospfIntfRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setStatus('mandatory')
ospfIntfTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setStatus('mandatory')
ospfIntfRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setStatus('mandatory')
ospfIntfTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setStatus('mandatory')
ospfIntfRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setStatus('mandatory')
ospfIntfTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setStatus('mandatory')
ospfIntfNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2), )
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setStatus('mandatory')
ospfIntfNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIntfNbrIndex"))
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setStatus('mandatory')
ospfIntfNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrIndex.setStatus('mandatory')
ospfIntfNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrhello.setStatus('mandatory')
ospfIntfNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrStart.setStatus('mandatory')
ospfIntfNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setStatus('mandatory')
ospfIntfNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setStatus('mandatory')
ospfIntfNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setStatus('mandatory')
ospfIntfNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setStatus('mandatory')
ospfIntfNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setStatus('mandatory')
ospfIntfNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setStatus('mandatory')
ospfIntfNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN1way.setStatus('mandatory')
ospfIntfNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setStatus('mandatory')
ospfIntfNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrDown.setStatus('mandatory')
ospfIntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3), )
if mibBuilder.loadTexts: ospfIntfChangeStats.setStatus('mandatory')
ospfIntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIntfIndex"))
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setStatus('mandatory')
ospfIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfIndex.setStatus('mandatory')
ospfIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfHello.setStatus('mandatory')
ospfIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfDown.setStatus('mandatory')
ospfIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfLoop.setStatus('mandatory')
ospfIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfUnloop.setStatus('mandatory')
ospfIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfWaitTimer.setStatus('mandatory')
ospfIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfBackup.setStatus('mandatory')
ospfIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrChange.setStatus('mandatory')
ospfCumRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxPkts.setStatus('mandatory')
ospfCumTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxPkts.setStatus('mandatory')
ospfCumRxHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxHello.setStatus('mandatory')
ospfCumTxHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxHello.setStatus('mandatory')
ospfCumRxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxDatabase.setStatus('mandatory')
ospfCumTxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxDatabase.setStatus('mandatory')
ospfCumRxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsReqs.setStatus('mandatory')
ospfCumTxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsReqs.setStatus('mandatory')
ospfCumRxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsAcks.setStatus('mandatory')
ospfCumTxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsAcks.setStatus('mandatory')
ospfCumRxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setStatus('mandatory')
ospfCumTxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setStatus('mandatory')
ospfCumNbrhello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrhello.setStatus('mandatory')
ospfCumNbrStart = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrStart.setStatus('mandatory')
ospfCumNbrAdjointOk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setStatus('mandatory')
ospfCumNbrNegotiationDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setStatus('mandatory')
ospfCumNbrExchangeDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setStatus('mandatory')
ospfCumNbrBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setStatus('mandatory')
ospfCumNbrBadSequence = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setStatus('mandatory')
ospfCumNbrLoadingDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setStatus('mandatory')
ospfCumNbrN1way = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN1way.setStatus('mandatory')
ospfCumNbrRstAd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrRstAd.setStatus('mandatory')
ospfCumNbrDown = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrDown.setStatus('mandatory')
ospfCumIntfHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfHello.setStatus('mandatory')
ospfCumIntfDown = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfDown.setStatus('mandatory')
ospfCumIntfLoop = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfLoop.setStatus('mandatory')
ospfCumIntfUnloop = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfUnloop.setStatus('mandatory')
ospfCumIntfWaitTimer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setStatus('mandatory')
ospfCumIntfBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfBackup.setStatus('mandatory')
ospfCumIntfNbrChange = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setStatus('mandatory')
ospfTmrsKckOffHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setStatus('mandatory')
ospfTmrsKckOffRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setStatus('mandatory')
ospfTmrsKckOffLsaLock = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setStatus('mandatory')
ospfTmrsKckOffLsaAck = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setStatus('mandatory')
ospfTmrsKckOffDbage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setStatus('mandatory')
ospfTmrsKckOffSummary = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setStatus('mandatory')
ospfTmrsKckOffAseExport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setStatus('mandatory')
ospfGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1))
ospfStartTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStartTime.setStatus('mandatory')
ospfProcessUptime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfProcessUptime.setStatus('mandatory')
ospfLsTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsTypesSupported.setStatus('mandatory')
ospfIntfCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfCountForRouter.setStatus('mandatory')
ospfVlinkCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setStatus('mandatory')
ospfTotalNeighbours = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNeighbours.setStatus('mandatory')
ospfNbrInInitState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInInitState.setStatus('mandatory')
ospfNbrInExchState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInExchState.setStatus('mandatory')
ospfNbrInFullState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInFullState.setStatus('mandatory')
ospfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalAreas.setStatus('mandatory')
ospfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalTransitAreas.setStatus('mandatory')
ospfTotalNssaAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNssaAreas.setStatus('mandatory')
ospfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2), )
if mibBuilder.loadTexts: ospfAreaInfoTable.setStatus('mandatory')
ospfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaInfoIndex"))
if mibBuilder.loadTexts: ospfAreaInfoEntry.setStatus('mandatory')
ospfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoIndex.setStatus('mandatory')
ospfTotalNumberOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setStatus('mandatory')
ospfNumberOfInterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setStatus('mandatory')
ospfNumberOfLsdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setStatus('mandatory')
ospfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoId.setStatus('mandatory')
ospfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3), )
if mibBuilder.loadTexts: ospfIntfInfoTable.setStatus('mandatory')
ospfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIfInfoIndex"))
if mibBuilder.loadTexts: ospfIntfInfoEntry.setStatus('mandatory')
ospfIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIndex.setStatus('mandatory')
ospfIfDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfDesignatedRouterIP.setStatus('mandatory')
ospfIfBackupDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfBackupDesignatedRouterIP.setStatus('mandatory')
ospfIfWaitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfWaitInterval.setStatus('mandatory')
ospfIfTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfTotalNeighbours.setStatus('mandatory')
ospfIfInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setStatus('mandatory')
ospfRouterLSAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4), )
if mibBuilder.loadTexts: ospfRouterLSAInfoTable.setStatus('mandatory')
ospfRouterLSAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "routerLSAAreaIndex"), (0, "ALTEON-TS-NETWORK-MIB", "routerLSALinkIndex"), (0, "ALTEON-TS-NETWORK-MIB", "routerLSAId"))
if mibBuilder.loadTexts: ospfRouterLSAInfoEntry.setStatus('mandatory')
routerLSAAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSAAreaIndex.setStatus('mandatory')
routerLSALinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkIndex.setStatus('mandatory')
routerLSAId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSAId.setStatus('mandatory')
routerLSALinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkID.setStatus('mandatory')
routerLSALinkData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkData.setStatus('mandatory')
routerLSALinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkIfIndex.setStatus('mandatory')
routerLSANoOfTOSMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSANoOfTOSMetrics.setStatus('mandatory')
routerLSANoOfTOSZeroMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSANoOfTOSZeroMetrics.setStatus('mandatory')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('mandatory')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('mandatory')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('mandatory')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('mandatory')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('mandatory')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('mandatory')
arpInfoRefPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoRefPorts.setStatus('mandatory')
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('mandatory')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('mandatory')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('mandatory')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('mandatory')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('mandatory')
vrrpInfoVirtRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("owner", 1), ("renter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setStatus('mandatory')
vrrpInfoVirtRtrServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrServer.setStatus('mandatory')
vrrpInfoVirtRtrProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrProxy.setStatus('mandatory')
vrrpOperVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1), )
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setStatus('mandatory')
vrrpOperVirtRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpOperVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setStatus('mandatory')
vrrpOperVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setStatus('mandatory')
vrrpOperVirtRtrBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setStatus('mandatory')
vrrpOperVirtRtrGroupBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setStatus('mandatory')
mibBuilder.exportSymbols("ALTEON-TS-NETWORK-MIB", ipFwdPortTableMaxSize=ipFwdPortTableMaxSize, ospfAreaIntfLoop=ospfAreaIntfLoop, vrrpOperVirtRtrBackup=vrrpOperVirtRtrBackup, ipNewCfgIntfState=ipNewCfgIntfState, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, ipFwdCurCfgLocalSubnet=ipFwdCurCfgLocalSubnet, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, ospfIntfNbrDown=ospfIntfNbrDown, vrrpCurCfgVirtRtrTckL4Port=vrrpCurCfgVirtRtrTckL4Port, ospfNewCfgAreaId=ospfNewCfgAreaId, ospfCumIntfDown=ospfCumIntfDown, ipNewCfgBootpState=ipNewCfgBootpState, ipCurCfgIntfTable=ipCurCfgIntfTable, ospfIntfTxlsAcks=ospfIntfTxlsAcks, ospfCumNbrChangeStats=ospfCumNbrChangeStats, ospfIntfRxTxStatsEntry=ospfIntfRxTxStatsEntry, arpInfoVLAN=arpInfoVLAN, ospfCumNbrhello=ospfCumNbrhello, ipCurCfgBootpAddr=ipCurCfgBootpAddr, ospfIfTotalNeighbours=ospfIfTotalNeighbours, ipFwdCurCfgLocalEntry=ipFwdCurCfgLocalEntry, vrrpStats=vrrpStats, ospfIntfChangeStats=ospfIntfChangeStats, ipCurCfgIntfMask=ipCurCfgIntfMask, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, vrrpNewCfgGenTckHsrpInc=vrrpNewCfgGenTckHsrpInc, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, vrrpNewCfgGenHotstandby=vrrpNewCfgGenHotstandby, ripNewCfgSupply=ripNewCfgSupply, ospfAreaNbrRstAd=ospfAreaNbrRstAd, ospfTmrsKckOffDbage=ospfTmrsKckOffDbage, ripCurCfgListen=ripCurCfgListen, arpInfoTable=arpInfoTable, routerLSALinkIfIndex=routerLSALinkIfIndex, ipGatewayTableMax=ipGatewayTableMax, ipNewCfgGwState=ipNewCfgGwState, ospfAreaInfoIndex=ospfAreaInfoIndex, vrrpVirtRtrGrpTableMaxSize=vrrpVirtRtrGrpTableMaxSize, ospfIntfRxTxIndex=ospfIntfRxTxIndex, ripCurCfgStaticSupply=ripCurCfgStaticSupply, arpInfoDestIp=arpInfoDestIp, vrrp_info=vrrp_info, vrrpNewCfgIfTable=vrrpNewCfgIfTable, vrrpCurCfgVirtRtrGrpTckL4Port=vrrpCurCfgVirtRtrGrpTckL4Port, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, arpInfoSrcPort=arpInfoSrcPort, arpInfoEntry=arpInfoEntry, arpStatEntries=arpStatEntries, ipCurCfgGwEntry=ipCurCfgGwEntry, ipCurCfgGwState=ipCurCfgGwState, ipCurCfgGwVlan=ipCurCfgGwVlan, ipFwdNewCfgPortState=ipFwdNewCfgPortState, ospfGeneral=ospfGeneral, ripNewCfgStaticSupply=ripNewCfgStaticSupply, ospfCurCfgAreaTable=ospfCurCfgAreaTable, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, routerLSANoOfTOSZeroMetrics=routerLSANoOfTOSZeroMetrics, dnsStats=dnsStats, routeStats=routeStats, vrrpCurCfgVirtRtrGrpTckVirtRtr=vrrpCurCfgVirtRtrGrpTckVirtRtr, ipFwdLocalTableMaxSize=ipFwdLocalTableMaxSize, ospfIntfRxPkts=ospfIntfRxPkts, ip_info=ip_info, ospfIntfTableMaxSize=ospfIntfTableMaxSize, ospfAreaNbrIndex=ospfAreaNbrIndex, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, ospfAreaTxlsAcks=ospfAreaTxlsAcks, vrrpNewCfgVirtRtrSharing=vrrpNewCfgVirtRtrSharing, ospfRangeTableMaxSize=ospfRangeTableMaxSize, ospfIntfWaitTimer=ospfIntfWaitTimer, ospfinfo=ospfinfo, ospfIntfChangeStatsEntry=ospfIntfChangeStatsEntry, ospfCumIntfUnloop=ospfCumIntfUnloop, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, ospfCumIntfBackup=ospfCumIntfBackup, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, routerLSAId=routerLSAId, ospfNewCfgDefaultRouteMetricType=ospfNewCfgDefaultRouteMetricType, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, ipRouteInfoDestIp=ipRouteInfoDestIp, ospfVirtIntfTableMaxSize=ospfVirtIntfTableMaxSize, arpStatHighWater=arpStatHighWater, ospfAreaInfoId=ospfAreaInfoId, vrrpCurCfgGenTckHsrpInc=vrrpCurCfgGenTckHsrpInc, ospfCurCfgAreaEntry=ospfCurCfgAreaEntry, ospfAreaRxHello=ospfAreaRxHello, ospfNbrInInitState=ospfNbrInInitState, ospfAreaRxTxStats=ospfAreaRxTxStats, ripNewCfgPoisonReverse=ripNewCfgPoisonReverse, ospfAreaTxDatabase=ospfAreaTxDatabase, ipCurCfgGwIndex=ipCurCfgGwIndex, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, ospfTmrsKckOffLsaLock=ospfTmrsKckOffLsaLock, ospfCurCfgAreaIndex=ospfCurCfgAreaIndex, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, ipNewCfgIntfVlan=ipNewCfgIntfVlan, ospfIfWaitInterval=ospfIfWaitInterval, ospfTotalTransitAreas=ospfTotalTransitAreas, ipFwdNewCfgPortTable=ipFwdNewCfgPortTable, vrrpStatInAdvers=vrrpStatInAdvers, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, vrrpNewCfgVirtRtrTckHsrp=vrrpNewCfgVirtRtrTckHsrp, routeStatEntries=routeStatEntries, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, vrrpNewCfgVirtRtrTckL4Port=vrrpNewCfgVirtRtrTckL4Port, ospfNewCfgAreaSpfInterval=ospfNewCfgAreaSpfInterval, ipFwdNewCfgPortIndex=ipFwdNewCfgPortIndex, vrrpStatOutBadAdvers=vrrpStatOutBadAdvers, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, ipNewCfgIntfBootpRelay=ipNewCfgIntfBootpRelay, ipCurCfgGwTable=ipCurCfgGwTable, ospfCumTxDatabase=ospfCumTxDatabase, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, vrrpNewCfgGenTckHsrvInc=vrrpNewCfgGenTckHsrvInc, vrrpGeneral=vrrpGeneral, ospfCumNbrAdjointOk=ospfCumNbrAdjointOk, ospfIntfRxDatabase=ospfIntfRxDatabase, ospfTmrsKckOffHello=ospfTmrsKckOffHello, vrrpOper=vrrpOper, ospfAreaNbrhello=ospfAreaNbrhello, ipFwdNewCfgLocalEntry=ipFwdNewCfgLocalEntry, ospfCumRxHello=ospfCumRxHello, ospfCumNbrBadSequence=ospfCumNbrBadSequence, ripNewCfgListen=ripNewCfgListen, ipRouteInfoEntry=ipRouteInfoEntry, vrrpNewCfgVirtRtrGrpTckRServer=vrrpNewCfgVirtRtrGrpTckRServer, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, ospfCumRxlsAcks=ospfCumRxlsAcks, ospfCumNbrLoadingDone=ospfCumNbrLoadingDone, ospfIntfInfoEntry=ospfIntfInfoEntry, ospfAreaIntfHello=ospfAreaIntfHello, ospfIntfNbrChangeStats=ospfIntfNbrChangeStats, ospfAreaNbrLoadingDone=ospfAreaNbrLoadingDone, ipFwdNewCfgLocalIndex=ipFwdNewCfgLocalIndex, vrrpCurCfgGenHotstandby=vrrpCurCfgGenHotstandby, ipCurCfgIntfVlan=ipCurCfgIntfVlan, vrrpNewCfgVirtRtrGrpSharing=vrrpNewCfgVirtRtrGrpSharing, ospfAreaNbrChangeStatsEntry=ospfAreaNbrChangeStatsEntry, ripStatInErrorPkts=ripStatInErrorPkts, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, ospfIntfNbrChangeStatsEntry=ospfIntfNbrChangeStatsEntry, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, ospfTmrsKckOffAseExport=ospfTmrsKckOffAseExport, ospfCurCfgAreaSpfInterval=ospfCurCfgAreaSpfInterval, ospfCumNbrN1way=ospfCumNbrN1way, ospfIntfTxPkts=ospfIntfTxPkts, ipFwdCurCfgState=ipFwdCurCfgState, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd, ospfProcessUptime=ospfProcessUptime, ospfAreaNbrBadRequests=ospfAreaNbrBadRequests, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, ospfIntfNbrStart=ospfIntfNbrStart, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, vrrpNewCfgVirtRtrGrpTckVirtRtr=vrrpNewCfgVirtRtrGrpTckVirtRtr, ospfTimersKickOffStats=ospfTimersKickOffStats, ospfAreaNbrExchangeDone=ospfAreaNbrExchangeDone, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, ipCurCfgGwRetry=ipCurCfgGwRetry, ospfIntfNbrN1way=ospfIntfNbrN1way, ipFwdNewCfgState=ipFwdNewCfgState, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, ipNewCfgGwArp=ipNewCfgGwArp, ospfIntfInfoTable=ospfIntfInfoTable, vrrpNewCfgGenTckL4PortInc=vrrpNewCfgGenTckL4PortInc, ipNewCfgIntfBroadcast=ipNewCfgIntfBroadcast, ospfCumTxHello=ospfCumTxHello, ospfGeneralInfo=ospfGeneralInfo, ospfRouterLSAInfoEntry=ospfRouterLSAInfoEntry, ipForward=ipForward, ospfNewCfgDefaultRouteMetric=ospfNewCfgDefaultRouteMetric, ipFwdCurCfgLocalIndex=ipFwdCurCfgLocalIndex, ospfTmrsKckOffSummary=ospfTmrsKckOffSummary, ospfAreaNbrChangeStats=ospfAreaNbrChangeStats, vrrpCurCfgGenTckL4PortInc=vrrpCurCfgGenTckL4PortInc, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, ripCurCfgPoisonReverse=ripCurCfgPoisonReverse, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, ospfIntfUnloop=ospfIntfUnloop, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, ospfAreaIntfUnloop=ospfAreaIntfUnloop, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, ospfAreaIntfBackup=ospfAreaIntfBackup, ospfIntfRxTxStats=ospfIntfRxTxStats, ipCurCfgGwInterval=ipCurCfgGwInterval, iprouting=iprouting, ospfIntfNbrBadSequence=ospfIntfNbrBadSequence, ipNewCfgBootpAddr=ipNewCfgBootpAddr, ospfAreaInfoEntry=ospfAreaInfoEntry, vrrpCurCfgVirtRtrGrpTckRServer=vrrpCurCfgVirtRtrGrpTckRServer, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, ospfArea=ospfArea, ospfAreaIntfNbrChange=ospfAreaIntfNbrChange, ospfAreaRxPkts=ospfAreaRxPkts, ospfCumIntfLoop=ospfCumIntfLoop, ipCurCfgIntfState=ipCurCfgIntfState, ospfAreaRxDatabase=ospfAreaRxDatabase, ospfNumberOfInterfacesUp=ospfNumberOfInterfacesUp, ospfAreaNbrNegotiationDone=ospfAreaNbrNegotiationDone, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, ipCurCfgGwMetric=ipCurCfgGwMetric, ospfCurCfgAreaAuthType=ospfCurCfgAreaAuthType, ripCurCfgState=ripCurCfgState, arpInfoMacAddr=arpInfoMacAddr, ospfIntfTxlsUpdates=ospfIntfTxlsUpdates, ospfIntfRxlsReqs=ospfIntfRxlsReqs, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, vrrpCurCfgVirtRtrGrpTckHsrv=vrrpCurCfgVirtRtrGrpTckHsrv, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, ipNewCfgIntfAddr=ipNewCfgIntfAddr, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, vrrpNewCfgVirtRtrTckHsrv=vrrpNewCfgVirtRtrTckHsrv, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, ospfTmrsKckOffRetransmit=ospfTmrsKckOffRetransmit, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, routerLSANoOfTOSMetrics=routerLSANoOfTOSMetrics, ospfCumRxTxStats=ospfCumRxTxStats, ospfTotalAreas=ospfTotalAreas, ospfIntfNbrhello=ospfIntfNbrhello, ospfNewCfgAreaIndex=ospfNewCfgAreaIndex, vrrpCurCfgVirtRtrGrpSharing=vrrpCurCfgVirtRtrGrpSharing, ospfRouterLSAInfoTable=ospfRouterLSAInfoTable, ipNewCfgGwEntry=ipNewCfgGwEntry, ospfCumNbrBadRequests=ospfCumNbrBadRequests, ospfCurCfgAreaId=ospfCurCfgAreaId, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, vrrpCurCfgVirtRtrSharing=vrrpCurCfgVirtRtrSharing, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, ipNewCfgGwAddr=ipNewCfgGwAddr, ipCurCfgGwArp=ipCurCfgGwArp, ipRouteInfoType=ipRouteInfoType, ipRouteInfoInterface=ipRouteInfoInterface, ospfLsTypesSupported=ospfLsTypesSupported, ipFwdNewCfgLocalMask=ipFwdNewCfgLocalMask, ripConfig=ripConfig, ripCurCfgDefListen=ripCurCfgDefListen, ospfIntfNbrIndex=ospfIntfNbrIndex, ospfAreaNbrStart=ospfAreaNbrStart, ipNewCfgGwDelete=ipNewCfgGwDelete, vrrpInfoVirtRtrOwnership=vrrpInfoVirtRtrOwnership, ospfIntfNbrExchangeDone=ospfIntfNbrExchangeDone, ospfIntfTxHello=ospfIntfTxHello, ospfIntfTxlsReqs=ospfIntfTxlsReqs, ipCurCfgBootpAddr2=ipCurCfgBootpAddr2, ospfAreaIntfDown=ospfAreaIntfDown, ospfCumRxlsReqs=ospfCumRxlsReqs)
mibBuilder.exportSymbols("ALTEON-TS-NETWORK-MIB", ipCurCfgBootpState=ipCurCfgBootpState, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, ospfNewCfgAreaEntry=ospfNewCfgAreaEntry, ospfCumTxPkts=ospfCumTxPkts, ospfCurCfgDefaultRouteMetricType=ospfCurCfgDefaultRouteMetricType, ipNewCfgGwVlan=ipNewCfgGwVlan, vrrpOperVirtRtrTable=vrrpOperVirtRtrTable, ospfCumTxlsAcks=ospfCumTxlsAcks, arpStats=arpStats, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, ospfStats=ospfStats, vrrpOperVirtRtrIndex=vrrpOperVirtRtrIndex, ospfCumNbrExchangeDone=ospfCumNbrExchangeDone, routerLSAAreaIndex=routerLSAAreaIndex, ospfAreaNbrN1way=ospfAreaNbrN1way, ipFwdNewCfgLocalSubnet=ipFwdNewCfgLocalSubnet, vrrpCurCfgVirtRtrTckRServer=vrrpCurCfgVirtRtrTckRServer, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, routeStatMaxEntries=routeStatMaxEntries, vrrpIfTableMaxSize=vrrpIfTableMaxSize, ospfAreaInfoTable=ospfAreaInfoTable, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, ospfAreaTxlsUpdates=ospfAreaTxlsUpdates, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, ospfAreaChangeStatsEntry=ospfAreaChangeStatsEntry, ipRouteInfoGateway=ipRouteInfoGateway, ospfIntfDown=ospfIntfDown, ipCurCfgGwAddr=ipCurCfgGwAddr, ospfAreaRxTxIndex=ospfAreaRxTxIndex, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, ospfCumNbrNegotiationDone=ospfCumNbrNegotiationDone, ospfIntfNbrNegotiationDone=ospfIntfNbrNegotiationDone, ipNewCfgBootpAddr2=ipNewCfgBootpAddr2, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, ospfCumNbrDown=ospfCumNbrDown, ospfIntfIndex=ospfIntfIndex, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, ripNewCfgUpdatePeriod=ripNewCfgUpdatePeriod, ipFwdNewCfgLocalDelete=ipFwdNewCfgLocalDelete, ospfAreaTxPkts=ospfAreaTxPkts, ospfTotalNumberOfInterfaces=ospfTotalNumberOfInterfaces, ospfAreaNbrBadSequence=ospfAreaNbrBadSequence, ospfNewCfgAreaAuthType=ospfNewCfgAreaAuthType, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, ospfCumIntfHello=ospfCumIntfHello, vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, ospfCumRxlsUpdates=ospfCumRxlsUpdates, ospfAreaRxlsAcks=ospfAreaRxlsAcks, ospfAreaIntfIndex=ospfAreaIntfIndex, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, ipNewCfgIntfEntry=ipNewCfgIntfEntry, ripStats=ripStats, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, ospfIntfTxDatabase=ospfIntfTxDatabase, vrrpInfoVirtRtrProxy=vrrpInfoVirtRtrProxy, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, ripStatRoutesAgedOut=ripStatRoutesAgedOut, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, ospfAreaRxTxStatsEntry=ospfAreaRxTxStatsEntry, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, routerLSALinkData=routerLSALinkData, vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, ospfCumIntfNbrChange=ospfCumIntfNbrChange, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, ripStatInPkts=ripStatInPkts, vrrpCurCfgGenTckRServerInc=vrrpCurCfgGenTckRServerInc, ospfIntfBackup=ospfIntfBackup, ospfCumTxlsUpdates=ospfCumTxlsUpdates, routeStatHighWater=routeStatHighWater, ospfAreaNbrDown=ospfAreaNbrDown, ospfAreaTableMaxSize=ospfAreaTableMaxSize, arpInfoRefPorts=arpInfoRefPorts, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, ripNewCfgVip=ripNewCfgVip, ospfCumIntfChangeStats=ospfCumIntfChangeStats, routerLSALinkID=routerLSALinkID, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, ospfIntfNbrAdjointOk=ospfIntfNbrAdjointOk, vrrpInfoVirtRtrServer=vrrpInfoVirtRtrServer, ospfAreaRxlsUpdates=ospfAreaRxlsUpdates, ipNewCfgIntfDelete=ipNewCfgIntfDelete, ipFwdCurCfgPortEntry=ipFwdCurCfgPortEntry, ipFwdCurCfgLocalMask=ipFwdCurCfgLocalMask, ospfCfg=ospfCfg, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, ospfAreaTxHello=ospfAreaTxHello, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, vrrpCurCfgVirtRtrGrpTckHsrp=vrrpCurCfgVirtRtrGrpTckHsrp, ospfTotalNeighbours=ospfTotalNeighbours, vrrpOperVirtRtrEntry=vrrpOperVirtRtrEntry, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, ospfIntfNbrBadRequests=ospfIntfNbrBadRequests, ospfAreaNbrAdjointOk=ospfAreaNbrAdjointOk, ipFwdNewCfgPortEntry=ipFwdNewCfgPortEntry, ipNewCfgGwMetric=ipNewCfgGwMetric, ospfAreaTxlsReqs=ospfAreaTxlsReqs, ipFwdNewCfgLocalTable=ipFwdNewCfgLocalTable, vrrpVirtRtrTableMaxSize=vrrpVirtRtrTableMaxSize, ospfNbrInFullState=ospfNbrInFullState, ipRouteInfoTable=ipRouteInfoTable, ospfTotalNssaAreas=ospfTotalNssaAreas, ospfTmrsKckOffLsaAck=ospfTmrsKckOffLsaAck, ipCurCfgIntfEntry=ipCurCfgIntfEntry, ospfIfDesignatedRouterIP=ospfIfDesignatedRouterIP, ospfCumRxPkts=ospfCumRxPkts, ospfCumNbrRstAd=ospfCumNbrRstAd, ripCurCfgSupply=ripCurCfgSupply, ospfNewCfgAreaTable=ospfNewCfgAreaTable, vrrpNewCfgGenState=vrrpNewCfgGenState, vrrpCurCfgGenTckHsrvInc=vrrpCurCfgGenTckHsrvInc, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, ospfIntfNbrRstAd=ospfIntfNbrRstAd, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, vrrpCurCfgVirtRtrTckHsrp=vrrpCurCfgVirtRtrTckHsrp, ripCurCfgVip=ripCurCfgVip, ipFwdCurCfgPortTable=ipFwdCurCfgPortTable, ripStatOutPkts=ripStatOutPkts, ospfIntfCountForRouter=ospfIntfCountForRouter, ipNewCfgGwRetry=ipNewCfgGwRetry, ripNewCfgDefListen=ripNewCfgDefListen, ospfCumRxDatabase=ospfCumRxDatabase, ipRouteInfoIndx=ipRouteInfoIndx, arpStatMaxEntries=arpStatMaxEntries, ospfIntfLoop=ospfIntfLoop, routerLSALinkIndex=routerLSALinkIndex, vrrpCurCfgVirtRtrTckHsrv=vrrpCurCfgVirtRtrTckHsrv, ospfStartTime=ospfStartTime, ospfNumberOfLsdbEntries=ospfNumberOfLsdbEntries, ospfIntfRxHello=ospfIntfRxHello, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, ipNewCfgIntfMask=ipNewCfgIntfMask, ipNewCfgIntfTable=ipNewCfgIntfTable, ospfIntfRxlsUpdates=ospfIntfRxlsUpdates, vrrpNewCfgVirtRtrGrpTckHsrv=vrrpNewCfgVirtRtrGrpTckHsrv, ipNewCfgIntfIndex=ipNewCfgIntfIndex, vrrpCurCfgIfTable=vrrpCurCfgIfTable, ospfIntfNbrLoadingDone=ospfIntfNbrLoadingDone, ospfAreaRxlsReqs=ospfAreaRxlsReqs, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, ipCurCfgIntfAddr=ipCurCfgIntfAddr, ipCurCfgIntfIndex=ipCurCfgIntfIndex, ospfGeneralStats=ospfGeneralStats, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, ipCurCfgIntfBootpRelay=ipCurCfgIntfBootpRelay, ipRouteInfoMask=ipRouteInfoMask, vrrpCurCfgGenState=vrrpCurCfgGenState, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, vrrpNewCfgGenTckRServerInc=vrrpNewCfgGenTckRServerInc, ospfAreaChangeStats=ospfAreaChangeStats, ospfIntfHello=ospfIntfHello, ipFwdCurCfgPortState=ipFwdCurCfgPortState, ospfHostTableMaxSize=ospfHostTableMaxSize, ripCurCfgUpdatePeriod=ripCurCfgUpdatePeriod, ospfCurCfgDefaultRouteMetric=ospfCurCfgDefaultRouteMetric, ospfIfInfoIpAddress=ospfIfInfoIpAddress, ospfCumTxlsReqs=ospfCumTxlsReqs, ipNewCfgGwTable=ipNewCfgGwTable, vrrpStatOutAdvers=vrrpStatOutAdvers, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, ospfIntfNbrChange=ospfIntfNbrChange, vrrpNewCfgVirtRtrGrpTckL4Port=vrrpNewCfgVirtRtrGrpTckL4Port, ipFwdCurCfgLocalTable=ipFwdCurCfgLocalTable, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, vrrp=vrrp, ipInterfaceTableMax=ipInterfaceTableMax, ospfNbrInExchState=ospfNbrInExchState, arpInfoFlag=arpInfoFlag, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, ripNewCfgState=ripNewCfgState, ospfCumNbrStart=ospfCumNbrStart, ospfCumIntfWaitTimer=ospfCumIntfWaitTimer, ipStaticRouteTableMaxSize=ipStaticRouteTableMaxSize, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, ospfVlinkCountForRouter=ospfVlinkCountForRouter, ospfAreaIntfWaitTimer=ospfAreaIntfWaitTimer, vrrpNewCfgVirtRtrTckRServer=vrrpNewCfgVirtRtrTckRServer, ospfInterface=ospfInterface, vrrpNewCfgVirtRtrGrpTckHsrp=vrrpNewCfgVirtRtrGrpTckHsrp, ipRouteInfoTag=ipRouteInfoTag, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, ipNewCfgGwInterval=ipNewCfgGwInterval, vrrpOperVirtRtrGroupBackup=vrrpOperVirtRtrGroupBackup, ospfIfBackupDesignatedRouterIP=ospfIfBackupDesignatedRouterIP, ospfIfInfoIndex=ospfIfInfoIndex, ipNewCfgGwIndex=ipNewCfgGwIndex, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, ospfIntfRxlsAcks=ospfIntfRxlsAcks, ipFwdCurCfgPortIndex=ipFwdCurCfgPortIndex)
