#
# PySNMP MIB module GDCSC616-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCSC616-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, enterprises, Integer32, ObjectIdentity, Counter32, MibIdentifier, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, IpAddress, iso, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "Integer32", "ObjectIdentity", "Counter32", "MibIdentifier", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "IpAddress", "iso", "TimeTicks", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
bql = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10))
bqlMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlMIBVersion.setStatus('mandatory')
bqlWhatAreYouTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 2), )
if mibBuilder.loadTexts: bqlWhatAreYouTable.setStatus('mandatory')
bqlWhatAreYouEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 2, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlWhatAreYouIndex"))
if mibBuilder.loadTexts: bqlWhatAreYouEntry.setStatus('mandatory')
bqlWhatAreYouIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlWhatAreYouIndex.setStatus('mandatory')
bqlBaseCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 9, 10))).clone(namedValues=NamedValues(("dc610", 2), ("dc612", 4), ("sc616", 5), ("gt128", 9), ("gt128NZ", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlBaseCardType.setStatus('mandatory')
bqlOptionCard = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlOptionCard.setStatus('mandatory')
bqlDTE2CardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7))).clone(namedValues=NamedValues(("eia530", 1), ("x21", 2), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDTE2CardType.setStatus('mandatory')
bqlDTE1CardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("eia530", 1), ("x21", 2), ("v35", 3), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDTE1CardType.setStatus('mandatory')
bqlCodeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlCodeRev.setStatus('mandatory')
bqlAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlAlarmStatus.setStatus('mandatory')
bqlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 3), )
if mibBuilder.loadTexts: bqlConfigTable.setStatus('mandatory')
bqlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 3, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlConfigIndex"), (0, "GDCSC616-MIB", "bqlConfigChnlIndex"))
if mibBuilder.loadTexts: bqlConfigEntry.setStatus('mandatory')
bqlConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlConfigIndex.setStatus('mandatory')
bqlConfigChnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlConfigChnlIndex.setStatus('mandatory')
bqlTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pattern2047", 1), ("pattern511", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlTestPattern.setStatus('mandatory')
bqlRLTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTimeout", 1), ("timeoutAfter10Min", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlRLTimeout.setStatus('mandatory')
bqlRespRL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlRespRL.setStatus('mandatory')
bqlRLType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v54", 1), ("pn127", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlRLType.setStatus('mandatory')
bqlBilateralRL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlBilateralRL.setStatus('mandatory')
bqlInbandRTSDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlInbandRTSDCD.setStatus('mandatory')
bqlRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlRTS.setStatus('mandatory')
bqlRTSCTSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlRTSCTSDelay.setStatus('mandatory')
bqlAntiStream = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAntistream", 1), ("antistream", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlAntiStream.setStatus('mandatory')
bqlTXDataElasticBufr = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlTXDataElasticBufr.setStatus('mandatory')
bqlRTSCTSDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("ms0", 1), ("ms5", 2), ("ms10", 3), ("ms15", 4), ("ms20", 5), ("ms25", 6), ("ms30", 7), ("ms35", 8), ("ms40", 9), ("ms45", 10), ("ms50", 11), ("ms55", 12), ("ms60", 13), ("ms65", 14), ("ms70", 15), ("ms75", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlRTSCTSDelayTime.setStatus('mandatory')
bqlAntiStreamTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("seconds0", 1), ("seconds5", 2), ("seconds10", 3), ("seconds15", 4), ("seconds20", 5), ("seconds25", 6), ("seconds30", 7), ("seconds35", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlAntiStreamTime.setStatus('mandatory')
bqlConfig1Table = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 4), )
if mibBuilder.loadTexts: bqlConfig1Table.setStatus('mandatory')
bqlConfig1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 4, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlConfig1Index"))
if mibBuilder.loadTexts: bqlConfig1Entry.setStatus('mandatory')
bqlConfig1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlConfig1Index.setStatus('mandatory')
bqlFrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlFrontPanel.setStatus('mandatory')
bqlSoftHard = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardmode", 1), ("softmode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlSoftHard.setStatus('mandatory')
bqlDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDteStatus.setStatus('mandatory')
bqlConfig2Table = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 5), )
if mibBuilder.loadTexts: bqlConfig2Table.setStatus('mandatory')
bqlConfig2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 5, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlConfig2Index"))
if mibBuilder.loadTexts: bqlConfig2Entry.setStatus('mandatory')
bqlConfig2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlConfig2Index.setStatus('mandatory')
bqlMasterTXClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("xtc1", 1), ("xtc2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlMasterTXClkSrc.setStatus('mandatory')
bqlDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 6), )
if mibBuilder.loadTexts: bqlDiagnosticTable.setStatus('mandatory')
bqlDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 6, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlDiagnosticIndex"), (0, "GDCSC616-MIB", "bqlDiagnosticChnlIndex"))
if mibBuilder.loadTexts: bqlDiagnosticEntry.setStatus('mandatory')
bqlDiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDiagnosticIndex.setStatus('mandatory')
bqlDiagnosticChnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDiagnosticChnlIndex.setStatus('mandatory')
bqlDiagnosticTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlDiagnosticTest.setStatus('mandatory')
bqlDiagnosticLength = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlDiagnosticLength.setStatus('mandatory')
bqlDiagnosticActive = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDiagnosticActive.setStatus('mandatory')
bqlDiagnosticResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDiagnosticResults.setStatus('mandatory')
bqlSC616Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7))
bqlAlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1))
bqlNoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 1))
bqlDiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 2))
bqlPowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 3))
bqlLp2B1QOutofSyncAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 4))
bqlLpChn1ElasBufrOverUnderFlowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 5))
bqlLpChn2ElasBufrOverUnderFlowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 6))
bqlLpChn1ExtTxClkAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 7))
bqlLpChn2ExtTxClkAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 8))
bqlLpSealingCurrentNoContinuityAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 7, 1, 9))
bqlSC616LEDStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 8), )
if mibBuilder.loadTexts: bqlSC616LEDStatusTable.setStatus('mandatory')
bqlSC616LEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 8, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlSC616LEDIndex"))
if mibBuilder.loadTexts: bqlSC616LEDEntry.setStatus('mandatory')
bqlSC616LEDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlSC616LEDIndex.setStatus('mandatory')
bqlSC616LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlSC616LEDStatus.setStatus('mandatory')
bqlDC610Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 9))
bqlDC610AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 9, 1))
bqlDC610PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 9, 1, 1))
bqlDC610Chnl1DTRAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 9, 1, 2))
bqlDC610NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 9, 1, 3))
bqlDC610DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 9, 1, 4))
bqlDC610LEDStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 10), )
if mibBuilder.loadTexts: bqlDC610LEDStatusTable.setStatus('mandatory')
bqlDC610LEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 10, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlDC610LEDIndex"))
if mibBuilder.loadTexts: bqlDC610LEDEntry.setStatus('mandatory')
bqlDC610LEDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDC610LEDIndex.setStatus('mandatory')
bqlDC610LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDC610LEDStatus.setStatus('mandatory')
bqlDC612Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 11))
bqlDC612AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 11, 1))
bqlDC612PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 11, 1, 1))
bqlDC612Chnl1DTRAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 11, 1, 2))
bqlDC612Chnl2DTRAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 11, 1, 3))
bqlDC612NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 11, 1, 4))
bqlDC612DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 11, 1, 5))
bqlDC612LEDStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 12), )
if mibBuilder.loadTexts: bqlDC612LEDStatusTable.setStatus('mandatory')
bqlDC612LEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 12, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlDC612LEDIndex"))
if mibBuilder.loadTexts: bqlDC612LEDEntry.setStatus('mandatory')
bqlDC612LEDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 12, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDC612LEDIndex.setStatus('mandatory')
bqlDC612LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDC612LEDStatus.setStatus('mandatory')
bqlControlTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 13), )
if mibBuilder.loadTexts: bqlControlTable.setStatus('mandatory')
bqlControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 13, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlControlIndex"))
if mibBuilder.loadTexts: bqlControlEntry.setStatus('mandatory')
bqlControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 13, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlControlIndex.setStatus('mandatory')
bqlSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlSoftReset.setStatus('mandatory')
bqlEraseConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlEraseConfig.setStatus('mandatory')
bqlCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 14), )
if mibBuilder.loadTexts: bqlCurrentTable.setStatus('mandatory')
bqlCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 14, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlCurrentIndex"))
if mibBuilder.loadTexts: bqlCurrentEntry.setStatus('mandatory')
bqlCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 14, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlCurrentIndex.setStatus('mandatory')
bqlCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlCurrentESs.setStatus('mandatory')
bqlCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlCurrentBESs.setStatus('mandatory')
bqlCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlCurrentSESs.setStatus('mandatory')
bqlCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlCurrentUASs.setStatus('mandatory')
bqlCurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlCurrentStats.setStatus('mandatory')
bqlIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 15), )
if mibBuilder.loadTexts: bqlIntervalTable.setStatus('mandatory')
bqlIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 15, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlIntervalIndex"), (0, "GDCSC616-MIB", "bqlIntervalNumber"))
if mibBuilder.loadTexts: bqlIntervalEntry.setStatus('mandatory')
bqlIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 15, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalIndex.setStatus('mandatory')
bqlIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalNumber.setStatus('mandatory')
bqlIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalESs.setStatus('mandatory')
bqlIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalBESs.setStatus('mandatory')
bqlIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalSESs.setStatus('mandatory')
bqlIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalUASs.setStatus('mandatory')
bqlIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalStats.setStatus('mandatory')
bqlTotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 16), )
if mibBuilder.loadTexts: bqlTotalTable.setStatus('mandatory')
bqlTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 16, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlTotalIndex"))
if mibBuilder.loadTexts: bqlTotalEntry.setStatus('mandatory')
bqlTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 16, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlTotalIndex.setStatus('mandatory')
bqlTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 16, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlTotalESs.setStatus('mandatory')
bqlTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 16, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlTotalBESs.setStatus('mandatory')
bqlTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlTotalSESs.setStatus('mandatory')
bqlTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlTotalUASs.setStatus('mandatory')
bqlTotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 16, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlTotalStats.setStatus('mandatory')
bqlDTERateTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 17), )
if mibBuilder.loadTexts: bqlDTERateTable.setStatus('mandatory')
bqlDTEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 17, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlDTEIndex"))
if mibBuilder.loadTexts: bqlDTEEntry.setStatus('mandatory')
bqlDTEIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 17, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDTEIndex.setStatus('mandatory')
bqlDTE2Mapped = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("toChannel2", 1), ("toChannel1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlDTE2Mapped.setStatus('mandatory')
bqlDTE2DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("kBps2400", 1), ("kBps4800", 2), ("kBps9600", 3), ("kBps19200", 4), ("kBps38400", 5), ("kBps48000", 6), ("kBps56000", 7), ("kBps57600", 8), ("kBps64000", 9), ("kBps128000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlDTE2DataRate.setStatus('mandatory')
bqlDTE1Mapped = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("toChannel1", 1), ("toChannel2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlDTE1Mapped.setStatus('mandatory')
bqlDTE1DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("kBps2400", 1), ("kBps4800", 2), ("kBps9600", 3), ("kBps19200", 4), ("kBps38400", 5), ("kBps48000", 6), ("kBps56000", 7), ("kBps57600", 8), ("kBps64000", 9), ("kBps128000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlDTE1DataRate.setStatus('mandatory')
bqlIntervalMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 18), )
if mibBuilder.loadTexts: bqlIntervalMaintenanceTable.setStatus('mandatory')
bqlIntervalMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 18, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlIntervalMaintenanceIndex"))
if mibBuilder.loadTexts: bqlIntervalMaintenanceEntry.setStatus('mandatory')
bqlIntervalMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 18, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlIntervalMaintenanceIndex.setStatus('mandatory')
bqlResetIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bqlResetIntervals.setStatus('mandatory')
bqlNumberofValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlNumberofValidIntervals.setStatus('mandatory')
bqlDC610LEDStatusNZTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 19), )
if mibBuilder.loadTexts: bqlDC610LEDStatusNZTable.setStatus('mandatory')
bqlDC610LEDNZEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 19, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlDC610LEDNZIndex"))
if mibBuilder.loadTexts: bqlDC610LEDNZEntry.setStatus('mandatory')
bqlDC610LEDNZIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 19, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDC610LEDNZIndex.setStatus('mandatory')
bqlDC610LEDNZStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlDC610LEDNZStatus.setStatus('mandatory')
bqlGT128Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 20))
bqlGT128AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 20, 1))
bqlGT128NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 20, 1, 1))
bqlGT128DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 20, 1, 2))
bqlGT128PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 20, 1, 3))
bqlGT128Chnl1DTRAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 20, 1, 4))
bqlGT128LEDStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 21), )
if mibBuilder.loadTexts: bqlGT128LEDStatusTable.setStatus('mandatory')
bqlGT128LEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 21, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlGT128LEDIndex"))
if mibBuilder.loadTexts: bqlGT128LEDEntry.setStatus('mandatory')
bqlGT128LEDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 21, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlGT128LEDIndex.setStatus('mandatory')
bqlGT128LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlGT128LEDStatus.setStatus('mandatory')
bqlGT128NZAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 22))
bqlGT128NZAlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 22, 1))
bqlGT128NZNoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 22, 1, 1))
bqlGT128NZDiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 22, 1, 2))
bqlGT128NZPowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 22, 1, 3))
bqlGT128NZChnl1DTRAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 10, 22, 1, 4))
bqlGT128LEDNZStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 10, 23), )
if mibBuilder.loadTexts: bqlGT128LEDNZStatusTable.setStatus('mandatory')
bqlGT128LEDNZEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 10, 23, 1), ).setIndexNames((0, "GDCSC616-MIB", "bqlGT128LEDNZIndex"))
if mibBuilder.loadTexts: bqlGT128LEDNZEntry.setStatus('mandatory')
bqlGT128LEDNZIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 23, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlGT128LEDNZIndex.setStatus('mandatory')
bqlGT128LEDNZStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 10, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bqlGT128LEDNZStatus.setStatus('mandatory')
mibBuilder.exportSymbols("GDCSC616-MIB", bqlCurrentESs=bqlCurrentESs, bqlWhatAreYouIndex=bqlWhatAreYouIndex, bqlConfigIndex=bqlConfigIndex, bqlLp2B1QOutofSyncAlm=bqlLp2B1QOutofSyncAlm, bqlIntervalStats=bqlIntervalStats, bqlConfigEntry=bqlConfigEntry, bqlAlarmData=bqlAlarmData, bqlDTE2Mapped=bqlDTE2Mapped, bqlLpChn1ElasBufrOverUnderFlowAlm=bqlLpChn1ElasBufrOverUnderFlowAlm, bqlDC612AlarmData=bqlDC612AlarmData, bqlDiagnosticIndex=bqlDiagnosticIndex, bqlDC612Alarm=bqlDC612Alarm, bqlEraseConfig=bqlEraseConfig, gdc=gdc, bqlTotalStats=bqlTotalStats, bqlDTE1DataRate=bqlDTE1DataRate, bqlRTS=bqlRTS, bqlDTERateTable=bqlDTERateTable, bqlGT128LEDStatus=bqlGT128LEDStatus, bqlAntiStreamTime=bqlAntiStreamTime, bqlConfig1Entry=bqlConfig1Entry, bqlDC612LEDStatus=bqlDC612LEDStatus, bqlDTE1CardType=bqlDTE1CardType, bqlTestPattern=bqlTestPattern, bqlWhatAreYouTable=bqlWhatAreYouTable, bqlTotalTable=bqlTotalTable, bqlTotalEntry=bqlTotalEntry, bqlDiagnosticLength=bqlDiagnosticLength, bqlIntervalUASs=bqlIntervalUASs, bqlConfigChnlIndex=bqlConfigChnlIndex, bqlDC610DiagRxErrAlm=bqlDC610DiagRxErrAlm, bqlInbandRTSDCD=bqlInbandRTSDCD, bqlDC610NoResponseAlm=bqlDC610NoResponseAlm, bqlRTSCTSDelayTime=bqlRTSCTSDelayTime, bqlDiagnosticResults=bqlDiagnosticResults, bql=bql, bqlGT128NZAlarm=bqlGT128NZAlarm, bqlDC610AlarmData=bqlDC610AlarmData, bqlWhatAreYouEntry=bqlWhatAreYouEntry, bqlGT128Chnl1DTRAlm=bqlGT128Chnl1DTRAlm, bqlDC612DiagRxErrAlm=bqlDC612DiagRxErrAlm, bqlCurrentStats=bqlCurrentStats, bqlRTSCTSDelay=bqlRTSCTSDelay, bqlDC610Chnl1DTRAlm=bqlDC610Chnl1DTRAlm, bqlDTEIndex=bqlDTEIndex, bqlDTE2CardType=bqlDTE2CardType, bqlGT128AlarmData=bqlGT128AlarmData, bqlBilateralRL=bqlBilateralRL, bqlDC612NoResponseAlm=bqlDC612NoResponseAlm, bqlAntiStream=bqlAntiStream, bqlResetIntervals=bqlResetIntervals, bqlGT128LEDIndex=bqlGT128LEDIndex, bqlSC616LEDIndex=bqlSC616LEDIndex, bqlTotalSESs=bqlTotalSESs, bqlLpChn2ElasBufrOverUnderFlowAlm=bqlLpChn2ElasBufrOverUnderFlowAlm, bqlDC610LEDNZEntry=bqlDC610LEDNZEntry, bqlCurrentSESs=bqlCurrentSESs, bqlIntervalNumber=bqlIntervalNumber, bqlDiagnosticTable=bqlDiagnosticTable, bqlTotalUASs=bqlTotalUASs, bqlControlTable=bqlControlTable, bqlDiagnosticChnlIndex=bqlDiagnosticChnlIndex, bqlIntervalMaintenanceIndex=bqlIntervalMaintenanceIndex, bqlCodeRev=bqlCodeRev, bqlNumberofValidIntervals=bqlNumberofValidIntervals, bqlDiagRxErrAlm=bqlDiagRxErrAlm, bqlGT128LEDEntry=bqlGT128LEDEntry, bqlConfig2Index=bqlConfig2Index, bqlConfig2Entry=bqlConfig2Entry, bqlSoftReset=bqlSoftReset, bqlGT128NZAlarmData=bqlGT128NZAlarmData, bqlTotalESs=bqlTotalESs, bqlLpChn2ExtTxClkAlm=bqlLpChn2ExtTxClkAlm, bqlGT128Alarm=bqlGT128Alarm, bqlDC612Chnl1DTRAlm=bqlDC612Chnl1DTRAlm, bqlFrontPanel=bqlFrontPanel, bqlRLTimeout=bqlRLTimeout, bqlIntervalIndex=bqlIntervalIndex, bqlIntervalSESs=bqlIntervalSESs, bqlMIBVersion=bqlMIBVersion, bqlNoResponseAlm=bqlNoResponseAlm, bqlDC610LEDIndex=bqlDC610LEDIndex, bqlIntervalESs=bqlIntervalESs, bqlSC616LEDStatusTable=bqlSC616LEDStatusTable, bqlDiagnosticEntry=bqlDiagnosticEntry, bqlIntervalTable=bqlIntervalTable, bqlIntervalBESs=bqlIntervalBESs, bqlConfigTable=bqlConfigTable, bqlIntervalMaintenanceEntry=bqlIntervalMaintenanceEntry, bqlCurrentTable=bqlCurrentTable, bqlCurrentBESs=bqlCurrentBESs, bqlGT128LEDNZStatus=bqlGT128LEDNZStatus, bqlSC616LEDEntry=bqlSC616LEDEntry, bqlDTE1Mapped=bqlDTE1Mapped, bqlDC612LEDStatusTable=bqlDC612LEDStatusTable, bqlGT128LEDNZEntry=bqlGT128LEDNZEntry, bqlCurrentIndex=bqlCurrentIndex, bqlMasterTXClkSrc=bqlMasterTXClkSrc, bqlCurrentEntry=bqlCurrentEntry, bqlAlarmStatus=bqlAlarmStatus, bqlTXDataElasticBufr=bqlTXDataElasticBufr, bqlSoftHard=bqlSoftHard, bqlDC610Alarm=bqlDC610Alarm, bqlControlEntry=bqlControlEntry, bqlDC610LEDNZIndex=bqlDC610LEDNZIndex, bqlGT128LEDStatusTable=bqlGT128LEDStatusTable, bqlTotalIndex=bqlTotalIndex, bqlBaseCardType=bqlBaseCardType, bqlDC612Chnl2DTRAlm=bqlDC612Chnl2DTRAlm, bqlGT128DiagRxErrAlm=bqlGT128DiagRxErrAlm, bqlDC610LEDStatus=bqlDC610LEDStatus, bqlConfig2Table=bqlConfig2Table, bqlDC612PowerUpAlm=bqlDC612PowerUpAlm, bqlDteStatus=bqlDteStatus, bqlLpSealingCurrentNoContinuityAlm=bqlLpSealingCurrentNoContinuityAlm, bqlConfig1Index=bqlConfig1Index, bqlGT128NZPowerUpAlm=bqlGT128NZPowerUpAlm, bqlDTEEntry=bqlDTEEntry, bqlSC616Alarm=bqlSC616Alarm, bqlGT128NZDiagRxErrAlm=bqlGT128NZDiagRxErrAlm, bqlDC610PowerUpAlm=bqlDC610PowerUpAlm, bqlDiagnosticTest=bqlDiagnosticTest, bqlGT128LEDNZIndex=bqlGT128LEDNZIndex, bqlDTE2DataRate=bqlDTE2DataRate, bqlGT128NZChnl1DTRAlm=bqlGT128NZChnl1DTRAlm, bqlDC610LEDStatusTable=bqlDC610LEDStatusTable, bqlControlIndex=bqlControlIndex, bqlGT128PowerUpAlm=bqlGT128PowerUpAlm, bqlLpChn1ExtTxClkAlm=bqlLpChn1ExtTxClkAlm, bqlGT128NoResponseAlm=bqlGT128NoResponseAlm, bqlGT128NZNoResponseAlm=bqlGT128NZNoResponseAlm, bqlDC612LEDEntry=bqlDC612LEDEntry, bqlConfig1Table=bqlConfig1Table, bqlDC612LEDIndex=bqlDC612LEDIndex, bqlRLType=bqlRLType, bqlPowerUpAlm=bqlPowerUpAlm, bqlRespRL=bqlRespRL, bqlDC610LEDStatusNZTable=bqlDC610LEDStatusNZTable, bqlSC616LEDStatus=bqlSC616LEDStatus, bqlDiagnosticActive=bqlDiagnosticActive, bqlDC610LEDNZStatus=bqlDC610LEDNZStatus, bqlOptionCard=bqlOptionCard, bqlIntervalMaintenanceTable=bqlIntervalMaintenanceTable, bqlTotalBESs=bqlTotalBESs, bqlGT128LEDNZStatusTable=bqlGT128LEDNZStatusTable, bqlCurrentUASs=bqlCurrentUASs, bqlIntervalEntry=bqlIntervalEntry, bqlDC610LEDEntry=bqlDC610LEDEntry)
