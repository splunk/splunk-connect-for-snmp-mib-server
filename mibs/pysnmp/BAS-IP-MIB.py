#
# PySNMP MIB module BAS-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
BasSlotId, BasLogicalPortId, BasCardClass, BasInterfaceId, basExtIp, BasChassisId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "BasLogicalPortId", "BasCardClass", "BasInterfaceId", "basExtIp", "BasChassisId")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, MibIdentifier, IpAddress, NotificationType, ObjectIdentity, TimeTicks, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "MibIdentifier", "IpAddress", "NotificationType", "ObjectIdentity", "TimeTicks", "Integer32", "Bits")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
basIpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1))
if mibBuilder.loadTexts: basIpMib.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basIpMib.setOrganization('Broadband Access Systems')
basIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1))
basIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1), )
if mibBuilder.loadTexts: basIpAddrTable.setStatus('current')
basIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1), ).setIndexNames((0, "BAS-IP-MIB", "basIpAdEntChassis"), (0, "BAS-IP-MIB", "basIpAdEntSlot"), (0, "BAS-IP-MIB", "basIpAdEntIf"), (0, "BAS-IP-MIB", "basIpAdEntLPort"), (0, "BAS-IP-MIB", "basIpAdEntAddr"))
if mibBuilder.loadTexts: basIpAddrEntry.setStatus('current')
basIpAdEntChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basIpAdEntChassis.setStatus('current')
basIpAdEntSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basIpAdEntSlot.setStatus('current')
basIpAdEntIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basIpAdEntIf.setStatus('current')
basIpAdEntLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basIpAdEntLPort.setStatus('current')
basIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntAddr.setStatus('current')
basIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntIfIndex.setStatus('current')
basIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntNetMask.setStatus('current')
basIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntBcastAddr.setStatus('current')
basIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpAdEntReasmMaxSize.setStatus('current')
basIpAdEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntStatus.setStatus('current')
basIpAdEntCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 11), BasCardClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpAdEntCardType.setStatus('current')
basIpAdEntPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIpAdEntPriority.setStatus('current')
mibBuilder.exportSymbols("BAS-IP-MIB", basIpAdEntCardType=basIpAdEntCardType, basIpAdEntLPort=basIpAdEntLPort, basIpAdEntAddr=basIpAdEntAddr, PYSNMP_MODULE_ID=basIpMib, basIpAdEntIf=basIpAdEntIf, basIpAdEntStatus=basIpAdEntStatus, basIpMib=basIpMib, basIpAdEntBcastAddr=basIpAdEntBcastAddr, basIpAddrTable=basIpAddrTable, basIpAdEntReasmMaxSize=basIpAdEntReasmMaxSize, basIpAdEntPriority=basIpAdEntPriority, basIpAdEntChassis=basIpAdEntChassis, basIp=basIp, basIpAdEntSlot=basIpAdEntSlot, basIpAdEntNetMask=basIpAdEntNetMask, basIpAdEntIfIndex=basIpAdEntIfIndex, basIpAddrEntry=basIpAddrEntry)
