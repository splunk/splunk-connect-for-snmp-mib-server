#
# PySNMP MIB module Wellfleet-OCX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-OCX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, TimeTicks, ObjectIdentity, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, ModuleIdentity, iso, Integer32, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "TimeTicks", "ObjectIdentity", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "ModuleIdentity", "iso", "Integer32", "Counter64", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfSonetGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSonetGroup")
wfOcxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21), )
if mibBuilder.loadTexts: wfOcxConfigTable.setStatus('mandatory')
wfOcxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1), ).setIndexNames((0, "Wellfleet-OCX-MIB", "wfOcxConfigIndex"))
if mibBuilder.loadTexts: wfOcxConfigEntry.setStatus('mandatory')
wfOcxConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigDelete.setStatus('mandatory')
wfOcxConfigDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigDisable.setStatus('mandatory')
wfOcxConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigIndex.setStatus('mandatory')
wfOcxConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigIfIndex.setStatus('mandatory')
wfOcxConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("los", 3), ("lof", 4), ("ais", 5), ("rdi", 6), ("loopback", 7), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigState.setStatus('mandatory')
wfOcxConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 128, 512))).clone(namedValues=NamedValues(("noalarm", 1), ("los", 2), ("lof", 4), ("ais", 8), ("rdi", 16), ("loopback", 128), ("otherfailure", 512))).clone('noalarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigLineStatus.setStatus('mandatory')
wfOcxConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigLastChange.setStatus('mandatory')
wfOcxConfigConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oc3", 1), ("oc12", 2), ("oc48", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigConnType.setStatus('mandatory')
wfOcxConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigType.setStatus('mandatory')
wfOcxConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b3zs", 2), ("cmi", 3), ("nrz", 4), ("rz", 5))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigLineCoding.setStatus('mandatory')
wfOcxConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("shortsinglemode", 2), ("longsinglemode", 3), ("multimode", 4), ("coax", 5), ("utp", 6))).clone('shortsinglemode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigLineType.setStatus('mandatory')
wfOcxConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("selfloop", 2), ("lineloop", 3))).clone('noloop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigLoopbackConfig.setStatus('mandatory')
wfOcxConfigManagerMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frac", 1), ("clear", 2))).clone('frac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigManagerMethod.setStatus('mandatory')
wfOcxConfigApsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigApsEnable.setStatus('mandatory')
wfOcxConfigScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigScrambling.setStatus('mandatory')
wfOcxConfigClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intrn", 1), ("extrn", 2))).clone('intrn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigClkSource.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-OCX-MIB", wfOcxConfigLineCoding=wfOcxConfigLineCoding, wfOcxConfigClkSource=wfOcxConfigClkSource, wfOcxConfigLineStatus=wfOcxConfigLineStatus, wfOcxConfigApsEnable=wfOcxConfigApsEnable, wfOcxConfigDisable=wfOcxConfigDisable, wfOcxConfigConnType=wfOcxConfigConnType, wfOcxConfigIfIndex=wfOcxConfigIfIndex, wfOcxConfigLoopbackConfig=wfOcxConfigLoopbackConfig, wfOcxConfigManagerMethod=wfOcxConfigManagerMethod, wfOcxConfigTable=wfOcxConfigTable, wfOcxConfigEntry=wfOcxConfigEntry, wfOcxConfigLineType=wfOcxConfigLineType, wfOcxConfigLastChange=wfOcxConfigLastChange, wfOcxConfigIndex=wfOcxConfigIndex, wfOcxConfigDelete=wfOcxConfigDelete, wfOcxConfigState=wfOcxConfigState, wfOcxConfigScrambling=wfOcxConfigScrambling, wfOcxConfigType=wfOcxConfigType)
