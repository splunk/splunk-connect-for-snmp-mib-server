#
# PySNMP MIB module ASCEND-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-EVENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:10:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
eventGroup, = mibBuilder.importSymbols("ASCEND-MIB", "eventGroup")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, MibIdentifier, Gauge32, NotificationType, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, IpAddress, ObjectIdentity, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "MibIdentifier", "Gauge32", "NotificationType", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "IpAddress", "ObjectIdentity", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

eventMaximumNumberOfEvents = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventMaximumNumberOfEvents.setStatus('mandatory')
eventOldestEventIdNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventOldestEventIdNumber.setStatus('mandatory')
eventLatestEventIdNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLatestEventIdNumber.setStatus('mandatory')
eventTable = MibTable((1, 3, 6, 1, 4, 1, 529, 10, 4), )
if mibBuilder.loadTexts: eventTable.setStatus('mandatory')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 10, 4, 1), ).setIndexNames((0, "ASCEND-EVENT-MIB", "eventIdNumber"))
if mibBuilder.loadTexts: eventEntry.setStatus('mandatory')
eventIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventIdNumber.setStatus('mandatory')
eventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTimeStamp.setStatus('mandatory')
eventType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("callOriginated", 1), ("callAnswered", 2), ("callCleared", 3), ("serviceChanged", 4), ("nameChanged", 5), ("baudRateChanged", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventType.setStatus('mandatory')
eventCallReferenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCallReferenceNum.setStatus('mandatory')
eventDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDataRate.setStatus('mandatory')
eventSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSlotNumber.setStatus('mandatory')
eventSlotLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSlotLineNumber.setStatus('mandatory')
eventSlotChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSlotChannelNumber.setStatus('mandatory')
eventModemSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventModemSlotNumber.setStatus('mandatory')
eventModemOnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventModemOnSlot.setStatus('mandatory')
eventCurrentService = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("ppp", 3), ("slip", 4), ("mpp", 5), ("x25", 6), ("combinet", 7), ("frameRelay", 8), ("euraw", 9), ("euui", 10), ("telnet", 11), ("telnetBinary", 12), ("rawTcp", 13), ("terminalServer", 14), ("mp", 15), ("virtualConnect", 16), ("dchannelX25", 17), ("dtpt", 18), ("ipFax", 19), ("atm", 20), ("hdlcNrm", 21), ("voip", 22), ("visa2", 23), ("netToNet", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCurrentService.setStatus('mandatory')
eventUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventUserName.setStatus('mandatory')
eventUserIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventUserIPAddress.setStatus('mandatory')
eventUserSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventUserSubnetMask.setStatus('mandatory')
eventDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 90, 100, 101, 102, 103, 105, 106, 115, 120, 150, 151, 152, 160, 170, 171, 180, 181, 185, 190, 195, 201, 210, 220, 230, 240, 241, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 300, 350, 370, 400, 420, 425, 450, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 801, 802, 803, 806, 816, 817, 818, 819, 821, 822, 827, 828, 829, 830, 831, 834, 838, 841, 842, 843, 844, 845, 847, 850, 852, 854, 858, 863, 865, 866, 869, 881, 882, 888, 896, 897, 898, 899, 900, 901, 902, 903, 911, 927))).clone(namedValues=NamedValues(("notApplicable", 1), ("unknown", 2), ("disconnected", 3), ("clidAuthFailed", 4), ("clidAuthServTimeout", 5), ("clidAuthRequestCallback", 6), ("preT310Timeout", 7), ("noModemAvailable", 9), ("noModemNoCarrier", 10), ("noModemLossCarrier", 11), ("noModemResultCodes", 12), ("noModemOpenFailed", 13), ("noModemOpenFailedDiag", 14), ("noModemMissingOK", 15), ("noModemStuckMsgQueue", 16), ("noModemPumpDead", 17), ("noModemForcedDisconnect", 18), ("tsUserExit", 20), ("tsIdleTimeout", 21), ("tsExitTelnet", 22), ("tsNoIPAddr", 23), ("tsExitTcp", 24), ("tsPassWordFail", 25), ("tsRawTCPDisable", 26), ("tsControlC", 27), ("tsDestroyed", 28), ("tsClosedVirtualConnect", 29), ("tsVirtualConnectDestroyed", 30), ("tsExitRlogin", 31), ("tsRloginBadOption", 32), ("tsErrorResource", 33), ("mpNullMessageTimeout", 35), ("dropUtilization", 36), ("pppLcpTimeout", 40), ("pppLcpNegotiateFail", 41), ("pppPAPAuthFail", 42), ("pppCHAPAuthFail", 43), ("pppRemoteAuthFail", 44), ("pppRcvTerminate", 45), ("pppCloseEvent", 46), ("pppCloseNoNcpsOpened", 47), ("pppCloseUnknownMpBundle", 48), ("pppCloseMpAddChanFail", 49), ("tsExitErrTooMany", 50), ("tsExitErrResource", 51), ("tsExitErrInvalidIP", 52), ("tsExitErrHostName", 53), ("tsExitErrBadPort", 54), ("tsExitErrHostReset", 60), ("tsExitErrConnRefused", 61), ("tsExitErrTimedOut", 62), ("tsExitErrClosed", 63), ("tsExitErrNetUnreach", 64), ("tsExitErrHostUnreach", 65), ("tsExitErrNetAdminUnreach", 66), ("tsExitErrHostAdminUnreach", 67), ("tsExitErrPortUnreach", 68), ("noPortAvailable", 90), ("sessTimeOut", 100), ("sessFailSecurity", 101), ("sessCallback", 102), ("sessOutgoingInvalid", 103), ("sessTimeoutEncaps", 105), ("sessTimeoutMp", 106), ("sessDtptSourceCleared", 115), ("invalidProtocol", 120), ("requestByRadiusClient", 150), ("localAdmin", 151), ("localSnmp", 152), ("v110Timeout", 160), ("pppAuthTimeout", 170), ("pppIffReleased", 171), ("userCallClearRequest", 180), ("systemCallClearRequest", 181), ("remoteEndHungUp", 185), ("resourceQuiesced", 190), ("maxCallDurationReached", 195), ("lowMemory", 201), ("slotCardDied", 210), ("pppCbcpRequired", 220), ("vrouterDeleted", 230), ("lqmTerminated", 240), ("backupCleared", 241), ("ipfaxCallCleared", 250), ("ipfaxLowMemory", 251), ("ipfaxIncomingError", 252), ("ipfaxOutgoingError", 253), ("ipfaxNoModemAvail", 254), ("ipfaxOpenError", 255), ("ipfaxTcpWrite", 256), ("ipfaxNoSession", 257), ("ipfaxParsePhonestr", 258), ("ipfaxBadDecode", 260), ("ipfaxDecodeError", 261), ("ipfaxNoServer", 262), ("x25Termsrv", 300), ("mpMasterCardDied", 350), ("dnisDenied", 370), ("callbackDialoutFailed", 400), ("privateRouteTableNotFound", 420), ("filterProfileNotFound", 425), ("biDirectionalAuthFailed", 450), ("h323DropReasonNull", 500), ("h323DropReasonNormal", 501), ("h323DropReasonDestBusy", 502), ("h323DropReasonDestUnreachable", 503), ("h323DropReasonReject", 504), ("h323DropReasonWanFailure", 505), ("h323DropReasonGatewayResources", 506), ("h323DropReasonNoBandwidth", 507), ("h323DropReasonGwNotRegistered", 508), ("h323DropReasonInvalidPin", 509), ("h323DropReasonInvalidDnis", 510), ("h323DropReasonNoLanAnswer", 511), ("h323DropReasonStateMachine", 512), ("h323DropReasonNoLanDisconnect", 513), ("h323DropReasonFegwCauseCode", 514), ("h323DropReasonMaxPinAttempts", 515), ("h323DropReasonCoderDenied", 516), ("h323DropReasonHostDrop", 517), ("q850UnassignedNumber", 801), ("q850NoRoute", 802), ("q850NoRouteToDest", 803), ("q850ChannelUnacceptable", 806), ("q850NormalClearing", 816), ("q850UserBusy", 817), ("q850NoUserResponding", 818), ("q850UserAlertNoAnswer", 819), ("q850CallRejected", 821), ("q850NumberChanged", 822), ("q850DestOutOfOrder", 827), ("q850InvalidNumberFormat", 828), ("q850FacilityRejected", 829), ("q850RespToStatEnq", 830), ("q850UnspecifiedCause", 831), ("q850NoCircuitAvailable", 834), ("q850NetworkOutOfOrder", 838), ("q850TemporaryFailure", 841), ("q850NetworkCongestion", 842), ("q850AccessInfoDiscarded", 843), ("q850ReqChannelNotAvail", 844), ("q850PreEmpted", 845), ("q850ResourceNotAvail", 847), ("q850FacilityNotSubscribed", 850), ("q850OutgoingCallBarred", 852), ("q850IncomingCallBarred", 854), ("q850BearCapNotAvail", 858), ("q850ServiceNotAvail", 863), ("q850CapNotImplemented", 865), ("q850ChanNotImplemented", 866), ("q850FacilityNotImplement", 869), ("q850InvalidCallRef", 881), ("q850ChanDoesNotExist", 882), ("q850IncompatibleDest", 888), ("q850MandatoryIeMissing", 896), ("q850NonexistentMsg", 897), ("q850WrongMessage", 898), ("q850NonexistentIe", 899), ("q850InvalidElemContents", 900), ("q850WrongMsgForStat", 901), ("q850TimerExpiry", 902), ("q850MandatoryIeLenErr", 903), ("q850ProtocolError", 911), ("q850InterworkingUnspec", 927)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDisconnectReason.setStatus('mandatory')
eventConnectProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 10, 11, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 50, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 100, 101, 102, 120, 121, 200, 201, 202, 203, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 400, 401, 402, 403, 404))).clone(namedValues=NamedValues(("prNotApplicable", 1), ("prUnknown", 2), ("prNotConnected", 7), ("prCallUp", 10), ("prDialSrvcBlocked", 11), ("prModemUp", 30), ("prModemWaitDCD", 31), ("prModemWaitCodes", 32), ("prTermSrvStarted", 40), ("prRawTcpStarting", 41), ("prTelnetStarting", 42), ("prRawTcpConnect", 43), ("prTelnetConnect", 44), ("prRloginStarting", 45), ("prRloginConnect", 46), ("prTermSrvStartedThruCR", 47), ("prModemOutdialCallUp", 50), ("prLanSessionUp", 60), ("prOpeningLCP", 61), ("prOpeningCCP", 62), ("prOpeningIPNCP", 63), ("prOpeningBNCP", 64), ("prLCPOpened", 65), ("prCCPOpened", 66), ("prIPNCPOpened", 67), ("prBNCPOpened", 68), ("prLCPStateInitial", 69), ("prLCPStateStarting", 70), ("prLCPStateClosed", 71), ("prLCPStateStopped", 72), ("prLCPStateClosing", 73), ("prLCPStateStopping", 74), ("prLCPStateReqSent", 75), ("prLCPStateAckRecd", 76), ("prLCPStateAckSent", 77), ("prIPXNCPOpened", 80), ("prAtNcpOpened", 81), ("prBACPOpening", 82), ("prBACPOpened", 83), ("prCBCPOpening", 84), ("prCBCPOpened", 85), ("prV110Up", 90), ("prV110StateOpened", 91), ("prV110StateCarrier", 92), ("prV110StateReset", 93), ("prV110StateClosed", 94), ("prClidCallBackReq", 100), ("prClidAuthFailed", 101), ("prClidAuthTimeout", 102), ("prFRLinkInactive", 120), ("prFRLinkActive", 121), ("prStartingAuth", 200), ("prOpeningAuth", 201), ("prSkippingAuth", 202), ("prAuthOpened", 203), ("prH323NewIncomingCallFromWan", 300), ("prH323DetectingPinFromWan", 301), ("prH323DetectingDnisFromWan", 302), ("prH323SendingArqToGatekeeper", 303), ("prH323ReceivedAcfFromGatekeeper", 304), ("prH323WaitingH225AlertingFromLan", 305), ("prH323WaitingH225ProceedingFromLan", 306), ("prH323PlayingErrPromptToWan", 307), ("prH323HairpinDialingOutToWan", 308), ("prH323ReceivedH225SetupFromLan", 309), ("prH323DialingOutToWan", 310), ("prH323WanAnsweredAndRtpNotUpYet", 311), ("prH323CallConnected", 312), ("prH323PlayingBusyPromptToWan", 313), ("prH323DisconnectingRtp", 314), ("prH323RtpDisconnected", 315), ("prH323FaxDisconnected", 316), ("prSs7VoipChangeParameter", 400), ("prSs7VoipRtpOpened", 401), ("prSs7VoipRtpClosed", 402), ("prSs7VoipTerminateRtp", 403), ("prSs7VoipCedDetected", 404)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventConnectProgress.setStatus('mandatory')
eventCallCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCallCharge.setStatus('mandatory')
eventCalledPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCalledPartyID.setStatus('mandatory')
eventCallingPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCallingPartyID.setStatus('mandatory')
eventInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventInOctets.setStatus('mandatory')
eventOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventOutOctets.setStatus('mandatory')
eventMultiLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventMultiLinkID.setStatus('mandatory')
eventXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventXmitRate.setStatus('mandatory')
eventTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 10, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTrunkGroup.setStatus('mandatory')
eventCurrentActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCurrentActiveCalls.setStatus('mandatory')
eventCurrentActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCurrentActiveSessions.setStatus('mandatory')
eventTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalCalls.setStatus('mandatory')
eventTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalSessions.setStatus('mandatory')
eventTotalCallsAnswered = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalCallsAnswered.setStatus('mandatory')
eventTotalCallsOriginated = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalCallsOriginated.setStatus('mandatory')
eventTotalCallsCleared = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalCallsCleared.setStatus('mandatory')
eventTotalBaudRateChanges = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalBaudRateChanges.setStatus('mandatory')
eventTotalServiceChanges = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalServiceChanges.setStatus('mandatory')
eventTotalNameChanges = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalNameChanges.setStatus('mandatory')
eventTotalNoModems = MibScalar((1, 3, 6, 1, 4, 1, 529, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalNoModems.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-EVENT-MIB", DisplayString=DisplayString, eventTimeStamp=eventTimeStamp, eventType=eventType, eventTotalSessions=eventTotalSessions, eventUserName=eventUserName, eventCalledPartyID=eventCalledPartyID, eventTotalCalls=eventTotalCalls, eventTable=eventTable, eventEntry=eventEntry, eventDisconnectReason=eventDisconnectReason, eventTotalNameChanges=eventTotalNameChanges, eventCallReferenceNum=eventCallReferenceNum, eventMaximumNumberOfEvents=eventMaximumNumberOfEvents, eventDataRate=eventDataRate, eventCurrentActiveCalls=eventCurrentActiveCalls, eventTotalCallsCleared=eventTotalCallsCleared, eventConnectProgress=eventConnectProgress, eventTotalBaudRateChanges=eventTotalBaudRateChanges, eventSlotChannelNumber=eventSlotChannelNumber, eventCallCharge=eventCallCharge, eventTotalServiceChanges=eventTotalServiceChanges, eventCurrentService=eventCurrentService, eventXmitRate=eventXmitRate, eventCurrentActiveSessions=eventCurrentActiveSessions, eventUserIPAddress=eventUserIPAddress, eventModemSlotNumber=eventModemSlotNumber, eventCallingPartyID=eventCallingPartyID, eventSlotNumber=eventSlotNumber, eventIdNumber=eventIdNumber, eventMultiLinkID=eventMultiLinkID, eventTrunkGroup=eventTrunkGroup, eventTotalNoModems=eventTotalNoModems, eventSlotLineNumber=eventSlotLineNumber, eventLatestEventIdNumber=eventLatestEventIdNumber, eventTotalCallsOriginated=eventTotalCallsOriginated, eventOldestEventIdNumber=eventOldestEventIdNumber, eventTotalCallsAnswered=eventTotalCallsAnswered, eventInOctets=eventInOctets, eventOutOctets=eventOutOctets, eventModemOnSlot=eventModemOnSlot, eventUserSubnetMask=eventUserSubnetMask)
