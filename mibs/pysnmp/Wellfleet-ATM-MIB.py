#
# PySNMP MIB module Wellfleet-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, NotificationType, ObjectIdentity, IpAddress, TimeTicks, Counter32, Integer32, Gauge32, ModuleIdentity, Counter64, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "NotificationType", "ObjectIdentity", "IpAddress", "TimeTicks", "Counter32", "Integer32", "Gauge32", "ModuleIdentity", "Counter64", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfSonetGroup, wfAtmGroup, wfAtmInterfaceGroup = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSonetGroup", "wfAtmGroup", "wfAtmInterfaceGroup")
wfAtmCommonGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1))
wfAtmLinkModuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2))
wfAtmCellSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3))
wfAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 1))
wfAtmDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmDelete.setStatus('mandatory')
wfAtmInterfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceNumber.setStatus('mandatory')
wfAtmOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("healthy", 1), ("interfaceanomaly", 2), ("otheranomaly", 3))).clone('healthy')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmOverallStatus.setStatus('mandatory')
wfAtmGlobalSigStkVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("u30", 1), ("u31", 2), ("sym", 3), ("u40", 4))).clone('u30')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmGlobalSigStkVersion.setStatus('mandatory')
wfAtmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2), )
if mibBuilder.loadTexts: wfAtmInterfaceTable.setStatus('mandatory')
wfAtmInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmInterfaceLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmInterfaceLLIndex"))
if mibBuilder.loadTexts: wfAtmInterfaceEntry.setStatus('mandatory')
wfAtmInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceDelete.setStatus('mandatory')
wfAtmInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceDisable.setStatus('mandatory')
wfAtmInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceState.setStatus('mandatory')
wfAtmInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceCircuit.setStatus('mandatory')
wfAtmInterfaceMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 5), Integer32().clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceMaxSupportedVCs.setStatus('mandatory')
wfAtmInterfaceVCsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceVCsInUse.setStatus('mandatory')
wfAtmInterfaceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceDescr.setStatus('mandatory')
wfAtmInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ds1", 2), ("ds3", 3))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceType.setStatus('mandatory')
wfAtmInterfaceLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceLastChange.setStatus('mandatory')
wfAtmInterfacePlcp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfacePlcp.setStatus('mandatory')
wfAtmMpeNull = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mpe1294", 1), ("null", 2), ("mpe1483", 3))).clone('mpe1483')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmMpeNull.setStatus('mandatory')
wfAtmCsNull = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal34", 1), ("null", 2), ("aal5", 3))).clone('aal5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmCsNull.setStatus('mandatory')
wfAtmInterfaceMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceMulticast.setStatus('mandatory')
wfAtmDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDrops.setStatus('mandatory')
wfAtmInterfaceLmiDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceLmiDisable.setStatus('mandatory')
wfAtmInterfaceLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceLineNumber.setStatus('mandatory')
wfAtmInterfaceLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceLLIndex.setStatus('mandatory')
wfAtmInterfaceDxiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode2", 3), ("modep2", 4))).clone('mode1a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceDxiMode.setStatus('mandatory')
wfAtmUnknownVCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUnknownVCPkts.setStatus('mandatory')
wfAtmLmiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3), )
if mibBuilder.loadTexts: wfAtmLmiTable.setStatus('mandatory')
wfAtmLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmLmiLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmLmiLLIndex"))
if mibBuilder.loadTexts: wfAtmLmiEntry.setStatus('mandatory')
wfAtmLmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiState.setStatus('mandatory')
wfAtmLmiCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiCircuit.setStatus('mandatory')
wfAtmLmiNoVCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiNoVCErrors.setStatus('mandatory')
wfAtmLmiProxyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiProxyRequests.setStatus('mandatory')
wfAtmLmiCsuDsuResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiCsuDsuResponses.setStatus('mandatory')
wfAtmLmiCsuDsuTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiCsuDsuTraps.setStatus('mandatory')
wfAtmLmiOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiOtherErrors.setStatus('mandatory')
wfAtmLmiLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiLineNumber.setStatus('mandatory')
wfAtmLmiLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLmiLLIndex.setStatus('mandatory')
wfAtmPlcpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4), )
if mibBuilder.loadTexts: wfAtmPlcpTable.setStatus('mandatory')
wfAtmPlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmPlcpLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmPlcpLLIndex"))
if mibBuilder.loadTexts: wfAtmPlcpEntry.setStatus('mandatory')
wfAtmPlcpCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpCct.setStatus('mandatory')
wfAtmPlcpPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpPhysical.setStatus('mandatory')
wfAtmPlcpLof = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpLof.setStatus('mandatory')
wfAtmPlcpLofCFA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpLofCFA.setStatus('mandatory')
wfAtmPlcpYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpYellow.setStatus('mandatory')
wfAtmPlcpYellowCFA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpYellowCFA.setStatus('mandatory')
wfAtmPlcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("connected", 1), ("up", 2), ("down", 3), ("other", 4), ("outofframe", 5))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpStatus.setStatus('mandatory')
wfAtmPlcpSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpSeconds.setStatus('mandatory')
wfAtmPlcpBipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpBipErrors.setStatus('mandatory')
wfAtmPlcpBipESecs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpBipESecs.setStatus('mandatory')
wfAtmPlcpBipSESecs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpBipSESecs.setStatus('mandatory')
wfAtmPlcpFebes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpFebes.setStatus('mandatory')
wfAtmPlcpFebeESecs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpFebeESecs.setStatus('mandatory')
wfAtmPlcpFebeSESecs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpFebeSESecs.setStatus('mandatory')
wfAtmPlcpFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpFrameErrors.setStatus('mandatory')
wfAtmPlcpSevereFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpSevereFrameErrors.setStatus('mandatory')
wfAtmPlcpSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpSEFS.setStatus('mandatory')
wfAtmPlcpUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpUAS.setStatus('mandatory')
wfAtmPlcpLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpLineNumber.setStatus('mandatory')
wfAtmPlcpLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPlcpLLIndex.setStatus('mandatory')
wfAtmUniTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5), )
if mibBuilder.loadTexts: wfAtmUniTable.setStatus('mandatory')
wfAtmUniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmUniLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmUniLLIndex"))
if mibBuilder.loadTexts: wfAtmUniEntry.setStatus('mandatory')
wfAtmUniCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniCct.setStatus('mandatory')
wfAtmUniPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniPhysical.setStatus('mandatory')
wfAtmUniAal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAal.setStatus('mandatory')
wfAtmUniSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniSeconds.setStatus('mandatory')
wfAtmUniLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniLineNumber.setStatus('mandatory')
wfAtmUniLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniLLIndex.setStatus('mandatory')
wfAtmUniAtmTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6), )
if mibBuilder.loadTexts: wfAtmUniAtmTable.setStatus('mandatory')
wfAtmUniAtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmUniAtmLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmUniAtmLLIndex"))
if mibBuilder.loadTexts: wfAtmUniAtmEntry.setStatus('mandatory')
wfAtmUniAtmCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmCct.setStatus('mandatory')
wfAtmUniAtmNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmNoBuffers.setStatus('mandatory')
wfAtmUniAtmHECs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmHECs.setStatus('mandatory')
wfAtmUniAtmCHECs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmCHECs.setStatus('mandatory')
wfAtmUniAtmNullCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmNullCells.setStatus('mandatory')
wfAtmUniAtmMisdeliveredCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmMisdeliveredCells.setStatus('mandatory')
wfAtmUniAtmReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmReceives.setStatus('mandatory')
wfAtmUniAtmTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmTransmits.setStatus('mandatory')
wfAtmUniAtmLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmLineNumber.setStatus('mandatory')
wfAtmUniAtmLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmUniAtmLLIndex.setStatus('mandatory')
wfAtmVbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8), )
if mibBuilder.loadTexts: wfAtmVbrTable.setStatus('mandatory')
wfAtmVbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmVbrLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmVbrLLIndex"))
if mibBuilder.loadTexts: wfAtmVbrEntry.setStatus('mandatory')
wfAtmVbrCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCct.setStatus('mandatory')
wfAtmVbrAtmUni = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrAtmUni.setStatus('mandatory')
wfAtmVbrDxi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrDxi.setStatus('mandatory')
wfAtmVbrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSeconds.setStatus('mandatory')
wfAtmVbrLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrLineNumber.setStatus('mandatory')
wfAtmVbrLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrLLIndex.setStatus('mandatory')
wfAtmVbrSarTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9), )
if mibBuilder.loadTexts: wfAtmVbrSarTable.setStatus('mandatory')
wfAtmVbrSarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmVbrSarLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmVbrSarLLIndex"))
if mibBuilder.loadTexts: wfAtmVbrSarEntry.setStatus('mandatory')
wfAtmVbrSarCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarCct.setStatus('mandatory')
wfAtmVbrSarAssemblyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarAssemblyTimer.setStatus('mandatory')
wfAtmVbrSarCrc10Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarCrc10Errors.setStatus('mandatory')
wfAtmVbrSarCellMidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarCellMidErrors.setStatus('mandatory')
wfAtmVbrSarCsPduSizeTooBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarCsPduSizeTooBigErrors.setStatus('mandatory')
wfAtmVbrSarNoBufferErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarNoBufferErrors.setStatus('mandatory')
wfAtmVbrSarComNoProcessErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarComNoProcessErrors.setStatus('mandatory')
wfAtmVbrSarEomNoProcessErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarEomNoProcessErrors.setStatus('mandatory')
wfAtmVbrSarCellSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarCellSequenceErrors.setStatus('mandatory')
wfAtmVbrSarCellLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarCellLengthErrors.setStatus('mandatory')
wfAtmVbrSarBomBeforeEomErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarBomBeforeEomErrors.setStatus('mandatory')
wfAtmVbrSarTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarTimeouts.setStatus('mandatory')
wfAtmVbrSarLengthExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarLengthExceeds.setStatus('mandatory')
wfAtmVbrSarReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarReceives.setStatus('mandatory')
wfAtmVbrSarTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarTransmits.setStatus('mandatory')
wfAtmVbrSarLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarLineNumber.setStatus('mandatory')
wfAtmVbrSarLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 9, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrSarLLIndex.setStatus('mandatory')
wfAtmVbrCsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11), )
if mibBuilder.loadTexts: wfAtmVbrCsTable.setStatus('mandatory')
wfAtmVbrCsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmVbrCsLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmVbrCsLLIndex"))
if mibBuilder.loadTexts: wfAtmVbrCsEntry.setStatus('mandatory')
wfAtmVbrCsCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsCct.setStatus('mandatory')
wfAtmVbrCsBETagMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsBETagMismatches.setStatus('mandatory')
wfAtmVbrCsLengthMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsLengthMismatches.setStatus('mandatory')
wfAtmVbrCsMisdeliveredPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsMisdeliveredPdus.setStatus('mandatory')
wfAtmVbrCsReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsReceives.setStatus('mandatory')
wfAtmVbrCsTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsTransmits.setStatus('mandatory')
wfAtmVbrCsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsLineNumber.setStatus('mandatory')
wfAtmVbrCsLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsLLIndex.setStatus('mandatory')
wfAtmVbrCsVciTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12), )
if mibBuilder.loadTexts: wfAtmVbrCsVciTable.setStatus('mandatory')
wfAtmVbrCsVciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmVbrCsVciLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmVbrCsVciLLIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmVbrCsVciIndex"))
if mibBuilder.loadTexts: wfAtmVbrCsVciEntry.setStatus('mandatory')
wfAtmVbrCsVciVbrCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciVbrCct.setStatus('mandatory')
wfAtmVbrCsVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciIndex.setStatus('mandatory')
wfAtmVbrCsVciBETagMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciBETagMismatches.setStatus('mandatory')
wfAtmVbrCsVciLengthMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciLengthMismatches.setStatus('mandatory')
wfAtmVbrCsVciMisdeliveredPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciMisdeliveredPdus.setStatus('mandatory')
wfAtmVbrCsVciReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciReceives.setStatus('mandatory')
wfAtmVbrCsVciTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciTransmits.setStatus('mandatory')
wfAtmVbrCsVciOctetReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciOctetReceives.setStatus('mandatory')
wfAtmVbrCsVciOctetTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciOctetTransmits.setStatus('mandatory')
wfAtmVbrCsVciLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciLineNumber.setStatus('mandatory')
wfAtmVbrCsVciLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVbrCsVciLLIndex.setStatus('mandatory')
wfAtmMpeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13), )
if mibBuilder.loadTexts: wfAtmMpeTable.setStatus('mandatory')
wfAtmMpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmMpeIndex"))
if mibBuilder.loadTexts: wfAtmMpeEntry.setStatus('mandatory')
wfAtmMpeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmMpeIndex.setStatus('mandatory')
wfAtmMpeInvalidNlpids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmMpeInvalidNlpids.setStatus('mandatory')
wfAtmMpeInvalidPids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmMpeInvalidPids.setStatus('mandatory')
wfAtmMpeInvalidOuis = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmMpeInvalidOuis.setStatus('mandatory')
wfAtmMpeMisdeliveredPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmMpeMisdeliveredPdus.setStatus('mandatory')
wfAtmMpeUnsupportedControlFields = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmMpeUnsupportedControlFields.setStatus('mandatory')
wfAtmMpeInvalidSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmMpeInvalidSAP.setStatus('mandatory')
wfAtmPvcTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14), )
if mibBuilder.loadTexts: wfAtmPvcTable.setStatus('mandatory')
wfAtmPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmPvcLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmPvcLLIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmPvcVpi"), (0, "Wellfleet-ATM-MIB", "wfAtmPvcVci"))
if mibBuilder.loadTexts: wfAtmPvcEntry.setStatus('mandatory')
wfAtmPvcDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmPvcDelete.setStatus('mandatory')
wfAtmPvcCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcCct.setStatus('mandatory')
wfAtmPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcVpi.setStatus('mandatory')
wfAtmPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcVci.setStatus('mandatory')
wfAtmPvcReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcReceives.setStatus('mandatory')
wfAtmPvcTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcTransmits.setStatus('mandatory')
wfAtmPvcOctetReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcOctetReceives.setStatus('mandatory')
wfAtmPvcOctetTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcOctetTransmits.setStatus('mandatory')
wfAtmPvcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("groupaccess", 1), ("hybridaccess", 2), ("direct", 3))).clone('groupaccess')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmPvcMode.setStatus('mandatory')
wfAtmPvcDirectAccessCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmPvcDirectAccessCct.setStatus('mandatory')
wfAtmPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcState.setStatus('mandatory')
wfAtmPvcMpeNull = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mpe1294", 1), ("null", 2), ("mpe1483", 3))).clone('mpe1483')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmPvcMpeNull.setStatus('mandatory')
wfAtmPvcCsNull = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal34", 1), ("null", 2), ("aal5", 3))).clone('aal5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmPvcCsNull.setStatus('mandatory')
wfAtmPvcDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmPvcDisable.setStatus('mandatory')
wfAtmPvcDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcDrops.setStatus('mandatory')
wfAtmPvcMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmPvcMulticast.setStatus('mandatory')
wfAtmPvcLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcLineNumber.setStatus('mandatory')
wfAtmPvcLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmPvcLLIndex.setStatus('mandatory')
wfAtmDxiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15), )
if mibBuilder.loadTexts: wfAtmDxiTable.setStatus('mandatory')
wfAtmDxiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmDxiLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmDxiLLIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmDxiComponent"))
if mibBuilder.loadTexts: wfAtmDxiEntry.setStatus('mandatory')
wfAtmDxiCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiCct.setStatus('mandatory')
wfAtmDxiComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("router", 1), ("csudsu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiComponent.setStatus('mandatory')
wfAtmDxiMaxLmiPduLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiMaxLmiPduLengthErrors.setStatus('mandatory')
wfAtmDxiSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiSeconds.setStatus('mandatory')
wfAtmDxiDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDiscardedFrames.setStatus('mandatory')
wfAtmDxiAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiAbortedFrames.setStatus('mandatory')
wfAtmDxiNonOctetAlignedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiNonOctetAlignedFrames.setStatus('mandatory')
wfAtmDxiTooLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiTooLongFrames.setStatus('mandatory')
wfAtmDxiTooShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiTooShortFrames.setStatus('mandatory')
wfAtmDxiFrameChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiFrameChecksumErrors.setStatus('mandatory')
wfAtmDxiFrameHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiFrameHeaderErrors.setStatus('mandatory')
wfAtmDxiValidFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiValidFrameReceives.setStatus('mandatory')
wfAtmDxiFrameTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiFrameTransmits.setStatus('mandatory')
wfAtmDxiLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiLineNumber.setStatus('mandatory')
wfAtmDxiLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 15, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiLLIndex.setStatus('mandatory')
wfAtmDxiDxiAddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16), )
if mibBuilder.loadTexts: wfAtmDxiDxiAddrTable.setStatus('mandatory')
wfAtmDxiDxiAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmDxiDxiAddrLineNumber"), (0, "Wellfleet-ATM-MIB", "wfAtmDxiDxiAddrLLIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmDxiDxiAddrDxiComponent"), (0, "Wellfleet-ATM-MIB", "wfAtmDxiDxiAddrIndex"))
if mibBuilder.loadTexts: wfAtmDxiDxiAddrEntry.setStatus('mandatory')
wfAtmDxiDxiAddrDxiCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrDxiCct.setStatus('mandatory')
wfAtmDxiDxiAddrDxiComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("router", 1), ("csudsu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrDxiComponent.setStatus('mandatory')
wfAtmDxiDxiAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrIndex.setStatus('mandatory')
wfAtmDxiDxiAddrAtmVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrAtmVbr.setStatus('mandatory')
wfAtmDxiDxiAddrVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrVpiVci.setStatus('mandatory')
wfAtmDxiDxiAddrReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrReceives.setStatus('mandatory')
wfAtmDxiDxiAddrTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrTransmits.setStatus('mandatory')
wfAtmDxiDxiAddrLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrLineNumber.setStatus('mandatory')
wfAtmDxiDxiAddrLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmDxiDxiAddrLLIndex.setStatus('mandatory')
wfAtmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1), )
if mibBuilder.loadTexts: wfAtmInterfaceConfTable.setStatus('mandatory')
wfAtmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmInterfaceConfIndex"))
if mibBuilder.loadTexts: wfAtmInterfaceConfEntry.setStatus('mandatory')
wfAtmInterfaceConfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceConfDelete.setStatus('mandatory')
wfAtmInterfaceConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceConfIndex.setStatus('mandatory')
wfAtmInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceAdminStatus.setStatus('mandatory')
wfAtmInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceOperStatus.setStatus('mandatory')
wfAtmInterfaceMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceMaxVpcs.setStatus('mandatory')
wfAtmInterfaceMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceMaxVccs.setStatus('mandatory')
wfAtmInterfaceConfVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceConfVpcs.setStatus('mandatory')
wfAtmInterfaceConfVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceConfVccs.setStatus('mandatory')
wfAtmInterfaceMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceMaxActiveVpiBits.setStatus('mandatory')
wfAtmInterfaceMaxActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceMaxActiveVciBits.setStatus('mandatory')
wfAtmInterfaceIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceIlmiVpi.setStatus('mandatory')
wfAtmInterfaceIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16))).clone(namedValues=NamedValues(("default", 16))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceIlmiVci.setStatus('mandatory')
wfAtmInterfaceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("private", 1), ("nsape164", 2), ("nativee164", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceAddressType.setStatus('mandatory')
wfAtmInterfaceCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceCct.setStatus('mandatory')
wfAtmInterfaceDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmInterfaceDrops.setStatus('mandatory')
wfAtmInterfaceSigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceSigEnable.setStatus('mandatory')
wfAtmInterfaceDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 2147483647))).clone(namedValues=NamedValues(("disabled", 1), ("msgs", 2), ("msgsIn", 4), ("msgsOut", 8), ("appMsgs", 16), ("drvMsgs", 32), ("trilMsgs", 64), ("pvcFsm", 128), ("svcFsm", 256), ("oam", 512), ("all", 2147483647))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceDebug.setStatus('mandatory')
wfAtmInterfaceUseHwMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceUseHwMacAddr.setStatus('mandatory')
wfAtmInterfaceHwMacOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmInterfaceHwMacOverride.setStatus('mandatory')
wfAtmServicePqOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServicePqOverride.setStatus('mandatory')
wfAtmServiceRecordTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2), )
if mibBuilder.loadTexts: wfAtmServiceRecordTable.setStatus('mandatory')
wfAtmServiceRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmServiceRecordIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmServiceRecordCct"))
if mibBuilder.loadTexts: wfAtmServiceRecordEntry.setStatus('mandatory')
wfAtmServiceRecordDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordDelete.setStatus('mandatory')
wfAtmServiceRecordEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordEnable.setStatus('mandatory')
wfAtmServiceRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmServiceRecordIndex.setStatus('mandatory')
wfAtmServiceRecordCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmServiceRecordCct.setStatus('mandatory')
wfAtmServiceRecordAalEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("routedproto", 1), ("bridged8023", 2), ("bridged8025", 3), ("bridged8026", 4), ("lane8023", 5), ("lane8025", 6), ("llcencaps", 7), ("frsscs", 8), ("other", 9), ("unknown", 10), ("frinterwork", 11), ("mpsencaps", 12))).clone('llcencaps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordAalEncapsType.setStatus('mandatory')
wfAtmServiceRecordState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("reject", 4), ("notpresent", 5), ("oamlost", 6))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmServiceRecordState.setStatus('mandatory')
wfAtmServiceRecordVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2), ("control", 3), ("muxedSvc", 4))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordVcType.setStatus('mandatory')
wfAtmServiceRecordNetworkPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordNetworkPrefix.setStatus('mandatory')
wfAtmServiceRecordUserSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordUserSuffix.setStatus('mandatory')
wfAtmServiceRecordAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmServiceRecordAtmAddress.setStatus('mandatory')
wfAtmServiceRecordFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("autoaddr", 1))).clone('autoaddr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordFlag.setStatus('mandatory')
wfAtmServiceRecordMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9188))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordMtu.setStatus('mandatory')
wfAtmServiceRecordLossPriorityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordLossPriorityPolicy.setStatus('mandatory')
wfAtmServiceRecordDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 2147483647))).clone(namedValues=NamedValues(("disabled", 1), ("pvcFsm", 2), ("svcFsm", 4), ("llcSvcMux", 8), ("all", 2147483647))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordDebug.setStatus('mandatory')
wfAtmServiceRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordName.setStatus('mandatory')
wfAtmServiceRecordWanSvcRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("normal", 2), ("dialOptimized", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmServiceRecordWanSvcRoutingMode.setStatus('mandatory')
wfAtmSVCOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13), )
if mibBuilder.loadTexts: wfAtmSVCOptionsTable.setStatus('mandatory')
wfAtmSVCOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmSVCOptionsCct"), (0, "Wellfleet-ATM-MIB", "wfAtmSVCOptionsIndex"))
if mibBuilder.loadTexts: wfAtmSVCOptionsEntry.setStatus('mandatory')
wfAtmSVCOptionsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsDelete.setStatus('mandatory')
wfAtmSVCOptionsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsDisable.setStatus('mandatory')
wfAtmSVCOptionsCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSVCOptionsCct.setStatus('mandatory')
wfAtmSVCOptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSVCOptionsIndex.setStatus('mandatory')
wfAtmSVCOptionsAdjHostAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsAdjHostAtmAddr.setStatus('mandatory')
wfAtmSVCOptionsXmtPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 6), Integer32().clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsXmtPeakCellRate.setStatus('mandatory')
wfAtmSVCOptionsXmtSustCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 7), Integer32().clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsXmtSustCellRate.setStatus('mandatory')
wfAtmSVCOptionsRcvPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 8), Integer32().clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsRcvPeakCellRate.setStatus('mandatory')
wfAtmSVCOptionsRcvSustCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 9), Integer32().clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsRcvSustCellRate.setStatus('mandatory')
wfAtmSVCOptionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 13, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSVCOptionsName.setStatus('mandatory')
wfAtmVclConfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5), )
if mibBuilder.loadTexts: wfAtmVclConfTable.setStatus('mandatory')
wfAtmVclConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmVclConfIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmVclConfVpi"), (0, "Wellfleet-ATM-MIB", "wfAtmVclConfVci"))
if mibBuilder.loadTexts: wfAtmVclConfEntry.setStatus('mandatory')
wfAtmVclConfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclConfDelete.setStatus('mandatory')
wfAtmVclConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclConfIndex.setStatus('mandatory')
wfAtmVclConfVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclConfVpi.setStatus('mandatory')
wfAtmVclConfVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclConfVci.setStatus('mandatory')
wfAtmVclAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclAdminStatus.setStatus('mandatory')
wfAtmVclOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4), ("oamlost", 5), ("misconfig", 6))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclOperStatus.setStatus('mandatory')
wfAtmVclLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclLastChange.setStatus('mandatory')
wfAtmVclXmtPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365566)).clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtPeakCellRate.setStatus('mandatory')
wfAtmVclXmtSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365566)).clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtSustainableCellRate.setStatus('mandatory')
wfAtmVclXmtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtBurstSize.setStatus('mandatory')
wfAtmVclXmtQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4))).clone('class3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtQosClass.setStatus('mandatory')
wfAtmVclRcvPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365566)).clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclRcvPeakCellRate.setStatus('mandatory')
wfAtmVclRcvSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365566)).clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclRcvSustainableCellRate.setStatus('mandatory')
wfAtmVclRcvBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclRcvBurstSize.setStatus('mandatory')
wfAtmVclRcvQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4))).clone('class3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclRcvQosClass.setStatus('mandatory')
wfAtmVclAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("type1", 1), ("type34", 2), ("type5", 3), ("other", 4), ("unknown", 5))).clone('type5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclAalType.setStatus('mandatory')
wfAtmVclAalCpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclAalCpcsTransmitSduSize.setStatus('mandatory')
wfAtmVclAalCpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclAalCpcsReceiveSduSize.setStatus('mandatory')
wfAtmVclAalEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("routedproto", 1), ("bridged8023", 2), ("bridged8025", 3), ("bridged8026", 4), ("lane8023", 5), ("lane8025", 6), ("llcencaps", 7), ("frsscs", 8), ("other", 9), ("unknown", 10))).clone('llcencaps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclAalEncapsType.setStatus('mandatory')
wfAtmVclCongestionIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclCongestionIndication.setStatus('mandatory')
wfAtmVclCellLossPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("drop-preference", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclCellLossPriority.setStatus('mandatory')
wfAtmVclCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclCct.setStatus('mandatory')
wfAtmVclDirectAccessCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclDirectAccessCct.setStatus('mandatory')
wfAtmVclMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclMulticast.setStatus('mandatory')
wfAtmVclMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("groupaccess", 1), ("hybridaccess", 2), ("direct", 3))).clone('groupaccess')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclMode.setStatus('mandatory')
wfAtmVclDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclDrops.setStatus('mandatory')
wfAtmVclVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclVcIndex.setStatus('mandatory')
wfAtmVclVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permanent", 1), ("switched", 2), ("control", 3), ("switchedMux", 4))).clone('permanent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclVcType.setStatus('mandatory')
wfAtmVclXmtTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtTagging.setStatus('mandatory')
wfAtmVclRcvTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclRcvTagging.setStatus('mandatory')
wfAtmVclOamLpbkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclOamLpbkEnable.setStatus('mandatory')
wfAtmVclOamLpbkCellInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclOamLpbkCellInterval.setStatus('mandatory')
wfAtmVclOamLpbkThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclOamLpbkThreshold1.setStatus('mandatory')
wfAtmVclOamLpbkThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclOamLpbkThreshold2.setStatus('mandatory')
wfAtmVclOamAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclOamAlarmEnable.setStatus('mandatory')
wfAtmVclVcGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclVcGroup.setStatus('mandatory')
wfAtmVclServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclServiceClass.setStatus('mandatory')
wfAtmVclServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("cbr", 2), ("vbrRt", 3), ("vbrNRt", 4), ("abr", 5), ("ubr", 6), ("ubrplus", 7))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclServiceCategory.setStatus('mandatory')
wfAtmVclVBRType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclVBRType.setStatus('mandatory')
wfAtmVclXmtMinimumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365566)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtMinimumCellRate.setStatus('mandatory')
wfAtmVclXmtInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365566)).clone(4716)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtInitialCellRate.setStatus('mandatory')
wfAtmVclXmtRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtRateIncreaseFactor.setStatus('mandatory')
wfAtmVclXmtRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 5, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVclXmtRateDecreaseFactor.setStatus('mandatory')
wfAtmVclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6), )
if mibBuilder.loadTexts: wfAtmVclStatsTable.setStatus('mandatory')
wfAtmVclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmVclStatsIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmVclStatsVpi"), (0, "Wellfleet-ATM-MIB", "wfAtmVclStatsVci"))
if mibBuilder.loadTexts: wfAtmVclStatsEntry.setStatus('mandatory')
wfAtmVclStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclStatsIndex.setStatus('mandatory')
wfAtmVclStatsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclStatsVpi.setStatus('mandatory')
wfAtmVclStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclStatsVci.setStatus('mandatory')
wfAtmVclStatsVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclStatsVcIndex.setStatus('mandatory')
wfAtmVclXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclXmtCells.setStatus('mandatory')
wfAtmVclRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvCells.setStatus('mandatory')
wfAtmVclRcvSequenceNumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvSequenceNumErrs.setStatus('mandatory')
wfAtmVclRcvInvalidLenErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvInvalidLenErrs.setStatus('mandatory')
wfAtmVclRcvMissingEomErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvMissingEomErrs.setStatus('mandatory')
wfAtmVclRcvBufferOflowErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvBufferOflowErrs.setStatus('mandatory')
wfAtmVclRcvMaxLenExceedErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvMaxLenExceedErrs.setStatus('mandatory')
wfAtmVclRcvTrailerErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvTrailerErrs.setStatus('mandatory')
wfAtmVclRcvAbortErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvAbortErrs.setStatus('mandatory')
wfAtmVclRcvPacketLengthErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvPacketLengthErrs.setStatus('mandatory')
wfAtmVclRcvReassemAbortErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvReassemAbortErrs.setStatus('mandatory')
wfAtmVclRcvCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvCrcErrs.setStatus('mandatory')
wfAtmVclXmtOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclXmtOamCells.setStatus('mandatory')
wfAtmVclRcvOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvOamCells.setStatus('mandatory')
wfAtmVclRcvOamCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVclRcvOamCrcErrs.setStatus('mandatory')
wfAtmSigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7), )
if mibBuilder.loadTexts: wfAtmSigTable.setStatus('mandatory')
wfAtmSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmSigLineNumber"))
if mibBuilder.loadTexts: wfAtmSigEntry.setStatus('mandatory')
wfAtmSigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigDelete.setStatus('mandatory')
wfAtmSigDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigDisable.setStatus('mandatory')
wfAtmSigLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSigLineNumber.setStatus('mandatory')
wfAtmSigAtmCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSigAtmCct.setStatus('mandatory')
wfAtmSigState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSigState.setStatus('mandatory')
wfAtmSigMaxServiceUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxServiceUsers.setStatus('mandatory')
wfAtmSigMaxPtPtConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxPtPtConnections.setStatus('mandatory')
wfAtmSigMaxPtMultConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxPtMultConnections.setStatus('mandatory')
wfAtmSigMaxPartiesInMultConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxPartiesInMultConnect.setStatus('mandatory')
wfAtmSigMaxRoutingRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxRoutingRegistrations.setStatus('mandatory')
wfAtmSigMinBufferThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMinBufferThreshold.setStatus('mandatory')
wfAtmSigTimerResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255000)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigTimerResolution.setStatus('mandatory')
wfAtmSigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigVpi.setStatus('mandatory')
wfAtmSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigVci.setStatus('mandatory')
wfAtmSigStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v30", 1), ("v31", 2), ("v40", 3), ("sym", 4))).clone('v30')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigStandard.setStatus('mandatory')
wfAtmSigInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigInterfaceType.setStatus('mandatory')
wfAtmSigMinVciPtPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMinVciPtPt.setStatus('mandatory')
wfAtmSigMaxVciPtPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxVciPtPt.setStatus('mandatory')
wfAtmSigMinVpiPtPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMinVpiPtPt.setStatus('mandatory')
wfAtmSigMaxVpiPtPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxVpiPtPt.setStatus('mandatory')
wfAtmSigMinVciPtMltPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMinVciPtMltPt.setStatus('mandatory')
wfAtmSigMaxVciPtMltPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxVciPtMltPt.setStatus('mandatory')
wfAtmSigMinVpiPtMltPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMinVpiPtMltPt.setStatus('mandatory')
wfAtmSigMaxVpiPtMltPt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigMaxVpiPtMltPt.setStatus('mandatory')
wfAtmSigT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT303.setStatus('mandatory')
wfAtmSigT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT308.setStatus('mandatory')
wfAtmSigT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 540)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT309.setStatus('mandatory')
wfAtmSigT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT310.setStatus('mandatory')
wfAtmSigT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT313.setStatus('mandatory')
wfAtmSigT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT316.setStatus('mandatory')
wfAtmSigT316c = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT316c.setStatus('mandatory')
wfAtmSigT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT322.setStatus('mandatory')
wfAtmSigTDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigTDisc.setStatus('mandatory')
wfAtmSigT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT398.setStatus('mandatory')
wfAtmSigT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT399.setStatus('mandatory')
wfAtmSigNumRst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigNumRst.setStatus('mandatory')
wfAtmSigNumStat = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigNumStat.setStatus('mandatory')
wfAtmSigRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigRestart.setStatus('mandatory')
wfAtmSigDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 2147483647))).clone(namedValues=NamedValues(("disabled", 1), ("status", 2), ("detail", 4), ("all", 2147483647))).clone('status')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigDebug.setStatus('mandatory')
wfAtmSigCallsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigCallsSec.setStatus('mandatory')
wfAtmSigT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 1024)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT301.setStatus('mandatory')
wfAtmSigT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT304.setStatus('mandatory')
wfAtmSigT397 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 7, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 1024)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSigT397.setStatus('mandatory')
wfAtmSscopTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8), )
if mibBuilder.loadTexts: wfAtmSscopTable.setStatus('mandatory')
wfAtmSscopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmSscopLineNumber"))
if mibBuilder.loadTexts: wfAtmSscopEntry.setStatus('mandatory')
wfAtmSscopDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopDelete.setStatus('mandatory')
wfAtmSscopDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopDisable.setStatus('mandatory')
wfAtmSscopLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSscopLineNumber.setStatus('mandatory')
wfAtmSscopAtmCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSscopAtmCct.setStatus('mandatory')
wfAtmSscopState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmSscopState.setStatus('mandatory')
wfAtmSscopLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopLowThreshold.setStatus('mandatory')
wfAtmSscopUpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopUpThreshold.setStatus('mandatory')
wfAtmSscopArbitration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopArbitration.setStatus('mandatory')
wfAtmSscopPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopPollTimer.setStatus('mandatory')
wfAtmSscopKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopKeepAliveTimer.setStatus('mandatory')
wfAtmSscopNoResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopNoResponseTimer.setStatus('mandatory')
wfAtmSscopConnectControlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopConnectControlTimer.setStatus('mandatory')
wfAtmSscopMaxCc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopMaxCc.setStatus('mandatory')
wfAtmSscopMaxPd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopMaxPd.setStatus('mandatory')
wfAtmSscopMaxStat = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(67)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopMaxStat.setStatus('mandatory')
wfAtmSscopIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopIdleTimer.setStatus('mandatory')
wfAtmSscopStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v30", 1), ("v31", 2), ("v40", 3))).clone('v30')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopStandard.setStatus('mandatory')
wfAtmSscopDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 2147483647))).clone(namedValues=NamedValues(("disabled", 1), ("status", 2), ("detail", 4), ("all", 2147483647))).clone('status')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmSscopDebug.setStatus('mandatory')
wfAtmIlmiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9), )
if mibBuilder.loadTexts: wfAtmIlmiTable.setStatus('mandatory')
wfAtmIlmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmIlmiLineNumber"))
if mibBuilder.loadTexts: wfAtmIlmiEntry.setStatus('mandatory')
wfAtmIlmiDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiDelete.setStatus('mandatory')
wfAtmIlmiDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiDisable.setStatus('mandatory')
wfAtmIlmiLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmIlmiLineNumber.setStatus('mandatory')
wfAtmIlmiAtmCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmIlmiAtmCct.setStatus('mandatory')
wfAtmIlmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmIlmiState.setStatus('mandatory')
wfAtmIlmiLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiLowThreshold.setStatus('mandatory')
wfAtmIlmiUpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiUpThreshold.setStatus('mandatory')
wfAtmIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiVpi.setStatus('mandatory')
wfAtmIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiVci.setStatus('mandatory')
wfAtmIlmiInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiInterfaceType.setStatus('mandatory')
wfAtmIlmiLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmIlmiLocalPort.setStatus('mandatory')
wfAtmIlmiRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmIlmiRemotePort.setStatus('mandatory')
wfAtmIlmiGetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiGetTimer.setStatus('mandatory')
wfAtmIlmiGetRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiGetRetryCnt.setStatus('mandatory')
wfAtmIlmiGetNextTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiGetNextTimer.setStatus('mandatory')
wfAtmIlmiGetNextRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiGetNextRetryCnt.setStatus('mandatory')
wfAtmIlmiSetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiSetTimer.setStatus('mandatory')
wfAtmIlmiSetRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiSetRetryCnt.setStatus('mandatory')
wfAtmIlmiLocalOid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 19), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmIlmiLocalOid.setStatus('mandatory')
wfAtmIlmiDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 2147483647))).clone(namedValues=NamedValues(("disabled", 1), ("status", 2), ("detail", 4), ("all", 2147483647))).clone('status')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiDebug.setStatus('mandatory')
wfAtmIlmiNetPrefixTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmIlmiNetPrefixTimer.setStatus('mandatory')
wfAtmNetPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 10), )
if mibBuilder.loadTexts: wfAtmNetPrefixTable.setStatus('mandatory')
wfAtmNetPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 10, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmNetPrefixPort"), (0, "Wellfleet-ATM-MIB", "wfAtmNetPrefixPrefix"))
if mibBuilder.loadTexts: wfAtmNetPrefixEntry.setStatus('mandatory')
wfAtmNetPrefixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmNetPrefixPort.setStatus('mandatory')
wfAtmNetPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmNetPrefixPrefix.setStatus('mandatory')
wfAtmNetPrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmNetPrefixStatus.setStatus('mandatory')
wfAtmTableDebugTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 11), )
if mibBuilder.loadTexts: wfAtmTableDebugTable.setStatus('mandatory')
wfAtmTableDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 11, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmTableDebugSlot"))
if mibBuilder.loadTexts: wfAtmTableDebugEntry.setStatus('mandatory')
wfAtmTableDebugDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmTableDebugDelete.setStatus('mandatory')
wfAtmTableDebugSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmTableDebugSlot.setStatus('mandatory')
wfAtmTableDebugType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmTableDebugType.setStatus('mandatory')
wfAtmAlcDrvTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1), )
if mibBuilder.loadTexts: wfAtmAlcDrvTable.setStatus('mandatory')
wfAtmAlcDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcSlot"), (0, "Wellfleet-ATM-MIB", "wfAtmAlcPort"))
if mibBuilder.loadTexts: wfAtmAlcDrvEntry.setStatus('mandatory')
wfAtmAlcDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcDelete.setStatus('mandatory')
wfAtmAlcDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcDisable.setStatus('mandatory')
wfAtmAlcState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("download", 4), ("config", 5), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcState.setStatus('mandatory')
wfAtmAlcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSlot.setStatus('mandatory')
wfAtmAlcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcPort.setStatus('mandatory')
wfAtmAlcCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCct.setStatus('mandatory')
wfAtmAlcLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcLineNumber.setStatus('mandatory')
wfAtmAlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("typesonet", 1), ("typeds3", 2), ("type100mb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcType.setStatus('mandatory')
wfAtmAlcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4608))).clone(namedValues=NamedValues(("default", 4608)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcMtu.setStatus('mandatory')
wfAtmAlcSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(155520000, 100000000, 44736000))).clone(namedValues=NamedValues(("speed155mb", 155520000), ("speed100mb", 100000000), ("speed45mb", 44736000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSpeed.setStatus('mandatory')
wfAtmAlcLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcLastChange.setStatus('mandatory')
wfAtmAlcInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcInterfaceStatus.setStatus('mandatory')
wfAtmAlcInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcInterfaceIndex.setStatus('mandatory')
wfAtmAlcDpNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcDpNotify.setStatus('mandatory')
wfAtmAlcDpNotifyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcDpNotifyTimeout.setStatus('mandatory')
wfAtmAlcConfControlQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("default", 10))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfControlQSize.setStatus('mandatory')
wfAtmAlcConfIntqSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("default", 100))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfIntqSize.setStatus('mandatory')
wfAtmAlcConfLogqSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(25))).clone(namedValues=NamedValues(("default", 25))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfLogqSize.setStatus('mandatory')
wfAtmAlcConfNumXmtQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 29)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfNumXmtQueues.setStatus('mandatory')
wfAtmAlcUseDebugger = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcUseDebugger.setStatus('mandatory')
wfAtmAlcConfXmtClipSlotMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfXmtClipSlotMax.setStatus('mandatory')
wfAtmAlcXmtClipSlotMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtClipSlotMax.setStatus('mandatory')
wfAtmAlcConfXmtClipQueueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfXmtClipQueueMax.setStatus('mandatory')
wfAtmAlcXmtClipQueueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtClipQueueMax.setStatus('mandatory')
wfAtmAlcConfXmtClipQueueMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfXmtClipQueueMin.setStatus('mandatory')
wfAtmAlcXmtClipQueueMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtClipQueueMin.setStatus('mandatory')
wfAtmAlcXmtQueueBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("default", 40))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcXmtQueueBurst.setStatus('mandatory')
wfAtmAlcXmtPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtPackets.setStatus('mandatory')
wfAtmAlcXmtPacketClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtPacketClips.setStatus('mandatory')
wfAtmAlcXmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtOctets.setStatus('mandatory')
wfAtmAlcOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcOutQLen.setStatus('mandatory')
wfAtmAlcRcvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcRcvPackets.setStatus('mandatory')
wfAtmAlcRcvReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcRcvReplenMisses.setStatus('mandatory')
wfAtmAlcConfRcvBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcConfRcvBuffersMax.setStatus('mandatory')
wfAtmAlcRcvBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcRcvBuffersMax.setStatus('mandatory')
wfAtmAlcMadrCt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcMadrCt.setStatus('mandatory')
wfAtmAlcMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcMadr.setStatus('mandatory')
wfAtmAlcVcInactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcVcInactEnable.setStatus('mandatory')
wfAtmAlcXmtBadVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtBadVcs.setStatus('mandatory')
wfAtmAlcXmtqTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2), )
if mibBuilder.loadTexts: wfAtmAlcXmtqTable.setStatus('mandatory')
wfAtmAlcXmtqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcXmtqIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmAlcXmtqNumber"))
if mibBuilder.loadTexts: wfAtmAlcXmtqEntry.setStatus('mandatory')
wfAtmAlcXmtqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqIndex.setStatus('mandatory')
wfAtmAlcXmtqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqNumber.setStatus('mandatory')
wfAtmAlcXmtqState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 20))).clone(namedValues=NamedValues(("created", 1), ("initdone", 2), ("msgsent", 3), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqState.setStatus('mandatory')
wfAtmAlcXmtqStickyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqStickyMask.setStatus('mandatory')
wfAtmAlcXmtqVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqVcs.setStatus('mandatory')
wfAtmAlcXmtqOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqOutQLen.setStatus('mandatory')
wfAtmAlcXmtqOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqOctets.setStatus('mandatory')
wfAtmAlcXmtqPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqPackets.setStatus('mandatory')
wfAtmAlcXmtqPacketClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcXmtqPacketClips.setStatus('mandatory')
wfAtmAlcCopConfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3), )
if mibBuilder.loadTexts: wfAtmAlcCopConfTable.setStatus('mandatory')
wfAtmAlcCopConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcCopConfIndex"))
if mibBuilder.loadTexts: wfAtmAlcCopConfEntry.setStatus('mandatory')
wfAtmAlcCopConfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopConfDelete.setStatus('mandatory')
wfAtmAlcCopConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopConfIndex.setStatus('mandatory')
wfAtmAlcCopBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 1024)).clone(532)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopBufSize.setStatus('mandatory')
wfAtmAlcCopConfXmtBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 90)).clone(55)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopConfXmtBufs.setStatus('mandatory')
wfAtmAlcCopConfRcvBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 90)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopConfRcvBufs.setStatus('mandatory')
wfAtmAlcCopDmaHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopDmaHighWatermark.setStatus('mandatory')
wfAtmAlcCopDmaLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopDmaLowWatermark.setStatus('mandatory')
wfAtmAlcCopCacheControl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("icache", 2), ("dcache", 3), ("none", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopCacheControl.setStatus('mandatory')
wfAtmAlcCopHwModId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopHwModId.setStatus('mandatory')
wfAtmAlcCopVcInactTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcCopVcInactTimeout.setStatus('mandatory')
wfAtmAlcCopHwTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4), )
if mibBuilder.loadTexts: wfAtmAlcCopHwTable.setStatus('mandatory')
wfAtmAlcCopHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcCopHwIndex"))
if mibBuilder.loadTexts: wfAtmAlcCopHwEntry.setStatus('mandatory')
wfAtmAlcCopHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopHwIndex.setStatus('mandatory')
wfAtmAlcCopType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("m68040", 1), ("m68060", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopType.setStatus('mandatory')
wfAtmAlcCopPktMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopPktMemSize.setStatus('mandatory')
wfAtmAlcCopCtlMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopCtlMemSize.setStatus('mandatory')
wfAtmAlcCopInsMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopInsMemSize.setStatus('mandatory')
wfAtmAlcCopAlcClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopAlcClockSpeed.setStatus('mandatory')
wfAtmAlcCopAlcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopAlcVersion.setStatus('mandatory')
wfAtmAlcCopNtcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopNtcVersion.setStatus('mandatory')
wfAtmAlcCopAtcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopAtcVersion.setStatus('mandatory')
wfAtmAlcCopInfoTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5), )
if mibBuilder.loadTexts: wfAtmAlcCopInfoTable.setStatus('mandatory')
wfAtmAlcCopInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcCopInfoIndex"))
if mibBuilder.loadTexts: wfAtmAlcCopInfoEntry.setStatus('mandatory')
wfAtmAlcCopInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopInfoIndex.setStatus('mandatory')
wfAtmAlcCopState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operational", 1), ("nonoperational", 2), ("init", 3), ("config", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopState.setStatus('mandatory')
wfAtmAlcCopConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4095))).clone(namedValues=NamedValues(("dma", 1), ("sar", 2), ("sartraf", 4), ("sarpcrq", 8), ("sarscrq", 16), ("frmgen", 32), ("frmrcv", 64), ("frmxmt", 128), ("frmoam", 256), ("frmstats", 512), ("frmcsi", 1024), ("frmdma", 2048), ("done", 4095)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopConfigState.setStatus('mandatory')
wfAtmAlcCopTotalBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopTotalBufs.setStatus('mandatory')
wfAtmAlcCopTotalXmtBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopTotalXmtBufs.setStatus('mandatory')
wfAtmAlcCopTotalRcvBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopTotalRcvBufs.setStatus('mandatory')
wfAtmAlcCopDataPathTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6), )
if mibBuilder.loadTexts: wfAtmAlcCopDataPathTable.setStatus('mandatory')
wfAtmAlcCopDataPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcCopDataPathIndex"))
if mibBuilder.loadTexts: wfAtmAlcCopDataPathEntry.setStatus('mandatory')
wfAtmAlcCopDataPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopDataPathIndex.setStatus('mandatory')
wfAtmAlcCopXmtPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtPackets.setStatus('mandatory')
wfAtmAlcCopXmtBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtBuffers.setStatus('mandatory')
wfAtmAlcCopXmtErrBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtErrBuffers.setStatus('mandatory')
wfAtmAlcCopXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtCells.setStatus('mandatory')
wfAtmAlcCopXmtUnassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtUnassCells.setStatus('mandatory')
wfAtmAlcCopXmtIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtIdleCells.setStatus('mandatory')
wfAtmAlcCopXmtUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtUserCells.setStatus('mandatory')
wfAtmAlcCopXmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtOctets.setStatus('mandatory')
wfAtmAlcCopRcvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvPackets.setStatus('mandatory')
wfAtmAlcCopRcvClipPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvClipPackets.setStatus('mandatory')
wfAtmAlcCopRcvBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvBuffers.setStatus('mandatory')
wfAtmAlcCopRcvErrBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvErrBuffers.setStatus('mandatory')
wfAtmAlcCopRcvClipBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvClipBuffers.setStatus('mandatory')
wfAtmAlcCopRcvSarDropBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvSarDropBuffers.setStatus('mandatory')
wfAtmAlcCopRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvCells.setStatus('mandatory')
wfAtmAlcCopRcvDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvDropCells.setStatus('mandatory')
wfAtmAlcCopRcvUnassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvUnassCells.setStatus('mandatory')
wfAtmAlcCopRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvIdleCells.setStatus('mandatory')
wfAtmAlcCopRcvUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvUserCells.setStatus('mandatory')
wfAtmAlcCopRcvSarDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvSarDropCells.setStatus('mandatory')
wfAtmAlcCopRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvOctets.setStatus('mandatory')
wfAtmAlcCopXmtOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtOamCells.setStatus('mandatory')
wfAtmAlcCopRcvOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvOamCells.setStatus('mandatory')
wfAtmAlcCopRcvOamCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvOamCrcErrs.setStatus('mandatory')
wfAtmAlcCopErrorTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7), )
if mibBuilder.loadTexts: wfAtmAlcCopErrorTable.setStatus('mandatory')
wfAtmAlcCopErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcCopErrorIndex"))
if mibBuilder.loadTexts: wfAtmAlcCopErrorEntry.setStatus('mandatory')
wfAtmAlcCopErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopErrorIndex.setStatus('mandatory')
wfAtmAlcCopHecDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopHecDetects.setStatus('mandatory')
wfAtmAlcCopHecCorrects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopHecCorrects.setStatus('mandatory')
wfAtmAlcCopB2Febes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopB2Febes.setStatus('mandatory')
wfAtmAlcCopB3Febes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopB3Febes.setStatus('mandatory')
wfAtmAlcCopF1Febes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopF1Febes.setStatus('mandatory')
wfAtmAlcCopF3Febes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopF3Febes.setStatus('mandatory')
wfAtmAlcCopG1Febes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopG1Febes.setStatus('mandatory')
wfAtmAlcCopDropIntqEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopDropIntqEvents.setStatus('mandatory')
wfAtmAlcCopDropLogqEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopDropLogqEvents.setStatus('mandatory')
wfAtmAlcCopDmaFifoOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopDmaFifoOverruns.setStatus('mandatory')
wfAtmAlcCopDmaFifoUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopDmaFifoUnderruns.setStatus('mandatory')
wfAtmAlcCopLossSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopLossSignals.setStatus('mandatory')
wfAtmAlcCopLossFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopLossFrames.setStatus('mandatory')
wfAtmAlcCopLossPointers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopLossPointers.setStatus('mandatory')
wfAtmAlcCopOutCellDelins = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopOutCellDelins.setStatus('mandatory')
wfAtmAlcCopInCellDelins = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopInCellDelins.setStatus('mandatory')
wfAtmAlcCopBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopBufOverflows.setStatus('mandatory')
wfAtmAlcCopXmtQueueFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtQueueFulls.setStatus('mandatory')
wfAtmAlcCopXmtAtes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopXmtAtes.setStatus('mandatory')
wfAtmAlcCopRcvQueueEmptys = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvQueueEmptys.setStatus('mandatory')
wfAtmAlcCopRcvWriteFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvWriteFails.setStatus('mandatory')
wfAtmAlcCopRcvQueueFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvQueueFulls.setStatus('mandatory')
wfAtmAlcCopRcvAtes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcCopRcvAtes.setStatus('mandatory')
wfAtmAlcSarConfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8), )
if mibBuilder.loadTexts: wfAtmAlcSarConfTable.setStatus('mandatory')
wfAtmAlcSarConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcSarConfIndex"))
if mibBuilder.loadTexts: wfAtmAlcSarConfEntry.setStatus('mandatory')
wfAtmAlcSarConfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarConfDelete.setStatus('mandatory')
wfAtmAlcSarConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarConfIndex.setStatus('mandatory')
wfAtmAlcSarDmaBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarDmaBurstLength.setStatus('mandatory')
wfAtmAlcSarDmaModeBw = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bit32", 1), ("bit64", 2))).clone('bit32')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarDmaModeBw.setStatus('mandatory')
wfAtmAlcSarDmaModeBmode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intel", 1), ("motorola", 2))).clone('intel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarDmaModeBmode.setStatus('mandatory')
wfAtmAlcSarDmaModeOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bigendian", 1), ("littleendian", 2))).clone('bigendian')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarDmaModeOrder.setStatus('mandatory')
wfAtmAlcSarDmaModeMmode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("ram", 2))).clone('ram')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarDmaModeMmode.setStatus('mandatory')
wfAtmAlcSarDmaModeCmode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("fast", 2))).clone('fast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarDmaModeCmode.setStatus('mandatory')
wfAtmAlcSarDmaModeSync = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("async", 1), ("sync", 2))).clone('async')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarDmaModeSync.setStatus('mandatory')
wfAtmAlcSarControlRif = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarControlRif.setStatus('mandatory')
wfAtmAlcSarControlLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarControlLoop.setStatus('mandatory')
wfAtmAlcSarModeRtmr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notag", 1), ("oneoctettag", 2), ("twooctettag", 3), ("threeoctettag", 4))).clone('notag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeRtmr.setStatus('mandatory')
wfAtmAlcSarModeRid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vci", 1), ("mid", 2))).clone('vci')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeRid.setStatus('mandatory')
wfAtmAlcSarModeAal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeAal.setStatus('mandatory')
wfAtmAlcSarModeDmask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeDmask.setStatus('mandatory')
wfAtmAlcSarModeDchain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeDchain.setStatus('mandatory')
wfAtmAlcSarModeSmode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeSmode.setStatus('mandatory')
wfAtmAlcSarModeBchain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeBchain.setStatus('mandatory')
wfAtmAlcSarModeHec = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeHec.setStatus('mandatory')
wfAtmAlcSarModeVpf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeVpf.setStatus('mandatory')
wfAtmAlcSarModeBas = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeBas.setStatus('mandatory')
wfAtmAlcSarModeAm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trickle", 1), ("burst", 2))).clone('trickle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeAm.setStatus('mandatory')
wfAtmAlcSarModeTrtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notag", 1), ("oneoctettag", 2), ("twooctettag", 3), ("threeoctettag", 4))).clone('notag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarModeTrtl.setStatus('mandatory')
wfAtmAlcSarTimeoutCtrPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarTimeoutCtrPeriod.setStatus('mandatory')
wfAtmAlcSarTimeoutCtrInt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarTimeoutCtrInt.setStatus('mandatory')
wfAtmAlcSarMaxReceivePktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4608))).clone(namedValues=NamedValues(("default", 4608))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarMaxReceivePktLen.setStatus('mandatory')
wfAtmAlcSarTrafficMgtTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9), )
if mibBuilder.loadTexts: wfAtmAlcSarTrafficMgtTable.setStatus('mandatory')
wfAtmAlcSarTrafficMgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcSarTrafficMgtIndex"))
if mibBuilder.loadTexts: wfAtmAlcSarTrafficMgtEntry.setStatus('mandatory')
wfAtmAlcSarTrafficMgtDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarTrafficMgtDelete.setStatus('mandatory')
wfAtmAlcSarTrafficMgtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarTrafficMgtIndex.setStatus('mandatory')
wfAtmAlcSarPeakCellRateEna = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarPeakCellRateEna.setStatus('mandatory')
wfAtmAlcSarAvgCellRateEna = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarAvgCellRateEna.setStatus('mandatory')
wfAtmAlcSarPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(365566))).clone(namedValues=NamedValues(("default", 365566))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarPeakCellRate.setStatus('mandatory')
wfAtmAlcSarAvgCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(365566))).clone(namedValues=NamedValues(("default", 365566))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarAvgCellRate.setStatus('mandatory')
wfAtmAlcSarMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("default", 40))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcSarMaxBurstSize.setStatus('mandatory')
wfAtmAlcSarRateQueueTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10), )
if mibBuilder.loadTexts: wfAtmAlcSarRateQueueTable.setStatus('mandatory')
wfAtmAlcSarRateQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcSarRateQueueIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmAlcSarRateQueueNumber"))
if mibBuilder.loadTexts: wfAtmAlcSarRateQueueEntry.setStatus('mandatory')
wfAtmAlcSarRateQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarRateQueueIndex.setStatus('mandatory')
wfAtmAlcSarRateQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarRateQueueNumber.setStatus('mandatory')
wfAtmAlcSarRateQueueState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarRateQueueState.setStatus('mandatory')
wfAtmAlcSarRateQueuePcr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarRateQueuePcr.setStatus('mandatory')
wfAtmAlcSarRateQueueVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarRateQueueVcs.setStatus('mandatory')
wfAtmAlcSarRateQueueDef = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("implicit", 1), ("explicit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcSarRateQueueDef.setStatus('mandatory')
wfAtmAlcFrmConfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11), )
if mibBuilder.loadTexts: wfAtmAlcFrmConfTable.setStatus('mandatory')
wfAtmAlcFrmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmAlcFrmConfIndex"))
if mibBuilder.loadTexts: wfAtmAlcFrmConfEntry.setStatus('mandatory')
wfAtmAlcFrmConfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmConfDelete.setStatus('mandatory')
wfAtmAlcFrmConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmAlcFrmConfIndex.setStatus('mandatory')
wfAtmAlcFrmGenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmGenEnable.setStatus('mandatory')
wfAtmAlcFrmGenFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cell", 1), ("sdh", 2), ("sonet", 3), ("ds3", 4), ("e3", 5), ("sonetsts1", 6), ("ds3nonplcp", 7))).clone('sonet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmGenFramingMode.setStatus('mandatory')
wfAtmAlcFrmGenScramblerEna = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmGenScramblerEna.setStatus('mandatory')
wfAtmAlcFrmGenDescrambleEna = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmGenDescrambleEna.setStatus('mandatory')
wfAtmAlcFrmGenLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmGenLoopback.setStatus('mandatory')
wfAtmAlcFrmGenSyncFoundCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmGenSyncFoundCnt.setStatus('mandatory')
wfAtmAlcFrmGenSyncLostCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmGenSyncLostCnt.setStatus('mandatory')
wfAtmAlcFrmRcvCellEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvCellEnable.setStatus('mandatory')
wfAtmAlcFrmRcvOamCrcCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvOamCrcCheck.setStatus('mandatory')
wfAtmAlcFrmRcvOamCrcGen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvOamCrcGen.setStatus('mandatory')
wfAtmAlcFrmRcvCellInsPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("insert", 2))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvCellInsPrio.setStatus('mandatory')
wfAtmAlcFrmRcvInsertPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("default", 4))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvInsertPcr.setStatus('mandatory')
wfAtmAlcFrmRcvGfcIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpi12", 1), ("vpi8", 2))).clone('vpi8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvGfcIgnore.setStatus('mandatory')
wfAtmAlcFrmRcvDescrambleCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDescrambleCtl.setStatus('mandatory')
wfAtmAlcFrmRcvHecRcvMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvHecRcvMask.setStatus('mandatory')
wfAtmAlcFrmRcvErrCorrectEna = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvErrCorrectEna.setStatus('mandatory')
wfAtmAlcFrmRcvByteAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonalign", 1), ("align", 2))).clone('nonalign')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvByteAlignment.setStatus('mandatory')
wfAtmAlcFrmRcvCellSyncFound = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvCellSyncFound.setStatus('mandatory')
wfAtmAlcFrmRcvCellSyncLost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvCellSyncLost.setStatus('mandatory')
wfAtmAlcFrmRcvExtUserCell = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("defined", 2), ("undefined", 3), ("invalid", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtUserCell.setStatus('mandatory')
wfAtmAlcFrmRcvExtMetaSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtMetaSig.setStatus('mandatory')
wfAtmAlcFrmRcvExtBcastSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtBcastSig.setStatus('mandatory')
wfAtmAlcFrmRcvExtPointSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtPointSig.setStatus('mandatory')
wfAtmAlcFrmRcvExtIlmiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtIlmiSig.setStatus('mandatory')
wfAtmAlcFrmRcvExtF4F5PrfMan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtF4F5PrfMan.setStatus('mandatory')
wfAtmAlcFrmRcvExtF1F3PlOam = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtF1F3PlOam.setStatus('mandatory')
wfAtmAlcFrmRcvExtF4Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtF4Segment.setStatus('mandatory')
wfAtmAlcFrmRcvExtF4EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtF4EndEnd.setStatus('mandatory')
wfAtmAlcFrmRcvExtF5Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtF5Segment.setStatus('mandatory')
wfAtmAlcFrmRcvExtF5EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvExtF5EndEnd.setStatus('mandatory')
wfAtmAlcFrmRcvDisUserCell = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("defined", 2), ("undefined", 3), ("invalid", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisUserCell.setStatus('mandatory')
wfAtmAlcFrmRcvDisMetaSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisMetaSig.setStatus('mandatory')
wfAtmAlcFrmRcvDisBcastSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisBcastSig.setStatus('mandatory')
wfAtmAlcFrmRcvDisPointSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisPointSig.setStatus('mandatory')
wfAtmAlcFrmRcvDisIlmiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisIlmiSig.setStatus('mandatory')
wfAtmAlcFrmRcvDisUnassCell = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisUnassCell.setStatus('mandatory')
wfAtmAlcFrmRcvDisF4Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisF4Segment.setStatus('mandatory')
wfAtmAlcFrmRcvDisF4EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisF4EndEnd.setStatus('mandatory')
wfAtmAlcFrmRcvDisF5Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisF5Segment.setStatus('mandatory')
wfAtmAlcFrmRcvDisF5EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmRcvDisF5EndEnd.setStatus('mandatory')
wfAtmAlcFrmXmtCellEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtCellEnable.setStatus('mandatory')
wfAtmAlcFrmXmtOamCrcCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtOamCrcCheck.setStatus('mandatory')
wfAtmAlcFrmXmtOamCrcGen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtOamCrcGen.setStatus('mandatory')
wfAtmAlcFrmXmtCellInsPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("insert", 2))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtCellInsPrio.setStatus('mandatory')
wfAtmAlcFrmXmtInsertPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("default", 4))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtInsertPcr.setStatus('mandatory')
wfAtmAlcFrmXmtGfcIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpi12", 1), ("vpi8", 2))).clone('vpi8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtGfcIgnore.setStatus('mandatory')
wfAtmAlcFrmXmtCellDecouple = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("unassign", 2))).clone('unassign')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtCellDecouple.setStatus('mandatory')
wfAtmAlcFrmXmtScrambleCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtScrambleCtl.setStatus('mandatory')
wfAtmAlcFrmXmtHecXmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtHecXmtMask.setStatus('mandatory')
wfAtmAlcFrmXmtExtUserCell = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("defined", 2), ("undefined", 3), ("invalid", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtUserCell.setStatus('mandatory')
wfAtmAlcFrmXmtExtMetaSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtMetaSig.setStatus('mandatory')
wfAtmAlcFrmXmtExtBcastSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtBcastSig.setStatus('mandatory')
wfAtmAlcFrmXmtExtPointSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtPointSig.setStatus('mandatory')
wfAtmAlcFrmXmtExtIlmiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtIlmiSig.setStatus('mandatory')
wfAtmAlcFrmXmtExtF4F5PrfMan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtF4F5PrfMan.setStatus('mandatory')
wfAtmAlcFrmXmtExtF4Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtF4Segment.setStatus('mandatory')
wfAtmAlcFrmXmtExtF4EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtF4EndEnd.setStatus('mandatory')
wfAtmAlcFrmXmtExtF5Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtF5Segment.setStatus('mandatory')
wfAtmAlcFrmXmtExtF5EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtExtF5EndEnd.setStatus('mandatory')
wfAtmAlcFrmXmtDisUserCell = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("defined", 2), ("undefined", 3), ("invalid", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisUserCell.setStatus('mandatory')
wfAtmAlcFrmXmtDisMetaSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisMetaSig.setStatus('mandatory')
wfAtmAlcFrmXmtDisBcastSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisBcastSig.setStatus('mandatory')
wfAtmAlcFrmXmtDisPointSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisPointSig.setStatus('mandatory')
wfAtmAlcFrmXmtDisIlmiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisIlmiSig.setStatus('mandatory')
wfAtmAlcFrmXmtDisUnassCell = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisUnassCell.setStatus('mandatory')
wfAtmAlcFrmXmtDisF4Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisF4Segment.setStatus('mandatory')
wfAtmAlcFrmXmtDisF4EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisF4EndEnd.setStatus('mandatory')
wfAtmAlcFrmXmtDisF5Segment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisF5Segment.setStatus('mandatory')
wfAtmAlcFrmXmtDisF5EndEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmXmtDisF5EndEnd.setStatus('mandatory')
wfAtmAlcFrmOamEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamEnable.setStatus('mandatory')
wfAtmAlcFrmOamInvertBip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("invert", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamInvertBip.setStatus('mandatory')
wfAtmAlcFrmOamTxPathFerf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("auto", 2), ("set", 3))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamTxPathFerf.setStatus('mandatory')
wfAtmAlcFrmOamTxSectionFerf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("auto", 2), ("set", 3))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamTxSectionFerf.setStatus('mandatory')
wfAtmAlcFrmOamTxPathAis = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("set", 2))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamTxPathAis.setStatus('mandatory')
wfAtmAlcFrmOamTxSectionAis = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("set", 2))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamTxSectionAis.setStatus('mandatory')
wfAtmAlcFrmOamTxPathFebe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamTxPathFebe.setStatus('mandatory')
wfAtmAlcFrmOamTxSectionFebe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmOamTxSectionFebe.setStatus('mandatory')
wfAtmAlcFrmStatsSwEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsSwEnable.setStatus('mandatory')
wfAtmAlcFrmStatsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("header", 2), ("header16", 3), ("header32", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsMode.setStatus('mandatory')
wfAtmAlcFrmStatsReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsReceive.setStatus('mandatory')
wfAtmAlcFrmStatsTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsTransmit.setStatus('mandatory')
wfAtmAlcFrmStatsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("hmask", 2), ("invalid", 3), ("lmask", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsMask.setStatus('mandatory')
wfAtmAlcFrmStatsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 85), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsTimeout.setStatus('mandatory')
wfAtmAlcFrmStatsTimerEna = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsTimerEna.setStatus('mandatory')
wfAtmAlcFrmStatsOflowEna = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsOflowEna.setStatus('mandatory')
wfAtmAlcFrmStatsForceDma = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("dma", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmStatsForceDma.setStatus('mandatory')
wfAtmAlcFrmCsiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiEnable.setStatus('mandatory')
wfAtmAlcFrmCsiLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiLoop.setStatus('mandatory')
wfAtmAlcFrmCsiRcvAtcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiRcvAtcEnable.setStatus('mandatory')
wfAtmAlcFrmCsiRcvAte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiRcvAte.setStatus('mandatory')
wfAtmAlcFrmCsiRcvClpBitOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("header", 1), ("xlat", 2), ("force0", 3), ("force1", 4))).clone('header')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiRcvClpBitOpt.setStatus('mandatory')
wfAtmAlcFrmCsiRcvCongBitOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("header", 1), ("xlat", 2), ("force0", 3), ("force1", 4))).clone('header')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiRcvCongBitOpt.setStatus('mandatory')
wfAtmAlcFrmCsiRoutingTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tag0", 1), ("tag1", 2), ("tag2", 3), ("tag3", 4))).clone('tag0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiRoutingTag.setStatus('mandatory')
wfAtmAlcFrmCsiXmtAtcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiXmtAtcEnable.setStatus('mandatory')
wfAtmAlcFrmCsiXmtAte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiXmtAte.setStatus('mandatory')
wfAtmAlcFrmCsiXmtClpBitOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("header", 1), ("xlat", 2), ("force0", 3), ("force1", 4))).clone('header')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiXmtClpBitOpt.setStatus('mandatory')
wfAtmAlcFrmCsiXmtCongBitOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("header", 1), ("xlat", 2), ("force0", 3), ("force1", 4))).clone('header')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiXmtCongBitOpt.setStatus('mandatory')
wfAtmAlcFrmCsiOmitHec = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cell53byte", 1), ("cell52byte", 2))).clone('cell53byte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiOmitHec.setStatus('mandatory')
wfAtmAlcFrmCsiRcvHecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiRcvHecEnable.setStatus('mandatory')
wfAtmAlcFrmCsiRcvHecMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmCsiRcvHecMask.setStatus('mandatory')
wfAtmAlcFrmDmaChan0Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaChan0Enable.setStatus('mandatory')
wfAtmAlcFrmDmaChan1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaChan1Enable.setStatus('mandatory')
wfAtmAlcFrmDmaChan2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaChan2Enable.setStatus('mandatory')
wfAtmAlcFrmDmaChan3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaChan3Enable.setStatus('mandatory')
wfAtmAlcFrmDmaChan4Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaChan4Enable.setStatus('mandatory')
wfAtmAlcFrmDmaChan5Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaChan5Enable.setStatus('mandatory')
wfAtmAlcFrmDmaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaEnable.setStatus('mandatory')
wfAtmAlcFrmDmaStop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notstopped", 1), ("stopped", 2))).clone('notstopped')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaStop.setStatus('mandatory')
wfAtmAlcFrmDmaPrioritySel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chan0prio", 1), ("chan5prio", 2))).clone('chan0prio')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaPrioritySel.setStatus('mandatory')
wfAtmAlcFrmDmaFastXferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 2, 11, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descdma", 1), ("fastdma", 2))).clone('descdma')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcFrmDmaFastXferMode.setStatus('mandatory')
wfAtmizerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1), )
if mibBuilder.loadTexts: wfAtmizerCfgTable.setStatus('mandatory')
wfAtmizerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmizerCfgSlot"))
if mibBuilder.loadTexts: wfAtmizerCfgEntry.setStatus('mandatory')
wfAtmizerCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerCfgSlot.setStatus('mandatory')
wfAtmizerCfgMaxVcl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerCfgMaxVcl.setStatus('mandatory')
wfAtmizerCfgCurrVcl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerCfgCurrVcl.setStatus('mandatory')
wfAtmizerCfgRxQueueLenMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(150))).clone(namedValues=NamedValues(("default", 150))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgRxQueueLenMax.setStatus('mandatory')
wfAtmizerCfgRxQueueTmoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("default", 100))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgRxQueueTmoMax.setStatus('mandatory')
wfAtmizerCfgRxBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgRxBuffersMax.setStatus('mandatory')
wfAtmizerCfgRxPagesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgRxPagesMax.setStatus('mandatory')
wfAtmizerCfgTxBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgTxBuffersMax.setStatus('mandatory')
wfAtmizerCfgTxPagesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgTxPagesMax.setStatus('mandatory')
wfAtmizerCfgTxPercentRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50))).clone(namedValues=NamedValues(("default", 50))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgTxPercentRsrcs.setStatus('mandatory')
wfAtmizerCfgHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("default", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgHeartbeatPeriod.setStatus('mandatory')
wfAtmizerRxBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerRxBuffersMax.setStatus('mandatory')
wfAtmizerRxPagesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerRxPagesMax.setStatus('mandatory')
wfAtmizerTxBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerTxBuffersMax.setStatus('mandatory')
wfAtmizerTxPagesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerTxPagesMax.setStatus('mandatory')
wfAtmizerTxPercentRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerTxPercentRsrcs.setStatus('mandatory')
wfAtmizerTxPerVcClipEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerTxPerVcClipEnable.setStatus('mandatory')
wfAtmizerCfgTxVcBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerCfgTxVcBuffersMax.setStatus('mandatory')
wfAtmizerTxVcBuffersMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerTxVcBuffersMax.setStatus('mandatory')
wfAtmizerDrvCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2), )
if mibBuilder.loadTexts: wfAtmizerDrvCfgTable.setStatus('mandatory')
wfAtmizerDrvCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmizerDrvCfgSlot"), (0, "Wellfleet-ATM-MIB", "wfAtmizerDrvCfgPort"))
if mibBuilder.loadTexts: wfAtmizerDrvCfgEntry.setStatus('mandatory')
wfAtmizerDrvCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgDelete.setStatus('mandatory')
wfAtmizerDrvCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgEnable.setStatus('mandatory')
wfAtmizerDrvCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgState.setStatus('mandatory')
wfAtmizerDrvCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgSlot.setStatus('mandatory')
wfAtmizerDrvCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgPort.setStatus('mandatory')
wfAtmizerDrvCfgCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgCct.setStatus('mandatory')
wfAtmizerDrvCfgLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgLineNumber.setStatus('mandatory')
wfAtmizerDrvCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonet", 1), ("ds3", 2), ("e3", 3), ("ds1", 4), ("e1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgType.setStatus('mandatory')
wfAtmizerDrvCfgMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9188)).clone(4608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgMtu.setStatus('mandatory')
wfAtmizerDrvCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(622080000, 155520000, 140000000, 100000000, 44736000, 34368000, 2048000, 1544000))).clone(namedValues=NamedValues(("speed622mb", 622080000), ("speed155mb", 155520000), ("speed140mb", 140000000), ("speed100mb", 100000000), ("speed45mb", 44736000), ("speed35mb", 34368000), ("speed2p048mb", 2048000), ("speed1p544mb", 1544000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgSpeed.setStatus('mandatory')
wfAtmizerDrvCfgDpNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgDpNotify.setStatus('mandatory')
wfAtmizerDrvCfgDpNotifyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgDpNotifyTimeout.setStatus('mandatory')
wfAtmizerDrvCfgVcInactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgVcInactEnable.setStatus('mandatory')
wfAtmizerDrvCfgVcInactTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgVcInactTimeout.setStatus('mandatory')
wfAtmizerDrvCfgMadrCt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgMadrCt.setStatus('mandatory')
wfAtmizerDrvCfgMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgMadr.setStatus('mandatory')
wfAtmizerDrvCfgFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("sdh", 1), ("sonet", 2), ("cbit", 3), ("m23", 4), ("g751", 5), ("g832", 6), ("cbitnofallback", 7), ("clearchannel", 8), ("t1adm", 9), ("e1adm", 10), ("t1plcp", 11), ("e1plcp", 12), ("t3cbitplcp", 13), ("t3m23plcp", 14))).clone('sonet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgFramingMode.setStatus('mandatory')
wfAtmizerDrvCfgClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intrn", 1), ("extrn", 2))).clone('intrn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgClkSource.setStatus('mandatory')
wfAtmizerDrvCfgLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("atmcdbg", 1), ("atmcdb2", 2), ("vcmsg", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgLogLevel.setStatus('mandatory')
wfAtmizerDrvCfgDsx3SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("payload", 3), ("reset", 4), ("loop", 5), ("pattern", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgDsx3SendCode.setStatus('mandatory')
wfAtmizerDrvCfgDsx3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("line", 3), ("other", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgDsx3LoopbackConfig.setStatus('mandatory')
wfAtmizerDrvCfgDs3Scrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgDs3Scrambling.setStatus('mandatory')
wfAtmizerDrvCfgDs3LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgDs3LineBuildOut.setStatus('mandatory')
wfAtmizerDrvCfgModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgModule.setStatus('mandatory')
wfAtmizerFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerFramingMode.setStatus('mandatory')
wfAtmizerDrvCfgIwfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgIwfCct.setStatus('mandatory')
wfAtmizerDrvCfgCcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("mplsMlm", 2), ("atmCc", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgCcType.setStatus('mandatory')
wfAtmizerDrvCfgMaxVcls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgMaxVcls.setStatus('mandatory')
wfAtmizerDrvCfgCurrVcls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgCurrVcls.setStatus('mandatory')
wfAtmizerDrvCfgScrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDrvCfgScrSum.setStatus('mandatory')
wfAtmizerDrvCfgExtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 2, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDrvCfgExtRate.setStatus('mandatory')
wfAtmizerIntfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3), )
if mibBuilder.loadTexts: wfAtmizerIntfStatsTable.setStatus('mandatory')
wfAtmizerIntfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmizerIntfSlot"), (0, "Wellfleet-ATM-MIB", "wfAtmizerIntfPort"))
if mibBuilder.loadTexts: wfAtmizerIntfStatsEntry.setStatus('mandatory')
wfAtmizerIntfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfSlot.setStatus('mandatory')
wfAtmizerIntfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfPort.setStatus('mandatory')
wfAtmizerIntfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfLastChange.setStatus('mandatory')
wfAtmizerIntfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfOutQLen.setStatus('mandatory')
wfAtmizerIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfStatus.setStatus('mandatory')
wfAtmizerIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfIndex.setStatus('mandatory')
wfAtmizerIntfOcdEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfOcdEvents.setStatus('mandatory')
wfAtmizerIntfTcAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-alarm", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTcAlarmState.setStatus('mandatory')
wfAtmizerIntfRxPacketsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxPacketsOkWrap.setStatus('mandatory')
wfAtmizerIntfRxPacketsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxPacketsOk.setStatus('mandatory')
wfAtmizerIntfRxCellsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxCellsOkWrap.setStatus('mandatory')
wfAtmizerIntfRxCellsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxCellsOk.setStatus('mandatory')
wfAtmizerIntfRxOamCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxOamCount.setStatus('mandatory')
wfAtmizerIntfRxFlowCtrlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxFlowCtrlCount.setStatus('mandatory')
wfAtmizerIntfRxInvalidHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxInvalidHeaders.setStatus('mandatory')
wfAtmizerIntfRxOverSizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxOverSizedSDUs.setStatus('mandatory')
wfAtmizerIntfRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxCrcErrors.setStatus('mandatory')
wfAtmizerIntfRxCrc10Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxCrc10Errors.setStatus('mandatory')
wfAtmizerIntfRxLackBufCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxLackBufCredits.setStatus('mandatory')
wfAtmizerIntfRxLackPageCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxLackPageCredits.setStatus('mandatory')
wfAtmizerIntfRxLackBufResc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxLackBufResc.setStatus('mandatory')
wfAtmizerIntfRxLackPageResc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxLackPageResc.setStatus('mandatory')
wfAtmizerIntfTxPacketsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxPacketsOkWrap.setStatus('mandatory')
wfAtmizerIntfTxPacketsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxPacketsOk.setStatus('mandatory')
wfAtmizerIntfTxCellsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxCellsOkWrap.setStatus('mandatory')
wfAtmizerIntfTxCellsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxCellsOk.setStatus('mandatory')
wfAtmizerIntfTxOamCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxOamCount.setStatus('mandatory')
wfAtmizerIntfTxFlowCtrlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxFlowCtrlCount.setStatus('mandatory')
wfAtmizerIntfTxBadVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxBadVcs.setStatus('mandatory')
wfAtmizerIntfTxOverSizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxOverSizedSDUs.setStatus('mandatory')
wfAtmizerIntfTxLackBufCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxLackBufCredits.setStatus('mandatory')
wfAtmizerIntfTxLackPageCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxLackPageCredits.setStatus('mandatory')
wfAtmizerIntfTxDrvClipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxDrvClipCount.setStatus('mandatory')
wfAtmizerIntfHecDetectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfHecDetectedCount.setStatus('mandatory')
wfAtmizerIntfHecCorrectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfHecCorrectedCount.setStatus('mandatory')
wfAtmizerIntfRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxOctets.setStatus('mandatory')
wfAtmizerIntfTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfTxOctets.setStatus('mandatory')
wfAtmizerIntfRxUTOPIAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxUTOPIAErrors.setStatus('mandatory')
wfAtmizerIntfRxLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxLengthErrors.setStatus('mandatory')
wfAtmizerIntfRxAbortMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxAbortMessages.setStatus('mandatory')
wfAtmizerIntfRxSequenceNumberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerIntfRxSequenceNumberErrors.setStatus('mandatory')
wfAtmizerVclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4), )
if mibBuilder.loadTexts: wfAtmizerVclStatsTable.setStatus('mandatory')
wfAtmizerVclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmizerVclIndex"), (0, "Wellfleet-ATM-MIB", "wfAtmizerVclVpi"), (0, "Wellfleet-ATM-MIB", "wfAtmizerVclVci"))
if mibBuilder.loadTexts: wfAtmizerVclStatsEntry.setStatus('mandatory')
wfAtmizerVclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclIndex.setStatus('mandatory')
wfAtmizerVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclVpi.setStatus('mandatory')
wfAtmizerVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclVci.setStatus('mandatory')
wfAtmizerVclRxPacketsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxPacketsOkWrap.setStatus('mandatory')
wfAtmizerVclRxPacketsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxPacketsOk.setStatus('mandatory')
wfAtmizerVclRxCellsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxCellsOkWrap.setStatus('mandatory')
wfAtmizerVclRxCellsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxCellsOk.setStatus('mandatory')
wfAtmizerVclRxOamCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxOamCount.setStatus('mandatory')
wfAtmizerVclRxFlowCtrlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxFlowCtrlCount.setStatus('mandatory')
wfAtmizerVclRxInvalidHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxInvalidHeaders.setStatus('mandatory')
wfAtmizerVclRxOverSizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxOverSizedSDUs.setStatus('mandatory')
wfAtmizerVclRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxCrcErrors.setStatus('mandatory')
wfAtmizerVclRxCrc10Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxCrc10Errors.setStatus('mandatory')
wfAtmizerVclRxLackBufCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxLackBufCredits.setStatus('mandatory')
wfAtmizerVclRxLackPageCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxLackPageCredits.setStatus('mandatory')
wfAtmizerVclRxLackBufResc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxLackBufResc.setStatus('mandatory')
wfAtmizerVclRxLackPageResc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxLackPageResc.setStatus('mandatory')
wfAtmizerVclTxPacketsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxPacketsOkWrap.setStatus('mandatory')
wfAtmizerVclTxPacketsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxPacketsOk.setStatus('mandatory')
wfAtmizerVclTxCellsOkWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxCellsOkWrap.setStatus('mandatory')
wfAtmizerVclTxCellsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxCellsOk.setStatus('mandatory')
wfAtmizerVclTxOamCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxOamCount.setStatus('mandatory')
wfAtmizerVclTxFlowCtrlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxFlowCtrlCount.setStatus('mandatory')
wfAtmizerVclTxOverSizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxOverSizedSDUs.setStatus('mandatory')
wfAtmizerVclTxLackBufCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxLackBufCredits.setStatus('mandatory')
wfAtmizerVclTxLackPageCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxLackPageCredits.setStatus('mandatory')
wfAtmizerVclRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxOctets.setStatus('mandatory')
wfAtmizerVclTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxOctets.setStatus('mandatory')
wfAtmizerVclTxClipFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclTxClipFrames.setStatus('mandatory')
wfAtmizerVclRxLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxLengthErrors.setStatus('mandatory')
wfAtmizerVclRxAbortMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxAbortMessages.setStatus('mandatory')
wfAtmizerVclRxSequenceNumberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerVclRxSequenceNumberErrors.setStatus('mandatory')
wfAtmizerDebugTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5), )
if mibBuilder.loadTexts: wfAtmizerDebugTable.setStatus('mandatory')
wfAtmizerDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmizerDebugSlot"))
if mibBuilder.loadTexts: wfAtmizerDebugEntry.setStatus('mandatory')
wfAtmizerDebugSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmizerDebugSlot.setStatus('mandatory')
wfAtmizerDebugCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugCmd.setStatus('mandatory')
wfAtmizerDebugCmdSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugCmdSize.setStatus('mandatory')
wfAtmizerDebugParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam1.setStatus('mandatory')
wfAtmizerDebugParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam2.setStatus('mandatory')
wfAtmizerDebugParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam3.setStatus('mandatory')
wfAtmizerDebugParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam4.setStatus('mandatory')
wfAtmizerDebugParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam5.setStatus('mandatory')
wfAtmizerDebugParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam6.setStatus('mandatory')
wfAtmizerDebugParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam7.setStatus('mandatory')
wfAtmizerDebugParam8 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam8.setStatus('mandatory')
wfAtmizerDebugParam9 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam9.setStatus('mandatory')
wfAtmizerDebugParam10 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugParam10.setStatus('mandatory')
wfAtmizerDebugRxDone = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16))).clone(namedValues=NamedValues(("inprog", 1), ("done", 2), ("err", 16))).clone('inprog')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugRxDone.setStatus('mandatory')
wfAtmizerDebugRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugRxValue.setStatus('mandatory')
wfAtmizerDebugTxDone = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16))).clone(namedValues=NamedValues(("inprog", 1), ("done", 2), ("err", 16))).clone('inprog')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugTxDone.setStatus('mandatory')
wfAtmizerDebugTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 3, 5, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerDebugTxValue.setStatus('mandatory')
wfSonetMediumTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1), )
if mibBuilder.loadTexts: wfSonetMediumTable.setStatus('mandatory')
wfSonetMediumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetMediumIndex"))
if mibBuilder.loadTexts: wfSonetMediumEntry.setStatus('mandatory')
wfSonetMediumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetMediumIndex.setStatus('mandatory')
wfSonetMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetMediumType.setStatus('mandatory')
wfSonetMediumTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetMediumTimeElapsed.setStatus('mandatory')
wfSonetMediumValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetMediumValidIntervals.setStatus('mandatory')
wfSonetMediumLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b3zs", 2), ("cmi", 3), ("nrz", 4), ("rz", 5))).clone('nrz')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetMediumLineCoding.setStatus('mandatory')
wfSonetMediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("shortsinglemode", 2), ("longsinglemode", 3), ("multimode", 4), ("coax", 5), ("utp", 6))).clone('shortsinglemode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetMediumLineType.setStatus('mandatory')
wfSonetMediumCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetMediumCircuitIdentifier.setStatus('mandatory')
wfSonetSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2), )
if mibBuilder.loadTexts: wfSonetSectionCurrentTable.setStatus('mandatory')
wfSonetSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetSectionCurrentIndex"))
if mibBuilder.loadTexts: wfSonetSectionCurrentEntry.setStatus('mandatory')
wfSonetSectionCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionCurrentIndex.setStatus('mandatory')
wfSonetSectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("nodefect", 1), ("los", 2), ("lof", 4))).clone('nodefect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionCurrentStatus.setStatus('mandatory')
wfSonetSectionCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionCurrentESs.setStatus('mandatory')
wfSonetSectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionCurrentSESs.setStatus('mandatory')
wfSonetSectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionCurrentSEFSs.setStatus('mandatory')
wfSonetSectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionCurrentCVs.setStatus('mandatory')
wfSonetSectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3), )
if mibBuilder.loadTexts: wfSonetSectionIntervalTable.setStatus('mandatory')
wfSonetSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetSectionIntervalIndex"), (0, "Wellfleet-ATM-MIB", "wfSonetSectionIntervalNumber"))
if mibBuilder.loadTexts: wfSonetSectionIntervalEntry.setStatus('mandatory')
wfSonetSectionIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionIntervalIndex.setStatus('mandatory')
wfSonetSectionIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionIntervalNumber.setStatus('mandatory')
wfSonetSectionIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionIntervalESs.setStatus('mandatory')
wfSonetSectionIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionIntervalSESs.setStatus('mandatory')
wfSonetSectionIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionIntervalSEFSs.setStatus('mandatory')
wfSonetSectionIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetSectionIntervalCVs.setStatus('mandatory')
wfSonetLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4), )
if mibBuilder.loadTexts: wfSonetLineCurrentTable.setStatus('mandatory')
wfSonetLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetLineCurrentIndex"))
if mibBuilder.loadTexts: wfSonetLineCurrentEntry.setStatus('mandatory')
wfSonetLineCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineCurrentIndex.setStatus('mandatory')
wfSonetLineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("nodefect", 1), ("ais", 2), ("rdi", 4))).clone('nodefect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineCurrentStatus.setStatus('mandatory')
wfSonetLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineCurrentESs.setStatus('mandatory')
wfSonetLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineCurrentSESs.setStatus('mandatory')
wfSonetLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineCurrentCVs.setStatus('mandatory')
wfSonetLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineCurrentUASs.setStatus('mandatory')
wfSonetLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5), )
if mibBuilder.loadTexts: wfSonetLineIntervalTable.setStatus('mandatory')
wfSonetLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetLineIntervalIndex"), (0, "Wellfleet-ATM-MIB", "wfSonetLineIntervalNumber"))
if mibBuilder.loadTexts: wfSonetLineIntervalEntry.setStatus('mandatory')
wfSonetLineIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineIntervalIndex.setStatus('mandatory')
wfSonetLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineIntervalNumber.setStatus('mandatory')
wfSonetLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineIntervalESs.setStatus('mandatory')
wfSonetLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineIntervalSESs.setStatus('mandatory')
wfSonetLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineIntervalCVs.setStatus('mandatory')
wfSonetLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetLineIntervalUASs.setStatus('mandatory')
wfSonetFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 6), )
if mibBuilder.loadTexts: wfSonetFarEndLineCurrentTable.setStatus('mandatory')
wfSonetFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 6, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetFarEndLineCurrentIndex"))
if mibBuilder.loadTexts: wfSonetFarEndLineCurrentEntry.setStatus('mandatory')
wfSonetFarEndLineCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineCurrentIndex.setStatus('mandatory')
wfSonetFarEndLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineCurrentESs.setStatus('mandatory')
wfSonetFarEndLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineCurrentSESs.setStatus('mandatory')
wfSonetFarEndLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineCurrentCVs.setStatus('mandatory')
wfSonetFarEndLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineCurrentUASs.setStatus('mandatory')
wfSonetFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7), )
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalTable.setStatus('mandatory')
wfSonetFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetFarEndLineIntervalIndex"), (0, "Wellfleet-ATM-MIB", "wfSonetFarEndLineIntervalNumber"))
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalEntry.setStatus('mandatory')
wfSonetFarEndLineIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalIndex.setStatus('mandatory')
wfSonetFarEndLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalNumber.setStatus('mandatory')
wfSonetFarEndLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalESs.setStatus('mandatory')
wfSonetFarEndLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalSESs.setStatus('mandatory')
wfSonetFarEndLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalCVs.setStatus('mandatory')
wfSonetFarEndLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndLineIntervalUASs.setStatus('mandatory')
wfSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8), )
if mibBuilder.loadTexts: wfSonetPathCurrentTable.setStatus('mandatory')
wfSonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetPathCurrentIndex"))
if mibBuilder.loadTexts: wfSonetPathCurrentEntry.setStatus('mandatory')
wfSonetPathCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathCurrentIndex.setStatus('mandatory')
wfSonetPathCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sts1", 1), ("sts3cstm1", 2), ("sts12cstm4", 3), ("sts24c", 4), ("sts48cstm16", 5))).clone('sts3cstm1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathCurrentWidth.setStatus('mandatory')
wfSonetPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("nodefect", 1), ("stslop", 2), ("stsais", 4), ("stsrdi", 8), ("unequipped", 16), ("siglabelmis", 32))).clone('nodefect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathCurrentStatus.setStatus('mandatory')
wfSonetPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathCurrentESs.setStatus('mandatory')
wfSonetPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathCurrentSESs.setStatus('mandatory')
wfSonetPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathCurrentCVs.setStatus('mandatory')
wfSonetPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathCurrentUASs.setStatus('mandatory')
wfSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9), )
if mibBuilder.loadTexts: wfSonetPathIntervalTable.setStatus('mandatory')
wfSonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetPathIntervalIndex"), (0, "Wellfleet-ATM-MIB", "wfSonetPathIntervalNumber"))
if mibBuilder.loadTexts: wfSonetPathIntervalEntry.setStatus('mandatory')
wfSonetPathIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathIntervalIndex.setStatus('mandatory')
wfSonetPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathIntervalNumber.setStatus('mandatory')
wfSonetPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathIntervalESs.setStatus('mandatory')
wfSonetPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathIntervalSESs.setStatus('mandatory')
wfSonetPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathIntervalCVs.setStatus('mandatory')
wfSonetPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetPathIntervalUASs.setStatus('mandatory')
wfSonetFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 10), )
if mibBuilder.loadTexts: wfSonetFarEndPathCurrentTable.setStatus('mandatory')
wfSonetFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 10, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetFarEndPathCurrentIndex"))
if mibBuilder.loadTexts: wfSonetFarEndPathCurrentEntry.setStatus('mandatory')
wfSonetFarEndPathCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathCurrentIndex.setStatus('mandatory')
wfSonetFarEndPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathCurrentESs.setStatus('mandatory')
wfSonetFarEndPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathCurrentSESs.setStatus('mandatory')
wfSonetFarEndPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathCurrentCVs.setStatus('mandatory')
wfSonetFarEndPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathCurrentUASs.setStatus('mandatory')
wfSonetFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11), )
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalTable.setStatus('mandatory')
wfSonetFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfSonetFarEndPathIntervalIndex"), (0, "Wellfleet-ATM-MIB", "wfSonetFarEndPathIntervalNumber"))
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalEntry.setStatus('mandatory')
wfSonetFarEndPathIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalIndex.setStatus('mandatory')
wfSonetFarEndPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalNumber.setStatus('mandatory')
wfSonetFarEndPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalESs.setStatus('mandatory')
wfSonetFarEndPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalSESs.setStatus('mandatory')
wfSonetFarEndPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalCVs.setStatus('mandatory')
wfSonetFarEndPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSonetFarEndPathIntervalUASs.setStatus('mandatory')
wfAtmVcGroupTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 12), )
if mibBuilder.loadTexts: wfAtmVcGroupTable.setStatus('mandatory')
wfAtmVcGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 12, 1), ).setIndexNames((0, "Wellfleet-ATM-MIB", "wfAtmVcGroupCct"), (0, "Wellfleet-ATM-MIB", "wfAtmVcGroupIndex"))
if mibBuilder.loadTexts: wfAtmVcGroupEntry.setStatus('mandatory')
wfAtmVcGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVcGroupDelete.setStatus('mandatory')
wfAtmVcGroupCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVcGroupCct.setStatus('mandatory')
wfAtmVcGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmVcGroupIndex.setStatus('mandatory')
wfAtmVcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 23, 1, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmVcGroupName.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-ATM-MIB", wfAtmTableDebugTable=wfAtmTableDebugTable, wfAtmizerDrvCfgCurrVcls=wfAtmizerDrvCfgCurrVcls, wfAtmPvcReceives=wfAtmPvcReceives, wfAtmIlmiGetTimer=wfAtmIlmiGetTimer, wfAtmAlcFrmRcvCellSyncLost=wfAtmAlcFrmRcvCellSyncLost, wfSonetSectionIntervalEntry=wfSonetSectionIntervalEntry, wfSonetLineCurrentSESs=wfSonetLineCurrentSESs, wfAtmUnknownVCPkts=wfAtmUnknownVCPkts, wfAtmAlcCopDropIntqEvents=wfAtmAlcCopDropIntqEvents, wfSonetFarEndLineIntervalCVs=wfSonetFarEndLineIntervalCVs, wfAtmVbrSarAssemblyTimer=wfAtmVbrSarAssemblyTimer, wfSonetSectionCurrentIndex=wfSonetSectionCurrentIndex, wfAtmAlcFrmRcvDisPointSig=wfAtmAlcFrmRcvDisPointSig, wfAtmUniTable=wfAtmUniTable, wfAtmAlcFrmCsiXmtAte=wfAtmAlcFrmCsiXmtAte, wfAtmVcGroupTable=wfAtmVcGroupTable, wfAtmAlcXmtqEntry=wfAtmAlcXmtqEntry, wfAtmDxiTable=wfAtmDxiTable, wfAtmAlcSarConfIndex=wfAtmAlcSarConfIndex, wfAtmizerDrvCfgDs3Scrambling=wfAtmizerDrvCfgDs3Scrambling, wfAtmVclOamLpbkEnable=wfAtmVclOamLpbkEnable, wfAtmAlcFrmXmtExtPointSig=wfAtmAlcFrmXmtExtPointSig, wfAtmizerIntfRxCrc10Errors=wfAtmizerIntfRxCrc10Errors, wfAtmizerDrvCfgLineNumber=wfAtmizerDrvCfgLineNumber, wfAtmInterfaceHwMacOverride=wfAtmInterfaceHwMacOverride, wfAtmAlcFrmGenEnable=wfAtmAlcFrmGenEnable, wfSonetSectionCurrentEntry=wfSonetSectionCurrentEntry, wfAtmServiceRecordEnable=wfAtmServiceRecordEnable, wfAtmAlcCopInfoIndex=wfAtmAlcCopInfoIndex, wfAtmizerTxPerVcClipEnable=wfAtmizerTxPerVcClipEnable, wfAtmVclRcvCells=wfAtmVclRcvCells, wfAtmSigMaxVciPtMltPt=wfAtmSigMaxVciPtMltPt, wfAtmizerDebugParam7=wfAtmizerDebugParam7, wfAtmSigMaxVpiPtMltPt=wfAtmSigMaxVpiPtMltPt, wfAtmAlcFrmOamTxSectionAis=wfAtmAlcFrmOamTxSectionAis, wfAtmVbrCsVciLineNumber=wfAtmVbrCsVciLineNumber, wfAtmizerTxPercentRsrcs=wfAtmizerTxPercentRsrcs, wfAtmizerIntfHecCorrectedCount=wfAtmizerIntfHecCorrectedCount, wfAtmAlcVcInactEnable=wfAtmAlcVcInactEnable, wfAtmInterfaceDisable=wfAtmInterfaceDisable, wfAtmAlcXmtClipQueueMin=wfAtmAlcXmtClipQueueMin, wfAtmLmiLLIndex=wfAtmLmiLLIndex, wfAtmAlcXmtqStickyMask=wfAtmAlcXmtqStickyMask, wfAtmAlcSarPeakCellRateEna=wfAtmAlcSarPeakCellRateEna, wfSonetPathIntervalIndex=wfSonetPathIntervalIndex, wfAtmUniAtmTransmits=wfAtmUniAtmTransmits, wfAtmAlcSlot=wfAtmAlcSlot, wfAtmAlcFrmRcvExtF1F3PlOam=wfAtmAlcFrmRcvExtF1F3PlOam, wfAtmizerVclRxLackBufResc=wfAtmizerVclRxLackBufResc, wfAtmizerDrvCfgDpNotify=wfAtmizerDrvCfgDpNotify, wfAtmAlcSarConfDelete=wfAtmAlcSarConfDelete, wfAtmAlcSarDmaBurstLength=wfAtmAlcSarDmaBurstLength, wfAtmizerDrvCfgVcInactTimeout=wfAtmizerDrvCfgVcInactTimeout, wfAtmizerDrvCfgType=wfAtmizerDrvCfgType, wfAtmAlcPort=wfAtmAlcPort, wfAtmInterfaceIlmiVpi=wfAtmInterfaceIlmiVpi, wfAtmSigMaxPtPtConnections=wfAtmSigMaxPtPtConnections, wfAtmAlcCopLossPointers=wfAtmAlcCopLossPointers, wfAtmizerCfgHeartbeatPeriod=wfAtmizerCfgHeartbeatPeriod, wfAtmPlcpLof=wfAtmPlcpLof, wfAtmDxiComponent=wfAtmDxiComponent, wfAtmIlmiState=wfAtmIlmiState, wfAtmAlcCopRcvUnassCells=wfAtmAlcCopRcvUnassCells, wfAtmPlcpStatus=wfAtmPlcpStatus, wfAtmAlcCopConfEntry=wfAtmAlcCopConfEntry, wfAtmAlcSarDmaModeBw=wfAtmAlcSarDmaModeBw, wfAtmizerDebugTxDone=wfAtmizerDebugTxDone, wfSonetSectionCurrentSESs=wfSonetSectionCurrentSESs, wfAtmizerIntfRxLackPageCredits=wfAtmizerIntfRxLackPageCredits, wfAtmAlcCopType=wfAtmAlcCopType, wfAtmUniSeconds=wfAtmUniSeconds, wfAtmizerDebugParam4=wfAtmizerDebugParam4, wfAtmAlcFrmXmtExtF4F5PrfMan=wfAtmAlcFrmXmtExtF4F5PrfMan, wfAtmAlcDrvTable=wfAtmAlcDrvTable, wfAtmAlcCopDropLogqEvents=wfAtmAlcCopDropLogqEvents, wfSonetSectionCurrentTable=wfSonetSectionCurrentTable, wfSonetPathCurrentStatus=wfSonetPathCurrentStatus, wfAtmAlcFrmXmtExtIlmiSig=wfAtmAlcFrmXmtExtIlmiSig, wfAtmPlcpFebeESecs=wfAtmPlcpFebeESecs, wfAtmInterfaceType=wfAtmInterfaceType, wfAtmVclRcvCrcErrs=wfAtmVclRcvCrcErrs, wfSonetPathIntervalCVs=wfSonetPathIntervalCVs, wfAtmAlcCopRcvSarDropCells=wfAtmAlcCopRcvSarDropCells, wfAtmAlcFrmStatsSwEnable=wfAtmAlcFrmStatsSwEnable, wfAtmDxiLineNumber=wfAtmDxiLineNumber, wfAtmPlcpBipSESecs=wfAtmPlcpBipSESecs, wfAtmAlcFrmRcvCellSyncFound=wfAtmAlcFrmRcvCellSyncFound, wfAtmizerIntfRxOamCount=wfAtmizerIntfRxOamCount, wfAtmAlcFrmRcvExtF4EndEnd=wfAtmAlcFrmRcvExtF4EndEnd, wfAtmizerDrvCfgTable=wfAtmizerDrvCfgTable, wfAtmizerCfgTxPercentRsrcs=wfAtmizerCfgTxPercentRsrcs, wfAtmizerIntfTxCellsOkWrap=wfAtmizerIntfTxCellsOkWrap, wfAtmDxiNonOctetAlignedFrames=wfAtmDxiNonOctetAlignedFrames, wfAtmVclXmtPeakCellRate=wfAtmVclXmtPeakCellRate, wfAtmizerVclStatsEntry=wfAtmizerVclStatsEntry, wfAtmAlcFrmOamEnable=wfAtmAlcFrmOamEnable, wfAtmizerCfgRxBuffersMax=wfAtmizerCfgRxBuffersMax, wfSonetSectionCurrentESs=wfSonetSectionCurrentESs, wfSonetFarEndLineIntervalIndex=wfSonetFarEndLineIntervalIndex, wfAtmPlcpFebes=wfAtmPlcpFebes, wfAtmAlcConfXmtClipQueueMax=wfAtmAlcConfXmtClipQueueMax, wfAtmizerCfgTxBuffersMax=wfAtmizerCfgTxBuffersMax, wfAtmizerVclTxOamCount=wfAtmizerVclTxOamCount, wfAtmVclXmtQosClass=wfAtmVclXmtQosClass, wfAtmVclRcvTrailerErrs=wfAtmVclRcvTrailerErrs, wfAtmAlcFrmDmaPrioritySel=wfAtmAlcFrmDmaPrioritySel, wfAtmAlcFrmGenSyncLostCnt=wfAtmAlcFrmGenSyncLostCnt, wfAtmAlcFrmXmtScrambleCtl=wfAtmAlcFrmXmtScrambleCtl, wfAtmUniAtmMisdeliveredCells=wfAtmUniAtmMisdeliveredCells, wfAtmSigEntry=wfAtmSigEntry, wfAtmInterfaceLLIndex=wfAtmInterfaceLLIndex, wfAtmAlcXmtqPacketClips=wfAtmAlcXmtqPacketClips, wfSonetFarEndPathIntervalTable=wfSonetFarEndPathIntervalTable, wfAtmizerIntfOcdEvents=wfAtmizerIntfOcdEvents, wfAtmMpeMisdeliveredPdus=wfAtmMpeMisdeliveredPdus, wfAtmSigT316c=wfAtmSigT316c, wfAtmizerDrvCfgPort=wfAtmizerDrvCfgPort, wfAtmizerDrvCfgClkSource=wfAtmizerDrvCfgClkSource, wfAtmAlcFrmDmaChan4Enable=wfAtmAlcFrmDmaChan4Enable, wfAtmVbrCsVciOctetReceives=wfAtmVbrCsVciOctetReceives, wfAtmSigMaxPtMultConnections=wfAtmSigMaxPtMultConnections, wfAtmAlcFrmRcvExtUserCell=wfAtmAlcFrmRcvExtUserCell, wfAtmVbrSarEomNoProcessErrors=wfAtmVbrSarEomNoProcessErrors, wfAtmVclRcvOamCrcErrs=wfAtmVclRcvOamCrcErrs, wfAtmAlcCopAlcClockSpeed=wfAtmAlcCopAlcClockSpeed, wfAtmAlcCopXmtUserCells=wfAtmAlcCopXmtUserCells, wfAtmVclXmtRateDecreaseFactor=wfAtmVclXmtRateDecreaseFactor, wfAtmInterfaceDebug=wfAtmInterfaceDebug, wfAtmizerVclStatsTable=wfAtmizerVclStatsTable, wfAtmSscopPollTimer=wfAtmSscopPollTimer, wfAtmAlcXmtBadVcs=wfAtmAlcXmtBadVcs, wfAtmizerVclRxPacketsOk=wfAtmizerVclRxPacketsOk, wfAtmAlcFrmXmtExtF5Segment=wfAtmAlcFrmXmtExtF5Segment, wfAtmAlcCopConfXmtBufs=wfAtmAlcCopConfXmtBufs, wfAtmAlcSarModeBchain=wfAtmAlcSarModeBchain, wfAtmAlcState=wfAtmAlcState, wfAtmSscopDelete=wfAtmSscopDelete, wfAtmAlcFrmRcvDisUserCell=wfAtmAlcFrmRcvDisUserCell, wfAtmAlcCopDataPathIndex=wfAtmAlcCopDataPathIndex, wfAtmSVCOptionsRcvSustCellRate=wfAtmSVCOptionsRcvSustCellRate, wfAtmizerDebugParam6=wfAtmizerDebugParam6, wfAtmizerIntfTxDrvClipCount=wfAtmizerIntfTxDrvClipCount, wfAtmAlcXmtqOutQLen=wfAtmAlcXmtqOutQLen, wfSonetFarEndLineIntervalESs=wfSonetFarEndLineIntervalESs, wfAtmAlcCopXmtPackets=wfAtmAlcCopXmtPackets, wfAtmizerDrvCfgSpeed=wfAtmizerDrvCfgSpeed, wfSonetLineCurrentEntry=wfSonetLineCurrentEntry, wfAtmDxiDxiAddrAtmVbr=wfAtmDxiDxiAddrAtmVbr, wfAtmizerIntfRxCrcErrors=wfAtmizerIntfRxCrcErrors, wfAtmLmiLineNumber=wfAtmLmiLineNumber, wfAtmAlcFrmRcvErrCorrectEna=wfAtmAlcFrmRcvErrCorrectEna, wfAtmizerIntfRxLengthErrors=wfAtmizerIntfRxLengthErrors, wfSonetPathCurrentCVs=wfSonetPathCurrentCVs, wfAtmPlcpSeconds=wfAtmPlcpSeconds, wfAtmVclOamAlarmEnable=wfAtmVclOamAlarmEnable, wfAtmizerVclIndex=wfAtmizerVclIndex, wfAtmAlcCopState=wfAtmAlcCopState, wfAtmInterfaceEntry=wfAtmInterfaceEntry, wfAtmUniEntry=wfAtmUniEntry, wfAtmSscopIdleTimer=wfAtmSscopIdleTimer, wfAtmAlcFrmOamInvertBip=wfAtmAlcFrmOamInvertBip, wfAtmAlcFrmCsiRoutingTag=wfAtmAlcFrmCsiRoutingTag, wfAtmAlcFrmStatsReceive=wfAtmAlcFrmStatsReceive, wfAtmSigRestart=wfAtmSigRestart, wfAtmGlobalSigStkVersion=wfAtmGlobalSigStkVersion, wfAtmAlcCopRcvQueueEmptys=wfAtmAlcCopRcvQueueEmptys, wfAtmSVCOptionsRcvPeakCellRate=wfAtmSVCOptionsRcvPeakCellRate, wfAtmizerTxVcBuffersMax=wfAtmizerTxVcBuffersMax, wfSonetMediumTable=wfSonetMediumTable, wfAtmAlcCopAtcVersion=wfAtmAlcCopAtcVersion, wfAtmizerVclRxLengthErrors=wfAtmizerVclRxLengthErrors, wfAtmizerCfgEntry=wfAtmizerCfgEntry, wfAtmizerDebugRxDone=wfAtmizerDebugRxDone, wfAtmizerIntfTcAlarmState=wfAtmizerIntfTcAlarmState, wfAtmizerDrvCfgDsx3LoopbackConfig=wfAtmizerDrvCfgDsx3LoopbackConfig, wfSonetPathIntervalUASs=wfSonetPathIntervalUASs, wfAtmSigNumRst=wfAtmSigNumRst, wfSonetFarEndPathIntervalSESs=wfSonetFarEndPathIntervalSESs, wfAtmVbrSarReceives=wfAtmVbrSarReceives, wfAtmAlcCopRcvOctets=wfAtmAlcCopRcvOctets, wfAtmMpeTable=wfAtmMpeTable, wfSonetLineIntervalNumber=wfSonetLineIntervalNumber, wfAtmAlcCopRcvQueueFulls=wfAtmAlcCopRcvQueueFulls, wfAtmAlcSarModeDmask=wfAtmAlcSarModeDmask, wfAtmAlcCopTotalXmtBufs=wfAtmAlcCopTotalXmtBufs, wfAtmAlcSarModeDchain=wfAtmAlcSarModeDchain, wfAtmAlcFrmCsiRcvCongBitOpt=wfAtmAlcFrmCsiRcvCongBitOpt, wfAtmOverallStatus=wfAtmOverallStatus, wfAtmServiceRecordLossPriorityPolicy=wfAtmServiceRecordLossPriorityPolicy, wfAtmizerTxPagesMax=wfAtmizerTxPagesMax, wfAtmizerCfgCurrVcl=wfAtmizerCfgCurrVcl, wfAtmTableDebugDelete=wfAtmTableDebugDelete, wfAtmPlcpCct=wfAtmPlcpCct, wfAtmTableDebugType=wfAtmTableDebugType, wfAtmizerIntfTxFlowCtrlCount=wfAtmizerIntfTxFlowCtrlCount, wfAtmVclCellLossPriority=wfAtmVclCellLossPriority, wfAtmDxiDxiAddrIndex=wfAtmDxiDxiAddrIndex, wfAtmSscopMaxPd=wfAtmSscopMaxPd, wfAtmAlcCopBufSize=wfAtmAlcCopBufSize, wfAtmizerVclTxClipFrames=wfAtmizerVclTxClipFrames, wfAtmAlcCopOutCellDelins=wfAtmAlcCopOutCellDelins, wfAtmAlcFrmXmtDisPointSig=wfAtmAlcFrmXmtDisPointSig, wfSonetPathCurrentESs=wfSonetPathCurrentESs, wfAtmVbrDxi=wfAtmVbrDxi, wfAtmSVCOptionsXmtPeakCellRate=wfAtmSVCOptionsXmtPeakCellRate, wfAtmAlcSarRateQueuePcr=wfAtmAlcSarRateQueuePcr, wfAtmAlcFrmCsiOmitHec=wfAtmAlcFrmCsiOmitHec, wfSonetMediumCircuitIdentifier=wfSonetMediumCircuitIdentifier, wfAtmVclXmtOamCells=wfAtmVclXmtOamCells, wfAtmizerIntfSlot=wfAtmizerIntfSlot, wfAtmAlcDpNotifyTimeout=wfAtmAlcDpNotifyTimeout, wfAtmCommonGroup=wfAtmCommonGroup, wfAtmAlcFrmStatsTimerEna=wfAtmAlcFrmStatsTimerEna, wfAtmizerDebugCmd=wfAtmizerDebugCmd, wfAtmMpeEntry=wfAtmMpeEntry, wfAtmAlcCopErrorTable=wfAtmAlcCopErrorTable, wfAtmVbrCsVciEntry=wfAtmVbrCsVciEntry, wfAtmInterfaceOperStatus=wfAtmInterfaceOperStatus, wfAtmAlcConfLogqSize=wfAtmAlcConfLogqSize, wfAtmizerDrvCfgMadr=wfAtmizerDrvCfgMadr, wfAtmizerIntfTxBadVcs=wfAtmizerIntfTxBadVcs, wfAtmNetPrefixEntry=wfAtmNetPrefixEntry, wfAtmizerDrvCfgDelete=wfAtmizerDrvCfgDelete, wfAtmVclStatsVci=wfAtmVclStatsVci, wfAtmPlcpLineNumber=wfAtmPlcpLineNumber, wfSonetLineCurrentIndex=wfSonetLineCurrentIndex, wfAtmAlcDisable=wfAtmAlcDisable, wfAtmizerIntfRxSequenceNumberErrors=wfAtmizerIntfRxSequenceNumberErrors, wfAtmAlcXmtqPackets=wfAtmAlcXmtqPackets, wfAtmServiceRecordMtu=wfAtmServiceRecordMtu, wfSonetLineIntervalSESs=wfSonetLineIntervalSESs, wfAtmSscopConnectControlTimer=wfAtmSscopConnectControlTimer, wfAtmUniAal=wfAtmUniAal, wfAtmAlcFrmRcvExtF5EndEnd=wfAtmAlcFrmRcvExtF5EndEnd, wfSonetSectionIntervalTable=wfSonetSectionIntervalTable, wfAtmAlcSarRateQueueNumber=wfAtmAlcSarRateQueueNumber, wfAtmIlmiUpThreshold=wfAtmIlmiUpThreshold, wfAtmAlcSarControlRif=wfAtmAlcSarControlRif, wfSonetPathCurrentIndex=wfSonetPathCurrentIndex, wfSonetFarEndPathIntervalUASs=wfSonetFarEndPathIntervalUASs, wfAtmAlcCopDmaLowWatermark=wfAtmAlcCopDmaLowWatermark, wfAtmPvcTransmits=wfAtmPvcTransmits, wfSonetFarEndPathCurrentIndex=wfSonetFarEndPathCurrentIndex, wfAtmizerDrvCfgCcType=wfAtmizerDrvCfgCcType, wfAtmDxiTooLongFrames=wfAtmDxiTooLongFrames, wfAtmAlcCopRcvErrBuffers=wfAtmAlcCopRcvErrBuffers, wfAtmPlcpEntry=wfAtmPlcpEntry, wfAtmAlcSarTrafficMgtTable=wfAtmAlcSarTrafficMgtTable, wfAtmDxiDxiAddrEntry=wfAtmDxiDxiAddrEntry, wfAtmAlcFrmOamTxSectionFerf=wfAtmAlcFrmOamTxSectionFerf, wfAtmizerVclTxOverSizedSDUs=wfAtmizerVclTxOverSizedSDUs, wfAtmIlmiInterfaceType=wfAtmIlmiInterfaceType, wfAtmIlmiLineNumber=wfAtmIlmiLineNumber, wfAtmAlcCopHecDetects=wfAtmAlcCopHecDetects)
mibBuilder.exportSymbols("Wellfleet-ATM-MIB", wfAtmAlcFrmCsiRcvAtcEnable=wfAtmAlcFrmCsiRcvAtcEnable, wfAtmizerDebugParam3=wfAtmizerDebugParam3, wfAtmVclRcvPeakCellRate=wfAtmVclRcvPeakCellRate, wfAtmAlcFrmXmtExtBcastSig=wfAtmAlcFrmXmtExtBcastSig, wfAtmUniLineNumber=wfAtmUniLineNumber, wfAtmVbrCsVciBETagMismatches=wfAtmVbrCsVciBETagMismatches, wfSonetMediumTimeElapsed=wfSonetMediumTimeElapsed, wfAtmSigVci=wfAtmSigVci, wfAtmVclRcvQosClass=wfAtmVclRcvQosClass, wfAtmVclRcvBufferOflowErrs=wfAtmVclRcvBufferOflowErrs, wfAtmAlcFrmDmaFastXferMode=wfAtmAlcFrmDmaFastXferMode, wfAtmizerCfgRxPagesMax=wfAtmizerCfgRxPagesMax, wfAtmPlcpLLIndex=wfAtmPlcpLLIndex, wfAtmAlcFrmXmtDisUnassCell=wfAtmAlcFrmXmtDisUnassCell, wfAtmVbrSarLengthExceeds=wfAtmVbrSarLengthExceeds, wfAtmVclCongestionIndication=wfAtmVclCongestionIndication, wfAtmizerDebugParam5=wfAtmizerDebugParam5, wfSonetFarEndLineCurrentESs=wfSonetFarEndLineCurrentESs, wfAtmVclXmtMinimumCellRate=wfAtmVclXmtMinimumCellRate, wfAtmizerVclVci=wfAtmizerVclVci, wfSonetFarEndLineCurrentSESs=wfSonetFarEndLineCurrentSESs, wfAtmDxiEntry=wfAtmDxiEntry, wfAtmVclAalCpcsReceiveSduSize=wfAtmVclAalCpcsReceiveSduSize, wfSonetLineCurrentESs=wfSonetLineCurrentESs, wfAtmVclConfDelete=wfAtmVclConfDelete, wfAtmAlcCopConfRcvBufs=wfAtmAlcCopConfRcvBufs, wfAtmAlcFrmDmaStop=wfAtmAlcFrmDmaStop, wfSonetFarEndPathIntervalCVs=wfSonetFarEndPathIntervalCVs, wfAtmAlcXmtqIndex=wfAtmAlcXmtqIndex, wfAtmInterfaceVCsInUse=wfAtmInterfaceVCsInUse, wfAtmInterfaceMaxVpcs=wfAtmInterfaceMaxVpcs, wfAtmVcGroupEntry=wfAtmVcGroupEntry, wfAtmizerDrvCfgScrSum=wfAtmizerDrvCfgScrSum, wfAtmAlcFrmRcvDisF5Segment=wfAtmAlcFrmRcvDisF5Segment, wfAtmAlcCopDmaFifoOverruns=wfAtmAlcCopDmaFifoOverruns, wfAtmSigMinVpiPtPt=wfAtmSigMinVpiPtPt, wfSonetMediumIndex=wfSonetMediumIndex, wfAtmServiceRecordTable=wfAtmServiceRecordTable, wfSonetLineIntervalTable=wfSonetLineIntervalTable, wfSonetFarEndPathIntervalIndex=wfSonetFarEndPathIntervalIndex, wfAtmInterfaceTable=wfAtmInterfaceTable, wfAtmVclServiceClass=wfAtmVclServiceClass, wfAtmizerVclRxLackPageResc=wfAtmizerVclRxLackPageResc, wfAtmIlmiNetPrefixTimer=wfAtmIlmiNetPrefixTimer, wfAtmVbrSarTimeouts=wfAtmVbrSarTimeouts, wfAtmPlcpSEFS=wfAtmPlcpSEFS, wfSonetLineIntervalCVs=wfSonetLineIntervalCVs, wfAtmAlcSarDmaModeCmode=wfAtmAlcSarDmaModeCmode, wfSonetPathIntervalNumber=wfSonetPathIntervalNumber, wfAtmVbrSarBomBeforeEomErrors=wfAtmVbrSarBomBeforeEomErrors, wfAtmizerVclRxCellsOk=wfAtmizerVclRxCellsOk, wfAtmizerIntfRxLackPageResc=wfAtmizerIntfRxLackPageResc, wfAtmVclConfTable=wfAtmVclConfTable, wfAtmAlcCopRcvCells=wfAtmAlcCopRcvCells, wfAtmIlmiGetNextTimer=wfAtmIlmiGetNextTimer, wfAtmizerIntfStatsEntry=wfAtmizerIntfStatsEntry, wfAtmInterfaceDelete=wfAtmInterfaceDelete, wfAtmPlcpYellow=wfAtmPlcpYellow, wfAtmServiceRecordIndex=wfAtmServiceRecordIndex, wfAtmAlcFrmRcvExtMetaSig=wfAtmAlcFrmRcvExtMetaSig, wfAtmizerIntfTxOctets=wfAtmizerIntfTxOctets, wfAtmVclOamLpbkThreshold1=wfAtmVclOamLpbkThreshold1, wfAtmizerIntfTxLackBufCredits=wfAtmizerIntfTxLackBufCredits, wfAtmSigMaxRoutingRegistrations=wfAtmSigMaxRoutingRegistrations, wfAtmAlcFrmCsiRcvHecEnable=wfAtmAlcFrmCsiRcvHecEnable, wfAtmVclMode=wfAtmVclMode, wfAtmPvcCct=wfAtmPvcCct, wfAtmAlcFrmDmaChan1Enable=wfAtmAlcFrmDmaChan1Enable, wfAtmPvcTable=wfAtmPvcTable, wfAtmAlcCopNtcVersion=wfAtmAlcCopNtcVersion, wfAtmServiceRecordCct=wfAtmServiceRecordCct, wfAtmizerDebugCmdSize=wfAtmizerDebugCmdSize, wfAtmAlcCopInfoEntry=wfAtmAlcCopInfoEntry, wfAtmizerDrvCfgDpNotifyTimeout=wfAtmizerDrvCfgDpNotifyTimeout, wfAtmAlcFrmConfEntry=wfAtmAlcFrmConfEntry, wfAtmServiceRecordEntry=wfAtmServiceRecordEntry, wfAtmizerIntfRxInvalidHeaders=wfAtmizerIntfRxInvalidHeaders, wfSonetSectionIntervalESs=wfSonetSectionIntervalESs, wfAtmIlmiEntry=wfAtmIlmiEntry, wfAtmVclServiceCategory=wfAtmVclServiceCategory, wfAtmIlmiTable=wfAtmIlmiTable, wfAtmizerIntfTxOverSizedSDUs=wfAtmizerIntfTxOverSizedSDUs, wfAtmDxiValidFrameReceives=wfAtmDxiValidFrameReceives, wfAtmAlcCopConfTable=wfAtmAlcCopConfTable, wfAtmVbrCct=wfAtmVbrCct, wfSonetPathIntervalTable=wfSonetPathIntervalTable, wfAtmAlcFrmXmtCellEnable=wfAtmAlcFrmXmtCellEnable, wfAtmInterfaceNumber=wfAtmInterfaceNumber, wfAtmVbrCsLLIndex=wfAtmVbrCsLLIndex, wfAtmSscopAtmCct=wfAtmSscopAtmCct, wfAtmNetPrefixStatus=wfAtmNetPrefixStatus, wfAtmizerVclTxCellsOkWrap=wfAtmizerVclTxCellsOkWrap, wfAtmizerVclTxCellsOk=wfAtmizerVclTxCellsOk, wfAtmDxiDxiAddrReceives=wfAtmDxiDxiAddrReceives, wfAtmizerDrvCfgDsx3SendCode=wfAtmizerDrvCfgDsx3SendCode, wfAtmizerIntfTxCellsOk=wfAtmizerIntfTxCellsOk, wfAtmAlcFrmXmtDisBcastSig=wfAtmAlcFrmXmtDisBcastSig, wfAtmAlcFrmGenFramingMode=wfAtmAlcFrmGenFramingMode, wfAtmInterfaceMulticast=wfAtmInterfaceMulticast, wfAtmAlcSarModeBas=wfAtmAlcSarModeBas, wfSonetLineIntervalEntry=wfSonetLineIntervalEntry, wfAtmAlcSpeed=wfAtmAlcSpeed, wfSonetSectionIntervalNumber=wfSonetSectionIntervalNumber, wfAtmSVCOptionsIndex=wfAtmSVCOptionsIndex, wfAtmAlcFrmDmaChan3Enable=wfAtmAlcFrmDmaChan3Enable, wfAtmPvcDelete=wfAtmPvcDelete, wfAtmizerDebugParam1=wfAtmizerDebugParam1, wfAtmSigT322=wfAtmSigT322, wfAtmAlcCopRcvBuffers=wfAtmAlcCopRcvBuffers, wfAtmizerIntfRxCellsOk=wfAtmizerIntfRxCellsOk, wfAtmUniAtmTable=wfAtmUniAtmTable, wfAtmAlcConfNumXmtQueues=wfAtmAlcConfNumXmtQueues, wfAtmAlcSarDmaModeSync=wfAtmAlcSarDmaModeSync, wfAtmAlcSarTrafficMgtDelete=wfAtmAlcSarTrafficMgtDelete, wfAtmMpeNull=wfAtmMpeNull, wfAtmServiceRecordState=wfAtmServiceRecordState, wfAtmLmiProxyRequests=wfAtmLmiProxyRequests, wfAtmizerVclRxPacketsOkWrap=wfAtmizerVclRxPacketsOkWrap, wfSonetFarEndLineCurrentIndex=wfSonetFarEndLineCurrentIndex, wfAtmSigDelete=wfAtmSigDelete, wfAtmInterfaceConfEntry=wfAtmInterfaceConfEntry, wfAtmizerIntfRxUTOPIAErrors=wfAtmizerIntfRxUTOPIAErrors, wfAtmizerIntfHecDetectedCount=wfAtmizerIntfHecDetectedCount, wfAtmAlcSarModeVpf=wfAtmAlcSarModeVpf, wfAtmIlmiSetTimer=wfAtmIlmiSetTimer, wfAtmVclOamLpbkCellInterval=wfAtmVclOamLpbkCellInterval, wfAtmizerDebugParam10=wfAtmizerDebugParam10, wfAtmVbrSarTransmits=wfAtmVbrSarTransmits, wfAtmAlcCopXmtOctets=wfAtmAlcCopXmtOctets, wfAtmAlcFrmOamTxPathAis=wfAtmAlcFrmOamTxPathAis, wfAtmAlcFrmXmtDisUserCell=wfAtmAlcFrmXmtDisUserCell, wfAtmAlcFrmXmtCellDecouple=wfAtmAlcFrmXmtCellDecouple, wfAtmAlcXmtQueueBurst=wfAtmAlcXmtQueueBurst, wfAtmAlcCopTotalRcvBufs=wfAtmAlcCopTotalRcvBufs, wfAtmSigNumStat=wfAtmSigNumStat, wfAtmVclXmtBurstSize=wfAtmVclXmtBurstSize, wfAtmAlcSarDmaModeOrder=wfAtmAlcSarDmaModeOrder, wfAtmAlcSarPeakCellRate=wfAtmAlcSarPeakCellRate, wfAtmAlcFrmCsiXmtAtcEnable=wfAtmAlcFrmCsiXmtAtcEnable, wfAtmVclStatsVcIndex=wfAtmVclStatsVcIndex, wfAtmAlcCct=wfAtmAlcCct, wfAtmAlcDpNotify=wfAtmAlcDpNotify, wfSonetFarEndPathCurrentESs=wfSonetFarEndPathCurrentESs, wfAtmInterfaceDrops=wfAtmInterfaceDrops, wfAtmServiceRecordUserSuffix=wfAtmServiceRecordUserSuffix, wfAtmVclXmtInitialCellRate=wfAtmVclXmtInitialCellRate, wfAtmAlcRcvReplenMisses=wfAtmAlcRcvReplenMisses, wfSonetFarEndLineCurrentUASs=wfSonetFarEndLineCurrentUASs, wfAtmAlcSarRateQueueIndex=wfAtmAlcSarRateQueueIndex, wfAtmAlcCopRcvIdleCells=wfAtmAlcCopRcvIdleCells, wfAtmizerIntfPort=wfAtmizerIntfPort, wfAtmizerIntfTxLackPageCredits=wfAtmizerIntfTxLackPageCredits, wfAtmizerVclVpi=wfAtmizerVclVpi, wfSonetPathIntervalESs=wfSonetPathIntervalESs, wfAtmIlmiAtmCct=wfAtmIlmiAtmCct, wfAtmTableDebugEntry=wfAtmTableDebugEntry, wfAtmSigTDisc=wfAtmSigTDisc, wfAtmAlcSarModeSmode=wfAtmAlcSarModeSmode, wfAtmVbrCsReceives=wfAtmVbrCsReceives, wfAtmDxiFrameChecksumErrors=wfAtmDxiFrameChecksumErrors, wfSonetLineIntervalUASs=wfSonetLineIntervalUASs, wfAtmAlcFrmRcvExtIlmiSig=wfAtmAlcFrmRcvExtIlmiSig, wfAtmIlmiLocalPort=wfAtmIlmiLocalPort, wfAtmSigMinBufferThreshold=wfAtmSigMinBufferThreshold, wfAtmInterfaceConfTable=wfAtmInterfaceConfTable, wfAtmAlcConfXmtClipSlotMax=wfAtmAlcConfXmtClipSlotMax, wfAtmVbrSarTable=wfAtmVbrSarTable, wfAtmVbrCsCct=wfAtmVbrCsCct, wfAtmAlcFrmConfDelete=wfAtmAlcFrmConfDelete, wfAtmVclVcType=wfAtmVclVcType, wfAtmVclRcvReassemAbortErrs=wfAtmVclRcvReassemAbortErrs, wfAtmizerVclRxInvalidHeaders=wfAtmizerVclRxInvalidHeaders, wfSonetLineCurrentStatus=wfSonetLineCurrentStatus, wfAtmVclDirectAccessCct=wfAtmVclDirectAccessCct, wfAtmVbrCsVciLengthMismatches=wfAtmVbrCsVciLengthMismatches, wfAtmPvcDirectAccessCct=wfAtmPvcDirectAccessCct, wfAtmAlcFrmCsiXmtCongBitOpt=wfAtmAlcFrmCsiXmtCongBitOpt, wfAtmAlcCopAlcVersion=wfAtmAlcCopAlcVersion, wfAtmPlcpBipESecs=wfAtmPlcpBipESecs, wfAtmAlcFrmDmaChan0Enable=wfAtmAlcFrmDmaChan0Enable, wfSonetSectionIntervalSEFSs=wfSonetSectionIntervalSEFSs, wfAtmInterfaceConfVccs=wfAtmInterfaceConfVccs, wfAtmizerVclRxLackPageCredits=wfAtmizerVclRxLackPageCredits, wfAtmPlcpYellowCFA=wfAtmPlcpYellowCFA, wfAtmAlcLastChange=wfAtmAlcLastChange, wfAtmizerDebugEntry=wfAtmizerDebugEntry, wfAtmVclConfVci=wfAtmVclConfVci, wfAtmAlcSarModeHec=wfAtmAlcSarModeHec, wfAtmPvcVpi=wfAtmPvcVpi, wfAtmAlcSarMaxBurstSize=wfAtmAlcSarMaxBurstSize, wfAtmAlcSarAvgCellRate=wfAtmAlcSarAvgCellRate, wfAtmUniAtmCHECs=wfAtmUniAtmCHECs, wfAtmSigT313=wfAtmSigT313, wfAtmizerDrvCfgMaxVcls=wfAtmizerDrvCfgMaxVcls, wfAtmInterfaceLastChange=wfAtmInterfaceLastChange, wfAtmAlcXmtPackets=wfAtmAlcXmtPackets, wfAtmAlcFrmRcvOamCrcCheck=wfAtmAlcFrmRcvOamCrcCheck, wfAtmAlcCopB2Febes=wfAtmAlcCopB2Febes, wfAtmAlcConfRcvBuffersMax=wfAtmAlcConfRcvBuffersMax, wfAtmVclRcvBurstSize=wfAtmVclRcvBurstSize, wfAtmVclXmtRateIncreaseFactor=wfAtmVclXmtRateIncreaseFactor, wfAtmizerVclRxFlowCtrlCount=wfAtmizerVclRxFlowCtrlCount, wfAtmPvcDrops=wfAtmPvcDrops, wfAtmPvcEntry=wfAtmPvcEntry, wfAtmAlcCopConfIndex=wfAtmAlcCopConfIndex, wfAtmizerDrvCfgCct=wfAtmizerDrvCfgCct, wfAtmAlcCopInCellDelins=wfAtmAlcCopInCellDelins, wfAtmSscopStandard=wfAtmSscopStandard, wfAtmDxiSeconds=wfAtmDxiSeconds, wfAtmAlcCopXmtErrBuffers=wfAtmAlcCopXmtErrBuffers, wfAtmInterfaceLmiDisable=wfAtmInterfaceLmiDisable, wfAtmAlcConfXmtClipQueueMin=wfAtmAlcConfXmtClipQueueMin, wfAtmizerDebugParam9=wfAtmizerDebugParam9, wfAtmVbrCsTable=wfAtmVbrCsTable, wfAtmSigT308=wfAtmSigT308, wfAtmAlcFrmXmtExtF4Segment=wfAtmAlcFrmXmtExtF4Segment, wfAtmAlcFrmXmtOamCrcGen=wfAtmAlcFrmXmtOamCrcGen, wfAtmInterfaceUseHwMacAddr=wfAtmInterfaceUseHwMacAddr, wfAtmAlcCopHwEntry=wfAtmAlcCopHwEntry, wfAtmAlcCopXmtIdleCells=wfAtmAlcCopXmtIdleCells, wfAtmizerCfgTxVcBuffersMax=wfAtmizerCfgTxVcBuffersMax, wfAtmServiceRecordNetworkPrefix=wfAtmServiceRecordNetworkPrefix, wfAtmizerDrvCfgEnable=wfAtmizerDrvCfgEnable, wfSonetLineCurrentCVs=wfSonetLineCurrentCVs, wfAtmDrops=wfAtmDrops, wfAtmDxiFrameTransmits=wfAtmDxiFrameTransmits, wfAtmDxiDxiAddrDxiCct=wfAtmDxiDxiAddrDxiCct, wfAtmVclRcvPacketLengthErrs=wfAtmVclRcvPacketLengthErrs, wfAtmAlcFrmXmtHecXmtMask=wfAtmAlcFrmXmtHecXmtMask, wfAtmizerVclRxCrcErrors=wfAtmizerVclRxCrcErrors, wfSonetFarEndPathIntervalESs=wfSonetFarEndPathIntervalESs, wfAtmAlcFrmRcvExtF5Segment=wfAtmAlcFrmRcvExtF5Segment, wfAtmUniAtmLineNumber=wfAtmUniAtmLineNumber, wfAtmIlmiLocalOid=wfAtmIlmiLocalOid, wfAtmAlcFrmGenSyncFoundCnt=wfAtmAlcFrmGenSyncFoundCnt, wfAtmSVCOptionsEntry=wfAtmSVCOptionsEntry, wfAtmSigT303=wfAtmSigT303, wfAtmIlmiVci=wfAtmIlmiVci, wfAtmLmiCsuDsuTraps=wfAtmLmiCsuDsuTraps, wfAtmPvcMode=wfAtmPvcMode, wfAtmizerDrvCfgFramingMode=wfAtmizerDrvCfgFramingMode, wfAtmAlcSarModeTrtl=wfAtmAlcSarModeTrtl, wfAtmAlcFrmRcvDisF4Segment=wfAtmAlcFrmRcvDisF4Segment, wfAtmDxiDxiAddrLLIndex=wfAtmDxiDxiAddrLLIndex, wfAtmServiceRecordAtmAddress=wfAtmServiceRecordAtmAddress, wfAtmAlcOutQLen=wfAtmAlcOutQLen, wfAtmizerIntfRxPacketsOkWrap=wfAtmizerIntfRxPacketsOkWrap, wfAtmAlcXmtqState=wfAtmAlcXmtqState, wfAtmVbrCsVciOctetTransmits=wfAtmVbrCsVciOctetTransmits, wfAtmSigMaxVciPtPt=wfAtmSigMaxVciPtPt, wfAtmizerCfgRxQueueTmoMax=wfAtmizerCfgRxQueueTmoMax, wfAtmizerCfgSlot=wfAtmizerCfgSlot, wfSonetFarEndPathIntervalEntry=wfSonetFarEndPathIntervalEntry, wfSonetLineCurrentTable=wfSonetLineCurrentTable)
mibBuilder.exportSymbols("Wellfleet-ATM-MIB", wfAtmSigT397=wfAtmSigT397, wfAtmVclMulticast=wfAtmVclMulticast, wfAtmAlcCopDmaHighWatermark=wfAtmAlcCopDmaHighWatermark, wfAtmAlcCopXmtCells=wfAtmAlcCopXmtCells, wfAtmizerIntfRxLackBufCredits=wfAtmizerIntfRxLackBufCredits, wfAtmAlcFrmRcvDisF5EndEnd=wfAtmAlcFrmRcvDisF5EndEnd, wfAtmAlcCopRcvAtes=wfAtmAlcCopRcvAtes, wfAtmizerRxPagesMax=wfAtmizerRxPagesMax, wfAtmServiceRecordWanSvcRoutingMode=wfAtmServiceRecordWanSvcRoutingMode, wfAtmAlcFrmCsiRcvAte=wfAtmAlcFrmCsiRcvAte, wfAtmLmiEntry=wfAtmLmiEntry, wfAtmUniPhysical=wfAtmUniPhysical, wfAtmizerVclRxLackBufCredits=wfAtmizerVclRxLackBufCredits, wfAtmAlcCopDmaFifoUnderruns=wfAtmAlcCopDmaFifoUnderruns, wfAtmizerDrvCfgModule=wfAtmizerDrvCfgModule, wfAtmPvcOctetTransmits=wfAtmPvcOctetTransmits, wfAtmIlmiGetNextRetryCnt=wfAtmIlmiGetNextRetryCnt, wfAtmAlcXmtqVcs=wfAtmAlcXmtqVcs, wfAtmVbrCsTransmits=wfAtmVbrCsTransmits, wfAtmDelete=wfAtmDelete, wfAtmSigT316=wfAtmSigT316, wfAtmLinkModuleGroup=wfAtmLinkModuleGroup, wfAtmVclRcvMaxLenExceedErrs=wfAtmVclRcvMaxLenExceedErrs, wfAtmInterfaceConfDelete=wfAtmInterfaceConfDelete, wfAtmAlcFrmXmtOamCrcCheck=wfAtmAlcFrmXmtOamCrcCheck, wfAtmAlcSarMaxReceivePktLen=wfAtmAlcSarMaxReceivePktLen, wfAtmizerVclRxCellsOkWrap=wfAtmizerVclRxCellsOkWrap, wfSonetFarEndPathCurrentSESs=wfSonetFarEndPathCurrentSESs, wfSonetFarEndLineIntervalTable=wfSonetFarEndLineIntervalTable, wfAtmPlcpFebeSESecs=wfAtmPlcpFebeSESecs, wfAtmVclVcIndex=wfAtmVclVcIndex, wfAtmAlcDrvEntry=wfAtmAlcDrvEntry, wfAtmVclRcvAbortErrs=wfAtmVclRcvAbortErrs, wfAtmAlcSarTimeoutCtrInt=wfAtmAlcSarTimeoutCtrInt, wfAtmVbrSarCct=wfAtmVbrSarCct, wfSonetFarEndLineIntervalNumber=wfSonetFarEndLineIntervalNumber, wfAtmInterfaceConfIndex=wfAtmInterfaceConfIndex, wfAtmAlcFrmRcvDisF4EndEnd=wfAtmAlcFrmRcvDisF4EndEnd, wfAtmServiceRecordAalEncapsType=wfAtmServiceRecordAalEncapsType, wfAtmVclVBRType=wfAtmVclVBRType, wfAtmPlcpSevereFrameErrors=wfAtmPlcpSevereFrameErrors, wfAtmAlcFrmStatsForceDma=wfAtmAlcFrmStatsForceDma, wfSonetSectionIntervalSESs=wfSonetSectionIntervalSESs, wfAtmAlcCopLossFrames=wfAtmAlcCopLossFrames, wfAtmAlcSarModeAal=wfAtmAlcSarModeAal, wfAtmSigT309=wfAtmSigT309, wfAtmSscopUpThreshold=wfAtmSscopUpThreshold, wfAtmAlcXmtqNumber=wfAtmAlcXmtqNumber, wfSonetFarEndPathCurrentEntry=wfSonetFarEndPathCurrentEntry, wfAtmIlmiSetRetryCnt=wfAtmIlmiSetRetryCnt, wfAtmInterfaceIlmiVci=wfAtmInterfaceIlmiVci, wfAtmAlcCopRcvClipBuffers=wfAtmAlcCopRcvClipBuffers, wfAtmAlcFrmGenLoopback=wfAtmAlcFrmGenLoopback, wfAtmAlcSarDmaModeBmode=wfAtmAlcSarDmaModeBmode, wfAtmPvcLLIndex=wfAtmPvcLLIndex, wfAtmVclXmtTagging=wfAtmVclXmtTagging, wfAtmSigMinVciPtPt=wfAtmSigMinVciPtPt, wfAtmAlcFrmCsiRcvClpBitOpt=wfAtmAlcFrmCsiRcvClpBitOpt, wfAtmAlcCopXmtOamCells=wfAtmAlcCopXmtOamCells, wfSonetMediumEntry=wfSonetMediumEntry, wfAtmVbrCsVciTransmits=wfAtmVbrCsVciTransmits, wfAtmNetPrefixPort=wfAtmNetPrefixPort, wfAtmAlcFrmDmaEnable=wfAtmAlcFrmDmaEnable, wfSonetLineCurrentUASs=wfSonetLineCurrentUASs, wfAtmSscopKeepAliveTimer=wfAtmSscopKeepAliveTimer, wfAtmAlcInterfaceStatus=wfAtmAlcInterfaceStatus, wfAtmVclStatsIndex=wfAtmVclStatsIndex, wfAtmSVCOptionsCct=wfAtmSVCOptionsCct, wfSonetFarEndLineIntervalEntry=wfSonetFarEndLineIntervalEntry, wfAtmAlcFrmRcvDisIlmiSig=wfAtmAlcFrmRcvDisIlmiSig, wfAtmVbrCsLengthMismatches=wfAtmVbrCsLengthMismatches, wfAtmAlcCopXmtUnassCells=wfAtmAlcCopXmtUnassCells, wfAtmAlcCopDataPathEntry=wfAtmAlcCopDataPathEntry, wfSonetPathCurrentUASs=wfSonetPathCurrentUASs, wfAtmizerDrvCfgDs3LineBuildOut=wfAtmizerDrvCfgDs3LineBuildOut, wfAtmSVCOptionsAdjHostAtmAddr=wfAtmSVCOptionsAdjHostAtmAddr, wfAtmAlcSarTimeoutCtrPeriod=wfAtmAlcSarTimeoutCtrPeriod, wfAtmSigT304=wfAtmSigT304, wfAtmVbrSarCrc10Errors=wfAtmVbrSarCrc10Errors, wfAtmSigMinVciPtMltPt=wfAtmSigMinVciPtMltPt, wfAtmMpeIndex=wfAtmMpeIndex, wfAtmVclAalEncapsType=wfAtmVclAalEncapsType, wfAtmServiceRecordVcType=wfAtmServiceRecordVcType, wfAtmAlcCopTotalBufs=wfAtmAlcCopTotalBufs, wfAtmAlcSarRateQueueState=wfAtmAlcSarRateQueueState, wfAtmizerVclTxOctets=wfAtmizerVclTxOctets, wfAtmAlcCopF3Febes=wfAtmAlcCopF3Febes, wfAtmVclConfIndex=wfAtmVclConfIndex, wfAtmDxiTooShortFrames=wfAtmDxiTooShortFrames, wfAtmMpeInvalidNlpids=wfAtmMpeInvalidNlpids, wfSonetPathCurrentTable=wfSonetPathCurrentTable, wfAtmAlcDelete=wfAtmAlcDelete, wfAtmVbrSeconds=wfAtmVbrSeconds, wfAtmSigT310=wfAtmSigT310, wfAtmAlcCopXmtQueueFulls=wfAtmAlcCopXmtQueueFulls, wfAtmVclStatsVpi=wfAtmVclStatsVpi, wfAtmAlcFrmXmtExtF5EndEnd=wfAtmAlcFrmXmtExtF5EndEnd, wfAtmizerDebugSlot=wfAtmizerDebugSlot, wfAtmVclRcvInvalidLenErrs=wfAtmVclRcvInvalidLenErrs, wfAtmUniCct=wfAtmUniCct, wfAtmAlcCopF1Febes=wfAtmAlcCopF1Febes, wfAtmTableDebugSlot=wfAtmTableDebugSlot, wfAtmAlcType=wfAtmAlcType, wfAtmizerDebugParam8=wfAtmizerDebugParam8, wfSonetLineIntervalIndex=wfSonetLineIntervalIndex, wfAtmInterfaceCct=wfAtmInterfaceCct, wfSonetSectionIntervalIndex=wfSonetSectionIntervalIndex, wfAtmAlcFrmRcvInsertPcr=wfAtmAlcFrmRcvInsertPcr, wfAtmAlcCopErrorIndex=wfAtmAlcCopErrorIndex, wfAtmizerDebugParam2=wfAtmizerDebugParam2, wfAtmMpeInvalidPids=wfAtmMpeInvalidPids, wfAtmAlcUseDebugger=wfAtmAlcUseDebugger, wfAtmDxiAbortedFrames=wfAtmDxiAbortedFrames, wfAtmVcGroupIndex=wfAtmVcGroupIndex, wfAtmInterfaceAddressType=wfAtmInterfaceAddressType, wfSonetFarEndLineCurrentCVs=wfSonetFarEndLineCurrentCVs, wfAtmVcGroupCct=wfAtmVcGroupCct, wfAtmAlcMadrCt=wfAtmAlcMadrCt, wfAtmAlcCopInsMemSize=wfAtmAlcCopInsMemSize, wfAtmVclVcGroup=wfAtmVclVcGroup, wfSonetMediumValidIntervals=wfSonetMediumValidIntervals, wfAtmAlcCopHwTable=wfAtmAlcCopHwTable, wfSonetFarEndLineCurrentTable=wfSonetFarEndLineCurrentTable, wfAtmAlcCopRcvOamCells=wfAtmAlcCopRcvOamCells, wfAtmAlcSarRateQueueEntry=wfAtmAlcSarRateQueueEntry, wfAtmAlcFrmXmtGfcIgnore=wfAtmAlcFrmXmtGfcIgnore, wfAtmizerIntfLastChange=wfAtmizerIntfLastChange, wfAtmPvcVci=wfAtmPvcVci, wfAtmSVCOptionsXmtSustCellRate=wfAtmSVCOptionsXmtSustCellRate, wfAtmVclRcvSustainableCellRate=wfAtmVclRcvSustainableCellRate, wfAtmAlcCopHecCorrects=wfAtmAlcCopHecCorrects, wfAtmizerIntfRxAbortMessages=wfAtmizerIntfRxAbortMessages, wfAtmizerVclRxCrc10Errors=wfAtmizerVclRxCrc10Errors, wfAtmSscopState=wfAtmSscopState, wfAtmVbrCsEntry=wfAtmVbrCsEntry, wfAtmDxiFrameHeaderErrors=wfAtmDxiFrameHeaderErrors, wfAtmIlmiDelete=wfAtmIlmiDelete, wfAtmAlcSarDmaModeMmode=wfAtmAlcSarDmaModeMmode, wfAtmizerFramingMode=wfAtmizerFramingMode, wfSonetFarEndLineCurrentEntry=wfSonetFarEndLineCurrentEntry, wfSonetLineIntervalESs=wfSonetLineIntervalESs, wfAtmAlcXmtPacketClips=wfAtmAlcXmtPacketClips, wfAtmInterfaceState=wfAtmInterfaceState, wfAtmVbrCsVciVbrCct=wfAtmVbrCsVciVbrCct, wfSonetFarEndPathCurrentCVs=wfSonetFarEndPathCurrentCVs, wfAtmUniAtmCct=wfAtmUniAtmCct, wfAtm=wfAtm, wfAtmPvcMulticast=wfAtmPvcMulticast, wfAtmAlcSarControlLoop=wfAtmAlcSarControlLoop, wfAtmPlcpTable=wfAtmPlcpTable, wfAtmVbrSarCellLengthErrors=wfAtmVbrSarCellLengthErrors, wfAtmAlcFrmXmtDisIlmiSig=wfAtmAlcFrmXmtDisIlmiSig, wfAtmizerTxBuffersMax=wfAtmizerTxBuffersMax, wfSonetSectionCurrentSEFSs=wfSonetSectionCurrentSEFSs, wfAtmAlcFrmXmtCellInsPrio=wfAtmAlcFrmXmtCellInsPrio, wfAtmizerDebugRxValue=wfAtmizerDebugRxValue, wfAtmSigT398=wfAtmSigT398, wfAtmInterfaceLineNumber=wfAtmInterfaceLineNumber, wfAtmVclAalType=wfAtmVclAalType, wfSonetFarEndPathIntervalNumber=wfSonetFarEndPathIntervalNumber, wfAtmInterfaceDescr=wfAtmInterfaceDescr, wfAtmUniAtmReceives=wfAtmUniAtmReceives, wfAtmAlcFrmStatsMask=wfAtmAlcFrmStatsMask, wfAtmSigMaxServiceUsers=wfAtmSigMaxServiceUsers, wfAtmAlcFrmConfTable=wfAtmAlcFrmConfTable, wfAtmAlcCopRcvSarDropBuffers=wfAtmAlcCopRcvSarDropBuffers, wfAtmAlcFrmXmtDisF4EndEnd=wfAtmAlcFrmXmtDisF4EndEnd, wfAtmAlcFrmRcvDisMetaSig=wfAtmAlcFrmRcvDisMetaSig, wfAtmizerCfgTable=wfAtmizerCfgTable, wfAtmAlcFrmStatsMode=wfAtmAlcFrmStatsMode, wfAtmAlcCopVcInactTimeout=wfAtmAlcCopVcInactTimeout, wfAtmVbrSarCsPduSizeTooBigErrors=wfAtmVbrSarCsPduSizeTooBigErrors, wfAtmServicePqOverride=wfAtmServicePqOverride, wfAtmVclRcvOamCells=wfAtmVclRcvOamCells, wfAtmSigCallsSec=wfAtmSigCallsSec, wfAtmAlcRcvPackets=wfAtmAlcRcvPackets, wfAtmizerVclRxAbortMessages=wfAtmizerVclRxAbortMessages, wfAtmizerCfgMaxVcl=wfAtmizerCfgMaxVcl, wfAtmizerDrvCfgState=wfAtmizerDrvCfgState, wfAtmizerIntfRxFlowCtrlCount=wfAtmizerIntfRxFlowCtrlCount, wfAtmizerRxBuffersMax=wfAtmizerRxBuffersMax, wfAtmAlcFrmOamTxPathFebe=wfAtmAlcFrmOamTxPathFebe, wfSonetSectionIntervalCVs=wfSonetSectionIntervalCVs, wfAtmCsNull=wfAtmCsNull, wfAtmAlcCopHwModId=wfAtmAlcCopHwModId, wfAtmIlmiVpi=wfAtmIlmiVpi, wfAtmAlcSarRateQueueDef=wfAtmAlcSarRateQueueDef, wfSonetFarEndPathCurrentUASs=wfSonetFarEndPathCurrentUASs, wfAtmVbrTable=wfAtmVbrTable, wfAtmVbrCsVciMisdeliveredPdus=wfAtmVbrCsVciMisdeliveredPdus, wfAtmVbrCsVciReceives=wfAtmVbrCsVciReceives, wfAtmVclXmtSustainableCellRate=wfAtmVclXmtSustainableCellRate, wfAtmLmiCircuit=wfAtmLmiCircuit, wfAtmSscopEntry=wfAtmSscopEntry, wfAtmAlcCopXmtAtes=wfAtmAlcCopXmtAtes, wfAtmizerDrvCfgLogLevel=wfAtmizerDrvCfgLogLevel, wfAtmCellSwitchGroup=wfAtmCellSwitchGroup, wfAtmSigT399=wfAtmSigT399, wfAtmAlcCopRcvPackets=wfAtmAlcCopRcvPackets, wfAtmSigDebug=wfAtmSigDebug, wfAtmSigState=wfAtmSigState, wfAtmInterfaceMaxActiveVciBits=wfAtmInterfaceMaxActiveVciBits, wfAtmAlcCopRcvDropCells=wfAtmAlcCopRcvDropCells, wfAtmVbrSarCellSequenceErrors=wfAtmVbrSarCellSequenceErrors, wfAtmAlcFrmXmtDisF4Segment=wfAtmAlcFrmXmtDisF4Segment, wfAtmizerIntfIndex=wfAtmizerIntfIndex, wfAtmAlcCopLossSignals=wfAtmAlcCopLossSignals, wfAtmSigMaxVpiPtPt=wfAtmSigMaxVpiPtPt, wfAtmizerCfgTxPagesMax=wfAtmizerCfgTxPagesMax, wfAtmizerIntfTxOamCount=wfAtmizerIntfTxOamCount, wfAtmAlcFrmRcvExtF4Segment=wfAtmAlcFrmRcvExtF4Segment, wfAtmPlcpBipErrors=wfAtmPlcpBipErrors, wfAtmVclAdminStatus=wfAtmVclAdminStatus, wfAtmVbrSarComNoProcessErrors=wfAtmVbrSarComNoProcessErrors, wfAtmAlcFrmRcvGfcIgnore=wfAtmAlcFrmRcvGfcIgnore, wfAtmAlcXmtqOctets=wfAtmAlcXmtqOctets, wfAtmAlcFrmStatsTimeout=wfAtmAlcFrmStatsTimeout, wfAtmDxiLLIndex=wfAtmDxiLLIndex, wfAtmAlcCopHwIndex=wfAtmAlcCopHwIndex, wfAtmSscopDisable=wfAtmSscopDisable, wfAtmAlcXmtClipSlotMax=wfAtmAlcXmtClipSlotMax, wfAtmizerVclRxOamCount=wfAtmizerVclRxOamCount, wfAtmAlcFrmRcvHecRcvMask=wfAtmAlcFrmRcvHecRcvMask, wfAtmVbrSarLineNumber=wfAtmVbrSarLineNumber, wfAtmAlcFrmXmtDisMetaSig=wfAtmAlcFrmXmtDisMetaSig, wfSonetPathIntervalEntry=wfSonetPathIntervalEntry, wfAtmPlcpPhysical=wfAtmPlcpPhysical, wfAtmAlcFrmXmtDisF5Segment=wfAtmAlcFrmXmtDisF5Segment, wfAtmSVCOptionsDelete=wfAtmSVCOptionsDelete, wfSonetMediumLineType=wfSonetMediumLineType, wfAtmSigStandard=wfAtmSigStandard, wfSonetPathIntervalSESs=wfSonetPathIntervalSESs, wfAtmInterfaceMaxActiveVpiBits=wfAtmInterfaceMaxActiveVpiBits, wfAtmAlcCopRcvUserCells=wfAtmAlcCopRcvUserCells, wfAtmAlcSarRateQueueVcs=wfAtmAlcSarRateQueueVcs, wfAtmAlcCopB3Febes=wfAtmAlcCopB3Febes, wfAtmizerVclTxPacketsOk=wfAtmizerVclTxPacketsOk, wfAtmDxiCct=wfAtmDxiCct, wfAtmizerVclTxLackPageCredits=wfAtmizerVclTxLackPageCredits, wfAtmVclStatsEntry=wfAtmVclStatsEntry, wfAtmAlcFrmRcvDisUnassCell=wfAtmAlcFrmRcvDisUnassCell, wfAtmAlcCopInfoTable=wfAtmAlcCopInfoTable, wfAtmAlcSarTrafficMgtEntry=wfAtmAlcSarTrafficMgtEntry, wfAtmAlcRcvBuffersMax=wfAtmAlcRcvBuffersMax, wfAtmSigMaxPartiesInMultConnect=wfAtmSigMaxPartiesInMultConnect, wfAtmAlcCopCtlMemSize=wfAtmAlcCopCtlMemSize, wfAtmizerDrvCfgIwfCct=wfAtmizerDrvCfgIwfCct, wfSonetPathCurrentWidth=wfSonetPathCurrentWidth, wfAtmLmiTable=wfAtmLmiTable, wfAtmPlcpUAS=wfAtmPlcpUAS, wfAtmVclRcvSequenceNumErrs=wfAtmVclRcvSequenceNumErrs, wfAtmLmiNoVCErrors=wfAtmLmiNoVCErrors, wfAtmVclOperStatus=wfAtmVclOperStatus, wfAtmUniAtmNullCells=wfAtmUniAtmNullCells)
mibBuilder.exportSymbols("Wellfleet-ATM-MIB", wfAtmizerIntfRxLackBufResc=wfAtmizerIntfRxLackBufResc, wfAtmVclOamLpbkThreshold2=wfAtmVclOamLpbkThreshold2, wfAtmAlcFrmRcvDisBcastSig=wfAtmAlcFrmRcvDisBcastSig, wfAtmAlcSarConfEntry=wfAtmAlcSarConfEntry, wfAtmAlcFrmGenDescrambleEna=wfAtmAlcFrmGenDescrambleEna, wfAtmizerVclTxPacketsOkWrap=wfAtmizerVclTxPacketsOkWrap, wfAtmizerDrvCfgMtu=wfAtmizerDrvCfgMtu, wfAtmAlcCopG1Febes=wfAtmAlcCopG1Febes, wfAtmAlcFrmDmaChan5Enable=wfAtmAlcFrmDmaChan5Enable, wfAtmizerIntfRxOverSizedSDUs=wfAtmizerIntfRxOverSizedSDUs, wfSonetMediumLineCoding=wfSonetMediumLineCoding, wfAtmSigAtmCct=wfAtmSigAtmCct, wfAtmVbrCsLineNumber=wfAtmVbrCsLineNumber, wfAtmPvcState=wfAtmPvcState, wfAtmizerIntfStatus=wfAtmizerIntfStatus, wfAtmizerVclRxSequenceNumberErrors=wfAtmizerVclRxSequenceNumberErrors, wfSonetFarEndLineIntervalUASs=wfSonetFarEndLineIntervalUASs, wfAtmAlcFrmCsiRcvHecMask=wfAtmAlcFrmCsiRcvHecMask, wfAtmMpeUnsupportedControlFields=wfAtmMpeUnsupportedControlFields, wfAtmVclConfEntry=wfAtmVclConfEntry, wfAtmNetPrefixTable=wfAtmNetPrefixTable, wfAtmVbrSarEntry=wfAtmVbrSarEntry, wfAtmAlcSarAvgCellRateEna=wfAtmAlcSarAvgCellRateEna, wfAtmInterfacePlcp=wfAtmInterfacePlcp, wfAtmVclConfVpi=wfAtmVclConfVpi, wfSonetFarEndLineIntervalSESs=wfSonetFarEndLineIntervalSESs, wfAtmDxiDiscardedFrames=wfAtmDxiDiscardedFrames, wfAtmizerIntfOutQLen=wfAtmizerIntfOutQLen, wfAtmSigLineNumber=wfAtmSigLineNumber, wfAtmAlcXmtqTable=wfAtmAlcXmtqTable, wfAtmizerVclRxOctets=wfAtmizerVclRxOctets, wfAtmSVCOptionsDisable=wfAtmSVCOptionsDisable, wfAtmAlcLineNumber=wfAtmAlcLineNumber, wfAtmDxiDxiAddrTransmits=wfAtmDxiDxiAddrTransmits, wfAtmAlcFrmRcvExtPointSig=wfAtmAlcFrmRcvExtPointSig, wfSonetFarEndPathCurrentTable=wfSonetFarEndPathCurrentTable, wfAtmVcGroupDelete=wfAtmVcGroupDelete, wfAtmUniLLIndex=wfAtmUniLLIndex, wfAtmSscopMaxStat=wfAtmSscopMaxStat, wfAtmUniAtmNoBuffers=wfAtmUniAtmNoBuffers, wfAtmInterfaceConfVpcs=wfAtmInterfaceConfVpcs, wfAtmAlcFrmRcvExtF4F5PrfMan=wfAtmAlcFrmRcvExtF4F5PrfMan, wfAtmAlcCopPktMemSize=wfAtmAlcCopPktMemSize, wfAtmSigTable=wfAtmSigTable, wfAtmAlcFrmRcvCellEnable=wfAtmAlcFrmRcvCellEnable, wfAtmAlcConfControlQSize=wfAtmAlcConfControlQSize, wfAtmAlcMtu=wfAtmAlcMtu, wfAtmAlcCopDataPathTable=wfAtmAlcCopDataPathTable, wfAtmizerVclRxOverSizedSDUs=wfAtmizerVclRxOverSizedSDUs, wfAtmizerDrvCfgVcInactEnable=wfAtmizerDrvCfgVcInactEnable, wfSonetMediumType=wfSonetMediumType, wfAtmInterfaceSigEnable=wfAtmInterfaceSigEnable, wfSonetPathCurrentSESs=wfSonetPathCurrentSESs, wfAtmNetPrefixPrefix=wfAtmNetPrefixPrefix, wfAtmSVCOptionsTable=wfAtmSVCOptionsTable, wfAtmVclCct=wfAtmVclCct, wfAtmAlcFrmStatsTransmit=wfAtmAlcFrmStatsTransmit, wfAtmVbrCsVciLLIndex=wfAtmVbrCsVciLLIndex, wfAtmPvcCsNull=wfAtmPvcCsNull, wfAtmIlmiDebug=wfAtmIlmiDebug, wfAtmAlcSarConfTable=wfAtmAlcSarConfTable, wfAtmVbrSarNoBufferErrors=wfAtmVbrSarNoBufferErrors, wfAtmAlcMadr=wfAtmAlcMadr, wfAtmAlcFrmDmaChan2Enable=wfAtmAlcFrmDmaChan2Enable, wfAtmVbrSarCellMidErrors=wfAtmVbrSarCellMidErrors, wfAtmServiceRecordDebug=wfAtmServiceRecordDebug, wfAtmVbrEntry=wfAtmVbrEntry, wfAtmAlcSarModeRid=wfAtmAlcSarModeRid, wfAtmAlcCopXmtBuffers=wfAtmAlcCopXmtBuffers, wfAtmVbrLineNumber=wfAtmVbrLineNumber, wfAtmAlcFrmCsiXmtClpBitOpt=wfAtmAlcFrmCsiXmtClpBitOpt, wfAtmSigMinVpiPtMltPt=wfAtmSigMinVpiPtMltPt, wfAtmDxiDxiAddrLineNumber=wfAtmDxiDxiAddrLineNumber, wfAtmSscopLineNumber=wfAtmSscopLineNumber, wfAtmAlcFrmXmtInsertPcr=wfAtmAlcFrmXmtInsertPcr, wfAtmAlcCopBufOverflows=wfAtmAlcCopBufOverflows, wfAtmVbrCsVciTable=wfAtmVbrCsVciTable, wfAtmAlcFrmXmtExtF4EndEnd=wfAtmAlcFrmXmtExtF4EndEnd, wfAtmSigInterfaceType=wfAtmSigInterfaceType, wfAtmAlcCopCacheControl=wfAtmAlcCopCacheControl, wfAtmizerIntfRxCellsOkWrap=wfAtmizerIntfRxCellsOkWrap, wfAtmInterfaceCircuit=wfAtmInterfaceCircuit, wfAtmSigVpi=wfAtmSigVpi, wfAtmAlcFrmRcvCellInsPrio=wfAtmAlcFrmRcvCellInsPrio, wfAtmUniAtmEntry=wfAtmUniAtmEntry, wfAtmVbrCsMisdeliveredPdus=wfAtmVbrCsMisdeliveredPdus, wfAtmizerDrvCfgSlot=wfAtmizerDrvCfgSlot, wfAtmDxiDxiAddrTable=wfAtmDxiDxiAddrTable, wfAtmInterfaceMaxVccs=wfAtmInterfaceMaxVccs, wfAtmDxiMaxLmiPduLengthErrors=wfAtmDxiMaxLmiPduLengthErrors, wfAtmAlcCopRcvClipPackets=wfAtmAlcCopRcvClipPackets, wfAtmVclLastChange=wfAtmVclLastChange, wfAtmVclAalCpcsTransmitSduSize=wfAtmVclAalCpcsTransmitSduSize, wfAtmLmiState=wfAtmLmiState, wfAtmVbrAtmUni=wfAtmVbrAtmUni, wfAtmPvcOctetReceives=wfAtmPvcOctetReceives, wfAtmAlcFrmCsiEnable=wfAtmAlcFrmCsiEnable, wfAtmAlcCopRcvOamCrcErrs=wfAtmAlcCopRcvOamCrcErrs, wfAtmVclDrops=wfAtmVclDrops, wfSonetSectionCurrentStatus=wfSonetSectionCurrentStatus, wfAtmAlcSarTrafficMgtIndex=wfAtmAlcSarTrafficMgtIndex, wfAtmLmiOtherErrors=wfAtmLmiOtherErrors, wfAtmSscopNoResponseTimer=wfAtmSscopNoResponseTimer, wfAtmAlcSarRateQueueTable=wfAtmAlcSarRateQueueTable, wfAtmizerDrvCfgMadrCt=wfAtmizerDrvCfgMadrCt, wfAtmAlcCopErrorEntry=wfAtmAlcCopErrorEntry, wfAtmAlcFrmXmtExtMetaSig=wfAtmAlcFrmXmtExtMetaSig, wfAtmAlcFrmRcvByteAlignment=wfAtmAlcFrmRcvByteAlignment, wfAtmizerIntfTxPacketsOkWrap=wfAtmizerIntfTxPacketsOkWrap, wfAtmAlcFrmRcvOamCrcGen=wfAtmAlcFrmRcvOamCrcGen, wfAtmizerIntfRxOctets=wfAtmizerIntfRxOctets, wfAtmAlcCopConfigState=wfAtmAlcCopConfigState, wfAtmizerIntfTxPacketsOk=wfAtmizerIntfTxPacketsOk, wfAtmPlcpFrameErrors=wfAtmPlcpFrameErrors, wfAtmAlcCopRcvWriteFails=wfAtmAlcCopRcvWriteFails, wfAtmizerDebugTable=wfAtmizerDebugTable, wfAtmAlcFrmConfIndex=wfAtmAlcFrmConfIndex, wfAtmAlcSarModeAm=wfAtmAlcSarModeAm, wfAtmInterfaceDxiMode=wfAtmInterfaceDxiMode, wfAtmizerDrvCfgExtRate=wfAtmizerDrvCfgExtRate, wfAtmInterfaceAdminStatus=wfAtmInterfaceAdminStatus, wfAtmLmiCsuDsuResponses=wfAtmLmiCsuDsuResponses, wfAtmDxiDxiAddrDxiComponent=wfAtmDxiDxiAddrDxiComponent, wfAtmUniAtmLLIndex=wfAtmUniAtmLLIndex, wfAtmIlmiGetRetryCnt=wfAtmIlmiGetRetryCnt, wfAtmAlcInterfaceIndex=wfAtmAlcInterfaceIndex, wfAtmizerDrvCfgEntry=wfAtmizerDrvCfgEntry, wfAtmVbrCsBETagMismatches=wfAtmVbrCsBETagMismatches, wfSonetPathCurrentEntry=wfSonetPathCurrentEntry, wfAtmVbrLLIndex=wfAtmVbrLLIndex, wfAtmAlcFrmGenScramblerEna=wfAtmAlcFrmGenScramblerEna, wfAtmPvcLineNumber=wfAtmPvcLineNumber, wfAtmServiceRecordName=wfAtmServiceRecordName, wfAtmizerDebugTxValue=wfAtmizerDebugTxValue, wfAtmUniAtmHECs=wfAtmUniAtmHECs, wfAtmAlcXmtOctets=wfAtmAlcXmtOctets, wfAtmDxiDxiAddrVpiVci=wfAtmDxiDxiAddrVpiVci, wfAtmSigDisable=wfAtmSigDisable, wfAtmPvcMpeNull=wfAtmPvcMpeNull, wfAtmAlcConfIntqSize=wfAtmAlcConfIntqSize, wfAtmAlcXmtClipQueueMax=wfAtmAlcXmtClipQueueMax, wfAtmAlcFrmStatsOflowEna=wfAtmAlcFrmStatsOflowEna, wfSonetSectionCurrentCVs=wfSonetSectionCurrentCVs, wfAtmVclRcvMissingEomErrs=wfAtmVclRcvMissingEomErrs, wfAtmVbrSarLLIndex=wfAtmVbrSarLLIndex, wfAtmizerIntfStatsTable=wfAtmizerIntfStatsTable, wfAtmizerIntfRxPacketsOk=wfAtmizerIntfRxPacketsOk, wfAtmVclStatsTable=wfAtmVclStatsTable, wfAtmAlcFrmOamTxPathFerf=wfAtmAlcFrmOamTxPathFerf, wfAtmSscopDebug=wfAtmSscopDebug, wfAtmSscopMaxCc=wfAtmSscopMaxCc, wfAtmSigT301=wfAtmSigT301, wfAtmAlcFrmCsiLoop=wfAtmAlcFrmCsiLoop, wfAtmSscopTable=wfAtmSscopTable, wfAtmIlmiRemotePort=wfAtmIlmiRemotePort, wfAtmizerCfgRxQueueLenMax=wfAtmizerCfgRxQueueLenMax, wfAtmizerVclTxLackBufCredits=wfAtmizerVclTxLackBufCredits, wfAtmSigTimerResolution=wfAtmSigTimerResolution, wfAtmPlcpLofCFA=wfAtmPlcpLofCFA, wfAtmVclXmtCells=wfAtmVclXmtCells, wfAtmVbrCsVciIndex=wfAtmVbrCsVciIndex, wfAtmSscopArbitration=wfAtmSscopArbitration, wfAtmPvcDisable=wfAtmPvcDisable, wfAtmIlmiDisable=wfAtmIlmiDisable, wfAtmIlmiLowThreshold=wfAtmIlmiLowThreshold, wfAtmAlcSarModeRtmr=wfAtmAlcSarModeRtmr, wfAtmAlcFrmRcvDescrambleCtl=wfAtmAlcFrmRcvDescrambleCtl, wfAtmAlcFrmRcvExtBcastSig=wfAtmAlcFrmRcvExtBcastSig, wfAtmAlcFrmXmtExtUserCell=wfAtmAlcFrmXmtExtUserCell, wfAtmSVCOptionsName=wfAtmSVCOptionsName, wfAtmizerVclTxFlowCtrlCount=wfAtmizerVclTxFlowCtrlCount, wfAtmMpeInvalidSAP=wfAtmMpeInvalidSAP, wfAtmAlcCopConfDelete=wfAtmAlcCopConfDelete, wfAtmAlcFrmXmtDisF5EndEnd=wfAtmAlcFrmXmtDisF5EndEnd, wfAtmVclRcvTagging=wfAtmVclRcvTagging, wfAtmMpeInvalidOuis=wfAtmMpeInvalidOuis, wfAtmInterfaceMaxSupportedVCs=wfAtmInterfaceMaxSupportedVCs, wfAtmAlcFrmOamTxSectionFebe=wfAtmAlcFrmOamTxSectionFebe, wfAtmVcGroupName=wfAtmVcGroupName, wfAtmServiceRecordDelete=wfAtmServiceRecordDelete, wfAtmSscopLowThreshold=wfAtmSscopLowThreshold, wfAtmServiceRecordFlag=wfAtmServiceRecordFlag)
