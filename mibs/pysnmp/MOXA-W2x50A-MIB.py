#
# PySNMP MIB module MOXA-W2x50A-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MOXA-W2x50A-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:03:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, TimeTicks, enterprises, Unsigned32, iso, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Counter64, MibIdentifier, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "TimeTicks", "enterprises", "Unsigned32", "iso", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32")
DisplayString, TextualConvention, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "MacAddress")
moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
nport = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2))
w2x50A = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 2, 13))
if mibBuilder.loadTexts: w2x50A.setLastUpdated('201507170000Z')
if mibBuilder.loadTexts: w2x50A.setOrganization('Moxa Inc.')
swMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1))
class PortList(TextualConvention, OctetString):
    status = 'current'

overview = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1))
modelName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
ethIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIPAddress.setStatus('current')
ethMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethMacAddress.setStatus('current')
wlanIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIPAddress.setStatus('current')
wlanMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMacAddress.setStatus('current')
wlanSSID = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSSID.setStatus('current')
wlanNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanNetworkType.setStatus('current')
wlanSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSecurityMode.setStatus('current')
wlanRFType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanRFType.setStatus('current')
wlanCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanCountryCode.setStatus('current')
wlanFastRoaming = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFastRoaming.setStatus('current')
activeNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNetworkPort.setStatus('current')
upTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
serialPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPort1.setStatus('current')
serialPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPort2.setStatus('current')
basicSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2))
serverSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2, 1))
serverName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverName.setStatus('current')
serverLocation = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverLocation.setStatus('current')
timeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2, 2))
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63))).clone(namedValues=NamedValues(("GMT-1200_Eniwetok-Kwajalein", 0), ("GMT-1100_Midway-Island-Samoa", 1), ("GMT-1000_Hawaii", 2), ("GMT-0900_Alaska", 3), ("GMT-0800_Pacific-Time-US_Canada-Tijuana", 4), ("GMT-0700_Arizona", 5), ("GMT-0700_Mountain-Time-US_Canada", 6), ("GMT-0600_Central-Time-US_Canada", 7), ("GMT-0600_Mexico-City-Tegucigalpa", 8), ("GMT-0600_Saskatchewan", 9), ("GMT-0500_Bogota-Lima-Quito", 10), ("GMT-0500_Eastern-Time-US_Canada", 11), ("GMT-0500_Indiana-East", 12), ("GMT-0430_Caracas", 13), ("GMT-0400_Atlantic-Time-Canada", 14), ("GMT-0400_Georgetown-La-Paz", 15), ("GMT-0400_Santiago", 16), ("GMT-0330_Newfoundland", 17), ("GMT-0300_Brasilia", 18), ("GMT-0300_Buenos-Aires", 19), ("GMT-0200_Mid-Atlantic", 20), ("GMT-0100_Azores-Cape-Verde-Is", 21), ("GMT_Casabanca-Monrovia", 22), ("GMT_Greenich-Mean-Time_Dublin-Edinburgh-Lisbon-London", 23), ("GMT_0100_Amsterdam-Berlin-Bern-Rome-Stockholm-Vienna", 24), ("GMT_0100_Belgrade-Bratislava-Budapest-Ljubljana-Prague", 25), ("GMT_0100_Brussels-Copenhagen-Madrid-Paris-Vilnius", 26), ("GMT_0100_Sarajevo-Skopje-Warsaw-Zagreb", 27), ("GMT_0200_Athens-Istanbul-Minsk", 28), ("GMT_0200_Bucharest", 29), ("GMT_0200_Cairo", 30), ("GMT_0200_Harare-Pretoria", 31), ("GMT_0200_Helsinki-Riga-Sofia-Tallinn", 32), ("GMT_0200_Jerusalem", 33), ("GMT_0300_Baghdad-Kuwait-Riyadh", 34), ("GMT_0300_Moscow-St-Petersburg-Volgograd", 35), ("GMT_0300_Mairobi", 36), ("GMT_0330_Tehran", 37), ("GMT_0400_Abu-Dhabi-Muscat", 38), ("GMT_0400_Baku-Tbilisi", 39), ("GMT_0430_Kabul", 40), ("GMT_0500_Ekaterinburg", 41), ("GMT_0500_Islamabad-Karachi-Tashkent", 42), ("GMT_0530_Bombay-Calcutta-Madras-New-Delhi", 43), ("GMT_0600_Astana-Almaty-Dhaka", 44), ("GMT_0600_Colombo", 45), ("GMT_0700_Bangkok-Hanoi-Jakarta", 46), ("GMT_0800_Beijing-Chongqing-Hong-Kong-Urumqi", 47), ("GMT_0800_Perth", 48), ("GMT_0800_Singapore", 49), ("GMT_0800_Taipei", 50), ("GMT_0900_Osaka-Sapporo-Tokyo", 51), ("GMT_0900_Seoul", 52), ("GMT_0900_Yakutsk", 53), ("GMT_0930_Adelaide", 54), ("GMT_0930_Darwin", 55), ("GMT_1000_Brisbane", 56), ("GMT_1000_Canberra-Melbourne-Sydney", 57), ("GMT_1000_Guam-Port-Moresby", 58), ("GMT_1000_Hobart", 59), ("GMT_1000_Vladivostok", 60), ("GMT_1100_Magadan-Solomon-Is-New-Caledonia", 61), ("GMT_1200_Auckland-Wllington", 62), ("GMT_1200_Fiji-Kamchatka-Marshall-Is", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
localTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTime.setStatus('current')
timeServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 2, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer.setStatus('current')
networkSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3))
generalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 1))
dnsServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IpAddr.setStatus('current')
dnsServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IpAddr.setStatus('current')
ethernetSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 2))
ethIpConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIpConfiguration.setStatus('current')
ethIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIpAddress.setStatus('current')
ethNetMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethNetMask.setStatus('current')
ethDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDefaultGateway.setStatus('current')
ethBridgeMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBridgeMode.setStatus('current')
wlanSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 3))
wlanIpConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIpConfiguration.setStatus('current')
wlanIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIpAddress.setStatus('current')
wlanNetMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanNetMask.setStatus('current')
wlanDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDefaultGateway.setStatus('current')
profileSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4))
networkType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ad-hoc", 0), ("infrastructure", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkType.setStatus('current')
adhocProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2))
adhocGeneralSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 1))
adhocProfileName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocProfileName.setStatus('current')
adhocRFType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("w802_11b_g", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocRFType.setStatus('current')
adhocWlanSSID = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocWlanSSID.setStatus('current')
adhocChannel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocChannel.setStatus('current')
adhocSecuritySetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 2))
adhocAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("open-system", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adhocAuthentication.setStatus('current')
adhocEncryption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("wep", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocEncryption.setStatus('current')
adhocWepKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("key-64-bits", 0), ("key-128-bits", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocWepKeyLength.setStatus('current')
adhocWepKeyIndex = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocWepKeyIndex.setStatus('current')
adhocWepKeyPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adhocWepKeyPassphrase.setStatus('current')
adhocWepKeyFormat = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascii", 0), ("hex", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adhocWepKeyFormat.setStatus('current')
infrastructureProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3))
infraGeneralSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 1))
infraGeneralSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 1, 1), )
if mibBuilder.loadTexts: infraGeneralSettingTable.setStatus('current')
infraGeneralSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 1, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "profileIndex"))
if mibBuilder.loadTexts: infraGeneralSettingEntry.setStatus('current')
profileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("profile1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileIndex.setStatus('current')
profileName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileName.setStatus('current')
profileRFType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("w802_11a", 1), ("w802_11b_g", 2), ("w802_11a_n", 3), ("w802_11b_g_n", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileRFType.setStatus('current')
profileWlanSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileWlanSSID.setStatus('current')
securitySetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2))
securitySettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1), )
if mibBuilder.loadTexts: securitySettingTable.setStatus('current')
securitySettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "profileIndex"))
if mibBuilder.loadTexts: securitySettingEntry.setStatus('current')
authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("open-system", 0), ("shared-key", 1), ("wpa", 2), ("wpa-psk", 3), ("wpa2", 4), ("wpa2-psk", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authentication.setStatus('current')
encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("wep", 1), ("tkip", 2), ("aes-ccmp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryption.setStatus('current')
wepKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("key-64-bits", 0), ("key-128-bits", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyLength.setStatus('current')
wepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyIndex.setStatus('current')
wepKeyPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wepKeyPassphrase.setStatus('current')
wepKeyFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascii", 0), ("hex", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyFormat.setStatus('current')
eapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("tls", 0), ("peap", 1), ("ttls", 2), ("leap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapMethod.setStatus('current')
tunneledAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("gtc", 0), ("md5", 1), ("pap", 2), ("chap", 3), ("mschap", 4), ("mschapv2", 5), ("tls", 6), ("eap-tls", 7), ("eap-mschapv2", 8), ("eap-gtc", 9), ("eap-md5", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunneledAuth.setStatus('current')
wpaUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaUsername.setStatus('current')
wpaAnonymousUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaAnonymousUsername.setStatus('current')
verifyServerCert = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyServerCert.setStatus('current')
trustedServerCert = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedServerCert.setStatus('current')
userCert = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCert.setStatus('current')
userPrivateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPrivateKey.setStatus('current')
fastRoamingSetting = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingSetting.setStatus('current')
fastRoamingScanChannels1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("n_a", 0), ("channel_1", 1), ("channel_2", 2), ("channel_3", 3), ("channel_4", 4), ("channel_5", 5), ("channel_6", 6), ("channel_7", 7), ("channel_8", 8), ("channel_9", 9), ("channel_10", 10), ("channel_11", 11), ("channel_12", 12), ("channel_13", 13), ("channel_36", 15), ("channel_40", 16), ("channel_44", 17), ("channel_48", 18), ("channel_52", 19), ("channel_56", 20), ("channel_60", 21), ("channel_64", 22), ("channel_100", 23), ("channel_104", 24), ("channel_108", 25), ("channel_112", 26), ("channel_116", 27), ("channel_120", 28), ("channel_124", 29), ("channel_128", 30), ("channel_132", 31), ("channel_136", 32), ("channel_140", 33), ("channel_149", 34), ("channel_153", 35), ("channel_157", 36), ("channel_161", 37), ("channel_165", 38)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingScanChannels1.setStatus('current')
fastRoamingScanChannels2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("n_a", 0), ("channel_1", 1), ("channel_2", 2), ("channel_3", 3), ("channel_4", 4), ("channel_5", 5), ("channel_6", 6), ("channel_7", 7), ("channel_8", 8), ("channel_9", 9), ("channel_10", 10), ("channel_11", 11), ("channel_12", 12), ("channel_13", 13), ("channel_36", 15), ("channel_40", 16), ("channel_44", 17), ("channel_48", 18), ("channel_52", 19), ("channel_56", 20), ("channel_60", 21), ("channel_64", 22), ("channel_100", 23), ("channel_104", 24), ("channel_108", 25), ("channel_112", 26), ("channel_116", 27), ("channel_120", 28), ("channel_124", 29), ("channel_128", 30), ("channel_132", 31), ("channel_136", 32), ("channel_140", 33), ("channel_149", 34), ("channel_153", 35), ("channel_157", 36), ("channel_161", 37), ("channel_165", 38)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingScanChannels2.setStatus('current')
fastRoamingScanChannels3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("n_a", 0), ("channel_1", 1), ("channel_2", 2), ("channel_3", 3), ("channel_4", 4), ("channel_5", 5), ("channel_6", 6), ("channel_7", 7), ("channel_8", 8), ("channel_9", 9), ("channel_10", 10), ("channel_11", 11), ("channel_12", 12), ("channel_13", 13), ("channel_36", 15), ("channel_40", 16), ("channel_44", 17), ("channel_48", 18), ("channel_52", 19), ("channel_56", 20), ("channel_60", 21), ("channel_64", 22), ("channel_100", 23), ("channel_104", 24), ("channel_108", 25), ("channel_112", 26), ("channel_116", 27), ("channel_120", 28), ("channel_124", 29), ("channel_128", 30), ("channel_132", 31), ("channel_136", 32), ("channel_140", 33), ("channel_149", 34), ("channel_153", 35), ("channel_157", 36), ("channel_161", 37), ("channel_165", 38)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingScanChannels3.setStatus('current')
fastRoamingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingThreshold.setStatus('current')
fastRoamingDifference = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 4, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingDifference.setStatus('current')
wlanLogSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 5))
wlanLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanLogEnable.setStatus('current')
advancedSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6))
gratuitousArp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArp.setStatus('current')
gratuitousArpSendPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpSendPeriod.setStatus('current')
gratuitousArpIpAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpIpAddress1.setStatus('current')
gratuitousArpMacAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpMacAddress1.setStatus('current')
gratuitousArpIpAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpIpAddress2.setStatus('current')
gratuitousArpMacAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpMacAddress2.setStatus('current')
gratuitousArpIpAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpIpAddress3.setStatus('current')
gratuitousArpMacAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpMacAddress3.setStatus('current')
gratuitousArpIpAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpIpAddress4.setStatus('current')
gratuitousArpMacAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 3, 6, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpMacAddress4.setStatus('current')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4))
opModeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1))
opMode = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 1))
opModePortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: opModePortTable.setStatus('current')
opModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: opModePortEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 7, 10, 12, 13, 14, 20, 21))).clone(namedValues=NamedValues(("pair-connection-slave", 0), ("pair-connection-master", 1), ("real-Com", 2), ("disable", 7), ("tcp-Server", 10), ("ethernet-modem", 12), ("tcp-Client", 13), ("udp", 14), ("rfc-2217", 20), ("reverse-Terminal", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMode.setStatus('current')
opModeParam = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2))
realCOM = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1))
realCOMTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1), )
if mibBuilder.loadTexts: realCOMTable.setStatus('current')
realCOMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: realCOMEntry.setStatus('current')
realCOMTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realCOMTcpAliveCheck.setStatus('current')
realCOMMaxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realCOMMaxConnection.setStatus('current')
realCOMIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realCOMIgnoreJammedIp.setStatus('current')
realCOMAllowDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realCOMAllowDriverControl.setStatus('current')
realCOMConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realCOMConnectionDownRTS.setStatus('current')
realCOMConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realCOMConnectionDownDTR.setStatus('current')
rfc2217 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 2))
rfc2217Table = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 2, 1), )
if mibBuilder.loadTexts: rfc2217Table.setStatus('current')
rfc2217Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 2, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: rfc2217Entry.setStatus('current')
rfc2217TcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfc2217TcpAliveCheck.setStatus('current')
rfc2217TcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfc2217TcpPort.setStatus('current')
tcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3))
tcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1), )
if mibBuilder.loadTexts: tcpServerTable.setStatus('current')
tcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: tcpServerEntry.setStatus('current')
tcpServerTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerTcpAliveCheck.setStatus('current')
tcpServerInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerInactivityTime.setStatus('current')
tcpServerMaxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerMaxConnection.setStatus('current')
tcpServerIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerIgnoreJammedIp.setStatus('current')
tcpServerAllowDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerAllowDriverControl.setStatus('current')
tcpServerTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerTcpPort.setStatus('current')
tcpServerCmdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerCmdPort.setStatus('current')
tcpServerConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerConnectionDownRTS.setStatus('current')
tcpServerConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpServerConnectionDownDTR.setStatus('current')
tcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4))
tcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1), )
if mibBuilder.loadTexts: tcpClientTable.setStatus('current')
tcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: tcpClientEntry.setStatus('current')
tcpClientTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientTcpAliveCheck.setStatus('current')
tcpClientInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientInactivityTime.setStatus('current')
tcpClientIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientIgnoreJammedIp.setStatus('current')
tcpClientDestinationAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationAddress1.setStatus('current')
tcpClientDestinationPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationPort1.setStatus('current')
tcpClientDestinationAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationAddress2.setStatus('current')
tcpClientDestinationPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationPort2.setStatus('current')
tcpClientDestinationAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationAddress3.setStatus('current')
tcpClientDestinationPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationPort3.setStatus('current')
tcpClientDestinationAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationAddress4.setStatus('current')
tcpClientDestinationPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDestinationPort4.setStatus('current')
tcpClientDesignatedLocalPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDesignatedLocalPort1.setStatus('current')
tcpClientDesignatedLocalPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDesignatedLocalPort2.setStatus('current')
tcpClientDesignatedLocalPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDesignatedLocalPort3.setStatus('current')
tcpClientDesignatedLocalPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientDesignatedLocalPort4.setStatus('current')
tcpClientConnectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(257, 258, 514, 1028, 260, 2056, 264))).clone(namedValues=NamedValues(("startup-None", 257), ("anyCharacter-None", 258), ("anyCharacter-InactivityTime", 514), ("dsrOn-DSR-Off", 1028), ("dsrOn-None", 260), ("dcdOn-DCD-Off", 2056), ("dcdOn-None", 264)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClientConnectionControl.setStatus('current')
udp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5))
udpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1), )
if mibBuilder.loadTexts: udpTable.setStatus('current')
udpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: udpEntry.setStatus('current')
udpDestinationAddress1Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress1Begin.setStatus('current')
udpDestinationAddress1End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress1End.setStatus('current')
udpDestinationPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationPort1.setStatus('current')
udpDestinationAddress2Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress2Begin.setStatus('current')
udpDestinationAddress2End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress2End.setStatus('current')
udpDestinationPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationPort2.setStatus('current')
udpDestinationAddress3Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress3Begin.setStatus('current')
udpDestinationAddress3End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress3End.setStatus('current')
udpDestinationPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationPort3.setStatus('current')
udpDestinationAddress4Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress4Begin.setStatus('current')
udpDestinationAddress4End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationAddress4End.setStatus('current')
udpDestinationPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpDestinationPort4.setStatus('current')
udpLocalListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpLocalListenPort.setStatus('current')
pairConnectionMaster = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 6))
pairConnectionMasterTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 6, 1), )
if mibBuilder.loadTexts: pairConnectionMasterTable.setStatus('current')
pairConnectionMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 6, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: pairConnectionMasterEntry.setStatus('current')
pairConnectionMasterTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionMasterTcpAliveCheck.setStatus('current')
pairConnectionMasterDestnationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionMasterDestnationAddress.setStatus('current')
pairConnectionMasterDestnationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionMasterDestnationTcpPort.setStatus('current')
pairConnectionSlave = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 7))
pairConnectionSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 7, 1), )
if mibBuilder.loadTexts: pairConnectionSlaveTable.setStatus('current')
pairConnectionSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 7, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: pairConnectionSlaveEntry.setStatus('current')
pairConnectionSlaveTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionSlaveTcpAliveCheck.setStatus('current')
pairConnectionSlaveLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionSlaveLocalTcpPort.setStatus('current')
ethernetModem = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 8))
ethernetModemTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 8, 1), )
if mibBuilder.loadTexts: ethernetModemTable.setStatus('current')
ethernetModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 8, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: ethernetModemEntry.setStatus('current')
ethernetModemTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetModemTcpAliveCheck.setStatus('current')
ethernetModemLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetModemLocalTcpPort.setStatus('current')
reverseTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9))
reverseTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9, 1), )
if mibBuilder.loadTexts: reverseTerminalTable.setStatus('current')
reverseTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: reverseTerminalEntry.setStatus('current')
reverseTerminalTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalTcpAliveCheck.setStatus('current')
reverseTerminalInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalInactivityTime.setStatus('current')
reverseTerminalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalTcpPort.setStatus('current')
reverseTerminalAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalAuthenticationType.setStatus('current')
reverseTerminalMapKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cr-lf", 0), ("cr", 1), ("lf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalMapKeys.setStatus('current')
dataPacking = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3))
dataPackingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1), )
if mibBuilder.loadTexts: dataPackingPortTable.setStatus('current')
dataPackingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: dataPackingPortEntry.setStatus('current')
portPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketLength.setStatus('current')
portDelimiter1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter1Enable.setStatus('current')
portDelimiter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter1.setStatus('current')
portDelimiter2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter2Enable.setStatus('current')
portDelimiter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter2.setStatus('current')
portDelimiterProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("doNothing", 1), ("delimiterAddOne", 2), ("delimiterAddTwo", 4), ("stripDelimiter", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiterProcess.setStatus('current')
portForceTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForceTransmit.setStatus('current')
comParamSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2))
comParamPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1), )
if mibBuilder.loadTexts: comParamPortTable.setStatus('current')
comParamPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: comParamPortEntry.setStatus('current')
portAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAlias.setStatus('current')
portInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rs-232", 0), ("rs-422", 1), ("rs-485-2wire", 2), ("rs-485-4wire", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInterface.setStatus('current')
portBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("b50", 0), ("b75", 1), ("b110", 2), ("b134", 3), ("b150", 4), ("b300", 5), ("b600", 6), ("b1200", 7), ("b1800", 8), ("b2400", 9), ("b4800", 10), ("b9600", 12), ("b19200", 13), ("b38400", 14), ("b57600", 15), ("b115200", 16), ("b230400", 17), ("b460800", 18), ("b921600", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaudRate.setStatus('current')
portDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("bits-5", 0), ("bits-6", 1), ("bits-7", 2), ("bits-8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataBits.setStatus('current')
portStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bits-1", 0), ("bits-1dot5", 1), ("bits-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopBits.setStatus('current')
portParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5, 7))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 3), ("mark", 5), ("space", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('current')
portFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("rts-cts", 1), ("xon-xoff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowControl.setStatus('current')
portFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFIFO.setStatus('current')
dataBuffering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 3))
dataBufferingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 3, 1), )
if mibBuilder.loadTexts: dataBufferingPortTable.setStatus('current')
dataBufferingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 3, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: dataBufferingPortEntry.setStatus('current')
portBufferingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBufferingEnable.setStatus('current')
portSerialDataLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSerialDataLoggingEnable.setStatus('current')
sysManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5))
miscNetworkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1))
accessibleIp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1))
enableAccessibleIpList = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAccessibleIpList.setStatus('current')
accessibleIpListTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1, 2), )
if mibBuilder.loadTexts: accessibleIpListTable.setStatus('current')
accessibleIpListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1, 2, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "accessibleIpListIndex"))
if mibBuilder.loadTexts: accessibleIpListEntry.setStatus('current')
accessibleIpListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessibleIpListIndex.setStatus('current')
activeAccessibleIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAccessibleIpList.setStatus('current')
accessibleIpListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessibleIpListAddress.setStatus('current')
accessibleIpListNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessibleIpListNetmask.setStatus('current')
snmpAgentSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 2))
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
snmpContactName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpContactName.setStatus('current')
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setStatus('current')
authenticationServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 4))
radiusServerIp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerIp.setStatus('current')
udpPortAuthenticationServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1645, 1812))).clone(namedValues=NamedValues(("port1645", 1645), ("port1812", 1812)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpPortAuthenticationServer.setStatus('current')
radiusAccounting = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccounting.setStatus('current')
sysLogSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 5))
sysLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalLog.setStatus('current')
networkLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLocalLog.setStatus('current')
configLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configLocalLog.setStatus('current')
opModeLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opModeLocalLog.setStatus('current')
autoWarningSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2))
eventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1))
mailWarningColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningColdStart.setStatus('current')
mailWarningWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningWarmStart.setStatus('current')
mailWarningAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningAuthFailure.setStatus('current')
mailWarningIpChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningIpChanged.setStatus('current')
mailWarningPasswordChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningPasswordChanged.setStatus('current')
trapServerColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerColdStart.setStatus('current')
trapServerWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerWarmStart.setStatus('current')
trapServerAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerAuthFailure.setStatus('current')
serialEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 2))
portEventSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 2, 1), )
if mibBuilder.loadTexts: portEventSettingsTable.setStatus('current')
portEventSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 2, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: portEventSettingsEntry.setStatus('current')
mailDCDchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailDCDchange.setStatus('current')
trapDCDchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDCDchange.setStatus('current')
mailDSRchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailDSRchange.setStatus('current')
trapDSRchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDSRchange.setStatus('current')
emailAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3))
emailWarningMailServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningMailServer.setStatus('current')
emailRequiresAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-require", 0), ("require", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailRequiresAuthentication.setStatus('current')
emailWarningUserName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningUserName.setStatus('current')
emailWarningFromEmail = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFromEmail.setStatus('current')
emailWarningFirstEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setStatus('current')
emailWarningSecondEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setStatus('current')
emailWarningThirdEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setStatus('current')
emailWarningFourthEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setStatus('current')
snmpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 4))
snmpTrapReceiverIp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapReceiverIp.setStatus('current')
trapVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3))
consoleSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 1))
httpConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpConsole.setStatus('current')
httpsConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsConsole.setStatus('current')
telnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetConsole.setStatus('current')
sshConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConsole.setStatus('current')
serialConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialConsole.setStatus('current')
resetButton = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("Disable_after_60_sec", 0), ("Always_enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetButton.setStatus('current')
loadFactoryDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 2))
loadFactoryDefaultSetting = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resetToFactoryDefault-ExcludingIpConfiguration", 0), ("resetToFactoryDefault", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: loadFactoryDefaultSetting.setStatus('current')
sysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6))
s2eConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 1))
monitorRemoteIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 1, 1), )
if mibBuilder.loadTexts: monitorRemoteIpTable.setStatus('current')
monitorRemoteIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 1, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"), (0, "MOXA-W2x50A-MIB", "remoteIpIndex"))
if mibBuilder.loadTexts: monitorRemoteIpEntry.setStatus('current')
remoteIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIpIndex.setStatus('current')
monitorRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRemoteIp.setStatus('current')
serialPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2))
monitorSerialPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1), )
if mibBuilder.loadTexts: monitorSerialPortStatusTable.setStatus('current')
monitorSerialPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortStatusEntry.setStatus('current')
monitorTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxCount.setStatus('current')
monitorRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxCount.setStatus('current')
monitorTxTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxTotalCount.setStatus('current')
monitorRxTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxTotalCount.setStatus('current')
monitorDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDSR.setStatus('current')
monitorDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDTR.setStatus('current')
monitorRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTS.setStatus('current')
monitorCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorCTS.setStatus('current')
monitorDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDCD.setStatus('current')
serialPortErrorCount = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 3))
monitorSerialPortErrorCountTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 3, 1), )
if mibBuilder.loadTexts: monitorSerialPortErrorCountTable.setStatus('current')
monitorSerialPortErrorCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 3, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortErrorCountEntry.setStatus('current')
monitorErrorCountFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountFrame.setStatus('current')
monitorErrorCountParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountParity.setStatus('current')
monitorErrorCountOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountOverrun.setStatus('current')
monitorErrorCountBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountBreak.setStatus('current')
serialPortSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4))
monitorSerialPortSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1), )
if mibBuilder.loadTexts: monitorSerialPortSettingsTable.setStatus('current')
monitorSerialPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortSettingsEntry.setStatus('current')
monitorBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorBaudRate.setStatus('current')
monitorDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("bits-5", 5), ("bits-6", 6), ("bits-7", 7), ("bits-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDataBits.setStatus('current')
monitorStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorStopBits.setStatus('current')
monitorParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 24, 40, 56))).clone(namedValues=NamedValues(("none", 0), ("odd", 8), ("even", 24), ("mark", 40), ("space", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorParity.setStatus('current')
monitorRTSCTSFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTSCTSFlowControl.setStatus('current')
monitorXONXOFFFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorXONXOFFFlowControl.setStatus('current')
monitorFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFIFO.setStatus('current')
monitorInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rs-232", 0), ("rs-422", 1), ("rs-485-2-wire", 2), ("rs-485-4-wire", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorInterface.setStatus('current')
serialPortBuffering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 5))
monitorSerialPortBufferingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 5, 1), )
if mibBuilder.loadTexts: monitorSerialPortBufferingTable.setStatus('current')
monitorSerialPortBufferingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 5, 1, 1), ).setIndexNames((0, "MOXA-W2x50A-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortBufferingEntry.setStatus('current')
monitorBuffering = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorBuffering.setStatus('current')
sysWlanStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6))
wlanStatusActiveProfileName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusActiveProfileName.setStatus('current')
wlanStatusIpConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("bootp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusIpConfiguration.setStatus('current')
wlanStatusIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusIpAddress.setStatus('current')
wlanStatusNetMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusNetMask.setStatus('current')
wlanStatusDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusDefaultGateway.setStatus('current')
wlanStatusNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusNetworkType.setStatus('current')
wlanStatusRFType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusRFType.setStatus('current')
wlanStatusSSID = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusSSID.setStatus('current')
wlanStatusChannel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusChannel.setStatus('current')
wlanStatusAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusAuthentication.setStatus('current')
wlanStatusEncryption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusEncryption.setStatus('current')
wlanStatusRegion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusRegion.setStatus('current')
wlanStatusSignalStrength = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusSignalStrength.setStatus('current')
wlanStatusConnectionSpeed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusConnectionSpeed.setStatus('current')
wlanStatusCurrentBSSID = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 6, 6, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatusCurrentBSSID.setStatus('current')
activateSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 7))
doActivate = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: doActivate.setStatus('current')
restart = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 8))
restartPorts = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port1", 0), ("port2", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartPorts.setStatus('current')
restartSystem = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 13, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartSystem.setStatus('current')
mibBuilder.exportSymbols("MOXA-W2x50A-MIB", rfc2217TcpAliveCheck=rfc2217TcpAliveCheck, tcpServerMaxConnection=tcpServerMaxConnection, wlanStatusRFType=wlanStatusRFType, comParamPortEntry=comParamPortEntry, monitorRemoteIpEntry=monitorRemoteIpEntry, consoleSettings=consoleSettings, trapServerWarmStart=trapServerWarmStart, udpDestinationPort1=udpDestinationPort1, serialPortErrorCount=serialPortErrorCount, reverseTerminalMapKeys=reverseTerminalMapKeys, tcpClientDesignatedLocalPort4=tcpClientDesignatedLocalPort4, gratuitousArpIpAddress3=gratuitousArpIpAddress3, snmpAgentSettings=snmpAgentSettings, userPrivateKey=userPrivateKey, opModePortEntry=opModePortEntry, udp=udp, tcpServerConnectionDownRTS=tcpServerConnectionDownRTS, tcpServerTable=tcpServerTable, portBaudRate=portBaudRate, userCert=userCert, monitorBaudRate=monitorBaudRate, realCOMTable=realCOMTable, emailWarningThirdEmailAddr=emailWarningThirdEmailAddr, ethIPAddress=ethIPAddress, udpTable=udpTable, monitorXONXOFFFlowControl=monitorXONXOFFFlowControl, monitorDCD=monitorDCD, serverSetting=serverSetting, serialPort1=serialPort1, snmpTrap=snmpTrap, reverseTerminalAuthenticationType=reverseTerminalAuthenticationType, trapDSRchange=trapDSRchange, pairConnectionMasterDestnationTcpPort=pairConnectionMasterDestnationTcpPort, tcpClientDesignatedLocalPort1=tcpClientDesignatedLocalPort1, profileWlanSSID=profileWlanSSID, profileRFType=profileRFType, wlanIPAddress=wlanIPAddress, monitorDataBits=monitorDataBits, ethernetSetting=ethernetSetting, dataPacking=dataPacking, infraGeneralSetting=infraGeneralSetting, ethNetMask=ethNetMask, portMode=portMode, PortList=PortList, wlanRFType=wlanRFType, trapServerColdStart=trapServerColdStart, accessibleIpListTable=accessibleIpListTable, wlanStatusConnectionSpeed=wlanStatusConnectionSpeed, ethBridgeMode=ethBridgeMode, trustedServerCert=trustedServerCert, emailWarningFourthEmailAddr=emailWarningFourthEmailAddr, emailWarningUserName=emailWarningUserName, restart=restart, wpaAnonymousUsername=wpaAnonymousUsername, networkLocalLog=networkLocalLog, serialNumber=serialNumber, w2x50A=w2x50A, generalSetting=generalSetting, timeSetting=timeSetting, udpDestinationAddress3End=udpDestinationAddress3End, portIndex=portIndex, wlanStatusIpConfiguration=wlanStatusIpConfiguration, adhocWepKeyFormat=adhocWepKeyFormat, portFIFO=portFIFO, overview=overview, udpDestinationAddress4Begin=udpDestinationAddress4Begin, portStopBits=portStopBits, trapVersion=trapVersion, reverseTerminalInactivityTime=reverseTerminalInactivityTime, portForceTransmit=portForceTransmit, pairConnectionSlaveLocalTcpPort=pairConnectionSlaveLocalTcpPort, monitorErrorCountParity=monitorErrorCountParity, sysManagement=sysManagement, wlanStatusCurrentBSSID=wlanStatusCurrentBSSID, mailDSRchange=mailDSRchange, radiusAccounting=radiusAccounting, monitorErrorCountBreak=monitorErrorCountBreak, adhocChannel=adhocChannel, tcpClientInactivityTime=tcpClientInactivityTime, monitorFIFO=monitorFIFO, mailWarningPasswordChanged=mailWarningPasswordChanged, loadFactoryDefaultSetting=loadFactoryDefaultSetting, snmpLocation=snmpLocation, tcpClientDesignatedLocalPort2=tcpClientDesignatedLocalPort2, pairConnectionMasterTable=pairConnectionMasterTable, snmpTrapReceiverIp=snmpTrapReceiverIp, serialPortSettings=serialPortSettings, tcpClientDestinationPort2=tcpClientDestinationPort2, mailWarningColdStart=mailWarningColdStart, firmwareVersion=firmwareVersion, tcpClientDestinationAddress2=tcpClientDestinationAddress2, monitorInterface=monitorInterface, activeAccessibleIpList=activeAccessibleIpList, adhocWepKeyLength=adhocWepKeyLength, basicSetting=basicSetting, wlanStatusSSID=wlanStatusSSID, wlanStatusIpAddress=wlanStatusIpAddress, wlanLogEnable=wlanLogEnable, tcpClientDestinationAddress3=tcpClientDestinationAddress3, adhocEncryption=adhocEncryption, profileName=profileName, gratuitousArpMacAddress1=gratuitousArpMacAddress1, tcpServerAllowDriverControl=tcpServerAllowDriverControl, realCOMConnectionDownRTS=realCOMConnectionDownRTS, monitorDTR=monitorDTR, emailWarningSecondEmailAddr=emailWarningSecondEmailAddr, securitySettingTable=securitySettingTable, monitorErrorCountOverrun=monitorErrorCountOverrun, monitorErrorCountFrame=monitorErrorCountFrame, tcpClientTable=tcpClientTable, gratuitousArpIpAddress1=gratuitousArpIpAddress1, httpConsole=httpConsole, realCOMTcpAliveCheck=realCOMTcpAliveCheck, mailWarningIpChanged=mailWarningIpChanged, realCOMIgnoreJammedIp=realCOMIgnoreJammedIp, portDelimiter2Enable=portDelimiter2Enable, monitorSerialPortSettingsTable=monitorSerialPortSettingsTable, ethIpConfiguration=ethIpConfiguration, udpDestinationAddress1Begin=udpDestinationAddress1Begin, portSetting=portSetting, monitorSerialPortStatusTable=monitorSerialPortStatusTable, emailWarningMailServer=emailWarningMailServer, pairConnectionSlaveTcpAliveCheck=pairConnectionSlaveTcpAliveCheck, gratuitousArpMacAddress4=gratuitousArpMacAddress4, portPacketLength=portPacketLength, fastRoamingScanChannels3=fastRoamingScanChannels3, wlanStatusSignalStrength=wlanStatusSignalStrength, serverLocation=serverLocation, tcpServerIgnoreJammedIp=tcpServerIgnoreJammedIp, wlanStatusDefaultGateway=wlanStatusDefaultGateway, opModeParam=opModeParam, dnsServer2IpAddr=dnsServer2IpAddr, adhocRFType=adhocRFType, telnetConsole=telnetConsole, wlanStatusNetMask=wlanStatusNetMask, monitorTxTotalCount=monitorTxTotalCount, udpDestinationPort2=udpDestinationPort2, profileSetting=profileSetting, wlanStatusAuthentication=wlanStatusAuthentication, encryption=encryption, restartSystem=restartSystem, serialEventSettings=serialEventSettings, ethernetModemLocalTcpPort=ethernetModemLocalTcpPort, doActivate=doActivate, portDelimiter1=portDelimiter1, infraGeneralSettingEntry=infraGeneralSettingEntry, monitorDSR=monitorDSR, udpLocalListenPort=udpLocalListenPort, adhocWepKeyPassphrase=adhocWepKeyPassphrase, pairConnectionSlaveEntry=pairConnectionSlaveEntry, snmpEnable=snmpEnable, sysWlanStatus=sysWlanStatus, udpDestinationAddress2End=udpDestinationAddress2End, tcpClientIgnoreJammedIp=tcpClientIgnoreJammedIp, wepKeyLength=wepKeyLength, rfc2217=rfc2217, opModeSetting=opModeSetting, networkSetting=networkSetting, dnsServer1IpAddr=dnsServer1IpAddr, serverName=serverName, opModePortTable=opModePortTable, portAlias=portAlias, portEventSettingsEntry=portEventSettingsEntry, monitorRxCount=monitorRxCount, portDataBits=portDataBits, ethernetModemEntry=ethernetModemEntry, timeServer=timeServer, monitorSerialPortBufferingTable=monitorSerialPortBufferingTable, tcpServerCmdPort=tcpServerCmdPort, tcpClientDestinationAddress1=tcpClientDestinationAddress1, opMode=opMode, tcpClientDestinationAddress4=tcpClientDestinationAddress4, wlanNetMask=wlanNetMask, wlanStatusEncryption=wlanStatusEncryption, monitorStopBits=monitorStopBits, gratuitousArpMacAddress3=gratuitousArpMacAddress3, pairConnectionSlaveTable=pairConnectionSlaveTable, tcpClientEntry=tcpClientEntry, udpDestinationPort3=udpDestinationPort3, portSerialDataLoggingEnable=portSerialDataLoggingEnable, httpsConsole=httpsConsole, ethernetModemTcpAliveCheck=ethernetModemTcpAliveCheck, adhocWlanSSID=adhocWlanSSID, monitorSerialPortErrorCountTable=monitorSerialPortErrorCountTable, monitorParity=monitorParity, adhocAuthentication=adhocAuthentication, wlanStatusNetworkType=wlanStatusNetworkType, eapMethod=eapMethod, eventSettings=eventSettings, fastRoamingDifference=fastRoamingDifference, udpPortAuthenticationServer=udpPortAuthenticationServer, wlanMacAddress=wlanMacAddress, tcpClientDestinationPort3=tcpClientDestinationPort3, monitorCTS=monitorCTS, wlanSetting=wlanSetting, monitorRxTotalCount=monitorRxTotalCount, monitorSerialPortErrorCountEntry=monitorSerialPortErrorCountEntry, rfc2217Entry=rfc2217Entry, reverseTerminal=reverseTerminal, dataPackingPortTable=dataPackingPortTable, accessibleIpListAddress=accessibleIpListAddress, reverseTerminalTcpAliveCheck=reverseTerminalTcpAliveCheck, tcpServer=tcpServer, trapDCDchange=trapDCDchange, reverseTerminalEntry=reverseTerminalEntry, realCOMMaxConnection=realCOMMaxConnection, mailWarningAuthFailure=mailWarningAuthFailure, realCOMEntry=realCOMEntry, authentication=authentication, timeZone=timeZone, monitorSerialPortBufferingEntry=monitorSerialPortBufferingEntry, s2eConnections=s2eConnections, moxa=moxa, autoWarningSettings=autoWarningSettings, ethDefaultGateway=ethDefaultGateway, ethMacAddress=ethMacAddress, miscNetworkSettings=miscNetworkSettings, securitySetting=securitySetting, adhocSecuritySetting=adhocSecuritySetting, tcpClientTcpAliveCheck=tcpClientTcpAliveCheck, monitorTxCount=monitorTxCount, sysLocalLog=sysLocalLog, monitorRemoteIp=monitorRemoteIp, verifyServerCert=verifyServerCert, infraGeneralSettingTable=infraGeneralSettingTable, serialPortStatus=serialPortStatus, portBufferingEnable=portBufferingEnable, dataBufferingPortTable=dataBufferingPortTable, portDelimiter1Enable=portDelimiter1Enable, portDelimiter2=portDelimiter2, wlanIpAddress=wlanIpAddress, realCOM=realCOM, monitorRemoteIpTable=monitorRemoteIpTable, wlanSecurityMode=wlanSecurityMode, swMgmt=swMgmt, emailWarningFirstEmailAddr=emailWarningFirstEmailAddr, accessibleIpListEntry=accessibleIpListEntry, adhocProfile=adhocProfile, reverseTerminalTable=reverseTerminalTable, gratuitousArpIpAddress4=gratuitousArpIpAddress4, accessibleIp=accessibleIp, portFlowControl=portFlowControl, maintenance=maintenance, resetButton=resetButton, pairConnectionSlave=pairConnectionSlave, realCOMConnectionDownDTR=realCOMConnectionDownDTR, monitorSerialPortSettingsEntry=monitorSerialPortSettingsEntry, serialPort2=serialPort2, udpDestinationAddress3Begin=udpDestinationAddress3Begin, enableAccessibleIpList=enableAccessibleIpList, udpDestinationAddress4End=udpDestinationAddress4End, tcpServerInactivityTime=tcpServerInactivityTime, wlanCountryCode=wlanCountryCode, dataPackingPortEntry=dataPackingPortEntry)
mibBuilder.exportSymbols("MOXA-W2x50A-MIB", serialPortBuffering=serialPortBuffering, accessibleIpListIndex=accessibleIpListIndex, trapServerAuthFailure=trapServerAuthFailure, localTime=localTime, fastRoamingSetting=fastRoamingSetting, radiusServerIp=radiusServerIp, rfc2217Table=rfc2217Table, tcpClientDestinationPort1=tcpClientDestinationPort1, udpDestinationPort4=udpDestinationPort4, upTime=upTime, wlanNetworkType=wlanNetworkType, gratuitousArp=gratuitousArp, tcpServerTcpPort=tcpServerTcpPort, portParity=portParity, monitorBuffering=monitorBuffering, authenticationServer=authenticationServer, fastRoamingThreshold=fastRoamingThreshold, gratuitousArpIpAddress2=gratuitousArpIpAddress2, wepKeyFormat=wepKeyFormat, advancedSetting=advancedSetting, wepKeyPassphrase=wepKeyPassphrase, activateSettings=activateSettings, tcpServerEntry=tcpServerEntry, securitySettingEntry=securitySettingEntry, nport=nport, sshConsole=sshConsole, tunneledAuth=tunneledAuth, activeNetworkPort=activeNetworkPort, reverseTerminalTcpPort=reverseTerminalTcpPort, realCOMAllowDriverControl=realCOMAllowDriverControl, wlanDefaultGateway=wlanDefaultGateway, pairConnectionMaster=pairConnectionMaster, tcpServerTcpAliveCheck=tcpServerTcpAliveCheck, gratuitousArpSendPeriod=gratuitousArpSendPeriod, remoteIpIndex=remoteIpIndex, wlanLogSetting=wlanLogSetting, loadFactoryDefault=loadFactoryDefault, mailWarningWarmStart=mailWarningWarmStart, infrastructureProfile=infrastructureProfile, tcpClient=tcpClient, emailWarningFromEmail=emailWarningFromEmail, wlanStatusRegion=wlanStatusRegion, comParamSetting=comParamSetting, monitorRTSCTSFlowControl=monitorRTSCTSFlowControl, sysLogSettings=sysLogSettings, accessibleIpListNetmask=accessibleIpListNetmask, adhocProfileName=adhocProfileName, modelName=modelName, dataBufferingPortEntry=dataBufferingPortEntry, monitorSerialPortStatusEntry=monitorSerialPortStatusEntry, tcpClientDestinationPort4=tcpClientDestinationPort4, gratuitousArpMacAddress2=gratuitousArpMacAddress2, serialConsole=serialConsole, udpDestinationAddress1End=udpDestinationAddress1End, pairConnectionMasterDestnationAddress=pairConnectionMasterDestnationAddress, fastRoamingScanChannels1=fastRoamingScanChannels1, configLocalLog=configLocalLog, sysStatus=sysStatus, restartPorts=restartPorts, pairConnectionMasterTcpAliveCheck=pairConnectionMasterTcpAliveCheck, wlanStatusActiveProfileName=wlanStatusActiveProfileName, wlanIpConfiguration=wlanIpConfiguration, wpaUsername=wpaUsername, rfc2217TcpPort=rfc2217TcpPort, ethernetModemTable=ethernetModemTable, portDelimiterProcess=portDelimiterProcess, portInterface=portInterface, emailAlert=emailAlert, wlanFastRoaming=wlanFastRoaming, udpDestinationAddress2Begin=udpDestinationAddress2Begin, networkType=networkType, monitorRTS=monitorRTS, dataBuffering=dataBuffering, ethIpAddress=ethIpAddress, comParamPortTable=comParamPortTable, udpEntry=udpEntry, ethernetModem=ethernetModem, adhocGeneralSetting=adhocGeneralSetting, portEventSettingsTable=portEventSettingsTable, snmpContactName=snmpContactName, mailDCDchange=mailDCDchange, tcpClientConnectionControl=tcpClientConnectionControl, profileIndex=profileIndex, pairConnectionMasterEntry=pairConnectionMasterEntry, wepKeyIndex=wepKeyIndex, PYSNMP_MODULE_ID=w2x50A, emailRequiresAuthentication=emailRequiresAuthentication, wlanStatusChannel=wlanStatusChannel, tcpClientDesignatedLocalPort3=tcpClientDesignatedLocalPort3, tcpServerConnectionDownDTR=tcpServerConnectionDownDTR, wlanSSID=wlanSSID, opModeLocalLog=opModeLocalLog, fastRoamingScanChannels2=fastRoamingScanChannels2, adhocWepKeyIndex=adhocWepKeyIndex)
