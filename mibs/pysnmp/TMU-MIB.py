#
# PySNMP MIB module TMU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TMU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:16:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, internet, iso, IpAddress, Unsigned32, MibIdentifier, NotificationType, Bits, Counter64, ModuleIdentity, mgmt, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "internet", "iso", "IpAddress", "Unsigned32", "MibIdentifier", "NotificationType", "Bits", "Counter64", "ModuleIdentity", "mgmt", "ObjectIdentity")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
mgmt = MibIdentifier((1, 3, 6, 1, 2))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
tmu = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60))
tmuSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 1))
tmuIntrfc = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 2))
tmuMatch = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 3))
tmuStations = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 4))
tmuPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 5))
tmuProduction = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 6))
tmuSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 7))
tmuFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 8))
fibTmuFunctRtpGrpVrsRun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 8, 1))
fibTmuFunctRtpGrpVrsPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 60, 8, 2))
fibTmuNumEventErrs = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumEventErrs.setStatus('mandatory')
fibTmuArpAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuArpAgeTime.setStatus('mandatory')
fibTmuNumRarpUpdate = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRarpUpdate.setStatus('mandatory')
fibTmuMainSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMainSwVersion.setStatus('mandatory')
fibTmuEepromVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuEepromVersion.setStatus('mandatory')
fibTmuEepromDeffective = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuEepromDeffective.setStatus('mandatory')
fibTmuLastSysIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuLastSysIfIndex.setStatus('mandatory')
fibTmuTrDrvVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuTrDrvVersion.setStatus('mandatory')
fibTmuSccDrvVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuSccDrvVersion.setStatus('mandatory')
fibTmuSnmpUsrVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuSnmpUsrVersion.setStatus('mandatory')
fibTmuDisplayDebugMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular-mode", 1), ("special-debug-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuDisplayDebugMode.setStatus('mandatory')
fibTmuEeFaultsFormat = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-mode", 1), ("concise-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuEeFaultsFormat.setStatus('mandatory')
fibTmuRunFaultsFormat = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-mode", 1), ("concise-mode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuRunFaultsFormat.setStatus('mandatory')
fibTmuFunctionalityVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctionalityVersion.setStatus('mandatory')
fibTmuUtilitiesVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuUtilitiesVersion.setStatus('mandatory')
fibTmuWrapIn = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-wrap", 1), ("wrap-set-by-manager", 2), ("wrap-set-by-Tmu", 3), ("wrap-set-by-both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuWrapIn.setStatus('mandatory')
fibTmuWrapOut = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-wrap", 1), ("wrap-set-by-manager", 2), ("wrap-set-by-Tmu", 3), ("wrap-set-by-both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuWrapOut.setStatus('mandatory')
fibTmuLoadEeDefaults = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-load-default", 1), ("load-defaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuLoadEeDefaults.setStatus('mandatory')
fibTmuDontResetFatal = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset-fatal", 1), ("dont-reset-fatal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuDontResetFatal.setStatus('mandatory')
fibTmuRIConnection = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuRIConnection.setStatus('mandatory')
fibTmuROConnection = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuROConnection.setStatus('mandatory')
fibTmuRealTimeClock = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(23, 23)).setFixedLength(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuRealTimeClock.setStatus('mandatory')
fibTmuIntrfcTable = MibTable((1, 3, 6, 1, 4, 1, 22, 60, 2, 1), )
if mibBuilder.loadTexts: fibTmuIntrfcTable.setStatus('mandatory')
fibTmuIntrfcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1), ).setIndexNames((0, "TMU-MIB", "fibTmuIntrfcIndex"))
if mibBuilder.loadTexts: fibTmuIntrfcEntry.setStatus('mandatory')
fibTmuIntrfcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuIntrfcIndex.setStatus('mandatory')
fibTmuNumRarpRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRarpRcvd.setStatus('mandatory')
fibTmuNumRxRjctMem = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRxRjctMem.setStatus('mandatory')
fibTmuNumRxAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRxAccepted.setStatus('mandatory')
fibTmuNumRxBdcst = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRxBdcst.setStatus('mandatory')
fibTmuNumRxSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRxSpecific.setStatus('mandatory')
fibTmuNumRifIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRifIncluded.setStatus('mandatory')
fibTmuNumNoRif = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumNoRif.setStatus('mandatory')
fibTmuNumNonSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumNonSnap.setStatus('mandatory')
fibTmuNumUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumUnknownType.setStatus('mandatory')
fibTmuNumRifLong = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRifLong.setStatus('mandatory')
fibTmuNumRrpRjctIp = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRrpRjctIp.setStatus('mandatory')
fibTmuNumArpRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumArpRcvd.setStatus('mandatory')
fibTmuNumIpRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumIpRcvd.setStatus('mandatory')
fibTmuNumIfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumIfDown.setStatus('mandatory')
fibTmuNumOwnBrdcst = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumOwnBrdcst.setStatus('mandatory')
fibTmuAc00Cntr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuAc00Cntr.setStatus('mandatory')
fibTmuAc01Cntr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuAc01Cntr.setStatus('mandatory')
fibTmuAc10Cntr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuAc10Cntr.setStatus('mandatory')
fibTmuAc11Cntr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuAc11Cntr.setStatus('mandatory')
fibTmuParityEc = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuParityEc.setStatus('mandatory')
fibTmuFrameEc = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFrameEc.setStatus('mandatory')
fibTmuRxNoiseEc = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuRxNoiseEc.setStatus('mandatory')
fibTmuBreakEc = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuBreakEc.setStatus('mandatory')
fibTmuNumConfigNotValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumConfigNotValid.setStatus('mandatory')
fibTmuNumAddrNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumAddrNotFound.setStatus('mandatory')
fibTmuNumProcessDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumProcessDisabled.setStatus('mandatory')
fibTmuNumBeaconsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumBeaconsRcvd.setStatus('mandatory')
fibTmuLastBeaconTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuLastBeaconTime.setStatus('mandatory')
fibTmuLastBeaconType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuLastBeaconType.setStatus('mandatory')
fibTmuLastBeaconAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuLastBeaconAddr.setStatus('mandatory')
fibTmuLastBeaconNaun = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 32), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuLastBeaconNaun.setStatus('mandatory')
fibTmuNumRxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRxGroup.setStatus('mandatory')
fibTmuNumRxFunctional = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumRxFunctional.setStatus('mandatory')
fibTmuMatchUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchUpdateTime.setStatus('mandatory')
fibTmuMatchNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchNumEntries.setStatus('mandatory')
fibTmuMatchNumTmuEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchNumTmuEntries.setStatus('mandatory')
fibTmuMatchFirstChipIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchFirstChipIndex.setStatus('mandatory')
fibTmuMatchSecondChipIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchSecondChipIndex.setStatus('mandatory')
fibTmuMatchActMonIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchActMonIndex.setStatus('mandatory')
fibTmuMatchConfigChipIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchConfigChipIndex.setStatus('mandatory')
fibTmuMatchListValid = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, -1))).clone(namedValues=NamedValues(("valid", 2), ("not-valid", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchListValid.setStatus('mandatory')
fibTmuMatchUpToDate = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("up-to-date", 2), ("not-up-to-date", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchUpToDate.setStatus('mandatory')
fibTmuMatchNoMatchReason = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("empty-reason", 1), ("malloc-fail", 2), ("segment-unstable", 3), ("no-chip-on-list", 4), ("inconsistency", 5), ("soft-01", 6), ("soft-02", 7), ("first-not-found", 8), ("second-not-found", 9), ("found-twice", 10), ("soft-03", 11), ("ports-gt-stations", 12), ("stations-gt-ports", 13), ("no-tr-list", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchNoMatchReason.setStatus('mandatory')
fibTmuMatchTable = MibTable((1, 3, 6, 1, 4, 1, 22, 60, 3, 20), )
if mibBuilder.loadTexts: fibTmuMatchTable.setStatus('mandatory')
fibTmuMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 60, 3, 20, 1), ).setIndexNames((0, "TMU-MIB", "fibTmuMatchIndex"))
if mibBuilder.loadTexts: fibTmuMatchEntry.setStatus('mandatory')
fibTmuMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 3, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchIndex.setStatus('mandatory')
fibTmuMatchTauId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 3, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchTauId.setStatus('mandatory')
fibTmuMatchPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 3, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchPortId.setStatus('mandatory')
fibTmuMatchPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 3, 20, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchPhysAddr.setStatus('mandatory')
fibTmuMatchStationInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 3, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchStationInfo.setStatus('mandatory')
fibTmuStationsUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsUpdateTime.setStatus('mandatory')
fibTmuStationsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsNumEntries.setStatus('mandatory')
fibTmuStationsNumTmuEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsNumTmuEntries.setStatus('mandatory')
fibTmuStationsFirstChipIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsFirstChipIndex.setStatus('mandatory')
fibTmuStationsSecondChipIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsSecondChipIndex.setStatus('mandatory')
fibTmuStationsActMonIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsActMonIndex.setStatus('mandatory')
fibTmuStationsConfigChipIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsConfigChipIndex.setStatus('mandatory')
fibTmuStationsStationsListValid = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, -1))).clone(namedValues=NamedValues(("valid", 2), ("not-valid", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsStationsListValid.setStatus('mandatory')
fibTmuStationsUpToDate = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("up-to-date", 2), ("not-up-to-date", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsUpToDate.setStatus('mandatory')
fibTmuMatchNoStationsListReason = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14))).clone(namedValues=NamedValues(("empty-reason", 1), ("malloc-fail", 2), ("segment-unstable", 3), ("no-chip-on-list", 4), ("inconsistency", 5), ("soft-01", 6), ("soft-02", 7), ("first-not-found", 8), ("second-not-found", 9), ("found-twice", 10), ("no-tr-list", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuMatchNoStationsListReason.setStatus('mandatory')
fibTmuStationsTable = MibTable((1, 3, 6, 1, 4, 1, 22, 60, 4, 20), )
if mibBuilder.loadTexts: fibTmuStationsTable.setStatus('mandatory')
fibTmuStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 60, 4, 20, 1), ).setIndexNames((0, "TMU-MIB", "fibTmuStationsIndex"))
if mibBuilder.loadTexts: fibTmuStationsEntry.setStatus('mandatory')
fibTmuStationsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 4, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsIndex.setStatus('mandatory')
fibTmuStationsPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 4, 20, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsPhysAddr.setStatus('mandatory')
fibTmuStationsStationInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 4, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuStationsStationInfo.setStatus('mandatory')
fibTmuPortsNumRelayOpen = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumRelayOpen.setStatus('mandatory')
fibTmuPortsNumPhantomPresent = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumPhantomPresent.setStatus('mandatory')
fibTmuPortsNumPortsPerTmu = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumPortsPerTmu.setStatus('mandatory')
fibTmuPortsNumTausPerTmu = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumTausPerTmu.setStatus('mandatory')
fibTmuPortsNumPortsPerTau = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumPortsPerTau.setStatus('mandatory')
fibTmuPortsMaxNumTauErrs = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsMaxNumTauErrs.setStatus('mandatory')
fibTmuPortsMaxFirstTimeout = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsMaxFirstTimeout.setStatus('mandatory')
fibTmuPortsTauTable = MibTable((1, 3, 6, 1, 4, 1, 22, 60, 5, 29), )
if mibBuilder.loadTexts: fibTmuPortsTauTable.setStatus('mandatory')
fibTmuPortsTauEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1), ).setIndexNames((0, "TMU-MIB", "fibTmuPortsTmuPort"))
if mibBuilder.loadTexts: fibTmuPortsTauEntry.setStatus('mandatory')
fibTmuPortsTmuPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsTmuPort.setStatus('mandatory')
fibTmuPortsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station-or-Tau", 1), ("station-only", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsPortType.setStatus('mandatory')
fibTmuPortsEndConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("tau-connected", 2), ("single-connected", 3), ("passive-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsEndConnection.setStatus('mandatory')
fibTmuPortsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsPortStatus.setStatus('mandatory')
fibTmuPortsManagerCloseRun = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsManagerCloseRun.setStatus('mandatory')
fibTmuPortsManagerClosePerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsManagerClosePerm.setStatus('mandatory')
fibTmuPortsNumConsequentErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumConsequentErrs.setStatus('mandatory')
fibTmuPortsNumTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumTimeout.setStatus('mandatory')
fibTmuPortsTauPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-connection", 1), ("waiting-to-open", 2), ("active-connection", 3), ("getting-config", 4), ("initializing", 5), ("pre-active", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsTauPortState.setStatus('mandatory')
fibTmuPortsNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumPorts.setStatus('mandatory')
fibTmuPortsNumAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumAttached.setStatus('mandatory')
fibTmuPortsNumPhantomUp = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumPhantomUp.setStatus('mandatory')
fibTmuPortsTauRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsTauRevision.setStatus('mandatory')
fibTmuPortsModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsModuleId.setStatus('mandatory')
fibTmuPortsNumModules = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsNumModules.setStatus('mandatory')
fibTmuPortsTauMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsTauMode.setStatus('mandatory')
fibTmuPortsLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("slow-rate", 1), ("fast-rate", 2), ("fixed-on", 3), ("fixed-off", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsLedState.setStatus('mandatory')
fibTmuPortsRequestType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 33, 49, 65, 81, 97, 113, 129, 145, 161))).clone(namedValues=NamedValues(("no-Tau-msg", 1), ("get-configuration-msg", 17), ("get-phantom-msg", 33), ("get-relay-msg", 49), ("attach-detach-msg", 65), ("set-beacon-msg", 81), ("set-active-msg", 97), ("get-all-msg", 113), ("get-changes-msg", 129), ("reset-Tau-msg", 145), ("self-test-Tau-msg", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsRequestType.setStatus('mandatory')
fibTmuPortsLastTxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsLastTxTime.setStatus('mandatory')
fibTmuPortsLastPollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsLastPollTime.setStatus('mandatory')
fibTmuPortsUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsUpdateTime.setStatus('mandatory')
fibTmuPortsAllowedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 25), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsAllowedAddr.setStatus('mandatory')
fibTmuPortsAllowedAddrLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 29, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("addr-not-loaded", 1), ("loaded-not-active", 2), ("loaded-and-active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsAllowedAddrLoaded.setStatus('mandatory')
fibTmuPortsAllTable = MibTable((1, 3, 6, 1, 4, 1, 22, 60, 5, 30), )
if mibBuilder.loadTexts: fibTmuPortsAllTable.setStatus('mandatory')
fibTmuPortsAllEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1), ).setIndexNames((0, "TMU-MIB", "fibTmuPortsTmuPortIndex"), (0, "TMU-MIB", "fibTmuPortsTauPortIndex"))
if mibBuilder.loadTexts: fibTmuPortsAllEntry.setStatus('mandatory')
fibTmuPortsTmuPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsTmuPortIndex.setStatus('mandatory')
fibTmuPortsTauPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsTauPortIndex.setStatus('mandatory')
fibTmuPortsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsPortState.setStatus('mandatory')
fibTmuPortsGenCloseRun = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsGenCloseRun.setStatus('mandatory')
fibTmuPortsGenClosePerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsGenClosePerm.setStatus('mandatory')
fibTmuPortsPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsPhysAddr.setStatus('mandatory')
fibTmuPortsStationInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuPortsStationInfo.setStatus('mandatory')
fibTmuPortsTauAllowedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsTauAllowedAddr.setStatus('mandatory')
fibTmuPortsTauAllowedAddrLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 60, 5, 30, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("addr-not-loaded", 1), ("loaded-not-active", 2), ("loaded-and-active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuPortsTauAllowedAddrLoaded.setStatus('mandatory')
fibTmuProductionAddr48No1 = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionAddr48No1.setStatus('mandatory')
fibTmuProductionAddr48No2 = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionAddr48No2.setStatus('mandatory')
fibTmuProductionAddr48No3 = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionAddr48No3.setStatus('mandatory')
fibTmuProductionRomType = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("rom-27c020", 2), ("rom-27c040", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionRomType.setStatus('mandatory')
fibTmuProductionRamType = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("ram-128k8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionRamType.setStatus('mandatory')
fibTmuProductionFlashType = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("flash-28f010", 2), ("flash-28f020", 3), ("flash-29f010", 4), ("flash-29f040", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionFlashType.setStatus('mandatory')
fibTmuProductionEepromType = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("with-page-mode", 2), ("without-page-mode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionEepromType.setStatus('mandatory')
fibTmuProductionSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionSerialNum.setStatus('mandatory')
fibTmuProductionRamSize = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionRamSize.setStatus('mandatory')
fibTmuProductionFlash0Size = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionFlash0Size.setStatus('mandatory')
fibTmuProductionFlash1Size = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionFlash1Size.setStatus('mandatory')
fibTmuProductionEepromSize = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionEepromSize.setStatus('mandatory')
fibTmuProductionHwInfo = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuProductionHwInfo.setStatus('mandatory')
fibTmuProductionBoardType = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("board-9230", 2), ("board-9230-16", 3), ("board-9230-32", 4), ("board-9230-16F", 5), ("board-9230-32F", 6), ("board-9232-16", 7), ("board-9232-32", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuProductionBoardType.setStatus('mandatory')
fibTmuSecurityModeRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuSecurityModeRun.setStatus('mandatory')
fibTmuSecurityModePerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuSecurityModePerm.setStatus('mandatory')
fibTmuNumStationSecurity = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumStationSecurity.setStatus('mandatory')
fibTmuNumStationLeft = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuNumStationLeft.setStatus('mandatory')
fibTmuFunctBeacon2AutotestRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctBeacon2AutotestRun.setStatus('mandatory')
fibTmuFunctBeacon2OkRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctBeacon2OkRun.setStatus('mandatory')
fibTmuFunctOk2BeaconRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1100, 2500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctOk2BeaconRun.setStatus('mandatory')
fibTmuFunctWrapCwtRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctWrapCwtRun.setStatus('mandatory')
fibTmuFunctWrapWnrRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wnr-dont-release-cpu", 1), ("wnr-release-cpu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctWrapWnrRun.setStatus('mandatory')
fibTmuFunctRingIstRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctRingIstRun.setStatus('mandatory')
fibTmuFunctRingIstnrRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("istnr-dont-release-cpu", 1), ("istnr-release-cpu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctRingIstnrRun.setStatus('mandatory')
fibTmuFunctCheckAogTauRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-check-ring", 1), ("check-ring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctCheckAogTauRun.setStatus('mandatory')
fibTmuFunctMaxNoiRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctMaxNoiRun.setStatus('mandatory')
fibTmuFunctLinkPtifRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-link-to-last", 1), ("link-to-last", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctLinkPtifRun.setStatus('mandatory')
fibTmuFunctInsPatRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctInsPatRun.setStatus('mandatory')
fibTmuFunctUseMismatchRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-use-mismatch", 1), ("use-mismatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctUseMismatchRun.setStatus('mandatory')
fibTmuFunctChkRingInsRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-check-ring", 1), ("check-ring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctChkRingInsRun.setStatus('mandatory')
fibTmuFunctChkRingPerRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctChkRingPerRun.setStatus('mandatory')
fibTmuFunctClaimTimeOutRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctClaimTimeOutRun.setStatus('mandatory')
fibTmuFunctAnotherCheckRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-another-check", 1), ("another-check", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctAnotherCheckRun.setStatus('mandatory')
fibTmuFunctTmsOnOutRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctTmsOnOutRun.setStatus('mandatory')
fibTmuFunctUseJitterRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-jitter-buster", 1), ("use-jitter-buster", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctUseJitterRun.setStatus('mandatory')
fibTmuFunctForceStpRiRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-force-ri-stp", 1), ("force-ri-stp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctForceStpRiRun.setStatus('mandatory')
fibTmuFunctForceStpRoRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-force-ro-stp", 1), ("force-ro-stp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctForceStpRoRun.setStatus('mandatory')
fibTmuFunctMaxSavRecRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctMaxSavRecRun.setStatus('mandatory')
fibTmuFunctReadPerRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctReadPerRun.setStatus('mandatory')
fibTmuFunctDmaThreshRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctDmaThreshRun.setStatus('mandatory')
fibTmuFunctRemWrapTypeRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctRemWrapTypeRun.setStatus('mandatory')
fibTmuFunctRemWrapLenRun = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibTmuFunctRemWrapLenRun.setStatus('mandatory')
fibTmuFunctBeacon2AutotestPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctBeacon2AutotestPerm.setStatus('mandatory')
fibTmuFunctBeacon2OkPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctBeacon2OkPerm.setStatus('mandatory')
fibTmuFunctOk2BeaconPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1100, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctOk2BeaconPerm.setStatus('mandatory')
fibTmuFunctWrapCwtPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctWrapCwtPerm.setStatus('mandatory')
fibTmuFunctWrapWnrPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-release-cpu", 1), ("release-cpu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctWrapWnrPerm.setStatus('mandatory')
fibTmuFunctRingIstPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctRingIstPerm.setStatus('mandatory')
fibTmuFunctRingIstnrPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("istnr-dont-release-cpu", 1), ("istnr-release-cpu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctRingIstnrPerm.setStatus('mandatory')
fibTmuFunctCheckAogTauPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-check-ring", 1), ("check-ring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctCheckAogTauPerm.setStatus('mandatory')
fibTmuFunctMaxNoiPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctMaxNoiPerm.setStatus('mandatory')
fibTmuFunctLinkPtifPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-link-to-last", 1), ("link-to-last", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctLinkPtifPerm.setStatus('mandatory')
fibTmuFunctInsPatPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctInsPatPerm.setStatus('mandatory')
fibTmuFunctUseMismatchPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-use-mismatch", 1), ("use-mismatch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctUseMismatchPerm.setStatus('mandatory')
fibTmuFunctChkRingInsPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-check-ring", 1), ("check-ring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctChkRingInsPerm.setStatus('mandatory')
fibTmuFunctChkRingPerPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctChkRingPerPerm.setStatus('mandatory')
fibTmuFunctClaimTimeOutPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctClaimTimeOutPerm.setStatus('mandatory')
fibTmuFunctAnotherCheckPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-another-check", 1), ("another-check", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctAnotherCheckPerm.setStatus('mandatory')
fibTmuFunctTmsOnOutPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctTmsOnOutPerm.setStatus('mandatory')
fibTmuFunctUseJitterPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-jitter-buster", 1), ("use-jitter-buster", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctUseJitterPerm.setStatus('mandatory')
fibTmuFunctForceStpRiPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-force-ri-stp", 1), ("force-ri-stp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctForceStpRiPerm.setStatus('mandatory')
fibTmuFunctForceStpRoPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-force-ro-stp", 1), ("force-ro-stp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctForceStpRoPerm.setStatus('mandatory')
fibTmuFunctMaxSavRecPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctMaxSavRecPerm.setStatus('mandatory')
fibTmuFunctReadPerPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctReadPerPerm.setStatus('mandatory')
fibTmuFunctDmaThreshPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctDmaThreshPerm.setStatus('mandatory')
fibTmuFunctRemWrapTypePerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctRemWrapTypePerm.setStatus('mandatory')
fibTmuFunctRemWrapLenPerm = MibScalar((1, 3, 6, 1, 4, 1, 22, 60, 8, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fibTmuFunctRemWrapLenPerm.setStatus('mandatory')
mibBuilder.exportSymbols("TMU-MIB", fibTmuPortsNumPortsPerTmu=fibTmuPortsNumPortsPerTmu, tmu=tmu, fibTmuArpAgeTime=fibTmuArpAgeTime, fibTmuPortsPortType=fibTmuPortsPortType, fibTmuMainSwVersion=fibTmuMainSwVersion, fibTmuFunctionalityVersion=fibTmuFunctionalityVersion, fibTmuFunctTmsOnOutRun=fibTmuFunctTmsOnOutRun, fibTmuRunFaultsFormat=fibTmuRunFaultsFormat, fibTmuSccDrvVersion=fibTmuSccDrvVersion, fibTmuNumNonSnap=fibTmuNumNonSnap, fibTmuPortsModuleId=fibTmuPortsModuleId, fibTmuAc11Cntr=fibTmuAc11Cntr, fibTmuMatchNoMatchReason=fibTmuMatchNoMatchReason, fibTmuPortsAllowedAddrLoaded=fibTmuPortsAllowedAddrLoaded, fibTmuPortsGenCloseRun=fibTmuPortsGenCloseRun, fibTmuProductionBoardType=fibTmuProductionBoardType, fibTmuAc10Cntr=fibTmuAc10Cntr, fibTmuEepromDeffective=fibTmuEepromDeffective, fibTmuFunctRingIstnrPerm=fibTmuFunctRingIstnrPerm, fibTmuPortsStationInfo=fibTmuPortsStationInfo, fibTmuPortsTauTable=fibTmuPortsTauTable, fibTmuMatchPortId=fibTmuMatchPortId, fibTmuNumAddrNotFound=fibTmuNumAddrNotFound, fibTmuNumRxBdcst=fibTmuNumRxBdcst, fibTmuPortsTauAllowedAddr=fibTmuPortsTauAllowedAddr, mgmt=mgmt, fibTmuPortsTauMode=fibTmuPortsTauMode, fibTmuFunctCheckAogTauPerm=fibTmuFunctCheckAogTauPerm, fibTmuWrapOut=fibTmuWrapOut, fibTmuFunctRemWrapLenPerm=fibTmuFunctRemWrapLenPerm, fibTmuMatchNumTmuEntries=fibTmuMatchNumTmuEntries, fibTmuFunctRingIstPerm=fibTmuFunctRingIstPerm, tmuProduction=tmuProduction, fibTmuMatchActMonIndex=fibTmuMatchActMonIndex, fibTmuStationsStationsListValid=fibTmuStationsStationsListValid, fibTmuPortsAllowedAddr=fibTmuPortsAllowedAddr, fibTmuFunctRtpGrpVrsRun=fibTmuFunctRtpGrpVrsRun, fibTmuNumRxGroup=fibTmuNumRxGroup, tmuStations=tmuStations, fibTmuFunctDmaThreshPerm=fibTmuFunctDmaThreshPerm, fibTmuDisplayDebugMode=fibTmuDisplayDebugMode, fibTmuNumRifLong=fibTmuNumRifLong, fibTmuLastBeaconAddr=fibTmuLastBeaconAddr, fibTmuMatchPhysAddr=fibTmuMatchPhysAddr, fibTmuFunctWrapCwtRun=fibTmuFunctWrapCwtRun, fibTmuStationsStationInfo=fibTmuStationsStationInfo, tmuPorts=tmuPorts, fibTmuPortsGenClosePerm=fibTmuPortsGenClosePerm, fibTmuFunctBeacon2OkPerm=fibTmuFunctBeacon2OkPerm, fibTmuFrameEc=fibTmuFrameEc, fibTmuNumBeaconsRcvd=fibTmuNumBeaconsRcvd, fibTmuLastBeaconNaun=fibTmuLastBeaconNaun, tmuMatch=tmuMatch, fibTmuFunctAnotherCheckPerm=fibTmuFunctAnotherCheckPerm, fibTmuMatchNumEntries=fibTmuMatchNumEntries, fibTmuEepromVersion=fibTmuEepromVersion, fibTmuFunctUseMismatchRun=fibTmuFunctUseMismatchRun, fibTmuFunctTmsOnOutPerm=fibTmuFunctTmsOnOutPerm, fibTmuStationsUpdateTime=fibTmuStationsUpdateTime, fibTmuPortsTauEntry=fibTmuPortsTauEntry, tmuSystem=tmuSystem, fibTmuIntrfcTable=fibTmuIntrfcTable, fibTmuFunctChkRingPerRun=fibTmuFunctChkRingPerRun, fibTmuFunctMaxSavRecPerm=fibTmuFunctMaxSavRecPerm, fibTmuNumUnknownType=fibTmuNumUnknownType, fibTmuNumNoRif=fibTmuNumNoRif, fibTmuFunctReadPerRun=fibTmuFunctReadPerRun, enterprises=enterprises, fibTmuWrapIn=fibTmuWrapIn, fibTmuMatchStationInfo=fibTmuMatchStationInfo, fibTmuFunctLinkPtifRun=fibTmuFunctLinkPtifRun, fibronics=fibronics, fibTmuIntrfcEntry=fibTmuIntrfcEntry, fibTmuStationsSecondChipIndex=fibTmuStationsSecondChipIndex, fibTmuFunctOk2BeaconPerm=fibTmuFunctOk2BeaconPerm, fibTmuPortsNumAttached=fibTmuPortsNumAttached, fibTmuFunctClaimTimeOutPerm=fibTmuFunctClaimTimeOutPerm, fibTmuEeFaultsFormat=fibTmuEeFaultsFormat, fibTmuPortsLastTxTime=fibTmuPortsLastTxTime, fibTmuFunctRingIstRun=fibTmuFunctRingIstRun, fibTmuNumStationSecurity=fibTmuNumStationSecurity, fibTmuRIConnection=fibTmuRIConnection, fibTmuPortsTauRevision=fibTmuPortsTauRevision, fibTmuFunctUseJitterRun=fibTmuFunctUseJitterRun, fibTmuProductionHwInfo=fibTmuProductionHwInfo, fibTmuFunctDmaThreshRun=fibTmuFunctDmaThreshRun, fibTmuFunctForceStpRoPerm=fibTmuFunctForceStpRoPerm, fibTmuNumArpRcvd=fibTmuNumArpRcvd, fibTmuSnmpUsrVersion=fibTmuSnmpUsrVersion, fibTmuPortsNumTimeout=fibTmuPortsNumTimeout, fibTmuPortsAllEntry=fibTmuPortsAllEntry, fibTmuFunctChkRingPerPerm=fibTmuFunctChkRingPerPerm, fibTmuPortsMaxFirstTimeout=fibTmuPortsMaxFirstTimeout, fibTmuFunctCheckAogTauRun=fibTmuFunctCheckAogTauRun, fibTmuFunctMaxNoiRun=fibTmuFunctMaxNoiRun, fibTmuUtilitiesVersion=fibTmuUtilitiesVersion, fibTmuPortsNumRelayOpen=fibTmuPortsNumRelayOpen, fibTmuFunctUseJitterPerm=fibTmuFunctUseJitterPerm, tmuIntrfc=tmuIntrfc, fibTmuPortsTauPortState=fibTmuPortsTauPortState, fibTmuProductionAddr48No3=fibTmuProductionAddr48No3, fibTmuNumRxFunctional=fibTmuNumRxFunctional, fibTmuPortsNumTausPerTmu=fibTmuPortsNumTausPerTmu, fibTmuPortsManagerClosePerm=fibTmuPortsManagerClosePerm, fibTmuPortsNumPhantomPresent=fibTmuPortsNumPhantomPresent, fibTmuMatchUpdateTime=fibTmuMatchUpdateTime, fibTmuLastBeaconType=fibTmuLastBeaconType, fibTmuPortsAllTable=fibTmuPortsAllTable, fibTmuPortsLastPollTime=fibTmuPortsLastPollTime, fibTmuFunctMaxNoiPerm=fibTmuFunctMaxNoiPerm, fibTmuMatchTable=fibTmuMatchTable, fibTmuProductionFlash1Size=fibTmuProductionFlash1Size, fibTmuFunctClaimTimeOutRun=fibTmuFunctClaimTimeOutRun, fibTmuProductionEepromType=fibTmuProductionEepromType, fibTmuRealTimeClock=fibTmuRealTimeClock, fibTmuPortsMaxNumTauErrs=fibTmuPortsMaxNumTauErrs, fibTmuFunctChkRingInsRun=fibTmuFunctChkRingInsRun, fibTmuFunctWrapWnrPerm=fibTmuFunctWrapWnrPerm, fibTmuMatchUpToDate=fibTmuMatchUpToDate, fibTmuFunctMaxSavRecRun=fibTmuFunctMaxSavRecRun, fibTmuProductionFlash0Size=fibTmuProductionFlash0Size, fibTmuStationsFirstChipIndex=fibTmuStationsFirstChipIndex, fibTmuStationsUpToDate=fibTmuStationsUpToDate, fibTmuFunctInsPatPerm=fibTmuFunctInsPatPerm, fibTmuIntrfcIndex=fibTmuIntrfcIndex, fibTmuPortsNumPorts=fibTmuPortsNumPorts, fibTmuNumRarpRcvd=fibTmuNumRarpRcvd, fibTmuMatchTauId=fibTmuMatchTauId, fibTmuAc00Cntr=fibTmuAc00Cntr, fibTmuFunctBeacon2OkRun=fibTmuFunctBeacon2OkRun, fibTmuFunctWrapWnrRun=fibTmuFunctWrapWnrRun, fibTmuFunctRemWrapLenRun=fibTmuFunctRemWrapLenRun, fibTmuFunctChkRingInsPerm=fibTmuFunctChkRingInsPerm, fibTmuNumRxAccepted=fibTmuNumRxAccepted, fibTmuAc01Cntr=fibTmuAc01Cntr, fibTmuRxNoiseEc=fibTmuRxNoiseEc, fibTmuPortsRequestType=fibTmuPortsRequestType, fibTmuStationsTable=fibTmuStationsTable, fibTmuFunctRingIstnrRun=fibTmuFunctRingIstnrRun, fibTmuMatchSecondChipIndex=fibTmuMatchSecondChipIndex, fibTmuProductionRamSize=fibTmuProductionRamSize, fibTmuNumIfDown=fibTmuNumIfDown, fibTmuStationsNumTmuEntries=fibTmuStationsNumTmuEntries, tmuFunction=tmuFunction, fibTmuFunctBeacon2AutotestPerm=fibTmuFunctBeacon2AutotestPerm, fibTmuMatchFirstChipIndex=fibTmuMatchFirstChipIndex, fibTmuNumProcessDisabled=fibTmuNumProcessDisabled, fibTmuLoadEeDefaults=fibTmuLoadEeDefaults, fibTmuMatchConfigChipIndex=fibTmuMatchConfigChipIndex, fibTmuStationsNumEntries=fibTmuStationsNumEntries, fibTmuFunctReadPerPerm=fibTmuFunctReadPerPerm, fibTmuPortsUpdateTime=fibTmuPortsUpdateTime, fibTmuFunctForceStpRiPerm=fibTmuFunctForceStpRiPerm, fibTmuStationsActMonIndex=fibTmuStationsActMonIndex, fibTmuFunctLinkPtifPerm=fibTmuFunctLinkPtifPerm, fibTmuPortsTmuPort=fibTmuPortsTmuPort, fibTmuMatchEntry=fibTmuMatchEntry, fibTmuNumRrpRjctIp=fibTmuNumRrpRjctIp, fibTmuProductionAddr48No2=fibTmuProductionAddr48No2, fibTmuLastBeaconTime=fibTmuLastBeaconTime, fibTmuSecurityModeRun=fibTmuSecurityModeRun, fibTmuFunctWrapCwtPerm=fibTmuFunctWrapCwtPerm, fibTmuFunctRtpGrpVrsPerm=fibTmuFunctRtpGrpVrsPerm, fibTmuProductionEepromSize=fibTmuProductionEepromSize, fibTmuNumConfigNotValid=fibTmuNumConfigNotValid, fibTmuPortsNumPhantomUp=fibTmuPortsNumPhantomUp, fibTmuLastSysIfIndex=fibTmuLastSysIfIndex, fibTmuPortsManagerCloseRun=fibTmuPortsManagerCloseRun, fibTmuStationsIndex=fibTmuStationsIndex, fibTmuPortsTauPortIndex=fibTmuPortsTauPortIndex, fibTmuProductionRomType=fibTmuProductionRomType, fibTmuNumRxSpecific=fibTmuNumRxSpecific, fibTmuStationsConfigChipIndex=fibTmuStationsConfigChipIndex, fibTmuFunctForceStpRiRun=fibTmuFunctForceStpRiRun, fibTmuPortsNumConsequentErrs=fibTmuPortsNumConsequentErrs, tmuSecurity=tmuSecurity, fibTmuFunctInsPatRun=fibTmuFunctInsPatRun, fibTmuFunctRemWrapTypeRun=fibTmuFunctRemWrapTypeRun, fibTmuNumEventErrs=fibTmuNumEventErrs, fibTmuPortsEndConnection=fibTmuPortsEndConnection, fibTmuProductionSerialNum=fibTmuProductionSerialNum, fibTmuProductionRamType=fibTmuProductionRamType, fibTmuStationsPhysAddr=fibTmuStationsPhysAddr, fibTmuPortsNumPortsPerTau=fibTmuPortsNumPortsPerTau, fibTmuSecurityModePerm=fibTmuSecurityModePerm, private=private, fibTmuFunctAnotherCheckRun=fibTmuFunctAnotherCheckRun, fibTmuBreakEc=fibTmuBreakEc, fibTmuNumIpRcvd=fibTmuNumIpRcvd, fibTmuDontResetFatal=fibTmuDontResetFatal, fibTmuFunctOk2BeaconRun=fibTmuFunctOk2BeaconRun, fibTmuPortsTauAllowedAddrLoaded=fibTmuPortsTauAllowedAddrLoaded, fibTmuPortsPortState=fibTmuPortsPortState, fibTmuParityEc=fibTmuParityEc, fibTmuPortsPortStatus=fibTmuPortsPortStatus, fibTmuNumRarpUpdate=fibTmuNumRarpUpdate, fibTmuFunctForceStpRoRun=fibTmuFunctForceStpRoRun, fibTmuNumRxRjctMem=fibTmuNumRxRjctMem, fibTmuFunctUseMismatchPerm=fibTmuFunctUseMismatchPerm, fibTmuROConnection=fibTmuROConnection, fibTmuMatchNoStationsListReason=fibTmuMatchNoStationsListReason, fibTmuProductionAddr48No1=fibTmuProductionAddr48No1, fibTmuNumOwnBrdcst=fibTmuNumOwnBrdcst, fibTmuProductionFlashType=fibTmuProductionFlashType, fibTmuPortsLedState=fibTmuPortsLedState, fibTmuFunctBeacon2AutotestRun=fibTmuFunctBeacon2AutotestRun, fibTmuMatchIndex=fibTmuMatchIndex, fibTmuPortsTmuPortIndex=fibTmuPortsTmuPortIndex, fibTmuPortsPhysAddr=fibTmuPortsPhysAddr, fibTmuTrDrvVersion=fibTmuTrDrvVersion, fibTmuNumRifIncluded=fibTmuNumRifIncluded, fibTmuMatchListValid=fibTmuMatchListValid, fibTmuNumStationLeft=fibTmuNumStationLeft, fibTmuPortsNumModules=fibTmuPortsNumModules, fibTmuFunctRemWrapTypePerm=fibTmuFunctRemWrapTypePerm, fibTmuStationsEntry=fibTmuStationsEntry)
