#
# PySNMP MIB module SFRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SFRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, NotificationType, internet, ObjectIdentity, ModuleIdentity, iso, TimeTicks, Bits, Unsigned32, MibIdentifier, Counter64, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "NotificationType", "internet", "ObjectIdentity", "ModuleIdentity", "iso", "TimeTicks", "Bits", "Unsigned32", "MibIdentifier", "Counter64", "Counter32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
sync = MibIdentifier((1, 3, 6, 1, 4, 1, 485))
sfrap = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7))
sfrapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 1))
sfrapSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 1, 1))
sfrapSysType = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysType.setStatus('mandatory')
sfrapSysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysSoftRev.setStatus('mandatory')
sfrapSysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysHardRev.setStatus('mandatory')
sfrapSysNumToDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysNumToDteInstalled.setStatus('mandatory')
sfrapSysNumToDceInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysNumToDceInstalled.setStatus('mandatory')
sfrapSysNumMaintInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysNumMaintInstalled.setStatus('mandatory')
sfrapSysName = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapSysName.setStatus('mandatory')
sfrapSysSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysSerialNo.setStatus('mandatory')
sfrapSysResetNode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(321))).clone(namedValues=NamedValues(("reset-node", 321)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapSysResetNode.setStatus('mandatory')
sfrapSysAmtMemoryInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysAmtMemoryInstalled.setStatus('mandatory')
sfrapSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapSysLocation.setStatus('mandatory')
sfrapSysContact = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapSysContact.setStatus('mandatory')
sfrapSysPrompt = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapSysPrompt.setStatus('mandatory')
sfrapSysBootRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysBootRev.setStatus('mandatory')
sfrapSysFeatureTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 1, 2))
sfrapSysSLIPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysSLIPSupported.setStatus('mandatory')
sfrapSysPPPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysPPPSupported.setStatus('mandatory')
sfrapSysRDOSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysRDOSupported.setStatus('mandatory')
sfrapSysETHSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysETHSupported.setStatus('mandatory')
sfrapSysTKRSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysTKRSupported.setStatus('mandatory')
sfrapSysExtTimSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysExtTimSupported.setStatus('mandatory')
sfrapSysBRISupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysBRISupported.setStatus('mandatory')
sfrapSysSelDTESupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysSelDTESupported.setStatus('mandatory')
sfrapSysMLSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysMLSupported.setStatus('mandatory')
sfrapSysNumDlcisSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysNumDlcisSupported.setStatus('mandatory')
sfrapSysLTFNumDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysLTFNumDlcis.setStatus('mandatory')
sfrapSysLTFNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysLTFNumProtocols.setStatus('mandatory')
sfrapSysNumUserProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysNumUserProtocols.setStatus('mandatory')
sfrapSysNumSnmpMgrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysNumSnmpMgrs.setStatus('mandatory')
sfrapSysNumDlciNames = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysNumDlciNames.setStatus('mandatory')
sfrapSysHighSpeedSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 1, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapSysHighSpeedSupported.setStatus('mandatory')
sfrapConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2))
sfrapCfgMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 1))
sfrapCfgIpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1))
sfrapCfgIpMyIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgIpMyIP.setStatus('mandatory')
sfrapCfgIpPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgIpPeerIP.setStatus('mandatory')
sfrapCfgIpMask = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgIpMask.setStatus('mandatory')
sfrapCfgIpMaxMTU = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgIpMaxMTU.setStatus('mandatory')
sfrapCfgIpChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("slip-port", 2), ("in-band-dlci", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgIpChannel.setStatus('mandatory')
sfrapCfgIpTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-telnet", 1), ("disable-telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgIpTelnetEnable.setStatus('mandatory')
sfrapCfgIpTelnetAutoLogOut = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 10, 30, 60))).clone(namedValues=NamedValues(("autologout-at-15-minutes", 1), ("disable-autologout", 2), ("autologout-at-3-minutes", 3), ("autologout-at-5-minutes", 5), ("autologout-at-10-minutes", 10), ("autologout-at-30-minutes", 30), ("autologout-at-60-minutes", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgIpTelnetAutoLogOut.setStatus('mandatory')
sfrapCfgTftpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2))
sfrapCfgTftpInitiate = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgTftpInitiate.setStatus('mandatory')
sfrapCfgTftpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTftpIpAddress.setStatus('mandatory')
sfrapCfgTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTftpFilename.setStatus('mandatory')
sfrapCfgTftpInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("to-dte-interface", 1), ("to-dce-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTftpInterface.setStatus('mandatory')
sfrapCfgTftpDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTftpDlci.setStatus('mandatory')
sfrapCfgTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inactive", 1), ("requested", 2), ("transferring", 3), ("programming", 4), ("transfer-aborted", 5), ("host-no-reply", 6), ("file-not-found", 7), ("invalid-file", 8), ("corrupt-file", 9), ("successful", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTftpStatus.setStatus('mandatory')
sfrapCfgTftpNumBytes = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgTftpNumBytes.setStatus('mandatory')
sfrapCfgSnmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3))
sfrapCfgSnmpFrTrap = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgSnmpFrTrap.setStatus('mandatory')
sfrapCfgSnmpTrapMuting = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgSnmpTrapMuting.setStatus('mandatory')
sfrapCfgSnmpUtilTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgSnmpUtilTrapEnable.setStatus('mandatory')
sfrapCfgSnmpMgrClearN = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgSnmpMgrClearN.setStatus('mandatory')
sfrapCfgSnmpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 2), )
if mibBuilder.loadTexts: sfrapCfgSnmpMgrTable.setStatus('mandatory')
sfrapCfgSnmpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 2, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgSnmpMgrIndex"))
if mibBuilder.loadTexts: sfrapCfgSnmpMgrEntry.setStatus('mandatory')
sfrapCfgSnmpMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgSnmpMgrIndex.setStatus('mandatory')
sfrapCfgSnmpMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgSnmpMgrIP.setStatus('mandatory')
sfrapCfgSnmpMgrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("to-dte-interface", 1), ("to-dce-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgSnmpMgrInterface.setStatus('mandatory')
sfrapCfgSnmpMgrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgSnmpMgrDlci.setStatus('mandatory')
sfrapCfgCommTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 4))
sfrapCfgCommMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt100", 1), ("slip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgCommMode.setStatus('mandatory')
sfrapCfgCommBaud = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6))).clone(namedValues=NamedValues(("baud-2400", 2), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgCommBaud.setStatus('mandatory')
sfrapCfgCommDataBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgCommDataBits.setStatus('mandatory')
sfrapCfgCommStopBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgCommStopBits.setStatus('mandatory')
sfrapCfgCommParity = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgCommParity.setStatus('mandatory')
sfrapCfgCommFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("no-flow-control", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgCommFlowCtrl.setStatus('mandatory')
sfrapCfgFrDLCITable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 5))
sfrapCfgFrDLCIMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("local-to-dte", 2), ("remote-to-dce", 3), ("bidirectional", 4), ("piggyback", 5), ("fixedDCE", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrDLCIMode.setStatus('mandatory')
sfrapCfgFrDLCIValue = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrDLCIValue.setStatus('mandatory')
sfrapCfgFrDLCIEncap = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1490", 1), ("rfc1490snap", 2), ("auto", 3), ("cisco", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrDLCIEncap.setStatus('mandatory')
sfrapCfgFrDLCIMgmtDE = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-DE-bit-0", 1), ("yes-DE-bit-1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrDLCIMgmtDE.setStatus('mandatory')
sfrapCfgAppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 2))
sfrapCfgAppCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppCircuitId.setStatus('mandatory')
sfrapCfgAppType = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("frame-relay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppType.setStatus('mandatory')
sfrapCfgAppFormat = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbo", 1), ("hdlc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppFormat.setStatus('mandatory')
sfrapCfgAppLpbkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppLpbkTimeout.setStatus('mandatory')
sfrapCfgAppTxClkmode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal-timing", 1), ("invert-TO-DCE", 2), ("invert-TO-DTE", 3), ("invert-timing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppTxClkmode.setStatus('mandatory')
sfrapCfgAppTxtiming = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loop-1", 1), ("loop-2", 2), ("source-tt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppTxtiming.setStatus('mandatory')
sfrapCfgAppOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tap", 1), ("inband", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppOperationMode.setStatus('mandatory')
sfrapCfgAppCutthruTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppCutthruTimeout.setStatus('mandatory')
sfrapCfgAppPerfBuffLimit = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgAppPerfBuffLimit.setStatus('mandatory')
sfrapCfgDteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 4), )
if mibBuilder.loadTexts: sfrapCfgDteTable.setStatus('mandatory')
sfrapCfgDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 4, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgDteIndex"))
if mibBuilder.loadTexts: sfrapCfgDteEntry.setStatus('mandatory')
sfrapCfgDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 4, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-dte", 1), ("to-dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgDteIndex.setStatus('mandatory')
sfrapCfgDteIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("intf-v35", 3), ("intf-rs449", 4), ("intf-x21", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgDteIntfType.setStatus('mandatory')
sfrapCfgDteTxClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgDteTxClockMode.setStatus('mandatory')
sfrapCfgDteRxClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2), ("clock-auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgDteRxClockMode.setStatus('mandatory')
sfrapCfgDteRtsC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal-assumed-active", 1), ("signal-monitored", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgDteRtsC.setStatus('mandatory')
sfrapCfgFrTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 5))
sfrapCfgFrAddrLen = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twobytes", 1), ("threebytes", 2), ("fourbytes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrAddrLen.setStatus('mandatory')
sfrapCfgFrCrcMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("passthru", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrCrcMode.setStatus('mandatory')
sfrapCfgFrLmiType = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("annexd", 1), ("annexa", 2), ("type1", 3), ("autosense", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrLmiType.setStatus('mandatory')
sfrapCfgFrLmiInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrLmiInactivityTimeout.setStatus('mandatory')
sfrapCfgFrLmiKeepaliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrLmiKeepaliveTimeout.setStatus('mandatory')
sfrapCfgFrAddrResMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("arp", 2), ("inarp", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrAddrResMode.setStatus('mandatory')
sfrapCfgFrAddrResDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2), ("todcemulti", 3), ("todtemulti", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrAddrResDlcis.setStatus('mandatory')
sfrapCfgFrAddrResInarpTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrAddrResInarpTimer.setStatus('mandatory')
sfrapCfgFrLmiFullStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrLmiFullStatus.setStatus('mandatory')
sfrapCfgVnipTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 6))
sfrapCfgVnipMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("to-dte", 2), ("to-dce", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgVnipMode.setStatus('mandatory')
sfrapCfgVnipInitTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgVnipInitTimer.setStatus('mandatory')
sfrapCfgVnipTxTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgVnipTxTimer.setStatus('mandatory')
sfrapCfgVnipRxTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgVnipRxTimer.setStatus('mandatory')
sfrapCfgVnipTransitDelayFrequency = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgVnipTransitDelayFrequency.setStatus('mandatory')
sfrapCfgTransitDelayTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 20), )
if mibBuilder.loadTexts: sfrapCfgTransitDelayTable.setStatus('mandatory')
sfrapCfgTransitDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 20, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgTransitDelayInterface"), (0, "SFRAP-MIB", "sfrapCfgTransitDelayDlciValue"))
if mibBuilder.loadTexts: sfrapCfgTransitDelayEntry.setStatus('mandatory')
sfrapCfgTransitDelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-dte-interface", 1), ("to-dce-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTransitDelayInterface.setStatus('mandatory')
sfrapCfgTransitDelayDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTransitDelayDlciValue.setStatus('mandatory')
sfrapCfgTransitDelayNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTransitDelayNumHops.setStatus('mandatory')
sfrapCfgTransitDelayRcvSummaryCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-rsc", 1), ("disable-rsc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTransitDelayRcvSummaryCancel.setStatus('mandatory')
sfrapCfgTransitDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTransitDelayThreshold.setStatus('mandatory')
sfrapCfgTDDeleteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 21), )
if mibBuilder.loadTexts: sfrapCfgTDDeleteTable.setStatus('mandatory')
sfrapCfgTDDeleteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 21, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgTDDeleteInterface"))
if mibBuilder.loadTexts: sfrapCfgTDDeleteEntry.setStatus('mandatory')
sfrapCfgTDDeleteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-dte-interface", 1), ("to-dce-interface", 2))))
if mibBuilder.loadTexts: sfrapCfgTDDeleteInterface.setStatus('mandatory')
sfrapCfgTDDeleteDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 21, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgTDDeleteDlciValue.setStatus('mandatory')
sfrapCfgTransitDelayTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgTransitDelayTableClear.setStatus('mandatory')
sfrapCfgFrPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 7))
sfrapCfgFrPerfDlciNamesTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1), )
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesTable.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgFrPerfDlciNamesDlciValue"))
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesEntry.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesDlciValue.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesDlciName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesDlciName.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesCirValue.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesCirType.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesUtilThreshold.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesEirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesEirValue.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesDelete.setStatus('mandatory')
sfrapCfgFrPerfTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 3))
sfrapCfgFrPerfTimersSTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfTimersSTInterval.setStatus('mandatory')
sfrapCfgFrPerfTimersLTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfTimersLTInterval.setStatus('mandatory')
sfrapCfgFrPerfUserProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 4), )
if mibBuilder.loadTexts: sfrapCfgFrPerfUserProtocolsTable.setStatus('mandatory')
sfrapCfgFrPerfUserProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 4, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgFrPerfUserProtocolsIndex"))
if mibBuilder.loadTexts: sfrapCfgFrPerfUserProtocolsEntry.setStatus('mandatory')
sfrapCfgFrPerfUserProtocolsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfUserProtocolsIndex.setStatus('mandatory')
sfrapCfgFrPerfUserProtocolsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfUserProtocolsPortNum.setStatus('mandatory')
sfrapCfgFrPerfLTDlciFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 5), )
if mibBuilder.loadTexts: sfrapCfgFrPerfLTDlciFilterTable.setStatus('mandatory')
sfrapCfgFrPerfLTDlciFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 5, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgFrPerfLTDlciFilterIndex"))
if mibBuilder.loadTexts: sfrapCfgFrPerfLTDlciFilterEntry.setStatus('mandatory')
sfrapCfgFrPerfLTDlciFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfLTDlciFilterIndex.setStatus('mandatory')
sfrapCfgFrPerfLTDlciFilterDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfLTDlciFilterDlciNum.setStatus('mandatory')
sfrapCfgFrPerfLTProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 6), )
if mibBuilder.loadTexts: sfrapCfgFrPerfLTProtocolFilterTable.setStatus('mandatory')
sfrapCfgFrPerfLTProtocolFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 6, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapCfgFrPerfLTProtocolFilterIndex"))
if mibBuilder.loadTexts: sfrapCfgFrPerfLTProtocolFilterEntry.setStatus('mandatory')
sfrapCfgFrPerfLTProtocolFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfLTProtocolFilterIndex.setStatus('mandatory')
sfrapCfgFrPerfLTProtocolFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, -1))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-c", 129), ("thru-frame-rx-c", 130), ("thru-fecn-tx-c", 131), ("thru-fecn-rx-c", 132), ("thru-becn-tx-c", 133), ("thru-becn-rx-c", 134), ("thru-de-tx-c", 135), ("thru-de-rx-c", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172), ("delete-entry", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfLTProtocolFilterProtocol.setStatus('mandatory')
sfrapCfgFrPerfDlciDefaultUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciDefaultUtilThreshold.setStatus('mandatory')
sfrapCfgFrPerfDlciUtilDuration = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciUtilDuration.setStatus('mandatory')
sfrapCfgFrPerfDlciNamesTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-table", 1), ("clear-table-keep-stats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfDlciNamesTableClear.setStatus('mandatory')
sfrapCfgFrPerfUserProtocolsTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfUserProtocolsTableClear.setStatus('mandatory')
sfrapCfgFrPerfLTDlciFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfLTDlciFilterTableClear.setStatus('mandatory')
sfrapCfgFrPerfLTProtocolFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfLTProtocolFilterTableClear.setStatus('mandatory')
sfrapCfgFrPerfUnprovDlcisDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete-unprov", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgFrPerfUnprovDlcisDelete.setStatus('mandatory')
sfrapCfgSecurityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 2, 8))
sfrapCfgTelnetCliPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTelnetCliPassword.setStatus('mandatory')
sfrapCfgTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgTftpPassword.setStatus('mandatory')
sfrapCfgCliPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgCliPassword.setStatus('mandatory')
sfrapCfgGetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgGetCommunityString.setStatus('mandatory')
sfrapCfgSetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgSetCommunityString.setStatus('mandatory')
sfrapCfgLock = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgLock.setStatus('mandatory')
sfrapCfgLockID = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgLockID.setStatus('mandatory')
sfrapCfgID = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapCfgID.setStatus('mandatory')
sfrapCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("datarate-density-conflict", 3), ("bandwidth-allocation-error", 4), ("general-error", 5), ("timeout", 6), ("aborted-by-user", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgStatus.setStatus('mandatory')
sfrapCfgUnlock = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("un-lock", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgUnlock.setStatus('mandatory')
sfrapCfgUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapCfgUpdate.setStatus('mandatory')
sfrapDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 3))
sfrapDiagUnitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 3, 1))
sfrapDiagUnitLocLoop = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagUnitLocLoop.setStatus('mandatory')
sfrapDiagUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-unit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapDiagUnitReset.setStatus('mandatory')
sfrapDiagUnitTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapDiagUnitTimeRemaining.setStatus('mandatory')
sfrapDiagUnitCutThru = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-cutthru-mode", 1), ("disable-cutthru-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagUnitCutThru.setStatus('mandatory')
sfrapDiagUnitCutThruTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapDiagUnitCutThruTimeRemaining.setStatus('mandatory')
sfrapDiagDteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 3, 3), )
if mibBuilder.loadTexts: sfrapDiagDteTable.setStatus('mandatory')
sfrapDiagDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 3, 3, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapDiagDteIndex"))
if mibBuilder.loadTexts: sfrapDiagDteEntry.setStatus('mandatory')
sfrapDiagDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 3, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-dte", 1), ("to-dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapDiagDteIndex.setStatus('mandatory')
sfrapDiagDteLclLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagDteLclLpbk.setStatus('mandatory')
sfrapDiagDteTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapDiagDteTimeRemaining.setStatus('mandatory')
sfrapDiagVnipTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 3, 6), )
if mibBuilder.loadTexts: sfrapDiagVnipTable.setStatus('mandatory')
sfrapDiagVnipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapDiagVnipInterface"), (0, "SFRAP-MIB", "sfrapDiagVnipIndex"))
if mibBuilder.loadTexts: sfrapDiagVnipEntry.setStatus('mandatory')
sfrapDiagVnipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagVnipInterface.setStatus('mandatory')
sfrapDiagVnipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagVnipIndex.setStatus('mandatory')
sfrapDiagVnipDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapDiagVnipDlci.setStatus('mandatory')
sfrapDiagVnipIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapDiagVnipIpAddr.setStatus('mandatory')
sfrapDiagVLOOP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start-test", 1), ("stop-test", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapDiagVLOOP.setStatus('mandatory')
sfrapDiagVBERT = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapDiagVBERT.setStatus('mandatory')
sfrapDiagVBERTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagVBERTRate.setStatus('mandatory')
sfrapDiagVBERTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 256, 512, 1024, 2048))).clone(namedValues=NamedValues(("pkt-size-64", 64), ("pkt-size-128", 128), ("pkt-size-256", 256), ("pkt-size-512", 512), ("pkt-size-1024", 1024), ("pkt-size-2048", 2048)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagVBERTSize.setStatus('mandatory')
sfrapDiagVBERTPktPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 25, 50, 75, 100))).clone(namedValues=NamedValues(("zero-percent", 0), ("twentyFive-percent", 25), ("fifty-percent", 50), ("seventyFive-percent", 75), ("oneHundred-percent", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagVBERTPktPercent.setStatus('mandatory')
sfrapDiagVBERTTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagVBERTTestPeriod.setStatus('mandatory')
sfrapDiagTxClockDetect = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiate-clock-detect", 1), ("terminate-clock-detect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfrapDiagTxClockDetect.setStatus('mandatory')
sfrapStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 4))
sfrapStatusLedTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 4, 4))
sfrapStatusLedOpStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("greenLED-high-speed-mode", 1), ("blinkgreenLED-low-speed-mode", 2), ("yellowLED-test-mode", 3), ("redLED-alarm-mode", 4), ("blinkredLED-cut-through-mode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedOpStatusLED.setStatus('mandatory')
sfrapStatusLedToDTETxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-tx-data-receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedToDTETxLED.setStatus('mandatory')
sfrapStatusLedToDTERxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-rx-data-receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedToDTERxLED.setStatus('mandatory')
sfrapStatusLedRtsLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("greenLED-rts-active", 1), ("offLED-rts-inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedRtsLED.setStatus('mandatory')
sfrapStatusLedCtsLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("greenLED-cts-active", 1), ("offLED-cts-inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedCtsLED.setStatus('mandatory')
sfrapStatusLedDsrLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("greenLED-dsr-active", 1), ("offLED-dsr-inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedDsrLED.setStatus('mandatory')
sfrapStatusLedDcdLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("greenLED-dcd-active", 1), ("offLED-dcd-inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedDcdLED.setStatus('mandatory')
sfrapStatusLedToDCETxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-tx-data-receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedToDCETxLED.setStatus('mandatory')
sfrapStatusLedToDCERxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-rx-data-receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedToDCERxLED.setStatus('mandatory')
sfrapStatusLedLmiErrLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-lmi-active-state", 1), ("yellowLED-lmi-error-state", 2), ("blinkyellowLED-lmi-source-state", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedLmiErrLED.setStatus('mandatory')
sfrapStatusLedFrmActLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("greenLED-frm-active", 1), ("offLED-frm-inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedFrmActLED.setStatus('mandatory')
sfrapStatusLedCtrlLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yellowLED-ctrl-active", 1), ("offLED-ctrl-inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedCtrlLED.setStatus('mandatory')
sfrapStatusLedIndLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yellowLED-ind-active", 1), ("offLED-ind-inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLedIndLED.setStatus('mandatory')
sfrapStatusAllLEDs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusAllLEDs.setStatus('mandatory')
sfrapStatusDipswitchTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 4, 10))
sfrapStatusDipswitchCutthru = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch-up", 1), ("switch-down", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDipswitchCutthru.setStatus('mandatory')
sfrapStatusDipswitchToDteLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch-up", 1), ("switch-down", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDipswitchToDteLpbk.setStatus('mandatory')
sfrapStatusDipswitchToDceLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch-up", 1), ("switch-down", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDipswitchToDceLpbk.setStatus('mandatory')
sfrapStatusDipswitchUnused = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch-up", 1), ("switch-down", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDipswitchUnused.setStatus('mandatory')
sfrapStatusDipswitchIntfMode1 = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch-up", 1), ("switch-down", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDipswitchIntfMode1.setStatus('mandatory')
sfrapStatusDipswitchIntfMode2 = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch-up", 1), ("switch-down", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDipswitchIntfMode2.setStatus('mandatory')
sfrapStatusDteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 4, 7), )
if mibBuilder.loadTexts: sfrapStatusDteTable.setStatus('mandatory')
sfrapStatusDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapStatusDteIndex"))
if mibBuilder.loadTexts: sfrapStatusDteEntry.setStatus('mandatory')
sfrapStatusDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-dte", 1), ("to-dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteIndex.setStatus('mandatory')
sfrapStatusDteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteMode.setStatus('mandatory')
sfrapStatusDteRts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteRts.setStatus('mandatory')
sfrapStatusDteDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteDtr.setStatus('mandatory')
sfrapStatusDteDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteDcd.setStatus('mandatory')
sfrapStatusDteDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteDsr.setStatus('mandatory')
sfrapStatusDteCts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteCts.setStatus('mandatory')
sfrapStatusDteSendtiming = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("not-present", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteSendtiming.setStatus('mandatory')
sfrapStatusDteRxtiming = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("not-present", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteRxtiming.setStatus('mandatory')
sfrapStatusDteTermtiming = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("not-present", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteTermtiming.setStatus('mandatory')
sfrapStatusDteCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteCtrl.setStatus('mandatory')
sfrapStatusDteInd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusDteInd.setStatus('mandatory')
sfrapVnipTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 4, 2), )
if mibBuilder.loadTexts: sfrapVnipTopologyTable.setStatus('mandatory')
sfrapVnipTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapVnipTopologyInterface"), (0, "SFRAP-MIB", "sfrapVnipTopologyIndex"))
if mibBuilder.loadTexts: sfrapVnipTopologyEntry.setStatus('mandatory')
sfrapVnipTopologyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data1-interface", 1), ("data2-interface", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopologyInterface.setStatus('mandatory')
sfrapVnipTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopologyIndex.setStatus('mandatory')
sfrapVnipTopologyDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopologyDlci.setStatus('mandatory')
sfrapVnipTopologyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopologyIpAddr.setStatus('mandatory')
sfrapVnipTopologyNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopologyNumHops.setStatus('mandatory')
sfrapVnipTopologyLocalDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopologyLocalDlci.setStatus('mandatory')
sfrapVnipTopoTDNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoTDNumSamples.setStatus('mandatory')
sfrapVnipTopoTDAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoTDAvgDelay.setStatus('mandatory')
sfrapVnipTopoTDMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoTDMaxDelay.setStatus('mandatory')
sfrapVnipTopoTDMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoTDMinDelay.setStatus('mandatory')
sfrapVnipTopoTDLastDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoTDLastDelay.setStatus('mandatory')
sfrapVnipTopoVLOOPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVLOOPStatus.setStatus('mandatory')
sfrapVnipTopoVBERTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("testing", 2), ("test-failed", 3), ("test-completed", 4), ("in-test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBERTStatus.setStatus('mandatory')
sfrapVnipTopoVBertTxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertTxDESetFrames.setStatus('mandatory')
sfrapVnipTopoVBertRxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertRxDESetFrames.setStatus('mandatory')
sfrapVnipTopoVBertTxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertTxDEClrFrames.setStatus('mandatory')
sfrapVnipTopoVBertRxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertRxDEClrFrames.setStatus('mandatory')
sfrapVnipTopoVBertTransitDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertTransitDelayMax.setStatus('mandatory')
sfrapVnipTopoVBertTransitDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertTransitDelayAvg.setStatus('mandatory')
sfrapVnipTopoVBertTimeElapse = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertTimeElapse.setStatus('mandatory')
sfrapVnipTopoVBertPerUtilCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertPerUtilCIR.setStatus('mandatory')
sfrapVnipTopoVBertPerUtilEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapVnipTopoVBertPerUtilEIR.setStatus('mandatory')
sfrapVnipTransitDelayClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-transit-delay", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapVnipTransitDelayClear.setStatus('mandatory')
sfrapLmiSourcing = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 1), ("passthrough", 2), ("user-to-dte", 3), ("user-to-dce", 4), ("ntwk-to-dte", 5), ("ntwk-to-dce", 6), ("disabled", 7), ("both-ports", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapLmiSourcing.setStatus('mandatory')
sfrapVBertClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-vbert", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapVBertClear.setStatus('mandatory')
sfrapStatusMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 4, 3))
sfrapStatusMgmtChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("slip", 2), ("private-dlci", 3), ("piggyback-dlci", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusMgmtChannel.setStatus('mandatory')
sfrapStatusMgmtInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("comm", 1), ("local-to-dte", 2), ("remote-to-dce", 3), ("local-and-remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusMgmtInterface.setStatus('mandatory')
sfrapStatusMgmtInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusMgmtInterfaceStatus.setStatus('mandatory')
sfrapStatusMgmtDefaultDLCINo = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusMgmtDefaultDLCINo.setStatus('mandatory')
sfrapStatusMgmtDefaultDLCIStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("dlci-active", 2), ("dlci-inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusMgmtDefaultDLCIStatus.setStatus('mandatory')
sfrapStatusClockRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusClockRate.setStatus('mandatory')
sfrapStatusToDteRxClockMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2), ("clock-auto-normal", 3), ("clock-auto-invert", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusToDteRxClockMode.setStatus('mandatory')
sfrapStatusLmiAutosense = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("learned-annex-d", 3), ("learned-annex-a", 4), ("learned-type1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusLmiAutosense.setStatus('mandatory')
sfrapStatusTxClockDetect = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("inactive", 1), ("initiate", 2), ("trying-cut-thru", 3), ("failed-cut-thru", 4), ("trying-inband-norm", 5), ("success-inband-norm", 6), ("failed-inband-norm", 7), ("trying-inband-invert", 8), ("success-inband-invert", 9), ("failed-inband", 10), ("terminate", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapStatusTxClockDetect.setStatus('mandatory')
sfrapPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5))
sfrapPerfMgmtIp = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 2))
sfrapPerfMgmtIpIFStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 1))
sfrapPerfMgmtIpIFInOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIFInOctets.setStatus('mandatory')
sfrapPerfMgmtIpIFInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIFInErrors.setStatus('mandatory')
sfrapPerfMgmtIpIFOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIFOutOctets.setStatus('mandatory')
sfrapPerfMgmtIpIFOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIFOperStatus.setStatus('mandatory')
sfrapPerfMgmtIpIPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2))
sfrapPerfMgmtIpIPInRcv = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPInRcv.setStatus('mandatory')
sfrapPerfMgmtIpIPInHdrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPInHdrErr.setStatus('mandatory')
sfrapPerfMgmtIpIPInAddrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPInAddrErr.setStatus('mandatory')
sfrapPerfMgmtIpIPInProtUnk = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPInProtUnk.setStatus('mandatory')
sfrapPerfMgmtIpIPInDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPInDscrd.setStatus('mandatory')
sfrapPerfMgmtIpIPInDlvrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPInDlvrs.setStatus('mandatory')
sfrapPerfMgmtIpIPOutRqst = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPOutRqst.setStatus('mandatory')
sfrapPerfMgmtIpIPOutDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPOutDscrd.setStatus('mandatory')
sfrapPerfMgmtIpIPOutNoRt = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpIPOutNoRt.setStatus('mandatory')
sfrapPerfMgmtIpICMPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3))
sfrapPerfMgmtIpICMPInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInMsgs.setStatus('mandatory')
sfrapPerfMgmtIpICMPInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInErrors.setStatus('mandatory')
sfrapPerfMgmtIpICMPInDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInDestUnreachs.setStatus('mandatory')
sfrapPerfMgmtIpICMPInTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInTimeExcds.setStatus('mandatory')
sfrapPerfMgmtIpICMPInParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInParmProbs.setStatus('mandatory')
sfrapPerfMgmtIpICMPInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInRedirects.setStatus('mandatory')
sfrapPerfMgmtIpICMPInEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInEchos.setStatus('mandatory')
sfrapPerfMgmtIpICMPInEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPInEchoReps.setStatus('mandatory')
sfrapPerfMgmtIpICMPOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPOutMsgs.setStatus('mandatory')
sfrapPerfMgmtIpICMPOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPOutErrors.setStatus('mandatory')
sfrapPerfMgmtIpICMPOutDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPOutDestUnreachs.setStatus('mandatory')
sfrapPerfMgmtIpICMPOutParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPOutParmProbs.setStatus('mandatory')
sfrapPerfMgmtIpICMPOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPOutRedirects.setStatus('mandatory')
sfrapPerfMgmtIpICMPOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPOutEchos.setStatus('mandatory')
sfrapPerfMgmtIpICMPOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpICMPOutEchoReps.setStatus('mandatory')
sfrapPerfMgmtIpUDPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 4))
sfrapPerfMgmtIpUDPInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpUDPInDatagrams.setStatus('mandatory')
sfrapPerfMgmtIpUDPOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpUDPOutDatagrams.setStatus('mandatory')
sfrapPerfMgmtIpUDPNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpUDPNoPorts.setStatus('mandatory')
sfrapPerfMgmtIpTCPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 5))
sfrapPerfMgmtIpTCPActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpTCPActiveOpens.setStatus('mandatory')
sfrapPerfMgmtIpTCPPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpTCPPassiveOpens.setStatus('mandatory')
sfrapPerfMgmtIpTCPAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpTCPAttemptFails.setStatus('mandatory')
sfrapPerfMgmtIpTCPCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpTCPCurrEstab.setStatus('mandatory')
sfrapPerfMgmtIpTCPInSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpTCPInSegs.setStatus('mandatory')
sfrapPerfMgmtIpTCPOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfMgmtIpTCPOutSegs.setStatus('mandatory')
sfrapPerfThruput = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 3))
class Index(Integer32):
    pass

sfrapPerfThruputPerIntfTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1), )
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfTable.setStatus('mandatory')
sfrapPerfThruputPerIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfThruputPerIntfIndex"))
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfEntry.setStatus('mandatory')
sfrapPerfThruputPerIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-dte", 1), ("to-dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfIndex.setStatus('mandatory')
sfrapPerfThruputPerIntfRxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfRxByteCnt.setStatus('mandatory')
sfrapPerfThruputPerIntfTxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfTxByteCnt.setStatus('mandatory')
sfrapPerfThruputPerIntfRxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfRxFrameCnt.setStatus('mandatory')
sfrapPerfThruputPerIntfTxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfTxFrameCnt.setStatus('mandatory')
sfrapPerfThruputPerIntfRxCrcErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfRxCrcErrCnt.setStatus('mandatory')
sfrapPerfThruputPerIntfRxAbortCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfRxAbortCnt.setStatus('mandatory')
sfrapPerfThruputPerIntfRxBpvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerIntfRxBpvCnt.setStatus('mandatory')
sfrapPerfThruputPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2), )
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciTable.setStatus('mandatory')
sfrapPerfThruputPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfThruputPerDlciIndex"), (0, "SFRAP-MIB", "sfrapPerfThruputPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciEntry.setStatus('mandatory')
sfrapPerfThruputPerDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciIndex.setStatus('mandatory')
sfrapPerfThruputPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciValue.setStatus('mandatory')
sfrapPerfThruputPerDlciCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciCreateTime.setStatus('mandatory')
sfrapPerfThruputPerDlciChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciChangeTime.setStatus('mandatory')
sfrapPerfThruputPerDlciRxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciRxByte.setStatus('mandatory')
sfrapPerfThruputPerDlciTxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciTxByte.setStatus('mandatory')
sfrapPerfThruputPerDlciRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciRxFrame.setStatus('mandatory')
sfrapPerfThruputPerDlciTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciTxFrame.setStatus('mandatory')
sfrapPerfThruputPerDlciRxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciRxFecn.setStatus('mandatory')
sfrapPerfThruputPerDlciRxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciRxBecn.setStatus('mandatory')
sfrapPerfThruputPerDlciRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciRxDe.setStatus('mandatory')
sfrapPerfThruputPerDlciTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciTxDe.setStatus('mandatory')
sfrapPerfThruputPerDlciRxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciRxThruput.setStatus('mandatory')
sfrapPerfThruputPerDlciTxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciTxThruput.setStatus('mandatory')
sfrapPerfThruputPerDlciCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciCIR.setStatus('mandatory')
sfrapPerfThruputPerDlciCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-dte-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciCirType.setStatus('mandatory')
sfrapPerfThruputPerDlciUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciUptime.setStatus('mandatory')
sfrapPerfThruputPerDlciDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciDowntime.setStatus('mandatory')
sfrapPerfThruputPerDlciPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc-active", 1), ("pvc-inactive", 2), ("pvc-unprovisioned", 3), ("pvc-not-in-lmi", 4), ("pvc-lmi-timeout", 5), ("pvc-undetermined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciPvcState.setStatus('mandatory')
sfrapPerfThruputPerDlciOutageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciOutageCount.setStatus('mandatory')
sfrapPerfThruputPerDlciAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciAvailability.setStatus('mandatory')
sfrapPerfThruputPerDlciMTBSO = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciMTBSO.setStatus('mandatory')
sfrapPerfThruputPerDlciMTTSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciMTTSR.setStatus('mandatory')
sfrapPerfThruputPerDlciEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("encap-na", 1), ("encap-1490", 2), ("encap-cisco", 3), ("encap-annex-g", 4), ("encap-other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciEncapType.setStatus('mandatory')
sfrapPerfThruputPerDlciRxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciRxUtilizationStatus.setStatus('mandatory')
sfrapPerfThruputPerDlciTxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciTxUtilizationStatus.setStatus('mandatory')
sfrapPerfThruputPerDlciEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputPerDlciEIR.setStatus('mandatory')
sfrapPerfThruputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3))
sfrapPerfThruputCmdClearToDteStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdClearToDteStats.setStatus('mandatory')
sfrapPerfThruputCmdClearToDceStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdClearToDceStats.setStatus('mandatory')
sfrapPerfThruputCmdClearAllIntfStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdClearAllIntfStats.setStatus('mandatory')
sfrapPerfThruputCmdClearDlciStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdClearDlciStats.setStatus('mandatory')
sfrapPerfThruputCmdClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdClearAllStats.setStatus('mandatory')
sfrapPerfThruputCmdRemoveStsDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdRemoveStsDlci.setStatus('mandatory')
sfrapPerfThruputCmdReplaceDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 7), )
if mibBuilder.loadTexts: sfrapPerfThruputCmdReplaceDlciTable.setStatus('mandatory')
sfrapPerfThruputCmdReplaceDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 7, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfThruputCmdReplaceDlciValue"))
if mibBuilder.loadTexts: sfrapPerfThruputCmdReplaceDlciEntry.setStatus('mandatory')
sfrapPerfThruputCmdReplaceDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdReplaceDlciValue.setStatus('mandatory')
sfrapPerfThruputCmdReplaceDlciNewValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdReplaceDlciNewValue.setStatus('mandatory')
sfrapPerfThruputCmdAvailabilityStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdAvailabilityStsDlciReset.setStatus('mandatory')
sfrapPerfThruputCmdAvailabilityStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdAvailabilityStsDlciResetAll.setStatus('mandatory')
sfrapPerfThruputCmdCountsStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdCountsStsDlciReset.setStatus('mandatory')
sfrapPerfThruputCmdCountsStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdCountsStsDlciResetAll.setStatus('mandatory')
sfrapPerfThruputCmdAllStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdAllStsDlciReset.setStatus('mandatory')
sfrapPerfThruputCmdAllStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 3, 3, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfThruputCmdAllStsDlciResetAll.setStatus('mandatory')
sfrapPerfNetworkShortTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 4))
sfrapPerfNetwProtoPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1), )
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTable.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfNetwProtoPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfNetwProtoPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciEntry.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciInterval.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciValue.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxTotal.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxTotal.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxIp.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxIp.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxIpx.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxIpx.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxSna.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxSna.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxArp.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxArp.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxCisco.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxCisco.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxOther.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxOther.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxVnip.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxVnip.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciRxAnnexG.setStatus('mandatory')
sfrapPerfNetwProtoPerDlciTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoPerDlciTxAnnexG.setStatus('mandatory')
sfrapPerfNetwProtoTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2), )
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTable.setStatus('mandatory')
sfrapPerfNetwProtoTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfNetwProtoTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalEntry.setStatus('mandatory')
sfrapPerfNetwProtoTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalInterval.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxTotal.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxTotal.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxIp.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxIp.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxIpx.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxIpx.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxSna.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxSna.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxArp.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxArp.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxCisco.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxCisco.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxOther.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxOther.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxVnip.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxVnip.setStatus('mandatory')
sfrapPerfNetwProtoTotalRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalRxAnnexG.setStatus('mandatory')
sfrapPerfNetwProtoTotalTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwProtoTotalTxAnnexG.setStatus('mandatory')
sfrapPerfIpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3), )
if mibBuilder.loadTexts: sfrapPerfIpPerDlciTable.setStatus('mandatory')
sfrapPerfIpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfIpPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfIpPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfIpPerDlciEntry.setStatus('mandatory')
sfrapPerfIpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciInterval.setStatus('mandatory')
sfrapPerfIpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciValue.setStatus('mandatory')
sfrapPerfIpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciRxTotal.setStatus('mandatory')
sfrapPerfIpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciTxTotal.setStatus('mandatory')
sfrapPerfIpPerDlciRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciRxTcp.setStatus('mandatory')
sfrapPerfIpPerDlciTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciTxTcp.setStatus('mandatory')
sfrapPerfIpPerDlciRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciRxUdp.setStatus('mandatory')
sfrapPerfIpPerDlciTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciTxUdp.setStatus('mandatory')
sfrapPerfIpPerDlciRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciRxIcmp.setStatus('mandatory')
sfrapPerfIpPerDlciTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciTxIcmp.setStatus('mandatory')
sfrapPerfIpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciRxOther.setStatus('mandatory')
sfrapPerfIpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciTxOther.setStatus('mandatory')
sfrapPerfIpPerDlciRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciRxIgrp.setStatus('mandatory')
sfrapPerfIpPerDlciTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpPerDlciTxIgrp.setStatus('mandatory')
sfrapPerfIpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4), )
if mibBuilder.loadTexts: sfrapPerfIpTotalTable.setStatus('mandatory')
sfrapPerfIpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfIpTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfIpTotalEntry.setStatus('mandatory')
sfrapPerfIpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalInterval.setStatus('mandatory')
sfrapPerfIpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalRxTotal.setStatus('mandatory')
sfrapPerfIpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalTxTotal.setStatus('mandatory')
sfrapPerfIpTotalRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalRxTcp.setStatus('mandatory')
sfrapPerfIpTotalTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalTxTcp.setStatus('mandatory')
sfrapPerfIpTotalRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalRxUdp.setStatus('mandatory')
sfrapPerfIpTotalTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalTxUdp.setStatus('mandatory')
sfrapPerfIpTotalRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalRxIcmp.setStatus('mandatory')
sfrapPerfIpTotalTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalTxIcmp.setStatus('mandatory')
sfrapPerfIpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalRxOther.setStatus('mandatory')
sfrapPerfIpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalTxOther.setStatus('mandatory')
sfrapPerfIpTotalRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalRxIgrp.setStatus('mandatory')
sfrapPerfIpTotalTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpTotalTxIgrp.setStatus('mandatory')
sfrapPerfIcmpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5), )
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTable.setStatus('mandatory')
sfrapPerfIcmpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfIcmpPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfIcmpPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciEntry.setStatus('mandatory')
sfrapPerfIcmpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciInterval.setStatus('mandatory')
sfrapPerfIcmpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciValue.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxTotal.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxTotal.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxEchoRep.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxEchoRep.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxDestUnr.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxDestUnr.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxSrcQuench.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxSrcQuench.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxRedirect.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxRedirect.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxEchoReq.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxEchoReq.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxTimeExcd.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxTimeExcd.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxParamProb.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxParamProb.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxTimestpReq.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxTimestpReq.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxTimestpRep.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxTimestpRep.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxAddrMaskReq.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxAddrMaskReq.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxAddrMaskRep.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxAddrMaskRep.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxPktTooBig.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxPktTooBig.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxGmQuery.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxGmQuery.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxGmReport.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxGmReport.setStatus('mandatory')
sfrapPerfIcmpPerDlciRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciRxGmReduct.setStatus('mandatory')
sfrapPerfIcmpPerDlciTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpPerDlciTxGmReduct.setStatus('mandatory')
sfrapPerfIcmpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6), )
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTable.setStatus('mandatory')
sfrapPerfIcmpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfIcmpTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfIcmpTotalEntry.setStatus('mandatory')
sfrapPerfIcmpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalInterval.setStatus('mandatory')
sfrapPerfIcmpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxTotal.setStatus('mandatory')
sfrapPerfIcmpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxTotal.setStatus('mandatory')
sfrapPerfIcmpTotalRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxEchoRep.setStatus('mandatory')
sfrapPerfIcmpTotalTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxEchoRep.setStatus('mandatory')
sfrapPerfIcmpTotalRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxDestUnr.setStatus('mandatory')
sfrapPerfIcmpTotalTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxDestUnr.setStatus('mandatory')
sfrapPerfIcmpTotalRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxSrcQuench.setStatus('mandatory')
sfrapPerfIcmpTotalTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxSrcQuench.setStatus('mandatory')
sfrapPerfIcmpTotalRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxRedirect.setStatus('mandatory')
sfrapPerfIcmpTotalTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxRedirect.setStatus('mandatory')
sfrapPerfIcmpTotalRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxEchoReq.setStatus('mandatory')
sfrapPerfIcmpTotalTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxEchoReq.setStatus('mandatory')
sfrapPerfIcmpTotalRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxTimeExcd.setStatus('mandatory')
sfrapPerfIcmpTotalTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxTimeExcd.setStatus('mandatory')
sfrapPerfIcmpTotalRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxParamProb.setStatus('mandatory')
sfrapPerfIcmpTotalTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxParamProb.setStatus('mandatory')
sfrapPerfIcmpTotalRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxTimestpReq.setStatus('mandatory')
sfrapPerfIcmpTotalTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxTimestpReq.setStatus('mandatory')
sfrapPerfIcmpTotalRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxTimestpRep.setStatus('mandatory')
sfrapPerfIcmpTotalTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxTimestpRep.setStatus('mandatory')
sfrapPerfIcmpTotalRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxAddrMaskReq.setStatus('mandatory')
sfrapPerfIcmpTotalTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxAddrMaskReq.setStatus('mandatory')
sfrapPerfIcmpTotalRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxAddrMaskRep.setStatus('mandatory')
sfrapPerfIcmpTotalTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxAddrMaskRep.setStatus('mandatory')
sfrapPerfIcmpTotalRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxPktTooBig.setStatus('mandatory')
sfrapPerfIcmpTotalTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxPktTooBig.setStatus('mandatory')
sfrapPerfIcmpTotalRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxGmQuery.setStatus('mandatory')
sfrapPerfIcmpTotalTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxGmQuery.setStatus('mandatory')
sfrapPerfIcmpTotalRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxGmReport.setStatus('mandatory')
sfrapPerfIcmpTotalTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxGmReport.setStatus('mandatory')
sfrapPerfIcmpTotalRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalRxGmReduct.setStatus('mandatory')
sfrapPerfIcmpTotalTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIcmpTotalTxGmReduct.setStatus('mandatory')
sfrapPerfApplicationPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7), )
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTable.setStatus('mandatory')
sfrapPerfApplicationPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfApplicationPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfApplicationPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciEntry.setStatus('mandatory')
sfrapPerfApplicationPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciInterval.setStatus('mandatory')
sfrapPerfApplicationPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciValue.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxSnmp.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxSnmp.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxSnmpTrap.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxSnmpTrap.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxHttp.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxHttp.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxTelnet.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxTelnet.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxSmtp.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxSmtp.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxFtp.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxFtp.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxTftp.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxTftp.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxCustom1.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxCustom1.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxCustom2.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxCustom2.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxCustom3.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxCustom3.setStatus('mandatory')
sfrapPerfApplicationPerDlciRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciRxCustom4.setStatus('mandatory')
sfrapPerfApplicationPerDlciTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationPerDlciTxCustom4.setStatus('mandatory')
sfrapPerfApplicationTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8), )
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTable.setStatus('mandatory')
sfrapPerfApplicationTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfApplicationTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfApplicationTotalEntry.setStatus('mandatory')
sfrapPerfApplicationTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalInterval.setStatus('mandatory')
sfrapPerfApplicationTotalRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxSnmp.setStatus('mandatory')
sfrapPerfApplicationTotalTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxSnmp.setStatus('mandatory')
sfrapPerfApplicationTotalRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxSnmpTrap.setStatus('mandatory')
sfrapPerfApplicationTotalTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxSnmpTrap.setStatus('mandatory')
sfrapPerfApplicationTotalRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxHttp.setStatus('mandatory')
sfrapPerfApplicationTotalTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxHttp.setStatus('mandatory')
sfrapPerfApplicationTotalRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxTelnet.setStatus('mandatory')
sfrapPerfApplicationTotalTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxTelnet.setStatus('mandatory')
sfrapPerfApplicationTotalRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxSmtp.setStatus('mandatory')
sfrapPerfApplicationTotalTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxSmtp.setStatus('mandatory')
sfrapPerfApplicationTotalRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxFtp.setStatus('mandatory')
sfrapPerfApplicationTotalTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxFtp.setStatus('mandatory')
sfrapPerfApplicationTotalRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxTftp.setStatus('mandatory')
sfrapPerfApplicationTotalTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxTftp.setStatus('mandatory')
sfrapPerfApplicationTotalRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxCustom1.setStatus('mandatory')
sfrapPerfApplicationTotalTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxCustom1.setStatus('mandatory')
sfrapPerfApplicationTotalRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxCustom2.setStatus('mandatory')
sfrapPerfApplicationTotalTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxCustom2.setStatus('mandatory')
sfrapPerfApplicationTotalRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxCustom3.setStatus('mandatory')
sfrapPerfApplicationTotalTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxCustom3.setStatus('mandatory')
sfrapPerfApplicationTotalRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalRxCustom4.setStatus('mandatory')
sfrapPerfApplicationTotalTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfApplicationTotalTxCustom4.setStatus('mandatory')
sfrapPerfRoutingPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9), )
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciTable.setStatus('mandatory')
sfrapPerfRoutingPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfRoutingPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfRoutingPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciEntry.setStatus('mandatory')
sfrapPerfRoutingPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciInterval.setStatus('mandatory')
sfrapPerfRoutingPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciValue.setStatus('mandatory')
sfrapPerfRoutingPerDlciRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciRxOspf.setStatus('mandatory')
sfrapPerfRoutingPerDlciTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciTxOspf.setStatus('mandatory')
sfrapPerfRoutingPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciRxRip.setStatus('mandatory')
sfrapPerfRoutingPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciTxRip.setStatus('mandatory')
sfrapPerfRoutingPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciRxNetbios.setStatus('mandatory')
sfrapPerfRoutingPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingPerDlciTxNetbios.setStatus('mandatory')
sfrapPerfRoutingTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10), )
if mibBuilder.loadTexts: sfrapPerfRoutingTotalTable.setStatus('mandatory')
sfrapPerfRoutingTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfRoutingTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfRoutingTotalEntry.setStatus('mandatory')
sfrapPerfRoutingTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingTotalInterval.setStatus('mandatory')
sfrapPerfRoutingTotalRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingTotalRxOspf.setStatus('mandatory')
sfrapPerfRoutingTotalTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingTotalTxOspf.setStatus('mandatory')
sfrapPerfRoutingTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingTotalRxRip.setStatus('mandatory')
sfrapPerfRoutingTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingTotalTxRip.setStatus('mandatory')
sfrapPerfRoutingTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingTotalRxNetbios.setStatus('mandatory')
sfrapPerfRoutingTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfRoutingTotalTxNetbios.setStatus('mandatory')
sfrapPerfIpxPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11), )
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTable.setStatus('mandatory')
sfrapPerfIpxPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfIpxPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfIpxPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciEntry.setStatus('mandatory')
sfrapPerfIpxPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciInterval.setStatus('mandatory')
sfrapPerfIpxPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciValue.setStatus('mandatory')
sfrapPerfIpxPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciRxTotal.setStatus('mandatory')
sfrapPerfIpxPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTxTotal.setStatus('mandatory')
sfrapPerfIpxPerDlciRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciRxSpx.setStatus('mandatory')
sfrapPerfIpxPerDlciTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTxSpx.setStatus('mandatory')
sfrapPerfIpxPerDlciRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciRxNcp.setStatus('mandatory')
sfrapPerfIpxPerDlciTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTxNcp.setStatus('mandatory')
sfrapPerfIpxPerDlciRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciRxSap.setStatus('mandatory')
sfrapPerfIpxPerDlciTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTxSap.setStatus('mandatory')
sfrapPerfIpxPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciRxRip.setStatus('mandatory')
sfrapPerfIpxPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTxRip.setStatus('mandatory')
sfrapPerfIpxPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciRxNetbios.setStatus('mandatory')
sfrapPerfIpxPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTxNetbios.setStatus('mandatory')
sfrapPerfIpxPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciRxOther.setStatus('mandatory')
sfrapPerfIpxPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxPerDlciTxOther.setStatus('mandatory')
sfrapPerfIpxTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12), )
if mibBuilder.loadTexts: sfrapPerfIpxTotalTable.setStatus('mandatory')
sfrapPerfIpxTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfIpxTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfIpxTotalEntry.setStatus('mandatory')
sfrapPerfIpxTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalInterval.setStatus('mandatory')
sfrapPerfIpxTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalRxTotal.setStatus('mandatory')
sfrapPerfIpxTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalTxTotal.setStatus('mandatory')
sfrapPerfIpxTotalRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalRxSpx.setStatus('mandatory')
sfrapPerfIpxTotalTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalTxSpx.setStatus('mandatory')
sfrapPerfIpxTotalRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalRxNcp.setStatus('mandatory')
sfrapPerfIpxTotalTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalTxNcp.setStatus('mandatory')
sfrapPerfIpxTotalRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalRxSap.setStatus('mandatory')
sfrapPerfIpxTotalTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalTxSap.setStatus('mandatory')
sfrapPerfIpxTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalRxRip.setStatus('mandatory')
sfrapPerfIpxTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalTxRip.setStatus('mandatory')
sfrapPerfIpxTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalRxNetbios.setStatus('mandatory')
sfrapPerfIpxTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalTxNetbios.setStatus('mandatory')
sfrapPerfIpxTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalRxOther.setStatus('mandatory')
sfrapPerfIpxTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfIpxTotalTxOther.setStatus('mandatory')
sfrapPerfSnaPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13), )
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciTable.setStatus('mandatory')
sfrapPerfSnaPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfSnaPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfSnaPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciEntry.setStatus('mandatory')
sfrapPerfSnaPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciInterval.setStatus('mandatory')
sfrapPerfSnaPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciValue.setStatus('mandatory')
sfrapPerfSnaPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciRxTotal.setStatus('mandatory')
sfrapPerfSnaPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciTxTotal.setStatus('mandatory')
sfrapPerfSnaPerDlciRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciRxSubarea.setStatus('mandatory')
sfrapPerfSnaPerDlciTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciTxSubarea.setStatus('mandatory')
sfrapPerfSnaPerDlciRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciRxPeriph.setStatus('mandatory')
sfrapPerfSnaPerDlciTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciTxPeriph.setStatus('mandatory')
sfrapPerfSnaPerDlciRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciRxAppn.setStatus('mandatory')
sfrapPerfSnaPerDlciTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciTxAppn.setStatus('mandatory')
sfrapPerfSnaPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciRxNetbios.setStatus('mandatory')
sfrapPerfSnaPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciTxNetbios.setStatus('mandatory')
sfrapPerfSnaPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciRxOther.setStatus('mandatory')
sfrapPerfSnaPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaPerDlciTxOther.setStatus('mandatory')
sfrapPerfSnaTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14), )
if mibBuilder.loadTexts: sfrapPerfSnaTotalTable.setStatus('mandatory')
sfrapPerfSnaTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfSnaTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfSnaTotalEntry.setStatus('mandatory')
sfrapPerfSnaTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalInterval.setStatus('mandatory')
sfrapPerfSnaTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalRxTotal.setStatus('mandatory')
sfrapPerfSnaTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalTxTotal.setStatus('mandatory')
sfrapPerfSnaTotalRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalRxSubarea.setStatus('mandatory')
sfrapPerfSnaTotalTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalTxSubarea.setStatus('mandatory')
sfrapPerfSnaTotalRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalRxPeriph.setStatus('mandatory')
sfrapPerfSnaTotalTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalTxPeriph.setStatus('mandatory')
sfrapPerfSnaTotalRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalRxAppn.setStatus('mandatory')
sfrapPerfSnaTotalTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalTxAppn.setStatus('mandatory')
sfrapPerfSnaTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalRxNetbios.setStatus('mandatory')
sfrapPerfSnaTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalTxNetbios.setStatus('mandatory')
sfrapPerfSnaTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalRxOther.setStatus('mandatory')
sfrapPerfSnaTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfSnaTotalTxOther.setStatus('mandatory')
sfrapPerfArpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15), )
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTable.setStatus('mandatory')
sfrapPerfArpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfArpPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfArpPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfArpPerDlciEntry.setStatus('mandatory')
sfrapPerfArpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciInterval.setStatus('mandatory')
sfrapPerfArpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciValue.setStatus('mandatory')
sfrapPerfArpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxTotal.setStatus('mandatory')
sfrapPerfArpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxTotal.setStatus('mandatory')
sfrapPerfArpPerDlciRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxArpReq.setStatus('mandatory')
sfrapPerfArpPerDlciTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxArpReq.setStatus('mandatory')
sfrapPerfArpPerDlciRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxArpRep.setStatus('mandatory')
sfrapPerfArpPerDlciTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxArpRep.setStatus('mandatory')
sfrapPerfArpPerDlciRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxRarpReq.setStatus('mandatory')
sfrapPerfArpPerDlciTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxRarpReq.setStatus('mandatory')
sfrapPerfArpPerDlciRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxRarpRep.setStatus('mandatory')
sfrapPerfArpPerDlciTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxRarpRep.setStatus('mandatory')
sfrapPerfArpPerDlciRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxInarpReq.setStatus('mandatory')
sfrapPerfArpPerDlciTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxInarpReq.setStatus('mandatory')
sfrapPerfArpPerDlciRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxInarpRep.setStatus('mandatory')
sfrapPerfArpPerDlciTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxInarpRep.setStatus('mandatory')
sfrapPerfArpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciRxOther.setStatus('mandatory')
sfrapPerfArpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpPerDlciTxOther.setStatus('mandatory')
sfrapPerfArpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16), )
if mibBuilder.loadTexts: sfrapPerfArpTotalTable.setStatus('mandatory')
sfrapPerfArpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfArpTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfArpTotalEntry.setStatus('mandatory')
sfrapPerfArpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalInterval.setStatus('mandatory')
sfrapPerfArpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxTotal.setStatus('mandatory')
sfrapPerfArpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxTotal.setStatus('mandatory')
sfrapPerfArpTotalRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxArpReq.setStatus('mandatory')
sfrapPerfArpTotalTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxArpReq.setStatus('mandatory')
sfrapPerfArpTotalRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxArpRep.setStatus('mandatory')
sfrapPerfArpTotalTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxArpRep.setStatus('mandatory')
sfrapPerfArpTotalRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxRarpReq.setStatus('mandatory')
sfrapPerfArpTotalTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxRarpReq.setStatus('mandatory')
sfrapPerfArpTotalRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxRarpRep.setStatus('mandatory')
sfrapPerfArpTotalTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxRarpRep.setStatus('mandatory')
sfrapPerfArpTotalRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxInarpReq.setStatus('mandatory')
sfrapPerfArpTotalTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxInarpReq.setStatus('mandatory')
sfrapPerfArpTotalRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxInarpRep.setStatus('mandatory')
sfrapPerfArpTotalTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxInarpRep.setStatus('mandatory')
sfrapPerfArpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalRxOther.setStatus('mandatory')
sfrapPerfArpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfArpTotalTxOther.setStatus('mandatory')
sfrapPerfLmiPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17), )
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciTable.setStatus('mandatory')
sfrapPerfLmiPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfLmiPerDlciInterval"), (0, "SFRAP-MIB", "sfrapPerfLmiPerDlciValue"))
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciEntry.setStatus('mandatory')
sfrapPerfLmiPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciInterval.setStatus('mandatory')
sfrapPerfLmiPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciValue.setStatus('mandatory')
sfrapPerfLmiPerDlciRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciRxTotalByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciTxTotalByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciRxLivoEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciTxLivoEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciRxLivoStatByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciTxLivoStatByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciRxFullEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciTxFullEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciRxFullStatByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciTxFullStatByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciRxOtherByteCnt.setStatus('mandatory')
sfrapPerfLmiPerDlciTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiPerDlciTxOtherByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18), )
if mibBuilder.loadTexts: sfrapPerfLmiTotalTable.setStatus('mandatory')
sfrapPerfLmiTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfLmiTotalInterval"))
if mibBuilder.loadTexts: sfrapPerfLmiTotalEntry.setStatus('mandatory')
sfrapPerfLmiTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalInterval.setStatus('mandatory')
sfrapPerfLmiTotalDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalDlciValue.setStatus('mandatory')
sfrapPerfLmiTotalRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalRxTotalByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalTxTotalByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalRxLivoEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalTxLivoEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalRxLivoStatByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalTxLivoStatByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalRxFullEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalTxFullEnqByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalRxFullStatByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalTxFullStatByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalRxOtherByteCnt.setStatus('mandatory')
sfrapPerfLmiTotalTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 4, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfLmiTotalTxOtherByteCnt.setStatus('mandatory')
sfrapPerfNetworkLongTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 5))
sfrapPerfNetwLongTermTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 1), )
if mibBuilder.loadTexts: sfrapPerfNetwLongTermTable.setStatus('mandatory')
sfrapPerfNetwLongTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 1, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfNetwLongTermDlci"), (0, "SFRAP-MIB", "sfrapPerfNetwLongTermProtocol"), (0, "SFRAP-MIB", "sfrapPerfNetwLongTermInterval"))
if mibBuilder.loadTexts: sfrapPerfNetwLongTermEntry.setStatus('mandatory')
sfrapPerfNetwLongTermDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwLongTermDlci.setStatus('mandatory')
sfrapPerfNetwLongTermProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-c", 129), ("thru-frame-rx-c", 130), ("thru-fecn-tx-c", 131), ("thru-fecn-rx-c", 132), ("thru-becn-tx-c", 133), ("thru-becn-rx-c", 134), ("thru-de-tx-c", 135), ("thru-de-rx-c", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwLongTermProtocol.setStatus('mandatory')
sfrapPerfNetwLongTermInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwLongTermInterval.setStatus('mandatory')
sfrapPerfNetwLongTermValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwLongTermValue.setStatus('mandatory')
sfrapPerfNetwLongTermAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 2), )
if mibBuilder.loadTexts: sfrapPerfNetwLongTermAltTable.setStatus('mandatory')
sfrapPerfNetwLongTermAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 2, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfNetwLongTermAltDlci"), (0, "SFRAP-MIB", "sfrapPerfNetwLongTermAltProtocol"))
if mibBuilder.loadTexts: sfrapPerfNetwLongTermAltEntry.setStatus('mandatory')
sfrapPerfNetwLongTermAltDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwLongTermAltDlci.setStatus('mandatory')
sfrapPerfNetwLongTermAltProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-c", 129), ("thru-frame-rx-c", 130), ("thru-fecn-tx-c", 131), ("thru-fecn-rx-c", 132), ("thru-becn-tx-c", 133), ("thru-becn-rx-c", 134), ("thru-de-tx-c", 135), ("thru-de-rx-c", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwLongTermAltProtocol.setStatus('mandatory')
sfrapPerfNetwLongTermAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfNetwLongTermAltArray.setStatus('mandatory')
sfrapPerfNetworkLongTermCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 3))
sfrapPerfNetworkLongTermCmdClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapPerfNetworkLongTermCmdClear.setStatus('mandatory')
sfrapPerfCirPercentUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 6))
sfrapPerfCirPercentUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1), )
if mibBuilder.loadTexts: sfrapPerfCirPercentUtilizationTable.setStatus('mandatory')
sfrapPerfCirPercentUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfCirPercentUtilizationInterval"), (0, "SFRAP-MIB", "sfrapPerfCirPercentUtilizationDlciValue"))
if mibBuilder.loadTexts: sfrapPerfCirPercentUtilizationEntry.setStatus('mandatory')
sfrapPerfCirPercentUtilizationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirPercentUtilizationInterval.setStatus('mandatory')
sfrapPerfCirPercentUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirPercentUtilizationDlciValue.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange1.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange2.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange3.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange4.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange5.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange6.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange7.setStatus('mandatory')
sfrapPerfCirRxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirRxPercentUtilizationRange8.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange1.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange2.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange3.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange4.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange5.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange6.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange7.setStatus('mandatory')
sfrapPerfCirTxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCirTxPercentUtilizationRange8.setStatus('mandatory')
sfrapPerfCurrentPerDlciUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 2), )
if mibBuilder.loadTexts: sfrapPerfCurrentPerDlciUtilizationTable.setStatus('mandatory')
sfrapPerfCurrentPerDlciUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 2, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapPerfCurrentPerDlciUtilizationDlciValue"))
if mibBuilder.loadTexts: sfrapPerfCurrentPerDlciUtilizationEntry.setStatus('mandatory')
sfrapPerfCurrentPerDlciUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCurrentPerDlciUtilizationDlciValue.setStatus('mandatory')
sfrapPerfCurrentPerDlciRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCurrentPerDlciRxUtilization.setStatus('mandatory')
sfrapPerfCurrentPerDlciTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCurrentPerDlciTxUtilization.setStatus('mandatory')
sfrapPerfCurrentPerDlciAggregateUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCurrentPerDlciAggregateUtilization.setStatus('mandatory')
sfrapPerfCurrentUnitUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 3))
sfrapPerfCurrentDteUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCurrentDteUtilization.setStatus('mandatory')
sfrapPerfCurrentWanUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCurrentWanUtilization.setStatus('mandatory')
sfrapPerfCurrentAggregateUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfCurrentAggregateUtilization.setStatus('mandatory')
sfrapPerfFRStatsCollectionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 5, 7))
sfrapPerfFRStatsCollection = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-collecting-stats", 1), ("collecting-stats", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPerfFRStatsCollection.setStatus('mandatory')
sfrapEventTrapLog = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 7, 10))
sfrapEventTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 10, 1), )
if mibBuilder.loadTexts: sfrapEventTrapLogTable.setStatus('mandatory')
sfrapEventTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapEventTrapLogSeqNum"))
if mibBuilder.loadTexts: sfrapEventTrapLogEntry.setStatus('mandatory')
sfrapEventTrapLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventTrapLogSeqNum.setStatus('mandatory')
sfrapEventTrapLogGenericEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventTrapLogGenericEvent.setStatus('mandatory')
sfrapEventTrapLogSpecificEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventTrapLogSpecificEvent.setStatus('mandatory')
sfrapEventTrapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventTrapLogTimeStamp.setStatus('mandatory')
sfrapEventTrapLogVarBind1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventTrapLogVarBind1.setStatus('mandatory')
sfrapEventTrapLogVarBind2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventTrapLogVarBind2.setStatus('mandatory')
sfrapEventTrapLogVarBind3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventTrapLogVarBind3.setStatus('mandatory')
sfrapEventLogAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 7, 10, 2), )
if mibBuilder.loadTexts: sfrapEventLogAltTable.setStatus('mandatory')
sfrapEventLogAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 7, 10, 2, 1), ).setIndexNames((0, "SFRAP-MIB", "sfrapEventLogAltSeqNum"))
if mibBuilder.loadTexts: sfrapEventLogAltEntry.setStatus('mandatory')
sfrapEventLogAltSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventLogAltSeqNum.setStatus('mandatory')
sfrapEventLogAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 7, 10, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventLogAltArray.setStatus('mandatory')
sfrapEventLogCurrentSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapEventLogCurrentSeqNum.setStatus('mandatory')
sfrapEventLogFreeze = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze", 1), ("un-freeze", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapEventLogFreeze.setStatus('mandatory')
sfrapEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfrapEventLogClear.setStatus('mandatory')
sfrapAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 14, 15, 16, 17, 18, 19, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 75, 76, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 138, 139, 140, 141, 142, 257, 258, 259, 260, 261, 262, 263, 264, 265))).clone(namedValues=NamedValues(("bad-config-in-set", 1), ("config-local-update", 2), ("local-unit-loopback-enabled", 14), ("local-unit-loopback-disabled", 15), ("local-unit-loopback-failure", 16), ("local-dte-loopback-enabled", 17), ("local-dte-loopback-disabled", 18), ("local-dte-loopback-failure", 19), ("dlci-active", 47), ("dlci-inactive", 48), ("dlci-td-threshold", 49), ("lmi-sourcing-change-passthru", 50), ("lmi-sourcing-change-user-dte", 51), ("lmi-sourcing-change-net-dte", 52), ("lmi-sourcing-change-user-net", 53), ("lmi-sourcing-change-net-net", 54), ("dte-signal-rts-on", 55), ("dte-signal-rts-off", 56), ("dte-signal-dtr-on", 57), ("dte-signal-dtr-off", 58), ("lmi-non-incr-seq-num-dte", 59), ("lmi-non-incr-seq-num-net", 60), ("lmi-seq-num-mismatch-dte", 61), ("lmi-seq-num-mismatch-net", 62), ("trap-muting-active", 75), ("trap-muting-inactive", 76), ("low-speed-exceeded", 80), ("low-speed-resumed", 81), ("op-mode-cutthru-enabled", 82), ("op-mode-cutthru-disabled", 83), ("local-dte2-loopback-enabled", 84), ("local-dte2-loopback-disabled", 85), ("local-dte2-loopback-failure", 86), ("vloop-loop-up", 90), ("vloop-loop-down", 91), ("vloop-up-via-remote", 92), ("vloop-down-via-remote", 93), ("vloop-failed", 94), ("vbert-started", 95), ("vbert-stopped", 96), ("vbert-request-failed", 97), ("dte-signal-control-on", 100), ("dte-signal-control-off", 101), ("dte-signal-indicate-on", 102), ("dte-signal-indicate-off", 103), ("pvc-rx-utilization-exceeded", 138), ("pvc-tx-utilization-exceeded", 139), ("pvc-rx-utilization-cleared", 140), ("pvc-tx-utilization-cleared", 141), ("config-install-success", 142), ("tftp-requested", 257), ("tftp-transferring", 258), ("tftp-programming", 259), ("tftp-aborted", 260), ("tftp-success", 261), ("tftp-host-unreachable", 262), ("tftp-no-file", 263), ("tftp-invalid-file", 264), ("tftp-corrupt-file", 265)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapAlarmType.setStatus('mandatory')
sfrapDLCINum = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapDLCINum.setStatus('mandatory')
sfrapInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-dte", 1), ("to-dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapInterface.setStatus('mandatory')
sfrapIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapIpAddress.setStatus('mandatory')
sfrapPercentUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapPercentUtilization.setStatus('mandatory')
sfrapUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapUtilizationThreshold.setStatus('mandatory')
sfrapCfgLockIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfrapCfgLockIpAddress.setStatus('mandatory')
sfrapTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,0)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapBadConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,1)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,2)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalUnitLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,14)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalUnitLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,15)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalUnitLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,16)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalToDteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,17)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalToDteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,18)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalToDteLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,19)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDLCIActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,47)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"))
sfrapDLCIInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,48)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"))
sfrapDLCITDThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,49)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapIpAddress"))
sfrapLmiSourcingChangePassthruTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,50)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLmiSourcingChangeUserToDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,51)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLmiSourcingChangeNetToDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,52)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLmiSourcingChangeUserToDceTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,53)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLmiSourcingChangeNetToDceTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,54)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDteSignalRtsOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,55)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDteSignalRtsOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,56)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDteSignalDtrOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,57)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDteSignalDtrOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,58)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapNonIncrLmiSeqNumToDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,59)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapNonIncrLmiSeqNumToDceTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,60)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLmiSeqNumMismatchToDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,61)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLmiSeqNumMismatchToDceTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,62)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTrapMutingActive = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,75)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTrapMutingInactive = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,76)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLowSpeedExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,80)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLowSpeedResumedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,81)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapOpModeCutThruEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,82)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapOpModeCutThruDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,83)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalDte2LoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,84)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalDte2LoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,85)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapLocalDte2LoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,86)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapVloopUp = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,90)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapVloopDown = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,91)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapVloopUpViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,92)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapVloopDownViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,93)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapVloopRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,94)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapVbertStarted = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,95)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapVbertStopped = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,96)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapVbertRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,97)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapInterface"))
sfrapDteSignalControlOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,100)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDteSignalControlOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,101)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDteSignalIndicateOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,102)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapDteSignalIndicateOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,103)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapPvcRxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,138)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapPercentUtilization"), ("SFRAP-MIB", "sfrapUtilizationThreshold"))
sfrapPvcTxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,139)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapPercentUtilization"), ("SFRAP-MIB", "sfrapUtilizationThreshold"))
sfrapPvcRxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,140)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapPercentUtilization"), ("SFRAP-MIB", "sfrapUtilizationThreshold"))
sfrapPvcTxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,141)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapDLCINum"), ("SFRAP-MIB", "sfrapPercentUtilization"), ("SFRAP-MIB", "sfrapUtilizationThreshold"))
sfrapConfigInstallSuccess = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,142)).setObjects(("SFRAP-MIB", "sfrapAlarmType"), ("SFRAP-MIB", "sfrapCfgLockIpAddress"))
sfrapTftpRequestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,257)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpTransferringTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,258)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpProgrammingTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,259)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpAbortedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,260)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,261)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpHostUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,262)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpNoFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,263)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpInvalidFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,264)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
sfrapTftpCorruptFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 7) + (0,265)).setObjects(("SFRAP-MIB", "sfrapAlarmType"))
mibBuilder.exportSymbols("SFRAP-MIB", sfrapPerfThruputPerIntfTxFrameCnt=sfrapPerfThruputPerIntfTxFrameCnt, sfrapPerfArpTotalRxArpReq=sfrapPerfArpTotalRxArpReq, sfrapVnipTopoVBertTxDESetFrames=sfrapVnipTopoVBertTxDESetFrames, sfrapPerfThruputCmdClearToDceStats=sfrapPerfThruputCmdClearToDceStats, sfrapPerfNetwProtoPerDlciTxTotal=sfrapPerfNetwProtoPerDlciTxTotal, sfrapPerfThruputPerIntfTable=sfrapPerfThruputPerIntfTable, sfrapPerfApplicationTotalEntry=sfrapPerfApplicationTotalEntry, sfrapPerfSnaPerDlciRxNetbios=sfrapPerfSnaPerDlciRxNetbios, sfrapPerfMgmtIpUDPNoPorts=sfrapPerfMgmtIpUDPNoPorts, sfrapPerfIcmpTotalTxGmQuery=sfrapPerfIcmpTotalTxGmQuery, sfrapPerfCirTxPercentUtilizationRange1=sfrapPerfCirTxPercentUtilizationRange1, sfrapPerfArpTotalRxTotal=sfrapPerfArpTotalRxTotal, sfrapCfgFrLmiFullStatus=sfrapCfgFrLmiFullStatus, sfrapPerfApplicationPerDlciTxCustom1=sfrapPerfApplicationPerDlciTxCustom1, sfrapPerfLmiPerDlciRxLivoStatByteCnt=sfrapPerfLmiPerDlciRxLivoStatByteCnt, sfrapVnipTopologyDlci=sfrapVnipTopologyDlci, sfrapStatusMgmtChannel=sfrapStatusMgmtChannel, sfrapCfgTransitDelayDlciValue=sfrapCfgTransitDelayDlciValue, sfrapPerfApplicationPerDlciRxCustom2=sfrapPerfApplicationPerDlciRxCustom2, sfrapPerfThruputPerDlciRxThruput=sfrapPerfThruputPerDlciRxThruput, sfrapSysSLIPSupported=sfrapSysSLIPSupported, sfrapPerfIcmpPerDlciRxSrcQuench=sfrapPerfIcmpPerDlciRxSrcQuench, sfrapPerfLmiPerDlciTxOtherByteCnt=sfrapPerfLmiPerDlciTxOtherByteCnt, sfrapPerfCurrentPerDlciUtilizationEntry=sfrapPerfCurrentPerDlciUtilizationEntry, sfrapPerfIpxPerDlciTable=sfrapPerfIpxPerDlciTable, sfrapDiagVBERTTestPeriod=sfrapDiagVBERTTestPeriod, sfrapStatusMgmtTable=sfrapStatusMgmtTable, sfrapVnipTopoTDMinDelay=sfrapVnipTopoTDMinDelay, sfrapPerfIcmpTotalRxRedirect=sfrapPerfIcmpTotalRxRedirect, sfrapPerfIcmpTotalTxSrcQuench=sfrapPerfIcmpTotalTxSrcQuench, sfrapStatusDteDcd=sfrapStatusDteDcd, sfrapStatusMgmtInterfaceStatus=sfrapStatusMgmtInterfaceStatus, sfrapPerfLmiPerDlciRxFullEnqByteCnt=sfrapPerfLmiPerDlciRxFullEnqByteCnt, sfrapCfgFrPerfLTProtocolFilterTable=sfrapCfgFrPerfLTProtocolFilterTable, sfrapPerfThruputPerDlciRxFrame=sfrapPerfThruputPerDlciRxFrame, sfrapVnipTopoTDAvgDelay=sfrapVnipTopoTDAvgDelay, sfrapPerfIcmpTotalRxGmReduct=sfrapPerfIcmpTotalRxGmReduct, sfrapCfgTransitDelayEntry=sfrapCfgTransitDelayEntry, sfrapPerfRoutingTotalTxNetbios=sfrapPerfRoutingTotalTxNetbios, sfrapLmiSourcing=sfrapLmiSourcing, sfrapPerfApplicationTotalRxFtp=sfrapPerfApplicationTotalRxFtp, sfrapPerfIpxPerDlciTxTotal=sfrapPerfIpxPerDlciTxTotal, sfrapTftpCorruptFileTrap=sfrapTftpCorruptFileTrap, sfrapCfgSecurityTable=sfrapCfgSecurityTable, sfrapDiagVnipIndex=sfrapDiagVnipIndex, sfrapPerfLmiTotalTxLivoStatByteCnt=sfrapPerfLmiTotalTxLivoStatByteCnt, sfrapPerfRoutingTotalInterval=sfrapPerfRoutingTotalInterval, sfrapPerfArpTotalTxArpReq=sfrapPerfArpTotalTxArpReq, sfrapCfgDteEntry=sfrapCfgDteEntry, sfrapCfgDteIndex=sfrapCfgDteIndex, sfrapPerfIpxTotalRxTotal=sfrapPerfIpxTotalRxTotal, sfrapPerfThruputPerDlciMTBSO=sfrapPerfThruputPerDlciMTBSO, sfrapPerfLmiTotalTxFullStatByteCnt=sfrapPerfLmiTotalTxFullStatByteCnt, sfrapCfgFrDLCITable=sfrapCfgFrDLCITable, sfrapSysNumSnmpMgrs=sfrapSysNumSnmpMgrs, sfrapVloopUpViaRemote=sfrapVloopUpViaRemote, sfrapPerfCurrentAggregateUtilization=sfrapPerfCurrentAggregateUtilization, sfrapPerfThruputPerDlciRxFecn=sfrapPerfThruputPerDlciRxFecn, sfrapVnipTopoVBertRxDEClrFrames=sfrapVnipTopoVBertRxDEClrFrames, sfrapPerfArpPerDlciRxRarpRep=sfrapPerfArpPerDlciRxRarpRep, sfrapPerfLmiPerDlciEntry=sfrapPerfLmiPerDlciEntry, sfrapPerfIpxPerDlciRxNcp=sfrapPerfIpxPerDlciRxNcp, sfrapPerfLmiPerDlciRxFullStatByteCnt=sfrapPerfLmiPerDlciRxFullStatByteCnt, sfrapCfgFrDLCIMode=sfrapCfgFrDLCIMode, sfrapPerfArpPerDlciTxInarpRep=sfrapPerfArpPerDlciTxInarpRep, sfrapSysTable=sfrapSysTable, sfrapCfgIpChannel=sfrapCfgIpChannel, sfrapStatusLedLmiErrLED=sfrapStatusLedLmiErrLED, sfrapPerfApplicationTotalTxHttp=sfrapPerfApplicationTotalTxHttp, sfrapLocalDte2LoopbackFailedTrap=sfrapLocalDte2LoopbackFailedTrap, sfrapSysFeatureTable=sfrapSysFeatureTable, sfrapPerfLmiPerDlciRxLivoEnqByteCnt=sfrapPerfLmiPerDlciRxLivoEnqByteCnt, sfrapPerfMgmtIpIFOperStatus=sfrapPerfMgmtIpIFOperStatus, sfrapPerfLmiPerDlciTxFullStatByteCnt=sfrapPerfLmiPerDlciTxFullStatByteCnt, sfrapTrap=sfrapTrap, sfrapPerfSnaPerDlciRxOther=sfrapPerfSnaPerDlciRxOther, sfrapStatus=sfrapStatus, sfrapPerfIpxTotalRxNcp=sfrapPerfIpxTotalRxNcp, sfrapPerfApplicationPerDlciInterval=sfrapPerfApplicationPerDlciInterval, sfrapPerfLmiPerDlciTxLivoStatByteCnt=sfrapPerfLmiPerDlciTxLivoStatByteCnt, sfrapVnipTopologyIpAddr=sfrapVnipTopologyIpAddr, sfrapVnipTopoVBertPerUtilCIR=sfrapVnipTopoVBertPerUtilCIR, sfrapPerfLmiTotalRxLivoStatByteCnt=sfrapPerfLmiTotalRxLivoStatByteCnt, sfrapVnipTopologyEntry=sfrapVnipTopologyEntry, sfrapEventLogAltEntry=sfrapEventLogAltEntry, sfrapCfgFrLmiInactivityTimeout=sfrapCfgFrLmiInactivityTimeout, sfrapCfgFrPerfLTProtocolFilterTableClear=sfrapCfgFrPerfLTProtocolFilterTableClear, sfrapCfgFrPerfDlciNamesCirValue=sfrapCfgFrPerfDlciNamesCirValue, sfrapCfgAppPerfBuffLimit=sfrapCfgAppPerfBuffLimit, sfrapStatusDteDsr=sfrapStatusDteDsr, sfrapPerfApplicationPerDlciRxSmtp=sfrapPerfApplicationPerDlciRxSmtp, sfrapPerfIpTotalTxUdp=sfrapPerfIpTotalTxUdp, sfrapCfgTftpStatus=sfrapCfgTftpStatus, sfrapPerfIcmpPerDlciTxGmQuery=sfrapPerfIcmpPerDlciTxGmQuery, sfrapPerfIcmpPerDlciRxTimestpReq=sfrapPerfIcmpPerDlciRxTimestpReq, sfrapIpAddress=sfrapIpAddress, sfrapTrapMutingInactive=sfrapTrapMutingInactive, sfrapPerfThruputPerIntfTxByteCnt=sfrapPerfThruputPerIntfTxByteCnt, sfrapPerfIpPerDlciRxIgrp=sfrapPerfIpPerDlciRxIgrp, sfrapPerfSnaTotalRxNetbios=sfrapPerfSnaTotalRxNetbios, sfrapPerfThruputPerDlciPvcState=sfrapPerfThruputPerDlciPvcState, sfrapSysExtTimSupported=sfrapSysExtTimSupported, sfrapPerfSnaPerDlciTable=sfrapPerfSnaPerDlciTable, sfrapSysNumDlciNames=sfrapSysNumDlciNames, sfrapPerfNetwLongTermInterval=sfrapPerfNetwLongTermInterval, sfrapPerfIpTotalRxTcp=sfrapPerfIpTotalRxTcp, sfrapPerfMgmtIpICMPInEchos=sfrapPerfMgmtIpICMPInEchos, sfrapPerfIcmpTotalTxParamProb=sfrapPerfIcmpTotalTxParamProb, sfrapPerfThruputCommands=sfrapPerfThruputCommands, sfrapCfgFrPerfDlciUtilDuration=sfrapCfgFrPerfDlciUtilDuration, sfrapPerfApplicationTotalTxSnmp=sfrapPerfApplicationTotalTxSnmp, sfrapCfgCommDataBits=sfrapCfgCommDataBits, sfrapStatusLedIndLED=sfrapStatusLedIndLED, sfrapPerfArpTotalRxInarpRep=sfrapPerfArpTotalRxInarpRep, sfrapPerfSnaPerDlciTxNetbios=sfrapPerfSnaPerDlciTxNetbios, sfrapCfgFrPerfTimers=sfrapCfgFrPerfTimers, sfrapPerfCirPercentUtilizationEntry=sfrapPerfCirPercentUtilizationEntry, sfrapStatusDipswitchIntfMode1=sfrapStatusDipswitchIntfMode1, sfrapPerfIpTotalTxOther=sfrapPerfIpTotalTxOther, sfrapPerfLmiTotalInterval=sfrapPerfLmiTotalInterval, sfrapPerfNetwLongTermDlci=sfrapPerfNetwLongTermDlci, sfrapCfgFrPerfDlciDefaultUtilThreshold=sfrapCfgFrPerfDlciDefaultUtilThreshold, sfrapPerfArpPerDlciTxArpRep=sfrapPerfArpPerDlciTxArpRep, sfrapSysBRISupported=sfrapSysBRISupported, sfrapDteSignalRtsOnTrap=sfrapDteSignalRtsOnTrap, sfrapPerfMgmtIpICMPInParmProbs=sfrapPerfMgmtIpICMPInParmProbs, sfrapDiagUnitCutThruTimeRemaining=sfrapDiagUnitCutThruTimeRemaining, sfrapStatusDipswitchToDceLpbk=sfrapStatusDipswitchToDceLpbk, sfrapBadConfigTrap=sfrapBadConfigTrap, sfrapPerfThruputCmdReplaceDlciValue=sfrapPerfThruputCmdReplaceDlciValue, sfrapPerfApplicationTotalTxSmtp=sfrapPerfApplicationTotalTxSmtp, sfrapDteSignalControlOnTrap=sfrapDteSignalControlOnTrap, sfrapPerfIcmpTotalRxSrcQuench=sfrapPerfIcmpTotalRxSrcQuench, sfrapPerfIcmpPerDlciTxRedirect=sfrapPerfIcmpPerDlciTxRedirect, sfrapCfgSnmpMgrIP=sfrapCfgSnmpMgrIP, sfrapCfgStatus=sfrapCfgStatus, sfrapPerfArpTotalRxInarpReq=sfrapPerfArpTotalRxInarpReq, sfrapPerfIpxTotalRxRip=sfrapPerfIpxTotalRxRip, sfrapPerfApplicationTotalRxTelnet=sfrapPerfApplicationTotalRxTelnet, sfrapVBertClear=sfrapVBertClear, sfrapCfgVnipTransitDelayFrequency=sfrapCfgVnipTransitDelayFrequency, sfrapCfgDteIntfType=sfrapCfgDteIntfType, sfrapPerfArpPerDlciRxInarpRep=sfrapPerfArpPerDlciRxInarpRep, sfrapPerfSnaPerDlciTxOther=sfrapPerfSnaPerDlciTxOther, sfrapDiagVnipIpAddr=sfrapDiagVnipIpAddr, sfrapPerfIcmpTotalRxTimestpRep=sfrapPerfIcmpTotalRxTimestpRep, sfrapPerfIpxTotalEntry=sfrapPerfIpxTotalEntry, sfrapCfgSetCommunityString=sfrapCfgSetCommunityString, sfrapStatusTxClockDetect=sfrapStatusTxClockDetect, sfrapPerfMgmtIpICMPInTimeExcds=sfrapPerfMgmtIpICMPInTimeExcds, sfrapPerfIpxTotalTable=sfrapPerfIpxTotalTable, sfrapStatusDteCtrl=sfrapStatusDteCtrl, sfrapPerfApplicationTotalRxCustom2=sfrapPerfApplicationTotalRxCustom2, sfrapConfiguration=sfrapConfiguration, sfrapPerfCirPercentUtilizationInterval=sfrapPerfCirPercentUtilizationInterval, sfrapPerfApplicationPerDlciTxSnmpTrap=sfrapPerfApplicationPerDlciTxSnmpTrap, sfrapDiagVnipInterface=sfrapDiagVnipInterface, sfrapStatusLmiAutosense=sfrapStatusLmiAutosense, sfrapLmiSourcingChangeNetToDteTrap=sfrapLmiSourcingChangeNetToDteTrap, sfrapPerfNetwProtoPerDlciTxSna=sfrapPerfNetwProtoPerDlciTxSna, sfrapPerfCurrentPerDlciTxUtilization=sfrapPerfCurrentPerDlciTxUtilization, sfrapPerfIcmpPerDlciValue=sfrapPerfIcmpPerDlciValue, sfrapStatusLedCtsLED=sfrapStatusLedCtsLED, sfrapPerfThruputCmdAllStsDlciResetAll=sfrapPerfThruputCmdAllStsDlciResetAll, sfrapEventLogAltArray=sfrapEventLogAltArray, sfrapPerfNetwProtoTotalTxIpx=sfrapPerfNetwProtoTotalTxIpx, sfrapPerfApplicationTotalTxTftp=sfrapPerfApplicationTotalTxTftp, sfrapDiagVBERTSize=sfrapDiagVBERTSize, sfrapPerfSnaTotalRxPeriph=sfrapPerfSnaTotalRxPeriph, sfrapLmiSeqNumMismatchToDteTrap=sfrapLmiSeqNumMismatchToDteTrap, sfrapCfgFrPerfUserProtocolsEntry=sfrapCfgFrPerfUserProtocolsEntry, sfrapDiagDteLclLpbk=sfrapDiagDteLclLpbk, sfrapDiagVBERTPktPercent=sfrapDiagVBERTPktPercent, sfrapPerfNetwProtoPerDlciEntry=sfrapPerfNetwProtoPerDlciEntry, sfrapPerfIcmpTotalRxAddrMaskReq=sfrapPerfIcmpTotalRxAddrMaskReq, sfrapPerfIcmpPerDlciTxAddrMaskRep=sfrapPerfIcmpPerDlciTxAddrMaskRep, sfrapPerfLmiTotalRxFullEnqByteCnt=sfrapPerfLmiTotalRxFullEnqByteCnt, sfrapPerfArpPerDlciEntry=sfrapPerfArpPerDlciEntry, sfrapStatusLedToDCERxLED=sfrapStatusLedToDCERxLED, sfrapPerfNetworkLongTermCommands=sfrapPerfNetworkLongTermCommands, sfrapVloopRequestFailed=sfrapVloopRequestFailed, sfrapStatusDteIndex=sfrapStatusDteIndex, sfrapPerfIpxPerDlciValue=sfrapPerfIpxPerDlciValue, sfrapPerfIpxPerDlciTxSpx=sfrapPerfIpxPerDlciTxSpx, sfrapPerfSnaPerDlciRxTotal=sfrapPerfSnaPerDlciRxTotal, sfrapPerfIcmpTotalTxEchoReq=sfrapPerfIcmpTotalTxEchoReq, sfrapPerfThruputPerDlciCreateTime=sfrapPerfThruputPerDlciCreateTime, sfrapPerfIcmpPerDlciRxTotal=sfrapPerfIcmpPerDlciRxTotal, sfrapPerfNetwProtoPerDlciTable=sfrapPerfNetwProtoPerDlciTable, sfrapPerfApplicationTotalTxCustom4=sfrapPerfApplicationTotalTxCustom4, sfrapTftpAbortedTrap=sfrapTftpAbortedTrap, sfrapDteSignalIndicateOffTrap=sfrapDteSignalIndicateOffTrap, sfrapCfgFrPerfLTProtocolFilterProtocol=sfrapCfgFrPerfLTProtocolFilterProtocol, sfrapPerfNetwProtoPerDlciRxSna=sfrapPerfNetwProtoPerDlciRxSna, sfrapPerfNetwProtoTotalTxOther=sfrapPerfNetwProtoTotalTxOther, sfrapSysLTFNumProtocols=sfrapSysLTFNumProtocols, sfrapPerfApplicationPerDlciTxSmtp=sfrapPerfApplicationPerDlciTxSmtp, sfrapStatusLedCtrlLED=sfrapStatusLedCtrlLED, sfrapPerfApplicationPerDlciTxCustom4=sfrapPerfApplicationPerDlciTxCustom4, sfrapCfgFrPerfUnprovDlcisDelete=sfrapCfgFrPerfUnprovDlcisDelete, sfrapEventTrapLogGenericEvent=sfrapEventTrapLogGenericEvent, sfrapPerfApplicationPerDlciTxFtp=sfrapPerfApplicationPerDlciTxFtp, sfrapPerfSnaTotalTxAppn=sfrapPerfSnaTotalTxAppn, sfrapCfgTelnetCliPassword=sfrapCfgTelnetCliPassword, sfrapPerfArpTotalTxInarpReq=sfrapPerfArpTotalTxInarpReq, sfrapPerfSnaPerDlciInterval=sfrapPerfSnaPerDlciInterval, sfrapPerfLmiPerDlciTxFullEnqByteCnt=sfrapPerfLmiPerDlciTxFullEnqByteCnt, sfrapPerfCirTxPercentUtilizationRange5=sfrapPerfCirTxPercentUtilizationRange5, sfrapPerfNetwProtoPerDlciRxCisco=sfrapPerfNetwProtoPerDlciRxCisco, sfrapPerfThruputCmdClearDlciStats=sfrapPerfThruputCmdClearDlciStats, sfrapPerfIpPerDlciTxTotal=sfrapPerfIpPerDlciTxTotal, sfrapPerfArpTotalTxRarpReq=sfrapPerfArpTotalTxRarpReq, sfrapPerfIpxTotalRxSpx=sfrapPerfIpxTotalRxSpx, sfrapCfgTDDeleteEntry=sfrapCfgTDDeleteEntry, sfrapStatusMgmtDefaultDLCINo=sfrapStatusMgmtDefaultDLCINo, sfrapSysMLSupported=sfrapSysMLSupported, sfrapPerfThruputPerDlciDowntime=sfrapPerfThruputPerDlciDowntime, sfrapPerfNetwProtoTotalTxSna=sfrapPerfNetwProtoTotalTxSna, sfrapAlarmType=sfrapAlarmType, sfrapPerfIcmpPerDlciTxTimestpRep=sfrapPerfIcmpPerDlciTxTimestpRep, sfrapCfgLockIpAddress=sfrapCfgLockIpAddress, sfrapPerfMgmtIpIPInAddrErr=sfrapPerfMgmtIpIPInAddrErr, sfrapPerfNetwProtoTotalTxVnip=sfrapPerfNetwProtoTotalTxVnip, sfrapPerfIpxTotalRxSap=sfrapPerfIpxTotalRxSap, sfrapLocalDte2LoopbackEnabledTrap=sfrapLocalDte2LoopbackEnabledTrap, sfrapPerfMgmtIpICMPOutEchos=sfrapPerfMgmtIpICMPOutEchos, sfrapCfgFrAddrResInarpTimer=sfrapCfgFrAddrResInarpTimer, sfrapCfgFrPerfTimersLTInterval=sfrapCfgFrPerfTimersLTInterval, sfrapPerfSnaPerDlciTxPeriph=sfrapPerfSnaPerDlciTxPeriph, sfrapPerfIpxPerDlciTxOther=sfrapPerfIpxPerDlciTxOther, sfrapCfgAppTable=sfrapCfgAppTable, sfrapEventLogFreeze=sfrapEventLogFreeze, sfrapSysLTFNumDlcis=sfrapSysLTFNumDlcis, sfrapPerfNetwProtoTotalTxAnnexG=sfrapPerfNetwProtoTotalTxAnnexG, sfrapPerfThruputPerDlciRxBecn=sfrapPerfThruputPerDlciRxBecn, sfrapPerfIcmpTotalTxGmReport=sfrapPerfIcmpTotalTxGmReport, sfrapDiagDteTimeRemaining=sfrapDiagDteTimeRemaining, sfrapPerfIcmpPerDlciRxDestUnr=sfrapPerfIcmpPerDlciRxDestUnr, sfrapPerfCirRxPercentUtilizationRange2=sfrapPerfCirRxPercentUtilizationRange2, sfrapCfgFrLmiType=sfrapCfgFrLmiType, sfrapPerfMgmtIpICMPInEchoReps=sfrapPerfMgmtIpICMPInEchoReps, sfrapPerfIcmpTotalTxRedirect=sfrapPerfIcmpTotalTxRedirect, sfrapCfgFrPerfDlciNamesDelete=sfrapCfgFrPerfDlciNamesDelete, sfrapPerfMgmtIpIPInProtUnk=sfrapPerfMgmtIpIPInProtUnk, sfrapPerfThruputPerDlciAvailability=sfrapPerfThruputPerDlciAvailability, sfrapPerfIcmpPerDlciTxTimeExcd=sfrapPerfIcmpPerDlciTxTimeExcd, sfrapDiagVBERTRate=sfrapDiagVBERTRate, sfrapDiagDteEntry=sfrapDiagDteEntry, sfrapCfgTftpPassword=sfrapCfgTftpPassword, sfrapEventLogCurrentSeqNum=sfrapEventLogCurrentSeqNum, sfrapLmiSourcingChangeUserToDteTrap=sfrapLmiSourcingChangeUserToDteTrap, sfrapCfgFrDLCIEncap=sfrapCfgFrDLCIEncap, sfrapSysNumDlcisSupported=sfrapSysNumDlcisSupported, sfrapPerfThruputPerDlciRxDe=sfrapPerfThruputPerDlciRxDe)
mibBuilder.exportSymbols("SFRAP-MIB", sfrapPerfApplicationPerDlciTxCustom2=sfrapPerfApplicationPerDlciTxCustom2, sfrapCfgFrLmiKeepaliveTimeout=sfrapCfgFrLmiKeepaliveTimeout, sfrapPerfThruputPerDlciEIR=sfrapPerfThruputPerDlciEIR, sfrapPerfNetworkLongTermCmdClear=sfrapPerfNetworkLongTermCmdClear, sfrapVnipTopoVBertTimeElapse=sfrapVnipTopoVBertTimeElapse, sfrapPerfIpxPerDlciTxSap=sfrapPerfIpxPerDlciTxSap, sfrapEventLogClear=sfrapEventLogClear, sfrapPerfNetwProtoTotalRxSna=sfrapPerfNetwProtoTotalRxSna, sfrapCfgTransitDelayInterface=sfrapCfgTransitDelayInterface, sfrapCfgFrPerfUserProtocolsTableClear=sfrapCfgFrPerfUserProtocolsTableClear, sfrapVnipTopoVBERTStatus=sfrapVnipTopoVBERTStatus, sfrapPerfIcmpTotalRxGmQuery=sfrapPerfIcmpTotalRxGmQuery, sfrapPerfNetwProtoTotalTable=sfrapPerfNetwProtoTotalTable, sfrapPerfNetwLongTermAltEntry=sfrapPerfNetwLongTermAltEntry, sfrapEventTrapLogSeqNum=sfrapEventTrapLogSeqNum, sfrapPerfApplicationTotalInterval=sfrapPerfApplicationTotalInterval, sfrapLocalToDteLoopbackEnabledTrap=sfrapLocalToDteLoopbackEnabledTrap, sfrapConfigInstallSuccess=sfrapConfigInstallSuccess, sfrapCfgFrPerfLTProtocolFilterIndex=sfrapCfgFrPerfLTProtocolFilterIndex, sfrapStatusDipswitchIntfMode2=sfrapStatusDipswitchIntfMode2, sfrapTftpSuccessTrap=sfrapTftpSuccessTrap, sfrapPerfIcmpTotalTxTotal=sfrapPerfIcmpTotalTxTotal, sfrapPerfNetwProtoPerDlciTxIpx=sfrapPerfNetwProtoPerDlciTxIpx, sfrapPerfLmiPerDlciTxLivoEnqByteCnt=sfrapPerfLmiPerDlciTxLivoEnqByteCnt, sfrapPerfApplicationPerDlciRxFtp=sfrapPerfApplicationPerDlciRxFtp, sfrapPerfRoutingPerDlciRxOspf=sfrapPerfRoutingPerDlciRxOspf, sfrapPerfApplicationTotalRxSnmpTrap=sfrapPerfApplicationTotalRxSnmpTrap, sfrapPerfIcmpPerDlciRxAddrMaskRep=sfrapPerfIcmpPerDlciRxAddrMaskRep, sfrapPerfIpxTotalTxSpx=sfrapPerfIpxTotalTxSpx, sfrapDteSignalRtsOffTrap=sfrapDteSignalRtsOffTrap, sfrapPerfThruputPerDlciUptime=sfrapPerfThruputPerDlciUptime, sfrapSysSerialNo=sfrapSysSerialNo, sfrapPerfIcmpPerDlciTxParamProb=sfrapPerfIcmpPerDlciTxParamProb, sfrapPerfApplicationTotalRxCustom1=sfrapPerfApplicationTotalRxCustom1, sfrapCfgIpMask=sfrapCfgIpMask, sfrapPerfNetwLongTermValue=sfrapPerfNetwLongTermValue, sfrapDiagUnitTable=sfrapDiagUnitTable, sfrapPerfApplicationTotalRxCustom3=sfrapPerfApplicationTotalRxCustom3, sfrapCfgMgmtTable=sfrapCfgMgmtTable, sfrapPerfIpxPerDlciEntry=sfrapPerfIpxPerDlciEntry, sfrapVnipTopologyNumHops=sfrapVnipTopologyNumHops, sfrapPerfIpxPerDlciRxTotal=sfrapPerfIpxPerDlciRxTotal, sfrapPerfArpPerDlciRxOther=sfrapPerfArpPerDlciRxOther, sfrapPerfThruputCmdClearToDteStats=sfrapPerfThruputCmdClearToDteStats, sfrapPerfIcmpTotalTxGmReduct=sfrapPerfIcmpTotalTxGmReduct, sfrapPerfCurrentUnitUtilization=sfrapPerfCurrentUnitUtilization, sfrapTrapMutingActive=sfrapTrapMutingActive, sfrapTftpProgrammingTrap=sfrapTftpProgrammingTrap, sfrapCfgFrPerfDlciNamesEntry=sfrapCfgFrPerfDlciNamesEntry, sfrapPerfNetwLongTermEntry=sfrapPerfNetwLongTermEntry, sfrapPerfIcmpPerDlciRxGmQuery=sfrapPerfIcmpPerDlciRxGmQuery, sfrapPerfApplicationTotalTxTelnet=sfrapPerfApplicationTotalTxTelnet, sfrapDiagUnitReset=sfrapDiagUnitReset, sfrapPerfLmiPerDlciRxTotalByteCnt=sfrapPerfLmiPerDlciRxTotalByteCnt, sfrapStatusDipswitchTable=sfrapStatusDipswitchTable, sfrapCfgFrPerfDlciNamesDlciValue=sfrapCfgFrPerfDlciNamesDlciValue, sfrapDiagVBERT=sfrapDiagVBERT, sfrapPerfIcmpPerDlciTxDestUnr=sfrapPerfIcmpPerDlciTxDestUnr, sfrapPerfIcmpTotalRxTimeExcd=sfrapPerfIcmpTotalRxTimeExcd, sfrapPerfIcmpTotalTxPktTooBig=sfrapPerfIcmpTotalTxPktTooBig, sfrapPerfMgmtIpUDPInDatagrams=sfrapPerfMgmtIpUDPInDatagrams, sfrapCfgIpPeerIP=sfrapCfgIpPeerIP, sfrapCfgCommFlowCtrl=sfrapCfgCommFlowCtrl, sfrapStatusDipswitchCutthru=sfrapStatusDipswitchCutthru, sfrapPerfMgmtIpIPInDscrd=sfrapPerfMgmtIpIPInDscrd, sfrapPerfNetwProtoTotalTxTotal=sfrapPerfNetwProtoTotalTxTotal, sfrapPerfNetwProtoPerDlciInterval=sfrapPerfNetwProtoPerDlciInterval, sfrapPerfRoutingTotalEntry=sfrapPerfRoutingTotalEntry, sfrapPerfNetwProtoPerDlciRxIp=sfrapPerfNetwProtoPerDlciRxIp, sfrapPerfIpTotalTable=sfrapPerfIpTotalTable, sfrapCfgFrPerfDlciNamesUtilThreshold=sfrapCfgFrPerfDlciNamesUtilThreshold, sfrapDiagUnitCutThru=sfrapDiagUnitCutThru, sfrapStatusClockRate=sfrapStatusClockRate, sfrapPerfIpxPerDlciTxNcp=sfrapPerfIpxPerDlciTxNcp, sfrapPerfIpxTotalRxNetbios=sfrapPerfIpxTotalRxNetbios, sfrapCfgSnmpMgrIndex=sfrapCfgSnmpMgrIndex, sfrapPerfCirRxPercentUtilizationRange6=sfrapPerfCirRxPercentUtilizationRange6, sfrapPerfRoutingTotalRxNetbios=sfrapPerfRoutingTotalRxNetbios, sync=sync, sfrapCfgTransitDelayTableClear=sfrapCfgTransitDelayTableClear, sfrapPerfThruputCmdAllStsDlciReset=sfrapPerfThruputCmdAllStsDlciReset, sfrapVnipTopoVBertTxDEClrFrames=sfrapVnipTopoVBertTxDEClrFrames, sfrapPerfApplicationPerDlciRxCustom1=sfrapPerfApplicationPerDlciRxCustom1, sfrapPerfIpTotalTxIcmp=sfrapPerfIpTotalTxIcmp, sfrapVbertStopped=sfrapVbertStopped, sfrapCfgFrAddrLen=sfrapCfgFrAddrLen, sfrapPerfMgmtIpICMPOutErrors=sfrapPerfMgmtIpICMPOutErrors, sfrapPerfNetwProtoPerDlciTxCisco=sfrapPerfNetwProtoPerDlciTxCisco, sfrapPerfArpTotalRxArpRep=sfrapPerfArpTotalRxArpRep, sfrapCfgUpdate=sfrapCfgUpdate, sfrapPerfMgmtIpICMPInRedirects=sfrapPerfMgmtIpICMPInRedirects, sfrapPerfIcmpTotalEntry=sfrapPerfIcmpTotalEntry, sfrapPerfArpTotalTxRarpRep=sfrapPerfArpTotalTxRarpRep, sfrapPerfNetwProtoTotalRxTotal=sfrapPerfNetwProtoTotalRxTotal, sfrap=sfrap, sfrapCfgCommParity=sfrapCfgCommParity, sfrapPerfArpPerDlciTxArpReq=sfrapPerfArpPerDlciTxArpReq, sfrapPerfRoutingTotalTxRip=sfrapPerfRoutingTotalTxRip, sfrapCfgTftpInitiate=sfrapCfgTftpInitiate, sfrapCfgCommStopBits=sfrapCfgCommStopBits, sfrapCfgCommBaud=sfrapCfgCommBaud, sfrapPerfArpTotalRxOther=sfrapPerfArpTotalRxOther, sfrapPerfIpPerDlciRxTcp=sfrapPerfIpPerDlciRxTcp, sfrapPercentUtilization=sfrapPercentUtilization, sfrapCfgCommTable=sfrapCfgCommTable, sfrapPerfMgmtIpICMPOutRedirects=sfrapPerfMgmtIpICMPOutRedirects, sfrapPerfSnaTotalEntry=sfrapPerfSnaTotalEntry, sfrapVbertStarted=sfrapVbertStarted, sfrapCfgCliPassword=sfrapCfgCliPassword, sfrapPerfMgmtIpICMPOutMsgs=sfrapPerfMgmtIpICMPOutMsgs, sfrapPerfApplicationTotalRxSmtp=sfrapPerfApplicationTotalRxSmtp, sfrapCfgTftpInterface=sfrapCfgTftpInterface, sfrapPerfIpxTotalTxNcp=sfrapPerfIpxTotalTxNcp, sfrapPerfMgmtIpTCPActiveOpens=sfrapPerfMgmtIpTCPActiveOpens, sfrapPerfSnaTotalTxSubarea=sfrapPerfSnaTotalTxSubarea, sfrapStatusLedDsrLED=sfrapStatusLedDsrLED, sfrapPerfNetworkLongTerm=sfrapPerfNetworkLongTerm, sfrapPerfNetwProtoTotalTxIp=sfrapPerfNetwProtoTotalTxIp, sfrapPerfSnaTotalTable=sfrapPerfSnaTotalTable, sfrapSysHardRev=sfrapSysHardRev, sfrapPerfNetwProtoTotalRxArp=sfrapPerfNetwProtoTotalRxArp, sfrapPerfNetwProtoTotalRxOther=sfrapPerfNetwProtoTotalRxOther, sfrapSysNumMaintInstalled=sfrapSysNumMaintInstalled, sfrapPerfIcmpPerDlciTable=sfrapPerfIcmpPerDlciTable, sfrapPerfSnaTotalTxPeriph=sfrapPerfSnaTotalTxPeriph, sfrapPerfIcmpTotalTxTimestpReq=sfrapPerfIcmpTotalTxTimestpReq, sfrapPerfApplicationPerDlciRxSnmp=sfrapPerfApplicationPerDlciRxSnmp, sfrapPerfNetwProtoTotalTxCisco=sfrapPerfNetwProtoTotalTxCisco, sfrapPerfIpxTotalRxOther=sfrapPerfIpxTotalRxOther, sfrapPerfIpTotalTxIgrp=sfrapPerfIpTotalTxIgrp, sfrapPerfIcmpTotalTxEchoRep=sfrapPerfIcmpTotalTxEchoRep, sfrapPerfApplicationTotalTxFtp=sfrapPerfApplicationTotalTxFtp, sfrapPerfThruputPerIntfRxAbortCnt=sfrapPerfThruputPerIntfRxAbortCnt, sfrapPerfNetwProtoPerDlciRxAnnexG=sfrapPerfNetwProtoPerDlciRxAnnexG, sfrapStatusAllLEDs=sfrapStatusAllLEDs, sfrapDiagVnipTable=sfrapDiagVnipTable, sfrapPerfApplicationPerDlciRxSnmpTrap=sfrapPerfApplicationPerDlciRxSnmpTrap, sfrapPerfIpxPerDlciTxRip=sfrapPerfIpxPerDlciTxRip, sfrapPerfMgmtIpIFInErrors=sfrapPerfMgmtIpIFInErrors, sfrapCfgSnmpFrTrap=sfrapCfgSnmpFrTrap, sfrapPerfMgmtIpIFOutOctets=sfrapPerfMgmtIpIFOutOctets, sfrapPerfIcmpTotalTxAddrMaskRep=sfrapPerfIcmpTotalTxAddrMaskRep, sfrapCfgIpTelnetAutoLogOut=sfrapCfgIpTelnetAutoLogOut, sfrapPerfArpTotalInterval=sfrapPerfArpTotalInterval, sfrapCfgAppCutthruTimeout=sfrapCfgAppCutthruTimeout, sfrapPerfIpxTotalTxOther=sfrapPerfIpxTotalTxOther, sfrapPerfApplicationPerDlciEntry=sfrapPerfApplicationPerDlciEntry, sfrapTftpInvalidFileTrap=sfrapTftpInvalidFileTrap, sfrapVnipTopoTDNumSamples=sfrapVnipTopoTDNumSamples, sfrapPerfThruputCmdRemoveStsDlci=sfrapPerfThruputCmdRemoveStsDlci, sfrapPerfNetwProtoTotalRxAnnexG=sfrapPerfNetwProtoTotalRxAnnexG, sfrapPerfNetwProtoPerDlciRxVnip=sfrapPerfNetwProtoPerDlciRxVnip, sfrapPerfLmiTotalRxFullStatByteCnt=sfrapPerfLmiTotalRxFullStatByteCnt, sfrapPerfArpTotalTxOther=sfrapPerfArpTotalTxOther, sfrapVnipTopoVBertPerUtilEIR=sfrapVnipTopoVBertPerUtilEIR, sfrapPerfMgmtIpIFInOctets=sfrapPerfMgmtIpIFInOctets, sfrapSysSelDTESupported=sfrapSysSelDTESupported, sfrapPerfThruputCmdReplaceDlciEntry=sfrapPerfThruputCmdReplaceDlciEntry, sfrapDiagDteIndex=sfrapDiagDteIndex, sfrapPerfSnaTotalRxSubarea=sfrapPerfSnaTotalRxSubarea, sfrapPerfSnaPerDlciRxPeriph=sfrapPerfSnaPerDlciRxPeriph, sfrapVnipTopoTDLastDelay=sfrapVnipTopoTDLastDelay, sfrapPerfApplicationTotalRxCustom4=sfrapPerfApplicationTotalRxCustom4, sfrapCfgFrPerfUserProtocolsIndex=sfrapCfgFrPerfUserProtocolsIndex, sfrapCfgFrCrcMode=sfrapCfgFrCrcMode, sfrapPerfIcmpTotalRxParamProb=sfrapPerfIcmpTotalRxParamProb, sfrapPvcRxUtilizationExceededTrap=sfrapPvcRxUtilizationExceededTrap, sfrapCfgTftpIpAddress=sfrapCfgTftpIpAddress, sfrapPerfNetwProtoPerDlciRxOther=sfrapPerfNetwProtoPerDlciRxOther, sfrapPerfMgmtIp=sfrapPerfMgmtIp, sfrapPerfCurrentPerDlciUtilizationTable=sfrapPerfCurrentPerDlciUtilizationTable, sfrapPerfNetwProtoTotalRxVnip=sfrapPerfNetwProtoTotalRxVnip, sfrapCfgSnmpTrapMuting=sfrapCfgSnmpTrapMuting, sfrapPerfCirTxPercentUtilizationRange2=sfrapPerfCirTxPercentUtilizationRange2, sfrapLocalConfigTrap=sfrapLocalConfigTrap, sfrapEventTrapLogEntry=sfrapEventTrapLogEntry, sfrapPerfMgmtIpICMPStatsTable=sfrapPerfMgmtIpICMPStatsTable, sfrapPerfLmiTotalTxOtherByteCnt=sfrapPerfLmiTotalTxOtherByteCnt, sfrapPerfThruputPerDlciCirType=sfrapPerfThruputPerDlciCirType, sfrapPerfSnaTotalTxTotal=sfrapPerfSnaTotalTxTotal, sfrapPerfThruputPerDlciTable=sfrapPerfThruputPerDlciTable, sfrapDiagVLOOP=sfrapDiagVLOOP, sfrapPerfIcmpTotalInterval=sfrapPerfIcmpTotalInterval, sfrapPerfIpPerDlciTxOther=sfrapPerfIpPerDlciTxOther, sfrapPerfCirRxPercentUtilizationRange1=sfrapPerfCirRxPercentUtilizationRange1, sfrapPerfThruputPerIntfRxBpvCnt=sfrapPerfThruputPerIntfRxBpvCnt, sfrapPerfIpPerDlciRxIcmp=sfrapPerfIpPerDlciRxIcmp, sfrapPerfIcmpPerDlciTxSrcQuench=sfrapPerfIcmpPerDlciTxSrcQuench, sfrapPerfMgmtIpICMPOutEchoReps=sfrapPerfMgmtIpICMPOutEchoReps, enterprises=enterprises, sfrapPerfIcmpPerDlciRxGmReport=sfrapPerfIcmpPerDlciRxGmReport, sfrapDiagnostics=sfrapDiagnostics, sfrapPerfNetwProtoPerDlciRxIpx=sfrapPerfNetwProtoPerDlciRxIpx, sfrapPerfArpPerDlciRxArpRep=sfrapPerfArpPerDlciRxArpRep, sfrapPerfIpxTotalTxNetbios=sfrapPerfIpxTotalTxNetbios, sfrapCfgFrPerfLTProtocolFilterEntry=sfrapCfgFrPerfLTProtocolFilterEntry, sfrapPerfNetwLongTermAltDlci=sfrapPerfNetwLongTermAltDlci, sfrapPerfCirTxPercentUtilizationRange7=sfrapPerfCirTxPercentUtilizationRange7, sfrapVnipTopoVBertTransitDelayMax=sfrapVnipTopoVBertTransitDelayMax, sfrapPerfArpPerDlciRxArpReq=sfrapPerfArpPerDlciRxArpReq, sfrapPerfThruputPerDlciCIR=sfrapPerfThruputPerDlciCIR, sfrapPerfIcmpPerDlciRxPktTooBig=sfrapPerfIcmpPerDlciRxPktTooBig, sfrapPerfIcmpTotalRxEchoRep=sfrapPerfIcmpTotalRxEchoRep, sfrapEventTrapLogVarBind2=sfrapEventTrapLogVarBind2, sfrapPerfApplicationTotalTable=sfrapPerfApplicationTotalTable, sfrapPerfIcmpPerDlciTxGmReduct=sfrapPerfIcmpPerDlciTxGmReduct, sfrapPerfArpPerDlciTxInarpReq=sfrapPerfArpPerDlciTxInarpReq, sfrapPerfSnaPerDlciValue=sfrapPerfSnaPerDlciValue, sfrapPerfThruputPerIntfIndex=sfrapPerfThruputPerIntfIndex, sfrapStatusDteTable=sfrapStatusDteTable, sfrapPerfLmiTotalTxTotalByteCnt=sfrapPerfLmiTotalTxTotalByteCnt, sfrapPerfIcmpPerDlciTxAddrMaskReq=sfrapPerfIcmpPerDlciTxAddrMaskReq, sfrapPerfArpPerDlciInterval=sfrapPerfArpPerDlciInterval, sfrapPvcRxUtilizationClearedTrap=sfrapPvcRxUtilizationClearedTrap, sfrapPerfThruputCmdClearAllStats=sfrapPerfThruputCmdClearAllStats, sfrapPerfThruputPerDlciTxFrame=sfrapPerfThruputPerDlciTxFrame, sfrapEventTrapLogTimeStamp=sfrapEventTrapLogTimeStamp, sfrapEventTrapLogSpecificEvent=sfrapEventTrapLogSpecificEvent, sfrapCfgTftpDlci=sfrapCfgTftpDlci, sfrapLmiSourcingChangePassthruTrap=sfrapLmiSourcingChangePassthruTrap, sfrapPerfThruputPerDlciTxThruput=sfrapPerfThruputPerDlciTxThruput, sfrapStatusDipswitchUnused=sfrapStatusDipswitchUnused, sfrapPerfApplicationPerDlciRxCustom3=sfrapPerfApplicationPerDlciRxCustom3, sfrapPerfIcmpTotalTxDestUnr=sfrapPerfIcmpTotalTxDestUnr, sfrapDLCINum=sfrapDLCINum, sfrapPerfIcmpPerDlciTxTimestpReq=sfrapPerfIcmpPerDlciTxTimestpReq, sfrapCfgFrAddrResMode=sfrapCfgFrAddrResMode, sfrapPerfRoutingTotalTxOspf=sfrapPerfRoutingTotalTxOspf, sfrapPerfCirRxPercentUtilizationRange3=sfrapPerfCirRxPercentUtilizationRange3, sfrapPerfNetwProtoPerDlciTxIp=sfrapPerfNetwProtoPerDlciTxIp, sfrapPerfIcmpPerDlciTxGmReport=sfrapPerfIcmpPerDlciTxGmReport, sfrapPerfMgmtIpICMPInErrors=sfrapPerfMgmtIpICMPInErrors, sfrapPerfCirRxPercentUtilizationRange7=sfrapPerfCirRxPercentUtilizationRange7, sfrapCfgFrPerf=sfrapCfgFrPerf, sfrapPerfIpPerDlciEntry=sfrapPerfIpPerDlciEntry, sfrapDteSignalIndicateOnTrap=sfrapDteSignalIndicateOnTrap, sfrapPerfApplicationPerDlciTxHttp=sfrapPerfApplicationPerDlciTxHttp, sfrapSystem=sfrapSystem, sfrapPerfMgmtIpTCPAttemptFails=sfrapPerfMgmtIpTCPAttemptFails, sfrapStatusLedRtsLED=sfrapStatusLedRtsLED, sfrapPerfApplicationPerDlciTxCustom3=sfrapPerfApplicationPerDlciTxCustom3, sfrapPerfIpxPerDlciTxNetbios=sfrapPerfIpxPerDlciTxNetbios, sfrapCfgFrPerfLTDlciFilterEntry=sfrapCfgFrPerfLTDlciFilterEntry, sfrapCfgFrPerfLTDlciFilterIndex=sfrapCfgFrPerfLTDlciFilterIndex, sfrapPerfThruputPerIntfRxByteCnt=sfrapPerfThruputPerIntfRxByteCnt, sfrapStatusDteRxtiming=sfrapStatusDteRxtiming, sfrapLocalToDteLoopbackDisabledTrap=sfrapLocalToDteLoopbackDisabledTrap, sfrapPerfCirTxPercentUtilizationRange3=sfrapPerfCirTxPercentUtilizationRange3, sfrapDteSignalControlOffTrap=sfrapDteSignalControlOffTrap, sfrapPerfApplicationTotalTxCustom2=sfrapPerfApplicationTotalTxCustom2, sfrapDLCITDThresholdTrap=sfrapDLCITDThresholdTrap, sfrapPerfIpxPerDlciRxSap=sfrapPerfIpxPerDlciRxSap, sfrapPerfSnaTotalTxNetbios=sfrapPerfSnaTotalTxNetbios, sfrapPerfNetwProtoPerDlciTxAnnexG=sfrapPerfNetwProtoPerDlciTxAnnexG)
mibBuilder.exportSymbols("SFRAP-MIB", sfrapCfgLock=sfrapCfgLock, sfrapVloopUp=sfrapVloopUp, sfrapLowSpeedExceededTrap=sfrapLowSpeedExceededTrap, sfrapPerfThruputPerDlciEncapType=sfrapPerfThruputPerDlciEncapType, sfrapStatusLedToDTERxLED=sfrapStatusLedToDTERxLED, sfrapPerfNetwProtoTotalRxCisco=sfrapPerfNetwProtoTotalRxCisco, sfrapStatusLedToDCETxLED=sfrapStatusLedToDCETxLED, sfrapPerfMgmtIpIPOutDscrd=sfrapPerfMgmtIpIPOutDscrd, sfrapVnipTopoTDMaxDelay=sfrapVnipTopoTDMaxDelay, sfrapPerfSnaPerDlciRxSubarea=sfrapPerfSnaPerDlciRxSubarea, sfrapTftpTransferringTrap=sfrapTftpTransferringTrap, sfrapPerfSnaTotalRxAppn=sfrapPerfSnaTotalRxAppn, sfrapTftpHostUnreachableTrap=sfrapTftpHostUnreachableTrap, sfrapPerfThruputPerDlciTxUtilizationStatus=sfrapPerfThruputPerDlciTxUtilizationStatus, sfrapStatusDteTermtiming=sfrapStatusDteTermtiming, sfrapPerfIpxTotalTxSap=sfrapPerfIpxTotalTxSap, sfrapInterface=sfrapInterface, sfrapTftpNoFileTrap=sfrapTftpNoFileTrap, sfrapCfgFrPerfLTDlciFilterDlciNum=sfrapCfgFrPerfLTDlciFilterDlciNum, sfrapPerfIpTotalRxIgrp=sfrapPerfIpTotalRxIgrp, sfrapPerfLmiTotalRxLivoEnqByteCnt=sfrapPerfLmiTotalRxLivoEnqByteCnt, sfrapCfgFrPerfDlciNamesEirValue=sfrapCfgFrPerfDlciNamesEirValue, sfrapCfgSnmpMgrClearN=sfrapCfgSnmpMgrClearN, sfrapVbertRequestFailed=sfrapVbertRequestFailed, sfrapLmiSeqNumMismatchToDceTrap=sfrapLmiSeqNumMismatchToDceTrap, sfrapStatusLedFrmActLED=sfrapStatusLedFrmActLED, sfrapPerfLmiPerDlciTable=sfrapPerfLmiPerDlciTable, sfrapStatusMgmtDefaultDLCIStatus=sfrapStatusMgmtDefaultDLCIStatus, sfrapPerfRoutingPerDlciValue=sfrapPerfRoutingPerDlciValue, sfrapPerfSnaPerDlciTxTotal=sfrapPerfSnaPerDlciTxTotal, sfrapCfgFrDLCIMgmtDE=sfrapCfgFrDLCIMgmtDE, sfrapCfgIpMaxMTU=sfrapCfgIpMaxMTU, sfrapPerfNetwProtoTotalInterval=sfrapPerfNetwProtoTotalInterval, sfrapLocalUnitLoopbackDisabledTrap=sfrapLocalUnitLoopbackDisabledTrap, sfrapPerfLmiPerDlciRxOtherByteCnt=sfrapPerfLmiPerDlciRxOtherByteCnt, sfrapVloopDownViaRemote=sfrapVloopDownViaRemote, sfrapCfgTftpTable=sfrapCfgTftpTable, sfrapPerfApplicationTotalRxTftp=sfrapPerfApplicationTotalRxTftp, sfrapCfgFrPerfUserProtocolsTable=sfrapCfgFrPerfUserProtocolsTable, sfrapPerfCirPercentUtilizationDlciValue=sfrapPerfCirPercentUtilizationDlciValue, sfrapSysNumToDceInstalled=sfrapSysNumToDceInstalled, sfrapPerfNetwProtoPerDlciTxOther=sfrapPerfNetwProtoPerDlciTxOther, sfrapEventTrapLogVarBind3=sfrapEventTrapLogVarBind3, sfrapPerfCurrentPerDlciRxUtilization=sfrapPerfCurrentPerDlciRxUtilization, sfrapPerfMgmtIpTCPOutSegs=sfrapPerfMgmtIpTCPOutSegs, sfrapPerfThruputPerDlciEntry=sfrapPerfThruputPerDlciEntry, sfrapPerformance=sfrapPerformance, sfrapPerfMgmtIpIFStatsTable=sfrapPerfMgmtIpIFStatsTable, sfrapPerfIpPerDlciInterval=sfrapPerfIpPerDlciInterval, sfrapPerfMgmtIpIPInRcv=sfrapPerfMgmtIpIPInRcv, sfrapPerfSnaPerDlciTxAppn=sfrapPerfSnaPerDlciTxAppn, sfrapPerfApplicationPerDlciValue=sfrapPerfApplicationPerDlciValue, sfrapPerfIpTotalInterval=sfrapPerfIpTotalInterval, sfrapCfgFrPerfDlciNamesCirType=sfrapCfgFrPerfDlciNamesCirType, sfrapEventTrapLogTable=sfrapEventTrapLogTable, sfrapLocalUnitLoopbackFailedTrap=sfrapLocalUnitLoopbackFailedTrap, sfrapPerfSnaTotalTxOther=sfrapPerfSnaTotalTxOther, sfrapUtilizationThreshold=sfrapUtilizationThreshold, sfrapPerfIpPerDlciRxUdp=sfrapPerfIpPerDlciRxUdp, sfrapPerfThruputCmdReplaceDlciTable=sfrapPerfThruputCmdReplaceDlciTable, sfrapCfgDteRxClockMode=sfrapCfgDteRxClockMode, sfrapPerfIcmpPerDlciRxEchoRep=sfrapPerfIcmpPerDlciRxEchoRep, sfrapPerfThruputPerDlciValue=sfrapPerfThruputPerDlciValue, sfrapStatusMgmtInterface=sfrapStatusMgmtInterface, sfrapPerfCurrentPerDlciUtilizationDlciValue=sfrapPerfCurrentPerDlciUtilizationDlciValue, sfrapLowSpeedResumedTrap=sfrapLowSpeedResumedTrap, sfrapPerfThruputPerDlciRxByte=sfrapPerfThruputPerDlciRxByte, sfrapPerfIcmpTotalRxEchoReq=sfrapPerfIcmpTotalRxEchoReq, sfrapPerfLmiTotalRxOtherByteCnt=sfrapPerfLmiTotalRxOtherByteCnt, sfrapPerfThruputPerIntfRxFrameCnt=sfrapPerfThruputPerIntfRxFrameCnt, sfrapVnipTopologyInterface=sfrapVnipTopologyInterface, sfrapPerfThruputPerDlciChangeTime=sfrapPerfThruputPerDlciChangeTime, sfrapVnipTransitDelayClear=sfrapVnipTransitDelayClear, sfrapPerfArpPerDlciRxRarpReq=sfrapPerfArpPerDlciRxRarpReq, sfrapVnipTopoVBertRxDESetFrames=sfrapVnipTopoVBertRxDESetFrames, sfrapCfgSnmpMgrTable=sfrapCfgSnmpMgrTable, sfrapPerfArpPerDlciValue=sfrapPerfArpPerDlciValue, sfrapPerfIcmpPerDlciEntry=sfrapPerfIcmpPerDlciEntry, sfrapOpModeCutThruEnabledTrap=sfrapOpModeCutThruEnabledTrap, sfrapDiagTxClockDetect=sfrapDiagTxClockDetect, sfrapCfgAppFormat=sfrapCfgAppFormat, sfrapStatusDteEntry=sfrapStatusDteEntry, Index=Index, sfrapCfgAppLpbkTimeout=sfrapCfgAppLpbkTimeout, sfrapCfgAppType=sfrapCfgAppType, sfrapStatusLedToDTETxLED=sfrapStatusLedToDTETxLED, sfrapCfgUnlock=sfrapCfgUnlock, sfrapCfgAppCircuitId=sfrapCfgAppCircuitId, sfrapTftpRequestedTrap=sfrapTftpRequestedTrap, sfrapPerfIpTotalTxTotal=sfrapPerfIpTotalTxTotal, sfrapDLCIActiveTrap=sfrapDLCIActiveTrap, sfrapCfgAppTxClkmode=sfrapCfgAppTxClkmode, sfrapVnipTopoVBertTransitDelayAvg=sfrapVnipTopoVBertTransitDelayAvg, sfrapPerfIcmpPerDlciRxEchoReq=sfrapPerfIcmpPerDlciRxEchoReq, sfrapPerfNetwProtoTotalTxArp=sfrapPerfNetwProtoTotalTxArp, sfrapPerfThruputPerIntfEntry=sfrapPerfThruputPerIntfEntry, sfrapPerfArpPerDlciTable=sfrapPerfArpPerDlciTable, sfrapCfgVnipTable=sfrapCfgVnipTable, sfrapPerfNetwProtoTotalRxIpx=sfrapPerfNetwProtoTotalRxIpx, sfrapPerfMgmtIpICMPInDestUnreachs=sfrapPerfMgmtIpICMPInDestUnreachs, sfrapPerfCirTxPercentUtilizationRange4=sfrapPerfCirTxPercentUtilizationRange4, sfrapPerfIpPerDlciTxUdp=sfrapPerfIpPerDlciTxUdp, sfrapCfgGetCommunityString=sfrapCfgGetCommunityString, sfrapPerfIpxPerDlciInterval=sfrapPerfIpxPerDlciInterval, sfrapStatusLedDcdLED=sfrapStatusLedDcdLED, sfrapPerfApplicationPerDlciRxCustom4=sfrapPerfApplicationPerDlciRxCustom4, sfrapCfgIpTable=sfrapCfgIpTable, sfrapStatusDipswitchToDteLpbk=sfrapStatusDipswitchToDteLpbk, sfrapSysAmtMemoryInstalled=sfrapSysAmtMemoryInstalled, sfrapPerfArpPerDlciTxOther=sfrapPerfArpPerDlciTxOther, sfrapPerfIpPerDlciValue=sfrapPerfIpPerDlciValue, sfrapPerfIpTotalEntry=sfrapPerfIpTotalEntry, sfrapPerfIcmpPerDlciTxTotal=sfrapPerfIcmpPerDlciTxTotal, sfrapPerfLmiTotalTable=sfrapPerfLmiTotalTable, sfrapOpModeCutThruDisabledTrap=sfrapOpModeCutThruDisabledTrap, sfrapSysLocation=sfrapSysLocation, sfrapCfgTftpNumBytes=sfrapCfgTftpNumBytes, sfrapPerfIcmpTotalRxPktTooBig=sfrapPerfIcmpTotalRxPktTooBig, sfrapPerfArpPerDlciTxRarpRep=sfrapPerfArpPerDlciTxRarpRep, sfrapPerfSnaTotalRxOther=sfrapPerfSnaTotalRxOther, sfrapPerfThruputCmdClearAllIntfStats=sfrapPerfThruputCmdClearAllIntfStats, sfrapPerfIcmpTotalTxTimeExcd=sfrapPerfIcmpTotalTxTimeExcd, sfrapPerfIpxTotalTxTotal=sfrapPerfIpxTotalTxTotal, sfrapPerfLmiPerDlciValue=sfrapPerfLmiPerDlciValue, sfrapPerfCirRxPercentUtilizationRange8=sfrapPerfCirRxPercentUtilizationRange8, sfrapLocalUnitLoopbackEnabledTrap=sfrapLocalUnitLoopbackEnabledTrap, sfrapPerfNetwProtoPerDlciRxTotal=sfrapPerfNetwProtoPerDlciRxTotal, sfrapPerfIpTotalTxTcp=sfrapPerfIpTotalTxTcp, sfrapPerfApplicationPerDlciRxHttp=sfrapPerfApplicationPerDlciRxHttp, sfrapPerfRoutingPerDlciEntry=sfrapPerfRoutingPerDlciEntry, sfrapStatusDteCts=sfrapStatusDteCts, sfrapPerfIcmpPerDlciTxEchoReq=sfrapPerfIcmpPerDlciTxEchoReq, sfrapSysType=sfrapSysType, sfrapPerfApplicationPerDlciTable=sfrapPerfApplicationPerDlciTable, sfrapPerfRoutingPerDlciTxRip=sfrapPerfRoutingPerDlciTxRip, sfrapDLCIInactiveTrap=sfrapDLCIInactiveTrap, sfrapSysTKRSupported=sfrapSysTKRSupported, sfrapCfgAppOperationMode=sfrapCfgAppOperationMode, sfrapPerfNetwLongTermTable=sfrapPerfNetwLongTermTable, sfrapPerfIcmpPerDlciRxTimeExcd=sfrapPerfIcmpPerDlciRxTimeExcd, sfrapPerfSnaPerDlciTxSubarea=sfrapPerfSnaPerDlciTxSubarea, sfrapPerfThruputPerIntfRxCrcErrCnt=sfrapPerfThruputPerIntfRxCrcErrCnt, sfrapPerfArpPerDlciTxRarpReq=sfrapPerfArpPerDlciTxRarpReq, sfrapPerfIpPerDlciTxTcp=sfrapPerfIpPerDlciTxTcp, sfrapCfgTDDeleteDlciValue=sfrapCfgTDDeleteDlciValue, sfrapPerfApplicationTotalTxCustom3=sfrapPerfApplicationTotalTxCustom3, sfrapPerfThruputCmdCountsStsDlciResetAll=sfrapPerfThruputCmdCountsStsDlciResetAll, sfrapPerfIpxPerDlciRxOther=sfrapPerfIpxPerDlciRxOther, sfrapPerfMgmtIpIPInHdrErr=sfrapPerfMgmtIpIPInHdrErr, sfrapPerfNetwProtoPerDlciTxVnip=sfrapPerfNetwProtoPerDlciTxVnip, sfrapCfgTDDeleteTable=sfrapCfgTDDeleteTable, sfrapPerfApplicationTotalTxCustom1=sfrapPerfApplicationTotalTxCustom1, sfrapSysNumToDteInstalled=sfrapSysNumToDteInstalled, sfrapCfgVnipTxTimer=sfrapCfgVnipTxTimer, sfrapPerfFRStatsCollection=sfrapPerfFRStatsCollection, sfrapDiagUnitTimeRemaining=sfrapDiagUnitTimeRemaining, sfrapCfgFrPerfDlciNamesDlciName=sfrapCfgFrPerfDlciNamesDlciName, sfrapCfgFrPerfTimersSTInterval=sfrapCfgFrPerfTimersSTInterval, sfrapPerfApplicationTotalTxSnmpTrap=sfrapPerfApplicationTotalTxSnmpTrap, sfrapStatusDteDtr=sfrapStatusDteDtr, sfrapPerfMgmtIpTCPStatsTable=sfrapPerfMgmtIpTCPStatsTable, sfrapPerfApplicationTotalRxSnmp=sfrapPerfApplicationTotalRxSnmp, sfrapPerfIpxTotalTxRip=sfrapPerfIpxTotalTxRip, sfrapPerfIpPerDlciTxIgrp=sfrapPerfIpPerDlciTxIgrp, sfrapPerfArpPerDlciRxTotal=sfrapPerfArpPerDlciRxTotal, sfrapPerfIpPerDlciRxTotal=sfrapPerfIpPerDlciRxTotal, sfrapCfgIpMyIP=sfrapCfgIpMyIP, sfrapPerfIpxTotalInterval=sfrapPerfIpxTotalInterval, sfrapPerfLmiPerDlciTxTotalByteCnt=sfrapPerfLmiPerDlciTxTotalByteCnt, sfrapLmiSourcingChangeUserToDceTrap=sfrapLmiSourcingChangeUserToDceTrap, sfrapPerfApplicationPerDlciTxTelnet=sfrapPerfApplicationPerDlciTxTelnet, sfrapCfgFrPerfLTDlciFilterTable=sfrapCfgFrPerfLTDlciFilterTable, sfrapPerfMgmtIpIPOutNoRt=sfrapPerfMgmtIpIPOutNoRt, sfrapPerfThruputPerDlciRxUtilizationStatus=sfrapPerfThruputPerDlciRxUtilizationStatus, sfrapStatusLedTable=sfrapStatusLedTable, sfrapCfgFrAddrResDlcis=sfrapCfgFrAddrResDlcis, sfrapPerfLmiTotalEntry=sfrapPerfLmiTotalEntry, sfrapPerfCirTxPercentUtilizationRange6=sfrapPerfCirTxPercentUtilizationRange6, sfrapPerfCirPercentUtilization=sfrapPerfCirPercentUtilization, sfrapPerfMgmtIpUDPOutDatagrams=sfrapPerfMgmtIpUDPOutDatagrams, sfrapCfgFrDLCIValue=sfrapCfgFrDLCIValue, sfrapLmiSourcingChangeNetToDceTrap=sfrapLmiSourcingChangeNetToDceTrap, sfrapPerfIcmpTotalRxDestUnr=sfrapPerfIcmpTotalRxDestUnr, sfrapPerfCirPercentUtilizationTable=sfrapPerfCirPercentUtilizationTable, sfrapPerfCirRxPercentUtilizationRange5=sfrapPerfCirRxPercentUtilizationRange5, sfrapSysPPPSupported=sfrapSysPPPSupported, sfrapPerfMgmtIpUDPStatsTable=sfrapPerfMgmtIpUDPStatsTable, sfrapPerfSnaPerDlciEntry=sfrapPerfSnaPerDlciEntry, sfrapPerfArpTotalEntry=sfrapPerfArpTotalEntry, sfrapPerfLmiTotalTxFullEnqByteCnt=sfrapPerfLmiTotalTxFullEnqByteCnt, sfrapPerfNetwProtoPerDlciTxArp=sfrapPerfNetwProtoPerDlciTxArp, sfrapPerfLmiTotalRxTotalByteCnt=sfrapPerfLmiTotalRxTotalByteCnt, sfrapPerfIpxPerDlciRxSpx=sfrapPerfIpxPerDlciRxSpx, sfrapPerfArpTotalRxRarpRep=sfrapPerfArpTotalRxRarpRep, sfrapVnipTopoVLOOPStatus=sfrapVnipTopoVLOOPStatus, sfrapPerfSnaTotalRxTotal=sfrapPerfSnaTotalRxTotal, sfrapPvcTxUtilizationClearedTrap=sfrapPvcTxUtilizationClearedTrap, sfrapPerfThruputPerDlciTxByte=sfrapPerfThruputPerDlciTxByte, sfrapSysName=sfrapSysName, sfrapCfgSnmpMgrEntry=sfrapCfgSnmpMgrEntry, sfrapPerfApplicationTotalRxHttp=sfrapPerfApplicationTotalRxHttp, sfrapSysSoftRev=sfrapSysSoftRev, sfrapDiagVnipEntry=sfrapDiagVnipEntry, sfrapPerfMgmtIpIPOutRqst=sfrapPerfMgmtIpIPOutRqst, sfrapPerfRoutingPerDlciRxNetbios=sfrapPerfRoutingPerDlciRxNetbios, sfrapPerfCurrentDteUtilization=sfrapPerfCurrentDteUtilization, sfrapStatusDteSendtiming=sfrapStatusDteSendtiming, sfrapPerfMgmtIpICMPInMsgs=sfrapPerfMgmtIpICMPInMsgs, sfrapPerfSnaTotalInterval=sfrapPerfSnaTotalInterval, sfrapPerfThruputPerDlciMTTSR=sfrapPerfThruputPerDlciMTTSR, sfrapStatusToDteRxClockMode=sfrapStatusToDteRxClockMode, sfrapPerfRoutingPerDlciTable=sfrapPerfRoutingPerDlciTable, sfrapPerfIcmpPerDlciRxRedirect=sfrapPerfIcmpPerDlciRxRedirect, sfrapCfgDteTxClockMode=sfrapCfgDteTxClockMode, sfrapPerfNetwLongTermProtocol=sfrapPerfNetwLongTermProtocol, sfrapCfgVnipInitTimer=sfrapCfgVnipInitTimer, sfrapStatusDteRts=sfrapStatusDteRts, sfrapPerfIpTotalRxTotal=sfrapPerfIpTotalRxTotal, sfrapPerfIcmpPerDlciRxAddrMaskReq=sfrapPerfIcmpPerDlciRxAddrMaskReq, sfrapPerfArpPerDlciRxInarpReq=sfrapPerfArpPerDlciRxInarpReq, sfrapVnipTopologyLocalDlci=sfrapVnipTopologyLocalDlci, sfrapSysResetNode=sfrapSysResetNode, sfrapPerfThruputPerDlciTxDe=sfrapPerfThruputPerDlciTxDe, sfrapLocalDte2LoopbackDisabledTrap=sfrapLocalDte2LoopbackDisabledTrap, sfrapPerfRoutingPerDlciTxNetbios=sfrapPerfRoutingPerDlciTxNetbios, sfrapPerfArpTotalTxTotal=sfrapPerfArpTotalTxTotal, sfrapCfgTransitDelayNumHops=sfrapCfgTransitDelayNumHops, sfrapPerfThruputCmdCountsStsDlciReset=sfrapPerfThruputCmdCountsStsDlciReset, sfrapPerfLmiPerDlciInterval=sfrapPerfLmiPerDlciInterval, sfrapPerfThruputCmdReplaceDlciNewValue=sfrapPerfThruputCmdReplaceDlciNewValue, sfrapCfgFrTable=sfrapCfgFrTable, sfrapPerfRoutingPerDlciInterval=sfrapPerfRoutingPerDlciInterval, sfrapSysNumUserProtocols=sfrapSysNumUserProtocols, sfrapCfgFrPerfLTDlciFilterTableClear=sfrapCfgFrPerfLTDlciFilterTableClear, sfrapDiagVnipDlci=sfrapDiagVnipDlci, sfrapPerfMgmtIpICMPOutDestUnreachs=sfrapPerfMgmtIpICMPOutDestUnreachs, sfrapPerfIcmpTotalRxGmReport=sfrapPerfIcmpTotalRxGmReport, sfrapPerfIcmpTotalRxTotal=sfrapPerfIcmpTotalRxTotal, sfrapLocalToDteLoopbackFailedTrap=sfrapLocalToDteLoopbackFailedTrap, sfrapPerfNetwLongTermAltTable=sfrapPerfNetwLongTermAltTable, sfrapEventLogAltSeqNum=sfrapEventLogAltSeqNum, sfrapStatusDteMode=sfrapStatusDteMode, sfrapCfgIpTelnetEnable=sfrapCfgIpTelnetEnable, sfrapEventTrapLog=sfrapEventTrapLog, sfrapNonIncrLmiSeqNumToDceTrap=sfrapNonIncrLmiSeqNumToDceTrap, sfrapPerfThruputCmdAvailabilityStsDlciReset=sfrapPerfThruputCmdAvailabilityStsDlciReset, sfrapVloopDown=sfrapVloopDown, sfrapPerfApplicationPerDlciTxTftp=sfrapPerfApplicationPerDlciTxTftp, sfrapCfgSnmpMgrInterface=sfrapCfgSnmpMgrInterface, sfrapSysPrompt=sfrapSysPrompt, sfrapPerfRoutingPerDlciRxRip=sfrapPerfRoutingPerDlciRxRip, sfrapPerfNetwLongTermAltProtocol=sfrapPerfNetwLongTermAltProtocol, sfrapDteSignalDtrOffTrap=sfrapDteSignalDtrOffTrap, sfrapPerfIcmpTotalTable=sfrapPerfIcmpTotalTable)
mibBuilder.exportSymbols("SFRAP-MIB", sfrapPerfIpPerDlciRxOther=sfrapPerfIpPerDlciRxOther, sfrapPerfRoutingTotalTable=sfrapPerfRoutingTotalTable, sfrapPerfArpTotalRxRarpReq=sfrapPerfArpTotalRxRarpReq, sfrapDteSignalDtrOnTrap=sfrapDteSignalDtrOnTrap, sfrapStatusDteInd=sfrapStatusDteInd, sfrapEventTrapLogVarBind1=sfrapEventTrapLogVarBind1, sfrapPerfCurrentPerDlciAggregateUtilization=sfrapPerfCurrentPerDlciAggregateUtilization, sfrapPerfIpTotalRxIcmp=sfrapPerfIpTotalRxIcmp, sfrapPerfMgmtIpTCPCurrEstab=sfrapPerfMgmtIpTCPCurrEstab, sfrapSysBootRev=sfrapSysBootRev, sfrapCfgDteTable=sfrapCfgDteTable, sfrapPerfMgmtIpIPInDlvrs=sfrapPerfMgmtIpIPInDlvrs, sfrapPerfMgmtIpTCPInSegs=sfrapPerfMgmtIpTCPInSegs, sfrapPerfIcmpPerDlciTxEchoRep=sfrapPerfIcmpPerDlciTxEchoRep, sfrapPerfLmiTotalDlciValue=sfrapPerfLmiTotalDlciValue, sfrapPerfSnaPerDlciRxAppn=sfrapPerfSnaPerDlciRxAppn, sfrapPerfApplicationPerDlciTxSnmp=sfrapPerfApplicationPerDlciTxSnmp, sfrapCfgVnipMode=sfrapCfgVnipMode, sfrapSysETHSupported=sfrapSysETHSupported, sfrapCfgTransitDelayRcvSummaryCancel=sfrapCfgTransitDelayRcvSummaryCancel, sfrapPerfIcmpPerDlciRxTimestpRep=sfrapPerfIcmpPerDlciRxTimestpRep, sfrapDiagUnitLocLoop=sfrapDiagUnitLocLoop, sfrapPerfNetworkShortTerm=sfrapPerfNetworkShortTerm, sfrapPerfArpTotalTable=sfrapPerfArpTotalTable, sfrapPerfIcmpPerDlciRxGmReduct=sfrapPerfIcmpPerDlciRxGmReduct, sfrapCfgCommMode=sfrapCfgCommMode, sfrapPerfArpTotalTxArpRep=sfrapPerfArpTotalTxArpRep, sfrapDiagDteTable=sfrapDiagDteTable, sfrapPerfThruputPerDlciOutageCount=sfrapPerfThruputPerDlciOutageCount, sfrapPerfRoutingTotalRxOspf=sfrapPerfRoutingTotalRxOspf, sfrapCfgSnmpMgrDlci=sfrapCfgSnmpMgrDlci, sfrapPerfLmiTotalTxLivoEnqByteCnt=sfrapPerfLmiTotalTxLivoEnqByteCnt, sfrapCfgAppTxtiming=sfrapCfgAppTxtiming, sfrapPerfMgmtIpIPStatsTable=sfrapPerfMgmtIpIPStatsTable, sfrapCfgTftpFilename=sfrapCfgTftpFilename, sfrapEventLogAltTable=sfrapEventLogAltTable, sfrapCfgTransitDelayThreshold=sfrapCfgTransitDelayThreshold, sfrapPerfIcmpPerDlciInterval=sfrapPerfIcmpPerDlciInterval, sfrapPerfIcmpTotalRxAddrMaskRep=sfrapPerfIcmpTotalRxAddrMaskRep, sfrapPerfApplicationPerDlciRxTelnet=sfrapPerfApplicationPerDlciRxTelnet, sfrapSysRDOSupported=sfrapSysRDOSupported, sfrapPerfApplicationPerDlciRxTftp=sfrapPerfApplicationPerDlciRxTftp, sfrapPerfIpxPerDlciRxRip=sfrapPerfIpxPerDlciRxRip, sfrapVnipTopologyIndex=sfrapVnipTopologyIndex, sfrapCfgID=sfrapCfgID, sfrapSysHighSpeedSupported=sfrapSysHighSpeedSupported, sfrapCfgDteRtsC=sfrapCfgDteRtsC, sfrapPerfNetwProtoTotalRxIp=sfrapPerfNetwProtoTotalRxIp, sfrapPvcTxUtilizationExceededTrap=sfrapPvcTxUtilizationExceededTrap, sfrapCfgSnmpUtilTrapEnable=sfrapCfgSnmpUtilTrapEnable, sfrapStatusLedOpStatusLED=sfrapStatusLedOpStatusLED, sfrapPerfThruputCmdAvailabilityStsDlciResetAll=sfrapPerfThruputCmdAvailabilityStsDlciResetAll, sfrapPerfThruput=sfrapPerfThruput, sfrapPerfIpTotalRxUdp=sfrapPerfIpTotalRxUdp, sfrapPerfNetwProtoPerDlciValue=sfrapPerfNetwProtoPerDlciValue, sfrapNonIncrLmiSeqNumToDteTrap=sfrapNonIncrLmiSeqNumToDteTrap, sfrapPerfNetwProtoTotalEntry=sfrapPerfNetwProtoTotalEntry, sfrapCfgTDDeleteInterface=sfrapCfgTDDeleteInterface, sfrapPerfNetwLongTermAltArray=sfrapPerfNetwLongTermAltArray, sfrapPerfArpPerDlciTxTotal=sfrapPerfArpPerDlciTxTotal, sfrapPerfThruputPerDlciIndex=sfrapPerfThruputPerDlciIndex, sfrapPerfIpPerDlciTxIcmp=sfrapPerfIpPerDlciTxIcmp, sfrapPerfIcmpPerDlciTxPktTooBig=sfrapPerfIcmpPerDlciTxPktTooBig, sfrapPerfRoutingPerDlciTxOspf=sfrapPerfRoutingPerDlciTxOspf, sfrapSysContact=sfrapSysContact, sfrapCfgFrPerfDlciNamesTable=sfrapCfgFrPerfDlciNamesTable, sfrapPerfIcmpTotalTxTimestpRep=sfrapPerfIcmpTotalTxTimestpRep, sfrapCfgFrPerfDlciNamesTableClear=sfrapCfgFrPerfDlciNamesTableClear, sfrapCfgFrPerfUserProtocolsPortNum=sfrapCfgFrPerfUserProtocolsPortNum, sfrapCfgTransitDelayTable=sfrapCfgTransitDelayTable, sfrapPerfCurrentWanUtilization=sfrapPerfCurrentWanUtilization, sfrapPerfIpxPerDlciRxNetbios=sfrapPerfIpxPerDlciRxNetbios, sfrapPerfIpPerDlciTable=sfrapPerfIpPerDlciTable, sfrapPerfCirTxPercentUtilizationRange8=sfrapPerfCirTxPercentUtilizationRange8, private=private, sfrapCfgVnipRxTimer=sfrapCfgVnipRxTimer, sfrapPerfMgmtIpICMPOutParmProbs=sfrapPerfMgmtIpICMPOutParmProbs, sfrapPerfRoutingTotalRxRip=sfrapPerfRoutingTotalRxRip, sfrapPerfMgmtIpTCPPassiveOpens=sfrapPerfMgmtIpTCPPassiveOpens, sfrapPerfNetwProtoPerDlciRxArp=sfrapPerfNetwProtoPerDlciRxArp, sfrapPerfIpTotalRxOther=sfrapPerfIpTotalRxOther, sfrapPerfArpTotalTxInarpRep=sfrapPerfArpTotalTxInarpRep, sfrapPerfIcmpPerDlciRxParamProb=sfrapPerfIcmpPerDlciRxParamProb, sfrapPerfCirRxPercentUtilizationRange4=sfrapPerfCirRxPercentUtilizationRange4, sfrapCfgSnmpTable=sfrapCfgSnmpTable, sfrapCfgLockID=sfrapCfgLockID, sfrapVnipTopologyTable=sfrapVnipTopologyTable, sfrapPerfIcmpTotalTxAddrMaskReq=sfrapPerfIcmpTotalTxAddrMaskReq, sfrapPerfFRStatsCollectionStatus=sfrapPerfFRStatsCollectionStatus, sfrapPerfIcmpTotalRxTimestpReq=sfrapPerfIcmpTotalRxTimestpReq)
