#
# PySNMP MIB module FN100-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FN100-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:00:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, TimeTicks, NotificationType, mgmt, Counter64, Unsigned32, Counter32, enterprises, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "TimeTicks", "NotificationType", "mgmt", "Counter64", "Unsigned32", "Counter32", "enterprises", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
cmu = MibIdentifier((1, 3, 6, 1, 4, 1, 3))
sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5))
es_1fe = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3)).setLabel("es-1fe")
sfhw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 1))
sfsw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 2))
sfadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 3))
sfswdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 4))
sfaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 5))
sfif = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 6))
sfuart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 7))
sfdebug = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 8))
sfproto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 9))
sftrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 10))
sfworkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 11))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 2))
cmuSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 1))
cmuKip = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 2))
cmuRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 3))
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("es-1fe-bridge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traps-need-acks", 1), ("traps-not-acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapAck.setStatus('mandatory')
sysTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapTime.setStatus('mandatory')
sysTrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapRetry.setStatus('mandatory')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
sfhwDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwDiagCode.setStatus('mandatory')
sfhwManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwManufData.setStatus('mandatory')
sfhwPortCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortCount.setStatus('mandatory')
sfhwPortTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4), )
if mibBuilder.loadTexts: sfhwPortTable.setStatus('mandatory')
sfhwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1), ).setIndexNames((0, "FN100-MIB", "sfhwPortIndex"))
if mibBuilder.loadTexts: sfhwPortEntry.setStatus('mandatory')
sfhwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortIndex.setStatus('mandatory')
sfhwPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 255))).clone(namedValues=NamedValues(("port-csma", 1), ("port-uart", 6), ("port-none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortType.setStatus('mandatory')
sfhwPortSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 13, 16, 80, 255))).clone(namedValues=NamedValues(("csmacd-fx", 10), ("csmacd-tpx", 13), ("csmacd-tpx-fx", 16), ("uart-female-9pin", 80), ("no-information", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortSubType.setStatus('mandatory')
sfhwPortDiagPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diag-passed", 1), ("diag-failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortDiagPassed.setStatus('mandatory')
sfhwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwAddr.setStatus('mandatory')
sfswNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswNumber.setStatus('mandatory')
sfswFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2), )
if mibBuilder.loadTexts: sfswFilesetTable.setStatus('mandatory')
sfswFileset = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1), ).setIndexNames((0, "FN100-MIB", "sfswIndex"))
if mibBuilder.loadTexts: sfswFileset.setStatus('mandatory')
sfswIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswIndex.setStatus('mandatory')
sfswDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswDesc.setStatus('mandatory')
sfswCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswCount.setStatus('mandatory')
sfswType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswType.setStatus('mandatory')
sfswSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswSizes.setStatus('mandatory')
sfswStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswStarts.setStatus('mandatory')
sfswBases = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswBases.setStatus('mandatory')
sfswFlashBank = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswFlashBank.setStatus('mandatory')
sfadminFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminFatalErr.setStatus('mandatory')
sfadminAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminAnyPass.setStatus('mandatory')
sfadminGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminGetPass.setStatus('mandatory')
sfadminNMSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminNMSIPAddr.setStatus('mandatory')
sfadminAlarmDynamic = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminAlarmDynamic.setStatus('mandatory')
sfadminAlarmAddressChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminAlarmAddressChange.setStatus('mandatory')
sfadminStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminStorageFailure.setStatus('mandatory')
sfadminAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminAuthenticationFailure.setStatus('mandatory')
sfadminMPReceiveCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminMPReceiveCongests.setStatus('mandatory')
sfadminArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminArpEntries.setStatus('mandatory')
sfadminArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminArpStatics.setStatus('mandatory')
sfadminArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminArpOverflows.setStatus('mandatory')
sfadminIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminIpEntries.setStatus('mandatory')
sfadminIpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminIpStatics.setStatus('mandatory')
sfadminStaticPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminStaticPreference.setStatus('mandatory')
sfadminRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminRipPreference.setStatus('mandatory')
sfadminRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminRipRouteDiscards.setStatus('mandatory')
sfadminRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminRebootConfig.setStatus('mandatory')
sfadminTempOK = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperature-normal", 1), ("temperature-too-hot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminTempOK.setStatus('mandatory')
sfadminDisableButton = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminDisableButton.setStatus('mandatory')
sfadminButtonSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("led-any-activity", 1), ("led-rx-activity", 2), ("led-tx-activity", 3), ("led-any-collision", 4), ("led-programmed", 5), ("led-speed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminButtonSelection.setStatus('mandatory')
sfadminLEDProgramOption = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("program-led-any-error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminLEDProgramOption.setStatus('mandatory')
sfadminVirtualSwitch1 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch1.setStatus('mandatory')
sfadminVirtualSwitch2 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch2.setStatus('mandatory')
sfadminVirtualSwitch3 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch3.setStatus('mandatory')
sfadminVirtualSwitch4 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch4.setStatus('mandatory')
sfadminDefaultVirtualSwitch = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("virtual-switch-1", 1), ("virtual-switch-2", 2), ("virtual-switch-3", 3), ("virtual-switch-4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminDefaultVirtualSwitch.setStatus('mandatory')
sfswdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswdisDesc.setStatus('mandatory')
sfswdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisAccess.setStatus('mandatory')
sfswdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswdisWriteStatus.setStatus('mandatory')
sfswdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisConfigIp.setStatus('mandatory')
sfswdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisConfigRetryTime.setStatus('mandatory')
sfswdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisConfigTotalTimeout.setStatus('mandatory')
sfaddrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDynamics.setStatus('mandatory')
sfaddrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrDynamicMax.setStatus('mandatory')
sfaddrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrFlags.setStatus('mandatory')
sfaddrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrMAC.setStatus('mandatory')
sfaddrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrPort.setStatus('mandatory')
sfaddrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("reserved", 3), ("update", 4), ("delete", 5), ("read-block", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrOperation.setStatus('mandatory')
sfaddrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrIndex.setStatus('mandatory')
sfaddrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrNext.setStatus('mandatory')
sfaddrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrBlockSize.setStatus('mandatory')
sfaddrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrBlock.setStatus('mandatory')
sfaddrAlarmMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrAlarmMAC.setStatus('mandatory')
sfaddrDbFullBuckets = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbFullBuckets.setStatus('mandatory')
sfaddrDbMaxFullBuckets = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrDbMaxFullBuckets.setStatus('mandatory')
sfaddrDbMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbMaxSize.setStatus('mandatory')
sfaddrDbBuckets = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBuckets.setStatus('mandatory')
sfaddrDbSearchDepth = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrDbSearchDepth.setStatus('mandatory')
sfaddrDbDistribution = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbDistribution.setStatus('mandatory')
sfaddrDbTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18), )
if mibBuilder.loadTexts: sfaddrDbTable.setStatus('mandatory')
sfaddrDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1), ).setIndexNames((0, "FN100-MIB", "sfaddrDbBucketAddress"))
if mibBuilder.loadTexts: sfaddrDbEntry.setStatus('mandatory')
sfaddrDbBucketAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBucketAddress.setStatus('mandatory')
sfaddrDbBucketEntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBucketEntCnt.setStatus('mandatory')
sfaddrDbBucketEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBucketEntries.setStatus('mandatory')
sfifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1), )
if mibBuilder.loadTexts: sfifTable.setStatus('mandatory')
sfifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1), ).setIndexNames((0, "FN100-MIB", "sfifIndex"))
if mibBuilder.loadTexts: sfifEntry.setStatus('mandatory')
sfifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifIndex.setStatus('mandatory')
sfifRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxCnt.setStatus('mandatory')
sfifTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxCnt.setStatus('mandatory')
sfifTxStormCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifTxStormCnt.setStatus('mandatory')
sfifTxStormTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifTxStormTime.setStatus('mandatory')
sfifFilterFloodSourceSame = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifFilterFloodSourceSame.setStatus('mandatory')
sfifFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifFunction.setStatus('mandatory')
sfifRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxPacket.setStatus('mandatory')
sfifRxHwFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxHwFCSs.setStatus('mandatory')
sfifRxQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxQueues.setStatus('mandatory')
sfifTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxPacket.setStatus('mandatory')
sfifTxStorms = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxStorms.setStatus('mandatory')
sfifStatisticsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifStatisticsTime.setStatus('mandatory')
sfifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifIpAddr.setStatus('mandatory')
sfifIpGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifIpGroupAddr.setStatus('mandatory')
sfifRxForwardChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxForwardChars.setStatus('mandatory')
sfifRxFilteredChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxFilteredChars.setStatus('mandatory')
sfifSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifSpeed.setStatus('mandatory')
sfifMgntRxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifMgntRxQueueSize.setStatus('mandatory')
sfifVirtualSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifVirtualSwitchID.setStatus('mandatory')
sfifTPLinkOK = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTPLinkOK.setStatus('mandatory')
sfifLedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("led-on", 1), ("led-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifLedOn.setStatus('mandatory')
sfifTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxCollisions.setStatus('mandatory')
sfifFuseOkay = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifFuseOkay.setStatus('mandatory')
sfifCrashEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifCrashEvents.setStatus('mandatory')
sfifCrashTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 26), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifCrashTime.setStatus('mandatory')
sfifMinimumUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 27), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifMinimumUpTime.setStatus('mandatory')
sfifDMAFlowControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDMAFlowControlEnable.setStatus('mandatory')
sfifDMARetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDMARetryCount.setStatus('mandatory')
sfifDMARetryBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDMARetryBufferCount.setStatus('mandatory')
sfifDMAPeakRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMAPeakRetries.setStatus('mandatory')
sfifDMATotalRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMATotalRetries.setStatus('mandatory')
sfifDMAPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMAPackets.setStatus('mandatory')
sfifDMADroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMADroppedPackets.setStatus('mandatory')
sfifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDescr.setStatus('mandatory')
sfifMgtDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifMgtDroppedPackets.setStatus('mandatory')
sfifLinkStatusOutages = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifLinkStatusOutages.setStatus('mandatory')
sfifLocalFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifLocalFilter.setStatus('mandatory')
sfuartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1), )
if mibBuilder.loadTexts: sfuartTable.setStatus('mandatory')
sfuartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1), ).setIndexNames((0, "FN100-MIB", "sfuartIndex"))
if mibBuilder.loadTexts: sfuartEntry.setStatus('mandatory')
sfuartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfuartIndex.setStatus('mandatory')
sfuartBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("external-clock", 1), ("b1200-baud", 2), ("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6), ("b38400-baud", 7), ("b56-kilobits", 8), ("b1544-kilobits", 9), ("b2048-kilobits", 10), ("b45-megabits", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfuartBaud.setStatus('mandatory')
sfuartAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfuartAlignmentErrors.setStatus('mandatory')
sfuartOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfuartOverrunErrors.setStatus('mandatory')
sfdebugStringID = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfdebugStringID.setStatus('mandatory')
sfdebugString = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfdebugString.setStatus('mandatory')
sfdebugTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3), )
if mibBuilder.loadTexts: sfdebugTable.setStatus('mandatory')
sfdebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1), ).setIndexNames((0, "FN100-MIB", "sfdebugIndex"))
if mibBuilder.loadTexts: sfdebugEntry.setStatus('mandatory')
sfdebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100))).clone(namedValues=NamedValues(("debug-port1", 1), ("debug-port2", 2), ("debug-port3", 3), ("debug-port4", 4), ("debug-port5", 5), ("debug-port6", 6), ("debug-port7", 7), ("debug-port8", 8), ("debug-port9", 9), ("debug-port10", 10), ("debug-port11", 11), ("debug-port12", 12), ("debug-mp", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfdebugIndex.setStatus('mandatory')
sfdebugOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("examine", 1), ("modify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugOperation.setStatus('mandatory')
sfdebugBase = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugBase.setStatus('mandatory')
sfdebugLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugLength.setStatus('mandatory')
sfdebugData = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugData.setStatus('mandatory')
sfprotoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1), )
if mibBuilder.loadTexts: sfprotoTable.setStatus('mandatory')
sfprotoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1), ).setIndexNames((0, "FN100-MIB", "sfprotoIfIndex"))
if mibBuilder.loadTexts: sfprotoEntry.setStatus('mandatory')
sfprotoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfprotoIfIndex.setStatus('mandatory')
sfprotoBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("transparent", 1), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoBridge.setStatus('mandatory')
sfprotoSuppressBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoSuppressBpdu.setStatus('mandatory')
sfprotoRipListen = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoRipListen.setStatus('mandatory')
sfprotoTrunking = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoTrunking.setStatus('mandatory')
sftrunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1), )
if mibBuilder.loadTexts: sftrunkTable.setStatus('mandatory')
sftrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1), ).setIndexNames((0, "FN100-MIB", "sftrunkIfIndex"))
if mibBuilder.loadTexts: sftrunkEntry.setStatus('mandatory')
sftrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkIfIndex.setStatus('mandatory')
sftrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("oneway", 2), ("joined", 3), ("helddown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkState.setStatus('mandatory')
sftrunkRemoteBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkRemoteBridgeId.setStatus('mandatory')
sftrunkRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkRemoteIp.setStatus('mandatory')
sftrunkLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("no-ack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLastError.setStatus('mandatory')
sftrunkLinkOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLinkOrdinal.setStatus('mandatory')
sftrunkLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLinkCount.setStatus('mandatory')
sftrunkLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLastChange.setStatus('mandatory')
sfworkGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupNextIndex.setStatus('mandatory')
sfworkGroupCurrentCounts = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupCurrentCounts.setStatus('mandatory')
sfworkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupMaxCount.setStatus('mandatory')
sfworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4), )
if mibBuilder.loadTexts: sfworkGroupTable.setStatus('mandatory')
sfworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1), ).setIndexNames((0, "FN100-MIB", "sfworkGroupIndex"))
if mibBuilder.loadTexts: sfworkGroupEntry.setStatus('mandatory')
sfworkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupIndex.setStatus('mandatory')
sfworkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfworkGroupName.setStatus('mandatory')
sfworkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("workgroup-all", 1), ("workgroup-multicast", 2), ("workgroup-unicast", 3), ("workgroup-invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfworkGroupType.setStatus('mandatory')
sfworkGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfworkGroupPort.setStatus('mandatory')
mibBuilder.exportSymbols("FN100-MIB", sfadminVirtualSwitch4=sfadminVirtualSwitch4, sfifTxStormCnt=sfifTxStormCnt, sfadminArpEntries=sfadminArpEntries, sfifDMATotalRetries=sfifDMATotalRetries, sfaddrDbFullBuckets=sfaddrDbFullBuckets, sfifTxStormTime=sfifTxStormTime, sfif=sfif, sfaddr=sfaddr, sfhwPortCount=sfhwPortCount, sfadminVirtualSwitch2=sfadminVirtualSwitch2, sfadminAlarmAddressChange=sfadminAlarmAddressChange, sftrunkIfIndex=sftrunkIfIndex, sfworkGroupType=sfworkGroupType, sfaddrDbEntry=sfaddrDbEntry, platform=platform, sfadmin=sfadmin, cmuKip=cmuKip, sfswSizes=sfswSizes, sfprotoIfIndex=sfprotoIfIndex, sfswDesc=sfswDesc, sfifMgntRxQueueSize=sfifMgntRxQueueSize, sfdebugTable=sfdebugTable, sfuartOverrunErrors=sfuartOverrunErrors, sftrunkLinkCount=sftrunkLinkCount, sfifMgtDroppedPackets=sfifMgtDroppedPackets, sfworkGroupName=sfworkGroupName, sfifFilterFloodSourceSame=sfifFilterFloodSourceSame, sfhwPortTable=sfhwPortTable, sfadminLEDProgramOption=sfadminLEDProgramOption, sfifCrashTime=sfifCrashTime, sfworkGroup=sfworkGroup, sftrunkTable=sftrunkTable, sfifRxForwardChars=sfifRxForwardChars, sfprotoTrunking=sfprotoTrunking, sfadminArpStatics=sfadminArpStatics, sfifSpeed=sfifSpeed, es_1fe=es_1fe, sfifIpAddr=sfifIpAddr, sfadminVirtualSwitch3=sfadminVirtualSwitch3, sfifDMAPeakRetries=sfifDMAPeakRetries, sfaddrDbMaxFullBuckets=sfaddrDbMaxFullBuckets, sfadminRipPreference=sfadminRipPreference, sfifIndex=sfifIndex, sfworkGroupTable=sfworkGroupTable, sfifRxQueues=sfifRxQueues, sfifLedOn=sfifLedOn, sftrunkState=sftrunkState, sfprotoSuppressBpdu=sfprotoSuppressBpdu, sfadminAnyPass=sfadminAnyPass, sftrunkLastError=sftrunkLastError, cmu=cmu, sfdebug=sfdebug, sfaddrOperation=sfaddrOperation, sftrunkRemoteIp=sftrunkRemoteIp, sfproto=sfproto, sfswdisWriteStatus=sfswdisWriteStatus, sfaddrDbBucketEntries=sfaddrDbBucketEntries, sfsw=sfsw, sfswFilesetTable=sfswFilesetTable, sfadminTempOK=sfadminTempOK, sfadminIpEntries=sfadminIpEntries, sfifDescr=sfifDescr, sfdebugEntry=sfdebugEntry, sfswBases=sfswBases, sfhwPortSubType=sfhwPortSubType, sfifDMARetryCount=sfifDMARetryCount, sysTrapRetry=sysTrapRetry, sfhwManufData=sfhwManufData, sfadminArpOverflows=sfadminArpOverflows, sysID=sysID, sfhwAddr=sfhwAddr, sfprotoEntry=sfprotoEntry, sfhwPortIndex=sfhwPortIndex, sfuartAlignmentErrors=sfuartAlignmentErrors, sfswIndex=sfswIndex, sfaddrFlags=sfaddrFlags, sfuartEntry=sfuartEntry, sfifRxCnt=sfifRxCnt, sfifVirtualSwitchID=sfifVirtualSwitchID, sysTrapAck=sysTrapAck, sysTrapTime=sysTrapTime, sfhwPortDiagPassed=sfhwPortDiagPassed, sfadminGetPass=sfadminGetPass, sfhwPortEntry=sfhwPortEntry, sfdebugString=sfdebugString, sfaddrDbBucketEntCnt=sfaddrDbBucketEntCnt, sfadminStaticPreference=sfadminStaticPreference, sfifTable=sfifTable, sfadminRebootConfig=sfadminRebootConfig, sfswdis=sfswdis, sfswCount=sfswCount, sfswType=sfswType, sftrunkEntry=sftrunkEntry, sfaddrAlarmMAC=sfaddrAlarmMAC, sfadminAuthenticationFailure=sfadminAuthenticationFailure, sfdebugData=sfdebugData, sftrunkLastChange=sftrunkLastChange, sfifFuseOkay=sfifFuseOkay, sfworkGroupPort=sfworkGroupPort, sfaddrDbSearchDepth=sfaddrDbSearchDepth, sfswdisConfigRetryTime=sfswdisConfigRetryTime, sfdebugBase=sfdebugBase, sfaddrDbDistribution=sfaddrDbDistribution, sfadminVirtualSwitch1=sfadminVirtualSwitch1, sfprotoRipListen=sfprotoRipListen, sfadminIpStatics=sfadminIpStatics, sfaddrPort=sfaddrPort, sfadminDefaultVirtualSwitch=sfadminDefaultVirtualSwitch, sfifStatisticsTime=sfifStatisticsTime, sfuartIndex=sfuartIndex, sfprotoBridge=sfprotoBridge, sfworkGroupEntry=sfworkGroupEntry, sfuartBaud=sfuartBaud, sfdebugOperation=sfdebugOperation, sfadminButtonSelection=sfadminButtonSelection, sfworkGroupCurrentCounts=sfworkGroupCurrentCounts, sfadminAlarmDynamic=sfadminAlarmDynamic, sfdebugStringID=sfdebugStringID, sfworkGroupMaxCount=sfworkGroupMaxCount, sfifRxPacket=sfifRxPacket, sfprotoTable=sfprotoTable, sfaddrDbMaxSize=sfaddrDbMaxSize, sfaddrDynamicMax=sfaddrDynamicMax, cmuRouter=cmuRouter, sfhwDiagCode=sfhwDiagCode, systems=systems, sfswdisConfigTotalTimeout=sfswdisConfigTotalTimeout, sftrunk=sftrunk, sfuartTable=sfuartTable, sfadminRipRouteDiscards=sfadminRipRouteDiscards, sysReset=sysReset, sftrunkRemoteBridgeId=sftrunkRemoteBridgeId, sysTrapPort=sysTrapPort, sfadminDisableButton=sfadminDisableButton, sftrunkLinkOrdinal=sftrunkLinkOrdinal, sfaddrDynamics=sfaddrDynamics, sfifTPLinkOK=sfifTPLinkOK, sfifRxHwFCSs=sfifRxHwFCSs, sfhw=sfhw, sys=sys, sfuart=sfuart, sfifIpGroupAddr=sfifIpGroupAddr, sfswFileset=sfswFileset, sfifDMAPackets=sfifDMAPackets, sfifLinkStatusOutages=sfifLinkStatusOutages, sfhwPortType=sfhwPortType, sfadminStorageFailure=sfadminStorageFailure, sfifCrashEvents=sfifCrashEvents, sfworkGroupIndex=sfworkGroupIndex, sfdebugLength=sfdebugLength, sfaddrMAC=sfaddrMAC, sfswFlashBank=sfswFlashBank, sfswNumber=sfswNumber, sfadminMPReceiveCongests=sfadminMPReceiveCongests, sfswdisAccess=sfswdisAccess, sfswStarts=sfswStarts, sfifDMAFlowControlEnable=sfifDMAFlowControlEnable, sfdebugIndex=sfdebugIndex, sfifRxFilteredChars=sfifRxFilteredChars, sfaddrDbTable=sfaddrDbTable, sfifEntry=sfifEntry, sfaddrIndex=sfaddrIndex, sfifDMADroppedPackets=sfifDMADroppedPackets, sfadminNMSIPAddr=sfadminNMSIPAddr, cmuSNMP=cmuSNMP, sfswdisConfigIp=sfswdisConfigIp, sfifTxCollisions=sfifTxCollisions, sigma=sigma, sfifLocalFilter=sfifLocalFilter, sfworkGroupNextIndex=sfworkGroupNextIndex, sfifTxCnt=sfifTxCnt, sfifMinimumUpTime=sfifMinimumUpTime, sfaddrDbBuckets=sfaddrDbBuckets, mibs=mibs, sfswdisDesc=sfswdisDesc, sfaddrDbBucketAddress=sfaddrDbBucketAddress, sfifTxPacket=sfifTxPacket, sfaddrNext=sfaddrNext, sfaddrBlock=sfaddrBlock, sfaddrBlockSize=sfaddrBlockSize, sfifDMARetryBufferCount=sfifDMARetryBufferCount, sfifTxStorms=sfifTxStorms, sfifFunction=sfifFunction, sfadminFatalErr=sfadminFatalErr)
