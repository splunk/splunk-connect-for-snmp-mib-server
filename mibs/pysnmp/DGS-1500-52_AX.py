#
# PySNMP MIB module DGS-1500-52_AX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1500-52_AX
# Produced by pysmi-0.3.4 at Mon Apr 29 18:28:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
dot1dBridge, dot1dBasePortEntry, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "dot1dBasePortEntry", "dot1dBasePort")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpSecurityLevel, SnmpAdminString, SnmpEngineID = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpSecurityLevel", "SnmpAdminString", "SnmpEngineID")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Integer32, enterprises, ObjectIdentity, Bits, ModuleIdentity, MibIdentifier, Counter32, IpAddress, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Integer32", "enterprises", "ObjectIdentity", "Bits", "ModuleIdentity", "MibIdentifier", "Counter32", "IpAddress", "Unsigned32", "Gauge32")
RowStatus, MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS1500Series = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126)).setLabel("dlink-DGS1500Series")
dgs_1500_52 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4)).setLabel("dgs-1500-52")
dgs_1500_52ax = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1)).setLabel("dgs-1500-52ax")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 4))
companyRSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 18))
companyTrapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20))
companyVoiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22))
companyAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25))
companyAutoSurveillanceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27))
companySIM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29))
companyGVRPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32))
companyGratuitousARP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33))
companyStaticARP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 35))
companyStaticRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36))
companyMultiIPInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
sysSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemPassword.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1), ).setIndexNames((0, "DGS-1500-52_AX", "sysPortCtrlIndex"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1000BaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysGPIOStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 15))
sysFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanStatus.setStatus('current')
sysIpInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpInterfaceName.setStatus('current')
sysIpManagementVLANName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpManagementVLANName.setStatus('current')
sysIpInterfaceAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysIpInterfaceAdminStatus.setStatus('current')
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("bootp", 3))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
tftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwServerIpAddress.setStatus('current')
tftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwImageFileName.setStatus('current')
tftpFwTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTftpOperation.setStatus('current')
tftpFwTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setStatus('current')
tftpCfgServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setStatus('current')
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('current')
tftpConfigTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigTftpOperation.setStatus('current')
tftpConfigTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
stpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1))
rstpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpStatus.setStatus('current')
stpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpVersion.setStatus('current')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpProtocolSpecification.setStatus('current')
stpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setStatus('current')
stpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopChanges.setStatus('current')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHelloTime.setStatus('current')
stpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHoldTime.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1), ).setIndexNames((0, "DGS-1500-52_AX", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEnable.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRoot.setStatus('current')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('current')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('current')
stpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortForwardTransitions.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperEdgePort.setStatus('current')
stpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setStatus('current')
stpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperPointToPoint.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 6, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 35, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 35, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "staticMcastVlanID"), (0, "DGS-1500-52_AX", "staticMcastMac"), (0, "DGS-1500-52_AX", "staticMcastEgressPorts"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 35, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 35, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 35, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 35, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6, 1), ).setIndexNames((0, "DGS-1500-52_AX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanForbiddenPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanAdvertisementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanAdvertisementStatus.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanUngisterMCFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 8), )
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setStatus('current')
dot1qVlanUngisterMCFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 8, 1), ).setIndexNames((0, "DGS-1500-52_AX", "dot1qVlanUngisterMCFilterVlanId"))
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setStatus('current')
dot1qVlanUngisterMCFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setStatus('current')
dot1qVlanUngisterMCFiltermode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("filter", 1), ("forward", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setStatus('current')
gvrpGVRPGlobalSettingsOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpGVRPGlobalSettingsOnOff.setStatus('current')
gvrpSettingsJoinTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsJoinTime.setStatus('current')
gvrpSettingsLeaveTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveTime.setStatus('current')
gvrpSettingsLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveAllTime.setStatus('current')
gvrpSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 5), )
if mibBuilder.loadTexts: gvrpSettingsTable.setStatus('current')
gvrpSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 5, 1), ).setIndexNames((0, "DGS-1500-52_AX", "gvrpSettingsPortControlIndex"))
if mibBuilder.loadTexts: gvrpSettingsEntry.setStatus('current')
gvrpSettingsPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gvrpSettingsPortControlIndex.setStatus('current')
gvrpSettingsPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsPVID.setStatus('current')
gvrpSettingsGVRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsGVRPState.setStatus('current')
gvrpSettingsIngressChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsIngressChecking.setStatus('current')
gvrpSettingsAcceptableFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 30, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allFrames", 1), ("taggedOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsAcceptableFrameType.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 1, 3, 1), ).setIndexNames((0, "DGS-1500-52_AX", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorPortPriority.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 3, 1), ).setIndexNames((0, "DGS-1500-52_AX", "staticVlanID"), (0, "DGS-1500-52_AX", "staticMac"), (0, "DGS-1500-52_AX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1500-52_AX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1500-52_AX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1500-52_AX", "igsVlanMulticastGroupVlanId"), (0, "DGS-1500-52_AX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 1))
swAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthStatus.setStatus('current')
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authProtocolRadiusEap", 1), ("authProtocolLocal", 2))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
swAuthPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2))
swAuthPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1), )
if mibBuilder.loadTexts: swAuthPortAccessControlTable.setStatus('current')
swAuthPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "swAuthAuthConfigPortNumber"))
if mibBuilder.loadTexts: swAuthPortAccessControlEntry.setStatus('current')
swAuthAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthConfigPortNumber.setStatus('current')
swAuthAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthQuietPeriod.setStatus('current')
swAuthAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthSuppTimeout.setStatus('current')
swAuthAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthServerTimeout.setStatus('current')
swAuthAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthMaxReq.setStatus('current')
swAuthAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthTxPeriod.setStatus('current')
swAuthAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthPeriod.setStatus('current')
swAuthAuthReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthentication.setStatus('current')
swAuthAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthConfigPortControl.setStatus('current')
swAuthAuthCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthCapability.setStatus('current')
swAuthAuthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthDirection.setStatus('current')
swAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 3))
swAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 3, 1), )
if mibBuilder.loadTexts: swAuthUserTable.setStatus('current')
swAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 3, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "swAuthUserName"))
if mibBuilder.loadTexts: swAuthUserEntry.setStatus('current')
swAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthUserName.setStatus('current')
swAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthUserPassword.setStatus('current')
swAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthUserStatus.setStatus('current')
swAuthRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4))
swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1), )
if mibBuilder.loadTexts: swAuthRadiusServerTable.setStatus('current')
swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: swAuthRadiusServerEntry.setStatus('current')
swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthRadiusServerIndex.setStatus('current')
swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAddress.setStatus('current')
swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAuthenticationPort.setStatus('current')
swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAccountingPort.setStatus('current')
swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerTimeout.setStatus('current')
swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerRetransmit.setStatus('current')
swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerKey.setStatus('current')
swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 23, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerStatus.setStatus('current')
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosQ1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 3))
dot1pPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 3, 1), )
if mibBuilder.loadTexts: dot1pPortTable.setStatus('current')
dot1pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "dot1pPortIndex"))
if mibBuilder.loadTexts: dot1pPortEntry.setStatus('current')
dot1pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pPortIndex.setStatus('current')
dot1pPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("highest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1pPortPriority.setStatus('current')
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4))
qosDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDiffServEnable.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 12, 4, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1500-52_AX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
broadcastStormCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 3))
broadcastStormCtrlGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setStatus('current')
broadcastStormCtrlLimitType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastonly", 1), ("multicastAndbroadcast", 2), ("dlfMulticastAndbroadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setStatus('current')
broadcastStormCtrlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 13, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 1, 2), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 1, 2, 1), ).setIndexNames((0, "DGS-1500-52_AX", "trustedHostIpAddr"), (0, "DGS-1500-52_AX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 3, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1))
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("arpSP_permit", 4), ("arpSP_deny", 5), ("voiceVlan", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 10), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 12), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setStatus('current')
aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 13), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "aclL2AccessID"), (0, "DGS-1500-52_AX", "aclL2ProfileID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "aclL3RuleAccessID"), (0, "DGS-1500-52_AX", "aclL3RuleProfileNo"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 15, 3, 1, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "snmpV3UserName"), (0, "DGS-1500-52_AX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "snmpV3GroupName"), (0, "DGS-1500-52_AX", "snmpV3GroupSecurityModel"), (0, "DGS-1500-52_AX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "snmpV3viewTreeName"), (0, "DGS-1500-52_AX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 5, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 6, 1), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 6, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "snmpV3HostAddress"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapBootup = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBootup.setStatus('current')
snmpV3TrapPortLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
snmpV3TrapGratuitousARP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 25, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapGratuitousARP.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0, 4))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
firmwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0, 8))
if mibBuilder.loadTexts: firmwareUpgradeSuccess.setStatus('current')
firmwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0, 9))
if mibBuilder.loadTexts: firmwareUpgradeFailure.setStatus('current')
firmwareIllegalFile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0, 10))
if mibBuilder.loadTexts: firmwareIllegalFile.setStatus('current')
firmwareTransferError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0, 11))
if mibBuilder.loadTexts: firmwareTransferError.setStatus('current')
firmwareChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0, 12))
if mibBuilder.loadTexts: firmwareChecksumError.setStatus('current')
gratuitousARPDuplicatedIP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 27, 0, 20))
if mibBuilder.loadTexts: gratuitousARPDuplicatedIP.setStatus('current')
syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16, 1))
syslogLogSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLogSrvAddr.setStatus('current')
syslogUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogUDPPort.setStatus('current')
syslogTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeStamp.setStatus('current')
syslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSeverity.setStatus('current')
syslogFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogFacility.setStatus('current')
syslogLogging = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLogging.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 5, 1), ).setIndexNames((0, "DGS-1500-52_AX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 6, 1), ).setIndexNames((0, "DGS-1500-52_AX", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysTrapIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIP.setStatus('current')
sysTrapSystemEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("deviceBootUp", 1), ("illegalLogin", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapSystemEvent.setStatus('current')
sysTrapPortLinkUpDownEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPortLinkUpDownEvent.setStatus('current')
sysTrapStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStateChangeEvent.setStatus('current')
sysTrapFirmUpgradeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFirmUpgradeEvent.setStatus('current')
sysTrapGratuitousARP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapGratuitousARP.setStatus('current')
sysTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 19, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStatus.setStatus('current')
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 20, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
voicevlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1))
voicevlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 2))
voicevlanDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3))
voiceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanMode.setStatus('current')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
voiceVlanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanTimeout.setStatus('current')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
voicevlanPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 6), )
if mibBuilder.loadTexts: voicevlanPortControlTable.setStatus('current')
voicevlanPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 6, 1), ).setIndexNames((0, "DGS-1500-52_AX", "voicevlanPortControlIndex"))
if mibBuilder.loadTexts: voicevlanPortControlEntry.setStatus('current')
voicevlanPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortControlIndex.setStatus('current')
voicevlanPortAutoDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setStatus('current')
voicevlanPortManuTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortManuTagMode.setStatus('current')
voicevlanPortCurrentTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortCurrentTagMode.setStatus('current')
voicevlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortState.setStatus('current')
voicevlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 2, 1), )
if mibBuilder.loadTexts: voicevlanOUITable.setStatus('current')
voicevlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "voicevlanOUITelephonyOUI"))
if mibBuilder.loadTexts: voicevlanOUIEntry.setStatus('current')
voicevlanOUITelephonyOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setStatus('current')
voicevlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIDescription.setStatus('current')
voicevlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUIMask.setStatus('current')
voicevlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIStatus.setStatus('current')
voicevlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3, 1), )
if mibBuilder.loadTexts: voicevlanDeviceTable.setStatus('current')
voicevlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "voicevlanDeviceIndexMac"))
if mibBuilder.loadTexts: voicevlanDeviceEntry.setStatus('current')
voicevlanDeviceIndexMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceIndexMac.setStatus('current')
voicevlanDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePort.setStatus('current')
voicevlanDevicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePriority.setStatus('current')
voicevlanDeviceTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceTagType.setStatus('current')
voicevlanDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanDeviceStatus.setStatus('current')
autoSurveillanceVlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 1))
autoSurveillanceVlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2))
autoSurveillanceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setStatus('current')
autoSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanId.setStatus('current')
autoSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setStatus('current')
autoSurveillanceVlanTaggedUplinkDownlinkPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanTaggedUplinkDownlinkPort.setStatus('current')
autoSurveillanceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2, 1), )
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setStatus('current')
autoSurveillanceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "autoSurveillanceVlanOUISurveillanceOUI"))
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setStatus('current')
autoSurveillanceVlanOUISurveillanceOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setStatus('current')
autoSurveillanceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setStatus('current')
autoSurveillanceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setStatus('current')
autoSurveillanceVlanOUIComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("video_Management_Server", 0), ("vMS_Client", 1), ("video_Encoder", 2), ("network_Storage", 3), ("other_IP_Surveillance_Devices", 4), ("d-Link_Surveillance_Device", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setStatus('current')
autoSurveillanceVlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 26, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setStatus('current')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 32, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 7), )
if mibBuilder.loadTexts: dlinklldpConfigManAddrTable.setStatus('current')
dlinklldpConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 7, 1), ).setIndexNames((0, "DGS-1500-52_AX", "dlinklldpLocManAddrSubtype"), (0, "DGS-1500-52_AX", "dlinklldpLocManAddr"))
if mibBuilder.loadTexts: dlinklldpConfigManAddrEntry.setStatus('current')
dlinklldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 7, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddrSubtype.setStatus('current')
dlinklldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 7, 1, 2), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddr.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 24, 7, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
dlinkGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 1))
dlinkGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 2))
dlinkGreenPortStandby = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 3))
dlinkGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 4))
dlinkGreenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setStatus('current')
dlinkGreenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setStatus('current')
dlinkGreenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setStatus('current')
dlinkGreenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setStatus('current')
dlinkGreenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setStatus('current')
dlinkGreenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setStatus('current')
dlinkGreenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setStatus('current')
dlinkGreenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setStatus('current')
dlinkGreenPortStandbyPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 3, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyPortList.setStatus('current')
dlinkGreenPortStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyState.setStatus('current')
dlinkGreenPortStandbyTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile1.setStatus('current')
dlinkGreenPortStandbyTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile2.setStatus('current')
dlinkGreenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setStatus('current')
dlinkGreenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setStatus('current')
dlinkGreenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setStatus('current')
dlinkPowerSavCableLenDetectionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavCableLenDetectionState.setStatus('current')
dlinkPowerSavLinkStatusDetectState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavLinkStatusDetectState.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
dhcpServerScreenServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 7, 2), )
if mibBuilder.loadTexts: dhcpServerScreenServerTable.setStatus('current')
dhcpServerScreenServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 7, 2, 1), ).setIndexNames((0, "DGS-1500-52_AX", "dhcpServerScreenServerIndex"))
if mibBuilder.loadTexts: dhcpServerScreenServerEntry.setStatus('current')
dhcpServerScreenServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerScreenServerIndex.setStatus('current')
dhcpServerScreenServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 7, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenServerAddress.setStatus('current')
dhcpServerScreenServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerScreenServerStatus.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 9))
trafficSegStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegStatus.setStatus('current')
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 9, 2), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 9, 2, 1), ).setIndexNames((0, "DGS-1500-52_AX", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 9, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 14, 9, 2, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
sysARPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysARPAgingTime.setStatus('current')
staticARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 2), )
if mibBuilder.loadTexts: staticARPTable.setStatus('current')
staticARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 2, 1), ).setIndexNames((0, "DGS-1500-52_AX", "staticARPIP"), (0, "DGS-1500-52_AX", "staticARPMac"))
if mibBuilder.loadTexts: staticARPEntry.setStatus('current')
staticARPIPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPIPInterface.setStatus('current')
staticARPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPIP.setStatus('current')
staticARPMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPMac.setStatus('current')
staticARPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("broadcast", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPType.setStatus('current')
staticARPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 34, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticARPRowStatus.setStatus('current')
sysGratuitousARPGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 1))
sysGratuitousARPSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 2))
sysGratuitousARPIPIfStatusUp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPIPIfStatusUp.setStatus('current')
sysGratuitousARPDuplicateIPDetected = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPDuplicateIPDetected.setStatus('current')
sysGratuitousARPLearning = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPLearning.setStatus('current')
sysGratuitousARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 2, 1), )
if mibBuilder.loadTexts: sysGratuitousARPTable.setStatus('current')
sysGratuitousARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "sysGratuitousARPIFName"))
if mibBuilder.loadTexts: sysGratuitousARPEntry.setStatus('current')
sysGratuitousARPIFName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGratuitousARPIFName.setStatus('current')
sysGratuitousARPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 33, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPInterval.setStatus('current')
multiIFInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1))
mulifMainTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1), )
if mibBuilder.loadTexts: mulifMainTable.setStatus('current')
mulIfMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "mulifMainIndex"), (0, "DGS-1500-52_AX", "mulifVLANID"))
if mibBuilder.loadTexts: mulIfMainEntry.setStatus('current')
mulifMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifMainIndex.setStatus('current')
mulifVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifVLANID.setStatus('current')
mulifName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mulifName.setStatus('current')
mulifVLANname = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifVLANname.setStatus('current')
mulifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mulifIpAddr.setStatus('current')
mulifIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mulifIpSubnetMask.setStatus('current')
mulifMainAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifMainAdminStatus.setStatus('current')
mulifMainOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkup", 1), ("linkdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifMainOperStatus.setStatus('current')
mulifMainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 41, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifMainRowStatus.setStatus('current')
staticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1), )
if mibBuilder.loadTexts: staticRouteTable.setStatus('current')
staticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "staticRouteIpAddr"), (0, "DGS-1500-52_AX", "staticRouteNetmask"), (0, "DGS-1500-52_AX", "staticRouteGateway"))
if mibBuilder.loadTexts: staticRouteEntry.setStatus('current')
staticRouteInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteInterfaceID.setStatus('current')
staticRouteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteIpAddr.setStatus('current')
staticRouteNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteNetmask.setStatus('current')
staticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteGateway.setStatus('current')
staticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteMetric.setStatus('current')
staticRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("static", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteProtocol.setStatus('current')
staticRouteBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("backup", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteBackup.setStatus('current')
staticRouteActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteActiveStatus.setStatus('current')
staticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 36, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteRowStatus.setStatus('current')
cmSingleIPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1))
cmSingleIPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 1))
cmSingleIPCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 2))
cmSingleIPVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPVersion.setStatus('current')
cmSingleIPCapability = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCapability.setStatus('current')
cmSingleIPPlatform = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPPlatform.setStatus('current')
cmSingleIPAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSingleIPAdmin.setStatus('current')
cmSingleIPRoleState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cs", 1), ("cas", 2), ("ms", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSingleIPRoleState.setStatus('current')
cmSingleIPHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSingleIPHoldtime.setStatus('current')
cmSingleIPTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 90)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSingleIPTimeInterval.setStatus('current')
cmSingleIPMSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3), )
if mibBuilder.loadTexts: cmSingleIPMSTable.setStatus('current')
cmSingleIPMSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1), ).setIndexNames((0, "DGS-1500-52_AX", "cmSingleIPMSID"))
if mibBuilder.loadTexts: cmSingleIPMSEntry.setStatus('current')
cmSingleIPMSID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSID.setStatus('current')
cmSingleIPMSDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSDeviceName.setStatus('current')
cmSingleIPMSMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSMacAddr.setStatus('current')
cmSingleIPMSFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSFirmwareVer.setStatus('current')
cmSingleIPMSCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSCapability.setStatus('current')
cmSingleIPMSPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSPlatform.setStatus('current')
cmSingleIPMSHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSHoldtime.setStatus('current')
cmSingleIPMSCasSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSingleIPMSCasSource.setStatus('current')
cmSingleIPMSPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSingleIPMSPassword.setStatus('current')
cmSingleIPMSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSingleIPMSRowStatus.setStatus('current')
cmSingleIPCaSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4), )
if mibBuilder.loadTexts: cmSingleIPCaSTable.setStatus('current')
cmSingleIPCaSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1), ).setIndexNames((0, "DGS-1500-52_AX", "cmSingleIPCaSID"))
if mibBuilder.loadTexts: cmSingleIPCaSEntry.setStatus('current')
cmSingleIPCaSID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCaSID.setStatus('current')
cmSingleIPCaSDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCaSDeviceName.setStatus('current')
cmSingleIPCaSMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCaSMacAddr.setStatus('current')
cmSingleIPCaSFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCaSFirmwareVer.setStatus('current')
cmSingleIPCaSCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCaSCapability.setStatus('current')
cmSingleIPCaSPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCaSPlatform.setStatus('current')
cmSingleIPCaSHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPCaSHoldtime.setStatus('current')
cmSingleIPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5), )
if mibBuilder.loadTexts: cmSingleIPGroupTable.setStatus('current')
cmSingleIPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1), ).setIndexNames((0, "DGS-1500-52_AX", "cmSingleIPGroupMacAddr"))
if mibBuilder.loadTexts: cmSingleIPGroupEntry.setStatus('current')
cmSingleIPGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupMacAddr.setStatus('current')
cmSingleIPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupName.setStatus('current')
cmSingleIPGroupDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupDeviceName.setStatus('current')
cmSingleIPGroupMSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupMSNumber.setStatus('current')
cmSingleIPGroupFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupFirmwareVer.setStatus('current')
cmSingleIPGroupCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupCapability.setStatus('current')
cmSingleIPGroupPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupPlatform.setStatus('current')
cmSingleIPGroupHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPGroupHoldtime.setStatus('current')
cmSingleIPNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 6), )
if mibBuilder.loadTexts: cmSingleIPNeighborTable.setStatus('current')
cmSingleIPNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 6, 1), ).setIndexNames((0, "DGS-1500-52_AX", "cmSingleIPNBReceivedPort"), (0, "DGS-1500-52_AX", "cmSingleIPNBMacAddr"))
if mibBuilder.loadTexts: cmSingleIPNeighborEntry.setStatus('current')
cmSingleIPNBReceivedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPNBReceivedPort.setStatus('current')
cmSingleIPNBMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPNBMacAddr.setStatus('current')
cmSingleIPNBRoleState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commander", 1), ("candidate", 2), ("member", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPNBRoleState.setStatus('current')
singleIPMSNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6))
singleIPMSNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0))
cmSingleIPMSColdStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 11)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSColdStart.setStatus('current')
cmSingleIPMSWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 12)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSWarmStart.setStatus('current')
cmSingleIPMSLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 13)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSLinkDown.setStatus('current')
cmSingleIPMSLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 14)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSLinkUp.setStatus('current')
cmSingleIPMSAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 15)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSAuthFail.setStatus('current')
cmSingleIPMSnewRoot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 16)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSnewRoot.setStatus('current')
cmSingleIPMSTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 17)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSTopologyChange.setStatus('current')
cmSingleIPMSrisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 18)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSrisingAlarm.setStatus('current')
cmSingleIPMSfallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 19)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"))
if mibBuilder.loadTexts: cmSingleIPMSfallingAlarm.setStatus('current')
cmSingleIPMSmacNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 20)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"), ("DGS-1500-52_AX", "cmSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: cmSingleIPMSmacNotification.setStatus('current')
cmSingleIPMSPortTypeChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 21)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"), ("DGS-1500-52_AX", "cmSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: cmSingleIPMSPortTypeChange.setStatus('current')
cmSingleIPMSPowerStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 22)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"), ("DGS-1500-52_AX", "cmSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: cmSingleIPMSPowerStatusChg.setStatus('current')
cmSingleIPMSPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 23)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"), ("DGS-1500-52_AX", "cmSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: cmSingleIPMSPowerFailure.setStatus('current')
cmSingleIPMSPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 0, 24)).setObjects(("DGS-1500-52_AX", "cmSingleIPMSID"), ("DGS-1500-52_AX", "cmSingleIPMSMacAddr"), ("DGS-1500-52_AX", "cmSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: cmSingleIPMSPowerRecover.setStatus('current')
singleIPNotifyBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 1))
cmSingleIPMSTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 29, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSingleIPMSTrapMessage.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 2, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1, 1), ).setIndexNames((0, "DGS-1500-52_AX", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 126, 4, 1, 22, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
mibBuilder.exportSymbols("DGS-1500-52_AX", companyIgsGroup=companyIgsGroup, cmSingleIPMSID=cmSingleIPMSID, dlinkGreenLEDShutoffState=dlinkGreenLEDShutoffState, qosDiffServType17=qosDiffServType17, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, cmSingleIPNBRoleState=cmSingleIPNBRoleState, tftpConfigTftpOperation=tftpConfigTftpOperation, aclProfileType=aclProfileType, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit, swTimeRangeSaturday=swTimeRangeSaturday, laPortActorPortPriority=laPortActorPortPriority, dlink_products=dlink_products, cmSingleIPGroupMSNumber=cmSingleIPGroupMSNumber, gvrpSettingsPortControlIndex=gvrpSettingsPortControlIndex, stpBridgeMaxAge=stpBridgeMaxAge, igsVlanFilterEntry=igsVlanFilterEntry, rmonEventIndex=rmonEventIndex, voicevlanSystem=voicevlanSystem, staticMcastStatus=staticMcastStatus, sysFanStatus=sysFanStatus, qosDiffServType30=qosDiffServType30, aclProfileSrcPortMask=aclProfileSrcPortMask, stpPortRestrictedTCN=stpPortRestrictedTCN, firmwareTransferError=firmwareTransferError, companyTraps=companyTraps, swAuthAuthTxPeriod=swAuthAuthTxPeriod, rmonAlarmOwner=rmonAlarmOwner, qosDiffServType20=qosDiffServType20, swTimeRangeEndMonth=swTimeRangeEndMonth, authProtocol=authProtocol, rmonHistoryDataSource=rmonHistoryDataSource, sysJumboFrameEnable=sysJumboFrameEnable, stpPortDesignatedRoot=stpPortDesignatedRoot, stpPortPriority=stpPortPriority, trustedHostTable=trustedHostTable, stpPortDesignatedPort=stpPortDesignatedPort, qosDiffServType48=qosDiffServType48, dlinkGreenPortShutoffPortList=dlinkGreenPortShutoffPortList, trafficSegMemberList=trafficSegMemberList, qosDiffServType58=qosDiffServType58, companySystem=companySystem, stpTimeSinceTopologyChange=stpTimeSinceTopologyChange, dlinkGreenPortShutoffTimeProfile1=dlinkGreenPortShutoffTimeProfile1, qosDiffServType62=qosDiffServType62, stpAdminPortPathCost=stpAdminPortPathCost, qosDiffServType29=qosDiffServType29, stpPortEnable=stpPortEnable, dlinklldpConfigManAddrTable=dlinklldpConfigManAddrTable, swAuthRadiusServerAccountingPort=swAuthRadiusServerAccountingPort, snmpV3Trap=snmpV3Trap, staticMcastMac=staticMcastMac, igsVlanRouterTable=igsVlanRouterTable, swAuthAuthReAuthentication=swAuthAuthReAuthentication, rmonStatsStatus=rmonStatsStatus, qosDiffServType09=qosDiffServType09, cmSingleIPNeighborEntry=cmSingleIPNeighborEntry, cmSingleIPGroupCapability=cmSingleIPGroupCapability, cmSingleIPCaSHoldtime=cmSingleIPCaSHoldtime, staticTable=staticTable, aclL2AccessID=aclL2AccessID, cmSingleIPMSTable=cmSingleIPMSTable, aclL2RuleEtherType=aclL2RuleEtherType, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, dlinkGreenLEDShutoff=dlinkGreenLEDShutoff, rmonStatsOwner=rmonStatsOwner, mulifIpAddr=mulifIpAddr, snmpV3CommunityPolicy=snmpV3CommunityPolicy, dot1pPortTable=dot1pPortTable, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, dot1qVlanTable=dot1qVlanTable, snmpV3ViewTree=snmpV3ViewTree, dlinkGreenPortShutoffTimeProfile2=dlinkGreenPortShutoffTimeProfile2, snmpV3viewTreeStatus=snmpV3viewTreeStatus, sysSave=sysSave, swTimeRangeThursday=swTimeRangeThursday, dlinkGreenPortStandbyPortList=dlinkGreenPortStandbyPortList, cmSingleIPGroupPlatform=cmSingleIPGroupPlatform, swAuthAuthReAuthPeriod=swAuthAuthReAuthPeriod, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, voicevlanPortCurrentTagMode=voicevlanPortCurrentTagMode, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, swAuthAuthMaxReq=swAuthAuthMaxReq, d_link=d_link, autoSurveillanceVlanMode=autoSurveillanceVlanMode, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, swAuthStatus=swAuthStatus, stpVersion=stpVersion, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, staticARPMac=staticARPMac, trafficSegTable=trafficSegTable, sysGratuitousARPIPIfStatusUp=sysGratuitousARPIPIfStatusUp, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, cmSingleIPMSPowerFailure=cmSingleIPMSPowerFailure, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, sysGroupInterval=sysGroupInterval, companyIpifGroup=companyIpifGroup, aclL3RuleStatus=aclL3RuleStatus, qosDiffServType00=qosDiffServType00, snmpV3HostAddress=snmpV3HostAddress, trafficSegEntry=trafficSegEntry, firmwareChecksumError=firmwareChecksumError, sysLBDMode=sysLBDMode, aclProfileDstPortMask=aclProfileDstPortMask, swAuthUserTable=swAuthUserTable, sysSNTPDSTEndDay=sysSNTPDSTEndDay, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, qosDiffServType21=qosDiffServType21, securityPortSecurity=securityPortSecurity, dlinkGreenLEDShutoffTimeProfile2=dlinkGreenLEDShutoffTimeProfile2, sysLocationName=sysLocationName, companyDot1qVlanGroup=companyDot1qVlanGroup, swAuthAuthDirection=swAuthAuthDirection, staticARPIP=staticARPIP, qosDiffServEnable=qosDiffServEnable, sysHardwareVersion=sysHardwareVersion, bandwidthCtrlTable=bandwidthCtrlTable, snmpV3Community=snmpV3Community, sysSNTPPollInterval=sysSNTPPollInterval, voiceVlanTimeout=voiceVlanTimeout, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, qosDiffServType08=qosDiffServType08, mulifMainAdminStatus=mulifMainAdminStatus, cmSingleIPNBReceivedPort=cmSingleIPNBReceivedPort, syslogFacility=syslogFacility, qosDiffServType51=qosDiffServType51, laPortControlEntry=laPortControlEntry, swTimeRangeStartYear=swTimeRangeStartYear, tftpCfgServerIpAddress=tftpCfgServerIpAddress, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, dlinkGreenLEDShutoffPortList=dlinkGreenLEDShutoffPortList, rmonStatistics=rmonStatistics, mulifVLANname=mulifVLANname, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, dhcpServerScreenServerAddress=dhcpServerScreenServerAddress, snmpV3GroupStatus=snmpV3GroupStatus, sysSafeGuardEnable=sysSafeGuardEnable, staticRouteProtocol=staticRouteProtocol, tftpFwTftpOperation=tftpFwTftpOperation, qosDiffServType01=qosDiffServType01, qosDiffServType33=qosDiffServType33, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, mulifVLANID=mulifVLANID, aclL3RuleAccessID=aclL3RuleAccessID, swAuthPortAccessControlEntry=swAuthPortAccessControlEntry, voicevlanDeviceTable=voicevlanDeviceTable, sysPortCtrlFlowControl=sysPortCtrlFlowControl, laPortControl=laPortControl, aclL3RuleIgmpType=aclL3RuleIgmpType, dlinkGreenPortStandbyState=dlinkGreenPortStandbyState, tftpConfigTftpOperationStatus=tftpConfigTftpOperationStatus, gvrpGVRPGlobalSettingsOnOff=gvrpGVRPGlobalSettingsOnOff, qosDiffServType47=qosDiffServType47, cmSingleIPCaSEntry=cmSingleIPCaSEntry, qosDiffServType35=qosDiffServType35, igsVlanRtrPortList=igsVlanRtrPortList, snmpV3viewTreeType=snmpV3viewTreeType, rmonHistoryEntry=rmonHistoryEntry, voicevlanPortManuTagMode=voicevlanPortManuTagMode, voicevlanPortControlTable=voicevlanPortControlTable, staticMac=staticMac, dot1qVlanForbiddenPorts=dot1qVlanForbiddenPorts, companyAuthGroup=companyAuthGroup, sysGratuitousARPLearning=sysGratuitousARPLearning, aclProfileArpSenderMacAddrMask=aclProfileArpSenderMacAddrMask, aclL3RuleProtocol=aclL3RuleProtocol, dlinkPowerSavLinkStatusDetectState=dlinkPowerSavLinkStatusDetectState, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, mulIfMainEntry=mulIfMainEntry, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit, dlinkPowerSavCableLenDetectionState=dlinkPowerSavCableLenDetectionState, gvrpSettingsTable=gvrpSettingsTable, bandwidthCtrlIndex=bandwidthCtrlIndex, miscStatisticsReset=miscStatisticsReset, swAuthRadiusServerAddress=swAuthRadiusServerAddress, singleIPMSNotifyPrefix=singleIPMSNotifyPrefix, dlinkGreenSystemHibernation=dlinkGreenSystemHibernation, sysTrapGratuitousARP=sysTrapGratuitousARP, swAuthAuthConfigPortControl=swAuthAuthConfigPortControl, cmSingleIPTimeInterval=cmSingleIPTimeInterval, staticAutoLearningList=staticAutoLearningList, rmonEventOwner=rmonEventOwner, sysSNTPTimeSeconds=sysSNTPTimeSeconds, bandwidthCtrlEntry=bandwidthCtrlEntry, companyTrapSetting=companyTrapSetting, cmSingleIPMSPortTypeChange=cmSingleIPMSPortTypeChange, staticMcastEgressPorts=staticMcastEgressPorts, cmSingleIPMSPlatform=cmSingleIPMSPlatform, autoSurveillanceVlanOUIComponentType=autoSurveillanceVlanOUIComponentType, dlinkGreenSystemHibernationTimeProfile1=dlinkGreenSystemHibernationTimeProfile1, stpPortDesignatedCost=stpPortDesignatedCost, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, qosDiffServType25=qosDiffServType25, VlanIndex=VlanIndex, sysTrapPortLinkUpDownEvent=sysTrapPortLinkUpDownEvent, swAuthUserEntry=swAuthUserEntry, qosDiffServTypeGroup=qosDiffServTypeGroup, tftpConfigFileName=tftpConfigFileName, stpPortPathCost=stpPortPathCost, staticARPType=staticARPType, voiceVlanMode=voiceVlanMode, staticRouteTable=staticRouteTable, stpMaxAge=stpMaxAge, aclL3Rule=aclL3Rule, trustedHostIpMask=trustedHostIpMask, companyMirror=companyMirror, laPortControlIndex=laPortControlIndex, swAuthRadiusServerKey=swAuthRadiusServerKey, igsGrpQueryInterval=igsGrpQueryInterval, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, snmpV3GroupName=snmpV3GroupName, securityDhcpServerScreen=securityDhcpServerScreen, igsVlanCfgQuerier=igsVlanCfgQuerier, cmSingleIPMSEntry=cmSingleIPMSEntry, qosDiffServType32=qosDiffServType32, snmpV3UserStatus=snmpV3UserStatus, sysSNTPDSTStartHour=sysSNTPDSTStartHour, rmonAlarmIndex=rmonAlarmIndex, companyTimeRangeMgmt=companyTimeRangeMgmt, dlink_DGS1500Series=dlink_DGS1500Series, voicevlanDeviceTagType=voicevlanDeviceTagType, securityTrustedHost=securityTrustedHost, rmonHistoryStatus=rmonHistoryStatus, snmpV3HostCommunityName=snmpV3HostCommunityName, companyMultiIPInterface=companyMultiIPInterface, securitySSL=securitySSL, dot1qVlanAdvertisementStatus=dot1qVlanAdvertisementStatus, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, cmSingleIPMSWarmStart=cmSingleIPMSWarmStart, voicevlanPortControlEntry=voicevlanPortControlEntry, swTimeRangeStartMinute=swTimeRangeStartMinute, broadcastStormCtrlSettings=broadcastStormCtrlSettings, staticRouteRowStatus=staticRouteRowStatus, sysLBDVlanLoopTable=sysLBDVlanLoopTable, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, staticRouteIpAddr=staticRouteIpAddr, qosDiffServType05=qosDiffServType05, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, sysPortCtrlIndex=sysPortCtrlIndex, sysGateway=sysGateway, aclL2RuleAction=aclL2RuleAction, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, dlinklldpLocManAddr=dlinklldpLocManAddr, dlinkGreenSystemHibernationTimeProfile2=dlinkGreenSystemHibernationTimeProfile2, swTimeRangeWednesday=swTimeRangeWednesday, mulifMainTable=mulifMainTable, snmpV3HostStatus=snmpV3HostStatus, stpPortState=stpPortState, qosDiffServType10=qosDiffServType10, sysMirrorTargetPort=sysMirrorTargetPort)
mibBuilder.exportSymbols("DGS-1500-52_AX", swAuthAuthQuietPeriod=swAuthAuthQuietPeriod, qosDiffServType56=qosDiffServType56, snmpV3TrapPortLinkUpDown=snmpV3TrapPortLinkUpDown, swAuthUserPassword=swAuthUserPassword, gvrpSettingsLeaveAllTime=gvrpSettingsLeaveAllTime, laPortControlTable=laPortControlTable, dlinkGreenPortStandby=dlinkGreenPortStandby, stpPortProtocolMigration=stpPortProtocolMigration, sysLBDCtrlIndex=sysLBDCtrlIndex, cmSingleIPMSPowerStatusChg=cmSingleIPMSPowerStatusChg, rmonEventStatus=rmonEventStatus, dlinkGreenLEDShutoffTimeProfile1=dlinkGreenLEDShutoffTimeProfile1, multiIFInfo=multiIFInfo, rmonEventType=rmonEventType, cmSingleIPMSColdStart=cmSingleIPMSColdStart, tftpFwServerIpAddress=tftpFwServerIpAddress, qosDiffServType18=qosDiffServType18, stpHelloTime=stpHelloTime, snmpV3HostEntry=snmpV3HostEntry, sysIpInterfaceAdminStatus=sysIpInterfaceAdminStatus, swTimeRangeFriday=swTimeRangeFriday, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, qosDiffServType53=qosDiffServType53, sysIpInterfaceName=sysIpInterfaceName, staticStatus=staticStatus, syslogUDPPort=syslogUDPPort, sysGratuitousARPTable=sysGratuitousARPTable, qosDiffServType15=qosDiffServType15, rmonAlarmInterval=rmonAlarmInterval, voicevlanOUIStatus=voicevlanOUIStatus, aclL3RuleAction=aclL3RuleAction, companySNMPV3=companySNMPV3, swAuthPortAccessCtrl=swAuthPortAccessCtrl, sysLBDRecoverTime=sysLBDRecoverTime, companyRSTP=companyRSTP, sysPortCtrlSpeed=sysPortCtrlSpeed, stpProtocolSpecification=stpProtocolSpecification, autoSurveillanceVlanOUISurveillanceOUI=autoSurveillanceVlanOUISurveillanceOUI, swTimeRangeEndHour=swTimeRangeEndHour, companyGratuitousARP=companyGratuitousARP, qosDiffServType12=qosDiffServType12, sysGratuitousARPInterval=sysGratuitousARPInterval, stpTxHoldCount=stpTxHoldCount, topologyChange=topologyChange, aclProfile=aclProfile, swTimeRangeStartHour=swTimeRangeStartHour, staticRouteMetric=staticRouteMetric, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, stpHoldTime=stpHoldTime, companyQoSGroup=companyQoSGroup, trustedHostRowStatus=trustedHostRowStatus, aRPSpoofPreventPortList=aRPSpoofPreventPortList, companySNTPSetting=companySNTPSetting, swAuthRadiusServerStatus=swAuthRadiusServerStatus, cmSingleIPRoleState=cmSingleIPRoleState, sysPortCtrlTable=sysPortCtrlTable, firmwareIllegalFile=firmwareIllegalFile, portSecMLA=portSecMLA, sysMirrorStatus=sysMirrorStatus, cmSingleIPMSfallingAlarm=cmSingleIPMSfallingAlarm, companyVoiceVlan=companyVoiceVlan, cmSingleIPMSTrapMessage=cmSingleIPMSTrapMessage, gvrpSettingsLeaveTime=gvrpSettingsLeaveTime, swTimeRangeRowStatus=swTimeRangeRowStatus, stpRootCost=stpRootCost, rmonAlarmEntry=rmonAlarmEntry, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, cmSingleIPMSHoldtime=cmSingleIPMSHoldtime, qosDiffServType19=qosDiffServType19, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, cmSingleIPGroupMacAddr=cmSingleIPGroupMacAddr, stpBridgeHelloTime=stpBridgeHelloTime, swAuthUserStatus=swAuthUserStatus, swAuthUserName=swAuthUserName, aRPSpoofPreventEntry=aRPSpoofPreventEntry, dhcpServerScreenServerIndex=dhcpServerScreenServerIndex, broadcastStormCtrlThreshold=broadcastStormCtrlThreshold, sysIpAddr=sysIpAddr, aclProfileIPProtocol=aclProfileIPProtocol, snmpV3viewTreeMask=snmpV3viewTreeMask, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, sysGPIOStatus=sysGPIOStatus, swTimeRangeName=swTimeRangeName, aclL2RuleTable=aclL2RuleTable, rmonEventEntry=rmonEventEntry, cmSingleIPMSFirmwareVer=cmSingleIPMSFirmwareVer, snmpV3HostTable=snmpV3HostTable, cmSingleIPMSAuthFail=cmSingleIPMSAuthFail, qosDiffServType50=qosDiffServType50, aclL2RuleEntry=aclL2RuleEntry, cmSingleIPMSLinkUp=cmSingleIPMSLinkUp, sysSNTPDSTEndMon=sysSNTPDSTEndMon, tftpFwImageFileName=tftpFwImageFileName, rstpStatus=rstpStatus, sysARPAgingTime=sysARPAgingTime, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, swAuthRadiusServerEntry=swAuthRadiusServerEntry, dhcpServerScreenServerStatus=dhcpServerScreenServerStatus, voicevlanDeviceEntry=voicevlanDeviceEntry, cmSingleIPGroupName=cmSingleIPGroupName, laSystem=laSystem, qosDiffServType06=qosDiffServType06, rmonStatsIndex=rmonStatsIndex, snmpV3GroupTable=snmpV3GroupTable, portSecEntry=portSecEntry, autoSurveillanceVlanOUITable=autoSurveillanceVlanOUITable, companyTrafficMgmt=companyTrafficMgmt, qosDiffServType42=qosDiffServType42, rmonEventTable=rmonEventTable, stpPortForwardTransitions=stpPortForwardTransitions, snmpV3UserGroupName=snmpV3UserGroupName, staticEntry=staticEntry, cmSingleIPGroupFirmwareVer=cmSingleIPGroupFirmwareVer, qosDiffServType27=qosDiffServType27, gvrpSettingsIngressChecking=gvrpSettingsIngressChecking, swTimeRangeIndex=swTimeRangeIndex, qosDiffServType59=qosDiffServType59, sysGratuitousARPEntry=sysGratuitousARPEntry, companySecurity=companySecurity, stpPortRestrictedRole=stpPortRestrictedRole, rmonAlarmTable=rmonAlarmTable, trafficSegIfIndex=trafficSegIfIndex, sysTrapStatus=sysTrapStatus, dlinklldpTxDelay=dlinklldpTxDelay, cmSingleIPMSmacNotification=cmSingleIPMSmacNotification, qosDiffServType31=qosDiffServType31, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, companyACLGroup=companyACLGroup, voicevlanPortAutoDetection=voicevlanPortAutoDetection, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, snmpGlobalState=snmpGlobalState, companyGreenSetting=companyGreenSetting, laPortChannelIfIndex=laPortChannelIfIndex, dlinklldpReinitDelay=dlinklldpReinitDelay, aclProfileMask=aclProfileMask, staticMcastEntry=staticMcastEntry, companyStaticRoute=companyStaticRoute, sslCipherSuiteList=sslCipherSuiteList, staticRouteBackup=staticRouteBackup, trafficSegStatus=trafficSegStatus, aclL3RuleEntry=aclL3RuleEntry, swTimeRangeEndMinute=swTimeRangeEndMinute, qosDiffServType03=qosDiffServType03, aclL3RuleDscp=aclL3RuleDscp, voicevlanDevice=voicevlanDevice, qosDiffServType60=qosDiffServType60, staticARPEntry=staticARPEntry, cmSingleIPGroupHoldtime=cmSingleIPGroupHoldtime, stpPortAdminPointToPoint=stpPortAdminPointToPoint, cmSingleIPMSMacAddr=cmSingleIPMSMacAddr, igsVlanFastLeave=igsVlanFastLeave, qosDiffServ=qosDiffServ, voicevlanOUITelephonyOUI=voicevlanOUITelephonyOUI, dlinklldpState=dlinklldpState, stpPortEdge=stpPortEdge, dot1qVlanEgressPorts=dot1qVlanEgressPorts, dot1qVlanUngisterMCFiltermode=dot1qVlanUngisterMCFiltermode, trustedHostEntry=trustedHostEntry, autoSurveillanceVlanSystem=autoSurveillanceVlanSystem, rmonAlarmSampleType=rmonAlarmSampleType, swTimeRangeEndYear=swTimeRangeEndYear, stpPortEntry=stpPortEntry, voicevlanOUITable=voicevlanOUITable, swTimeRangeEndDay=swTimeRangeEndDay, swTimeRangeSettingEntry=swTimeRangeSettingEntry, autoSurveillanceVlanPriority=autoSurveillanceVlanPriority, cmSingleIPAdmin=cmSingleIPAdmin, aclProfileArpSenderIpAddrMask=aclProfileArpSenderIpAddrMask, singleIPMSNotify=singleIPMSNotify, gvrpSettingsJoinTime=gvrpSettingsJoinTime, sysGratuitousARPSettings=sysGratuitousARPSettings, staticVlanID=staticVlanID, sysSNTPDSTOffset=sysSNTPDSTOffset, qosDiffServType16=qosDiffServType16, staticDisableAutoLearn=staticDisableAutoLearn, igsHostPortPurgeInterval=igsHostPortPurgeInterval, queuingMechanism=queuingMechanism, stpTopChanges=stpTopChanges, snmpV3UserVersion=snmpV3UserVersion, cmSingleIPGroupTable=cmSingleIPGroupTable, stpPortOperEdgePort=stpPortOperEdgePort, companySIM=companySIM, stpPortDesignatedBridge=stpPortDesignatedBridge, sysLBDPortStatus=sysLBDPortStatus, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, snmpV3UserEntry=snmpV3UserEntry, swAuthRadiusServerTimeout=swAuthRadiusServerTimeout, sysLBDCtrlEntry=sysLBDCtrlEntry, voicevlanOUIDescription=voicevlanOUIDescription, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, qosDiffServType45=qosDiffServType45, qosDiffServType38=qosDiffServType38, qosDiffServType24=qosDiffServType24, swTimeRangeTuesday=swTimeRangeTuesday, companyStaticMcast=companyStaticMcast, dgs_1500_52=dgs_1500_52, miscReset=miscReset, sysRestart=sysRestart, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, aclL2RuleInPortList=aclL2RuleInPortList, qosDiffServType52=qosDiffServType52, rmonGlobalState=rmonGlobalState, laPortChannelEntry=laPortChannelEntry, sslSecurityHttpStatus=sslSecurityHttpStatus, syslogGeneralGroup=syslogGeneralGroup, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, snmpV3viewTreeName=snmpV3viewTreeName, swAuthRadiusServerTable=swAuthRadiusServerTable, sysSNTPState=sysSNTPState, cmSingleIPMSnewRoot=cmSingleIPMSnewRoot, sysSystemPassword=sysSystemPassword, cmSingleIPInfo=cmSingleIPInfo, rmonHistory=rmonHistory, LacpKey=LacpKey, dot1pPortPriority=dot1pPortPriority, gvrpSettingsGVRPState=gvrpSettingsGVRPState, aclProfileEntry=aclProfileEntry, staticRouteEntry=staticRouteEntry, PortLaMode=PortLaMode, stpGlobal=stpGlobal, sysSNTPDSTStartMon=sysSNTPDSTStartMon, qosDiffServType54=qosDiffServType54, igsVlanQuerier=igsVlanQuerier, bandwidthCtrlSettings=bandwidthCtrlSettings, qosDiffServType57=qosDiffServType57, voicevlanDeviceIndexMac=voicevlanDeviceIndexMac, stpRootPort=stpRootPort, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, snmpV3CommunityName=snmpV3CommunityName, sysTrapIP=sysTrapIP, aclL2RuleStatus=aclL2RuleStatus, cmSingleIPMSrisingAlarm=cmSingleIPMSrisingAlarm, voicevlanDeviceStatus=voicevlanDeviceStatus, sysLoginTimeoutInterval=sysLoginTimeoutInterval, qosDiffServType36=qosDiffServType36, igsVlanFilterVlanId=igsVlanFilterVlanId, dlinkGreenPortShutoff=dlinkGreenPortShutoff, qosDiffServType46=qosDiffServType46, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, stpPortTable=stpPortTable, portSecIndex=portSecIndex, dhcpServerScreenServerTable=dhcpServerScreenServerTable, cmSingleIPMSLinkDown=cmSingleIPMSLinkDown, igsVlanQueryInterval=igsVlanQueryInterval, firmwareUpgradeSuccess=firmwareUpgradeSuccess, companyMiscGroup=companyMiscGroup, portSecTable=portSecTable, laPortActorActivity=laPortActorActivity, cmSingleIPMSRowStatus=cmSingleIPMSRowStatus, cmSingleIPVersion=cmSingleIPVersion, companyLA=companyLA, swTimeRangeStartDay=swTimeRangeStartDay, sysPortCtrlMDI=sysPortCtrlMDI)
mibBuilder.exportSymbols("DGS-1500-52_AX", trustedHostStatus=trustedHostStatus, cmSingleIPCaSPlatform=cmSingleIPCaSPlatform, swAuthAuthSuppTimeout=swAuthAuthSuppTimeout, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, snmpV3TrapGratuitousARP=snmpV3TrapGratuitousARP, cmSingleIPNeighborTable=cmSingleIPNeighborTable, PortList=PortList, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, dot1qVlanUngisterMCFilterTable=dot1qVlanUngisterMCFilterTable, snmpV3CommunityStatus=snmpV3CommunityStatus, voicevlanPortState=voicevlanPortState, staticRouteNetmask=staticRouteNetmask, cmSingleIPCaSID=cmSingleIPCaSID, swTimeRangeMonday=swTimeRangeMonday, aclL3RuleProfileNo=aclL3RuleProfileNo, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, sysTrapSystemEvent=sysTrapSystemEvent, mulifIpSubnetMask=mulifIpSubnetMask, portSecState=portSecState, qosDiffServType14=qosDiffServType14, aclL3RulePortList=aclL3RulePortList, qosDiffServType13=qosDiffServType13, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, rmonHistoryTable=rmonHistoryTable, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask, syslogSeverity=syslogSeverity, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, cmSingleIPCapability=cmSingleIPCapability, snmpV3HostVersion=snmpV3HostVersion, BridgeId=BridgeId, sysGratuitousARPDuplicateIPDetected=sysGratuitousARPDuplicateIPDetected, sysPortCtrlType=sysPortCtrlType, sysLBDPortLoopStatus=sysLBDPortLoopStatus, dlinkGreenPortStandbyTimeProfile1=dlinkGreenPortStandbyTimeProfile1, dot1qVlanRowStatus=dot1qVlanRowStatus, snmpV3GroupEntry=snmpV3GroupEntry, stpPortOperPointToPoint=stpPortOperPointToPoint, stpForwardDelay=stpForwardDelay, companyAutoSurveillanceVlan=companyAutoSurveillanceVlan, sysSNTPDSTEndHour=sysSNTPDSTEndHour, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, sysSNTPGMTMinutes=sysSNTPGMTMinutes, cmSingleIPCtrl=cmSingleIPCtrl, cmSingleIPMSCapability=cmSingleIPMSCapability, broadcastStormCtrlGlobalOnOff=broadcastStormCtrlGlobalOnOff, companyStaticARP=companyStaticARP, dgs_1500_52ax=dgs_1500_52ax, swAuthAuthCapability=swAuthAuthCapability, companyLLDPSetting=companyLLDPSetting, staticARPIPInterface=staticARPIPInterface, broadcastStormCtrlLimitType=broadcastStormCtrlLimitType, cmSingleIPMSCasSource=cmSingleIPMSCasSource, securityTrafficSeg=securityTrafficSeg, mulifMainOperStatus=mulifMainOperStatus, aclProfileTable=aclProfileTable, sysLBDCtrlTable=sysLBDCtrlTable, swAuthAuthConfigPortNumber=swAuthAuthConfigPortNumber, qosDiffServType41=qosDiffServType41, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, rmonStatsEntry=rmonStatsEntry, sysIpSubnetMask=sysIpSubnetMask, qosDiffServType04=qosDiffServType04, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, singleIPNotifyBidings=singleIPNotifyBidings, sysLBDInterval=sysLBDInterval, mulifMainIndex=mulifMainIndex, dot1pPortIndex=dot1pPortIndex, sysSNTPDSTStartDay=sysSNTPDSTStartDay, stpBridgeForwardDelay=stpBridgeForwardDelay, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, sysLBDStateEnable=sysLBDStateEnable, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, stpDesignatedRoot=stpDesignatedRoot, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, laPortActorTimeout=laPortActorTimeout, swAuthPortAccessControlTable=swAuthPortAccessControlTable, cmSingleIPMSTopologyChange=cmSingleIPMSTopologyChange, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, gratuitousARPDuplicatedIP=gratuitousARPDuplicatedIP, Timeout=Timeout, sslCiphers=sslCiphers, aclL2ProfileID=aclL2ProfileID, swTimeRangeSunday=swTimeRangeSunday, snmpV3EngineID=snmpV3EngineID, igsVlanRouterEntry=igsVlanRouterEntry, snmpV3UserTable=snmpV3UserTable, sysSNTPDSTStartMin=sysSNTPDSTStartMin, companyLBD=companyLBD, rmonEvent=rmonEvent, voicevlanOUIEntry=voicevlanOUIEntry, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, autoSurveillanceVlanTaggedUplinkDownlinkPort=autoSurveillanceVlanTaggedUplinkDownlinkPort, sysTrapStateChangeEvent=sysTrapStateChangeEvent, mulifMainRowStatus=mulifMainRowStatus, rmonStatsDataSource=rmonStatsDataSource, voiceVlanId=voiceVlanId, laPortChannelTable=laPortChannelTable, cmSingleIPHoldtime=cmSingleIPHoldtime, igsQueryInterval=igsQueryInterval, firmwareUpgradeFailure=firmwareUpgradeFailure, qosDiffServType07=qosDiffServType07, igsVlanFilterTable=igsVlanFilterTable, companyTftpGroup=companyTftpGroup, snmpV3GroupReadViewName=snmpV3GroupReadViewName, sysSwitchName=sysSwitchName, qosDiffServType26=qosDiffServType26, qosDiffServType22=qosDiffServType22, voicevlanDevicePort=voicevlanDevicePort, aclProfileRuleCount=aclProfileRuleCount, cmSingleIPCaSMacAddr=cmSingleIPCaSMacAddr, cmSingleIPGroupDeviceName=cmSingleIPGroupDeviceName, gvrpSettingsAcceptableFrameType=gvrpSettingsAcceptableFrameType, voicevlanOUI=voicevlanOUI, sysIpManagementVLANName=sysIpManagementVLANName, igsVlan=igsVlan, cmSingleIPCaSCapability=cmSingleIPCaSCapability, syslogLogging=syslogLogging, swTimeRangeStartMonth=swTimeRangeStartMonth, sysPortCtrlOperStatus=sysPortCtrlOperStatus, gvrpSettingsPVID=gvrpSettingsPVID, igsQueryMaxResponseTime=igsQueryMaxResponseTime, rmonStatsTable=rmonStatsTable, cmSingleIPPlatform=cmSingleIPPlatform, rmonAlarmStatus=rmonAlarmStatus, companyStaticMAC=companyStaticMAC, swAuthAuthServerTimeout=swAuthAuthServerTimeout, laPortChannelMemberList=laPortChannelMemberList, cmSingleIPGroupEntry=cmSingleIPGroupEntry, aclProfileNo=aclProfileNo, voicevlanPortControlIndex=voicevlanPortControlIndex, staticRouteInterfaceID=staticRouteInterfaceID, rmonAlarm=rmonAlarm, staticARPTable=staticARPTable, swAuthRadiusServer=swAuthRadiusServer, cmSingleIPCaSDeviceName=cmSingleIPCaSDeviceName, laPortChannelMode=laPortChannelMode, staticPort=staticPort, voicevlanDevicePriority=voicevlanDevicePriority, dhcpServerScreenServerEntry=dhcpServerScreenServerEntry, staticRouteGateway=staticRouteGateway, qosDiffServType61=qosDiffServType61, aclL3RuleTable=aclL3RuleTable, snmpV3UserName=snmpV3UserName, swTimeRangeDate=swTimeRangeDate, sysSNTPDSTEndMin=sysSNTPDSTEndMin, aclL2Rule1pPriority=aclL2Rule1pPriority, autoSurveillanceVlanOUIDescription=autoSurveillanceVlanOUIDescription, snmpV3CommunityEntry=snmpV3CommunityEntry, laStatus=laStatus, snmpV3User=snmpV3User, rmonHistoryOwner=rmonHistoryOwner, tftpFwTftpOperationStatus=tftpFwTftpOperationStatus, cmSingleIPNBMacAddr=cmSingleIPNBMacAddr, aRPSpoofPreventTable=aRPSpoofPreventTable, dlinkGreenPortStandbyTimeProfile2=dlinkGreenPortStandbyTimeProfile2, gvrpSettingsEntry=gvrpSettingsEntry, igsVlanRouterPortList=igsVlanRouterPortList, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, staticMcastTable=staticMcastTable, trustedHostIpAddr=trustedHostIpAddr, voiceVlanPriority=voiceVlanPriority, swAuthRadiusServerRetransmit=swAuthRadiusServerRetransmit, aclL2RuleVlanId=aclL2RuleVlanId, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, snmpV3Host=snmpV3Host, qosDiffServType40=qosDiffServType40, sysSNTPFirstServer=sysSNTPFirstServer, swTimeRangeSettingTable=swTimeRangeSettingTable, companySyslog=companySyslog, dot1qVlanUngisterMCFilterEntry=dot1qVlanUngisterMCFilterEntry, snmpV3TrapBootup=snmpV3TrapBootup, qosDiffServType63=qosDiffServType63, sysFirmwareVersion=sysFirmwareVersion, sysGratuitousARPIFName=sysGratuitousARPIFName, swAuthenCtrl=swAuthenCtrl, rmonEventDescription=rmonEventDescription, rmonAlarmVariable=rmonAlarmVariable, sysPortCtrlEntry=sysPortCtrlEntry, staticRouteActiveStatus=staticRouteActiveStatus, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, sysTrapFirmUpgradeEvent=sysTrapFirmUpgradeEvent, RmonStatus=RmonStatus, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, dot1qVlanEntry=dot1qVlanEntry, cmSingleIPCaSFirmwareVer=cmSingleIPCaSFirmwareVer, voicevlanOUIMask=voicevlanOUIMask, swAuthRadiusServerIndex=swAuthRadiusServerIndex, qosDiffServType37=qosDiffServType37, igsStatus=igsStatus, dlinkGreenSystemHibernationState=dlinkGreenSystemHibernationState, qosQ1p=qosQ1p, LldpManAddress=LldpManAddress, cmSingleIPCaSTable=cmSingleIPCaSTable, qosDiffServType28=qosDiffServType28, qosDiffServType44=qosDiffServType44, qosMode=qosMode, dlinkGreenPortShutoffState=dlinkGreenPortShutoffState, swAuthRadiusServerAuthenticationPort=swAuthRadiusServerAuthenticationPort, cmSingleIPMSPassword=cmSingleIPMSPassword, aclProfileStatus=aclProfileStatus, dlinklldpLocManAddrSubtype=dlinklldpLocManAddrSubtype, mulifName=mulifName, staticMcastVlanID=staticMcastVlanID, dot1qVlanName=dot1qVlanName, qosDiffServType11=qosDiffServType11, rmonEventCommunity=rmonEventCommunity, qosDiffServType55=qosDiffServType55, cmSingleIPMSPowerRecover=cmSingleIPMSPowerRecover, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, qosDiffServType49=qosDiffServType49, companyRMON=companyRMON, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, syslogLogSrvAddr=syslogLogSrvAddr, qosDiffServType34=qosDiffServType34, qosDiffServType23=qosDiffServType23, cmSingleIPMSDeviceName=cmSingleIPMSDeviceName, autoSurveillanceVlanOUIEntry=autoSurveillanceVlanOUIEntry, sysGratuitousARPGlobalSettings=sysGratuitousARPGlobalSettings, syslogTimeStamp=syslogTimeStamp, autoSurveillanceVlanOUIMask=autoSurveillanceVlanOUIMask, igsRobustnessValue=igsRobustnessValue, dot1qVlanUngisterMCFilterVlanId=dot1qVlanUngisterMCFilterVlanId, aclL2Rule=aclL2Rule, sysSNTPDSTState=sysSNTPDSTState, staticARPRowStatus=staticARPRowStatus, autoSurveillanceVlanId=autoSurveillanceVlanId, snmpV3ViewTreeTable=snmpV3ViewTreeTable, igsVlanSnoopStatus=igsVlanSnoopStatus, securityARPSpoofPrevent=securityARPSpoofPrevent, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, igsSystem=igsSystem, igsVlanRouterVlanId=igsVlanRouterVlanId, dlinklldpConfigManAddrEntry=dlinklldpConfigManAddrEntry, rmonHistoryIndex=rmonHistoryIndex, sysIpAddrCfgMode=sysIpAddrCfgMode, dot1pPortEntry=dot1pPortEntry, snmpV3CommunityTable=snmpV3CommunityTable, qosDiffServType02=qosDiffServType02, stpPriority=stpPriority, cmSingleIPMgmt=cmSingleIPMgmt, rmonHistoryInterval=rmonHistoryInterval, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, sysSNTPSecondServer=sysSNTPSecondServer, stpPort=stpPort, autoSurveillanceVlanOUI=autoSurveillanceVlanOUI, qosDiffServType39=qosDiffServType39, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, snmpV3Group=snmpV3Group, traps=traps, autoSurveillanceVlanOUIStatus=autoSurveillanceVlanOUIStatus, companyGVRPGroup=companyGVRPGroup, swAuthUser=swAuthUser)
mibBuilder.exportSymbols("DGS-1500-52_AX", qosDiffServType43=qosDiffServType43)
