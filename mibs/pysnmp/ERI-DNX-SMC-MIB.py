#
# PySNMP MIB module ERI-DNX-SMC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-SMC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
eriMibs, eriProducts = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs", "eriProducts")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, IpAddress, Unsigned32, Gauge32, MibIdentifier, NotificationType, Counter64, ModuleIdentity, Counter32, ObjectIdentity, Integer32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Unsigned32", "Gauge32", "MibIdentifier", "NotificationType", "Counter64", "ModuleIdentity", "Counter32", "ObjectIdentity", "Integer32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eriDNXSmcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 1))
eriDNXSmcMIB.setRevisions(('2003-05-19 00:00', '2003-05-06 00:00', '2003-03-21 00:00', '2003-02-25 00:00', '2003-01-28 00:00', '2003-01-10 00:00', '2003-01-03 00:00', '2002-11-18 00:00', '2002-10-30 00:00', '2002-09-19 00:00', '2002-08-20 00:00', '2002-07-22 00:00', '2002-07-03 00:00', '2002-05-31 00:00', '2002-05-13 00:00', '2002-05-06 00:00', '2002-04-22 00:00', '2002-04-18 00:00', '2002-04-12 00:00', '2002-03-11 00:00', '2001-11-13 00:00', '2001-09-10 00:00', '2001-08-13 00:00', '2001-07-19 00:00', '2001-07-05 00:00', '2001-06-23 00:00', '2001-06-01 00:00', '2001-05-21 00:00', '2001-03-23 00:00', '2001-03-01 00:00', '2001-01-02 00:00', '2000-12-01 00:00', '2000-10-26 00:00', '2000-10-02 00:00', '2000-07-26 00:00', '2000-05-31 00:00', '2000-05-15 00:00', '2000-02-25 00:00', '1999-12-15 00:00', '1999-11-09 00:00', '1998-12-15 00:00',))
if mibBuilder.loadTexts: eriDNXSmcMIB.setLastUpdated('200305190000Z')
if mibBuilder.loadTexts: eriDNXSmcMIB.setOrganization('Eastern Research, Inc.')
dnx = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4))
sysMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1))
devices = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 3))
class DnxResourceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144))
    namedValues = NamedValues(("slot", 0), ("deviceOctalE1T1", 1), ("deviceQuadHighSpeed", 2), ("deviceOctalHighSpeed", 3), ("deviceQuadOcu", 4), ("deviceSystemManager", 5), ("deviceQuadT1", 6), ("deviceT3", 7), ("deviceTestAccess", 8), ("deviceVoice", 9), ("deviceVoiceEM", 10), ("deviceVoiceFXO", 11), ("deviceVoiceFXS", 12), ("powerSupply", 14), ("protectionSwitch", 15), ("deviceRouterCard", 16), ("deviceSts1", 17), ("deviceHybridDS3", 18), ("deviceGr303", 19), ("deviceXCC", 20), ("deviceXLC", 21), ("deviceNodeManager", 22), ("nest", 23), ("node", 24), ("deviceDs0DP", 25), ("deviceSTM1", 26), ("deviceOC3", 27), ("deviceE3", 28), ("deviceXLC-T1E1", 29), ("deviceSTM1X", 30), ("deviceOC3X", 31), ("deviceContact", 32), ("deviceVoltage", 33), ("deviceAsync", 34), ("deviceSync", 35), ("deviceWan", 36), ("dnx1UQuadT1E1", 37), ("deviceTempSensor", 38), ("dnx1UPowerSupply", 39), ("dnx1USysMgr", 40), ("deviceTranscoder", 41), ("portOctal-T1E1", 100), ("portQuadHighSpeed", 101), ("portOctalHighSpeed", 102), ("portQuadOcu", 103), ("portQuadT1", 104), ("portOctalT1", 105), ("linkT3-T1", 106), ("portT3", 107), ("portTestAccess", 108), ("portVoiceEM", 109), ("portVoiceFXO", 110), ("portVoiceFXS", 111), ("psxNarrowband", 112), ("psxBroadband", 113), ("psxNarrowbandSpare", 114), ("psxBroadbandSpare", 115), ("portRouter", 116), ("linkSts1-T1E1", 117), ("portSts1", 118), ("linkHds3-T1E1", 119), ("portHybridDS3", 120), ("portGr303", 121), ("linkXlink", 124), ("portDs0DP", 125), ("clockDs0DP", 126), ("sysMgrClock", 127), ("linkSTM1-T1E1", 128), ("linkOC3-T1E1", 130), ("payloadSTM1", 131), ("overheadSTM1", 132), ("payloadOC3", 133), ("overheadOC3", 134), ("portE3", 135), ("linkE3-E1", 136), ("opticalXlink", 137), ("portContact", 138), ("portVoltage", 139), ("portAsync", 140), ("linkT1E1", 141), ("portHighSpeed", 142), ("portVirtualWan", 143), ("portTranscoder", 144))

class AlarmSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("nominal", 0), ("informational", 1), ("minor", 2), ("major", 3), ("critical", 4))

class DecisionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("no", 0), ("yes", 1))

class FunctionSwitch(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disable", 0), ("enable", 1))

class CurrentDevStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("inactive", 0), ("active", 1))

class PortStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("out-service", 0), ("in-service", 1))

class DataSwitch(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class TimeSlotAddress(TextualConvention, IpAddress):
    status = 'current'

class LinkPortAddress(TextualConvention, IpAddress):
    status = 'current'

class ClockSrcAddress(TextualConvention, IpAddress):
    status = 'current'

class NestSlotAddress(TextualConvention, IpAddress):
    status = 'current'

class UnsignedInt(TextualConvention, Unsigned32):
    status = 'current'

class ConnectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7, 8, 9, 10))
    namedValues = NamedValues(("fullDuplex", 0), ("broadcastConnection", 1), ("broadcastMaster", 2), ("listenSrc", 3), ("listenDest", 4), ("listenerConnection", 7), ("vcmp", 8), ("subChannel", 9), ("subRate", 10))

class CommunicationsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("data", 0), ("voice", 1), ("voiceAuToMu", 2), ("comp16kBitGrp1-2", 3), ("comp16kBitGrp3-4", 4), ("comp16kBitGrp5-6", 5), ("comp16kBitGrp7-8", 6), ("comp32kBitGrp1-4", 7), ("comp32kBitGrp5-8", 8))

class ConnectionState1(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("inSrvc", 0), ("outOfSrvc", 1))

class ConnectionState2(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ok", 1), ("underTest", 2), ("cfgError", 3))

class MapNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("activeMap", 0), ("map01", 1), ("map02", 2), ("map03", 3), ("map04", 4), ("map05", 5))

class TestAccess(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("monitorSrc", 1), ("monitorDest", 2), ("monitorSrcNDest", 3), ("splitSrc", 4), ("splitDest", 5), ("splitSrcNDest", 6))

class ConnectionSpeed(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 96, 99))
    namedValues = NamedValues(("s48k", 0), ("s56k", 1), ("s64k", 2), ("s112k-2x56", 3), ("s128k-2x64", 4), ("s168k-3x56", 5), ("s192k-3x64", 6), ("s224k-4x56", 7), ("s256k-4x64", 8), ("s280k-5x56", 9), ("s320k-5x64", 10), ("s336k-6x56", 11), ("s384k-6x64", 12), ("s392k-7x56", 13), ("s448k-7x64", 14), ("s448k-8x56", 15), ("s512k-8x64", 16), ("s504k-9x56", 17), ("s576k-9x64", 18), ("s560k-10x56", 19), ("s640k-10x64", 20), ("s616k-11x56", 21), ("s704k-11x64", 22), ("s672k-12x56", 23), ("s768k-12x64", 24), ("s728k-13x56", 25), ("s832k-13x64", 26), ("s784k-14x56", 27), ("s896k-14x64", 28), ("s840k-15x56", 29), ("s960k-15x64", 30), ("s896k-16x56", 31), ("s1024k-16x64", 32), ("s952k-17x56", 33), ("s1088k-17x64", 34), ("s1008k-18x56", 35), ("s1152k-18x64", 36), ("s1064k-19x56", 37), ("s1216k-19x64", 38), ("s1120k-20x56", 39), ("s1280k-20x64", 40), ("s1176k-21x56", 41), ("s1344k-21x64", 42), ("s1232k-22x56", 43), ("s1408k-22x64", 44), ("s1288k-23x56", 45), ("s1472k-23x64", 46), ("s1344k-24x56", 47), ("s1536k-24x64", 48), ("s1400k-25x56", 49), ("s1600k-25x64", 50), ("s1456k-26x56", 51), ("s1664k-26x64", 52), ("s1512k-27x56", 53), ("s1728k-27x64", 54), ("s1568k-28x56", 55), ("s1792k-28x64", 56), ("s1624k-29x56", 57), ("s1856k-29x64", 58), ("s1680k-30x56", 59), ("s1920k-30x64", 60), ("s1736k-31x56", 61), ("s1984k-31x64", 62), ("s1792k-32x56", 63), ("s2048k-32x64", 64), ("clearT1-25x64", 65), ("clearE1-32x64", 66), ("s32k", 67), ("s16k", 68), ("s9600-baud", 96), ("no-connection", 99))

class ConnCmdStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 101, 102, 103, 104, 105, 106, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 450, 500, 501, 502))
    namedValues = NamedValues(("ready-for-command", 0), ("update", 1), ("delete", 2), ("add", 3), ("addNsave", 4), ("updateNsave", 5), ("deleteNsave", 6), ("update-successful", 101), ("delete-successful", 102), ("add-successful", 103), ("add-save-successful", 104), ("update-save-successful", 105), ("del-save-successful", 106), ("err-general-connection-error", 400), ("err-src-broadcast-id-not-found", 401), ("err-src-port-in-use", 402), ("err-dest-port-in-use", 403), ("err-conn-name-in-use", 404), ("err-invalid-broadcast-id", 405), ("err-invalid-src-slot", 406), ("err-invalid-src-port", 407), ("err-invalid-src-timeslot", 408), ("err-src-port-bandwidth-exceeded", 409), ("err-invalid-dest-slot", 410), ("err-invalid-dest-port", 411), ("err-invalid-dest-timeslot", 412), ("err-dest-port-bandwidth-exceeded", 413), ("err-invalid-command", 414), ("err-not-enough-bts-available", 415), ("err-src-port-cannot-be-voice", 416), ("err-dest-port-cannot-be-voice", 417), ("err-invalid-communications-dev", 418), ("err-invalid-communications-type", 419), ("err-invalid-conn-name", 420), ("err-invalid-conn-type", 421), ("err-invalid-conn-speed", 422), ("err-invalid-conn-record", 423), ("err-conn-test-in-progress", 424), ("err-invalid-conn-id", 425), ("err-conn-not-saved-to-map", 426), ("err-connection-map-full", 427), ("err-invalid-card-type", 428), ("err-invalid-conn-bit-group", 429), ("err-conn-max-channels-used", 430), ("err-src-xlink-slot-not-assigned", 431), ("err-dest-xlink-slot-not-assigned", 432), ("err-protection-grp-conn-error", 433), ("err-cannot-chg-net-conn", 434), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502))

class LinkCmdStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 7, 9, 12, 101, 107, 109, 112, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 450, 500, 501, 502))
    namedValues = NamedValues(("ready-for-command", 0), ("update", 1), ("inServiceAll", 7), ("copyToAll", 9), ("outOfServiceAll", 12), ("update-successful", 101), ("insvc-successful", 107), ("copy-successful", 109), ("oos-successful", 112), ("err-general-link-config-error", 400), ("err-invalid-link-status", 401), ("err-invalid-link-framing", 402), ("err-invalid-link-command", 403), ("err-invalid-link-lbo", 404), ("err-invalid-esf-format", 405), ("err-invalid-link-density", 406), ("err-invalid-link-op-mode", 407), ("err-invalid-link-rem-loop", 408), ("err-invalid-link-ais", 409), ("err-invalid-network-loop", 410), ("err-invalid-yellow-alarm", 411), ("err-invalid-red-timeout", 412), ("err-invalid-idle-code", 413), ("err-device-in-standby", 414), ("err-invalid-link-mapping", 415), ("err-invalid-link-vt-group", 416), ("err-invalid-rcv-clocksrc", 417), ("err-invalid-link-name", 418), ("err-invalid-interface", 419), ("err-invalid-polarity", 420), ("err-invalid-clock-timing", 421), ("err-invalid-control-signal", 422), ("err-dcd-dsr-not-applicable", 423), ("err-requires-special-mode", 424), ("err-cts-not-applicable", 425), ("err-gr303-not-applicable", 426), ("err-invalid-link-bits", 427), ("err-device-is-protection-module", 428), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502))

class OneByteField(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class DnxTsPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("unknown", 0), ("e1", 1), ("t1", 2), ("high-speed", 3), ("wan", 4), ("e1-cas", 5), ("e1-clear-frm", 6), ("t1-clear-frm", 7), ("e1-clear-unfrm", 8), ("t1-clear-unfrm", 9), ("voice", 10), ("ds0dp", 11), ("ocu", 12), ("tam", 13))

class DnxTrunkProfSelection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("none", 0), ("profile-1", 1), ("profile-2", 2), ("profile-3", 3), ("profile-4", 4), ("profile-5", 5), ("profile-6", 6), ("profile-7", 7), ("profile-8", 8), ("profile-9", 9), ("profile-10", 10), ("profile-11", 11), ("profile-12", 12), ("profile-13", 13), ("profile-14", 14), ("profile-15", 15), ("profile-16", 16))

resourceTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1), )
if mibBuilder.loadTexts: resourceTable.setStatus('current')
resourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "resourceKey"))
if mibBuilder.loadTexts: resourceEntry.setStatus('current')
resourceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 1), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceKey.setStatus('current')
resourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAddr.setStatus('current')
resourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 3), DnxResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceType.setStatus('current')
resourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 4), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceState.setStatus('current')
resourceCriticalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 5), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceCriticalMask.setStatus('current')
resourceMajorMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 6), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceMajorMask.setStatus('current')
resourceMinorMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 7), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceMinorMask.setStatus('current')
resourceInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 8), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceInfoMask.setStatus('current')
resourceNominalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 9), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNominalMask.setStatus('current')
resourceTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 1, 1, 10), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceTrapMask.setStatus('current')
resourceAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2), )
if mibBuilder.loadTexts: resourceAlarmTable.setStatus('current')
resourceAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "resourceAlarmKey"))
if mibBuilder.loadTexts: resourceAlarmEntry.setStatus('current')
resourceAlarmKey = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 1), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmKey.setStatus('current')
resourceAlarmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmAddr.setStatus('current')
resourceAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 3), DnxResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmType.setStatus('current')
resourceAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 4), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmState.setStatus('current')
resourceAlarmCriticalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 5), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmCriticalMask.setStatus('current')
resourceAlarmMajorMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 6), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmMajorMask.setStatus('current')
resourceAlarmMinorMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 7), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmMinorMask.setStatus('current')
resourceAlarmInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 8), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmInfoMask.setStatus('current')
resourceAlarmNominalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 9), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmNominalMask.setStatus('current')
resourceAlarmTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 2, 1, 10), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAlarmTrapMask.setStatus('current')
sysProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6))
unitName = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitName.setStatus('current')
unitType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dnx4", 1), ("dnx11", 2), ("dnx11-psx", 3), ("dnx88", 4), ("dnx1U", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitType.setStatus('current')
activeSMC = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("smc-A", 1), ("smc-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSMC.setStatus('current')
systemRelease = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRelease.setStatus('current')
releaseDate = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseDate.setStatus('current')
flashChksum = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashChksum.setStatus('current')
xilinxType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xilinxType.setStatus('current')
xilinxVersion = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xilinxVersion.setStatus('current')
rearModem = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 9), DecisionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearModem.setStatus('current')
mibProfile = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibProfile.setStatus('current')
systemMgrType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("smc-I", 1), ("smc-II", 2), ("xnm", 3), ("dnx1u-sys", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMgrType.setStatus('current')
sysAlarmCutOff = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmCutOff.setStatus('current')
sysMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMacAddress.setStatus('current')
sysSa4RxTxTrap = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSa4RxTxTrap.setStatus('current')
sysCustomerId = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCustomerId.setStatus('current')
sysMgrOnlineTime = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMgrOnlineTime.setStatus('current')
featureKeys = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100))
dnxFeatureKeyTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 1), )
if mibBuilder.loadTexts: dnxFeatureKeyTable.setStatus('current')
dnxFeatureKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 1, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "featureKeyId"))
if mibBuilder.loadTexts: dnxFeatureKeyEntry.setStatus('current')
featureKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureKeyId.setStatus('current')
featureKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureKeyName.setStatus('current')
featureKeyState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noKey", 0), ("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featureKeyState.setStatus('current')
featureKeyCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 101, 102, 400, 401, 450, 451, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("deleteKey", 2), ("update-successful", 101), ("delete-successful", 102), ("err-general-key-config-error", 400), ("err-invalid-state", 401), ("err-data-locked-by-another-user", 450), ("err-invalid-cmd-status", 451), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featureKeyCmdStatus.setStatus('current')
enterNewFeatureKey = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 2))
newKeyCode = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newKeyCode.setStatus('current')
newKeyCodeCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 6, 100, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 402, 450, 451, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("enterKey", 1), ("key-successful", 101), ("err-invalid-key", 402), ("err-data-locked-by-another-user", 450), ("err-invalid-cmd-status", 451), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newKeyCodeCmdStatus.setStatus('current')
sysClock = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7))
sysDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1))
sysMonth = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonth.setStatus('current')
sysDay = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDay.setStatus('current')
sysYear = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysYear.setStatus('current')
sysHour = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHour.setStatus('current')
sysMin = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMin.setStatus('current')
sysSec = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSec.setStatus('current')
sysWeekday = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWeekday.setStatus('current')
sysTimeCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-sys-time", 1), ("update-successful", 101), ("err-general-time-date-error", 200), ("err-invalid-day", 201), ("err-invalid-month", 202), ("err-invalid-year", 203), ("err-invalid-hours", 204), ("err-invalid-minutes", 205), ("err-invalid-seconds", 206), ("err-invalid-weekday", 207), ("err-invalid-calendar", 208), ("err-invalid-sys-time-cmd", 209), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeCmdStatus.setStatus('current')
clockSrcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 2))
clockSrcActive = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("freerun", 0), ("holdover", 1), ("primary", 2), ("secondary", 3), ("tertiary", 4), ("primary-protected", 6), ("secondary-protected", 7), ("tertiary-protected", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSrcActive.setStatus('current')
primaryClockSrc = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 2, 2), ClockSrcAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryClockSrc.setStatus('current')
secondaryClockSrc = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 2, 3), ClockSrcAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryClockSrc.setStatus('current')
tertiaryClockSrc = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 2, 4), ClockSrcAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tertiaryClockSrc.setStatus('current')
clockSrcMode = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("freerun", 0), ("auto", 1), ("primary", 2), ("secondary", 3), ("tertiary", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockSrcMode.setStatus('current')
clockSrcCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 200, 201, 202, 203, 204, 205, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-clock-src", 1), ("update-successful", 101), ("err-gen-clock-src-config-error", 200), ("err-invalid-slot", 201), ("err-invalid-port", 202), ("err-invalid-clock-src-command", 203), ("err-invalid-clock-mode", 204), ("err-invalid-station-clock", 205), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockSrcCmdStatus.setStatus('current')
connections = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8))
connInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 1))
activeMapId = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeMapId.setStatus('current')
connDBChecksum = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 1, 2), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connDBChecksum.setStatus('current')
lastMapCopied = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastMapCopied.setStatus('current')
connMapTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2), )
if mibBuilder.loadTexts: connMapTable.setStatus('current')
connMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "connMapID"))
if mibBuilder.loadTexts: connMapEntry.setStatus('current')
connMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMapID.setStatus('current')
connMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connMapName.setStatus('current')
connMapCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("non-active", 2), ("non-active-tagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connMapCurrStatus.setStatus('current')
connMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connMapDescription.setStatus('current')
connMapCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMapCounts.setStatus('current')
connMapVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMapVersions.setStatus('current')
connMapDate = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMapDate.setStatus('current')
connMapCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 7, 8, 9, 100, 101, 102, 107, 108, 109, 200, 202, 203, 204, 205, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-map", 1), ("delete-map", 2), ("activate-map", 7), ("save-map", 8), ("copy-map-to-tagged-maps", 9), ("command-in-progress", 100), ("update-successful", 101), ("delete-successful", 102), ("activate-successful", 107), ("save-successful", 108), ("copy-successful", 109), ("err-general-map-config-error", 200), ("err-invalid-map-command", 202), ("err-invalid-map-name", 203), ("err-invalid-map-desc", 204), ("err-invalid-map-status", 205), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connMapCmdStatus.setStatus('current')
connMapChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 2, 1, 9), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMapChecksum.setStatus('current')
sysConnTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3), )
if mibBuilder.loadTexts: sysConnTable.setStatus('current')
sysConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "sysMapID"), (0, "ERI-DNX-SMC-MIB", "sysConnID"))
if mibBuilder.loadTexts: sysConnEntry.setStatus('current')
sysMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 1), MapNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMapID.setStatus('current')
sysConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16224))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnID.setStatus('current')
sysConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConnName.setStatus('current')
sysConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 4), ConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnType.setStatus('current')
sysSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 5), TimeSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSrcAddr.setStatus('current')
sysDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 6), TimeSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDestAddr.setStatus('current')
sysComm = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 7), CommunicationsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysComm.setStatus('current')
sysConnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 8), ConnectionSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConnSpeed.setStatus('current')
sysSrcTsBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSrcTsBitmap.setStatus('current')
sysDestTsBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDestTsBitmap.setStatus('current')
sysBroadSrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBroadSrcId.setStatus('current')
sysTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 12), TestAccess()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTestMode.setStatus('obsolete')
sysCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 13), ConnCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCmdStatus.setStatus('current')
sysPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 14), ConnectionState1()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPrimaryState.setStatus('current')
sysSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 15), ConnectionState2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSecondaryState.setStatus('current')
sysConnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnInstance.setStatus('current')
sysConnChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 17), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnChecksum.setStatus('current')
sysSrcTsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 18), DnxTsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSrcTsLineType.setStatus('current')
sysDestTsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 19), DnxTsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDestTsLineType.setStatus('current')
sysSrcTrunkCProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 20), DnxTrunkProfSelection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSrcTrunkCProfile.setStatus('current')
sysDestTrunkCProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 3, 1, 21), DnxTrunkProfSelection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDestTrunkCProfile.setStatus('current')
actvConnTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4), )
if mibBuilder.loadTexts: actvConnTable.setStatus('current')
actvConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "actvMapID"), (0, "ERI-DNX-SMC-MIB", "actvConnID"))
if mibBuilder.loadTexts: actvConnEntry.setStatus('current')
actvMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 1), MapNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvMapID.setStatus('current')
actvConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16224))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvConnID.setStatus('current')
actvConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvConnName.setStatus('current')
actvConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 4), ConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvConnType.setStatus('current')
actvSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 5), TimeSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvSrcAddr.setStatus('current')
actvDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 6), TimeSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvDestAddr.setStatus('current')
actvComm = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 7), CommunicationsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvComm.setStatus('current')
actvConnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 8), ConnectionSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvConnSpeed.setStatus('current')
actvSrcTsBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvSrcTsBitmap.setStatus('current')
actvDestTsBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvDestTsBitmap.setStatus('current')
actvBroadSrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvBroadSrcId.setStatus('current')
actvTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 12), TestAccess()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvTestMode.setStatus('obsolete')
actvCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 13), ConnCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvCmdStatus.setStatus('current')
actvPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 14), ConnectionState1()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvPrimaryState.setStatus('current')
actvSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 15), ConnectionState2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvSecondaryState.setStatus('current')
actvConnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvConnInstance.setStatus('current')
actvConnChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 17), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvConnChecksum.setStatus('current')
actvSrcTsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 18), DnxTsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvSrcTsLineType.setStatus('current')
actvDestTsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 19), DnxTsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actvDestTsLineType.setStatus('current')
actvSrcTrunkCProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 20), DnxTrunkProfSelection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvSrcTrunkCProfile.setStatus('current')
actvDestTrunkCProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 4, 1, 21), DnxTrunkProfSelection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actvDestTrunkCProfile.setStatus('current')
addConnRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5))
addMapID = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 1), MapNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addMapID.setStatus('current')
addConnID = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16224))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addConnID.setStatus('current')
addConnName = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addConnName.setStatus('current')
addConnType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 4), ConnectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addConnType.setStatus('current')
addSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 5), TimeSlotAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addSrcAddr.setStatus('current')
addDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 6), TimeSlotAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addDestAddr.setStatus('current')
addComm = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 7), CommunicationsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addComm.setStatus('current')
addConnSpeed = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 8), ConnectionSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addConnSpeed.setStatus('current')
addSrcTsBitmap = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addSrcTsBitmap.setStatus('current')
addDestTsBitmap = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addDestTsBitmap.setStatus('current')
addBroadSrcId = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16224))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addBroadSrcId.setStatus('current')
addTestMode = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 12), TestAccess()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addTestMode.setStatus('current')
addCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 13), ConnCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCmdStatus.setStatus('current')
addSrcTrunkCProfile = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 14), DnxTrunkProfSelection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addSrcTrunkCProfile.setStatus('current')
addDestTrunkCProfile = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 5, 15), DnxTrunkProfSelection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addDestTrunkCProfile.setStatus('current')
trunkCProfileTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 6), )
if mibBuilder.loadTexts: trunkCProfileTable.setStatus('current')
trunkCProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 6, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "trunkProfileID"))
if mibBuilder.loadTexts: trunkCProfileEntry.setStatus('current')
trunkProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkProfileID.setStatus('current')
trunkSignalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkSignalStart.setStatus('current')
trunkSignalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkSignalEnd.setStatus('current')
trunkData = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkData.setStatus('current')
trunkCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 200, 208, 400, 404, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("update-successful", 101), ("err-general-trunk-error", 200), ("err-invalid-command", 208), ("err-general-config-error", 400), ("err-invalid-trunk-value", 404), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkCmdStatus.setStatus('current')
utilities = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12))
database = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1))
dbBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1))
dbAutoBackup = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 1), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbAutoBackup.setStatus('current')
dbBackupOccurrence = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("weekly", 0), ("daily", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupOccurrence.setStatus('current')
dbBackupDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupDayOfWeek.setStatus('current')
dbBackupHour = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupHour.setStatus('current')
dbBackupMin = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupMin.setStatus('current')
dbRemoteHostTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 10), )
if mibBuilder.loadTexts: dbRemoteHostTable.setStatus('current')
dbRemoteHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 10, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "dbHostIndex"))
if mibBuilder.loadTexts: dbRemoteHostTableEntry.setStatus('current')
dbHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbHostIndex.setStatus('current')
dbHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbHostIp.setStatus('current')
dbHostDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbHostDirectory.setStatus('current')
dbHostFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbHostFilename.setStatus('current')
dbHostCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 8, 9, 11, 100, 101, 102, 108, 109, 111, 200, 201, 202, 203, 204, 210, 211, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-host", 1), ("clear-host", 2), ("saveDB", 8), ("saveDBToAll", 9), ("restoreDB", 11), ("command-in-progress", 100), ("update-successful", 101), ("clear-successful", 102), ("save-successful", 108), ("save-all-successful", 109), ("restore-successful", 111), ("err-general-host-config-error", 200), ("err-invalid-host-command", 201), ("err-invalid-host-addr", 202), ("err-invalid-host-name", 203), ("err-invalid-host-dir", 204), ("err-backup-file-creation-failed", 210), ("err-backup-file-transfer-failed", 211), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbHostCmdStatus.setStatus('current')
trapSequence = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSequence.setStatus('current')
trapResourceKey = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapResourceKey.setStatus('current')
trapTime = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapTime.setStatus('current')
trapResourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapResourceAddress.setStatus('current')
trapResourceType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 5), DnxResourceType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapResourceType.setStatus('current')
trapType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 102, 141, 142, 203, 204, 206, 207, 208, 209, 210, 216, 219, 225, 228, 243, 244, 246, 247, 248, 249, 250, 256, 259, 265, 268, 301, 302, 304, 305, 306, 308, 309, 310, 312, 313, 321, 322, 323, 324, 325, 341, 342, 344, 345, 346, 348, 349, 350, 352, 353, 361, 362, 363, 364, 365, 401, 402, 403, 404, 425, 441, 442, 443, 444, 465, 501, 502, 503, 504, 505, 506, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 541, 542, 543, 544, 545, 546, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 601, 602, 641, 642, 706, 712, 723, 725, 746, 752, 763, 765, 825, 865, 925, 965, 1003, 1004, 1005, 1006, 1007, 1008, 1043, 1044, 1045, 1046, 1047, 1048, 1102, 1103, 1106, 1107, 1108, 1142, 1143, 1146, 1147, 1148, 1201, 1202, 1203, 1225, 1241, 1242, 1243, 1265, 1301, 1302, 1304, 1305, 1308, 1309, 1310, 1312, 1313, 1316, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1341, 1342, 1344, 1345, 1348, 1349, 1350, 1352, 1353, 1356, 1357, 1358, 1360, 1361, 1362, 1363, 1364, 1365, 1404, 1405, 1406, 1408, 1409, 1411, 1412, 1413, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1444, 1445, 1446, 1448, 1449, 1451, 1452, 1453, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1606, 1615, 1616, 1617, 1618, 1620, 1621, 1646, 1655, 1656, 1657, 1658, 1660, 1661, 1701, 1702, 1705, 1706, 1707, 1708, 1709, 1741, 1742, 1745, 1746, 1747, 1748, 1749, 1801, 1802, 1803, 1841, 1842, 1843, 1901, 1902, 1925), SingleValueConstraint(1941, 1942, 1965, 2001, 2002, 2041, 2042, 2201, 2202, 2204, 2205, 2208, 2209, 2210, 2213, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2241, 2242, 2244, 2245, 2248, 2249, 2250, 2253, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2301, 2302, 2303, 2304, 2305, 2341, 2342, 2343, 2344, 2345, 2401, 2402, 2403, 2404, 2405, 2413, 2414, 2415, 2441, 2442, 2443, 2444, 2445, 2453, 2454, 2455, 2501, 2502, 2504, 2505, 2506, 2512, 2513, 2515, 2516, 2517, 2519, 2520, 2523, 2525, 2541, 2542, 2544, 2545, 2546, 2552, 2553, 2555, 2556, 2557, 2559, 2560, 2563, 2565, 2601, 2625, 2641, 2665, 2701, 2725, 2741, 2765, 2801, 2802, 2803, 2804, 2805, 2841, 2842, 2843, 2844, 2845, 2901, 2941, 3001, 3025, 3041, 3065, 3108, 3109, 3110, 3119, 3125, 3148, 3149, 3159, 3150, 3165, 1, 2, 201, 202, 231, 241, 242, 271, 303, 307, 314, 316, 330, 331, 343, 347, 354, 356, 370, 371, 407, 424, 430, 431, 447, 464, 470, 471, 507, 514, 530, 531, 547, 554, 570, 571, 731, 771, 831, 871, 931, 971, 1001, 1009, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1231, 1271, 1303, 1307, 1314, 1330, 1331, 1343, 1347, 1354, 1370, 1371, 1403, 1407, 1414, 1430, 1431, 1443, 1447, 1454, 1470, 1471, 1531, 1571, 1930, 1931, 1970, 1971, 2203, 2207, 2216, 2230, 2231, 2243, 2247, 2256, 2270, 2271, 2307, 2308, 2330, 2347, 2348, 2370, 2407, 2408, 2409, 2430, 2447, 2448, 2449, 2470, 2503, 2507, 2514, 2530, 2531, 2543, 2547, 2554), SingleValueConstraint(2570, 2571, 3116, 3156))).clone(namedValues=NamedValues(("setSlotMismatch", 101), ("setSlotMissing", 102), ("clearSlotMismatch", 141), ("clearSlotMissing", 142), ("setDevFrameSyncNotPresent", 203), ("setDevSystemClockNotPresent", 204), ("setDevDataBaseNotInsync", 206), ("setDevFreeRunError", 207), ("setDevOffline", 208), ("setDevDefective", 209), ("setDevBusError", 210), ("setDevStratum3ClkFailure", 216), ("setDevCircuitCardMissing", 219), ("setDevConfigError", 225), ("setDevNoRearCard", 228), ("clearDevFrameSyncNotPresent", 243), ("clearDevSystemClockNotPresent", 244), ("clearDevDataBaseNotInsync", 246), ("clearDevFreeRunError", 247), ("clearDevOffline", 248), ("clearDevDefective", 249), ("clearDevBusError", 250), ("clearDevStratum3ClkFailure", 256), ("clearDevCircuitCardMissing", 259), ("clearDevConfigError", 265), ("clearDevNoRearCard", 268), ("setT1E1RcvFarEndLOF", 301), ("setT1E1NearEndSendLOF", 302), ("setT1E1NearEndSendingAIS", 304), ("setT1E1NearEndLOF", 305), ("setT1E1NearEndLossOfSignal", 306), ("setT1E1Ts16AIS", 308), ("setT1E1FarEndSendingTs16LOMF", 309), ("setT1E1NearEndSendingTs16LOMF", 310), ("setT1E1OtherLineStatus", 312), ("setT1E1NearEndUnavailableSig", 313), ("setT1E1NearEndTxSlip", 321), ("setT1E1NearEndRxSlip", 322), ("setT1E1NearEndSeverErroredFrame", 323), ("setT1E1ChangeFrameAlignment", 324), ("setT1E1ConfigError", 325), ("clearT1E1RcvFarEndLOF", 341), ("clearT1E1NearEndSendLOF", 342), ("clearT1E1NearEndSendingAIS", 344), ("clearT1E1NearEndLOF", 345), ("clearT1E1NearEndLossOfSignal", 346), ("clearT1E1Ts16AIS", 348), ("clearT1E1FarEndSendingTs16LOMF", 349), ("clearT1E1NearEndSendingTs16LOMF", 350), ("clearT1E1OtherLineStatus", 352), ("clearT1E1NearEndUnavailableSig", 353), ("clearT1E1NearEndTxSlip", 361), ("clearT1E1NearEndRxSlip", 362), ("clearT1E1NearEndSeverErroredFrame", 363), ("clearT1E1ChangeFrameAlignment", 364), ("clearT1E1ConfigError", 365), ("setHsRcvFIFOError", 401), ("setHsXmtFIFOError", 402), ("setHsClockEdgeError", 403), ("setHsCarrierFailure", 404), ("setHsConfigError", 425), ("clearHsRcvFIFOError", 441), ("clearHsXmtFIFOError", 442), ("clearHsClockEdgeError", 443), ("clearHsCarrierFailure", 444), ("clearHsConfigError", 465), ("setT3RcvFarEndLOF", 501), ("setT3NearEndSendLOF", 502), ("setT3FarEndSendingAIS", 503), ("setT3NearEndSendingAIS", 504), ("setT3NearEndLOF", 505), ("setT3NearEndLossOfSignal", 506), ("setT3OtherLineStatus", 512), ("setT3NearEndUnavailableSig", 513), ("setT3NearEndSeverErroredFrame", 515), ("setT3TxRxClockFailure", 516), ("setT3FarEndBlockError", 517), ("setT3PbitCbitParityError", 518), ("setT3MbitsInError", 519), ("setT3LIUOtherStatus", 520), ("setT3LIUExcessZeros", 522), ("setT3LIUCodingViolation", 523), ("setT3LIUPrbsError", 524), ("setT3ConfigError", 525), ("clearT3RcvFarEndLOF", 541), ("clearT3NearEndSendLOF", 542), ("clearT3FarEndSendingAIS", 543), ("clearT3NearEndSendingAIS", 544), ("clearT3NearEndLOF", 545), ("clearT3NearEndLossOfSignal", 546), ("clearT3OtherLineStatus", 552), ("clearT3NearEndUnavailableSig", 553), ("clearT3NearEndSeverErroredFrame", 555), ("clearT3TxRxClockFailure", 556), ("clearT3FarEndBlockError", 557), ("clearT3PbitCbitParityError", 558), ("clearT3MbitsInError", 559), ("clearT3LIUOtherStatus", 560), ("clearT3LIUExcessZeros", 562), ("clearT3LIUCodingViolation", 563), ("clearT3LIUPrbsError", 564), ("clearT3ConfigError", 565), ("setPowerSupplyNotPresent", 601), ("setPowerSupplyProblem", 602), ("clearPowerSupplyNotPresent", 641), ("clearPowerSupplyProblem", 642), ("setOcuNearEndLOS", 706), ("setOcuOtherLineStatus", 712), ("setOcuNearEndSeverErroredFrame", 723), ("setOcuConfigError", 725), ("clearOcuNearEndLOS", 746), ("clearOcuOtherLineStatus", 752), ("clearOcuNearEndSeverErroredFrame", 763), ("clearOcuConfigError", 765), ("setTamConfigError", 825), ("clearTamConfigError", 865), ("setVoiceConfigError", 925), ("clearVoiceConfigError", 965), ("setPsxPowerSupplyANotOk", 1003), ("setPsxPowerSupplyBNotOk", 1004), ("setPsxFan01NotOk", 1005), ("setPsxFan02NotOk", 1006), ("setPsxFan03NotOk", 1007), ("setPsxDualBroadbandNotSupported", 1008), ("clearPsxPowerSupplyANotOk", 1043), ("clearPsxPowerSupplyBNotOk", 1044), ("clearPsxFan01NotOk", 1045), ("clearPsxFan02NotOk", 1046), ("clearPsxFan03NotOk", 1047), ("clearPsxDualBroadbandNotSupported", 1048), ("setPsxLineCardRelaySwitchToSpare", 1102), ("setPsxLineCardCableMissing", 1103), ("setPsxLineCardMissing", 1106), ("setPsxLineCardMismatch", 1107), ("setPsxLineCardRelayMalfunction", 1108), ("clearPsxLineCardRelaySwitchToSpare", 1142), ("clearPsxLineCardCableMissing", 1143), ("clearPsxLineCardMissing", 1146), ("clearPsxLineCardMismatch", 1147), ("clearPsxLineCardRelayMalfunction", 1148), ("setRtrUserAlarm1", 1201), ("setRtrUserAlarm2", 1202), ("setRtrUserAlarm3", 1203), ("setRtrConfigError", 1225), ("clearRtrUserAlarm1", 1241), ("clearRtrUserAlarm2", 1242), ("clearRtrUserAlarm3", 1243), ("clearRtrConfigError", 1265), ("setSts1RcvFarEndLOF", 1301), ("setSts1NearEndSendLOF", 1302), ("setSts1NearEndSendingAIS", 1304), ("setSts1NearEndLOF", 1305), ("setSts1NearEndLOP", 1308), ("setSts1NearEndOOF", 1309), ("setSts1NearEndAIS", 1310), ("setSts1OtherLineStatus", 1312), ("setSts1NearEndUnavailableSig", 1313), ("setSts1TxRxClockFailure", 1316), ("setSts1NearEndLOMF", 1317), ("setSts1NearEndTraceError", 1318), ("setSts1LIUDigitalLOS", 1320), ("setSts1LIUAnalogLOS", 1321), ("setSts1LIUExcessZeros", 1322), ("setSts1LIUCodingViolation", 1323), ("setSts1LIUPrbsError", 1324), ("setSts1ConfigError", 1325), ("clearSts1RcvFarEndLOF", 1341), ("clearSts1NearEndSendLOF", 1342), ("clearSts1NearEndSendingAIS", 1344), ("clearSts1NearEndLOF", 1345), ("clearSts1NearEndLOP", 1348), ("clearSts1NearEndOOF", 1349), ("clearSts1NearEndAIS", 1350), ("clearSts1OtherLineStatus", 1352), ("clearSts1NearEndUnavailableSig", 1353), ("clearSts1TxRxClockFailure", 1356), ("clearSts1NearEndLOMF", 1357), ("clearSts1NearEndTraceError", 1358), ("clearSts1LIUDigitalLOS", 1360), ("clearSts1LIUAnalogLOS", 1361), ("clearSts1LIUExcessZeros", 1362), ("clearSts1LIUCodingViolation", 1363), ("clearSts1LIUPrbsError", 1364), ("clearSts1ConfigError", 1365), ("setHt3NearEndSendingAIS", 1404), ("setHt3NearEndOOF", 1405), ("setHt3NearEndLossOfSignal", 1406), ("setHt3NearEndLOF", 1408), ("setHt3FarEndRcvFailure", 1409), ("setHt3NearEndLCVError", 1411), ("setHt3NearEndFERRError", 1412), ("setHt3NearEndExcessZeros", 1413), ("setHt3FarEndBlockError", 1417), ("setHt3PbitCbitParityError", 1418), ("setHt3ChangeInFrameAlignment", 1419), ("setHt3LIUDigitalLOS", 1420), ("setHt3LIUAnalogLOS", 1421), ("setHt3LIUExcessZeros", 1422), ("setHt3LIUCodingViolation", 1423), ("setHt3LIUPrbsError", 1424), ("setHt3ConfigError", 1425), ("clearHt3NearEndSendingAIS", 1444), ("clearHt3NearEndOOF", 1445), ("clearHt3NearEndLossOfSignal", 1446), ("clearHt3NearEndLOF", 1448), ("clearHt3FarEndRcvFailure", 1449), ("clearHt3NearEndLCVError", 1451), ("clearHt3NearEndFERRError", 1452), ("clearHt3NearEndExcessZeros", 1453), ("clearHt3FarEndBlockError", 1457), ("clearHt3PbitCbitParityError", 1458), ("clearHt3ChangeInFrameAlignment", 1459), ("clearHt3LIUDigitalLOS", 1460), ("clearHt3LIUAnalogLOS", 1461), ("clearHt3LIUExcessZeros", 1462), ("clearHt3LIUCodingViolation", 1463), ("clearHt3LIUPrbsError", 1464), ("clearHt3ConfigError", 1465), ("setXlinkCableMismatch", 1606), ("setXlinkSerializerError", 1615), ("setXlinkFramerError", 1616), ("setXlinkBertError", 1617), ("setXlinkClockError", 1618), ("setXlinkInUseError", 1620), ("setXlinkCrcError", 1621), ("clearXlinkCableMismatch", 1646), ("clearXlinkSerializerError", 1655), ("clearXlinkFramerError", 1656), ("clearXlinkBertError", 1657), ("clearXlinkClockError", 1658), ("clearXlinkInUseError", 1660), ("clearXlinkCrcError", 1661), ("setNestMismatch", 1701), ("setNestMissing", 1702), ("setNestOffline", 1705), ("setNestCriticalAlarm", 1706), ("setNestMajorAlarm", 1707), ("setNestMinorAlarm", 1708), ("setNestSwMismatch", 1709), ("clearNestMismatch", 1741), ("clearNestMissing", 1742), ("clearNestOffline", 1745), ("clearNestCriticalAlarm", 1746), ("clearNestMajorAlarm", 1747), ("clearNestMinorAlarm", 1748), ("clearNestSwMismatch", 1749), ("setNodeCriticalAlarm", 1801), ("setNodeMajorAlarm", 1802), ("setNodeMinorAlarm", 1803), ("clearNodeCriticalAlarm", 1841), ("clearNodeMajorAlarm", 1842), ("clearNodeMinorAlarm", 1843), ("setDs0DpPortLossOfSignal", 1901), ("setDs0DpPortBPV", 1902), ("setDs0DpPortConfigError", 1925)) + NamedValues(("clearDs0DpPortLossOfSignal", 1941), ("clearDs0DpPortBPV", 1942), ("clearDs0DpPortConfigError", 1965), ("setDs0DpClockLossOfSignal", 2001), ("setDs0DpClockBPV", 2002), ("clearDs0DpClockLossOfSignal", 2041), ("clearDs0DpClockBPV", 2042), ("setOpticalT1E1RedAlarm", 2201), ("setOpticalT1E1NearEndSendLOF", 2202), ("setOpticalT1E1NearEndSendingAIS", 2204), ("setOpticalT1E1NearEndLOF", 2205), ("setOpticalT1E1LossOfPointer", 2208), ("setOpticalT1E1OutOfFrame", 2209), ("setOpticalT1E1DetectedAIS", 2210), ("setOpticalT1E1NearEndLOS", 2213), ("setOpticalT1E1RcvFarEndYellow", 2217), ("setOpticalT1E1NearEndSEF", 2218), ("setOpticalT1E1Tug2LOP", 2219), ("setOpticalT1E1Tug2RDI", 2220), ("setOpticalT1E1Tug2RFI", 2221), ("setOpticalT1E1Tug2AIS", 2222), ("setOpticalT1E1Tug2PSLM", 2223), ("setOpticalT1E1Tug2PSLU", 2224), ("setOpticalT1E1ConfigError", 2225), ("clearOpticalT1E1RedAlarm", 2241), ("clearOpticalT1E1NearEndSendLOF", 2242), ("clearOpticalT1E1NearEndSendingAIS", 2244), ("clearOpticalT1E1NearEndLOF", 2245), ("clearOpticalT1E1LossOfPointer", 2248), ("clearOpticalT1E1OutOfFrame", 2249), ("clearOpticalT1E1DetectedAIS", 2250), ("clearOpticalT1E1NearEndLOS", 2253), ("clearOpticalT1E1RcvFarEndYellow", 2257), ("clearOpticalT1E1NearEndSEF", 2258), ("clearOpticalT1E1Tug2LOP", 2259), ("clearOpticalT1E1Tug2RDI", 2260), ("clearOpticalT1E1Tug2RFI", 2261), ("clearOpticalT1E1Tug2AIS", 2262), ("clearOpticalT1E1Tug2PSLM", 2263), ("clearOpticalT1E1Tug2PSLU", 2264), ("clearOpticalT1E1ConfigError", 2265), ("setVtNearEndLOP", 2301), ("setVtNearEndAIS", 2302), ("setPayloadPathLOP", 2303), ("setPayloadPathAIS", 2304), ("setPayloadPathRDI", 2305), ("clearVtNearEndLOP", 2341), ("clearVtNearEndAIS", 2342), ("clearPayloadPathLOP", 2343), ("clearPayloadPathAIS", 2344), ("clearPayloadPathRDI", 2345), ("setTransOverheadAIS", 2401), ("setTransOverheadRDI", 2402), ("setTransOverheadOOF", 2403), ("setTransOverheadLOF", 2404), ("setTransOverheadLOS", 2405), ("setTransOverheadSfDetect", 2413), ("setTransOverheadSdDetect", 2414), ("setTransOverheadLaserOffDetect", 2415), ("clearTransOverheadAIS", 2441), ("clearTransOverheadRDI", 2442), ("clearTransOverheadOOF", 2443), ("clearTransOverheadLOF", 2444), ("clearTransOverheadLOS", 2445), ("clearTransOverheadSfDetect", 2453), ("clearTransOverheadSdDetect", 2454), ("clearTransOverheadLaserOffDetect", 2455), ("setE3RcvFarEndLOF", 2501), ("setE3NearEndSendLOF", 2502), ("setE3NearEndSendingAIS", 2504), ("setE3NearEndLOF", 2505), ("setE3NearEndLossOfSignal", 2506), ("setE3OtherLineStatus", 2512), ("setE3NearEndUnavailableSig", 2513), ("setE3NearEndSeverErroredFrame", 2515), ("setE3TxRxClockFailure", 2516), ("setE3FarEndBlockError", 2517), ("setE3MbitsInError", 2519), ("setE3LIUOtherStatus", 2520), ("setE3LIUCodingViolation", 2523), ("setE3ConfigError", 2525), ("clearE3RcvFarEndLOF", 2541), ("clearE3NearEndSendLOF", 2542), ("clearE3NearEndSendingAIS", 2544), ("clearE3NearEndLOF", 2545), ("clearE3NearEndLossOfSignal", 2546), ("clearE3OtherLineStatus", 2552), ("clearE3NearEndUnavailableSig", 2553), ("clearE3NearEndSeverErroredFrame", 2555), ("clearE3TxRxClockFailure", 2556), ("clearE3FarEndBlockError", 2557), ("clearE3MbitsInError", 2559), ("clearE3LIUOtherStatus", 2560), ("clearE3LIUCodingViolation", 2563), ("clearE3ConfigError", 2565), ("setContactClosureInputAlarm", 2601), ("setContactClosureCfgError", 2625), ("clearContactClosureInputAlarm", 2641), ("clearContactClosureCfgError", 2665), ("setVoltMeasureAlarm", 2701), ("setVoltMeasureCfgError", 2725), ("clearVoltMeasureAlarm", 2741), ("clearVoltMeasureCfgError", 2765), ("setAsyncRxFifoError", 2801), ("setAsyncTxFifoError", 2802), ("setAsyncOverrunError", 2803), ("setAsyncParityError", 2804), ("setAsyncFramingError", 2805), ("clearAsyncRxFifoError", 2841), ("clearAsyncTxFifoError", 2842), ("clearAsyncOverrunError", 2843), ("clearAsyncParityError", 2844), ("clearAsyncFramingError", 2845), ("setTempSensorOutOfRange", 2901), ("clearTempSensorOutOfRange", 2941), ("setVWanError", 3001), ("setVWanCfgError", 3025), ("clearVWanError", 3041), ("clearVWanCfgError", 3065), ("set1uPowerSupplyOffline", 3108), ("set1uPowerSupplyDefective", 3109), ("set1uPowerSupplyFanFailure", 3110), ("set1uPowerSupplyCircuitMissing", 3119), ("set1uPowerSupplyCfgMismatch", 3125), ("clear1uPowerSupplyOffline", 3148), ("clear1uPowerSupplyDefective", 3149), ("clear1uPowerSupplyCircuitMissing", 3159), ("clear1uPowerSupplyFanFailure", 3150), ("clear1uPowerSupplyCfgMismatch", 3165), ("evntDevColdStart", 1), ("evntDevWarmStart", 2), ("evntDevOnline", 201), ("evntDevStandby", 202), ("evntDevOutOfService", 231), ("evntDevNotOnline", 241), ("evntDevNotStandby", 242), ("evntDevInService", 271), ("evntT1E1RcvingAIS", 303), ("evntT1E1NearEndLooped", 307), ("evntT1E1CarrierEquipOutOfService", 314), ("evntE1NationalSa4TxRxSame", 316), ("evntT1E1InTest", 330), ("evntT1E1OutOfService", 331), ("evntT1E1StoppedRcvingAIS", 343), ("evntT1E1NearEndLoopOff", 347), ("evntT1E1CarrierEquipInService", 354), ("evntE1NationalSa4TxRxDiff", 356), ("evntT1E1TestOff", 370), ("evntT1E1InService", 371), ("evntHsNearEndLooped", 407), ("evntHsNoBtsAssigned", 424), ("evntHsInTest", 430), ("evntHsOutOfService", 431), ("evntHsNearEndLoopOff", 447), ("evntHsBtsAssigned", 464), ("evntHsTestOff", 470), ("evntHsInService", 471), ("evntT3NearEndLooped", 507), ("evntT3CarrierEquipOutOfService", 514), ("evntT3InTest", 530), ("evntT3OutOfService", 531), ("evntT3NearEndLoopOff", 547), ("evntT3CarrierEquipInService", 554), ("evntT3TestOff", 570), ("evntT3InService", 571), ("evntOcuOutOfService", 731), ("evntOcuInService", 771), ("evntTamOutOfService", 831), ("evntTamInService", 871), ("evntVoiceOutOfService", 931), ("evntVoiceInService", 971), ("evntPsxDevOnline", 1001), ("evntPsxNewControllerRev", 1009), ("evntPsxLineCard01Missing", 1014), ("evntPsxLineCard02Missing", 1015), ("evntPsxLineCard03Missing", 1016), ("evntPsxLineCard04Missing", 1017), ("evntPsxLineCard05Missing", 1018), ("evntPsxLineCard06Missing", 1019), ("evntPsxLineCard07Missing", 1020), ("evntPsxLineCard08Missing", 1021), ("evntPsxLineCard09Missing", 1022), ("evntPsxLineCard10Missing", 1023), ("evntPsxLineCard11Missing", 1024), ("evntPsxLineCard01Present", 1054), ("evntPsxLineCard02Present", 1055), ("evntPsxLineCard03Present", 1056), ("evntPsxLineCard04Present", 1057), ("evntPsxLineCard05Present", 1058), ("evntPsxLineCard06Present", 1059), ("evntPsxLineCard07Present", 1060), ("evntPsxLineCard08Present", 1061), ("evntPsxLineCard09Present", 1062), ("evntPsxLineCard10Present", 1063), ("evntPsxLineCard11Present", 1064), ("evntRtrOutOfService", 1231), ("evntRtrInService", 1271), ("evntSts1RcvingAIS", 1303), ("evntSts1NearEndLooped", 1307), ("evntSts1CarrierEquipOutOfService", 1314), ("evntSts1InTest", 1330), ("evntSts1OutOfService", 1331), ("evntSts1StoppedRcvingAIS", 1343), ("evntSts1NearEndLoopOff", 1347), ("evntSts1CarrierEquipInService", 1354), ("evntSts1TestOff", 1370), ("evntSts1InService", 1371), ("evntHt3RcvingAIS", 1403), ("evntHt3NearEndLooped", 1407), ("evntHt3CarrierEquipOutOfService", 1414), ("evntHt3InTest", 1430), ("evntHt3OutOfService", 1431), ("evntHt3StoppedRcvingAIS", 1443), ("evntHt3NearEndLoopOff", 1447), ("evntHt3CarrierEquipInService", 1454), ("evntHt3TestOff", 1470), ("evntHt3InService", 1471), ("evntGr303OutOfService", 1531), ("evntGr303InService", 1571), ("evntDs0DpPortInTest", 1930), ("evntDs0DpPortOutOfService", 1931), ("evntDs0DpPortTestOff", 1970), ("evntDs0DpPortInService", 1971), ("evntOpticalT1E1RcvingAIS", 2203), ("evntOpticalT1E1NearEndLooped", 2207), ("evntOpticalE1NationalSa4TxRxSame", 2216), ("evntOpticalT1E1InTest", 2230), ("evntOpticalT1E1OutOfService", 2231), ("evntOpticalT1E1StoppedRcvingAIS", 2243), ("evntOpticalT1E1NearEndLoopOff", 2247), ("evntOpticalE1NationalSa4TxRxDiff", 2256), ("evntOpticalT1E1TestOff", 2270), ("evntOpticalT1E1InService", 2271), ("evntPayloadNearEndLineLooped", 2307), ("evntPayloadNearEndLocalLooped", 2308), ("evntPayloadInTest", 2330), ("evntPayloadNearEndLineLoopOff", 2347), ("evntPayloadNearEndLocalLoopOff", 2348), ("evntPayloadTestOff", 2370), ("evntTransOverheadNearEndSysLineLooped", 2407), ("evntTransOverheadNearEndPathLineLooped", 2408), ("evntTransOverheadNearEndLocalLooped", 2409), ("evntTransOverheadInTest", 2430), ("evntTransOverheadNearEndSysLineLoopOff", 2447), ("evntTransOverheadNearEndPathLineLoopOff", 2448), ("evntTransOverheadNearEndLocalLoopOff", 2449), ("evntTransOverheadTestOff", 2470), ("evntE3RcvingAIS", 2503), ("evntE3NearEndLooped", 2507), ("evntE3CarrierEquipOutOfService", 2514), ("evntE3InTest", 2530), ("evntE3OutOfService", 2531), ("evntE3StoppedRcvingAIS", 2543), ("evntE3NearEndLoopOff", 2547), ("evntE3CarrierEquipInService", 2554)) + NamedValues(("evntE3TestOff", 2570), ("evntE3InService", 2571), ("evnt1uPowerSupplyFanOn", 3116), ("evnt1uPowerSupplyFanOff", 3156)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapType.setStatus('current')
trapState = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapState.setStatus('current')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 8), AlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
trapSysEvent = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSysEvent.setStatus('current')
trapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20))
trapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1), )
if mibBuilder.loadTexts: trapDestinationTable.setStatus('current')
trapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1, 1), ).setIndexNames((0, "ERI-DNX-SMC-MIB", "trapDestAddr"))
if mibBuilder.loadTexts: trapDestinationEntry.setStatus('current')
trapDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestAddr.setStatus('current')
trapDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestName.setStatus('current')
trapDestCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-trap-dest", 1), ("delete-trap-dest", 2), ("create-trap-dest", 3), ("update-successful", 101), ("delete-successful", 102), ("create-successful", 103), ("err-general-trap-dest-cfg-error", 200), ("err-invalid-trap-dest-addr", 201), ("err-invalid-trap-dest-cmd", 202), ("err-invalid-trap-dest-name", 203), ("err-invalid-trap-dest-pdu", 204), ("err-invalid-trap-dest-retry", 205), ("err-invalid-trap-dest-tmout", 206), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestCmdStatus.setStatus('current')
trapDestPduType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("v1Trap", 0), ("v2Trap", 1), ("inform", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestPduType.setStatus('current')
trapDestMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestMaxRetry.setStatus('current')
trapDestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 3, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 10, 15, 20))).clone(namedValues=NamedValues(("none", 0), ("secs-5", 5), ("secs-10", 10), ("secs-15", 15), ("secs-20", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestTimeout.setStatus('current')
eriTrapEnterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 0))
if mibBuilder.loadTexts: eriTrapEnterprise.setStatus('current')
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "trapResourceKey"), ("ERI-DNX-SMC-MIB", "trapTime"), ("ERI-DNX-SMC-MIB", "trapResourceAddress"), ("ERI-DNX-SMC-MIB", "trapResourceType"), ("ERI-DNX-SMC-MIB", "trapType"), ("ERI-DNX-SMC-MIB", "trapState"), ("ERI-DNX-SMC-MIB", "trapSeverity"))
if mibBuilder.loadTexts: alarmTrap.setStatus('current')
deleteResourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 0, 2)).setObjects(("ERI-DNX-SMC-MIB", "resourceKey"), ("ERI-DNX-SMC-MIB", "trapSequence"))
if mibBuilder.loadTexts: deleteResourceTrap.setStatus('current')
dnxTrapEnterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 0))
if mibBuilder.loadTexts: dnxTrapEnterprise.setStatus('current')
connectionEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 3)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "sysMapID"), ("ERI-DNX-SMC-MIB", "sysConnID"), ("ERI-DNX-SMC-MIB", "sysCmdStatus"))
if mibBuilder.loadTexts: connectionEventTrap.setStatus('current')
connMapMgrTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 4)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "connMapID"), ("ERI-DNX-SMC-MIB", "connMapCmdStatus"))
if mibBuilder.loadTexts: connMapMgrTrap.setStatus('current')
connMapCopyTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 6)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "lastMapCopied"), ("ERI-DNX-SMC-MIB", "connMapID"))
if mibBuilder.loadTexts: connMapCopyTrap.setStatus('current')
bulkConnPurgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 7)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "resourceKey"), ("ERI-DNX-SMC-MIB", "connMapID"), ("ERI-DNX-SMC-MIB", "connMapCounts"))
if mibBuilder.loadTexts: bulkConnPurgeTrap.setStatus('current')
clockSrcChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 10)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "clockSrcActive"), ("ERI-DNX-SMC-MIB", "primaryClockSrc"), ("ERI-DNX-SMC-MIB", "secondaryClockSrc"), ("ERI-DNX-SMC-MIB", "tertiaryClockSrc"), ("ERI-DNX-SMC-MIB", "clockSrcCmdStatus"))
if mibBuilder.loadTexts: clockSrcChgTrap.setStatus('current')
trunkCondProfTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 13)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "trunkProfileID"), ("ERI-DNX-SMC-MIB", "trunkCmdStatus"))
if mibBuilder.loadTexts: trunkCondProfTrap.setStatus('current')
systemEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 14)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "trapSysEvent"), ("ERI-DNX-SMC-MIB", "trapSeverity"))
if mibBuilder.loadTexts: systemEventTrap.setStatus('current')
trapDestCfgTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 15)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "trapDestAddr"), ("ERI-DNX-SMC-MIB", "trapDestCmdStatus"))
if mibBuilder.loadTexts: trapDestCfgTrap.setStatus('current')
featureKeyCfgTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 16)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-SMC-MIB", "featureKeyName"), ("ERI-DNX-SMC-MIB", "featureKeyState"), ("ERI-DNX-SMC-MIB", "featureKeyCmdStatus"))
if mibBuilder.loadTexts: featureKeyCfgTrap.setStatus('current')
mibBuilder.exportSymbols("ERI-DNX-SMC-MIB", trunkCondProfTrap=trunkCondProfTrap, resourceCriticalMask=resourceCriticalMask, sysSrcTrunkCProfile=sysSrcTrunkCProfile, resourceKey=resourceKey, resourceAlarmTable=resourceAlarmTable, lastMapCopied=lastMapCopied, trapCfg=trapCfg, PYSNMP_MODULE_ID=eriDNXSmcMIB, dbHostFilename=dbHostFilename, connMapCurrStatus=connMapCurrStatus, addConnRecord=addConnRecord, trunkCProfileEntry=trunkCProfileEntry, sysConnType=sysConnType, enterNewFeatureKey=enterNewFeatureKey, trapDestinationTable=trapDestinationTable, dbRemoteHostTableEntry=dbRemoteHostTableEntry, deleteResourceTrap=deleteResourceTrap, sysProfile=sysProfile, activeMapId=activeMapId, eriDNXSmcMIB=eriDNXSmcMIB, sysConnTable=sysConnTable, NestSlotAddress=NestSlotAddress, resourceAlarmInfoMask=resourceAlarmInfoMask, sysConnSpeed=sysConnSpeed, sysDestTsLineType=sysDestTsLineType, trapResourceAddress=trapResourceAddress, sysSrcAddr=sysSrcAddr, trunkProfileID=trunkProfileID, sysConnInstance=sysConnInstance, resourceEntry=resourceEntry, resourceInfoMask=resourceInfoMask, addConnSpeed=addConnSpeed, utilities=utilities, trapDestTimeout=trapDestTimeout, DataSwitch=DataSwitch, trapSeverity=trapSeverity, actvSrcTsLineType=actvSrcTsLineType, LinkCmdStatus=LinkCmdStatus, sysSecondaryState=sysSecondaryState, sysDateTime=sysDateTime, mibProfile=mibProfile, addComm=addComm, dbBackupHour=dbBackupHour, actvConnType=actvConnType, trapType=trapType, sysMacAddress=sysMacAddress, trunkCProfileTable=trunkCProfileTable, sysWeekday=sysWeekday, primaryClockSrc=primaryClockSrc, ConnectionSpeed=ConnectionSpeed, resourceAlarmAddr=resourceAlarmAddr, actvConnTable=actvConnTable, dbHostIp=dbHostIp, systemEventTrap=systemEventTrap, addDestTrunkCProfile=addDestTrunkCProfile, actvSrcTrunkCProfile=actvSrcTrunkCProfile, devices=devices, trapSequence=trapSequence, sysMin=sysMin, trapDestCmdStatus=trapDestCmdStatus, actvDestTsLineType=actvDestTsLineType, featureKeyCmdStatus=featureKeyCmdStatus, dbHostDirectory=dbHostDirectory, trapResourceKey=trapResourceKey, xilinxType=xilinxType, DecisionType=DecisionType, addSrcTrunkCProfile=addSrcTrunkCProfile, ConnectionState2=ConnectionState2, sysDestAddr=sysDestAddr, addDestTsBitmap=addDestTsBitmap, connMapCmdStatus=connMapCmdStatus, rearModem=rearModem, dbAutoBackup=dbAutoBackup, trunkCmdStatus=trunkCmdStatus, releaseDate=releaseDate, trapSysEvent=trapSysEvent, connMapName=connMapName, FunctionSwitch=FunctionSwitch, sysMonth=sysMonth, resourceNominalMask=resourceNominalMask, featureKeyState=featureKeyState, activeSMC=activeSMC, sysDay=sysDay, addMapID=addMapID, resourceType=resourceType, addSrcAddr=addSrcAddr, dbHostIndex=dbHostIndex, alarmTrap=alarmTrap, resourceAlarmType=resourceAlarmType, dnxFeatureKeyTable=dnxFeatureKeyTable, newKeyCode=newKeyCode, actvConnID=actvConnID, flashChksum=flashChksum, sysAlarmCutOff=sysAlarmCutOff, actvDestTrunkCProfile=actvDestTrunkCProfile, resourceAddr=resourceAddr, dbRemoteHostTable=dbRemoteHostTable, dbHostCmdStatus=dbHostCmdStatus, database=database, traps=traps, clockSrcActive=clockSrcActive, CurrentDevStatus=CurrentDevStatus, systemRelease=systemRelease, connectionEventTrap=connectionEventTrap, addCmdStatus=addCmdStatus, ConnectionState1=ConnectionState1, connMapCopyTrap=connMapCopyTrap, actvSecondaryState=actvSecondaryState, featureKeyName=featureKeyName, secondaryClockSrc=secondaryClockSrc, connections=connections, systemMgrType=systemMgrType, actvDestAddr=actvDestAddr, actvMapID=actvMapID, sysYear=sysYear, trunkSignalStart=trunkSignalStart, actvConnName=actvConnName, featureKeyCfgTrap=featureKeyCfgTrap, connInfo=connInfo, connMapDescription=connMapDescription, actvConnEntry=actvConnEntry, addBroadSrcId=addBroadSrcId, connMapTable=connMapTable, actvDestTsBitmap=actvDestTsBitmap, trapState=trapState, xilinxVersion=xilinxVersion, addConnName=addConnName, sysTimeCmdStatus=sysTimeCmdStatus, resourceMajorMask=resourceMajorMask, actvConnSpeed=actvConnSpeed, trapTime=trapTime, sysSrcTsBitmap=sysSrcTsBitmap, DnxResourceType=DnxResourceType, actvComm=actvComm, actvSrcAddr=actvSrcAddr, sysCustomerId=sysCustomerId, sysSec=sysSec, PortStatus=PortStatus, featureKeys=featureKeys, resourceState=resourceState, sysComm=sysComm, sysSa4RxTxTrap=sysSa4RxTxTrap, actvBroadSrcId=actvBroadSrcId, unitName=unitName, connMapDate=connMapDate, connMapMgrTrap=connMapMgrTrap, CommunicationsType=CommunicationsType, resourceTrapMask=resourceTrapMask, clockSrcConfig=clockSrcConfig, sysMapID=sysMapID, newKeyCodeCmdStatus=newKeyCodeCmdStatus, resourceAlarmState=resourceAlarmState, DnxTsPortType=DnxTsPortType, tertiaryClockSrc=tertiaryClockSrc, actvSrcTsBitmap=actvSrcTsBitmap, actvTestMode=actvTestMode, addSrcTsBitmap=addSrcTsBitmap, dbBackupDayOfWeek=dbBackupDayOfWeek, trunkData=trunkData, addTestMode=addTestMode, resourceAlarmMajorMask=resourceAlarmMajorMask, sysSrcTsLineType=sysSrcTsLineType, MapNumber=MapNumber, resourceAlarmMinorMask=resourceAlarmMinorMask, sysConnName=sysConnName, resourceMinorMask=resourceMinorMask, eriTrapEnterprise=eriTrapEnterprise, clockSrcChgTrap=clockSrcChgTrap, clockSrcCmdStatus=clockSrcCmdStatus, connDBChecksum=connDBChecksum, connMapChecksum=connMapChecksum, resourceAlarmNominalMask=resourceAlarmNominalMask, dnx=dnx, bulkConnPurgeTrap=bulkConnPurgeTrap, UnsignedInt=UnsignedInt, sysMgrOnlineTime=sysMgrOnlineTime, sysConnChecksum=sysConnChecksum, resourceAlarmEntry=resourceAlarmEntry, resourceAlarmCriticalMask=resourceAlarmCriticalMask, trunkSignalEnd=trunkSignalEnd, dbBackup=dbBackup, connMapEntry=connMapEntry, ConnCmdStatus=ConnCmdStatus, sysConnID=sysConnID, DnxTrunkProfSelection=DnxTrunkProfSelection, featureKeyId=featureKeyId, sysBroadSrcId=sysBroadSrcId, trapResourceType=trapResourceType, AlarmSeverity=AlarmSeverity, resourceAlarmTrapMask=resourceAlarmTrapMask, OneByteField=OneByteField, TimeSlotAddress=TimeSlotAddress, dbBackupOccurrence=dbBackupOccurrence, actvConnChecksum=actvConnChecksum, sysClock=sysClock, trapDestPduType=trapDestPduType, addConnType=addConnType, sysPrimaryState=sysPrimaryState, addConnID=addConnID, ClockSrcAddress=ClockSrcAddress, addDestAddr=addDestAddr, connMapID=connMapID, ConnectionType=ConnectionType, unitType=unitType, sysHour=sysHour, dnxFeatureKeyEntry=dnxFeatureKeyEntry, sysDestTsBitmap=sysDestTsBitmap, LinkPortAddress=LinkPortAddress, sysTestMode=sysTestMode, actvPrimaryState=actvPrimaryState, actvConnInstance=actvConnInstance, dnxTrapEnterprise=dnxTrapEnterprise, actvCmdStatus=actvCmdStatus, trapDestMaxRetry=trapDestMaxRetry, trapDestName=trapDestName, connMapVersions=connMapVersions, sysDestTrunkCProfile=sysDestTrunkCProfile, trapDestCfgTrap=trapDestCfgTrap, resourceTable=resourceTable, trapDestAddr=trapDestAddr, clockSrcMode=clockSrcMode, dbBackupMin=dbBackupMin, sysConnEntry=sysConnEntry, TestAccess=TestAccess, trapDestinationEntry=trapDestinationEntry, connMapCounts=connMapCounts, resourceAlarmKey=resourceAlarmKey, sysMgr=sysMgr, sysCmdStatus=sysCmdStatus)
