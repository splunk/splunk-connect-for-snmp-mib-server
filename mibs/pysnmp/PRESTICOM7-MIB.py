#
# PySNMP MIB module PRESTICOM7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PRESTICOM7-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:33:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, Gauge32, Counter32, Integer32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, enterprises, Counter64, Bits, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Gauge32", "Counter32", "Integer32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "enterprises", "Counter64", "Bits", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
presticom = MibIdentifier((1, 3, 6, 1, 4, 1, 727))
netperformer7 = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50))
mibVersionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 10))
mibVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 10, 7))
mibSubVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 10, 7, 0))
mibSpecialVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 10, 7, 0, 4))
mibEvolution = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 10, 7, 0, 4, 1))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2))
noDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 1, 1))
ver6X_Device = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 1, 2)).setLabel("ver6X-Device")
system = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 1))
ifwan = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 2))
iflan = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 3))
ifvce = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 18))
pu = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 4))
schedule = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 5))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 6))
phone = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 7))
filter = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 8))
pysmi_class = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 9)).setLabel("class")
pvc = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 10))
ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 11))
ipstatic = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 13))
ip = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 14))
ospf = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 15))
ipxfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 16))
stat = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20))
intf = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 30))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 31))
ipaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 32))
bootp = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 33))
proxy = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 34))
timep = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 35))
sysDesc = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDesc.setStatus('mandatory')
sysContact = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContact.setStatus('mandatory')
sysName = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysName.setStatus('mandatory')
sysUnitRoutingVersion = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUnitRoutingVersion.setStatus('mandatory')
sysLocation = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocation.setStatus('mandatory')
sysDate = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDate.setStatus('mandatory')
sysClock = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClock.setStatus('mandatory')
sysDay = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254, 255))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDay.setStatus('mandatory')
sysAcceptLoop = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAcceptLoop.setStatus('mandatory')
sysLinkTimeout_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setLabel("sysLinkTimeout-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLinkTimeout_s.setStatus('mandatory')
sysTransitDelay_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setLabel("sysTransitDelay-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTransitDelay_s.setStatus('mandatory')
sysDefaultIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDefaultIpAddr.setStatus('mandatory')
sysDefaultIpMask = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDefaultIpMask.setStatus('mandatory')
sysDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDefaultGateway.setStatus('mandatory')
sysRackId = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("cs-product-only", 0), ("rack-1", 1), ("rack-2", 2), ("rack-3", 3), ("rack-4", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRackId.setStatus('mandatory')
sysPsAndFansMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("cs-product-only", 0), ("none", 1), ("ps", 2), ("fans", 3), ("both", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPsAndFansMonitoring.setStatus('mandatory')
sysPsMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPsMonitoring.setStatus('mandatory')
sysSnmpTrapIpAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSnmpTrapIpAddr1.setStatus('mandatory')
sysSnmpTrapIpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSnmpTrapIpAddr2.setStatus('mandatory')
sysSnmpTrapIpAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSnmpTrapIpAddr3.setStatus('mandatory')
sysSnmpTrapIpAddr4 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSnmpTrapIpAddr4.setStatus('mandatory')
sysThisPosId = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 254, 255))).clone(namedValues=NamedValues(("cs-product-only", 0), ("pos-1", 1), ("pos-2", 2), ("pos-3", 3), ("pos-4", 4), ("pos-5", 5), ("pos-6", 6), ("pos-7", 7), ("pos-8", 8), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysThisPosId.setStatus('mandatory')
sysPosNr = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPosNr.setStatus('mandatory')
sysRacksNr = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRacksNr.setStatus('mandatory')
sysPosTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 32), )
if mibBuilder.loadTexts: sysPosTable.setStatus('mandatory')
sysPosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 32, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "sysPosRackId"), (0, "PRESTICOM7-MIB", "sysPosId"))
if mibBuilder.loadTexts: sysPosEntry.setStatus('mandatory')
sysPosId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 254, 255))).clone(namedValues=NamedValues(("cs-product-only", 0), ("pos-1", 1), ("pos-2", 2), ("pos-3", 3), ("pos-4", 4), ("pos-5", 5), ("pos-6", 6), ("pos-7", 7), ("pos-8", 8), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPosId.setStatus('mandatory')
sysPosProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 32, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPosProduct.setStatus('mandatory')
sysPosRackId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("single-rack", 0), ("rack-1", 1), ("rack-2", 2), ("rack-3", 3), ("rack-4", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPosRackId.setStatus('mandatory')
sysPosIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 32, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPosIpAddr.setStatus('mandatory')
ipaddrNr = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddrNr.setStatus('mandatory')
ipaddrTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 32, 2), )
if mibBuilder.loadTexts: ipaddrTable.setStatus('mandatory')
ipaddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 32, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ipaddrIndex"))
if mibBuilder.loadTexts: ipaddrEntry.setStatus('mandatory')
ipaddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 32, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddrIndex.setStatus('mandatory')
ipaddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 32, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipaddrAddr.setStatus('mandatory')
ipaddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("global", 1), ("wan", 2), ("lan", 3), ("proxy", 4), ("pvc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddrType.setStatus('mandatory')
ipaddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 32, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddrIfIndex.setStatus('mandatory')
sysDLCI = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDLCI.setStatus('mandatory')
sysExtensionNumLength = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtensionNumLength.setStatus('mandatory')
sysExtendedDigitsLength = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtendedDigitsLength.setStatus('mandatory')
sysDialTimer = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDialTimer.setStatus('mandatory')
sysCountry = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCountry.setStatus('mandatory')
sysJitterBuf = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJitterBuf.setStatus('mandatory')
sysRingFreq = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("voice-data-only", 0), ("hz-17", 1), ("hz-20", 2), ("hz-25", 3), ("hz-50", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRingFreq.setStatus('mandatory')
sysRingVolt = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 254, 255))).clone(namedValues=NamedValues(("voice-data-only", 0), ("rms-Volts-60", 1), ("rms-Volts-80", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRingVolt.setStatus('mandatory')
sysVoiceEncoding = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 254, 255))).clone(namedValues=NamedValues(("fp-product-only", 0), ("aCode", 1), ("bCode", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysVoiceEncoding.setStatus('mandatory')
sysVoiceClocking = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 254, 255))).clone(namedValues=NamedValues(("fp-product-only", 0), ("aClock", 1), ("bClock", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysVoiceClocking.setStatus('mandatory')
sysVoiceLog = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysVoiceLog.setStatus('mandatory')
sysSpeedDialNumLength = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSpeedDialNumLength.setStatus('mandatory')
sysAutoSaveDelay = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAutoSaveDelay.setStatus('mandatory')
sysVoiceHighestPriority = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysVoiceHighestPriority.setStatus('mandatory')
sysVoiceClass = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysVoiceClass.setStatus('mandatory')
sysHuntForwardingAUnit = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHuntForwardingAUnit.setStatus('mandatory')
sysHuntForwardingBUnit = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHuntForwardingBUnit.setStatus('mandatory')
sysHuntForwardingADLCI = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHuntForwardingADLCI.setStatus('mandatory')
sysHuntForwardingBDLCI = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHuntForwardingBDLCI.setStatus('mandatory')
sysHuntForwardingASvcAddress = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHuntForwardingASvcAddress.setStatus('mandatory')
sysHuntForwardingBSvcAddress = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHuntForwardingBSvcAddress.setStatus('mandatory')
sysBackplaneRipVersion = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("v1", 2), ("v2-broadcast", 3), ("v2-multicast", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBackplaneRipVersion.setStatus('mandatory')
sysTrapRackandPos = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapRackandPos.setStatus('mandatory')
proxyNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyNumber.setStatus('mandatory')
proxyTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2), )
if mibBuilder.loadTexts: proxyTable.setStatus('mandatory')
proxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "proxyIndex"))
if mibBuilder.loadTexts: proxyEntry.setStatus('mandatory')
proxyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proxyIndex.setStatus('mandatory')
proxyComm = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyComm.setStatus('mandatory')
proxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyIpAddr.setStatus('mandatory')
proxyIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyIpMask.setStatus('mandatory')
proxyTrapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyTrapIpAddr.setStatus('mandatory')
proxyDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 34, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDefaultGateway.setStatus('mandatory')
intfNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfNumber.setStatus('mandatory')
intfTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2), )
if mibBuilder.loadTexts: intfTable.setStatus('mandatory')
intfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "intfIndex"))
if mibBuilder.loadTexts: intfEntry.setStatus('mandatory')
intfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfIndex.setStatus('mandatory')
intfDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfDesc.setStatus('mandatory')
intfType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 99, 254, 255))).clone(namedValues=NamedValues(("wan-on-baseCard", 1), ("voice-on-baseCard", 2), ("wan-on-slot", 3), ("voice-on-slot", 4), ("lan-on-baseCard", 5), ("lan-on-slot", 6), ("proxy-on-slot", 7), ("voice-control-on-slot", 8), ("clock-extract-module", 9), ("other", 99), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfType.setStatus('mandatory')
intfNumInType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfNumInType.setStatus('mandatory')
intfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 254, 255))).clone(namedValues=NamedValues(("baseCard", 0), ("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-A", 9), ("slot-B", 10), ("slot-C", 11), ("slot-D", 12), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfSlot.setStatus('mandatory')
intfSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 9, 16, 17, 18, 19, 21, 22, 23, 51, 36, 9999, 254, 255))).clone(namedValues=NamedValues(("baseCard", 0), ("ethernet", 1), ("vcf03", 2), ("g703-E1", 3), ("g703-T1", 4), ("g703-E1-ii", 5), ("g703-T1-ii", 6), ("tokenring", 7), ("voice", 9), ("tic", 16), ("tic-75", 17), ("dvc", 18), ("isdn-bri-voice", 19), ("eic", 21), ("eic-120", 22), ("cem", 23), ("vfc03r", 51), ("proxy", 36), ("unkown", 9999), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfSlotType.setStatus('mandatory')
intfNumInSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfNumInSlot.setStatus('mandatory')
intfModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 30, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 255, 254, 253, 252))).clone(namedValues=NamedValues(("module-rs232-dce", 0), ("module-rs232-dte", 1), ("module-v35-dce", 2), ("module-v35-dte", 3), ("module-x21-dce", 4), ("module-x21-dte", 5), ("module-rs530-dce", 6), ("module-rs530-dte", 7), ("module-rs366A-dce", 8), ("module-rs366A-dte", 9), ("module-rs449-dce", 10), ("module-rs449-dte", 11), ("module-univ-dce", 17), ("module-univ-dte", 18), ("module-i430s-dte", 19), ("module-i430u-dte", 20), ("module-i431-T1-dte", 21), ("module-i431-E1-dte", 22), ("module-dsucsu", 23), ("module-undef-dce", 255), ("module-undef-dte", 254), ("module-undef", 253), ("not-applicable", 252)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfModuleType.setStatus('mandatory')
intfSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfSlotNumber.setStatus('mandatory')
slotPortInSlotTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 31, 2), )
if mibBuilder.loadTexts: slotPortInSlotTable.setStatus('mandatory')
slotPortInSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 31, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "slotSlot"), (0, "PRESTICOM7-MIB", "slotPortInSlot"))
if mibBuilder.loadTexts: slotPortInSlotEntry.setStatus('mandatory')
slotSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 254, 255))).clone(namedValues=NamedValues(("baseCard", 0), ("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-A", 9), ("slot-B", 10), ("slot-C", 11), ("slot-D", 12), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSlot.setStatus('mandatory')
slotPortInSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 31, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPortInSlot.setStatus('mandatory')
slotIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 31, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfIndex.setStatus('mandatory')
ifwanNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifwanNumber.setStatus('mandatory')
ifwanTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2), )
if mibBuilder.loadTexts: ifwanTable.setStatus('mandatory')
ifwanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ifwanIndex"))
if mibBuilder.loadTexts: ifwanEntry.setStatus('mandatory')
ifwanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifwanIndex.setStatus('mandatory')
ifwanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifwanDesc.setStatus('mandatory')
ifwanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 28, 29, 31, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("p-sdlc", 2), ("s-sdlc", 3), ("hdlc", 4), ("ddcmp", 5), ("t-async", 6), ("r-async", 7), ("bsc", 8), ("cop", 9), ("pvcr", 10), ("passthru", 11), ("console", 12), ("fr-net", 17), ("fr-user", 18), ("ppp", 19), ("g703", 28), ("x25", 29), ("sf", 31), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanProtocol.setStatus('mandatory')
ifwanSpeed_bps = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 2000000))).setLabel("ifwanSpeed-bps").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSpeed_bps.setStatus('mandatory')
ifwanFallBackSpeed_bps = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setLabel("ifwanFallBackSpeed-bps").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanFallBackSpeed_bps.setStatus('mandatory')
ifwanFallBackSpeedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanFallBackSpeedEnable.setStatus('mandatory')
ifwanInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 255, 254, 253))).clone(namedValues=NamedValues(("dce-rs232", 0), ("dte-rs232", 1), ("dce-v35", 2), ("dte-v35", 3), ("dce-x21", 4), ("dte-x21", 5), ("dce-rs530", 6), ("dte-rs530", 7), ("dce-rs366a", 8), ("dte-rs366a", 9), ("dce-rs449", 10), ("dte-rs449", 11), ("dte-aui", 12), ("dte-tpe", 13), ("autom", 16), ("dce-univ", 17), ("dte-univ", 18), ("i430s", 19), ("i430u", 20), ("i431-t1", 21), ("i431-e1", 22), ("dsu-csu", 23), ("dce-undef", 255), ("dte-undef", 254), ("type-undef", 253)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanInterface.setStatus('mandatory')
ifwanClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 254, 255))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("ipl", 3), ("itb", 4), ("async", 5), ("iso-int", 6), ("iso-ext", 7), ("t1-e1-B-Rcvd", 11), ("t1-e1-A-Rcvd", 12), ("t1-e1-Local", 13), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanClocking.setStatus('mandatory')
ifwanCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi", 2), ("nrz-crc0", 3), ("nrzi-crc0", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanCoding.setStatus('mandatory')
ifwanModem = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("statpass", 3), ("dynapass", 4), ("statfix", 5), ("dynafix", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanModem.setStatus('mandatory')
ifwanTxStart = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 254, 255))).clone(namedValues=NamedValues(("auto", 0), ("max", 1), ("byte-48", 2), ("byte-96", 3), ("byte-144", 4), ("byte-192", 5), ("byte-256", 6), ("byte-512", 7), ("byte-1024", 8), ("byte-2048", 9), ("byte-8", 10), ("byte-16", 11), ("byte-24", 12), ("byte-32", 13), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTxStart.setStatus('mandatory')
ifwanTxStartCop = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 254, 255))).clone(namedValues=NamedValues(("auto", 0), ("max", 1), ("byte-8", 2), ("byte-16", 3), ("byte-24", 4), ("byte-32", 5), ("byte-40", 6), ("byte-48", 7), ("byte-96", 8), ("byte-144", 9), ("byte-192", 10), ("byte-256", 11), ("byte-512", 12), ("byte-1024", 13), ("byte-2048", 14), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTxStartCop.setStatus('mandatory')
ifwanTxStartPass = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTxStartPass.setStatus('mandatory')
ifwanIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("flag", 3), ("markd", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIdle.setStatus('mandatory')
ifwanDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDuplex.setStatus('mandatory')
ifwanGroupPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanGroupPoll.setStatus('mandatory')
ifwanGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanGroupAddress.setStatus('mandatory')
ifwanPollDelay_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setLabel("ifwanPollDelay-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPollDelay_ms.setStatus('mandatory')
ifwanFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("delay-0p0-ms", 1), ("delay-0p5-ms", 2), ("delay-1p0-ms", 3), ("delay-1p5-ms", 4), ("delay-2p0-ms", 5), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanFrameDelay.setStatus('mandatory')
ifwanFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 254, 255))).clone(namedValues=NamedValues(("fmt-8-none", 1), ("fmt-7-none", 2), ("fmt-7-odd", 3), ("fmt-7-even", 4), ("fmt-7-space", 5), ("fmt-7-mark", 6), ("fmt-7-ignore", 7), ("fmt-8-even", 8), ("fmt-8-odd", 9), ("fmt-8n-2stop", 10), ("fmt-8-bits", 11), ("fmt-6-bits", 12), ("sync", 13), ("async", 14), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanFormat.setStatus('mandatory')
ifwanSync = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSync.setStatus('mandatory')
ifwanDropSyncCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDropSyncCounter.setStatus('mandatory')
ifwanDropSyncCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDropSyncCharacter.setStatus('mandatory')
ifwanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMode.setStatus('mandatory')
ifwanBodCall_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setLabel("ifwanBodCall-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanBodCall_s.setStatus('mandatory')
ifwanBodHang_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setLabel("ifwanBodHang-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanBodHang_s.setStatus('mandatory')
ifwanBodLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanBodLevel.setStatus('mandatory')
ifwanBackupCall_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setLabel("ifwanBackupCall-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanBackupCall_s.setStatus('mandatory')
ifwanDialTimeout_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1000))).setLabel("ifwanDialTimeout-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDialTimeout_s.setStatus('mandatory')
ifwanBackupHang_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setLabel("ifwanBackupHang-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanBackupHang_s.setStatus('mandatory')
ifwanPortToBack = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 16, 1, 2, 3, 4, 5, 6, 7, 8, 254, 255))).clone(namedValues=NamedValues(("any", 15), ("all", 16), ("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("port-5", 5), ("port-6", 6), ("port-7", 7), ("port-8", 8), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPortToBack.setStatus('mandatory')
ifwanDialer = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254, 255))).clone(namedValues=NamedValues(("dTR", 1), ("x21-L1", 2), ("x21-L2", 3), ("v25-H", 4), ("v25-B", 5), ("aT-9600", 6), ("aT-19200", 7), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDialer.setStatus('mandatory')
ifwanRemoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanRemoteUnit.setStatus('mandatory')
ifwanClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanClassNumber.setStatus('mandatory')
ifwanRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanRingNumber.setStatus('mandatory')
ifwanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpAddress.setStatus('mandatory')
ifwanSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSubnetMask.setStatus('mandatory')
ifwanMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMaxFrame.setStatus('mandatory')
ifwanCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanCompression.setStatus('mandatory')
ifwanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifwanPriority.setStatus('mandatory')
ifwanTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTimeout.setStatus('mandatory')
ifwanRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanRetry.setStatus('mandatory')
ifwanRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanRemotePort.setStatus('mandatory')
ifwanFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanFlowControl.setStatus('mandatory')
ifwanMgmtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("lmi", 1), ("annex-d", 2), ("q-933", 3), ("none", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMgmtInterface.setStatus('mandatory')
ifwanEnquiryTimer_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setLabel("ifwanEnquiryTimer-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanEnquiryTimer_s.setStatus('mandatory')
ifwanReportCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanReportCycle.setStatus('mandatory')
ifwanIpRip = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("v1", 2), ("v2-broadcast", 3), ("v2-multicast", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpRip.setStatus('mandatory')
ifwanCllm = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanCllm.setStatus('mandatory')
ifwanIpxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpxRip.setStatus('mandatory')
ifwanIpxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpxSap.setStatus('mandatory')
ifwanIpxNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpxNetNum.setStatus('mandatory')
ifwanRxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 1, 2, 254, 255))).clone(namedValues=NamedValues(("none", 5), ("xon-Xoff", 1), ("hardware", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanRxFlow.setStatus('mandatory')
ifwanTxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 1, 2, 254, 255))).clone(namedValues=NamedValues(("none", 5), ("xon-Xoff", 1), ("hardware", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTxFlow.setStatus('mandatory')
ifwanTxHold_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setLabel("ifwanTxHold-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTxHold_s.setStatus('mandatory')
ifwanDsOSpeed_bps = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("bps-64000", 1), ("bps-56000", 2), ("not-applicable", 254), ("not-available", 255)))).setLabel("ifwanDsOSpeed-bps").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDsOSpeed_bps.setStatus('mandatory')
ifwanFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("esf", 2), ("d4", 3), ("other", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanFraming.setStatus('mandatory')
ifwanTerminating = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("tE", 1), ("nT", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTerminating.setStatus('mandatory')
ifwanCrc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanCrc4.setStatus('mandatory')
ifwanLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 4, 7, 254, 255))).clone(namedValues=NamedValues(("ami-e1", 0), ("hdb3-e1", 1), ("b8zs-t1", 2), ("ami-t1", 5), ("other", 4), ("b7sz-t1", 7), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanLineCoding.setStatus('mandatory')
ifwanBChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("b1", 2), ("b2", 3), ("b1-plus-b2", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanBChannels.setStatus('mandatory')
ifwanMultiframing = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMultiframing.setStatus('mandatory')
ifwanOspfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfEnable.setStatus('mandatory')
ifwanOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 65), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfAreaId.setStatus('mandatory')
ifwanOspfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfTransitDelay.setStatus('mandatory')
ifwanOspfRetransmitInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfRetransmitInt.setStatus('mandatory')
ifwanOspfHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfHelloInt.setStatus('mandatory')
ifwanOspfDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfDeadInt.setStatus('mandatory')
ifwanOspfPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 70), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfPassword.setStatus('mandatory')
ifwanOspfMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanOspfMetricCost.setStatus('mandatory')
ifwanChUse = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 72), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanChUse.setStatus('mandatory')
ifwanGainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("db-30", 1), ("db-36", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanGainLimit.setStatus('mandatory')
ifwanSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254, 255))).clone(namedValues=NamedValues(("none", 1), ("t1-rob-bit", 2), ("e1-cas", 3), ("e1-ccs", 4), ("trsp-orig", 5), ("trsp-answ", 6), ("qsig", 7), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSignaling.setStatus('mandatory')
ifwanIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIdleCode.setStatus('mandatory')
ifwanLineBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 254, 255))).clone(namedValues=NamedValues(("ft0-to-133", 0), ("ft133-to-266", 1), ("ft266-to-399", 2), ("ft399-to-533", 3), ("ft533-to-655", 4), ("dbMinus7point5", 5), ("dbMinus15", 6), ("dbMinus22point5", 7), ("ohm-75", 8), ("ohm-120", 9), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanLineBuild.setStatus('mandatory')
ifwanT1E1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanT1E1Status.setStatus('mandatory')
ifwanT1E1LoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("lev1-local", 3), ("lev2-local", 4), ("echo", 5), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanT1E1LoopBack.setStatus('mandatory')
ifwanChExp = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 86), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanChExp.setStatus('mandatory')
ifwanT1E1InterBit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanT1E1InterBit.setStatus('mandatory')
ifwanEncodingLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 254, 255))).clone(namedValues=NamedValues(("aLaw", 0), ("muLaw", 1), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanEncodingLaw.setStatus('mandatory')
ifwanCellPacketization = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanCellPacketization.setStatus('mandatory')
ifwanMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMaxChannels.setStatus('mandatory')
ifwanCondLMIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanCondLMIPort.setStatus('mandatory')
ifwanExtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 96), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanExtNumber.setStatus('mandatory')
ifwanDestExtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 97), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDestExtNumber.setStatus('mandatory')
ifwanConnTimeout_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setLabel("ifwanConnTimeout-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanConnTimeout_s.setStatus('mandatory')
ifwanSvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("e-164", 2), ("x-121", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcAddressType.setStatus('mandatory')
ifwanSvcNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 100), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcNetworkAddress.setStatus('mandatory')
ifwanSvcMaxTxTimeoutT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcMaxTxTimeoutT200.setStatus('mandatory')
ifwanSvcInactiveTimeoutT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcInactiveTimeoutT203.setStatus('mandatory')
ifwanSvcIframeRetransmissionsN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcIframeRetransmissionsN200.setStatus('mandatory')
ifwanSvcSetupTimeoutT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcSetupTimeoutT303.setStatus('mandatory')
ifwanSvcDisconnectTimeoutT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcDisconnectTimeoutT305.setStatus('mandatory')
ifwanSvcReleaseTimeoutT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcReleaseTimeoutT308.setStatus('mandatory')
ifwanSvcCallProceedingTimeoutT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcCallProceedingTimeoutT310.setStatus('mandatory')
ifwanSvcStatusTimeoutT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSvcStatusTimeoutT322.setStatus('mandatory')
ifwanTeiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("dynamic", 1), ("fixed", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTeiMode.setStatus('mandatory')
ifwanDigitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanDigitNumber.setStatus('mandatory')
ifwanMsn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMsn1.setStatus('mandatory')
ifwanMsn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 112), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMsn2.setStatus('mandatory')
ifwanMsn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 113), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanMsn3.setStatus('mandatory')
ifwanX25Encapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("annex-f", 1), ("annex-g", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanX25Encapsulation.setStatus('mandatory')
ifwanPvcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 115), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPvcNumber.setStatus('mandatory')
ifwanQsigPbxAb = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanQsigPbxAb.setStatus('mandatory')
ifwanQsigPbxXy = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("x", 1), ("y", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanQsigPbxXy.setStatus('mandatory')
ifwanIpRipTxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("duplex", 1), ("tx-only", 2), ("rx-only", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpRipTxRx.setStatus('mandatory')
ifwanIpRipAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpRipAuthType.setStatus('mandatory')
ifwanIpRipPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 120), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanIpRipPassword.setStatus('mandatory')
ifwanPppSilent = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("send-request", 1), ("wait-for-request", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppSilent.setStatus('mandatory')
ifwanPppConfigRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 122), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppConfigRestartTimer.setStatus('mandatory')
ifwanPppConfigRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 123), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppConfigRetries.setStatus('mandatory')
ifwanPppNegociateLocalMru = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 124), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppNegociateLocalMru.setStatus('mandatory')
ifwanPppLocalMru = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 125), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppLocalMru.setStatus('mandatory')
ifwanPppNegociatePeerMru = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppNegociatePeerMru.setStatus('mandatory')
ifwanPppPeerMruUpTo = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 127), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppPeerMruUpTo.setStatus('mandatory')
ifwanPppNegociateAccm = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppNegociateAccm.setStatus('mandatory')
ifwanPppRequestedAccmChar = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 129), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppRequestedAccmChar.setStatus('mandatory')
ifwanPppAcceptAccmPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppAcceptAccmPeer.setStatus('mandatory')
ifwanPppAcceptableAccmChar = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 131), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppAcceptableAccmChar.setStatus('mandatory')
ifwanPppRequestMagicNum = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppRequestMagicNum.setStatus('mandatory')
ifwanPppAcceptMagicNum = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppAcceptMagicNum.setStatus('mandatory')
ifwanPppAcceptOldIpAddNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppAcceptOldIpAddNeg.setStatus('mandatory')
ifwanPppNegociateIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppNegociateIpAddress.setStatus('mandatory')
ifwanPppAcceptIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppAcceptIpAddress.setStatus('mandatory')
ifwanPppRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 137), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppRemoteIpAddress.setStatus('mandatory')
ifwanPppRemoteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 138), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanPppRemoteSubnetMask.setStatus('mandatory')
ifwanHighPriorityTransparentClass = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanHighPriorityTransparentClass.setStatus('mandatory')
ifwanTransparentClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanTransparentClassNumber.setStatus('mandatory')
ifwanChannelCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanChannelCompressed.setStatus('mandatory')
ifwanSfType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 142), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("demodulator", 1), ("modulator", 2), ("expansion", 3), ("agregate", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSfType.setStatus('mandatory')
ifwanSfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSfMode.setStatus('mandatory')
ifwanSfCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 2, 2, 1, 144), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifwanSfCarrierId.setStatus('mandatory')
ifvceNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifvceNumber.setStatus('mandatory')
ifvceTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2), )
if mibBuilder.loadTexts: ifvceTable.setStatus('mandatory')
ifvceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ifvceIndex"))
if mibBuilder.loadTexts: ifvceEntry.setStatus('mandatory')
ifvceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifvceIndex.setStatus('mandatory')
ifvceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifvceDesc.setStatus('mandatory')
ifvceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 21, 22, 23, 24, 26, 30, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("acelp-8-kbs", 21), ("acelp-4-8-kbs", 22), ("pcm64k", 23), ("adpcm32k", 24), ("atc16k", 26), ("acelp-cn", 30), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceProtocol.setStatus('mandatory')
ifvceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("fxs", 1), ("fx0", 2), ("e-and-m", 3), ("ac15", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceInterface.setStatus('mandatory')
ifvceRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRemotePort.setStatus('mandatory')
ifvceActivationType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("predefined", 1), ("switched", 2), ("autodial", 3), ("broadcast", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceActivationType.setStatus('mandatory')
ifvceRemoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRemoteUnit.setStatus('mandatory')
ifvceHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("a", 2), ("b", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceHuntGroup.setStatus('mandatory')
ifvceToneDetectRegen_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setLabel("ifvceToneDetectRegen-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceToneDetectRegen_s.setStatus('mandatory')
ifvcePulseMakeBreak_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 80))).setLabel("ifvcePulseMakeBreak-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvcePulseMakeBreak_ms.setStatus('mandatory')
ifvceToneOn_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1000))).setLabel("ifvceToneOn-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceToneOn_ms.setStatus('mandatory')
ifvceToneOff_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1000))).setLabel("ifvceToneOff-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceToneOff_ms.setStatus('mandatory')
ifvceSilenceSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceSilenceSuppress.setStatus('mandatory')
ifvceDVCSilenceSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceDVCSilenceSuppress.setStatus('mandatory')
ifvceSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 32, 30, 254, 255))).clone(namedValues=NamedValues(("e-and-m-4w-imm-start", 1), ("e-and-m-2W-imm-start", 2), ("loop-start", 3), ("ac15-a", 4), ("ac15-c", 6), ("e-and-m-4w-timed-e", 10), ("e-and-m-2W-timed-e", 11), ("e-and-m-4W-wink-start", 12), ("e-and-m-2W-wink-start", 13), ("e-and-m-4W-delay-dial", 14), ("e-and-m-2W-delay-dial", 15), ("e-and-m-4W-colisee", 17), ("e-and-m-2W-colisee", 18), ("imm-start", 21), ("r2", 22), ("fxo", 23), ("fxs", 24), ("gnd-fxo", 25), ("gnd-fxs", 26), ("plar", 27), ("poi", 28), ("wink-start", 32), ("ab00", 30), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceSignaling.setStatus('mandatory')
ifvceLocalInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 254, 255))).clone(namedValues=NamedValues(("db-22", 1), ("db-21", 2), ("db-20", 3), ("db-19", 4), ("db-18", 5), ("db-17", 6), ("db-16", 7), ("db-15", 8), ("db-14", 9), ("db-13", 10), ("db-12", 11), ("db-11", 12), ("db-10", 13), ("db-9", 14), ("db-8", 15), ("db-7", 16), ("db-6", 17), ("db-5", 18), ("db-4", 19), ("db-3", 20), ("db-2", 21), ("db-1", 22), ("db0", 23), ("db1", 24), ("db2", 25), ("db3", 26), ("db4", 27), ("db5", 28), ("db6", 29), ("db7", 30), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceLocalInbound.setStatus('mandatory')
ifvceLocalOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 254, 255))).clone(namedValues=NamedValues(("db-22", 1), ("db-21", 2), ("db-20", 3), ("db-19", 4), ("db-18", 5), ("db-17", 6), ("db-16", 7), ("db-15", 8), ("db-14", 9), ("db-13", 10), ("db-12", 11), ("db-11", 12), ("db-10", 13), ("db-9", 14), ("db-8", 15), ("db-7", 16), ("db-6", 17), ("db-5", 18), ("db-4", 19), ("db-3", 20), ("db-2", 21), ("db-1", 22), ("db0", 23), ("db1", 24), ("db2", 25), ("db3", 26), ("db4", 27), ("db5", 28), ("db6", 29), ("db7", 30), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceLocalOutbound.setStatus('mandatory')
ifvceDVCLocalInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 254, 255))).clone(namedValues=NamedValues(("db-12", 9), ("db-11", 10), ("db-10", 11), ("db-9", 12), ("db-8", 13), ("db-7", 14), ("db-6", 15), ("db-5", 16), ("db-4", 17), ("db-3", 18), ("db-2", 19), ("db-1", 20), ("db0", 21), ("db1", 22), ("db2", 23), ("db3", 24), ("db4", 25), ("db5", 26), ("db6", 27), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceDVCLocalInbound.setStatus('mandatory')
ifvceDVCLocalOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 254, 255))).clone(namedValues=NamedValues(("db-12", 9), ("db-11", 10), ("db-10", 11), ("db-9", 12), ("db-8", 13), ("db-7", 14), ("db-6", 15), ("db-5", 16), ("db-4", 17), ("db-3", 18), ("db-2", 19), ("db-1", 20), ("db0", 21), ("db1", 22), ("db2", 23), ("db3", 24), ("db4", 25), ("db5", 26), ("db6", 27), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceDVCLocalOutbound.setStatus('mandatory')
ifvceFaxModemRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("none", 1), ("fax", 2), ("both", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceFaxModemRelay.setStatus('mandatory')
ifvceMaxFaxModemRate = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("rate-14400", 1), ("rate-12000", 2), ("rate-9600", 3), ("rate-7200", 4), ("rate-4800", 5), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceMaxFaxModemRate.setStatus('mandatory')
ifvceFxoTimeout_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setLabel("ifvceFxoTimeout-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceFxoTimeout_s.setStatus('mandatory')
ifvceTeTimer_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setLabel("ifvceTeTimer-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceTeTimer_s.setStatus('mandatory')
ifvceFwdDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("ext", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceFwdDigits.setStatus('mandatory')
ifvceFwdType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("tone", 1), ("pulse", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceFwdType.setStatus('mandatory')
ifvceFwdDelay_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setLabel("ifvceFwdDelay-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceFwdDelay_ms.setStatus('mandatory')
ifvceDelDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceDelDigits.setStatus('mandatory')
ifvceExtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceExtNumber.setStatus('mandatory')
ifvceLinkDwnBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("broadcast", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceLinkDwnBusy.setStatus('mandatory')
ifvceToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 254, 255))).clone(namedValues=NamedValues(("dtmf", 0), ("mf", 1), ("r2", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceToneType.setStatus('mandatory')
ifvceRate8kx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate8kx1.setStatus('mandatory')
ifvceRate8kx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate8kx2.setStatus('mandatory')
ifvceRate5k8x1 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate5k8x1.setStatus('mandatory')
ifvceRate5k8x2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate5k8x2.setStatus('mandatory')
ifvceBroadcastDir = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("tX", 1), ("rX", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceBroadcastDir.setStatus('mandatory')
ifvceBroadcastPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceBroadcastPvc.setStatus('mandatory')
ifvceAnalogLinkDwnBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("broadcast", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceAnalogLinkDwnBusy.setStatus('mandatory')
ifvceSpeedDialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceSpeedDialNum.setStatus('mandatory')
ifvceR2ExtendedDigitSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("map", 1), ("user", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceR2ExtendedDigitSrc.setStatus('mandatory')
ifvceR2Group2Digit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceR2Group2Digit.setStatus('mandatory')
ifvceR2CompleteDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceR2CompleteDigit.setStatus('mandatory')
ifvceR2BusyDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceR2BusyDigit.setStatus('mandatory')
ifvceRate8kx3 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate8kx3.setStatus('mandatory')
ifvceRate6kx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate6kx1.setStatus('mandatory')
ifvceRate6kx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate6kx2.setStatus('mandatory')
ifvceRate6kx3 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate6kx3.setStatus('mandatory')
ifvceRate4k8x1 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate4k8x1.setStatus('mandatory')
ifvceRate4k8x2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceRate4k8x2.setStatus('mandatory')
ifvceDTalkThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 26, 254, 255))).clone(namedValues=NamedValues(("db-12", 8), ("db-11", 9), ("db-10", 10), ("db-9", 11), ("db-8", 12), ("db-7", 13), ("db-6", 14), ("db-5", 15), ("db-4", 16), ("db-3", 17), ("db-2", 18), ("db-1", 19), ("db0", 20), ("db1", 21), ("db2", 22), ("db3", 23), ("db4", 24), ("db5", 25), ("db6", 1), ("db7", 2), ("db8", 3), ("db9", 4), ("db10", 5), ("db11", 6), ("db12", 7), ("disabled", 26), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceDTalkThreshold.setStatus('mandatory')
ifvceToneEnergyDetec = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceToneEnergyDetec.setStatus('mandatory')
ifvceExtendedDigitSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("map", 1), ("user", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceExtendedDigitSrc.setStatus('mandatory')
ifvceDtmfOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceDtmfOnTime.setStatus('mandatory')
ifvceEnableDtmfOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 18, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifvceEnableDtmfOnTime.setStatus('mandatory')
iflanNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iflanNumber.setStatus('mandatory')
iflanTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2), )
if mibBuilder.loadTexts: iflanTable.setStatus('mandatory')
iflanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "iflanIndex"))
if mibBuilder.loadTexts: iflanEntry.setStatus('mandatory')
iflanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iflanIndex.setStatus('mandatory')
iflanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iflanDesc.setStatus('mandatory')
iflanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 13, 14, 15, 16, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("token-ring", 13), ("ethernet-auto", 14), ("ethernet-802p3", 15), ("ethernet-v2", 16), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanProtocol.setStatus('mandatory')
iflanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("tr-4-Mbps", 1), ("tr-16-Mbps", 2), ("eth-10-Mbps", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanSpeed.setStatus('mandatory')
iflanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iflanPriority.setStatus('mandatory')
iflanCost = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iflanCost.setStatus('mandatory')
iflanPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanPhysAddr.setStatus('mandatory')
iflanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpAddress.setStatus('mandatory')
iflanSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanSubnetMask.setStatus('mandatory')
iflanMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanMaxFrame.setStatus('mandatory')
iflanEth_LinkIntegrity = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setLabel("iflanEth-LinkIntegrity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanEth_LinkIntegrity.setStatus('mandatory')
iflanTr_Monitor = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setLabel("iflanTr-Monitor").setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanTr_Monitor.setStatus('mandatory')
iflanTr_Etr = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setLabel("iflanTr-Etr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanTr_Etr.setStatus('mandatory')
iflanTr_RingNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setLabel("iflanTr-RingNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanTr_RingNumber.setStatus('mandatory')
iflanIpRip = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("v1", 2), ("v2-broadcast", 3), ("v2-multicast", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpRip.setStatus('mandatory')
iflanIpxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpxRip.setStatus('mandatory')
iflanIpxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpxSap.setStatus('mandatory')
iflanIpxNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpxNetNum.setStatus('mandatory')
iflanIpxLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("ethernet-802p2", 1), ("ethernet-snap", 2), ("ethernet-802p3", 3), ("ethernet-ii", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpxLanType.setStatus('mandatory')
iflanOspfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfEnable.setStatus('mandatory')
iflanOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfAreaId.setStatus('mandatory')
iflanOspfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfPriority.setStatus('mandatory')
iflanOspfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfTransitDelay.setStatus('mandatory')
iflanOspfRetransmitInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfRetransmitInt.setStatus('mandatory')
iflanOspfHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfHelloInt.setStatus('mandatory')
iflanOspfDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfDeadInt.setStatus('mandatory')
iflanOspfPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfPassword.setStatus('mandatory')
iflanOspfMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanOspfMetricCost.setStatus('mandatory')
iflanIpRipTxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("duplex", 1), ("tx-only", 2), ("rx-only", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpRipTxRx.setStatus('mandatory')
iflanIpRipAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpRipAuthType.setStatus('mandatory')
iflanIpRipPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 3, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iflanIpRipPassword.setStatus('mandatory')
puNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puNumber.setStatus('mandatory')
puTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2), )
if mibBuilder.loadTexts: puTable.setStatus('mandatory')
puEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "puIndex"))
if mibBuilder.loadTexts: puEntry.setStatus('mandatory')
puIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puIndex.setStatus('mandatory')
puMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("sdlc-llc", 2), ("sdlc-sdlc", 3), ("sdlc-dlsw", 4), ("sdlc-links", 5), ("llc-dlsw", 6), ("llc-links", 7), ("dlsw-links", 8), ("sdlc-ban", 9), ("sdlc-bnn", 10), ("llc-ban", 11), ("llc-bnn", 12), ("dlsw-ban", 13), ("dlsw-bnn", 14), ("ban-link", 15), ("bnn-link", 16), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puMode.setStatus('mandatory')
puActive = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puActive.setStatus('mandatory')
puDelayBeforeConn_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setLabel("puDelayBeforeConn-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: puDelayBeforeConn_s.setStatus('mandatory')
puRole = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("secondary", 1), ("primary", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puRole.setStatus('mandatory')
puSdlcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcPort.setStatus('mandatory')
puSdlcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcAddress.setStatus('mandatory')
puSdlcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcPort2.setStatus('mandatory')
puSdlcAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcAddress2.setStatus('mandatory')
puSdlcTimeout_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 30000))).setLabel("puSdlcTimeout-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcTimeout_ms.setStatus('mandatory')
puSdlcRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcRetry.setStatus('mandatory')
puSdlcWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcWindow.setStatus('mandatory')
puSdlcMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puSdlcMaxFrame.setStatus('mandatory')
puLlcDa = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcDa.setStatus('mandatory')
puLlcTr_Routing = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("trsp", 1), ("src", 2), ("not-applicable", 254), ("not-available", 255)))).setLabel("puLlcTr-Routing").setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcTr_Routing.setStatus('mandatory')
puLlcSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcSsap.setStatus('mandatory')
puLlcDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcDsap.setStatus('mandatory')
puLlcTimeout_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 30000))).setLabel("puLlcTimeout-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcTimeout_ms.setStatus('mandatory')
puLlcRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcRetry.setStatus('mandatory')
puLlcWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcWindow.setStatus('mandatory')
puLlcDynamicWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcDynamicWindow.setStatus('mandatory')
puLlcMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLlcMaxFrame.setStatus('mandatory')
puDlsDa = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puDlsDa.setStatus('mandatory')
puDlsSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puDlsSsap.setStatus('mandatory')
puDlsDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puDlsDsap.setStatus('mandatory')
puDlsIpSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puDlsIpSrc.setStatus('mandatory')
puDlsIpDst = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puDlsIpDst.setStatus('mandatory')
puDlsMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puDlsMaxFrame.setStatus('mandatory')
puLinkRemoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLinkRemoteUnit.setStatus('mandatory')
puLinkClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLinkClassNumber.setStatus('mandatory')
puLinkRemPu = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puLinkRemPu.setStatus('mandatory')
puXid = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("manual", 3), ("auto", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puXid.setStatus('mandatory')
puXidId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puXidId.setStatus('mandatory')
puXidFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puXidFormat.setStatus('mandatory')
puXidPuType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puXidPuType.setStatus('mandatory')
puBnnPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBnnPvc.setStatus('mandatory')
puBnnFid = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("fID2", 1), ("fID4", 2), ("aPPN", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBnnFid.setStatus('mandatory')
puBanDa = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanDa.setStatus('mandatory')
puBanBnnSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanBnnSsap.setStatus('mandatory')
puBanBnnDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanBnnDsap.setStatus('mandatory')
puBanBnnTimeout_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 30000))).setLabel("puBanBnnTimeout-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanBnnTimeout_ms.setStatus('mandatory')
puBanBnnRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanBnnRetry.setStatus('mandatory')
puBanBnnWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanBnnWindow.setStatus('mandatory')
puBanBnnNw = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanBnnNw.setStatus('mandatory')
puBanBnnMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanBnnMaxFrame.setStatus('mandatory')
puBanRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 4, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("transparent", 1), ("source", 2), ("source-a", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puBanRouting.setStatus('mandatory')
scheduleNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scheduleNumber.setStatus('mandatory')
scheduleTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2), )
if mibBuilder.loadTexts: scheduleTable.setStatus('mandatory')
scheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "schedulePeriod"))
if mibBuilder.loadTexts: scheduleEntry.setStatus('mandatory')
schedulePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulePeriod.setStatus('mandatory')
scheduleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleEnable.setStatus('mandatory')
scheduleDay = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 254, 255))).clone(namedValues=NamedValues(("all", 1), ("sunday", 2), ("monday", 3), ("tuesday", 4), ("wednesday", 5), ("thursday", 6), ("friday", 7), ("saturday", 8), ("workday", 9), ("weekend", 10), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleDay.setStatus('mandatory')
scheduleBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleBeginTime.setStatus('mandatory')
scheduleEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleEndTime.setStatus('mandatory')
schedulePort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort1.setStatus('mandatory')
schedulePort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort2.setStatus('mandatory')
schedulePort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort3.setStatus('mandatory')
schedulePort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort4.setStatus('mandatory')
schedulePort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort5.setStatus('mandatory')
schedulePort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort6.setStatus('mandatory')
schedulePort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort7.setStatus('mandatory')
schedulePort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("inactive", 1), ("dedicated", 2), ("answer", 3), ("call-backup", 4), ("call-bod", 5), ("wait-user", 6), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePort8.setStatus('mandatory')
bridgeEnable = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEnable.setStatus('mandatory')
bridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpEnable.setStatus('mandatory')
bridgeLanType = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("ethernet-auto", 1), ("ethernet-802p3", 2), ("ethernet-v2", 3), ("token-ring", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeLanType.setStatus('mandatory')
bridgeAgingTime_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setLabel("bridgeAgingTime-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAgingTime_s.setStatus('mandatory')
bridgeHelloTime_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("bridgeHelloTime-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeHelloTime_s.setStatus('mandatory')
bridgeMaxAge_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setLabel("bridgeMaxAge-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeMaxAge_s.setStatus('mandatory')
bridgeForwardDelay_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setLabel("bridgeForwardDelay-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeForwardDelay_s.setStatus('mandatory')
bridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePriority.setStatus('mandatory')
bridgeTr_Number = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setLabel("bridgeTr-Number").setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTr_Number.setStatus('mandatory')
bridgeTr_SteSpan = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("auto", 1), ("disable", 2), ("forced", 3), ("not-applicable", 254), ("not-available", 255)))).setLabel("bridgeTr-SteSpan").setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTr_SteSpan.setStatus('mandatory')
bridgeTr_MaxHop = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setLabel("bridgeTr-MaxHop").setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTr_MaxHop.setStatus('mandatory')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneNumber.setStatus('mandatory')
phoneTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 2), )
if mibBuilder.loadTexts: phoneTable.setStatus('mandatory')
phoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "phoneIndex"))
if mibBuilder.loadTexts: phoneEntry.setStatus('mandatory')
phoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneIndex.setStatus('mandatory')
phoneRemoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneRemoteUnit.setStatus('mandatory')
phonePhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phonePhoneNumber.setStatus('mandatory')
phoneNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNextHop.setStatus('mandatory')
phoneCost = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneCost.setStatus('mandatory')
filterNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterNumber.setStatus('mandatory')
filterTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 8, 2), )
if mibBuilder.loadTexts: filterTable.setStatus('mandatory')
filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 8, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "filterIndex"))
if mibBuilder.loadTexts: filterEntry.setStatus('mandatory')
filterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterIndex.setStatus('mandatory')
filterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterActive.setStatus('mandatory')
filterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 8, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDefinition.setStatus('mandatory')
classNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNumber.setStatus('mandatory')
classDefaultClass = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classDefaultClass.setStatus('mandatory')
classTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 9, 3), )
if mibBuilder.loadTexts: classTable.setStatus('mandatory')
classEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 9, 3, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "classIndex"))
if mibBuilder.loadTexts: classEntry.setStatus('mandatory')
classIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classIndex.setStatus('mandatory')
classWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classWeight.setStatus('mandatory')
classPrefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 9, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classPrefRoute.setStatus('mandatory')
pvcNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcNumber.setStatus('mandatory')
pvcTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2), )
if mibBuilder.loadTexts: pvcTable.setStatus('mandatory')
pvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "pvcIndex"))
if mibBuilder.loadTexts: pvcEntry.setStatus('mandatory')
pvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIndex.setStatus('mandatory')
pvcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("pvcr", 2), ("multiplex", 3), ("transp", 4), ("rfc-1490", 5), ("fp", 7), ("broadcast", 8), ("fp-multiplex", 9), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMode.setStatus('mandatory')
pvcDlciAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDlciAddress.setStatus('mandatory')
pvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcPort.setStatus('mandatory')
pvcUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUserPort.setStatus('mandatory')
pvcInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcInfoRate.setStatus('mandatory')
pvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPriority.setStatus('mandatory')
pvcCost = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCost.setStatus('mandatory')
pvcRemoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRemoteUnit.setStatus('mandatory')
pvcTimeout_ms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 30000))).setLabel("pvcTimeout-ms").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcTimeout_ms.setStatus('mandatory')
pvcRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRetry.setStatus('mandatory')
pvcCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcCompression.setStatus('mandatory')
pvcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpAddress.setStatus('mandatory')
pvcSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSubnetMask.setStatus('mandatory')
pvcMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMaxFrame.setStatus('mandatory')
pvcBroadcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBroadcastGroup.setStatus('mandatory')
pvcBrgConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBrgConnection.setStatus('mandatory')
pvcIpConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpConnection.setStatus('mandatory')
pvcRemotePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRemotePvc.setStatus('mandatory')
pvcPvcClass = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcPvcClass.setStatus('mandatory')
pvcNetworkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcNetworkPort.setStatus('mandatory')
pvcRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRingNumber.setStatus('mandatory')
pvcIpRip = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("v1", 2), ("v2-broadcast", 3), ("v2-multicast", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpRip.setStatus('mandatory')
pvcBurstInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBurstInfoRate.setStatus('mandatory')
pvcUserDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUserDlci.setStatus('mandatory')
pvcNetworkDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcNetworkDlci.setStatus('mandatory')
pvcIpxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpxRip.setStatus('mandatory')
pvcIpxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpxSap.setStatus('mandatory')
pvcIpxNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpxNetNum.setStatus('mandatory')
pvcIpxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpxConnection.setStatus('mandatory')
pvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("dedicated", 2), ("answer", 3), ("call-backup", 4), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcType.setStatus('mandatory')
pvcBackupCall_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("pvcBackupCall-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackupCall_s.setStatus('mandatory')
pvcBackupHang_s = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("pvcBackupHang-s").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackupHang_s.setStatus('mandatory')
pvcBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 16, 254, 255))).clone(namedValues=NamedValues(("any", 15), ("all", 16), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackup.setStatus('mandatory')
pvcOspfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfEnable.setStatus('mandatory')
pvcOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 38), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfAreaId.setStatus('mandatory')
pvcOspfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfTransitDelay.setStatus('mandatory')
pvcOspfRetransmitInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfRetransmitInt.setStatus('mandatory')
pvcOspfHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfHelloInt.setStatus('mandatory')
pvcOspfDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfDeadInt.setStatus('mandatory')
pvcOspfPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfPassword.setStatus('mandatory')
pvcOspfMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOspfMetricCost.setStatus('mandatory')
pvcProxyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcProxyAddr.setStatus('mandatory')
pvcLlcConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLlcConnection.setStatus('mandatory')
pvcDialTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDialTimeout.setStatus('mandatory')
pvcMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMaxChannels.setStatus('mandatory')
pvcHuntForwardingAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcHuntForwardingAUnit.setStatus('mandatory')
pvcHuntForwardingBUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcHuntForwardingBUnit.setStatus('mandatory')
pvcRemoteFpUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRemoteFpUnit.setStatus('mandatory')
pvcIpRipTxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("duplex", 1), ("tx-only", 2), ("rx-only", 3), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpRipTxRx.setStatus('mandatory')
pvcIpRipAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpRipAuthType.setStatus('mandatory')
pvcIpRipPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 10, 2, 1, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIpRipPassword.setStatus('mandatory')
ipxRouterEnable = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouterEnable.setStatus('mandatory')
ipxInternalNetNum = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInternalNetNum.setStatus('mandatory')
ipRouterEnable = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterEnable.setStatus('mandatory')
bootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpEnable.setStatus('mandatory')
bootpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 33, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpMaxHops.setStatus('mandatory')
bootpIpDestAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 33, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIpDestAddr1.setStatus('mandatory')
bootpIpDestAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 33, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIpDestAddr2.setStatus('mandatory')
bootpIpDestAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 33, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIpDestAddr3.setStatus('mandatory')
bootpIpDestAddr4 = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 33, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIpDestAddr4.setStatus('mandatory')
timepTimeZoneSign = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepTimeZoneSign.setStatus('mandatory')
timepTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepTimeZone.setStatus('mandatory')
timepDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepDaylightSaving.setStatus('mandatory')
timepServerProtocol = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("udp", 2), ("tcp", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepServerProtocol.setStatus('mandatory')
timepClientProtocol = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("udp", 2), ("tcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepClientProtocol.setStatus('mandatory')
timepServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepServerIpAddress.setStatus('mandatory')
timepClientUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepClientUpdateInterval.setStatus('mandatory')
timepClientUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepClientUdpTimeout.setStatus('mandatory')
timepClientUdpRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepClientUdpRetransmissions.setStatus('mandatory')
timepGetServerTimeNow = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 35, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timepGetServerTimeNow.setStatus('mandatory')
ipstaticNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstaticNumber.setStatus('mandatory')
ipstaticTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 2), )
if mibBuilder.loadTexts: ipstaticTable.setStatus('mandatory')
ipstaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ipstaticIndex"))
if mibBuilder.loadTexts: ipstaticEntry.setStatus('mandatory')
ipstaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstaticIndex.setStatus('mandatory')
ipstaticValid = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipstaticValid.setStatus('mandatory')
ipstaticIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipstaticIpDest.setStatus('mandatory')
ipstaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipstaticMask.setStatus('mandatory')
ipstaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 13, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipstaticNextHop.setStatus('mandatory')
ospfGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 1))
ospfArea = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2))
ospfRange = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3))
ospfVLink = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4))
ospfGlobalRouterId = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfGlobalRouterId.setStatus('mandatory')
ospfGlobalAutoVLink = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfGlobalAutoVLink.setStatus('mandatory')
ospfGlobalRackAreaId = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfGlobalRackAreaId.setStatus('mandatory')
ospfGlobalGlobalAreaId = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfGlobalGlobalAreaId.setStatus('mandatory')
ospfAreaNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNumber.setStatus('mandatory')
ospfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2), )
if mibBuilder.loadTexts: ospfAreaTable.setStatus('mandatory')
ospfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ospfAreaIndex"))
if mibBuilder.loadTexts: ospfAreaEntry.setStatus('mandatory')
ospfAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIndex.setStatus('mandatory')
ospfAreaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAreaAreaId.setStatus('mandatory')
ospfAreaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAreaEnable.setStatus('mandatory')
ospfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAreaAuthType.setStatus('mandatory')
ospfAreaImportASExt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAreaImportASExt.setStatus('mandatory')
ospfAreaStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAreaStubMetric.setStatus('mandatory')
ospfRangeNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeNumber.setStatus('mandatory')
ospfRangeTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2), )
if mibBuilder.loadTexts: ospfRangeTable.setStatus('mandatory')
ospfRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ospfRangeIndex"))
if mibBuilder.loadTexts: ospfRangeEntry.setStatus('mandatory')
ospfRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeIndex.setStatus('mandatory')
ospfRangeNet = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRangeNet.setStatus('mandatory')
ospfRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRangeMask.setStatus('mandatory')
ospfRangeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRangeEnable.setStatus('mandatory')
ospfRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("don-t-adv", 1), ("advertise", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRangeStatus.setStatus('mandatory')
ospfRangeAddToArea = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 3, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRangeAddToArea.setStatus('mandatory')
ospfVLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVLinkNumber.setStatus('mandatory')
ospfVLinkTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2), )
if mibBuilder.loadTexts: ospfVLinkTable.setStatus('mandatory')
ospfVLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ospfVLinkIndex"))
if mibBuilder.loadTexts: ospfVLinkEntry.setStatus('mandatory')
ospfVLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVLinkIndex.setStatus('mandatory')
ospfVLinkTransitAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkTransitAreaId.setStatus('mandatory')
ospfVLinkNeighborRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkNeighborRtrId.setStatus('mandatory')
ospfVLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkEnable.setStatus('mandatory')
ospfVLinkTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkTransitDelay.setStatus('mandatory')
ospfVLinkRetransmitInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkRetransmitInt.setStatus('mandatory')
ospfVLinkHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkHelloInt.setStatus('mandatory')
ospfVLinkDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkDeadInt.setStatus('mandatory')
ospfVLinkPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 15, 4, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfVLinkPassword.setStatus('mandatory')
ipxfilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxfilterNumber.setStatus('mandatory')
ipxfilterTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 16, 2), )
if mibBuilder.loadTexts: ipxfilterTable.setStatus('mandatory')
ipxfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 16, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "ipxfilterIndex"))
if mibBuilder.loadTexts: ipxfilterEntry.setStatus('mandatory')
ipxfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxfilterIndex.setStatus('mandatory')
ipxfilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxfilterEnable.setStatus('mandatory')
ipxfilterSap = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 16, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxfilterSap.setStatus('mandatory')
ipxfilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("reverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxfilterType.setStatus('mandatory')
statAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1), )
if mibBuilder.loadTexts: statAlarmTable.setStatus('mandatory')
statAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statAlarmIndex"))
if mibBuilder.loadTexts: statAlarmEntry.setStatus('mandatory')
statAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmIndex.setStatus('mandatory')
statAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmDesc.setStatus('mandatory')
statAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmDate.setStatus('mandatory')
statAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmTime.setStatus('mandatory')
statAlarmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmModule.setStatus('mandatory')
statAlarmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmAlarm.setStatus('mandatory')
statAlarmArg = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmArg.setStatus('mandatory')
statIfwanTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2), )
if mibBuilder.loadTexts: statIfwanTable.setStatus('mandatory')
statIfwanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statIfwanIndex"))
if mibBuilder.loadTexts: statIfwanEntry.setStatus('mandatory')
statIfwanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanIndex.setStatus('mandatory')
statIfwanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanDesc.setStatus('mandatory')
statIfwanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 24, 27, 28, 29, 254, 255))).clone(namedValues=NamedValues(("off", 1), ("p-sdlc", 2), ("s-sdlc", 3), ("hdlc", 4), ("ddcmp", 5), ("t-async", 6), ("r-async", 7), ("bsc", 8), ("cop", 9), ("pvcr", 10), ("passthru", 11), ("console", 12), ("fr-net", 17), ("fr-user", 18), ("ppp", 19), ("e1-trsp", 24), ("isdn-bri", 27), ("g703", 28), ("x25", 29), ("not-applicable", 254), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanProtocol.setStatus('mandatory')
statIfwanInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanInterface.setStatus('mandatory')
statIfwanModemSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanModemSignal.setStatus('mandatory')
statIfwanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanSpeed.setStatus('mandatory')
statIfwanState = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanState.setStatus('mandatory')
statIfwanMeanTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanMeanTx.setStatus('mandatory')
statIfwanMeanRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanMeanRx.setStatus('mandatory')
statIfwanPeakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanPeakTx.setStatus('mandatory')
statIfwanPeakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanPeakRx.setStatus('mandatory')
statIfwanBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanBadFrames.setStatus('mandatory')
statIfwanBadFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanBadFlags.setStatus('mandatory')
statIfwanUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanUnderruns.setStatus('mandatory')
statIfwanRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanRetries.setStatus('mandatory')
statIfwanRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanRestart.setStatus('mandatory')
statIfwanFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanFramesTx.setStatus('mandatory')
statIfwanFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanFramesRx.setStatus('mandatory')
statIfwanOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanOctetsTx.setStatus('mandatory')
statIfwanOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanOctetsRx.setStatus('mandatory')
statIfwanOvrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanOvrFrames.setStatus('mandatory')
statIfwanBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanBadOctets.setStatus('mandatory')
statIfwanOvrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanOvrOctets.setStatus('mandatory')
statIfwanT1E1ESS = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1ESS.setStatus('mandatory')
statIfwanT1E1SES = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1SES.setStatus('mandatory')
statIfwanT1E1SEF = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1SEF.setStatus('mandatory')
statIfwanT1E1UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1UAS.setStatus('mandatory')
statIfwanT1E1CSS = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1CSS.setStatus('mandatory')
statIfwanT1E1PCV = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1PCV.setStatus('mandatory')
statIfwanT1E1LES = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1LES.setStatus('mandatory')
statIfwanT1E1BES = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1BES.setStatus('mandatory')
statIfwanT1E1DM = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1DM.setStatus('mandatory')
statIfwanT1E1LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanT1E1LCV.setStatus('mandatory')
statIfwanCompErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanCompErrs.setStatus('mandatory')
statIfwanChOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanChOverflows.setStatus('mandatory')
statIfwanChAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanChAborts.setStatus('mandatory')
statIfwanChSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanChSeqErrs.setStatus('mandatory')
statIfwanDropInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanDropInsert.setStatus('mandatory')
statIfwanTrspState = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanTrspState.setStatus('mandatory')
statIfwanTrspLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanTrspLastError.setStatus('mandatory')
statIfwanQ922State = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 2, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfwanQ922State.setStatus('mandatory')
statIflanTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3), )
if mibBuilder.loadTexts: statIflanTable.setStatus('mandatory')
statIflanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statIflanIndex"))
if mibBuilder.loadTexts: statIflanEntry.setStatus('mandatory')
statIflanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanIndex.setStatus('mandatory')
statIflanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 13, 14, 15, 16))).clone(namedValues=NamedValues(("off", 1), ("token-ring", 13), ("ethernet-auto", 14), ("ethernet-802p3", 15), ("ethernet-v2", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanProtocol.setStatus('mandatory')
statIflanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tr-4-Mbps", 1), ("tr-16-Mbps", 2), ("eth-10-Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanSpeed.setStatus('mandatory')
statIflanConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanConnectionStatus.setStatus('mandatory')
statIflanOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanOperatingMode.setStatus('mandatory')
statIflanEth_Interface = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 6), DisplayString()).setLabel("statIflanEth-Interface").setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEth_Interface.setStatus('mandatory')
statIflanMeanTx_kbps = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 7), Gauge32()).setLabel("statIflanMeanTx-kbps").setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanMeanTx_kbps.setStatus('mandatory')
statIflanMeanRx_kbps = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 8), Gauge32()).setLabel("statIflanMeanRx-kbps").setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanMeanRx_kbps.setStatus('mandatory')
statIflanPeakTx_kbps = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 9), Gauge32()).setLabel("statIflanPeakTx-kbps").setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanPeakTx_kbps.setStatus('mandatory')
statIflanPeakRx_kbps = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 10), Gauge32()).setLabel("statIflanPeakRx-kbps").setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanPeakRx_kbps.setStatus('mandatory')
statIflanRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanRetries.setStatus('mandatory')
statIflanBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanBadFrames.setStatus('mandatory')
statIflanBadFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanBadFlags.setStatus('mandatory')
statIflanTrReceiveCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanTrReceiveCongestion.setStatus('mandatory')
statIflanEthOneCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthOneCollision.setStatus('mandatory')
statIflanEthTwoCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthTwoCollisions.setStatus('mandatory')
statIflanEthThreeAndMoreCol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthThreeAndMoreCol.setStatus('mandatory')
statIflanEthDeferredTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthDeferredTrans.setStatus('mandatory')
statIflanEthExcessiveCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthExcessiveCollision.setStatus('mandatory')
statIflanEthLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthLateCollision.setStatus('mandatory')
statIflanEthFrameCheckSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthFrameCheckSeq.setStatus('mandatory')
statIflanEthAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthAlign.setStatus('mandatory')
statIflanEthCarrierSense = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIflanEthCarrierSense.setStatus('mandatory')
statIfvceTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10), )
if mibBuilder.loadTexts: statIfvceTable.setStatus('mandatory')
statIfvceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statIfvceIndex"))
if mibBuilder.loadTexts: statIfvceEntry.setStatus('mandatory')
statIfvceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceIndex.setStatus('mandatory')
statIfvceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceDesc.setStatus('mandatory')
statIfvceState = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 0), ("idle", 1), ("pause", 2), ("local", 3), ("online", 4), ("disconnect", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceState.setStatus('mandatory')
statIfvceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 21, 22, 23, 24, 26, 30))).clone(namedValues=NamedValues(("off", 1), ("acelp-8-kbs", 21), ("acelp-4-8-kbs", 22), ("pcm64k", 23), ("adpcm32k", 24), ("atc16k", 26), ("acelp-cn", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceProtocol.setStatus('mandatory')
statIfvceLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("incompatibility", 1), ("new-parameters", 2), ("rerouting", 3), ("state-fault", 4), ("unreachable", 5), ("disconnect", 6), ("port-closure", 7), ("no-destination", 8), ("pvc-closure", 9), ("too-many-calls", 10), ("class-mismatch", 11), ("algo-mismatch", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceLastError.setStatus('mandatory')
statIfvceFaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("fx-2-4Kbps", 1), ("fx-4-8Kbps", 2), ("fx-7-2Kbps", 3), ("fx-9-6Kbps", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceFaxRate.setStatus('mandatory')
statIfvceFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1))).clone(namedValues=NamedValues(("none", 255), ("out-of-fax", 0), ("in-fax", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceFaxMode.setStatus('mandatory')
statIfvceOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceOverruns.setStatus('mandatory')
statIfvceUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceUnderruns.setStatus('mandatory')
statIfvceDvcPortInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfvceDvcPortInUse.setStatus('mandatory')
statPuTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4), )
if mibBuilder.loadTexts: statPuTable.setStatus('mandatory')
statPuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statPuIndex"))
if mibBuilder.loadTexts: statPuEntry.setStatus('mandatory')
statPuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPuIndex.setStatus('mandatory')
statPuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("off", 1), ("sdlc-llc", 2), ("sdlc-sdlc", 3), ("sdlc-dlsw", 4), ("sdlc-links", 5), ("llc-dlsw", 6), ("llc-links", 7), ("dlsw-links", 8), ("sdlc-ban", 9), ("sdlc-bnn", 10), ("llc-ban", 11), ("llc-bnn", 12), ("dlsw-ban", 13), ("dlsw-bnn", 14), ("ban-link", 15), ("bnn-link", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPuMode.setStatus('mandatory')
statPuConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPuConnectionStatus.setStatus('mandatory')
statPuCompErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPuCompErrs.setStatus('mandatory')
statPuChOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPuChOverflows.setStatus('mandatory')
statPuChAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPuChAborts.setStatus('mandatory')
statPuChSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPuChSeqErrs.setStatus('mandatory')
statBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5))
statBridgeBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1))
statBridgePort = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2))
statBridgeBridgeAddressDiscard = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgeBridgeAddressDiscard.setStatus('mandatory')
statBridgeBridgeFrameDiscard = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgeBridgeFrameDiscard.setStatus('mandatory')
statBridgeBridgeDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgeBridgeDesignatedRoot.setStatus('mandatory')
statBridgeBridgeRootCost = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgeBridgeRootCost.setStatus('mandatory')
statBridgeBridgeRootPort = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgeBridgeRootPort.setStatus('mandatory')
statBridgeBridgeFrameFiltered = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgeBridgeFrameFiltered.setStatus('mandatory')
statBridgeBridgeFrameTimeout = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgeBridgeFrameTimeout.setStatus('mandatory')
statBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1), )
if mibBuilder.loadTexts: statBridgePortTable.setStatus('mandatory')
statBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statBridgePortIndex"))
if mibBuilder.loadTexts: statBridgePortEntry.setStatus('mandatory')
statBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortIndex.setStatus('mandatory')
statBridgePortDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortDestination.setStatus('mandatory')
statBridgePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortState.setStatus('mandatory')
statBridgePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortDesignatedRoot.setStatus('mandatory')
statBridgePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortDesignatedCost.setStatus('mandatory')
statBridgePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortDesignatedBridge.setStatus('mandatory')
statBridgePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortDesignatedPort.setStatus('mandatory')
statBridgePortTrspFrameIn = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTrspFrameIn.setStatus('mandatory')
statBridgePortTrspFrameOut = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTrspFrameOut.setStatus('mandatory')
statBridgePortTr_SpecRteFrameIn = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 10), DisplayString()).setLabel("statBridgePortTr-SpecRteFrameIn").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_SpecRteFrameIn.setStatus('mandatory')
statBridgePortTr_SpecRteFrameOut = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 11), DisplayString()).setLabel("statBridgePortTr-SpecRteFrameOut").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_SpecRteFrameOut.setStatus('mandatory')
statBridgePortTr_AllRteFrameIn = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 12), DisplayString()).setLabel("statBridgePortTr-AllRteFrameIn").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_AllRteFrameIn.setStatus('mandatory')
statBridgePortTr_AllRteFrameOut = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 13), DisplayString()).setLabel("statBridgePortTr-AllRteFrameOut").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_AllRteFrameOut.setStatus('mandatory')
statBridgePortTr_SingleRteFrameIn = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 14), DisplayString()).setLabel("statBridgePortTr-SingleRteFrameIn").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_SingleRteFrameIn.setStatus('mandatory')
statBridgePortTr_SingleRteFrameOut = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 15), DisplayString()).setLabel("statBridgePortTr-SingleRteFrameOut").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_SingleRteFrameOut.setStatus('mandatory')
statBridgePortTr_SegmentMismatch = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 16), DisplayString()).setLabel("statBridgePortTr-SegmentMismatch").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_SegmentMismatch.setStatus('mandatory')
statBridgePortTr_SegmentDuplicate = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 17), DisplayString()).setLabel("statBridgePortTr-SegmentDuplicate").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_SegmentDuplicate.setStatus('mandatory')
statBridgePortTr_HopCntExceeded = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 18), DisplayString()).setLabel("statBridgePortTr-HopCntExceeded").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_HopCntExceeded.setStatus('mandatory')
statBridgePortTr_FrmLngExceeded = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 5, 2, 1, 1, 19), DisplayString()).setLabel("statBridgePortTr-FrmLngExceeded").setMaxAccess("readonly")
if mibBuilder.loadTexts: statBridgePortTr_FrmLngExceeded.setStatus('mandatory')
statPvcTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6), )
if mibBuilder.loadTexts: statPvcTable.setStatus('mandatory')
statPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statPvcIndex"))
if mibBuilder.loadTexts: statPvcEntry.setStatus('mandatory')
statPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcIndex.setStatus('mandatory')
statPvcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcProtocol.setStatus('mandatory')
statPvcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcMode.setStatus('mandatory')
statPvcInfoSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcInfoSignal.setStatus('mandatory')
statPvcSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcSpeed.setStatus('mandatory')
statPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcState.setStatus('mandatory')
statPvcMeanTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcMeanTx.setStatus('mandatory')
statPvcMeanRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcMeanRx.setStatus('mandatory')
statPvcPeakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcPeakTx.setStatus('mandatory')
statPvcPeakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcPeakRx.setStatus('mandatory')
statPvcError = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcError.setStatus('mandatory')
statPvcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcRestart.setStatus('mandatory')
statPvcFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcFramesTx.setStatus('mandatory')
statPvcFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcFramesRx.setStatus('mandatory')
statPvcOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcOctetsTx.setStatus('mandatory')
statPvcOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcOctetsRx.setStatus('mandatory')
statPvcBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcBadFrames.setStatus('mandatory')
statPvcOvrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcOvrFrames.setStatus('mandatory')
statPvcBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcBadOctets.setStatus('mandatory')
statPvcOvrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcOvrOctets.setStatus('mandatory')
statPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcDlci.setStatus('mandatory')
statPvcCompErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcCompErrs.setStatus('mandatory')
statPvcChOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcChOverflows.setStatus('mandatory')
statPvcChAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcChAborts.setStatus('mandatory')
statPvcChSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcChSeqErrs.setStatus('mandatory')
statPvcrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7), )
if mibBuilder.loadTexts: statPvcrRouteTable.setStatus('mandatory')
statPvcrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statPvcrRouteName"), (0, "PRESTICOM7-MIB", "statPvcrRouteNextHop"))
if mibBuilder.loadTexts: statPvcrRouteEntry.setStatus('mandatory')
statPvcrRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcrRouteName.setStatus('mandatory')
statPvcrRouteValid = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcrRouteValid.setStatus('mandatory')
statPvcrRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcrRouteMetric.setStatus('mandatory')
statPvcrRouteIntrf = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcrRouteIntrf.setStatus('mandatory')
statPvcrRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcrRouteNextHop.setStatus('mandatory')
statPvcrRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPvcrRouteAge.setStatus('mandatory')
statSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20))
statSystemAlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemAlarmNumber.setStatus('mandatory')
statSystemMeanCompRate = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemMeanCompRate.setStatus('mandatory')
statSystemMeanDecompRate = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemMeanDecompRate.setStatus('mandatory')
statSystemPeakCompRate = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemPeakCompRate.setStatus('mandatory')
statSystemPeakDecompRate = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemPeakDecompRate.setStatus('mandatory')
statSystemSa = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemSa.setStatus('mandatory')
statSystemSp = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemSp.setStatus('mandatory')
statSystemNa = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemNa.setStatus('mandatory')
statSystemBia = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemBia.setStatus('mandatory')
statSystemTr_Nan = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setLabel("statSystemTr-Nan").setMaxAccess("readonly")
if mibBuilder.loadTexts: statSystemTr_Nan.setStatus('mandatory')
statSystemResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statSystemResetCounters.setStatus('mandatory')
statSystemClearAlarms = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statSystemClearAlarms.setStatus('mandatory')
statSystemClearErrorLed = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 20, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statSystemClearErrorLed.setStatus('mandatory')
statBootp = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21))
statBootpNbRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpNbRequestReceived.setStatus('mandatory')
statBootpNbRequestSend = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpNbRequestSend.setStatus('mandatory')
statBootpNbReplyReceived = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpNbReplyReceived.setStatus('mandatory')
statBootpNbReplySend = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpNbReplySend.setStatus('mandatory')
statBootpReplyWithInvalidGiaddr = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpReplyWithInvalidGiaddr.setStatus('mandatory')
statBootpHopsLimitExceed = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpHopsLimitExceed.setStatus('mandatory')
statBootpRequestReceivedOnPortBootpc = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpRequestReceivedOnPortBootpc.setStatus('mandatory')
statBootpReplyReceivedOnPortBootpc = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpReplyReceivedOnPortBootpc.setStatus('mandatory')
statBootpInvalidOpCodeField = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpInvalidOpCodeField.setStatus('mandatory')
statBootpCannotRouteFrame = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpCannotRouteFrame.setStatus('mandatory')
statBootpFrameTooSmallToBeABootpFrame = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpFrameTooSmallToBeABootpFrame.setStatus('mandatory')
statBootpCannotReceiveAndForwardOnTheSamePort = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 21, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBootpCannotReceiveAndForwardOnTheSamePort.setStatus('mandatory')
statGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22))
statGrpNumber = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statGrpNumber.setStatus('mandatory')
statGrpTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 2), )
if mibBuilder.loadTexts: statGrpTable.setStatus('mandatory')
statGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 2, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statGrpIndex"))
if mibBuilder.loadTexts: statGrpEntry.setStatus('mandatory')
statGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statGrpIndex.setStatus('mandatory')
statGrpDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statGrpDestName.setStatus('mandatory')
statGrpOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statGrpOutOfSeqErrs.setStatus('mandatory')
statGrpSorterTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statGrpSorterTimeouts.setStatus('mandatory')
statGrpSorterOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 22, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statGrpSorterOverruns.setStatus('mandatory')
statTimep = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23))
statTimeNbFrameReceived = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeNbFrameReceived.setStatus('mandatory')
statTimeNbFrameSent = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeNbFrameSent.setStatus('mandatory')
statTimeNbRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeNbRequestReceived.setStatus('mandatory')
statTimeNbReplySent = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeNbReplySent.setStatus('mandatory')
statTimeNbRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeNbRequestSent.setStatus('mandatory')
statTimeNbReplyReceived = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeNbReplyReceived.setStatus('mandatory')
statTimeClientRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeClientRetransmissions.setStatus('mandatory')
statTimeClientSyncFailures = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeClientSyncFailures.setStatus('mandatory')
statTimeInvalidLocalIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeInvalidLocalIpAddress.setStatus('mandatory')
statTimeInvalidPortNumbers = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 23, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTimeInvalidPortNumbers.setStatus('mandatory')
statQ922counters = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24))
statTxRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxRetransmissions.setStatus('mandatory')
statReleaseIndications = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statReleaseIndications.setStatus('mandatory')
statEstablishIndications = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statEstablishIndications.setStatus('mandatory')
statLinkEstablished = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statLinkEstablished.setStatus('mandatory')
statTxIframeQdiscards = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxIframeQdiscards.setStatus('mandatory')
statRxframes = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxframes.setStatus('mandatory')
statTxframes = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxframes.setStatus('mandatory')
statRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxBytes.setStatus('mandatory')
statTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 24, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxBytes.setStatus('mandatory')
statQ922errors = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 25))
statInvalidRxSizes = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statInvalidRxSizes.setStatus('mandatory')
statMissingControlBlocks = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 25, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statMissingControlBlocks.setStatus('mandatory')
statRxAcknowledgeExpiry = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 25, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxAcknowledgeExpiry.setStatus('mandatory')
statTxAcknowledgeExpiry = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 25, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxAcknowledgeExpiry.setStatus('mandatory')
statQ933counters = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26))
statTxSetupMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxSetupMessages.setStatus('mandatory')
statRxSetupMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxSetupMessages.setStatus('mandatory')
statTxCallProceedingMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxCallProceedingMessages.setStatus('mandatory')
statRxCallProceedingMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxCallProceedingMessages.setStatus('mandatory')
statTxConnectMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxConnectMessages.setStatus('mandatory')
statRxConnectMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxConnectMessages.setStatus('mandatory')
statTxReleaseMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxReleaseMessages.setStatus('mandatory')
statRxReleaseMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxReleaseMessages.setStatus('mandatory')
statTxReleaseCompleteMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxReleaseCompleteMessages.setStatus('mandatory')
statRxReleaseCompleteMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxReleaseCompleteMessages.setStatus('mandatory')
statTxDisconnectMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxDisconnectMessages.setStatus('mandatory')
statRxDisconnectMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxDisconnectMessages.setStatus('mandatory')
statTxStatusMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxStatusMessages.setStatus('mandatory')
statRxStatusMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxStatusMessages.setStatus('mandatory')
statTxStatusEnquiryMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxStatusEnquiryMessages.setStatus('mandatory')
statRxStatusEnquiryMessages = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxStatusEnquiryMessages.setStatus('mandatory')
statProtocolTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 26, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statProtocolTimeouts.setStatus('mandatory')
statSvcTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27), )
if mibBuilder.loadTexts: statSvcTable.setStatus('mandatory')
statSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statSvcIndex"))
if mibBuilder.loadTexts: statSvcEntry.setStatus('mandatory')
statSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcIndex.setStatus('mandatory')
statSvcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcProtocol.setStatus('mandatory')
statSvcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcMode.setStatus('mandatory')
statSvcInfoSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcInfoSignal.setStatus('mandatory')
statSvcSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcSpeed.setStatus('mandatory')
statSvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcState.setStatus('mandatory')
statSvcMeanTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcMeanTx.setStatus('mandatory')
statSvcMeanRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcMeanRx.setStatus('mandatory')
statSvcPeakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcPeakTx.setStatus('mandatory')
statSvcPeakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcPeakRx.setStatus('mandatory')
statSvcError = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcError.setStatus('mandatory')
statSvcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcRestart.setStatus('mandatory')
statSvcFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcFramesTx.setStatus('mandatory')
statSvcFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcFramesRx.setStatus('mandatory')
statSvcOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcOctetsTx.setStatus('mandatory')
statSvcOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcOctetsRx.setStatus('mandatory')
statSvcBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcBadFrames.setStatus('mandatory')
statSvcOvrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcOvrFrames.setStatus('mandatory')
statSvcBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcBadOctets.setStatus('mandatory')
statSvcOvrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcOvrOctets.setStatus('mandatory')
statSvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 27, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statSvcDlci.setStatus('mandatory')
statIfcemTable = MibTable((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 28), )
if mibBuilder.loadTexts: statIfcemTable.setStatus('mandatory')
statIfcemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 28, 1), ).setIndexNames((0, "PRESTICOM7-MIB", "statIfcemIndex"))
if mibBuilder.loadTexts: statIfcemEntry.setStatus('mandatory')
statIfcemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfcemIndex.setStatus('mandatory')
statIfcemDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 28, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfcemDesc.setStatus('mandatory')
statIfcemClockState = MibTableColumn((1, 3, 6, 1, 4, 1, 727, 7, 2, 20, 28, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfcemClockState.setStatus('mandatory')
connectionDown = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,600)).setObjects(("PRESTICOM7-MIB", "puIndex"))
linkDown = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,601)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
pvcDown = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,602)).setObjects(("PRESTICOM7-MIB", "pvcIndex"))
cardDown = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,603)).setObjects(("PRESTICOM7-MIB", "sysTrapRackandPos"))
connectionUp = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,604)).setObjects(("PRESTICOM7-MIB", "puIndex"))
linkUp = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,605)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
pvcUp = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,606)).setObjects(("PRESTICOM7-MIB", "pvcIndex"))
cardup = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,607)).setObjects(("PRESTICOM7-MIB", "sysTrapRackandPos"))
periodStarted = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,608)).setObjects(("PRESTICOM7-MIB", "schedulePeriod"))
periodEnded = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,609)).setObjects(("PRESTICOM7-MIB", "schedulePeriod"))
badDestPort = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,610)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
badDestPvc = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,611)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
backupCall = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,612))
backupHang = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,613))
manualCall = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,614))
manualHang = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,615))
bondTrig = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,616))
bondDeTrig = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,617))
firmwareStored = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,618))
cfgStored = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,619))
noTrap = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,620))
fatalTrap = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,621))
notMemory = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,622))
setupReset = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,623))
badChecksum = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,624))
fatalMsg = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,625))
noMsg = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,626))
bothPsUp = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,627))
onePsDown = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,628))
bothFansUp = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,629))
oneOrMoreFanDown = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,630))
accountingFileFull = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,631))
frLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,665)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
frLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,666)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
q922Up = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,667)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
q922Down = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,668)).setObjects(("PRESTICOM7-MIB", "ifwanIndex"))
accountingFileOverflow = NotificationType((1, 3, 6, 1, 4, 1, 727) + (0,669))
tMS380C26 = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 1))
mC68EN360 = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 2))
tMS380C30 = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 3))
dP83936 = MibIdentifier((1, 3, 6, 1, 4, 1, 727, 7, 50, 4))
mibBuilder.exportSymbols("PRESTICOM7-MIB", statBridgePortTr_FrmLngExceeded=statBridgePortTr_FrmLngExceeded, sysLinkTimeout_s=sysLinkTimeout_s, puBanBnnTimeout_ms=puBanBnnTimeout_ms, ospfAreaTable=ospfAreaTable, ip=ip, ospfRangeIndex=ospfRangeIndex, statBridgePortTrspFrameIn=statBridgePortTrspFrameIn, ifwanBodCall_s=ifwanBodCall_s, ifvceRate6kx3=ifvceRate6kx3, sysRackId=sysRackId, statIflanEthFrameCheckSeq=statIflanEthFrameCheckSeq, pvcInfoRate=pvcInfoRate, statRxAcknowledgeExpiry=statRxAcknowledgeExpiry, ifwanDialer=ifwanDialer, statTxBytes=statTxBytes, statPvcrRouteEntry=statPvcrRouteEntry, ifvceRate8kx2=ifvceRate8kx2, statBridgePortTr_HopCntExceeded=statBridgePortTr_HopCntExceeded, ifwanFallBackSpeedEnable=ifwanFallBackSpeedEnable, statSvcBadFrames=statSvcBadFrames, oneOrMoreFanDown=oneOrMoreFanDown, ospfVLinkHelloInt=ospfVLinkHelloInt, mC68EN360=mC68EN360, statSystem=statSystem, ifwanBodHang_s=ifwanBodHang_s, statIfwanT1E1UAS=statIfwanT1E1UAS, intfNumber=intfNumber, statBootpHopsLimitExceed=statBootpHopsLimitExceed, statTxAcknowledgeExpiry=statTxAcknowledgeExpiry, ifvceToneOff_ms=ifvceToneOff_ms, intfType=intfType, statBridgePortDesignatedCost=statBridgePortDesignatedCost, ospfRangeEntry=ospfRangeEntry, ifwanDialTimeout_s=ifwanDialTimeout_s, ospfRangeNumber=ospfRangeNumber, iflanIpxNetNum=iflanIpxNetNum, slotPortInSlotEntry=slotPortInSlotEntry, statBridgePortTr_SingleRteFrameOut=statBridgePortTr_SingleRteFrameOut, intfSlot=intfSlot, statPvcOctetsRx=statPvcOctetsRx, ifwanHighPriorityTransparentClass=ifwanHighPriorityTransparentClass, statSystemClearAlarms=statSystemClearAlarms, schedulePort6=schedulePort6, ifwanPppPeerMruUpTo=ifwanPppPeerMruUpTo, statIflanTrReceiveCongestion=statIflanTrReceiveCongestion, ospfRangeTable=ospfRangeTable, statIfwanInterface=statIfwanInterface, puLlcWindow=puLlcWindow, ifwanMode=ifwanMode, statPvcFramesRx=statPvcFramesRx, pu=pu, filterDefinition=filterDefinition, pvcOspfRetransmitInt=pvcOspfRetransmitInt, ifvceToneOn_ms=ifvceToneOn_ms, ifvcePulseMakeBreak_ms=ifvcePulseMakeBreak_ms, ifvceFaxModemRelay=ifvceFaxModemRelay, iflanTr_Etr=iflanTr_Etr, bothFansUp=bothFansUp, ifvceRate5k8x2=ifvceRate5k8x2, statIfwanChSeqErrs=statIfwanChSeqErrs, bridgeTr_SteSpan=bridgeTr_SteSpan, statQ933counters=statQ933counters, statPvcMeanRx=statPvcMeanRx, statTimeNbReplyReceived=statTimeNbReplyReceived, statPuConnectionStatus=statPuConnectionStatus, statBridgeBridgeFrameTimeout=statBridgeBridgeFrameTimeout, statSystemPeakCompRate=statSystemPeakCompRate, puLlcRetry=puLlcRetry, bridgeAgingTime_s=bridgeAgingTime_s, intfIndex=intfIndex, iflanSubnetMask=iflanSubnetMask, ifwanIpRipPassword=ifwanIpRipPassword, ifvceAnalogLinkDwnBusy=ifvceAnalogLinkDwnBusy, connectionDown=connectionDown, proxyIpAddr=proxyIpAddr, ospfRange=ospfRange, statBridgePortTr_SegmentMismatch=statBridgePortTr_SegmentMismatch, statRxframes=statRxframes, ifwanSpeed_bps=ifwanSpeed_bps, statRxDisconnectMessages=statRxDisconnectMessages, ifwanMaxChannels=ifwanMaxChannels, sysSnmpTrapIpAddr1=sysSnmpTrapIpAddr1, statSvcPeakRx=statSvcPeakRx, ifvceEnableDtmfOnTime=ifvceEnableDtmfOnTime, ifwanFallBackSpeed_bps=ifwanFallBackSpeed_bps, badChecksum=badChecksum, ifwanOspfTransitDelay=ifwanOspfTransitDelay, ifwanCondLMIPort=ifwanCondLMIPort, pvcIpxConnection=pvcIpxConnection, statIflanBadFlags=statIflanBadFlags, ifvceLocalInbound=ifvceLocalInbound, ipxRouterEnable=ipxRouterEnable, puBanBnnMaxFrame=puBanBnnMaxFrame, statPvcTable=statPvcTable, pvcIpRip=pvcIpRip, puLinkRemoteUnit=puLinkRemoteUnit, iflanEth_LinkIntegrity=iflanEth_LinkIntegrity, pvcDown=pvcDown, statBridgePortTr_SpecRteFrameOut=statBridgePortTr_SpecRteFrameOut, statBootpCannotRouteFrame=statBootpCannotRouteFrame, ifwanIpxRip=ifwanIpxRip, statIflanEthAlign=statIflanEthAlign, statTimeNbFrameReceived=statTimeNbFrameReceived, statBootpCannotReceiveAndForwardOnTheSamePort=statBootpCannotReceiveAndForwardOnTheSamePort, sysBackplaneRipVersion=sysBackplaneRipVersion, schedulePort3=schedulePort3, statBridge=statBridge, iflanOspfRetransmitInt=iflanOspfRetransmitInt, statBridgeBridgeFrameFiltered=statBridgeBridgeFrameFiltered, statIfcemEntry=statIfcemEntry, fatalTrap=fatalTrap, firmwareStored=firmwareStored, ifwanReportCycle=ifwanReportCycle, statIfcemTable=statIfcemTable, statPvcEntry=statPvcEntry, classEntry=classEntry, ospfArea=ospfArea, pvcType=pvcType, statIfwanEntry=statIfwanEntry, ifvceSpeedDialNum=ifvceSpeedDialNum, schedule=schedule, ifwanCllm=ifwanCllm, pvcPort=pvcPort, statBootpRequestReceivedOnPortBootpc=statBootpRequestReceivedOnPortBootpc, ifwanSvcCallProceedingTimeoutT310=ifwanSvcCallProceedingTimeoutT310, ifwanClocking=ifwanClocking, statIflanEth_Interface=statIflanEth_Interface, ifwanMsn3=ifwanMsn3, sysVoiceClocking=sysVoiceClocking, ipxInternalNetNum=ipxInternalNetNum, statRxReleaseMessages=statRxReleaseMessages, ifvceR2ExtendedDigitSrc=ifvceR2ExtendedDigitSrc, statRxStatusMessages=statRxStatusMessages, ipstaticValid=ipstaticValid, statSvcDlci=statSvcDlci, ifwanEncodingLaw=ifwanEncodingLaw, proxyIpMask=proxyIpMask, statIfwanSpeed=statIfwanSpeed, ifwanTxStart=ifwanTxStart, iflanCost=iflanCost, statQ922errors=statQ922errors, fatalMsg=fatalMsg, scheduleEndTime=scheduleEndTime, ifvceBroadcastPvc=ifvceBroadcastPvc, statIfwanT1E1ESS=statIfwanT1E1ESS, ifvceDesc=ifvceDesc, pvcTable=pvcTable, ifwanGroupPoll=ifwanGroupPoll, puLlcDa=puLlcDa, statPvcrRouteMetric=statPvcrRouteMetric, phoneEntry=phoneEntry, linkDown=linkDown, ifvceFwdDelay_ms=ifvceFwdDelay_ms, ifvceToneType=ifvceToneType, phonePhoneNumber=phonePhoneNumber, statIfwanState=statIfwanState, statSystemBia=statSystemBia, statIfvceUnderruns=statIfvceUnderruns, statPuEntry=statPuEntry, statTxIframeQdiscards=statTxIframeQdiscards, ospfRangeAddToArea=ospfRangeAddToArea, puBanBnnSsap=puBanBnnSsap, sysPsMonitoring=sysPsMonitoring, statLinkEstablished=statLinkEstablished, ifvceRate8kx3=ifvceRate8kx3, pvcIpRipTxRx=pvcIpRipTxRx, iflanTr_Monitor=iflanTr_Monitor, puBanBnnWindow=puBanBnnWindow, iflanEntry=iflanEntry, phoneNextHop=phoneNextHop, statIfwanT1E1SEF=statIfwanT1E1SEF, ifvceBroadcastDir=ifvceBroadcastDir, puDelayBeforeConn_s=puDelayBeforeConn_s, ifwanEntry=ifwanEntry, statAlarmDate=statAlarmDate, statIfvceProtocol=statIfvceProtocol, ipxfilterEntry=ipxfilterEntry, sysPosIpAddr=sysPosIpAddr, proxyNumber=proxyNumber, statSvcError=statSvcError, statIfcemClockState=statIfcemClockState, ifwanT1E1Status=ifwanT1E1Status, ifwanOspfDeadInt=ifwanOspfDeadInt, pvcCost=pvcCost, ifvceRate6kx1=ifvceRate6kx1, statAlarmAlarm=statAlarmAlarm, pvcIpxSap=pvcIpxSap, statSvcSpeed=statSvcSpeed, puEntry=puEntry, statBridgePortEntry=statBridgePortEntry, statAlarmDesc=statAlarmDesc, statSystemSa=statSystemSa, ifwanIdleCode=ifwanIdleCode, ifwanLineCoding=ifwanLineCoding, setupReset=setupReset, puLinkClassNumber=puLinkClassNumber, ipaddrAddr=ipaddrAddr, statBridgePortTr_AllRteFrameOut=statBridgePortTr_AllRteFrameOut, statTimeNbRequestSent=statTimeNbRequestSent, statIfwanT1E1LES=statIfwanT1E1LES, statBridgeBridgeFrameDiscard=statBridgeBridgeFrameDiscard, statGrpSorterTimeouts=statGrpSorterTimeouts, statSvcMode=statSvcMode, ifwanLineBuild=ifwanLineBuild, puBanRouting=puBanRouting, ifvceSilenceSuppress=ifvceSilenceSuppress, ifvceRate4k8x2=ifvceRate4k8x2, statIfwanDesc=statIfwanDesc, sysName=sysName, puXidId=puXidId, pvcMaxChannels=pvcMaxChannels, presticom=presticom, bridgeForwardDelay_s=bridgeForwardDelay_s, timepGetServerTimeNow=timepGetServerTimeNow, statIfwanTrspState=statIfwanTrspState, pysmi_class=pysmi_class, sysSnmpTrapIpAddr3=sysSnmpTrapIpAddr3, sysLocation=sysLocation, intfEntry=intfEntry, ipaddr=ipaddr, statAlarmTime=statAlarmTime, ifwanSvcAddressType=ifwanSvcAddressType, statTimeNbFrameSent=statTimeNbFrameSent, statIfvceFaxRate=statIfvceFaxRate, sysClock=sysClock, ifvceLocalOutbound=ifvceLocalOutbound, badDestPort=badDestPort, sysDLCI=sysDLCI, statTxRetransmissions=statTxRetransmissions, ifwanPppSilent=ifwanPppSilent, ifvceRate4k8x1=ifvceRate4k8x1, scheduleBeginTime=scheduleBeginTime, iflan=iflan, ifwanPppAcceptIpAddress=ifwanPppAcceptIpAddress, filterActive=filterActive, statIfvceFaxMode=statIfvceFaxMode, backupCall=backupCall, ifwanIpRipAuthType=ifwanIpRipAuthType, ipstaticNextHop=ipstaticNextHop, ifwanSvcInactiveTimeoutT203=ifwanSvcInactiveTimeoutT203, ifwanFlowControl=ifwanFlowControl, bootpIpDestAddr2=bootpIpDestAddr2, puLlcSsap=puLlcSsap, statBridgeBridgeDesignatedRoot=statBridgeBridgeDesignatedRoot, ifwanPppAcceptOldIpAddNeg=ifwanPppAcceptOldIpAddNeg, ipstatic=ipstatic, ospfVLinkTransitDelay=ospfVLinkTransitDelay, ifwanPppRemoteIpAddress=ifwanPppRemoteIpAddress, ospfGlobalGlobalAreaId=ospfGlobalGlobalAreaId, schedulePeriod=schedulePeriod, pvcPriority=pvcPriority, iflanOspfAreaId=iflanOspfAreaId, puSdlcWindow=puSdlcWindow, statPvcProtocol=statPvcProtocol)
mibBuilder.exportSymbols("PRESTICOM7-MIB", statTimep=statTimep, statSvcState=statSvcState, ifvceExtNumber=ifvceExtNumber, ipaddrNr=ipaddrNr, iflanIpxRip=iflanIpxRip, statIflanMeanRx_kbps=statIflanMeanRx_kbps, ifwanFormat=ifwanFormat, statBridgePortTrspFrameOut=statBridgePortTrspFrameOut, ifwanIdle=ifwanIdle, ipxfilterNumber=ipxfilterNumber, statBridgePortDesignatedRoot=statBridgePortDesignatedRoot, ipxfilter=ipxfilter, statIfwanIndex=statIfwanIndex, proxyTrapIpAddr=proxyTrapIpAddr, classTable=classTable, statBridgePortTr_AllRteFrameIn=statBridgePortTr_AllRteFrameIn, statSvcProtocol=statSvcProtocol, timepClientUdpRetransmissions=timepClientUdpRetransmissions, puXidFormat=puXidFormat, bridgeLanType=bridgeLanType, classNumber=classNumber, statPuMode=statPuMode, sysVoiceHighestPriority=sysVoiceHighestPriority, ifvceDTalkThreshold=ifvceDTalkThreshold, puDlsDa=puDlsDa, statIfwanProtocol=statIfwanProtocol, pvcSubnetMask=pvcSubnetMask, statPvcDlci=statPvcDlci, ifwanTeiMode=ifwanTeiMode, pvcOspfEnable=pvcOspfEnable, ifwanTable=ifwanTable, timepClientUdpTimeout=timepClientUdpTimeout, puIndex=puIndex, ifwanQsigPbxAb=ifwanQsigPbxAb, ifvceToneDetectRegen_s=ifvceToneDetectRegen_s, ifwanSvcDisconnectTimeoutT305=ifwanSvcDisconnectTimeoutT305, iflanTr_RingNumber=iflanTr_RingNumber, ipaddrType=ipaddrType, mibSubVersion=mibSubVersion, ospfAreaStubMetric=ospfAreaStubMetric, proxyDefaultGateway=proxyDefaultGateway, statIfvceIndex=statIfvceIndex, statBridgePortIndex=statBridgePortIndex, statSvcFramesTx=statSvcFramesTx, bondTrig=bondTrig, puNumber=puNumber, statBridgeBridgeRootPort=statBridgeBridgeRootPort, slotSlot=slotSlot, statIfwanFramesRx=statIfwanFramesRx, ifvceR2CompleteDigit=ifvceR2CompleteDigit, statTxSetupMessages=statTxSetupMessages, statBridgePortTr_SingleRteFrameIn=statBridgePortTr_SingleRteFrameIn, ifvceRate6kx2=ifvceRate6kx2, ifwanPppAcceptableAccmChar=ifwanPppAcceptableAccmChar, q922Down=q922Down, mgmt=mgmt, ifwanBackupCall_s=ifwanBackupCall_s, product=product, ifwanBChannels=ifwanBChannels, statIflanOperatingMode=statIflanOperatingMode, ifvceDVCLocalInbound=ifvceDVCLocalInbound, statTxDisconnectMessages=statTxDisconnectMessages, statGrpDestName=statGrpDestName, pvcBrgConnection=pvcBrgConnection, ifwanTxHold_s=ifwanTxHold_s, sysDefaultIpMask=sysDefaultIpMask, ifvceActivationType=ifvceActivationType, ifwanOspfHelloInt=ifwanOspfHelloInt, iflanPriority=iflanPriority, iflanOspfPassword=iflanOspfPassword, pvcIpConnection=pvcIpConnection, statPvcRestart=statPvcRestart, statPvcInfoSignal=statPvcInfoSignal, statBootpInvalidOpCodeField=statBootpInvalidOpCodeField, ifvce=ifvce, ifwanPppAcceptAccmPeer=ifwanPppAcceptAccmPeer, ospfVLinkIndex=ospfVLinkIndex, phoneIndex=phoneIndex, statBootpNbRequestSend=statBootpNbRequestSend, ipxfilterEnable=ipxfilterEnable, statSystemClearErrorLed=statSystemClearErrorLed, ifvceDVCLocalOutbound=ifvceDVCLocalOutbound, timep=timep, pvcRemotePvc=pvcRemotePvc, phone=phone, statIflanSpeed=statIflanSpeed, statIfvceTable=statIfvceTable, statTimeInvalidLocalIpAddress=statTimeInvalidLocalIpAddress, frLinkDown=frLinkDown, statPvcOctetsTx=statPvcOctetsTx, statPvcFramesTx=statPvcFramesTx, ifvceFxoTimeout_s=ifvceFxoTimeout_s, classIndex=classIndex, statGrp=statGrp, pvcRemoteUnit=pvcRemoteUnit, statBootpNbReplyReceived=statBootpNbReplyReceived, puLinkRemPu=puLinkRemPu, ifwanPppAcceptMagicNum=ifwanPppAcceptMagicNum, sysVoiceEncoding=sysVoiceEncoding, statSystemResetCounters=statSystemResetCounters, statIfvceDesc=statIfvceDesc, pvcBackup=pvcBackup, frLinkUp=frLinkUp, slotIfIndex=slotIfIndex, intfSlotNumber=intfSlotNumber, ifwanRxFlow=ifwanRxFlow, statIfwanDropInsert=statIfwanDropInsert, statAlarmArg=statAlarmArg, iflanIpRipAuthType=iflanIpRipAuthType, ifwanPollDelay_ms=ifwanPollDelay_ms, ifwanDuplex=ifwanDuplex, pvcIpxRip=pvcIpxRip, sysHuntForwardingADLCI=sysHuntForwardingADLCI, ifvceSignaling=ifvceSignaling, statTxframes=statTxframes, accountingFileOverflow=accountingFileOverflow, statIflanTable=statIflanTable, statMissingControlBlocks=statMissingControlBlocks, statSvcIndex=statSvcIndex, ifwanPppConfigRestartTimer=ifwanPppConfigRestartTimer, iflanProtocol=iflanProtocol, manualHang=manualHang, statPvcrRouteNextHop=statPvcrRouteNextHop, statSvcOvrFrames=statSvcOvrFrames, ifvceDelDigits=ifvceDelDigits, pvcOspfAreaId=pvcOspfAreaId, bootp=bootp, statIflanRetries=statIflanRetries, sysPosId=sysPosId, ifwanIpxNetNum=ifwanIpxNetNum, ifwanDestExtNumber=ifwanDestExtNumber, intfModuleType=intfModuleType, ifwanPppConfigRetries=ifwanPppConfigRetries, pvcRetry=pvcRetry, sysSnmpTrapIpAddr4=sysSnmpTrapIpAddr4, sysHuntForwardingAUnit=sysHuntForwardingAUnit, ipstaticNumber=ipstaticNumber, statIflanMeanTx_kbps=statIflanMeanTx_kbps, ifvceHuntGroup=ifvceHuntGroup, statPvcError=statPvcError, ospfAreaEntry=ospfAreaEntry, sysAutoSaveDelay=sysAutoSaveDelay, ifwanBodLevel=ifwanBodLevel, statBridgePortDesignatedBridge=statBridgePortDesignatedBridge, statBootpNbReplySend=statBootpNbReplySend, ifwanIndex=ifwanIndex, statPvcChSeqErrs=statPvcChSeqErrs, sysPsAndFansMonitoring=sysPsAndFansMonitoring, statPvcMode=statPvcMode, statInvalidRxSizes=statInvalidRxSizes, statIfwanT1E1SES=statIfwanT1E1SES, noTrap=noTrap, iflanMaxFrame=iflanMaxFrame, statIflanEthDeferredTrans=statIflanEthDeferredTrans, ifvceMaxFaxModemRate=ifvceMaxFaxModemRate, backupHang=backupHang, statAlarmIndex=statAlarmIndex, statIflanPeakTx_kbps=statIflanPeakTx_kbps, iflanIpRip=iflanIpRip, puDlsMaxFrame=puDlsMaxFrame, bootpIpDestAddr1=bootpIpDestAddr1, sysTrapRackandPos=sysTrapRackandPos, sysSpeedDialNumLength=sysSpeedDialNumLength, ifvceInterface=ifvceInterface, pvcEntry=pvcEntry, phoneRemoteUnit=phoneRemoteUnit, ifwanMultiframing=ifwanMultiframing, ver6X_Device=ver6X_Device, pvcHuntForwardingBUnit=pvcHuntForwardingBUnit, stat=stat, statIfwanTable=statIfwanTable, sysRacksNr=sysRacksNr, statIfwanOvrOctets=statIfwanOvrOctets, statIfvceDvcPortInUse=statIfvceDvcPortInUse, pvcOspfHelloInt=pvcOspfHelloInt, puRole=puRole, pvcOspfPassword=pvcOspfPassword, statBridgePortTable=statBridgePortTable, noMsg=noMsg, ospfVLinkNeighborRtrId=ospfVLinkNeighborRtrId, ifwanSvcMaxTxTimeoutT200=ifwanSvcMaxTxTimeoutT200, statGrpOutOfSeqErrs=statGrpOutOfSeqErrs, pvcNumber=pvcNumber, bridgeEnable=bridgeEnable, statRxSetupMessages=statRxSetupMessages, pvcUserDlci=pvcUserDlci, ifwanIpRipTxRx=ifwanIpRipTxRx, pvcOspfMetricCost=pvcOspfMetricCost, ospfVLinkRetransmitInt=ospfVLinkRetransmitInt, statPvcOvrFrames=statPvcOvrFrames, statProtocolTimeouts=statProtocolTimeouts, schedulePort2=schedulePort2, ifwanTxStartCop=ifwanTxStartCop, ipaddrTable=ipaddrTable, ospfAreaIndex=ospfAreaIndex, sysRingVolt=sysRingVolt, ifwanTerminating=ifwanTerminating, ifwanT1E1LoopBack=ifwanT1E1LoopBack, puBanBnnRetry=puBanBnnRetry, timepDaylightSaving=timepDaylightSaving, ifwanOspfRetransmitInt=ifwanOspfRetransmitInt, statSystemNa=statSystemNa, puDlsIpSrc=puDlsIpSrc, mibVersionInfo=mibVersionInfo, statSvcTable=statSvcTable, sysTransitDelay_s=sysTransitDelay_s, statSvcBadOctets=statSvcBadOctets, cardup=cardup, tMS380C30=tMS380C30, dP83936=dP83936, timepServerIpAddress=timepServerIpAddress, statSvcOctetsTx=statSvcOctetsTx, statSvcFramesRx=statSvcFramesRx, badDestPvc=badDestPvc, bothPsUp=bothPsUp, ifwanPppRemoteSubnetMask=ifwanPppRemoteSubnetMask, statIfwanRestart=statIfwanRestart, bondDeTrig=bondDeTrig, iflanIpxSap=iflanIpxSap, statIfwanChAborts=statIfwanChAborts, pvcBackupHang_s=pvcBackupHang_s, timepTimeZone=timepTimeZone, sysVoiceLog=sysVoiceLog, sysAcceptLoop=sysAcceptLoop, slotPortInSlotTable=slotPortInSlotTable, ifwanNumber=ifwanNumber, bridgeTr_Number=bridgeTr_Number, ifwanSvcIframeRetransmissionsN200=ifwanSvcIframeRetransmissionsN200, ifwanCellPacketization=ifwanCellPacketization, intfSlotType=intfSlotType, ifwanChExp=ifwanChExp, timepServerProtocol=timepServerProtocol, ifwanRemotePort=ifwanRemotePort, statIfcemIndex=statIfcemIndex, iflanSpeed=iflanSpeed, schedulePort8=schedulePort8, ifvceDVCSilenceSuppress=ifvceDVCSilenceSuppress, ospfVLinkEntry=ospfVLinkEntry, pvcCompression=pvcCompression, iflanIndex=iflanIndex, cfgStored=cfgStored, sysPosNr=sysPosNr, iflanDesc=iflanDesc, statIfwanPeakRx=statIfwanPeakRx, pvcHuntForwardingAUnit=pvcHuntForwardingAUnit, ospf=ospf, ifvceTeTimer_s=ifvceTeTimer_s, statBridgePortDestination=statBridgePortDestination, statPvcOvrOctets=statPvcOvrOctets, ifwanPortToBack=ifwanPortToBack, ifwanFraming=ifwanFraming, statIfwanBadFrames=statIfwanBadFrames, statQ922counters=statQ922counters, mibSpecialVersion=mibSpecialVersion)
mibBuilder.exportSymbols("PRESTICOM7-MIB", pvcLlcConnection=pvcLlcConnection, statSystemSp=statSystemSp, sysDefaultIpAddr=sysDefaultIpAddr, statIfwanModemSignal=statIfwanModemSignal, ifwanPvcNumber=ifwanPvcNumber, statIfwanTrspLastError=statIfwanTrspLastError, iflanOspfTransitDelay=iflanOspfTransitDelay, pvcIpxNetNum=pvcIpxNetNum, puActive=puActive, statPvcPeakTx=statPvcPeakTx, ifvceProtocol=ifvceProtocol, statIfwanUnderruns=statIfwanUnderruns, statRxStatusEnquiryMessages=statRxStatusEnquiryMessages, ifwan=ifwan, ospfGlobalAutoVLink=ospfGlobalAutoVLink, statPuChOverflows=statPuChOverflows, pvcProxyAddr=pvcProxyAddr, statGrpSorterOverruns=statGrpSorterOverruns, ipxfilterTable=ipxfilterTable, classWeight=classWeight, statIflanEthThreeAndMoreCol=statIflanEthThreeAndMoreCol, proxyIndex=proxyIndex, statPvcIndex=statPvcIndex, pvcBackupCall_s=pvcBackupCall_s, statIfwanFramesTx=statIfwanFramesTx, puDlsDsap=puDlsDsap, sysJitterBuf=sysJitterBuf, ifwanPppNegociateIpAddress=ifwanPppNegociateIpAddress, statIflanEthCarrierSense=statIflanEthCarrierSense, statSvcRestart=statSvcRestart, statIfwanT1E1DM=statIfwanT1E1DM, ifwanRingNumber=ifwanRingNumber, statIfwanOvrFrames=statIfwanOvrFrames, sysDay=sysDay, scheduleTable=scheduleTable, ospfVLinkNumber=ospfVLinkNumber, statPvcSpeed=statPvcSpeed, schedulePort1=schedulePort1, ifvceR2Group2Digit=ifvceR2Group2Digit, sysVoiceClass=sysVoiceClass, ifwanOspfMetricCost=ifwanOspfMetricCost, filterNumber=filterNumber, statBootp=statBootp, ipxfilterType=ipxfilterType, pvcNetworkPort=pvcNetworkPort, pvcNetworkDlci=pvcNetworkDlci, statIfwanBadOctets=statIfwanBadOctets, puBnnFid=puBnnFid, statIfwanRetries=statIfwanRetries, puDlsIpDst=puDlsIpDst, proxyEntry=proxyEntry, statIfwanT1E1BES=statIfwanT1E1BES, manualCall=manualCall, ifwanIpAddress=ifwanIpAddress, noDevice=noDevice, ifvceIndex=ifvceIndex, sysHuntForwardingASvcAddress=sysHuntForwardingASvcAddress, puLlcDynamicWindow=puLlcDynamicWindow, filterEntry=filterEntry, statBridgePort=statBridgePort, statBootpReplyReceivedOnPortBootpc=statBootpReplyReceivedOnPortBootpc, statRxCallProceedingMessages=statRxCallProceedingMessages, ifwanDigitNumber=ifwanDigitNumber, bootpIpDestAddr3=bootpIpDestAddr3, ipx=ipx, statGrpNumber=statGrpNumber, puSdlcPort2=puSdlcPort2, pvcIndex=pvcIndex, statTimeInvalidPortNumbers=statTimeInvalidPortNumbers, ipstaticIndex=ipstaticIndex, statIfvceState=statIfvceState, ifvceTable=ifvceTable, sysExtendedDigitsLength=sysExtendedDigitsLength, statTxConnectMessages=statTxConnectMessages, scheduleEnable=scheduleEnable, ifvceLinkDwnBusy=ifvceLinkDwnBusy, phoneCost=phoneCost, ifwanInterface=ifwanInterface, ifwanFrameDelay=ifwanFrameDelay, linkUp=linkUp, statBootpNbRequestReceived=statBootpNbRequestReceived, statIfwanQ922State=statIfwanQ922State, ospfVLinkTransitAreaId=ospfVLinkTransitAreaId, netperformer7=netperformer7, schedulePort4=schedulePort4, statIflanIndex=statIflanIndex, statIflanEthOneCollision=statIflanEthOneCollision, statBridgePortTr_SegmentDuplicate=statBridgePortTr_SegmentDuplicate, puSdlcRetry=puSdlcRetry, system=system, ifwanIpxSap=ifwanIpxSap, puLlcMaxFrame=puLlcMaxFrame, sysHuntForwardingBDLCI=sysHuntForwardingBDLCI, ifwanSignaling=ifwanSignaling, ospfRangeMask=ospfRangeMask, ifvceExtendedDigitSrc=ifvceExtendedDigitSrc, statBootpFrameTooSmallToBeABootpFrame=statBootpFrameTooSmallToBeABootpFrame, statPvcState=statPvcState, sysUnitRoutingVersion=sysUnitRoutingVersion, ifwanTxStartPass=ifwanTxStartPass, ifwanMsn2=ifwanMsn2, statTimeClientRetransmissions=statTimeClientRetransmissions, ospfAreaAuthType=ospfAreaAuthType, statIfvceEntry=statIfvceEntry, pvcUp=pvcUp, puMode=puMode, puLlcTr_Routing=puLlcTr_Routing, ifwanT1E1InterBit=ifwanT1E1InterBit, ifwanChannelCompressed=ifwanChannelCompressed, ospfAreaNumber=ospfAreaNumber, ospfVLinkTable=ospfVLinkTable, ospfVLinkDeadInt=ospfVLinkDeadInt, sysPosEntry=sysPosEntry, statIfwanCompErrs=statIfwanCompErrs, pvcRingNumber=pvcRingNumber, statRxBytes=statRxBytes, intf=intf, puTable=puTable, sysHuntForwardingBUnit=sysHuntForwardingBUnit, ifwanOspfEnable=ifwanOspfEnable, ospfVLinkEnable=ospfVLinkEnable, filterIndex=filterIndex, statIfvceLastError=statIfvceLastError, statSvcMeanTx=statSvcMeanTx, ifwanConnTimeout_s=ifwanConnTimeout_s, statTxReleaseMessages=statTxReleaseMessages, ifwanChUse=ifwanChUse, ifwanTxFlow=ifwanTxFlow, sysPosTable=sysPosTable, ifvceRemoteUnit=ifvceRemoteUnit, puBanBnnDsap=puBanBnnDsap, ifvceDtmfOnTime=ifvceDtmfOnTime, puLlcDsap=puLlcDsap, ifwanCompression=ifwanCompression, scheduleDay=scheduleDay, statTxReleaseCompleteMessages=statTxReleaseCompleteMessages, bridgePriority=bridgePriority, statPvcChAborts=statPvcChAborts, statIflanEthTwoCollisions=statIflanEthTwoCollisions, statTimeNbReplySent=statTimeNbReplySent, sysPosProduct=sysPosProduct, scheduleEntry=scheduleEntry, statIfcemDesc=statIfcemDesc, statIfwanT1E1PCV=statIfwanT1E1PCV, iflanIpAddress=iflanIpAddress, intfNumInSlot=intfNumInSlot, slotPortInSlot=slotPortInSlot, pvcMode=pvcMode, intfDesc=intfDesc, ospfRangeEnable=ospfRangeEnable, pvcDlciAddress=pvcDlciAddress, ifvceRate5k8x1=ifvceRate5k8x1, iflanNumber=iflanNumber, proxyComm=proxyComm, intfTable=intfTable, statAlarmModule=statAlarmModule, ospfRangeNet=ospfRangeNet, statPvcChOverflows=statPvcChOverflows, schedulePort5=schedulePort5, sysDefaultGateway=sysDefaultGateway, statBridgeBridgeRootCost=statBridgeBridgeRootCost, puSdlcAddress2=puSdlcAddress2, statEstablishIndications=statEstablishIndications, mibVersion=mibVersion, ifwanSync=ifwanSync, ospfGlobalRouterId=ospfGlobalRouterId, statBootpReplyWithInvalidGiaddr=statBootpReplyWithInvalidGiaddr, iflanIpRipPassword=iflanIpRipPassword, statBridgePortTr_SpecRteFrameIn=statBridgePortTr_SpecRteFrameIn, statBridgeBridgeAddressDiscard=statBridgeBridgeAddressDiscard, iflanPhysAddr=iflanPhysAddr, statPvcrRouteTable=statPvcrRouteTable, statGrpEntry=statGrpEntry, phoneNumber=phoneNumber, statTxCallProceedingMessages=statTxCallProceedingMessages, statTxStatusMessages=statTxStatusMessages, statPvcrRouteName=statPvcrRouteName, ipaddrEntry=ipaddrEntry, ipaddrIfIndex=ipaddrIfIndex, puBanDa=puBanDa, pvcRemoteFpUnit=pvcRemoteFpUnit, statIflanEthExcessiveCollision=statIflanEthExcessiveCollision, ipRouterEnable=ipRouterEnable, pvcDialTimeout=pvcDialTimeout, statIflanEthLateCollision=statIflanEthLateCollision, mibEvolution=mibEvolution, periodStarted=periodStarted, phoneTable=phoneTable, iflanOspfHelloInt=iflanOspfHelloInt, ifwanSvcStatusTimeoutT322=ifwanSvcStatusTimeoutT322, ifwanProtocol=ifwanProtocol, onePsDown=onePsDown, pvcIpRipAuthType=pvcIpRipAuthType, proxy=proxy, statPvcrRouteAge=statPvcrRouteAge, statIfwanOctetsTx=statIfwanOctetsTx, periodEnded=periodEnded, statIfwanChOverflows=statIfwanChOverflows, ospfVLink=ospfVLink, proxyTable=proxyTable, puDlsSsap=puDlsSsap, statIflanConnectionStatus=statIflanConnectionStatus, pvcIpAddress=pvcIpAddress, ifvceEntry=ifvceEntry, puBnnPvc=puBnnPvc, ifwanRemoteUnit=ifwanRemoteUnit, slot=slot, sysDate=sysDate, ifwanMsn1=ifwanMsn1, bridge=bridge, bridgeTr_MaxHop=bridgeTr_MaxHop, ifwanPriority=ifwanPriority, statIfvceOverruns=statIfvceOverruns, ifwanDropSyncCharacter=ifwanDropSyncCharacter, statTimeClientSyncFailures=statTimeClientSyncFailures, statSvcMeanRx=statSvcMeanRx, ifwanPppNegociateLocalMru=ifwanPppNegociateLocalMru, statIflanBadFrames=statIflanBadFrames, ifwanSfMode=ifwanSfMode, ifwanSubnetMask=ifwanSubnetMask, ifvceRemotePort=ifvceRemotePort, statPvcBadOctets=statPvcBadOctets, ifwanSvcReleaseTimeoutT308=ifwanSvcReleaseTimeoutT308, statSvcInfoSignal=statSvcInfoSignal, statIflanProtocol=statIflanProtocol, sysSnmpTrapIpAddr2=sysSnmpTrapIpAddr2, statSvcPeakTx=statSvcPeakTx, classPrefRoute=classPrefRoute, ifwanModem=ifwanModem, ifwanPppRequestMagicNum=ifwanPppRequestMagicNum, iflanTable=iflanTable, puSdlcPort=puSdlcPort, statIflanPeakRx_kbps=statIflanPeakRx_kbps, puBanBnnNw=puBanBnnNw, statPuChAborts=statPuChAborts, statPvcCompErrs=statPvcCompErrs, sysThisPosId=sysThisPosId, sysCountry=sysCountry, ifwanPppLocalMru=ifwanPppLocalMru, puSdlcAddress=puSdlcAddress, pvcOspfDeadInt=pvcOspfDeadInt, statAlarmEntry=statAlarmEntry, ipstaticTable=ipstaticTable, statAlarmTable=statAlarmTable, statSvcOctetsRx=statSvcOctetsRx, statTimeNbRequestReceived=statTimeNbRequestReceived, statTxStatusEnquiryMessages=statTxStatusEnquiryMessages, ifwanSvcNetworkAddress=ifwanSvcNetworkAddress, ipxfilterIndex=ipxfilterIndex, ifwanPppNegociateAccm=ifwanPppNegociateAccm, statSvcEntry=statSvcEntry, sysHuntForwardingBSvcAddress=sysHuntForwardingBSvcAddress, sysPosRackId=sysPosRackId, ifwanMaxFrame=ifwanMaxFrame)
mibBuilder.exportSymbols("PRESTICOM7-MIB", iflanIpRipTxRx=iflanIpRipTxRx, statIfwanBadFlags=statIfwanBadFlags, statReleaseIndications=statReleaseIndications, q922Up=q922Up, tMS380C26=tMS380C26, iflanOspfPriority=iflanOspfPriority, ipstaticMask=ipstaticMask, puLlcTimeout_ms=puLlcTimeout_ms, statIfwanPeakTx=statIfwanPeakTx, ospfGlobal=ospfGlobal, statPuTable=statPuTable, ifwanTimeout=ifwanTimeout, statSystemMeanDecompRate=statSystemMeanDecompRate, intfNumInType=intfNumInType, statIfwanMeanRx=statIfwanMeanRx, ifwanCoding=ifwanCoding, statSystemTr_Nan=statSystemTr_Nan, ifwanQsigPbxXy=ifwanQsigPbxXy, statSystemMeanCompRate=statSystemMeanCompRate, statSystemAlarmNumber=statSystemAlarmNumber, ifwanDropSyncCounter=ifwanDropSyncCounter, iflanOspfEnable=iflanOspfEnable, iflanOspfDeadInt=iflanOspfDeadInt, statSvcOvrOctets=statSvcOvrOctets, ifwanEnquiryTimer_s=ifwanEnquiryTimer_s, filter=filter, filterTable=filterTable, sysContact=sysContact, classDefaultClass=classDefaultClass, pvcUserPort=pvcUserPort, ifwanDsOSpeed_bps=ifwanDsOSpeed_bps, schedulePort7=schedulePort7, scheduleNumber=scheduleNumber, sysRingFreq=sysRingFreq, ifwanSfCarrierId=ifwanSfCarrierId, ifvceRate8kx1=ifvceRate8kx1, puSdlcMaxFrame=puSdlcMaxFrame, ifwanBackupHang_s=ifwanBackupHang_s, sysDialTimer=sysDialTimer, ifwanExtNumber=ifwanExtNumber, pvcIpRipPassword=pvcIpRipPassword, puSdlcTimeout_ms=puSdlcTimeout_ms, puXid=puXid, pvcBurstInfoRate=pvcBurstInfoRate, ospfVLinkPassword=ospfVLinkPassword, timepClientProtocol=timepClientProtocol, ifwanOspfPassword=ifwanOspfPassword, iflanIpxLanType=iflanIpxLanType, ipstaticIpDest=ipstaticIpDest, statIfwanT1E1CSS=statIfwanT1E1CSS, statIflanEntry=statIflanEntry, statPuIndex=statPuIndex, ipxfilterSap=ipxfilterSap, cardDown=cardDown, ifwanGainLimit=ifwanGainLimit, statBridgePortDesignatedPort=statBridgePortDesignatedPort, ifvceFwdType=ifvceFwdType, statPvcPeakRx=statPvcPeakRx, bootpMaxHops=bootpMaxHops, statIfwanMeanTx=statIfwanMeanTx, puXidPuType=puXidPuType, statSystemPeakDecompRate=statSystemPeakDecompRate, statBridgePortState=statBridgePortState, ifwanGroupAddress=ifwanGroupAddress, ifwanIpRip=ifwanIpRip, bridgeHelloTime_s=bridgeHelloTime_s, pvcOspfTransitDelay=pvcOspfTransitDelay, ifwanX25Encapsulation=ifwanX25Encapsulation, bridgeStpEnable=bridgeStpEnable, pvcPvcClass=pvcPvcClass, ifvceToneEnergyDetec=ifvceToneEnergyDetec, ifwanPppRequestedAccmChar=ifwanPppRequestedAccmChar, ifwanTransparentClassNumber=ifwanTransparentClassNumber, statPuChSeqErrs=statPuChSeqErrs, ospfAreaAreaId=ospfAreaAreaId, ipaddrIndex=ipaddrIndex, statPuCompErrs=statPuCompErrs, ifwanCrc4=ifwanCrc4, ifvceNumber=ifvceNumber, ifwanOspfAreaId=ifwanOspfAreaId, statPvcMeanTx=statPvcMeanTx, ifwanPppNegociatePeerMru=ifwanPppNegociatePeerMru, sysDesc=sysDesc, ifwanRetry=ifwanRetry, pvcBroadcastGroup=pvcBroadcastGroup, notMemory=notMemory, timepClientUpdateInterval=timepClientUpdateInterval, statPvcrRouteValid=statPvcrRouteValid, bootpEnable=bootpEnable, ipstaticEntry=ipstaticEntry, statPvcBadFrames=statPvcBadFrames, timepTimeZoneSign=timepTimeZoneSign, statGrpTable=statGrpTable, iflanOspfMetricCost=iflanOspfMetricCost, bridgeMaxAge_s=bridgeMaxAge_s, ospfRangeStatus=ospfRangeStatus, statPvcrRouteIntrf=statPvcrRouteIntrf, connectionUp=connectionUp, ifwanClassNumber=ifwanClassNumber, ospfAreaEnable=ospfAreaEnable, statRxConnectMessages=statRxConnectMessages, ospfAreaImportASExt=ospfAreaImportASExt, statGrpIndex=statGrpIndex, ifwanMgmtInterface=ifwanMgmtInterface, bootpIpDestAddr4=bootpIpDestAddr4, pvcMaxFrame=pvcMaxFrame, statBridgeBridge=statBridgeBridge, ospfGlobalRackAreaId=ospfGlobalRackAreaId, statIfwanOctetsRx=statIfwanOctetsRx, ifwanSvcSetupTimeoutT303=ifwanSvcSetupTimeoutT303, accountingFileFull=accountingFileFull, info=info, sysExtensionNumLength=sysExtensionNumLength, statIfwanT1E1LCV=statIfwanT1E1LCV, pvc=pvc, ifvceFwdDigits=ifvceFwdDigits, pvcTimeout_ms=pvcTimeout_ms, ifwanSfType=ifwanSfType, ifwanDesc=ifwanDesc, ifvceR2BusyDigit=ifvceR2BusyDigit, statRxReleaseCompleteMessages=statRxReleaseCompleteMessages)
