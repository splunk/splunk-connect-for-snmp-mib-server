#
# PySNMP MIB module ARISTA-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARISTA-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aristaMibs, = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
TimeFilter, = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, iso, IpAddress, Counter32, Integer32, ObjectIdentity, ModuleIdentity, Unsigned32, TimeTicks, Bits, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "IpAddress", "Counter32", "Integer32", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "TimeTicks", "Bits", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TimeStamp, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "MacAddress", "TruthValue", "TextualConvention")
aristaAclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 5))
aristaAclMIB.setRevisions(('2014-08-15 00:00', '2013-02-08 11:00', '2012-06-20 13:00',))
if mibBuilder.loadTexts: aristaAclMIB.setLastUpdated('201408150000Z')
if mibBuilder.loadTexts: aristaAclMIB.setOrganization('Arista Networks, Inc.')
class AristaAclRuleAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("permit", 0), ("deny", 1), ("remark", 2))

class AristaAclRangeOperator(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("any", 0), ("eq", 1), ("gt", 2), ("lt", 3), ("neq", 4), ("range", 5))

aristaAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1))
aristaAclConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2))
aristaIpAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1))
aristaMacAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2))
aristaIpv6Acl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3))
aristaAclDpSupportFlags = MibScalar((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 4), Bits().clone(namedValues=NamedValues(("acl", 0), ("logging", 1), ("counter", 2), ("routerAcl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaAclDpSupportFlags.setStatus('current')
aristaIpAclTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1), )
if mibBuilder.loadTexts: aristaIpAclTable.setStatus('current')
aristaIpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpAclName"))
if mibBuilder.loadTexts: aristaIpAclEntry.setStatus('current')
aristaIpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100)))
if mibBuilder.loadTexts: aristaIpAclName.setStatus('current')
aristaIpAclReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclReadOnly.setStatus('current')
aristaIpAclStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclStatsEnabled.setStatus('current')
aristaIpAclCountersIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclCountersIncomplete.setStatus('current')
aristaIpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2), )
if mibBuilder.loadTexts: aristaIpAclRuleTable.setStatus('current')
aristaIpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpAclName"), (0, "ARISTA-ACL-MIB", "aristaIpAclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpAclRuleEntry.setStatus('current')
aristaIpAclRuleSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aristaIpAclRuleSeqId.setStatus('current')
aristaIpAclRuleProto = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleProto.setStatus('current')
aristaIpAclRuleSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleSrc.setStatus('current')
aristaIpAclRuleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleSrcMask.setStatus('current')
aristaIpAclRuleDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleDest.setStatus('current')
aristaIpAclRuleDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleDestMask.setStatus('current')
aristaIpAclRuleL4PortSrcOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 7), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortSrcOper.setStatus('current')
aristaIpAclRuleL4PortsSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortsSrc.setStatus('current')
aristaIpAclRuleL4PortDestOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 9), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortDestOper.setStatus('current')
aristaIpAclRuleL4PortsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortsDest.setStatus('current')
aristaIpAclRuleTtlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 11), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTtlOper.setStatus('current')
aristaIpAclRuleTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTtl.setStatus('current')
aristaIpAclRuleTracked = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTracked.setStatus('current')
aristaIpAclRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleFragments.setStatus('current')
aristaIpAclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 15), Bits().clone(namedValues=NamedValues(("fin", 0), ("syn", 1), ("rst", 2), ("psh", 3), ("ack", 4), ("urg", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTcpFlags.setStatus('current')
aristaIpAclRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleEstablished.setStatus('current')
aristaIpAclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleIcmpType.setStatus('current')
aristaIpAclRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleIcmpCode.setStatus('current')
aristaIpAclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 19), AristaAclRuleAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleAction.setStatus('current')
aristaIpAclRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleLog.setStatus('current')
aristaIpAclRuleRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleRemark.setStatus('current')
aristaIpAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3), )
if mibBuilder.loadTexts: aristaIpAclRuleStatsTable.setStatus('current')
aristaIpAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpAclRuleTimeMark"), (0, "ARISTA-ACL-MIB", "aristaIpAclName"), (0, "ARISTA-ACL-MIB", "aristaIpAclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpAclRuleStatsEntry.setStatus('current')
aristaIpAclRuleTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1, 1), TimeFilter())
if mibBuilder.loadTexts: aristaIpAclRuleTimeMark.setStatus('current')
aristaIpAclRuleStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleStatsPktCount.setStatus('current')
aristaIpAclRuleStatsLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleStatsLastUpdateTime.setStatus('current')
aristaMacAclTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1), )
if mibBuilder.loadTexts: aristaMacAclTable.setStatus('current')
aristaMacAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaMacAclName"))
if mibBuilder.loadTexts: aristaMacAclEntry.setStatus('current')
aristaMacAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100)))
if mibBuilder.loadTexts: aristaMacAclName.setStatus('current')
aristaMacAclReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclReadOnly.setStatus('current')
aristaMacAclStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclStatsEnabled.setStatus('current')
aristaMacAclCountersIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclCountersIncomplete.setStatus('current')
aristaMacAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2), )
if mibBuilder.loadTexts: aristaMacAclRuleTable.setStatus('current')
aristaMacAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaMacAclName"), (0, "ARISTA-ACL-MIB", "aristaMacAclRuleSeqId"))
if mibBuilder.loadTexts: aristaMacAclRuleEntry.setStatus('current')
aristaMacAclRuleSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aristaMacAclRuleSeqId.setStatus('current')
aristaMacAclRuleSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleSrc.setStatus('current')
aristaMacAclRuleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleSrcMask.setStatus('current')
aristaMacAclRuleDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleDest.setStatus('current')
aristaMacAclRuleDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleDestMask.setStatus('current')
aristaMacAclRuleProto = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleProto.setStatus('current')
aristaMacAclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 7), AristaAclRuleAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleAction.setStatus('current')
aristaMacAclRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleLog.setStatus('current')
aristaMacAclRuleRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleRemark.setStatus('current')
aristaMacAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3), )
if mibBuilder.loadTexts: aristaMacAclRuleStatsTable.setStatus('current')
aristaMacAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaMacAclRuleTimeMark"), (0, "ARISTA-ACL-MIB", "aristaMacAclName"), (0, "ARISTA-ACL-MIB", "aristaMacAclRuleSeqId"))
if mibBuilder.loadTexts: aristaMacAclRuleStatsEntry.setStatus('current')
aristaMacAclRuleTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1, 1), TimeFilter())
if mibBuilder.loadTexts: aristaMacAclRuleTimeMark.setStatus('current')
aristaMacAclRuleStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleStatsPktCount.setStatus('current')
aristaMacAclRuleStatsLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleStatsLastUpdateTime.setStatus('current')
aristaIpv6AclTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1), )
if mibBuilder.loadTexts: aristaIpv6AclTable.setStatus('current')
aristaIpv6AclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpv6AclName"))
if mibBuilder.loadTexts: aristaIpv6AclEntry.setStatus('current')
aristaIpv6AclName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100)))
if mibBuilder.loadTexts: aristaIpv6AclName.setStatus('current')
aristaIpv6AclReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclReadOnly.setStatus('current')
aristaIpv6AclStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclStatsEnabled.setStatus('current')
aristaIpv6AclCountersIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclCountersIncomplete.setStatus('current')
aristaIpv6AclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2), )
if mibBuilder.loadTexts: aristaIpv6AclRuleTable.setStatus('current')
aristaIpv6AclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpv6AclName"), (0, "ARISTA-ACL-MIB", "aristaIpv6AclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpv6AclRuleEntry.setStatus('current')
aristaIpv6AclRuleSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aristaIpv6AclRuleSeqId.setStatus('current')
aristaIpv6AclRuleProto = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleProto.setStatus('current')
aristaIpv6AclRuleSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 3), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleSrc.setStatus('current')
aristaIpv6AclRuleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 4), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleSrcMask.setStatus('current')
aristaIpv6AclRuleDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleDest.setStatus('current')
aristaIpv6AclRuleDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleDestMask.setStatus('current')
aristaIpv6AclRuleL4PortSrcOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 7), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortSrcOper.setStatus('current')
aristaIpv6AclRuleL4PortsSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortsSrc.setStatus('current')
aristaIpv6AclRuleL4PortDestOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 9), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortDestOper.setStatus('current')
aristaIpv6AclRuleL4PortsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortsDest.setStatus('current')
aristaIpv6AclRuleHopLimitOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 11), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleHopLimitOper.setStatus('current')
aristaIpv6AclRuleHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleHopLimit.setStatus('current')
aristaIpv6AclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 13), Bits().clone(namedValues=NamedValues(("fin", 0), ("syn", 1), ("rst", 2), ("psh", 3), ("ack", 4), ("urg", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleTcpFlags.setStatus('current')
aristaIpv6AclRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleEstablished.setStatus('current')
aristaIpv6AclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleIcmpType.setStatus('current')
aristaIpv6AclRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleIcmpCode.setStatus('current')
aristaIpv6AclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 17), AristaAclRuleAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleAction.setStatus('current')
aristaIpv6AclRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleLog.setStatus('current')
aristaIpv6AclRuleRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleRemark.setStatus('current')
aristaIpv6AclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3), )
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsTable.setStatus('current')
aristaIpv6AclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1), ).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpv6AclRuleTimeMark"), (0, "ARISTA-ACL-MIB", "aristaIpv6AclName"), (0, "ARISTA-ACL-MIB", "aristaIpv6AclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsEntry.setStatus('current')
aristaIpv6AclRuleTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1, 1), TimeFilter())
if mibBuilder.loadTexts: aristaIpv6AclRuleTimeMark.setStatus('current')
aristaIpv6AclRuleStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsPktCount.setStatus('current')
aristaIpv6AclRuleStatsLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsLastUpdateTime.setStatus('current')
aristaAclCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 1))
aristaAclGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 2))
aristaAclCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 1, 1)).setObjects(("ARISTA-ACL-MIB", "aristaAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaAclCompliance = aristaAclCompliance.setStatus('current')
aristaAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 2, 1)).setObjects(("ARISTA-ACL-MIB", "aristaAclDpSupportFlags"), ("ARISTA-ACL-MIB", "aristaIpAclReadOnly"), ("ARISTA-ACL-MIB", "aristaIpAclStatsEnabled"), ("ARISTA-ACL-MIB", "aristaIpAclCountersIncomplete"), ("ARISTA-ACL-MIB", "aristaIpAclRuleProto"), ("ARISTA-ACL-MIB", "aristaIpAclRuleSrc"), ("ARISTA-ACL-MIB", "aristaIpAclRuleSrcMask"), ("ARISTA-ACL-MIB", "aristaIpAclRuleDest"), ("ARISTA-ACL-MIB", "aristaIpAclRuleDestMask"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortSrcOper"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortsSrc"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortDestOper"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortsDest"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTtlOper"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTtl"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTracked"), ("ARISTA-ACL-MIB", "aristaIpAclRuleFragments"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTcpFlags"), ("ARISTA-ACL-MIB", "aristaIpAclRuleEstablished"), ("ARISTA-ACL-MIB", "aristaIpAclRuleIcmpType"), ("ARISTA-ACL-MIB", "aristaIpAclRuleIcmpCode"), ("ARISTA-ACL-MIB", "aristaIpAclRuleAction"), ("ARISTA-ACL-MIB", "aristaIpAclRuleLog"), ("ARISTA-ACL-MIB", "aristaIpAclRuleRemark"), ("ARISTA-ACL-MIB", "aristaIpAclRuleStatsPktCount"), ("ARISTA-ACL-MIB", "aristaIpAclRuleStatsLastUpdateTime"), ("ARISTA-ACL-MIB", "aristaMacAclReadOnly"), ("ARISTA-ACL-MIB", "aristaMacAclStatsEnabled"), ("ARISTA-ACL-MIB", "aristaMacAclCountersIncomplete"), ("ARISTA-ACL-MIB", "aristaMacAclRuleSrc"), ("ARISTA-ACL-MIB", "aristaMacAclRuleSrcMask"), ("ARISTA-ACL-MIB", "aristaMacAclRuleDest"), ("ARISTA-ACL-MIB", "aristaMacAclRuleDestMask"), ("ARISTA-ACL-MIB", "aristaMacAclRuleProto"), ("ARISTA-ACL-MIB", "aristaMacAclRuleAction"), ("ARISTA-ACL-MIB", "aristaMacAclRuleLog"), ("ARISTA-ACL-MIB", "aristaMacAclRuleRemark"), ("ARISTA-ACL-MIB", "aristaMacAclRuleStatsPktCount"), ("ARISTA-ACL-MIB", "aristaMacAclRuleStatsLastUpdateTime"), ("ARISTA-ACL-MIB", "aristaIpv6AclReadOnly"), ("ARISTA-ACL-MIB", "aristaIpv6AclStatsEnabled"), ("ARISTA-ACL-MIB", "aristaIpv6AclCountersIncomplete"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleProto"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleSrc"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleSrcMask"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleDest"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleDestMask"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortSrcOper"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortsSrc"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortDestOper"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortsDest"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleHopLimitOper"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleHopLimit"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleTcpFlags"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleEstablished"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleIcmpType"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleIcmpCode"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleAction"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleLog"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleRemark"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleStatsPktCount"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleStatsLastUpdateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaAclGroup = aristaAclGroup.setStatus('current')
mibBuilder.exportSymbols("ARISTA-ACL-MIB", aristaIpv6Acl=aristaIpv6Acl, aristaIpAclRuleStatsTable=aristaIpAclRuleStatsTable, aristaIpAclRuleTable=aristaIpAclRuleTable, aristaIpv6AclRuleLog=aristaIpv6AclRuleLog, aristaIpAclRuleL4PortDestOper=aristaIpAclRuleL4PortDestOper, aristaIpAclRuleIcmpType=aristaIpAclRuleIcmpType, aristaIpv6AclRuleSrc=aristaIpv6AclRuleSrc, aristaIpv6AclRuleEstablished=aristaIpv6AclRuleEstablished, aristaIpv6AclRuleL4PortSrcOper=aristaIpv6AclRuleL4PortSrcOper, aristaMacAclCountersIncomplete=aristaMacAclCountersIncomplete, aristaIpAclRuleTtlOper=aristaIpAclRuleTtlOper, aristaIpAclRuleSrc=aristaIpAclRuleSrc, aristaIpAclRuleLog=aristaIpAclRuleLog, aristaMacAclRuleLog=aristaMacAclRuleLog, aristaIpAclRuleTimeMark=aristaIpAclRuleTimeMark, aristaIpv6AclRuleStatsTable=aristaIpv6AclRuleStatsTable, aristaIpAclCountersIncomplete=aristaIpAclCountersIncomplete, aristaIpv6AclRuleIcmpCode=aristaIpv6AclRuleIcmpCode, aristaIpAclRuleEstablished=aristaIpAclRuleEstablished, aristaMacAclReadOnly=aristaMacAclReadOnly, aristaMacAclRuleEntry=aristaMacAclRuleEntry, aristaMacAclRuleSeqId=aristaMacAclRuleSeqId, aristaAclCompliance=aristaAclCompliance, aristaIpAclRuleL4PortSrcOper=aristaIpAclRuleL4PortSrcOper, aristaIpv6AclRuleHopLimit=aristaIpv6AclRuleHopLimit, aristaIpAclRuleTcpFlags=aristaIpAclRuleTcpFlags, aristaMacAclName=aristaMacAclName, aristaMacAclRuleProto=aristaMacAclRuleProto, aristaIpAclRuleTtl=aristaIpAclRuleTtl, aristaIpv6AclRuleProto=aristaIpv6AclRuleProto, aristaIpAclName=aristaIpAclName, aristaAclCompliances=aristaAclCompliances, aristaIpv6AclRuleL4PortDestOper=aristaIpv6AclRuleL4PortDestOper, aristaIpv6AclRuleEntry=aristaIpv6AclRuleEntry, aristaIpAcl=aristaIpAcl, aristaIpAclRuleTracked=aristaIpAclRuleTracked, aristaMacAclTable=aristaMacAclTable, aristaIpv6AclRuleIcmpType=aristaIpv6AclRuleIcmpType, aristaMacAclRuleAction=aristaMacAclRuleAction, aristaIpv6AclReadOnly=aristaIpv6AclReadOnly, aristaIpAclRuleDest=aristaIpAclRuleDest, aristaIpAclStatsEnabled=aristaIpAclStatsEnabled, PYSNMP_MODULE_ID=aristaAclMIB, aristaIpAclTable=aristaIpAclTable, aristaMacAclRuleTimeMark=aristaMacAclRuleTimeMark, aristaIpv6AclName=aristaIpv6AclName, aristaAclConformance=aristaAclConformance, aristaIpAclRuleRemark=aristaIpAclRuleRemark, aristaIpv6AclRuleTcpFlags=aristaIpv6AclRuleTcpFlags, aristaIpv6AclRuleStatsPktCount=aristaIpv6AclRuleStatsPktCount, aristaIpv6AclRuleL4PortsDest=aristaIpv6AclRuleL4PortsDest, AristaAclRangeOperator=AristaAclRangeOperator, aristaIpAclRuleSrcMask=aristaIpAclRuleSrcMask, aristaIpv6AclTable=aristaIpv6AclTable, aristaIpv6AclRuleAction=aristaIpv6AclRuleAction, aristaMacAclRuleTable=aristaMacAclRuleTable, aristaAclMIB=aristaAclMIB, aristaIpv6AclRuleDestMask=aristaIpv6AclRuleDestMask, aristaMacAclRuleStatsTable=aristaMacAclRuleStatsTable, aristaMacAcl=aristaMacAcl, aristaIpv6AclCountersIncomplete=aristaIpv6AclCountersIncomplete, aristaIpAclEntry=aristaIpAclEntry, aristaIpAclRuleStatsLastUpdateTime=aristaIpAclRuleStatsLastUpdateTime, aristaIpAclRuleStatsEntry=aristaIpAclRuleStatsEntry, aristaIpAclRuleSeqId=aristaIpAclRuleSeqId, aristaIpAclReadOnly=aristaIpAclReadOnly, aristaIpAclRuleProto=aristaIpAclRuleProto, aristaIpv6AclRuleL4PortsSrc=aristaIpv6AclRuleL4PortsSrc, aristaIpAclRuleFragments=aristaIpAclRuleFragments, aristaIpAclRuleL4PortsSrc=aristaIpAclRuleL4PortsSrc, aristaIpv6AclRuleStatsLastUpdateTime=aristaIpv6AclRuleStatsLastUpdateTime, aristaAclDpSupportFlags=aristaAclDpSupportFlags, aristaAclGroup=aristaAclGroup, aristaIpAclRuleDestMask=aristaIpAclRuleDestMask, aristaIpv6AclRuleTimeMark=aristaIpv6AclRuleTimeMark, aristaMacAclRuleStatsLastUpdateTime=aristaMacAclRuleStatsLastUpdateTime, aristaAcl=aristaAcl, aristaIpv6AclRuleSrcMask=aristaIpv6AclRuleSrcMask, aristaMacAclRuleStatsPktCount=aristaMacAclRuleStatsPktCount, aristaIpAclRuleStatsPktCount=aristaIpAclRuleStatsPktCount, aristaMacAclRuleRemark=aristaMacAclRuleRemark, aristaIpv6AclRuleDest=aristaIpv6AclRuleDest, aristaIpAclRuleEntry=aristaIpAclRuleEntry, aristaIpv6AclEntry=aristaIpv6AclEntry, aristaIpAclRuleAction=aristaIpAclRuleAction, aristaMacAclRuleDestMask=aristaMacAclRuleDestMask, aristaIpv6AclStatsEnabled=aristaIpv6AclStatsEnabled, aristaIpv6AclRuleSeqId=aristaIpv6AclRuleSeqId, aristaIpv6AclRuleStatsEntry=aristaIpv6AclRuleStatsEntry, aristaMacAclStatsEnabled=aristaMacAclStatsEnabled, aristaIpAclRuleL4PortsDest=aristaIpAclRuleL4PortsDest, AristaAclRuleAction=AristaAclRuleAction, aristaMacAclRuleStatsEntry=aristaMacAclRuleStatsEntry, aristaAclGroups=aristaAclGroups, aristaMacAclRuleSrc=aristaMacAclRuleSrc, aristaMacAclRuleDest=aristaMacAclRuleDest, aristaIpv6AclRuleHopLimitOper=aristaIpv6AclRuleHopLimitOper, aristaIpAclRuleIcmpCode=aristaIpAclRuleIcmpCode, aristaIpv6AclRuleTable=aristaIpv6AclRuleTable, aristaMacAclEntry=aristaMacAclEntry, aristaMacAclRuleSrcMask=aristaMacAclRuleSrcMask, aristaIpv6AclRuleRemark=aristaIpv6AclRuleRemark)
