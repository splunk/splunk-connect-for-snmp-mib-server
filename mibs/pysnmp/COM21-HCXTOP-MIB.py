#
# PySNMP MIB module COM21-HCXTOP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXTOP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
com21Reg, com21Traps, com21, com21Hcx = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Reg", "com21Traps", "com21", "com21Hcx")
hcxEventLogTime, hcxAlmSeverity = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxEventLogTime", "hcxAlmSeverity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, ObjectIdentity, iso, Counter32, Unsigned32, Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "ObjectIdentity", "iso", "Counter32", "Unsigned32", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ModuleIdentity", "NotificationType")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
com21HcxCtrl = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 1))
if mibBuilder.loadTexts: com21HcxCtrl.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxCtrl.setOrganization('Com21, Inc.')
com21HcxControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 2))
com21HcxAcqCnfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 3))
com21HcxAlmOverGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 4))
com21HcxStuOverGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 5))
com21HcxTrapRcvrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 6))
com21HcxShelfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 7))
com21HcxSlotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 8))
com21HcxImageListGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 9))
com21HcxServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 10))
com21HcxArpFiltTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 12))
com21HcxStuDefaultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 13))
com21HcxDbControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 14))
com21HcxBootControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 18))
com21HcxPhase30 = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 6, 1))
com21HcxCompact = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 6, 2))
class UpstrmFreqKhz(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(5000, 40000)

class StuGain(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(18, 58)

class EpochTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

class HcxCardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("rx", 1), ("tx", 2), ("ethDual10bT", 3), ("ethQuad10bT", 4), ("eth100bT", 5), ("tele", 6), ("cc", 7), ("oc3", 8), ("atm25", 9), ("empty", 10), ("txRf", 11), ("txDig", 12), ("eth10bT8k", 13), ("intConn", 14), ("rxm", 15), ("atmlSw", 16), ("compactSw", 17))

hcxMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxMacAddress.setStatus('current')
hcxEncryptionEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEncryptionEnable.setStatus('current')
hcxPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPartNumber.setStatus('current')
hcxEpochTime = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 4), EpochTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEpochTime.setStatus('current')
hcxUserText = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUserText.setStatus('current')
hcxSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSerialNumber.setStatus('current')
hcxIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxIpAddress.setStatus('current')
hcxIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxIpMask.setStatus('current')
hcxGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxGatewayAddress.setStatus('current')
hcxRestartAction = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nil", 1), ("warmStart", 2), ("coldStart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRestartAction.setStatus('current')
hcxRestartNotify = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 59)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"))
if mibBuilder.loadTexts: hcxRestartNotify.setStatus('current')
hcxMajorAlarmStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxMajorAlarmStatusLed.setStatus('current')
hcxMajorStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 40)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxMajorAlarmStatusLed"))
if mibBuilder.loadTexts: hcxMajorStatusLedChange.setStatus('current')
hcxMinorAlarmStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxMinorAlarmStatusLed.setStatus('current')
hcxMinorStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 41)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxMinorAlarmStatusLed"))
if mibBuilder.loadTexts: hcxMinorStatusLedChange.setStatus('current')
hcxAutoLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAutoLoadBalancing.setStatus('current')
hcxAutoFreqHopping = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAutoFreqHopping.setStatus('current')
hcxKeyRenewalPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8784))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxKeyRenewalPeriod.setStatus('current')
hcxHcxSwRelease = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxHcxSwRelease.setStatus('current')
hcxHcxAlternateSwRel = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxHcxAlternateSwRel.setStatus('current')
hcxHcxImageControl = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxHcxImageControl.setStatus('current')
hcxImageTransfer = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxImageTransfer.setStatus('current')
hcxHcxSwDnldResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("serverNoResponse", 3), ("imageNotFound", 4), ("versionMismatch", 5), ("serverConnectionLost", 6), ("uninitiated", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxHcxSwDnldResult.setStatus('current')
hcxHcxSwDnldComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 42)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxHcxSwDnldResult"))
if mibBuilder.loadTexts: hcxHcxSwDnldComplete.setStatus('current')
hcxCnfgBackupAction = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nil", 1), ("backupToSaved", 2), ("revertToSaved", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxCnfgBackupAction.setStatus('current')
hcxCnfgBackupComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 44)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxCnfgBackupResult"))
if mibBuilder.loadTexts: hcxCnfgBackupComplete.setStatus('current')
hcxCnfgBackupResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("serverNoResponse", 3), ("writeFailed", 4), ("uninitiated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCnfgBackupResult.setStatus('current')
hcxPhyConfigType = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleShelf", 1), ("fullConfig", 2), ("compactShelf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPhyConfigType.setStatus('current')
hcxNumOfShelves = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxNumOfShelves.setStatus('current')
hcxBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxBootpServer.setStatus('current')
hcxBootpFailed = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 45)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxBootpResult"))
if mibBuilder.loadTexts: hcxBootpFailed.setStatus('current')
hcxBootpResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("serverNoResponse", 3), ("serverUnknown", 4), ("imageNotFound", 5), ("versionMismatch", 6), ("serverConnectionLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxBootpResult.setStatus('current')
hcxPowerFailDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 46)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxShelfId"))
if mibBuilder.loadTexts: hcxPowerFailDetected.setStatus('current')
hcxPowerFailClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 47)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxShelfId"))
if mibBuilder.loadTexts: hcxPowerFailClear.setStatus('current')
hcxFanFailDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 48)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxShelfId"))
if mibBuilder.loadTexts: hcxFanFailDetected.setStatus('current')
hcxFanFailClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 49)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxShelfId"))
if mibBuilder.loadTexts: hcxFanFailClear.setStatus('current')
hcxFreqHopPause = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxFreqHopPause.setStatus('current')
hcxMaxDnstrmCBRAlloc = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxMaxDnstrmCBRAlloc.setStatus('current')
hcxMaxUpstrmCBRAlloc = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxMaxUpstrmCBRAlloc.setStatus('current')
hcxStatsControl = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("previousCounts", 1), ("wrapCurr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStatsControl.setStatus('current')
hcxTrapFormat = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxTrapFormat.setStatus('current')
hcxSyncClkConfigure = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalClk", 1), ("networkClk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxSyncClkConfigure.setStatus('current')
hcxSyncClkSelect = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalClk", 1), ("priNetworkClk", 2), ("secNetworkClk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSyncClkSelect.setStatus('current')
hcxSyncClkChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 181)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSyncClkSelect"))
if mibBuilder.loadTexts: hcxSyncClkChange.setStatus('current')
hcxAcquisitionFreq = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 3, 1), UpstrmFreqKhz()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAcquisitionFreq.setStatus('deprecated')
hcxAcqMinPower = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 3, 6), StuGain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAcqMinPower.setStatus('current')
hcxAcqMaxPower = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 3, 7), StuGain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAcqMaxPower.setStatus('current')
hcxAcqPowerStepSize = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAcqPowerStepSize.setStatus('current')
hcxAltAcqFreq = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAltAcqFreq.setStatus('deprecated')
hcxActiveAcqFreq = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 3, 10), UpstrmFreqKhz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxActiveAcqFreq.setStatus('deprecated')
hcxNoCurrAlarms = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxNoCurrAlarms.setStatus('current')
hcxEventLogSize = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEventLogSize.setStatus('current')
hcxNumConfiguredStus = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxNumConfiguredStus.setStatus('current')
hcxNumAcquiredStus = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxNumAcquiredStus.setStatus('current')
hcxLastStuTopolgyChng = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 3), EpochTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxLastStuTopolgyChng.setStatus('current')
stuTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 50)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxNumAcquiredStus"))
if mibBuilder.loadTexts: stuTopologyChange.setStatus('current')
hcxNumEnabledStus = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxNumEnabledStus.setStatus('current')
hcxStuAggrUpStrmCbrRate = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuAggrUpStrmCbrRate.setStatus('current')
hcxStuAggrUpStrmMinRate = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuAggrUpStrmMinRate.setStatus('current')
hcxStuAggrUpStrmMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuAggrUpStrmMaxRate.setStatus('current')
hcxStuResourceExhausted = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 51)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"))
if mibBuilder.loadTexts: hcxStuResourceExhausted.setStatus('current')
hcxStuAltDownFreq = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(88000, 800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuAltDownFreq.setStatus('current')
hcxStuAcqTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("topoChgTrapOnly", 1), ("acqTrapOnly", 2), ("bothTopoAndAcqTrap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuAcqTrapEnable.setStatus('current')
hcxStuRpcEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuRpcEnable.setStatus('current')
hcxStuAutoDiscEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuAutoDiscEnable.setStatus('current')
hcxStuAutoDiscIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuAutoDiscIpAddr.setStatus('current')
hcxStuAutoGainAdjust = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuAutoGainAdjust.setStatus('current')
hcxStuAltDownFreqEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuAltDownFreqEnable.setStatus('current')
hcxStuPcMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 17), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuPcMacAddress.setStatus('current')
hcxStuPcToStuMacAddressResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuPcToStuMacAddressResult.setStatus('current')
hcxStuOverMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuOverMacAddress.setStatus('current')
hcxStuGlobalSwImage = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 5, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuGlobalSwImage.setStatus('current')
hcxStuDefaultAuth = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDefaultAuth.setStatus('current')
hcxStuDefaultServType = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDefaultServType.setStatus('current')
hcxStuDefaultVlan = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDefaultVlan.setStatus('current')
hcxStuDefCom21SwImage = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDefCom21SwImage.setStatus('current')
hcxStuDef3ComSwImage = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDef3ComSwImage.setStatus('current')
hcxArpServerTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxArpServerTrapEnable.setStatus('current')
hcxArpUserTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxArpUserTrapEnable.setStatus('current')
hcxTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 6, 1), )
if mibBuilder.loadTexts: hcxTrapReceiverTable.setStatus('current')
hcxTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 6, 1, 1), ).setIndexNames((0, "COM21-HCXTOP-MIB", "hcxTrapRcvrNetAddress"))
if mibBuilder.loadTexts: hcxTrapReceiverEntry.setStatus('current')
hcxTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("delete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxTrapRcvrStatus.setStatus('current')
hcxTrapRcvrNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxTrapRcvrNetAddress.setStatus('current')
hcxTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxTrapRcvrComm.setStatus('current')
hcxTrapRcvrAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 6, 1, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxTrapRcvrAgeTime.setStatus('current')
com21HcxShelfTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 7, 1), )
if mibBuilder.loadTexts: com21HcxShelfTable.setStatus('current')
com21HcxShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 7, 1, 1), ).setIndexNames((0, "COM21-HCXTOP-MIB", "hcxShelfId"))
if mibBuilder.loadTexts: com21HcxShelfEntry.setStatus('current')
hcxShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxShelfId.setStatus('current')
hcxShelfNoSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxShelfNoSlots.setStatus('current')
com21HcxSlotTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 8, 1), )
if mibBuilder.loadTexts: com21HcxSlotTable.setStatus('current')
com21HcxSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 8, 1, 1), ).setIndexNames((0, "COM21-HCXTOP-MIB", "hcxShelfNo"), (0, "COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: com21HcxSlotEntry.setStatus('current')
hcxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxShelfNo.setStatus('current')
hcxSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSlotId.setStatus('current')
hcxSlotSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("cc", 3), ("com21Exp", 4), ("txDig", 5), ("intConn", 6), ("rxIntConn", 7), ("noCard", 8), ("rxCom21Exp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSlotSupportedTypes.setStatus('current')
hcxSlotConfigCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 8, 1, 1, 4), HcxCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxSlotConfigCardType.setStatus('current')
hcxSlotInsertCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 8, 1, 1, 5), HcxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSlotInsertCardType.setStatus('current')
hcxInsertChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 52)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSlotInsertCardType"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxInsertChange.setStatus('current')
hcxCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 120)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxCardRemoved.setStatus('current')
hcxCardRemClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 121)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxCardRemClear.setStatus('current')
hcxMismatchDetect = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 53)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSlotInsertCardType"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxMismatchDetect.setStatus('current')
hcxMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 54)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSlotInsertCardType"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxMismatchClear.setStatus('current')
hcxCardNoRespond = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 55)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSlotInsertCardType"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxCardNoRespond.setStatus('current')
hcxCardPollFail = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 56)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSlotInsertCardType"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxCardPollFail.setStatus('current')
hcxCardPollFailClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 57)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSlotInsertCardType"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxCardPollFailClear.setStatus('current')
hcxCardDnldFailNoImage = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 58)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxSlotInsertCardType"), ("COM21-HCXTOP-MIB", "hcxShelfNo"), ("COM21-HCXTOP-MIB", "hcxSlotId"))
if mibBuilder.loadTexts: hcxCardDnldFailNoImage.setStatus('current')
com21HcxImageListTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1), )
if mibBuilder.loadTexts: com21HcxImageListTable.setStatus('current')
com21HcxImageListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1), ).setIndexNames((0, "COM21-HCXTOP-MIB", "hcxImageId"))
if mibBuilder.loadTexts: com21HcxImageListEntry.setStatus('current')
hcxImageId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxImageId.setStatus('current')
hcxImageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("hcxCC", 1), ("hcxTx", 2), ("hcxRx", 3), ("hcxEth10baseT", 4), ("hcxEth100baseT", 5), ("hcxTele", 6), ("stu", 7), ("stu3com", 8), ("hcxRxm", 9), ("atmlSwitch", 10), ("compCfg", 11), ("compSwitch", 12), ("hcxOc3", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxImageType.setStatus('current')
hcxImageState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxImageState.setStatus('current')
hcxImageFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxImageFilename.setStatus('current')
hcxSwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSwRevision.setStatus('current')
hcxHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxHwRevision.setStatus('current')
hcxFwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxFwRevision.setStatus('current')
hcxDbAction = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nil", 1), ("saveDb", 2), ("deleteSavedDb", 3), ("deletePeriodicDb", 4), ("revertToPeriodicDb", 5), ("revertToSavedDb", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDbAction.setStatus('current')
hcxDbActionResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("diskFailure", 3), ("noDatabaseFound", 4), ("invalidDatabase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDbActionResult.setStatus('current')
hcxDbActionComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 19)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTOP-MIB", "hcxDbActionResult"))
if mibBuilder.loadTexts: hcxDbActionComplete.setStatus('current')
hcxDbBackupPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDbBackupPeriod.setStatus('current')
com21HcxServTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1), )
if mibBuilder.loadTexts: com21HcxServTypeTable.setStatus('current')
com21HcxServTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1), ).setIndexNames((0, "COM21-HCXTOP-MIB", "hcxServiceTypeId"))
if mibBuilder.loadTexts: com21HcxServTypeEntry.setStatus('current')
hcxServiceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServiceTypeId.setStatus('current')
hcxServTypeDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxServTypeDesc.setStatus('current')
hcxDnStrmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("ondemand", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDnStrmType.setStatus('current')
hcxDnStrmRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDnStrmRate.setStatus('current')
hcxUpStrmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("ondemand", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpStrmType.setStatus('current')
hcxUpStrmMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1650000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpStrmMinRate.setStatus('current')
hcxUpStrmMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1650000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpStrmMaxRate.setStatus('current')
hcxServTypeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxServTypeDelete.setStatus('current')
hcxFileTransProt = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxFileTransProt.setStatus('current')
hcxFileServerCntrl = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootp", 1), ("mibSpecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxFileServerCntrl.setStatus('current')
hcxImageServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxImageServerIpAddr.setStatus('current')
hcxImageServerPath = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxImageServerPath.setStatus('current')
hcxImageServerLogin = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxImageServerLogin.setStatus('current')
hcxImageServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxImageServerPassword.setStatus('current')
hcxDatabaseServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDatabaseServerIpAddr.setStatus('current')
hcxDatabaseServerPath = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDatabaseServerPath.setStatus('current')
hcxDatabaseServerLogin = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDatabaseServerLogin.setStatus('current')
hcxDatabaseServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 18, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDatabaseServerPassword.setStatus('current')
mibBuilder.exportSymbols("COM21-HCXTOP-MIB", com21HcxImageListEntry=com21HcxImageListEntry, com21HcxServTypeGroup=com21HcxServTypeGroup, hcxEventLogSize=hcxEventLogSize, hcxStuAltDownFreq=hcxStuAltDownFreq, hcxServiceTypeId=hcxServiceTypeId, hcxMinorAlarmStatusLed=hcxMinorAlarmStatusLed, hcxStuDefaultVlan=hcxStuDefaultVlan, hcxPowerFailClear=hcxPowerFailClear, hcxFreqHopPause=hcxFreqHopPause, hcxImageFilename=hcxImageFilename, hcxDbActionComplete=hcxDbActionComplete, StuGain=StuGain, hcxRestartAction=hcxRestartAction, hcxStuDefaultServType=hcxStuDefaultServType, hcxStuDef3ComSwImage=hcxStuDef3ComSwImage, hcxPhyConfigType=hcxPhyConfigType, hcxAltAcqFreq=hcxAltAcqFreq, hcxFwRevision=hcxFwRevision, hcxImageType=hcxImageType, hcxDbActionResult=hcxDbActionResult, hcxNumOfShelves=hcxNumOfShelves, hcxIpAddress=hcxIpAddress, hcxTrapReceiverEntry=hcxTrapReceiverEntry, hcxSerialNumber=hcxSerialNumber, hcxUpStrmMinRate=hcxUpStrmMinRate, hcxBootpServer=hcxBootpServer, hcxArpServerTrapEnable=hcxArpServerTrapEnable, hcxStuDefCom21SwImage=hcxStuDefCom21SwImage, com21HcxControlGroup=com21HcxControlGroup, com21HcxTrapRcvrGroup=com21HcxTrapRcvrGroup, hcxStuAutoGainAdjust=hcxStuAutoGainAdjust, UpstrmFreqKhz=UpstrmFreqKhz, hcxTrapFormat=hcxTrapFormat, hcxKeyRenewalPeriod=hcxKeyRenewalPeriod, hcxBootpResult=hcxBootpResult, hcxArpUserTrapEnable=hcxArpUserTrapEnable, hcxGatewayAddress=hcxGatewayAddress, hcxFanFailDetected=hcxFanFailDetected, hcxCardNoRespond=hcxCardNoRespond, hcxHcxSwRelease=hcxHcxSwRelease, com21HcxCompact=com21HcxCompact, hcxMacAddress=hcxMacAddress, PrimServiceState=PrimServiceState, hcxMajorAlarmStatusLed=hcxMajorAlarmStatusLed, hcxMaxUpstrmCBRAlloc=hcxMaxUpstrmCBRAlloc, hcxAcqMinPower=hcxAcqMinPower, hcxTrapRcvrStatus=hcxTrapRcvrStatus, hcxNumAcquiredStus=hcxNumAcquiredStus, hcxServTypeDesc=hcxServTypeDesc, hcxCardRemoved=hcxCardRemoved, HcxCardType=HcxCardType, com21HcxImageListGroup=com21HcxImageListGroup, hcxCnfgBackupAction=hcxCnfgBackupAction, com21HcxImageListTable=com21HcxImageListTable, hcxCardRemClear=hcxCardRemClear, hcxSlotId=hcxSlotId, hcxDatabaseServerPassword=hcxDatabaseServerPassword, hcxCardPollFailClear=hcxCardPollFailClear, hcxDatabaseServerIpAddr=hcxDatabaseServerIpAddr, hcxImageServerPath=hcxImageServerPath, com21HcxServTypeEntry=com21HcxServTypeEntry, hcxPartNumber=hcxPartNumber, hcxAutoLoadBalancing=hcxAutoLoadBalancing, hcxDnStrmType=hcxDnStrmType, hcxStuAutoDiscEnable=hcxStuAutoDiscEnable, hcxDatabaseServerLogin=hcxDatabaseServerLogin, hcxEncryptionEnable=hcxEncryptionEnable, hcxStuPcMacAddress=hcxStuPcMacAddress, Com21RowStatus=Com21RowStatus, hcxSyncClkSelect=hcxSyncClkSelect, hcxImageServerPassword=hcxImageServerPassword, hcxSyncClkConfigure=hcxSyncClkConfigure, hcxStuAltDownFreqEnable=hcxStuAltDownFreqEnable, hcxCardPollFail=hcxCardPollFail, hcxDbAction=hcxDbAction, com21HcxShelfGroup=com21HcxShelfGroup, hcxShelfNoSlots=hcxShelfNoSlots, hcxUpStrmType=hcxUpStrmType, com21HcxShelfTable=com21HcxShelfTable, hcxDnStrmRate=hcxDnStrmRate, hcxStuAutoDiscIpAddr=hcxStuAutoDiscIpAddr, com21HcxPhase30=com21HcxPhase30, hcxNumConfiguredStus=hcxNumConfiguredStus, com21HcxSlotEntry=com21HcxSlotEntry, hcxLastStuTopolgyChng=hcxLastStuTopolgyChng, hcxCardDnldFailNoImage=hcxCardDnldFailNoImage, com21HcxCtrl=com21HcxCtrl, hcxMinorStatusLedChange=hcxMinorStatusLedChange, hcxStuOverMacAddress=hcxStuOverMacAddress, PYSNMP_MODULE_ID=com21HcxCtrl, com21HcxDbControlGroup=com21HcxDbControlGroup, com21HcxSlotGroup=com21HcxSlotGroup, hcxMismatchClear=hcxMismatchClear, hcxIpMask=hcxIpMask, stuTopologyChange=stuTopologyChange, hcxStuAcqTrapEnable=hcxStuAcqTrapEnable, hcxCnfgBackupComplete=hcxCnfgBackupComplete, hcxTrapRcvrAgeTime=hcxTrapRcvrAgeTime, hcxTrapRcvrComm=hcxTrapRcvrComm, hcxFileServerCntrl=hcxFileServerCntrl, hcxBootpFailed=hcxBootpFailed, hcxHcxImageControl=hcxHcxImageControl, com21HcxArpFiltTrapGroup=com21HcxArpFiltTrapGroup, com21HcxAlmOverGroup=com21HcxAlmOverGroup, hcxRestartNotify=hcxRestartNotify, hcxHcxSwDnldComplete=hcxHcxSwDnldComplete, com21HcxServTypeTable=com21HcxServTypeTable, hcxStuGlobalSwImage=hcxStuGlobalSwImage, hcxStuDefaultAuth=hcxStuDefaultAuth, hcxStuPcToStuMacAddressResult=hcxStuPcToStuMacAddressResult, hcxTrapRcvrNetAddress=hcxTrapRcvrNetAddress, hcxStuAggrUpStrmCbrRate=hcxStuAggrUpStrmCbrRate, hcxCnfgBackupResult=hcxCnfgBackupResult, hcxUpStrmMaxRate=hcxUpStrmMaxRate, hcxFileTransProt=hcxFileTransProt, com21HcxBootControlGroup=com21HcxBootControlGroup, hcxMismatchDetect=hcxMismatchDetect, com21HcxShelfEntry=com21HcxShelfEntry, hcxStuAggrUpStrmMaxRate=hcxStuAggrUpStrmMaxRate, hcxImageState=hcxImageState, hcxSwRevision=hcxSwRevision, hcxTrapReceiverTable=hcxTrapReceiverTable, hcxNoCurrAlarms=hcxNoCurrAlarms, hcxStuResourceExhausted=hcxStuResourceExhausted, hcxAutoFreqHopping=hcxAutoFreqHopping, hcxUserText=hcxUserText, hcxMaxDnstrmCBRAlloc=hcxMaxDnstrmCBRAlloc, hcxSlotSupportedTypes=hcxSlotSupportedTypes, com21HcxSlotTable=com21HcxSlotTable, hcxShelfId=hcxShelfId, com21HcxStuOverGroup=com21HcxStuOverGroup, hcxFanFailClear=hcxFanFailClear, hcxHcxSwDnldResult=hcxHcxSwDnldResult, hcxActiveAcqFreq=hcxActiveAcqFreq, hcxShelfNo=hcxShelfNo, hcxInsertChange=hcxInsertChange, hcxImageId=hcxImageId, hcxImageTransfer=hcxImageTransfer, hcxServTypeDelete=hcxServTypeDelete, hcxSlotInsertCardType=hcxSlotInsertCardType, hcxDbBackupPeriod=hcxDbBackupPeriod, com21HcxStuDefaultGroup=com21HcxStuDefaultGroup, hcxSyncClkChange=hcxSyncClkChange, hcxStatsControl=hcxStatsControl, hcxImageServerIpAddr=hcxImageServerIpAddr, hcxImageServerLogin=hcxImageServerLogin, EpochTime=EpochTime, hcxHwRevision=hcxHwRevision, hcxAcquisitionFreq=hcxAcquisitionFreq, hcxDatabaseServerPath=hcxDatabaseServerPath, hcxMajorStatusLedChange=hcxMajorStatusLedChange, hcxHcxAlternateSwRel=hcxHcxAlternateSwRel, hcxStuRpcEnable=hcxStuRpcEnable, hcxNumEnabledStus=hcxNumEnabledStus, hcxStuAggrUpStrmMinRate=hcxStuAggrUpStrmMinRate, hcxEpochTime=hcxEpochTime, hcxSlotConfigCardType=hcxSlotConfigCardType, hcxPowerFailDetected=hcxPowerFailDetected, hcxAcqMaxPower=hcxAcqMaxPower, com21HcxAcqCnfgGroup=com21HcxAcqCnfgGroup, hcxAcqPowerStepSize=hcxAcqPowerStepSize)
