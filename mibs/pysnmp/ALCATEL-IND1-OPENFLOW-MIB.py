#
# PySNMP MIB module ALCATEL-IND1-OPENFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-OPENFLOW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:03:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1OpenflowMIB, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1OpenflowMIB")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Bits, IpAddress, Integer32, MibIdentifier, Gauge32, iso, TimeTicks, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Bits", "IpAddress", "Integer32", "MibIdentifier", "Gauge32", "iso", "TimeTicks", "Unsigned32", "ModuleIdentity")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1OpenflowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1))
alcatelIND1OpenflowMIB.setRevisions(('2013-11-08 00:00',))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setLastUpdated('201311080000Z')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setOrganization('Alcatel-Lucent')
alcatelIND1OpenflowMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 0))
alcatelIND1OpenflowMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBObjects.setStatus('current')
alcatelIND1OpenflowMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBConformance.setStatus('current')
alaOpenflowGlobalConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1))
alaOpenflowGlobalBackoffMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOpenflowGlobalBackoffMax.setStatus('current')
alaOpenflowGlobalIdleProbeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOpenflowGlobalIdleProbeTimeout.setStatus('current')
alaOpenflowLogicalSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2), )
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTable.setStatus('current')
alaOpenflowLogicalSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitch"))
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchEntry.setStatus('current')
alaOpenflowLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowLogicalSwitch.setStatus('current')
alaOpenflowLogicalSwitchAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchAdminState.setStatus('current')
alaOpenflowLogicalSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("api", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchMode.setStatus('current')
alaOpenflowLogicalSwitchVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("v1dot0", 0), ("v1dot3dot1", 1))).clone(namedValues=NamedValues(("v1dot0", 0), ("v1dot3dot1", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVersions.setStatus('current')
alaOpenflowLogicalSwitchVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVlan.setStatus('current')
alaOpenflowLogicalSwitchControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchControllerCount.setStatus('current')
alaOpenflowLogicalSwitchInterfaceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchInterfaceCount.setStatus('current')
alaOpenflowLogicalSwitchFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchFlowCount.setStatus('current')
alaOpenflowLogicalSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchRowStatus.setStatus('current')
alaOpenflowControllerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3), )
if mibBuilder.loadTexts: alaOpenflowControllerTable.setStatus('current')
alaOpenflowControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerIpType"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerIp"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerPort"))
if mibBuilder.loadTexts: alaOpenflowControllerEntry.setStatus('current')
alaOpenflowControllerLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowControllerLogicalSwitch.setStatus('current')
alaOpenflowControllerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 2), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaOpenflowControllerIpType.setStatus('current')
alaOpenflowControllerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaOpenflowControllerIp.setStatus('current')
alaOpenflowControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaOpenflowControllerPort.setStatus('current')
alaOpenflowControllerRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("equal", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowControllerRole.setStatus('current')
alaOpenflowControllerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerAdminState.setStatus('current')
alaOpenflowControllerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("disabled", 2), ("sendError", 3), ("init", 4), ("connecting", 5), ("backoff", 6), ("exchangingHello", 7), ("active", 8), ("idle", 9), ("disconnected", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowControllerOperState.setStatus('current')
alaOpenflowControllerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerRowStatus.setStatus('current')
alaOpenflowInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4), )
if mibBuilder.loadTexts: alaOpenflowInterfaceTable.setStatus('current')
alaOpenflowInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterface"))
if mibBuilder.loadTexts: alaOpenflowInterfaceEntry.setStatus('current')
alaOpenflowInterfaceLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowInterfaceLogicalSwitch.setStatus('current')
alaOpenflowInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaOpenflowInterface.setStatus('current')
alaOpenflowInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("api", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowInterfaceMode.setStatus('current')
alaOpenflowInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceRowStatus.setStatus('current')
alcatelIND1OpenflowMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBGroups.setStatus('current')
alcatelIND1OpenflowMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBCompliances.setStatus('current')
alaOpenflowMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleConfigGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleLogicalSwitchGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleControllerGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowMIBCompliance = alaOpenflowMIBCompliance.setStatus('current')
alaOpenflowModuleConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowGlobalBackoffMax"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowGlobalIdleProbeTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleConfigGroup = alaOpenflowModuleConfigGroup.setStatus('current')
alaOpenflowModuleLogicalSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchAdminState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchMode"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchVersions"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchVlan"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchControllerCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchInterfaceCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchFlowCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleLogicalSwitchGroup = alaOpenflowModuleLogicalSwitchGroup.setStatus('current')
alaOpenflowModuleControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerRole"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerAdminState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerOperState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleControllerGroup = alaOpenflowModuleControllerGroup.setStatus('current')
alaOpenflowModuleInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceMode"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleInterfaceGroup = alaOpenflowModuleInterfaceGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-OPENFLOW-MIB", alaOpenflowGlobalConfigObjects=alaOpenflowGlobalConfigObjects, alaOpenflowControllerLogicalSwitch=alaOpenflowControllerLogicalSwitch, alaOpenflowLogicalSwitchEntry=alaOpenflowLogicalSwitchEntry, alaOpenflowGlobalIdleProbeTimeout=alaOpenflowGlobalIdleProbeTimeout, alaOpenflowInterfaceMode=alaOpenflowInterfaceMode, alaOpenflowModuleLogicalSwitchGroup=alaOpenflowModuleLogicalSwitchGroup, alaOpenflowControllerAdminState=alaOpenflowControllerAdminState, alcatelIND1OpenflowMIBCompliances=alcatelIND1OpenflowMIBCompliances, alaOpenflowModuleConfigGroup=alaOpenflowModuleConfigGroup, alaOpenflowInterfaceLogicalSwitch=alaOpenflowInterfaceLogicalSwitch, alaOpenflowControllerIp=alaOpenflowControllerIp, alaOpenflowLogicalSwitchRowStatus=alaOpenflowLogicalSwitchRowStatus, alaOpenflowGlobalBackoffMax=alaOpenflowGlobalBackoffMax, alaOpenflowControllerTable=alaOpenflowControllerTable, alaOpenflowMIBCompliance=alaOpenflowMIBCompliance, alcatelIND1OpenflowMIB=alcatelIND1OpenflowMIB, alcatelIND1OpenflowMIBGroups=alcatelIND1OpenflowMIBGroups, alaOpenflowInterface=alaOpenflowInterface, alaOpenflowControllerIpType=alaOpenflowControllerIpType, alaOpenflowControllerRowStatus=alaOpenflowControllerRowStatus, alaOpenflowLogicalSwitchVersions=alaOpenflowLogicalSwitchVersions, alaOpenflowControllerEntry=alaOpenflowControllerEntry, alaOpenflowInterfaceTable=alaOpenflowInterfaceTable, alaOpenflowLogicalSwitchControllerCount=alaOpenflowLogicalSwitchControllerCount, alcatelIND1OpenflowMIBNotifications=alcatelIND1OpenflowMIBNotifications, alaOpenflowControllerOperState=alaOpenflowControllerOperState, alaOpenflowModuleInterfaceGroup=alaOpenflowModuleInterfaceGroup, alaOpenflowLogicalSwitchTable=alaOpenflowLogicalSwitchTable, alaOpenflowControllerPort=alaOpenflowControllerPort, alaOpenflowControllerRole=alaOpenflowControllerRole, alaOpenflowLogicalSwitchFlowCount=alaOpenflowLogicalSwitchFlowCount, alaOpenflowLogicalSwitchMode=alaOpenflowLogicalSwitchMode, alaOpenflowLogicalSwitchAdminState=alaOpenflowLogicalSwitchAdminState, alcatelIND1OpenflowMIBObjects=alcatelIND1OpenflowMIBObjects, alaOpenflowLogicalSwitchInterfaceCount=alaOpenflowLogicalSwitchInterfaceCount, alaOpenflowInterfaceRowStatus=alaOpenflowInterfaceRowStatus, alaOpenflowModuleControllerGroup=alaOpenflowModuleControllerGroup, alaOpenflowInterfaceEntry=alaOpenflowInterfaceEntry, alaOpenflowLogicalSwitch=alaOpenflowLogicalSwitch, alcatelIND1OpenflowMIBConformance=alcatelIND1OpenflowMIBConformance, alaOpenflowLogicalSwitchVlan=alaOpenflowLogicalSwitchVlan, PYSNMP_MODULE_ID=alcatelIND1OpenflowMIB)
