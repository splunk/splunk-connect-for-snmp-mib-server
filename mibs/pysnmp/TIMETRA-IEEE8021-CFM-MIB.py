#
# PySNMP MIB module TIMETRA-IEEE8021-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-IEEE8021-CFM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:10:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
Dot1agCfmMepId, dot1agCfmMaIndex, dot1agCfmMepIdentifier, Dot1agCfmMDLevel, dot1agCfmMepDbEntry, dot1agCfmMepEntry, dot1agCfmMaMepListEntry, dot1agCfmMdIndex, dot1agCfmMepTransmitLbmDestMacAddress, Dot1agCfmMepIdOrZero, Dot1agCfmMpDirection, VlanIdOrNone, dot1agCfmMepTransmitLtmSeqNumber, dot1agCfmMaNetEntry = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMepId", "dot1agCfmMaIndex", "dot1agCfmMepIdentifier", "Dot1agCfmMDLevel", "dot1agCfmMepDbEntry", "dot1agCfmMepEntry", "dot1agCfmMaMepListEntry", "dot1agCfmMdIndex", "dot1agCfmMepTransmitLbmDestMacAddress", "Dot1agCfmMepIdOrZero", "Dot1agCfmMpDirection", "VlanIdOrNone", "dot1agCfmMepTransmitLtmSeqNumber", "dot1agCfmMaNetEntry")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, iso, Gauge32, Counter64, Integer32, NotificationType, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "iso", "Gauge32", "Counter64", "Integer32", "NotificationType", "MibIdentifier", "IpAddress")
RowStatus, TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
tmnxSRObjs, timetraSRMIBModules, tmnxSRConfs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRConfs", "tmnxSRNotifyPrefix")
SdpId, = mibBuilder.importSymbols("TIMETRA-SERV-MIB", "SdpId")
TmnxServId, TmnxEnabledDisabled, TItemDescription, TNamedItem = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxServId", "TmnxEnabledDisabled", "TItemDescription", "TNamedItem")
timetraIEEE8021CfmMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 52))
timetraIEEE8021CfmMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1908-01-01 00:00',))
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setOrganization('Alcatel-Lucent')
tmnxDot1agMIBObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52))
tmnxDot1agNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52))
tmnxDot1agNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0))
tmnxDot1agMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52))
tmnxDot1agCfmStack = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1))
tmnxDot1agCfmGlobalObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2))
tmnxDot1agCfmManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3))
tmnxDot1agCfmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6))
tmnxDot1agCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7))
tmnxDot1agCfmMip = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8))
tmnxDot1agCfmNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9))
tmnxDot1agCfmSdpBindStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackTable.setStatus('current')
tmnxDot1agCfmSdpBindStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackSdpId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackVcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackEntry.setStatus('current')
tmnxDot1agCfmSdpBindStackSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 1), SdpId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackSdpId.setStatus('current')
tmnxDot1agCfmSdpBindStackVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackVcId.setStatus('current')
tmnxDot1agCfmSdpBindStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 3), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdLevel.setStatus('current')
tmnxDot1agCfmSdpBindStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 4), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackDirection.setStatus('current')
tmnxDot1agCfmSdpBindStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdIndex.setStatus('current')
tmnxDot1agCfmSdpBindStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMaIndex.setStatus('current')
tmnxDot1agCfmSdpBindStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 7), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMepId.setStatus('current')
tmnxDot1agCfmSdpBindStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMacAddress.setStatus('current')
tmnxDot1agCfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepTable.setStatus('current')
tmnxDot1agCfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEntry"))
tmnxDot1agCfmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepEntry.setStatus('current')
tmnxDot1agCfmMepSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 1), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSdpId.setStatus('current')
tmnxDot1agCfmMepVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepVcId.setStatus('current')
tmnxDot1agCfmMepMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMacAddress.setStatus('current')
tmnxDot1agCfmMepAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisEnable.setStatus('current')
tmnxDot1agCfmMepAisMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 5), Bits().clone(namedValues=NamedValues(("level1", 0), ("level2", 1), ("level3", 2), ("level4", 3), ("level5", 4), ("level6", 5), ("level7", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisMegLevel.setStatus('current')
tmnxDot1agCfmMepAisPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisPriority.setStatus('current')
tmnxDot1agCfmMepAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), )).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisInterval.setStatus('current')
tmnxDot1agCfmMepEthRxAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), )).clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAisInterval.setStatus('current')
tmnxDot1agCfmMepEthRxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAis.setStatus('current')
tmnxDot1agCfmMepEthAisTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthAisTxCount.setStatus('current')
tmnxDot1agCfmMepEthTestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestEnable.setStatus('current')
tmnxDot1agCfmMepEthTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allZerosNoCrc", 0), ("allZerosCrc", 1), ("prbsNoCrc", 2), ("prbsCrc", 3), ("allOnesNoCrc", 4), ("allOnesCrc", 5))).clone('allZerosNoCrc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPattern.setStatus('current')
tmnxDot1agCfmMepEthTestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 13), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestMacAddr.setStatus('current')
tmnxDot1agCfmMepEthTestDataLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestDataLen.setStatus('current')
tmnxDot1agCfmMepEthTestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPriority.setStatus('current')
tmnxDot1agCfmMepOWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 16), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTMacAddress.setStatus('current')
tmnxDot1agCfmMepOWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTPriority.setStatus('current')
tmnxDot1agCfmMepTWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 18), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTMacAddress.setStatus('current')
tmnxDot1agCfmMepTWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTPriority.setStatus('current')
tmnxDot1agCfmMepSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 20), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSvcId.setStatus('current')
tmnxDot1agCfmMepControlMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepControlMep.setStatus('current')
tmnxDot1agCfmMepEthTestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 11840)).clone(1)).setUnits('bit-errors').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestThreshold.setStatus('current')
tmnxDot1agCfmMepOWDTThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTThreshold.setStatus('current')
tmnxDot1agCfmMepFaultPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("useIfStatusTLV", 1), ("suspendCCM", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFaultPropagation.setStatus('current')
tmnxDot1agCfmMepFacilityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 25), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityIfIndex.setStatus('current')
tmnxDot1agCfmMepFacilityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 26), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityVlanId.setStatus('current')
tmnxDot1agCfmMepFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonFacilityType", 0), ("port", 1), ("interface", 2))).clone('nonFacilityType')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityType.setStatus('current')
tmnxDot1agCfmMepFcltyFaultNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyFaultNotify.setStatus('current')
tmnxDot1agCfmMepDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 29), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDescription.setStatus('current')
tmnxDot1agCfmMepMcLagInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcLagInactive.setStatus('current')
tmnxDot1agCfmMepCcmPaddingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1500), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmPaddingSize.setStatus('current')
tmnxDot1agCfmMepCcmIgnoreTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 32), Bits().clone(namedValues=NamedValues(("interfaceStatus", 0), ("portStatus", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmIgnoreTLVs.setStatus('current')
tmnxDot1agCfmMepType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("facilityPort", 1), ("facilityInterface", 2), ("sapPrimaryVlan", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepType.setStatus('current')
tmnxDot1agCfmMepDmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 101), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDmEnable.setStatus('current')
tmnxDot1agCfmStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmStackTable.setStatus('current')
tmnxDot1agCfmStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackifIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackVlanIdOrNone"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmStackEntry.setStatus('current')
tmnxDot1agCfmStackifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmStackifIndex.setStatus('current')
tmnxDot1agCfmStackVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmStackVlanIdOrNone.setStatus('current')
tmnxDot1agCfmStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 3), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdLevel.setStatus('current')
tmnxDot1agCfmStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 4), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmStackDirection.setStatus('current')
tmnxDot1agCfmStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdIndex.setStatus('current')
tmnxDot1agCfmStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMaIndex.setStatus('current')
tmnxDot1agCfmStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 7), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMepId.setStatus('current')
tmnxDot1agCfmStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMacAddress.setStatus('current')
tmnxDot1agCfmStackMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sap", 1), ("ethTun", 2), ("ethRing", 3), ("facPort", 4), ("facInterface", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMPType.setStatus('current')
tmnxDot1agCfmVStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmVStackTable.setStatus('current')
tmnxDot1agCfmVStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackSvcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmVStackEntry.setStatus('current')
tmnxDot1agCfmVStackSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 1), TmnxServId())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackSvcId.setStatus('current')
tmnxDot1agCfmVStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 2), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdLevel.setStatus('current')
tmnxDot1agCfmVStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 3), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackDirection.setStatus('current')
tmnxDot1agCfmVStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdIndex.setStatus('current')
tmnxDot1agCfmVStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMaIndex.setStatus('current')
tmnxDot1agCfmVStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 6), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMepId.setStatus('current')
tmnxDot1agCfmVStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMacAddress.setStatus('current')
tmnxDot1agCfmPVStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4), )
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackTable.setStatus('current')
tmnxDot1agCfmPVStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackifIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackVlanIdOrNone"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackPriVlanId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackEntry.setStatus('current')
tmnxDot1agCfmPVStackifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackifIndex.setStatus('current')
tmnxDot1agCfmPVStackVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackVlanIdOrNone.setStatus('current')
tmnxDot1agCfmPVStackPriVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackPriVlanId.setStatus('current')
tmnxDot1agCfmPVStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 4), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdLevel.setStatus('current')
tmnxDot1agCfmPVStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 5), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackDirection.setStatus('current')
tmnxDot1agCfmPVStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdIndex.setStatus('current')
tmnxDot1agCfmPVStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMaIndex.setStatus('current')
tmnxDot1agCfmPVStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 8), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMepId.setStatus('current')
tmnxDot1agCfmPVStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMacAddress.setStatus('current')
tmnxDot1agCfmMcLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1))
tmnxDot1agCfmMcLagStdbyInactive = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagStdbyInactive.setStatus('current')
tmnxDot1agCfmMcLagPropHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagPropHoldTime.setStatus('current')
tmnxDot1agCfmSLMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 2))
tmnxDot1agCfmSLMInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(100)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmSLMInactivityTimer.setStatus('current')
tmnxDot1agCfmStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3))
tmnxDot1agCfmGlobalPacketStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1))
tmnxDot1agCfmGlobalPacketRxCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketRxCount.setStatus('current')
tmnxDot1agCfmGlobalPacketTxCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketTxCount.setStatus('current')
tmnxDot1agCfmGlobalPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDropped.setStatus('current')
tmnxDot1agCfmGlobalPacketDiscard = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDiscard.setStatus('current')
tmnxDot1agCfmComponentLimitTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitTable.setStatus('current')
tmnxDot1agCfmComponentLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompMajorIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompMinorIndex"))
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitEntry.setStatus('current')
tmnxDot1agCfmCompMajorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmCompMajorIndex.setStatus('current')
tmnxDot1agCfmCompMinorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmCompMinorIndex.setStatus('current')
tmnxDot1agCfmCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 3), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompName.setStatus('current')
tmnxDot1agCfmCompResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceUsage.setStatus('current')
tmnxDot1agCfmCompResourceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceLimit.setStatus('current')
tmnxDot1agCfmSystemScalarsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4))
tmnxDot1agCfmGraceTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmGraceTxEnable.setStatus('current')
tmnxDot1agCfmGracePeriod = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGracePeriod.setStatus('current')
tmnxDot1agCfmMaNetTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTable.setStatus('current')
tmnxDot1agCfmMaNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1), )
dot1agCfmMaNetEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetEntry"))
tmnxDot1agCfmMaNetEntry.setIndexNames(*dot1agCfmMaNetEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetEntry.setStatus('current')
tmnxDot1agCfmMaNetHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetHoldDownTimer.setStatus('current')
tmnxDot1agCfmMaNetTotalMEPCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTotalMEPCount.setStatus('current')
tmnxDot1agCfmMaMepListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListTable.setStatus('current')
tmnxDot1agCfmMaMepListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3, 1), )
dot1agCfmMaMepListEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMepListEntry"))
tmnxDot1agCfmMaMepListEntry.setIndexNames(*dot1agCfmMaMepListEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListEntry.setStatus('current')
tmnxDot1agCfmMaMepListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListMacAddress.setStatus('current')
tmnxDot1agCfmSapMipTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipTable.setStatus('current')
tmnxDot1agCfmSapMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipIfIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipVlanIdOrNone"))
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipEntry.setStatus('current')
tmnxDot1agCfmSapMipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipIfIndex.setStatus('current')
tmnxDot1agCfmSapMipVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipVlanIdOrNone.setStatus('current')
tmnxDot1agCfmSapMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipRowStatus.setStatus('current')
tmnxDot1agCfmSapMipSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipSrcMacAddress.setStatus('current')
tmnxDot1agCfmSdpMipTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipTable.setStatus('current')
tmnxDot1agCfmSdpMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSvcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSdpId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipVcId"))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipEntry.setStatus('current')
tmnxDot1agCfmSdpMipSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 1), TmnxServId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSvcId.setStatus('current')
tmnxDot1agCfmSdpMipSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 2), SdpId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSdpId.setStatus('current')
tmnxDot1agCfmSdpMipVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipVcId.setStatus('current')
tmnxDot1agCfmSdpMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipRowStatus.setStatus('current')
tmnxDot1agCfmSdpMipSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSrcMacAddress.setStatus('current')
tmnxDot1agCfmMepMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtTable.setStatus('current')
tmnxDot1agCfmMepMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtEntry"))
tmnxDot1agCfmMepMgmtEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtEntry.setStatus('current')
tmnxDot1agCfmMepMgmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtRowStatus.setStatus('current')
tmnxDot1agCfmMepMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("facilityPort", 1), ("facilityInterface", 2), ("sapPrimaryVlan", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtType.setStatus('current')
tmnxDot1agCfmMepMgmtServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 3), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtServiceId.setStatus('current')
tmnxDot1agCfmMepMgmtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtIfIndex.setStatus('current')
tmnxDot1agCfmMepMgmtPrimaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtPrimaryVid.setStatus('current')
tmnxDot1agCfmMepMgmtSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 6), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtSdpId.setStatus('current')
tmnxDot1agCfmMepMgmtVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtVcId.setStatus('current')
tmnxDot1agCfmMepMgmtFcltyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyIfIndex.setStatus('current')
tmnxDot1agCfmMepMgmtFcltyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 9), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyVlanId.setStatus('current')
tmnxDot1agCfmMepMgmtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 50), Dot1agCfmMpDirection().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtDirection.setStatus('current')
tmnxDot1agCfmMepEthTestRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltTable.setStatus('current')
tmnxDot1agCfmMepEthTestRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSrcMacAddress"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltEntry.setStatus('current')
tmnxDot1agCfmMepSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSrcMacAddress.setStatus('current')
tmnxDot1agCfmMepFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFrameCount.setStatus('current')
tmnxDot1agCfmMepByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepByteCount.setStatus('current')
tmnxDot1agCfmMepFailedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFailedBits.setStatus('current')
tmnxDot1agCfmMepCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCrcFailures.setStatus('current')
tmnxDot1agCfmMepCurrByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrByteCount.setStatus('current')
tmnxDot1agCfmMepCurrFailedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrFailedBits.setStatus('current')
tmnxDot1agCfmMepCurrCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrCrcFailures.setStatus('current')
tmnxDot1agCfmMepDelayRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltTable.setStatus('current')
tmnxDot1agCfmMepDelayRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelaySrcMacAddr"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestType"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltEntry.setStatus('current')
tmnxDot1agCfmMepDelaySrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelaySrcMacAddr.setStatus('current')
tmnxDot1agCfmMepDelayTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWayTest", 1), ("twoWayTest", 2))))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestType.setStatus('current')
tmnxDot1agCfmMepDelayTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 3), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestDelay.setStatus('current')
tmnxDot1agCfmMepDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayVariation.setStatus('current')
tmnxDot1agCfmMepSlmTWTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestTable.setStatus('current')
tmnxDot1agCfmMepSlmTWTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestEntry"))
tmnxDot1agCfmMepSlmTWTestEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestEntry.setStatus('current')
tmnxDot1agCfmMepSlmTWTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestStatus.setStatus('current')
tmnxDot1agCfmMepSlmTWTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestId.setStatus('current')
tmnxDot1agCfmMepSlmTWMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWMacAddress.setStatus('current')
tmnxDot1agCfmMepSlmTWPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWPriority.setStatus('current')
tmnxDot1agCfmMepSlmTWInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWInterval.setStatus('current')
tmnxDot1agCfmMepSlmTWTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTimeout.setStatus('current')
tmnxDot1agCfmMepSlmTWDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWDataSize.setStatus('current')
tmnxDot1agCfmMepSlmTWSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWSendCount.setStatus('current')
tmnxDot1agCfmMepSlmTWIntrvlUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seconds", 1), ("centiseconds", 2))).clone('seconds')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWIntrvlUnits.setStatus('current')
tmnxDot1agCfmMepSlmOWTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestTable.setStatus('current')
tmnxDot1agCfmMepSlmOWTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestEntry"))
tmnxDot1agCfmMepSlmOWTestEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestEntry.setStatus('current')
tmnxDot1agCfmMepSlmOWTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestStatus.setStatus('current')
tmnxDot1agCfmMepSlmOWTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestId.setStatus('current')
tmnxDot1agCfmMepSlmOWMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWMacAddress.setStatus('current')
tmnxDot1agCfmMepSlmOWPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWPriority.setStatus('current')
tmnxDot1agCfmMepSlmOWInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWInterval.setStatus('current')
tmnxDot1agCfmMepSlmOWDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWDataSize.setStatus('current')
tmnxDot1agCfmMepSlmOWSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWSendCount.setStatus('current')
tmnxDot1agCfmMepSlmTestRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltTable.setStatus('current')
tmnxDot1agCfmMepSlmTestRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestType"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMacAddr"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltEntry.setStatus('current')
tmnxDot1agCfmMepSlmTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWayTest", 1), ("twoWayTest", 2))))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestType.setStatus('current')
tmnxDot1agCfmMepSlmRemoteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMacAddr.setStatus('current')
tmnxDot1agCfmMepSlmTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestId.setStatus('current')
tmnxDot1agCfmMepSlmRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 4), Dot1agCfmMepId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMepId.setStatus('current')
tmnxDot1agCfmMepSlmLastTxSeqF = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmLastTxSeqF.setStatus('current')
tmnxDot1agCfmMepSlmPacketIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketIn.setStatus('current')
tmnxDot1agCfmMepSlmPacketLossIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 7), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossIn.setStatus('current')
tmnxDot1agCfmMepSlmPacketLossOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 8), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossOut.setStatus('current')
tmnxDot1agCfmMepSlmPacketUnack = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 9), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketUnack.setStatus('current')
tmnxDot1agCfmMepMcstLbmRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltTable.setStatus('current')
tmnxDot1agCfmMepMcstLbmRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRemoteMepMac"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmSeqNumber"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRxIndex"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltEntry.setStatus('current')
tmnxDot1agCfmMepLbmRemoteMepMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRemoteMepMac.setStatus('current')
tmnxDot1agCfmMepLbmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmSeqNumber.setStatus('current')
tmnxDot1agCfmMepLbmRxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRxIndex.setStatus('current')
tmnxDot1agCfmMepDbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbTable.setStatus('current')
tmnxDot1agCfmMepDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8, 1), )
dot1agCfmMepDbEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDbEntry"))
tmnxDot1agCfmMepDbEntry.setIndexNames(*dot1agCfmMepDbEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbEntry.setStatus('current')
tmnxDot1agCfmMepDbGraceRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbGraceRx.setStatus('current')
tmnxDot1agCfmNotifySvcId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9, 1), TmnxServId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDot1agCfmNotifySvcId.setStatus('current')
tmnxDot1agCfmMepLbmTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 1)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepTransmitLbmDestMacAddress"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmTestComplete.setStatus('current')
tmnxDot1agCfmMepLtmTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 2)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepTransmitLtmSeqNumber"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepLtmTestComplete.setStatus('current')
tmnxDot1agCfmMepEthTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrCrcFailures"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestComplete.setStatus('current')
tmnxDot1agCfmMepDMTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestDelay"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDMTestComplete.setStatus('current')
tmnxDot1agCfmMepAisStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAis"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisStateChanged.setStatus('current')
tmnxDot1agCfmMipEvaluation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotifySvcId"))
if mibBuilder.loadTexts: tmnxDot1agCfmMipEvaluation.setStatus('current')
tmnxDot1agCfmMepSLMTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmLastTxSeqF"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossOut"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketUnack"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSLMTestComplete.setStatus('current')
tmnxDot1agCfmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1))
tmnxDot1agCfmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2))
tmnxDot1agCfmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmCompliance = tmnxDot1agCfmCompliance.setStatus('obsolete')
tmnxDot1agCfmComplianceV7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV7v0 = tmnxDot1agCfmComplianceV7v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV8v0 = tmnxDot1agCfmComplianceV8v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV9v0 = tmnxDot1agCfmComplianceV9v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGPGroupV10v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV10v0 = tmnxDot1agCfmComplianceV10v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV11v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGPGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMEPMgmtGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdGroupV11v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV11v0 = tmnxDot1agCfmComplianceV11v0.setStatus('current')
tmnxDot1agCfmSdpBindStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmSdpBindStackGroup = tmnxDot1agCfmSdpBindStackGroup.setStatus('current')
tmnxDot1agCfmMepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroup = tmnxDot1agCfmMepGroup.setStatus('obsolete')
tmnxDot1agCfmSapStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmSapStackGroup = tmnxDot1agCfmSapStackGroup.setStatus('current')
tmnxDot1agCfmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLtmTestComplete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmNotificationGroup = tmnxDot1agCfmNotificationGroup.setStatus('current')
tmnxDot1agCfmMipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipGroup = tmnxDot1agCfmMipGroup.setStatus('obsolete')
tmnxDot1agCfmMepGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisMegLevel"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestPattern"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAisInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAis"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthAisTxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestMacAddr"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestDataLen"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFrameCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCrcFailures"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrCrcFailures"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestDelay"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayVariation"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSvcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepControlMep"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestThreshold"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTThreshold"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMPType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV7v0 = tmnxDot1agCfmMepGroupV7v0.setStatus('current')
tmnxY1731CfmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDMTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisStateChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxY1731CfmNotificationGroup = tmnxY1731CfmNotificationGroup.setStatus('current')
tmnxDot1agCfmNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 8)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotifySvcId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmNotifyObjsGroup = tmnxDot1agCfmNotifyObjsGroup.setStatus('current')
tmnxDot1agCfmMipNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 9)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipEvaluation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipNotifyGroup = tmnxDot1agCfmMipNotifyGroup.setStatus('current')
tmnxDot1agCfmV6v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 10))
tmnxDot1agCfmV7v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 11))
tmnxDot1agCfmV8v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12))
tmnxDot1agCfmMipGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipSrcMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSrcMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipGroupV8v0 = tmnxDot1agCfmMipGroupV8v0.setStatus('current')
tmnxDot1agCfmMepGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFaultPropagation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV8v0 = tmnxDot1agCfmMepGroupV8v0.setStatus('current')
tmnxDot1agCfmV9v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13))
tmnxDot1agCfmMaGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetHoldDownTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV9v0 = tmnxDot1agCfmMaGroupV9v0.setStatus('current')
tmnxDot1agCfmMepGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityVlanId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyFaultNotify"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDescription"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcLagInactive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV9v0 = tmnxDot1agCfmMepGroupV9v0.setStatus('current')
tmnxDot1agCfmGlobalGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMcLagStdbyInactive"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMcLagPropHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmGlobalGroupV9v0 = tmnxDot1agCfmGlobalGroupV9v0.setStatus('current')
tmnxDot1agCfmMepSlmGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSLMInactivityTimer"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTimeout"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWDataSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWSendCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWDataSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWSendCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmLastTxSeqF"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossOut"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketUnack"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmGroupV9v0 = tmnxDot1agCfmMepSlmGroupV9v0.setStatus('current')
tmnxDot1agCfmMepSlmNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSLMTestComplete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmNotifyGroup = tmnxDot1agCfmMepSlmNotifyGroup.setStatus('current')
tmnxDot1agCfmMepMcastLbmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRxIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepMcastLbmGroup = tmnxDot1agCfmMepMcastLbmGroup.setStatus('current')
tmnxDot1agCfmV10v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14))
tmnxDot1agCfmMepSlmTWGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWIntrvlUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmTWGroupV10v0 = tmnxDot1agCfmMepSlmTWGroupV10v0.setStatus('current')
tmnxDot1agCfmMaGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMepListMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetTotalMEPCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV10v0 = tmnxDot1agCfmMaGroupV10v0.setStatus('current')
tmnxDot1agCfmMepGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmPaddingSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmIgnoreTLVs"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDmEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV10v0 = tmnxDot1agCfmMepGroupV10v0.setStatus('current')
tmnxDot1agCfmStatsGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketRxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketTxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketDropped"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketDiscard"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompResourceUsage"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompResourceLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmStatsGroupV10v0 = tmnxDot1agCfmStatsGroupV10v0.setStatus('current')
tmnxDot1agCfmGPGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGraceTxEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGracePeriod"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDbGraceRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmGPGroupV10v0 = tmnxDot1agCfmGPGroupV10v0.setStatus('current')
tmnxDot1agCfmV11v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15))
tmnxDot1agCfmMEPMgmtGroupV11v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtServiceId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtPrimaryVid"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtFcltyIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtFcltyVlanId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtDirection"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMEPMgmtGroupV11v0 = tmnxDot1agCfmMEPMgmtGroupV11v0.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-IEEE8021-CFM-MIB", tmnxDot1agCfmMepMgmtSdpId=tmnxDot1agCfmMepMgmtSdpId, tmnxDot1agCfmMepSlmTWSendCount=tmnxDot1agCfmMepSlmTWSendCount, tmnxDot1agCfmMepFaultPropagation=tmnxDot1agCfmMepFaultPropagation, tmnxDot1agCfmMaGroupV9v0=tmnxDot1agCfmMaGroupV9v0, tmnxDot1agCfmMepOWDTThreshold=tmnxDot1agCfmMepOWDTThreshold, tmnxDot1agCfmStackMPType=tmnxDot1agCfmStackMPType, tmnxDot1agCfmSapMipTable=tmnxDot1agCfmSapMipTable, tmnxDot1agCfmSdpMipTable=tmnxDot1agCfmSdpMipTable, tmnxDot1agCfmMepDelayRsltTable=tmnxDot1agCfmMepDelayRsltTable, tmnxDot1agCfmMepSlmTWInterval=tmnxDot1agCfmMepSlmTWInterval, tmnxDot1agCfmMepLbmSeqNumber=tmnxDot1agCfmMepLbmSeqNumber, tmnxDot1agCfmV9v0Groups=tmnxDot1agCfmV9v0Groups, tmnxDot1agCfmSdpBindStackMaIndex=tmnxDot1agCfmSdpBindStackMaIndex, tmnxDot1agCfmVStackMacAddress=tmnxDot1agCfmVStackMacAddress, tmnxDot1agCfmPVStackDirection=tmnxDot1agCfmPVStackDirection, tmnxDot1agCfmMepSvcId=tmnxDot1agCfmMepSvcId, tmnxDot1agMIBObjs=tmnxDot1agMIBObjs, tmnxDot1agCfmMepMacAddress=tmnxDot1agCfmMepMacAddress, tmnxDot1agCfmStatsGroupV10v0=tmnxDot1agCfmStatsGroupV10v0, tmnxDot1agCfmVStackSvcId=tmnxDot1agCfmVStackSvcId, tmnxDot1agCfmMcLagPropHoldTime=tmnxDot1agCfmMcLagPropHoldTime, tmnxDot1agCfmMepEthTestDataLen=tmnxDot1agCfmMepEthTestDataLen, tmnxDot1agCfmMepDelayTestDelay=tmnxDot1agCfmMepDelayTestDelay, tmnxDot1agCfmMepSlmGroupV9v0=tmnxDot1agCfmMepSlmGroupV9v0, tmnxDot1agCfmMepEthRxAisInterval=tmnxDot1agCfmMepEthRxAisInterval, tmnxDot1agCfmManagementObjects=tmnxDot1agCfmManagementObjects, PYSNMP_MODULE_ID=timetraIEEE8021CfmMIBModule, tmnxDot1agCfmGraceTxEnable=tmnxDot1agCfmGraceTxEnable, tmnxDot1agCfmMepTable=tmnxDot1agCfmMepTable, tmnxDot1agCfmPVStackVlanIdOrNone=tmnxDot1agCfmPVStackVlanIdOrNone, tmnxDot1agCfmSdpBindStackMdIndex=tmnxDot1agCfmSdpBindStackMdIndex, tmnxDot1agCfmMepSrcMacAddress=tmnxDot1agCfmMepSrcMacAddress, tmnxDot1agCfmPVStackMacAddress=tmnxDot1agCfmPVStackMacAddress, tmnxDot1agCfmGlobalPacketTxCount=tmnxDot1agCfmGlobalPacketTxCount, tmnxDot1agCfmNotifySvcId=tmnxDot1agCfmNotifySvcId, tmnxDot1agCfmSLMInactivityTimer=tmnxDot1agCfmSLMInactivityTimer, tmnxDot1agCfmV8v0Groups=tmnxDot1agCfmV8v0Groups, tmnxDot1agCfmStackMacAddress=tmnxDot1agCfmStackMacAddress, tmnxDot1agCfmMepFacilityVlanId=tmnxDot1agCfmMepFacilityVlanId, tmnxDot1agCfmStackDirection=tmnxDot1agCfmStackDirection, tmnxDot1agCfmMepEthTestMacAddr=tmnxDot1agCfmMepEthTestMacAddr, tmnxDot1agCfmMaNetHoldDownTimer=tmnxDot1agCfmMaNetHoldDownTimer, tmnxDot1agCfmComponentLimitTable=tmnxDot1agCfmComponentLimitTable, tmnxDot1agCfmMaNetTotalMEPCount=tmnxDot1agCfmMaNetTotalMEPCount, tmnxDot1agCfmMepMgmtDirection=tmnxDot1agCfmMepMgmtDirection, tmnxDot1agCfmSapMipVlanIdOrNone=tmnxDot1agCfmSapMipVlanIdOrNone, tmnxDot1agCfmMepDelayVariation=tmnxDot1agCfmMepDelayVariation, tmnxDot1agCfmMepFcltyFaultNotify=tmnxDot1agCfmMepFcltyFaultNotify, tmnxDot1agCfmMcLagStdbyInactive=tmnxDot1agCfmMcLagStdbyInactive, tmnxDot1agCfmMepFacilityIfIndex=tmnxDot1agCfmMepFacilityIfIndex, tmnxDot1agCfmMepSlmTWTestId=tmnxDot1agCfmMepSlmTWTestId, tmnxDot1agCfmMepEthTestComplete=tmnxDot1agCfmMepEthTestComplete, tmnxDot1agCfmMipGroupV8v0=tmnxDot1agCfmMipGroupV8v0, tmnxDot1agCfmMepType=tmnxDot1agCfmMepType, tmnxDot1agCfmGlobalPacketRxCount=tmnxDot1agCfmGlobalPacketRxCount, tmnxDot1agCfmMep=tmnxDot1agCfmMep, tmnxDot1agCfmMepDmEnable=tmnxDot1agCfmMepDmEnable, tmnxDot1agCfmStack=tmnxDot1agCfmStack, tmnxDot1agCfmMepTWDTMacAddress=tmnxDot1agCfmMepTWDTMacAddress, tmnxDot1agCfmComplianceV8v0=tmnxDot1agCfmComplianceV8v0, tmnxDot1agCfmGroups=tmnxDot1agCfmGroups, tmnxDot1agCfmMepSlmOWSendCount=tmnxDot1agCfmMepSlmOWSendCount, tmnxDot1agCfmMepMgmtTable=tmnxDot1agCfmMepMgmtTable, tmnxDot1agCfmSapMipIfIndex=tmnxDot1agCfmSapMipIfIndex, tmnxDot1agCfmMepSlmTWPriority=tmnxDot1agCfmMepSlmTWPriority, tmnxDot1agCfmGlobalGroupV9v0=tmnxDot1agCfmGlobalGroupV9v0, tmnxDot1agCfmMepSlmTWGroupV10v0=tmnxDot1agCfmMepSlmTWGroupV10v0, tmnxDot1agCfmMepGroupV10v0=tmnxDot1agCfmMepGroupV10v0, tmnxDot1agCfmSdpBindStackMacAddress=tmnxDot1agCfmSdpBindStackMacAddress, tmnxDot1agCfmPVStackMdLevel=tmnxDot1agCfmPVStackMdLevel, tmnxDot1agCfmMepDbGraceRx=tmnxDot1agCfmMepDbGraceRx, tmnxDot1agCfmMepSlmTWIntrvlUnits=tmnxDot1agCfmMepSlmTWIntrvlUnits, tmnxDot1agCfmMepEthAisTxCount=tmnxDot1agCfmMepEthAisTxCount, tmnxDot1agCfmSapStackGroup=tmnxDot1agCfmSapStackGroup, tmnxDot1agCfmMepVcId=tmnxDot1agCfmMepVcId, tmnxDot1agCfmMepGroupV9v0=tmnxDot1agCfmMepGroupV9v0, tmnxDot1agCfmComplianceV9v0=tmnxDot1agCfmComplianceV9v0, tmnxDot1agCfmMepTWDTPriority=tmnxDot1agCfmMepTWDTPriority, tmnxDot1agCfmPVStackPriVlanId=tmnxDot1agCfmPVStackPriVlanId, tmnxDot1agCfmCompMinorIndex=tmnxDot1agCfmCompMinorIndex, tmnxDot1agCfmSapMipSrcMacAddress=tmnxDot1agCfmSapMipSrcMacAddress, tmnxDot1agCfmMepMgmtPrimaryVid=tmnxDot1agCfmMepMgmtPrimaryVid, tmnxDot1agCfmMepSlmTWTestEntry=tmnxDot1agCfmMepSlmTWTestEntry, tmnxDot1agCfmGlobalPacketDiscard=tmnxDot1agCfmGlobalPacketDiscard, tmnxDot1agCfmMepCrcFailures=tmnxDot1agCfmMepCrcFailures, tmnxDot1agCfmMepDelayRsltEntry=tmnxDot1agCfmMepDelayRsltEntry, tmnxDot1agCfmComplianceV10v0=tmnxDot1agCfmComplianceV10v0, tmnxDot1agCfmMepSlmPacketLossIn=tmnxDot1agCfmMepSlmPacketLossIn, tmnxY1731CfmNotificationGroup=tmnxY1731CfmNotificationGroup, tmnxDot1agCfmNotifyObjsGroup=tmnxDot1agCfmNotifyObjsGroup, tmnxDot1agCfmMepMgmtType=tmnxDot1agCfmMepMgmtType, tmnxDot1agMIBConformance=tmnxDot1agMIBConformance, tmnxDot1agCfmMepMgmtServiceId=tmnxDot1agCfmMepMgmtServiceId, tmnxDot1agCfmStackEntry=tmnxDot1agCfmStackEntry, tmnxDot1agCfmMepSlmTWTimeout=tmnxDot1agCfmMepSlmTWTimeout, tmnxDot1agCfmSdpBindStackVcId=tmnxDot1agCfmSdpBindStackVcId, tmnxDot1agCfmMepEntry=tmnxDot1agCfmMepEntry, tmnxDot1agCfmMepSlmTWDataSize=tmnxDot1agCfmMepSlmTWDataSize, tmnxDot1agCfmMepSlmPacketLossOut=tmnxDot1agCfmMepSlmPacketLossOut, tmnxDot1agCfmMepLtmTestComplete=tmnxDot1agCfmMepLtmTestComplete, tmnxDot1agCfmMepMgmtIfIndex=tmnxDot1agCfmMepMgmtIfIndex, tmnxDot1agCfmMepSlmLastTxSeqF=tmnxDot1agCfmMepSlmLastTxSeqF, tmnxDot1agCfmMepEthTestThreshold=tmnxDot1agCfmMepEthTestThreshold, tmnxDot1agCfmMepGroup=tmnxDot1agCfmMepGroup, tmnxDot1agCfmMepSlmOWTestStatus=tmnxDot1agCfmMepSlmOWTestStatus, tmnxDot1agCfmMepSlmTWTestTable=tmnxDot1agCfmMepSlmTWTestTable, tmnxDot1agCfmComplianceV11v0=tmnxDot1agCfmComplianceV11v0, tmnxDot1agCfmMepGroupV8v0=tmnxDot1agCfmMepGroupV8v0, tmnxDot1agCfmMepFacilityType=tmnxDot1agCfmMepFacilityType, tmnxDot1agCfmComplianceV7v0=tmnxDot1agCfmComplianceV7v0, tmnxDot1agCfmMepDbTable=tmnxDot1agCfmMepDbTable, tmnxDot1agCfmMepOWDTMacAddress=tmnxDot1agCfmMepOWDTMacAddress, tmnxDot1agCfmMepSlmTestId=tmnxDot1agCfmMepSlmTestId, tmnxDot1agCfmPVStackMdIndex=tmnxDot1agCfmPVStackMdIndex, tmnxDot1agCfmMepMgmtFcltyVlanId=tmnxDot1agCfmMepMgmtFcltyVlanId, tmnxDot1agCfmMepDelaySrcMacAddr=tmnxDot1agCfmMepDelaySrcMacAddr, tmnxDot1agCfmMepSlmTWTestStatus=tmnxDot1agCfmMepSlmTWTestStatus, tmnxDot1agCfmMepSLMTestComplete=tmnxDot1agCfmMepSLMTestComplete, tmnxDot1agCfmSdpMipSrcMacAddress=tmnxDot1agCfmSdpMipSrcMacAddress, tmnxDot1agCfmStackMdLevel=tmnxDot1agCfmStackMdLevel, tmnxDot1agCfmComponentLimitEntry=tmnxDot1agCfmComponentLimitEntry, tmnxDot1agCfmCompResourceLimit=tmnxDot1agCfmCompResourceLimit, tmnxDot1agCfmVStackDirection=tmnxDot1agCfmVStackDirection, tmnxDot1agCfmGlobalObjs=tmnxDot1agCfmGlobalObjs, tmnxDot1agCfmMepDMTestComplete=tmnxDot1agCfmMepDMTestComplete, tmnxDot1agCfmCompResourceUsage=tmnxDot1agCfmCompResourceUsage, tmnxDot1agCfmStackifIndex=tmnxDot1agCfmStackifIndex, tmnxDot1agCfmVStackMepId=tmnxDot1agCfmVStackMepId, tmnxDot1agCfmMepLbmTestComplete=tmnxDot1agCfmMepLbmTestComplete, tmnxDot1agCfmStatisticsGroup=tmnxDot1agCfmStatisticsGroup, tmnxDot1agCfmV10v0Groups=tmnxDot1agCfmV10v0Groups, tmnxDot1agCfmSdpBindStackGroup=tmnxDot1agCfmSdpBindStackGroup, tmnxDot1agCfmMipGroup=tmnxDot1agCfmMipGroup, tmnxDot1agCfmMepOWDTPriority=tmnxDot1agCfmMepOWDTPriority, tmnxDot1agCfmMepFrameCount=tmnxDot1agCfmMepFrameCount, tmnxDot1agCfmPVStackMaIndex=tmnxDot1agCfmPVStackMaIndex, tmnxDot1agCfmVStackTable=tmnxDot1agCfmVStackTable, tmnxDot1agCfmMepSlmTestRsltEntry=tmnxDot1agCfmMepSlmTestRsltEntry, tmnxDot1agCfmMepMcstLbmRsltEntry=tmnxDot1agCfmMepMcstLbmRsltEntry, tmnxDot1agCfmGlobalPacketStats=tmnxDot1agCfmGlobalPacketStats, tmnxDot1agCfmMepSlmOWInterval=tmnxDot1agCfmMepSlmOWInterval, tmnxDot1agCfmMepSlmRemoteMacAddr=tmnxDot1agCfmMepSlmRemoteMacAddr, tmnxDot1agCfmSdpBindStackTable=tmnxDot1agCfmSdpBindStackTable, tmnxDot1agCfmMepSlmPacketUnack=tmnxDot1agCfmMepSlmPacketUnack, tmnxDot1agCfmMepSlmPacketIn=tmnxDot1agCfmMepSlmPacketIn, tmnxDot1agCfmMa=tmnxDot1agCfmMa, tmnxDot1agCfmMepSlmOWTestTable=tmnxDot1agCfmMepSlmOWTestTable, timetraIEEE8021CfmMIBModule=timetraIEEE8021CfmMIBModule, tmnxDot1agCfmNotificationGroup=tmnxDot1agCfmNotificationGroup, tmnxDot1agCfmMepMgmtVcId=tmnxDot1agCfmMepMgmtVcId, tmnxDot1agCfmPVStackMepId=tmnxDot1agCfmPVStackMepId, tmnxDot1agCfmV6v0Groups=tmnxDot1agCfmV6v0Groups, tmnxDot1agCfmMepSdpId=tmnxDot1agCfmMepSdpId, tmnxDot1agCfmMepMcstLbmRsltTable=tmnxDot1agCfmMepMcstLbmRsltTable, tmnxDot1agCfmSystemScalarsGroup=tmnxDot1agCfmSystemScalarsGroup, tmnxDot1agCfmMaMepListMacAddress=tmnxDot1agCfmMaMepListMacAddress, tmnxDot1agCfmCompliance=tmnxDot1agCfmCompliance, tmnxDot1agCfmCompMajorIndex=tmnxDot1agCfmCompMajorIndex, tmnxDot1agCfmMepSlmNotifyGroup=tmnxDot1agCfmMepSlmNotifyGroup, tmnxDot1agCfmMepLbmRxIndex=tmnxDot1agCfmMepLbmRxIndex, tmnxDot1agCfmSdpMipRowStatus=tmnxDot1agCfmSdpMipRowStatus, tmnxDot1agCfmPVStackEntry=tmnxDot1agCfmPVStackEntry, tmnxDot1agCfmSdpMipSvcId=tmnxDot1agCfmSdpMipSvcId, tmnxDot1agCfmMepMcLagInactive=tmnxDot1agCfmMepMcLagInactive, tmnxDot1agCfmMepSlmRemoteMepId=tmnxDot1agCfmMepSlmRemoteMepId, tmnxDot1agCfmMaGroupV10v0=tmnxDot1agCfmMaGroupV10v0, tmnxDot1agCfmGPGroupV10v0=tmnxDot1agCfmGPGroupV10v0, tmnxDot1agCfmMcLagConfigGroup=tmnxDot1agCfmMcLagConfigGroup, tmnxDot1agCfmMepLbmRemoteMepMac=tmnxDot1agCfmMepLbmRemoteMepMac, tmnxDot1agCfmMepDelayTestType=tmnxDot1agCfmMepDelayTestType, tmnxDot1agNotifications=tmnxDot1agNotifications, tmnxDot1agCfmMepControlMep=tmnxDot1agCfmMepControlMep, tmnxDot1agCfmMaMepListEntry=tmnxDot1agCfmMaMepListEntry, tmnxDot1agCfmSapMipRowStatus=tmnxDot1agCfmSapMipRowStatus, tmnxDot1agCfmMepAisMegLevel=tmnxDot1agCfmMepAisMegLevel, tmnxDot1agCfmSapMipEntry=tmnxDot1agCfmSapMipEntry, tmnxDot1agCfmMepSlmTestRsltTable=tmnxDot1agCfmMepSlmTestRsltTable, tmnxDot1agCfmGracePeriod=tmnxDot1agCfmGracePeriod, tmnxDot1agCfmMepEthRxAis=tmnxDot1agCfmMepEthRxAis, tmnxDot1agCfmVStackMaIndex=tmnxDot1agCfmVStackMaIndex, tmnxDot1agCfmMaNetTable=tmnxDot1agCfmMaNetTable, tmnxDot1agCfmMepByteCount=tmnxDot1agCfmMepByteCount, tmnxDot1agCfmMepCurrFailedBits=tmnxDot1agCfmMepCurrFailedBits, tmnxDot1agCfmSdpMipEntry=tmnxDot1agCfmSdpMipEntry, tmnxDot1agCfmMepAisInterval=tmnxDot1agCfmMepAisInterval, tmnxDot1agCfmV11v0Groups=tmnxDot1agCfmV11v0Groups, tmnxDot1agCfmMepCcmIgnoreTLVs=tmnxDot1agCfmMepCcmIgnoreTLVs, tmnxDot1agCfmMepSlmTWMacAddress=tmnxDot1agCfmMepSlmTWMacAddress, tmnxDot1agCfmSdpBindStackMepId=tmnxDot1agCfmSdpBindStackMepId, tmnxDot1agCfmCompName=tmnxDot1agCfmCompName, tmnxDot1agCfmMepCurrCrcFailures=tmnxDot1agCfmMepCurrCrcFailures, tmnxDot1agCfmPVStackTable=tmnxDot1agCfmPVStackTable, tmnxDot1agCfmMepDbEntry=tmnxDot1agCfmMepDbEntry, tmnxDot1agCfmMepAisStateChanged=tmnxDot1agCfmMepAisStateChanged, tmnxDot1agCfmMepCurrByteCount=tmnxDot1agCfmMepCurrByteCount, tmnxDot1agCfmMipNotifyGroup=tmnxDot1agCfmMipNotifyGroup, tmnxDot1agCfmStackMdIndex=tmnxDot1agCfmStackMdIndex, tmnxDot1agCfmStackVlanIdOrNone=tmnxDot1agCfmStackVlanIdOrNone, tmnxDot1agCfmSdpBindStackSdpId=tmnxDot1agCfmSdpBindStackSdpId, tmnxDot1agCfmSLMConfigGroup=tmnxDot1agCfmSLMConfigGroup, tmnxDot1agCfmMepAisPriority=tmnxDot1agCfmMepAisPriority, tmnxDot1agCfmMepSlmOWTestEntry=tmnxDot1agCfmMepSlmOWTestEntry, tmnxDot1agCfmMaMepListTable=tmnxDot1agCfmMaMepListTable, tmnxDot1agCfmSdpBindStackEntry=tmnxDot1agCfmSdpBindStackEntry, tmnxDot1agCfmSdpMipSdpId=tmnxDot1agCfmSdpMipSdpId, tmnxDot1agCfmMepSlmTestType=tmnxDot1agCfmMepSlmTestType, tmnxDot1agCfmMEPMgmtGroupV11v0=tmnxDot1agCfmMEPMgmtGroupV11v0, tmnxDot1agCfmSdpBindStackMdLevel=tmnxDot1agCfmSdpBindStackMdLevel, tmnxDot1agCfmCompliances=tmnxDot1agCfmCompliances, tmnxDot1agCfmStackTable=tmnxDot1agCfmStackTable, tmnxDot1agCfmMepMcastLbmGroup=tmnxDot1agCfmMepMcastLbmGroup, tmnxDot1agCfmStackMepId=tmnxDot1agCfmStackMepId, tmnxDot1agCfmPVStackifIndex=tmnxDot1agCfmPVStackifIndex, tmnxDot1agCfmMepEthTestRsltTable=tmnxDot1agCfmMepEthTestRsltTable, tmnxDot1agCfmMip=tmnxDot1agCfmMip, tmnxDot1agCfmMepSlmOWMacAddress=tmnxDot1agCfmMepSlmOWMacAddress, tmnxDot1agCfmMepMgmtRowStatus=tmnxDot1agCfmMepMgmtRowStatus, tmnxDot1agCfmMipEvaluation=tmnxDot1agCfmMipEvaluation, tmnxDot1agCfmMepDescription=tmnxDot1agCfmMepDescription, tmnxDot1agCfmStackMaIndex=tmnxDot1agCfmStackMaIndex, tmnxDot1agCfmMepEthTestRsltEntry=tmnxDot1agCfmMepEthTestRsltEntry, tmnxDot1agCfmMepSlmOWPriority=tmnxDot1agCfmMepSlmOWPriority, tmnxDot1agCfmMepGroupV7v0=tmnxDot1agCfmMepGroupV7v0, tmnxDot1agCfmGlobalPacketDropped=tmnxDot1agCfmGlobalPacketDropped, tmnxDot1agCfmMepEthTestPriority=tmnxDot1agCfmMepEthTestPriority, tmnxDot1agCfmMepFailedBits=tmnxDot1agCfmMepFailedBits, tmnxDot1agCfmMepSlmOWTestId=tmnxDot1agCfmMepSlmOWTestId, tmnxDot1agCfmMepSlmOWDataSize=tmnxDot1agCfmMepSlmOWDataSize, tmnxDot1agCfmMepEthTestPattern=tmnxDot1agCfmMepEthTestPattern, tmnxDot1agCfmMepAisEnable=tmnxDot1agCfmMepAisEnable, tmnxDot1agCfmVStackEntry=tmnxDot1agCfmVStackEntry, tmnxDot1agCfmMepEthTestEnable=tmnxDot1agCfmMepEthTestEnable, tmnxDot1agCfmVStackMdLevel=tmnxDot1agCfmVStackMdLevel, tmnxDot1agCfmMaNetEntry=tmnxDot1agCfmMaNetEntry, tmnxDot1agCfmSdpBindStackDirection=tmnxDot1agCfmSdpBindStackDirection, tmnxDot1agCfmSdpMipVcId=tmnxDot1agCfmSdpMipVcId, tmnxDot1agCfmV7v0Groups=tmnxDot1agCfmV7v0Groups, tmnxDot1agNotificationsPrefix=tmnxDot1agNotificationsPrefix, tmnxDot1agCfmVStackMdIndex=tmnxDot1agCfmVStackMdIndex, tmnxDot1agCfmMepMgmtFcltyIfIndex=tmnxDot1agCfmMepMgmtFcltyIfIndex, tmnxDot1agCfmMepMgmtEntry=tmnxDot1agCfmMepMgmtEntry, tmnxDot1agCfmMepCcmPaddingSize=tmnxDot1agCfmMepCcmPaddingSize, tmnxDot1agCfmNotificationObjs=tmnxDot1agCfmNotificationObjs)
