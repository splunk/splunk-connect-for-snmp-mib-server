#
# PySNMP MIB module TMS-L3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TMS-L3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:16:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, Integer32, IpAddress, NotificationType, MibIdentifier, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, iso, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "IpAddress", "NotificationType", "MibIdentifier", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "iso", "ObjectIdentity", "Counter64")
DisplayString, MacAddress, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TruthValue", "TextualConvention")
tmsGeneric, = mibBuilder.importSymbols("WRS-MASTER-MIB", "tmsGeneric")
tmsL3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 731, 2, 2, 2))
tmsL3Mib.setRevisions(('2001-04-12 00:00',))
if mibBuilder.loadTexts: tmsL3Mib.setLastUpdated('200104120000Z')
if mibBuilder.loadTexts: tmsL3Mib.setOrganization('Wind River Systems, Inc.')
tmsL3IpMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 1))
tmsL3IpSubnet = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2))
tmsL3IpStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3))
tmsL3IpDynamic = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4))
tmsL3IpRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5))
tmsL3MibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6))
tmsL3MibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 1))
tmsL3MibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 2))
tmsL3IpMiscNumLogicalPorts = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpMiscNumLogicalPorts.setStatus('current')
tmsL3IpMiscRoutingProtocol = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rip", 2), ("ospf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmsL3IpMiscRoutingProtocol.setStatus('current')
tmsL3IpMiscOspfv2Config = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpMiscOspfv2Config.setStatus('current')
tmsL3IpSubnetMaxRows = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpSubnetMaxRows.setStatus('current')
tmsL3IpSubnetCurrentRows = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpSubnetCurrentRows.setStatus('current')
tmsL3IpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3), )
if mibBuilder.loadTexts: tmsL3IpSubnetTable.setStatus('current')
tmsL3IpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3, 1), ).setIndexNames((0, "TMS-L3-MIB", "tmsL3IpSubnetIfIndex"), (0, "TMS-L3-MIB", "tmsL3IpSubnetAgentIpAddr"))
if mibBuilder.loadTexts: tmsL3IpSubnetEntry.setStatus('current')
tmsL3IpSubnetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: tmsL3IpSubnetIfIndex.setStatus('current')
tmsL3IpSubnetAgentIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: tmsL3IpSubnetAgentIpAddr.setStatus('current')
tmsL3IpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpSubnetMask.setStatus('current')
tmsL3IpSubnetVidIface = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpSubnetVidIface.setStatus('current')
tmsL3IpSubnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpSubnetName.setStatus('current')
tmsL3IpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpSubnetRowStatus.setStatus('current')
tmsL3IpStaticMaxHwHosts = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpStaticMaxHwHosts.setStatus('current')
tmsL3IpStaticNumStaticHwHosts = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmsL3IpStaticNumStaticHwHosts.setStatus('current')
tmsL3IpStaticMaxHwSubnets = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpStaticMaxHwSubnets.setStatus('current')
tmsL3IpStaticNumStaticHwSubnets = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmsL3IpStaticNumStaticHwSubnets.setStatus('current')
tmsL3IpStaticRouteMaxRows = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpStaticRouteMaxRows.setStatus('current')
tmsL3IpStaticRouteCurrentRows = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpStaticRouteCurrentRows.setStatus('current')
tmsL3IpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7), )
if mibBuilder.loadTexts: tmsL3IpStaticRouteTable.setStatus('current')
tmsL3IpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1), ).setIndexNames((0, "TMS-L3-MIB", "tmsL3IpStaticDestIpAddr"))
if mibBuilder.loadTexts: tmsL3IpStaticRouteEntry.setStatus('current')
tmsL3IpStaticDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmsL3IpStaticDestIpAddr.setStatus('current')
tmsL3IpStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpStaticMask.setStatus('current')
tmsL3IpStaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpStaticNextHop.setStatus('current')
tmsL3IpStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpStaticName.setStatus('current')
tmsL3IpStaticUseHw = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpStaticUseHw.setStatus('current')
tmsL3IpStaticInHw = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpStaticInHw.setStatus('current')
tmsL3IpStaticGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpStaticGateway.setStatus('current')
tmsL3IpStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 3, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpStaticRowStatus.setStatus('current')
tmsL3IpDynamicRouteCurrentRows = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpDynamicRouteCurrentRows.setStatus('current')
tmsL3IpDynamicRouteTable = MibTable((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2), )
if mibBuilder.loadTexts: tmsL3IpDynamicRouteTable.setStatus('current')
tmsL3IpDynamicRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1), ).setIndexNames((0, "TMS-L3-MIB", "tmsL3IpDynamicDestIpAddr"))
if mibBuilder.loadTexts: tmsL3IpDynamicRouteEntry.setStatus('current')
tmsL3IpDynamicDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmsL3IpDynamicDestIpAddr.setStatus('current')
tmsL3IpDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpDynamicMask.setStatus('current')
tmsL3IpDynamicNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpDynamicNextHop.setStatus('current')
tmsL3IpDynamicName = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpDynamicName.setStatus('current')
tmsL3IpDynamicUseHw = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpDynamicUseHw.setStatus('current')
tmsL3IpDynamicInHw = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpDynamicInHw.setStatus('current')
tmsL3IpDynamicGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpDynamicGateway.setStatus('current')
tmsL3IpDynamicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 4, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpDynamicRowStatus.setStatus('current')
tmsL3IpRouteTableCurrentSwEntries = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteTableCurrentSwEntries.setStatus('current')
tmsL3IpRouteCurrentHwHosts = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteCurrentHwHosts.setStatus('current')
tmsL3IpRouteCurrentHwSubnets = MibScalar((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteCurrentHwSubnets.setStatus('current')
tmsL3IpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4), )
if mibBuilder.loadTexts: tmsL3IpRouteTable.setStatus('current')
tmsL3IpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1), ).setIndexNames((0, "TMS-L3-MIB", "tmsL3IpRouteDest"))
if mibBuilder.loadTexts: tmsL3IpRouteEntry.setStatus('current')
tmsL3IpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmsL3IpRouteDest.setStatus('current')
tmsL3IpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpRouteMask.setStatus('current')
tmsL3IpRouteNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpRouteNextHopIp.setStatus('current')
tmsL3IpRouteNextHopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteNextHopMac.setStatus('current')
tmsL3IpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteIfIndex.setStatus('current')
tmsL3IpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpRouteType.setStatus('current')
tmsL3IpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteProto.setStatus('current')
tmsL3IpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteAge.setStatus('current')
tmsL3IpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteMetric1.setStatus('current')
tmsL3IpRouteUsingHw = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteUsingHw.setStatus('current')
tmsL3IpRouteIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteIsStatic.setStatus('current')
tmsL3IpRouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteFlags.setStatus('current')
tmsL3IpRouteRef = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteRef.setStatus('current')
tmsL3IpRouteUse = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmsL3IpRouteUse.setStatus('current')
tmsL3IpRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 5, 4, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmsL3IpRouteRowStatus.setStatus('current')
tmsL3IpMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 1, 1)).setObjects(("TMS-L3-MIB", "tmsL3IpMiscNumLogicalPorts"), ("TMS-L3-MIB", "tmsL3IpMiscRoutingProtocol"), ("TMS-L3-MIB", "tmsL3IpMiscOspfv2Config"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmsL3IpMiscGroup = tmsL3IpMiscGroup.setStatus('current')
tmsL3IpSubnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 1, 2)).setObjects(("TMS-L3-MIB", "tmsL3IpSubnetMaxRows"), ("TMS-L3-MIB", "tmsL3IpSubnetCurrentRows"), ("TMS-L3-MIB", "tmsL3IpSubnetMask"), ("TMS-L3-MIB", "tmsL3IpSubnetVidIface"), ("TMS-L3-MIB", "tmsL3IpSubnetName"), ("TMS-L3-MIB", "tmsL3IpSubnetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmsL3IpSubnetGroup = tmsL3IpSubnetGroup.setStatus('current')
tmsL3IpStaticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 1, 3)).setObjects(("TMS-L3-MIB", "tmsL3IpStaticMaxHwHosts"), ("TMS-L3-MIB", "tmsL3IpStaticNumStaticHwHosts"), ("TMS-L3-MIB", "tmsL3IpStaticMaxHwSubnets"), ("TMS-L3-MIB", "tmsL3IpStaticNumStaticHwSubnets"), ("TMS-L3-MIB", "tmsL3IpStaticRouteMaxRows"), ("TMS-L3-MIB", "tmsL3IpStaticRouteCurrentRows"), ("TMS-L3-MIB", "tmsL3IpStaticMask"), ("TMS-L3-MIB", "tmsL3IpStaticNextHop"), ("TMS-L3-MIB", "tmsL3IpStaticName"), ("TMS-L3-MIB", "tmsL3IpStaticUseHw"), ("TMS-L3-MIB", "tmsL3IpStaticInHw"), ("TMS-L3-MIB", "tmsL3IpStaticGateway"), ("TMS-L3-MIB", "tmsL3IpStaticRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmsL3IpStaticGroup = tmsL3IpStaticGroup.setStatus('current')
tmsL3IpDynamicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 1, 4)).setObjects(("TMS-L3-MIB", "tmsL3IpDynamicRouteCurrentRows"), ("TMS-L3-MIB", "tmsL3IpDynamicMask"), ("TMS-L3-MIB", "tmsL3IpDynamicNextHop"), ("TMS-L3-MIB", "tmsL3IpDynamicName"), ("TMS-L3-MIB", "tmsL3IpDynamicUseHw"), ("TMS-L3-MIB", "tmsL3IpDynamicInHw"), ("TMS-L3-MIB", "tmsL3IpDynamicGateway"), ("TMS-L3-MIB", "tmsL3IpDynamicRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmsL3IpDynamicGroup = tmsL3IpDynamicGroup.setStatus('current')
tmsL3IpRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 1, 5)).setObjects(("TMS-L3-MIB", "tmsL3IpRouteTableCurrentSwEntries"), ("TMS-L3-MIB", "tmsL3IpRouteCurrentHwHosts"), ("TMS-L3-MIB", "tmsL3IpRouteCurrentHwSubnets"), ("TMS-L3-MIB", "tmsL3IpRouteMask"), ("TMS-L3-MIB", "tmsL3IpRouteNextHopIp"), ("TMS-L3-MIB", "tmsL3IpRouteNextHopMac"), ("TMS-L3-MIB", "tmsL3IpRouteIfIndex"), ("TMS-L3-MIB", "tmsL3IpRouteType"), ("TMS-L3-MIB", "tmsL3IpRouteProto"), ("TMS-L3-MIB", "tmsL3IpRouteAge"), ("TMS-L3-MIB", "tmsL3IpRouteMetric1"), ("TMS-L3-MIB", "tmsL3IpRouteUsingHw"), ("TMS-L3-MIB", "tmsL3IpRouteIsStatic"), ("TMS-L3-MIB", "tmsL3IpRouteFlags"), ("TMS-L3-MIB", "tmsL3IpRouteRef"), ("TMS-L3-MIB", "tmsL3IpRouteUse"), ("TMS-L3-MIB", "tmsL3IpRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmsL3IpRouteGroup = tmsL3IpRouteGroup.setStatus('current')
tmsL3MibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 731, 2, 2, 2, 6, 2, 1)).setObjects(("TMS-L3-MIB", "tmsL3IpMiscGroup"), ("TMS-L3-MIB", "tmsL3IpSubnetGroup"), ("TMS-L3-MIB", "tmsL3IpStaticGroup"), ("TMS-L3-MIB", "tmsL3IpDynamicGroup"), ("TMS-L3-MIB", "tmsL3IpRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmsL3MibCompliance = tmsL3MibCompliance.setStatus('current')
mibBuilder.exportSymbols("TMS-L3-MIB", tmsL3IpStaticName=tmsL3IpStaticName, tmsL3IpStaticMask=tmsL3IpStaticMask, tmsL3IpDynamicName=tmsL3IpDynamicName, tmsL3IpRouteNextHopMac=tmsL3IpRouteNextHopMac, tmsL3IpStaticRouteEntry=tmsL3IpStaticRouteEntry, tmsL3IpRouteRowStatus=tmsL3IpRouteRowStatus, tmsL3MibCompliance=tmsL3MibCompliance, tmsL3IpSubnetIfIndex=tmsL3IpSubnetIfIndex, tmsL3IpDynamicRouteTable=tmsL3IpDynamicRouteTable, tmsL3IpRouteAge=tmsL3IpRouteAge, tmsL3IpSubnetCurrentRows=tmsL3IpSubnetCurrentRows, tmsL3MibGroups=tmsL3MibGroups, tmsL3IpDynamicGateway=tmsL3IpDynamicGateway, tmsL3IpStaticRouteTable=tmsL3IpStaticRouteTable, tmsL3IpDynamicMask=tmsL3IpDynamicMask, tmsL3IpRouteRef=tmsL3IpRouteRef, tmsL3IpMiscGroup=tmsL3IpMiscGroup, tmsL3IpMisc=tmsL3IpMisc, tmsL3IpStaticInHw=tmsL3IpStaticInHw, tmsL3IpStaticNextHop=tmsL3IpStaticNextHop, tmsL3IpRouteType=tmsL3IpRouteType, tmsL3IpStaticNumStaticHwSubnets=tmsL3IpStaticNumStaticHwSubnets, tmsL3IpRouteUse=tmsL3IpRouteUse, tmsL3IpRoute=tmsL3IpRoute, tmsL3IpStatic=tmsL3IpStatic, tmsL3IpStaticGateway=tmsL3IpStaticGateway, tmsL3IpDynamicUseHw=tmsL3IpDynamicUseHw, tmsL3IpStaticNumStaticHwHosts=tmsL3IpStaticNumStaticHwHosts, tmsL3IpRouteUsingHw=tmsL3IpRouteUsingHw, tmsL3IpStaticDestIpAddr=tmsL3IpStaticDestIpAddr, tmsL3IpSubnetMaxRows=tmsL3IpSubnetMaxRows, tmsL3IpDynamicInHw=tmsL3IpDynamicInHw, tmsL3IpMiscRoutingProtocol=tmsL3IpMiscRoutingProtocol, tmsL3IpDynamicGroup=tmsL3IpDynamicGroup, tmsL3IpRouteProto=tmsL3IpRouteProto, tmsL3IpDynamicDestIpAddr=tmsL3IpDynamicDestIpAddr, tmsL3IpRouteDest=tmsL3IpRouteDest, tmsL3IpMiscNumLogicalPorts=tmsL3IpMiscNumLogicalPorts, tmsL3IpDynamicRouteEntry=tmsL3IpDynamicRouteEntry, PYSNMP_MODULE_ID=tmsL3Mib, tmsL3IpStaticUseHw=tmsL3IpStaticUseHw, tmsL3IpRouteMetric1=tmsL3IpRouteMetric1, tmsL3IpRouteIfIndex=tmsL3IpRouteIfIndex, tmsL3IpDynamic=tmsL3IpDynamic, tmsL3IpSubnetName=tmsL3IpSubnetName, tmsL3IpSubnetMask=tmsL3IpSubnetMask, tmsL3IpSubnetAgentIpAddr=tmsL3IpSubnetAgentIpAddr, tmsL3IpStaticMaxHwSubnets=tmsL3IpStaticMaxHwSubnets, tmsL3IpRouteCurrentHwHosts=tmsL3IpRouteCurrentHwHosts, tmsL3IpSubnetGroup=tmsL3IpSubnetGroup, tmsL3IpRouteNextHopIp=tmsL3IpRouteNextHopIp, tmsL3IpRouteGroup=tmsL3IpRouteGroup, tmsL3IpStaticGroup=tmsL3IpStaticGroup, tmsL3IpRouteFlags=tmsL3IpRouteFlags, tmsL3IpRouteIsStatic=tmsL3IpRouteIsStatic, tmsL3MibCompliances=tmsL3MibCompliances, tmsL3IpStaticRouteCurrentRows=tmsL3IpStaticRouteCurrentRows, tmsL3IpRouteCurrentHwSubnets=tmsL3IpRouteCurrentHwSubnets, tmsL3IpRouteTable=tmsL3IpRouteTable, tmsL3IpSubnetTable=tmsL3IpSubnetTable, tmsL3IpSubnetVidIface=tmsL3IpSubnetVidIface, tmsL3MibConformance=tmsL3MibConformance, tmsL3IpRouteTableCurrentSwEntries=tmsL3IpRouteTableCurrentSwEntries, tmsL3IpDynamicNextHop=tmsL3IpDynamicNextHop, tmsL3IpSubnetEntry=tmsL3IpSubnetEntry, tmsL3IpDynamicRouteCurrentRows=tmsL3IpDynamicRouteCurrentRows, tmsL3IpStaticMaxHwHosts=tmsL3IpStaticMaxHwHosts, tmsL3IpDynamicRowStatus=tmsL3IpDynamicRowStatus, tmsL3IpRouteEntry=tmsL3IpRouteEntry, tmsL3IpRouteMask=tmsL3IpRouteMask, tmsL3IpSubnetRowStatus=tmsL3IpSubnetRowStatus, tmsL3Mib=tmsL3Mib, tmsL3IpStaticRowStatus=tmsL3IpStaticRowStatus, tmsL3IpStaticRouteMaxRows=tmsL3IpStaticRouteMaxRows, tmsL3IpMiscOspfv2Config=tmsL3IpMiscOspfv2Config, tmsL3IpSubnet=tmsL3IpSubnet)
