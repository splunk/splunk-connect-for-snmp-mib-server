#
# PySNMP MIB module XEDIA-HDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-HDLC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:36:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Gauge32, ModuleIdentity, Integer32, iso, TimeTicks, Counter64, ObjectIdentity, NotificationType, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "ModuleIdentity", "Integer32", "iso", "TimeTicks", "Counter64", "ObjectIdentity", "NotificationType", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaHdlcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 7))
if mibBuilder.loadTexts: xediaHdlcMIB.setLastUpdated('9703252155Z')
if mibBuilder.loadTexts: xediaHdlcMIB.setOrganization('Xedia Corp.')
xhdlcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 7, 1))
xhdlcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 7, 2))
xhdlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 1), )
if mibBuilder.loadTexts: xhdlcStatsTable.setStatus('current')
xhdlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xhdlcStatsEntry.setStatus('current')
xhdlcStatsOutErrorUnderFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xhdlcStatsOutErrorUnderFlows.setStatus('current')
xhdlcStatsInAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xhdlcStatsInAborts.setStatus('current')
xhdlcStatsInResidualBits = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xhdlcStatsInResidualBits.setStatus('current')
xhdlcStatsInInvalidLen = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xhdlcStatsInInvalidLen.setStatus('current')
xhdlcStatsInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xhdlcStatsInOverrun.setStatus('current')
xhdlcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 2), )
if mibBuilder.loadTexts: xhdlcConfigTable.setStatus('current')
xhdlcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xhdlcConfigEntry.setStatus('current')
xhdlcConfigClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loopback", 3))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xhdlcConfigClocking.setStatus('current')
xhdlcConfigCrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2), ("crcnone", 3))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xhdlcConfigCrcMode.setStatus('current')
xhdlcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 7, 2, 1))
xhdlcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 7, 2, 2))
xhdlcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 7, 2, 1, 1)).setObjects(("XEDIA-HDLC-MIB", "xhdlcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xhdlcCompliance = xhdlcCompliance.setStatus('current')
xhdlcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 7, 2, 2, 1)).setObjects(("XEDIA-HDLC-MIB", "xhdlcStatsOutErrorUnderFlows"), ("XEDIA-HDLC-MIB", "xhdlcStatsInAborts"), ("XEDIA-HDLC-MIB", "xhdlcStatsInResidualBits"), ("XEDIA-HDLC-MIB", "xhdlcStatsInInvalidLen"), ("XEDIA-HDLC-MIB", "xhdlcStatsInOverrun"), ("XEDIA-HDLC-MIB", "xhdlcConfigClocking"), ("XEDIA-HDLC-MIB", "xhdlcConfigCrcMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xhdlcGroup = xhdlcGroup.setStatus('current')
mibBuilder.exportSymbols("XEDIA-HDLC-MIB", xhdlcGroup=xhdlcGroup, xhdlcStatsInResidualBits=xhdlcStatsInResidualBits, xhdlcConfigEntry=xhdlcConfigEntry, xhdlcConformance=xhdlcConformance, xhdlcStatsTable=xhdlcStatsTable, xhdlcObjects=xhdlcObjects, xhdlcStatsEntry=xhdlcStatsEntry, xhdlcCompliances=xhdlcCompliances, xhdlcConfigCrcMode=xhdlcConfigCrcMode, xhdlcConfigClocking=xhdlcConfigClocking, PYSNMP_MODULE_ID=xediaHdlcMIB, xediaHdlcMIB=xediaHdlcMIB, xhdlcStatsInInvalidLen=xhdlcStatsInInvalidLen, xhdlcStatsInOverrun=xhdlcStatsInOverrun, xhdlcStatsInAborts=xhdlcStatsInAborts, xhdlcGroups=xhdlcGroups, xhdlcCompliance=xhdlcCompliance, xhdlcConfigTable=xhdlcConfigTable, xhdlcStatsOutErrorUnderFlows=xhdlcStatsOutErrorUnderFlows)
