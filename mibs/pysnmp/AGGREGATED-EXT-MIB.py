#
# PySNMP MIB module AGGREGATED-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AGGREGATED-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, enterprises, snmpModules, ObjectName, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, Unsigned32, MibIdentifier, iso, NotificationType, Bits, TimeTicks, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "enterprises", "snmpModules", "ObjectName", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "Unsigned32", "MibIdentifier", "iso", "NotificationType", "Bits", "TimeTicks", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention, RowStatus, TruthValue, TimeStamp, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue", "TimeStamp", "TestAndIncr")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
excel = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67))
excel1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 1))
excel2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 2))
excel3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 3))
excel4 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 4))
softSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
if mibBuilder.loadTexts: softSwitch.setLastUpdated('240701')
if mibBuilder.loadTexts: softSwitch.setOrganization('Lucent Technologies')
h323DeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3))
resourceMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4))
sipDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 5))
psaxDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6))
cdrDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 7))
spinsDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8))
fcDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9))
softswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10))
mantraAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 99))
mantraTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1))
h323TrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2))
rmTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3))
fcTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 4))
mantraTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 99, 0))
h323DS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 1))
h323DS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 2))
sipDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 5, 1))
sipDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 5, 2))
cdrDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 7, 1))
cdrDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 7, 2))
spinsDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 1))
spinsDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 2))
fcDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 1))
fcDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 2))
psaxDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 1))
psaxDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 2))
rm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 1))
rm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 2))
rm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3))
rm4 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 4))
pepName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pepName.setStatus('current')
devName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: devName.setStatus('current')
file = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: file.setStatus('current')
host = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: host.setStatus('current')
port = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 32565))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: port.setStatus('current')
oldFile = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldFile.setStatus('current')
newFile = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newFile.setStatus('current')
minutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: minutes.setStatus('current')
result = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: result.setStatus('current')
reason = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: reason.setStatus('current')
snName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: snName.setStatus('current')
myHost = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: myHost.setStatus('current')
myPort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 32565))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: myPort.setStatus('current')
mateHost = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mateHost.setStatus('current')
matePort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 32565))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: matePort.setStatus('current')
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceType.setStatus('current')
domain = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: domain.setStatus('current')
group = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: group.setStatus('current')
name = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: name.setStatus('current')
runStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: runStatus.setStatus('current')
timeOccurred = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: timeOccurred.setStatus('current')
code = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: code.setStatus('current')
csID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csID.setStatus('current')
csType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csType.setStatus('current')
registrationStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: registrationStatus.setStatus('current')
comment = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: comment.setStatus('current')
gwID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gwID.setStatus('current')
moduleID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: moduleID.setStatus('current')
percent = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: percent.setStatus('current')
gwIP = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 10), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gwIP.setStatus('current')
gwType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gwType.setStatus('current')
percentage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: percentage.setStatus('current')
status = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: status.setStatus('current')
load = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: load.setStatus('current')
disk = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: disk.setStatus('current')
curSize = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: curSize.setStatus('current')
maxSize = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: maxSize.setStatus('current')
processName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: processName.setStatus('current')
processID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: processID.setStatus('current')
cpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpuUsage.setStatus('current')
memUsage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: memUsage.setStatus('current')
sbProducerHost = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 4, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sbProducerHost.setStatus('current')
sbProducerPort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sbProducerPort.setStatus('current')
unknownDeviceTrapContents = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 98), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownDeviceTrapContents.setStatus('current')
lastAggNode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastAggNode.setStatus('current')
mibBuilder.exportSymbols("AGGREGATED-EXT-MIB", h323DS2=h323DS2, name=name, unknownDeviceTrapContents=unknownDeviceTrapContents, oldFile=oldFile, rm1=rm1, csType=csType, load=load, port=port, rmTrapVariables=rmTrapVariables, pepName=pepName, h323TrapVariables=h323TrapVariables, excel4=excel4, sbProducerHost=sbProducerHost, code=code, rm4=rm4, disk=disk, domain=domain, lucent=lucent, spinsDeviceServer=spinsDeviceServer, psaxDS1=psaxDS1, gwID=gwID, host=host, products=products, softswitchTraps=softswitchTraps, minutes=minutes, sbProducerPort=sbProducerPort, registrationStatus=registrationStatus, myPort=myPort, psaxDeviceServer=psaxDeviceServer, newFile=newFile, mantraTraps=mantraTraps, fcTrapVariables=fcTrapVariables, matePort=matePort, runStatus=runStatus, excel3=excel3, h323DS1=h323DS1, snName=snName, group=group, processID=processID, h323DeviceServer=h323DeviceServer, mantraAdmin=mantraAdmin, excel=excel, gwIP=gwIP, rm2=rm2, resourceMonitor=resourceMonitor, spinsDS1=spinsDS1, cdrDeviceServer=cdrDeviceServer, excel1=excel1, PYSNMP_MODULE_ID=softSwitch, reason=reason, percent=percent, lastAggNode=lastAggNode, result=result, cpuUsage=cpuUsage, rm3=rm3, status=status, gwType=gwType, sipDeviceServer=sipDeviceServer, fcDS1=fcDS1, fcDS2=fcDS2, devName=devName, spinsDS2=spinsDS2, memUsage=memUsage, comment=comment, cdrDS1=cdrDS1, csID=csID, mateHost=mateHost, fcDeviceServer=fcDeviceServer, moduleID=moduleID, softSwitch=softSwitch, percentage=percentage, psaxDS2=psaxDS2, deviceType=deviceType, curSize=curSize, cdrDS2=cdrDS2, excel2=excel2, myHost=myHost, sipDS2=sipDS2, maxSize=maxSize, mantraTrapVars=mantraTrapVars, file=file, sipDS1=sipDS1, timeOccurred=timeOccurred, processName=processName)
