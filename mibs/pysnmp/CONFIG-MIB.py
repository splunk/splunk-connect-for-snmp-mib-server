#
# PySNMP MIB module CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dot1dStpPortDesignatedBridge, dot1dStpPortState, dot1dStpPortDesignatedPort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortDesignatedBridge", "dot1dStpPortState", "dot1dStpPortDesignatedPort")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
HpPartnerDeviceTypeList, HpPartnerDeviceType = mibBuilder.importSymbols("HP-ICF-DEV-CONF-MIB", "HpPartnerDeviceTypeList", "HpPartnerDeviceType")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
HpSwitchPortType, HpSwitchIfMauAutoNegCapReceivedBits, HpSwitchIfMauTypeListBits, HpSwitchIfMauAutoNegCapabilityBits, ConfigStatus, HpSwitchIfMauAutoNegCapAdvertisedBits = mibBuilder.importSymbols("HP-ICF-TC", "HpSwitchPortType", "HpSwitchIfMauAutoNegCapReceivedBits", "HpSwitchIfMauTypeListBits", "HpSwitchIfMauAutoNegCapabilityBits", "ConfigStatus", "HpSwitchIfMauAutoNegCapAdvertisedBits")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Integer32, Counter64, ModuleIdentity, NotificationType, iso, TimeTicks, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "Counter64", "ModuleIdentity", "NotificationType", "iso", "TimeTicks", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "MibIdentifier", "IpAddress")
RowStatus, TruthValue, DisplayString, MacAddress, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "MacAddress", "TextualConvention", "TimeStamp")
hpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7))
class VlanID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class Timeout(Integer32):
    pass

class HpicfUsrProfilePortSpeed(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("speed10HDX", 1), ("speed100HDX", 2), ("speed10FDx", 3), ("speed100FDx", 4), ("speedAuto", 5), ("speed1000FDx", 6), ("speedAuto10Mbits", 7), ("speedAuto100Mbits", 8), ("speedAuto1000Mbits", 9), ("speedAuto-10Gbits", 10), ("speedAuto10or100Mbits", 11))

hpSwitchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1))
hpSwitchSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1))
hpSwitchAutoReboot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("useHw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutoReboot.setStatus('mandatory')
hpSwitchTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTimeZone.setStatus('mandatory')
hpSwitchDaylightTimeRule = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("alaska", 2), ("canadaAndContinentalUS", 3), ("middleEuropeAndPortugal", 4), ("southernHemisphere", 5), ("westernEurop", 6), ("userDefined", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightTimeRule.setStatus('mandatory')
hpSwitchDaylightBeginningMonth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightBeginningMonth.setStatus('mandatory')
hpSwitchDaylightBeginningDay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightBeginningDay.setStatus('mandatory')
hpSwitchDaylightEndingMonth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightEndingMonth.setStatus('mandatory')
hpSwitchDaylightEndingDay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightEndingDay.setStatus('mandatory')
hpSwitchSystemConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 8), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSystemConfigStatus.setStatus('mandatory')
hpSwitchSystemPortLEDMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link-activity", 1), ("link-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSystemPortLEDMode.setStatus('mandatory')
hpSwitchControlUnknownIPMulticast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchControlUnknownIPMulticast.setStatus('mandatory')
hpSwitchIgmpDelayedGroupFlushTimer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpDelayedGroupFlushTimer.setStatus('mandatory')
hpSwitchMaxFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMaxFrameSize.setStatus('mandatory')
hpSwitchIpMTU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpMTU.setStatus('mandatory')
hpSwitchAllowV1Modules = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAllowV1Modules.setStatus('mandatory')
hpSwitchAllowV2Modules = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAllowV2Modules.setStatus('mandatory')
hpicfPrivateVlanPromiscuousPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 16), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPrivateVlanPromiscuousPorts.setStatus('optional')
hpSwitchPreviewMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPreviewMode.setStatus('mandatory')
hpSwitchHibernate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchHibernate.setStatus('mandatory')
hpSwitchMacDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("colon", 2), ("hyphen", 3), ("ouinic", 4), ("none", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMacDelimiter.setStatus('mandatory')
hpicfSwitchCLIOptimization = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSwitchCLIOptimization.setStatus('mandatory')
hpSwitchConsoleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2))
hpSwitchTelnetAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTelnetAdminStatus.setStatus('obsolete')
hpSwitchTerminalType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("vt100", 2), ("ansi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTerminalType.setStatus('mandatory')
hpSwitchConsoleRefRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 10, 20, 30, 45, 60))).clone(namedValues=NamedValues(("refRate1", 1), ("refRate3", 3), ("refRate5", 5), ("refRate10", 10), ("refRate20", 20), ("refRate30", 30), ("refRate45", 45), ("refRate", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchConsoleRefRate.setStatus('mandatory')
hpSwitchDisplayedEvent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("major", 2), ("notInfo", 3), ("all", 4), ("debug", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDisplayedEvent.setStatus('mandatory')
hpSwitchConsoleConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 5), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchConsoleConfigStatus.setStatus('mandatory')
hpSwitchConsoleConfigLogoutPrompt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchConsoleConfigLogoutPrompt.setStatus('mandatory')
hpSwitchUsbConsoleAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchUsbConsoleAdminStatus.setStatus('optional')
hpSwitchSessionGlobalIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSessionGlobalIdleTimeout.setStatus('mandatory')
hpSwitchSessionConsoleIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7200)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSessionConsoleIdleTimeout.setStatus('mandatory')
hpSwitchMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMaxSessions.setStatus('mandatory')
hpSwitchMaxUserSessions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMaxUserSessions.setStatus('mandatory')
hpSwitchPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3))
hpSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1), )
if mibBuilder.loadTexts: hpSwitchPortTable.setStatus('mandatory')
hpSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchPortIndex"))
if mibBuilder.loadTexts: hpSwitchPortEntry.setStatus('mandatory')
hpSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortIndex.setStatus('mandatory')
hpSwitchPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortType.setStatus('mandatory')
hpSwitchPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortDescr.setStatus('mandatory')
hpSwitchPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortAdminStatus.setStatus('obsolete')
hpSwitchPortEtherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortEtherMode.setStatus('mandatory')
hpSwitchPortVgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("endNode", 2), ("autoDetect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortVgMode.setStatus('mandatory')
hpSwitchPortLinkbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortLinkbeat.setStatus('mandatory')
hpSwitchPortTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortTrunkGroup.setStatus('mandatory')
hpSwitchPortBcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortBcastLimit.setStatus('mandatory')
hpSwitchPortFastEtherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("half-duplex-10Mbits", 1), ("half-duplex-100Mbits", 2), ("full-duplex-10Mbits", 3), ("full-duplex-100Mbits", 4), ("auto-neg", 5), ("full-duplex-1000Mbits", 6), ("auto-10Mbits", 7), ("auto-100Mbits", 8), ("auto-1000Mbits", 9), ("auto-10Gbits", 10), ("auto-10-100Mbits", 11), ("auto-40Gbits", 12), ("auto-2500Mbits", 13), ("auto-5000Mbits", 14), ("auto-2500-5000Mbits", 15), ("auto-1000-2500Mbits", 16), ("auto-1000-2500-5000Mbits", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortFastEtherMode.setStatus('mandatory')
hpSwitchPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortFlowControl.setStatus('mandatory')
hpSwitchPortTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("trunk", 1), ("fecAuto", 2), ("saTrunk", 3), ("lacpTrk", 4), ("none", 5), ("dtLacpTrk", 6), ("dtTrunk", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortTrunkType.setStatus('mandatory')
hpSwitchPortTrunkLACPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortTrunkLACPStatus.setStatus('mandatory')
hpSwitchPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("mdi", 2), ("mdix", 3), ("automdix", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortMDIXStatus.setStatus('mandatory')
hpSwitchPortAutoMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("mdi", 2), ("mdix", 3), ("automdix", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortAutoMDIX.setStatus('mandatory')
hpSwitchPortLACPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortLACPKey.setStatus('mandatory')
hpSwitchPortTrafficTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTrafficTemplateName.setStatus('mandatory')
hpSwitchPortEEEAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortEEEAdminStatus.setStatus('mandatory')
hpSwitchPortEEEOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEOperStatus.setStatus('mandatory')
hpSwitchPortEEECurrentTwSysTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEECurrentTwSysTx.setStatus('deprecated')
hpSwitchPortEEEMinTwSysTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMinTwSysTx.setStatus('deprecated')
hpSwitchPortEEEMaxTwSysTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMaxTwSysTx.setStatus('deprecated')
hpSwitchPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPvid.setStatus('mandatory')
hpSwitchPortTaggedVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap1k.setStatus('mandatory')
hpSwitchPortTaggedVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap2k.setStatus('mandatory')
hpSwitchPortTaggedVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap3k.setStatus('mandatory')
hpSwitchPortTaggedVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap4k.setStatus('mandatory')
hpSwitchPortEEECurrentTwSysTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEECurrentTwSysTx1.setStatus('mandatory')
hpSwitchPortEEEMinTwSysTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMinTwSysTx1.setStatus('mandatory')
hpSwitchPortEEEMaxTwSysTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMaxTwSysTx1.setStatus('mandatory')
hpSwitchPortPtpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortPtpAdminStatus.setStatus('mandatory')
hpSwitchPortPtpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPtpOperStatus.setStatus('mandatory')
hpSwitchPortPtpRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPtpRxCount.setStatus('mandatory')
hpSwitchPortPtpTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPtpTxCount.setStatus('mandatory')
hpSwitchPortNetworkDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortNetworkDevice.setStatus('mandatory')
hpSwitchPortConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 2), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortConfigStatus.setStatus('mandatory')
hpSwitchLinkUpDownTrapAllPortsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchLinkUpDownTrapAllPortsStatus.setStatus('mandatory')
hpSwitchIpxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 4))
hpSwitchIpxConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 4, 2), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpxConfigStatus.setStatus('mandatory')
hpSwitchIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5))
hpSwitchIpTimepAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("disable", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepAdminStatus.setStatus('mandatory')
hpSwitchIpTimepServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepServerAddr.setStatus('deprecated')
hpSwitchIpTimepPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepPollInterval.setStatus('mandatory')
hpSwitchIpConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 5), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpConfigStatus.setStatus('obsolete')
hpSwitchIpTftpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secure", 1), ("unsecure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTftpMode.setStatus('obsolete')
hpSwitchIpTimepInetServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepInetServerAddrType.setStatus('mandatory')
hpSwitchIpTimepInetServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepInetServerAddr.setStatus('mandatory')
hpSwitchIpTimepIsOobm = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepIsOobm.setStatus('mandatory')
hpSwitchSerialLinkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6))
hpSwitchSLinkBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("speedSense", 1), ("baudRate300", 2), ("baudRate600", 3), ("baudRate1200", 4), ("baudRate2400", 5), ("baudRate4800", 6), ("baudRate9600", 7), ("baudRate19200", 8), ("baudRate38400", 9), ("baudRate57600", 10), ("baudRate115200", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkBaudRate.setStatus('mandatory')
hpSwitchSLinkFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("robustXonXoff", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkFlowCtrl.setStatus('mandatory')
hpSwitchSLinkConnInactTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkConnInactTime.setStatus('deprecated')
hpSwitchSLinkModemConnTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkModemConnTime.setStatus('mandatory')
hpSwitchSLinkModemLostRecvTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkModemLostRecvTime.setStatus('mandatory')
hpSwitchSLinkModemDisConnTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkModemDisConnTime.setStatus('mandatory')
hpSwitchSLinkParity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("parityNone", 1), ("parityOdd", 2), ("parityEven", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkParity.setStatus('mandatory')
hpSwitchSLinkCharBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("char8Bits", 1), ("char7Bits", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkCharBits.setStatus('mandatory')
hpSwitchSLinkStopBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop1Bits", 1), ("stop1andHalfBits", 2), ("stop2Bits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkStopBits.setStatus('mandatory')
hpSwitchSLinkConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 10), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkConfigStatus.setStatus('mandatory')
hpSwitchFilterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8))
hpSwitchFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1), )
if mibBuilder.loadTexts: hpSwitchFilterConfigTable.setStatus('mandatory')
hpSwitchFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchFilterIndex"))
if mibBuilder.loadTexts: hpSwitchFilterConfigEntry.setStatus('mandatory')
hpSwitchFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFilterIndex.setStatus('mandatory')
hpSwitchFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("multicast", 1), ("level-3", 2), ("port", 3), ("unicast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterType.setStatus('mandatory')
hpSwitchFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterSrcPort.setStatus('mandatory')
hpSwitchFilterMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterMacAddr.setStatus('mandatory')
hpSwitchFilterProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterProtocolType.setStatus('mandatory')
hpSwitchFilterPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterPortMask.setStatus('mandatory')
hpSwitchFilterEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterEntryStatus.setStatus('mandatory')
hpSwitchFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterName.setStatus('mandatory')
hpSwitchProbeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9))
hpSwitchProbeType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ports", 1), ("vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbeType.setStatus('obsolete')
hpSwitchProbedVlanId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 2), VlanID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbedVlanId.setStatus('obsolete')
hpSwitchProbePort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbePort.setStatus('obsolete')
hpSwitchProbeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbeAdminStatus.setStatus('obsolete')
hpSwitchProbedPortMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbedPortMask.setStatus('obsolete')
hpSwitchFddiIpFragConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11))
hpSwitchFddiIpFragConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1), )
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigTable.setStatus('mandatory')
hpSwitchFddiIpFragConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchFddiIpFragConfigIndex"))
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigEntry.setStatus('mandatory')
hpSwitchFddiIpFragConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigIndex.setStatus('mandatory')
hpSwitchFddiIpFragConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigStatus.setStatus('mandatory')
hpSwitchABCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12))
hpSwitchABCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1), )
if mibBuilder.loadTexts: hpSwitchABCConfigTable.setStatus('mandatory')
hpSwitchABCConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchABCConfigVlan"))
if mibBuilder.loadTexts: hpSwitchABCConfigEntry.setStatus('mandatory')
hpSwitchABCConfigVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchABCConfigVlan.setStatus('mandatory')
hpSwitchABCConfigControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipipx", 1), ("ip", 2), ("ipx", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigControl.setStatus('mandatory')
hpSwitchABCConfigIpRipControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigIpRipControl.setStatus('mandatory')
hpSwitchABCConfigIpxRipSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigIpxRipSapControl.setStatus('mandatory')
hpSwitchABCConfigVlanBcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigVlanBcastLimit.setStatus('mandatory')
hpSwitchABCConfigAutoGatewayConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigAutoGatewayConfig.setStatus('mandatory')
hpSwitchStpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14))
hpSwitchStpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1), )
if mibBuilder.loadTexts: hpSwitchStpVlanTable.setStatus('mandatory')
hpSwitchStpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchStpVlan"))
if mibBuilder.loadTexts: hpSwitchStpVlanEntry.setStatus('mandatory')
hpSwitchStpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpVlan.setStatus('mandatory')
hpSwitchStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpAdminStatus.setStatus('mandatory')
hpSwitchStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPriority.setStatus('mandatory')
hpSwitchStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 4), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpMaxAge.setStatus('mandatory')
hpSwitchStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 5), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpHelloTime.setStatus('mandatory')
hpSwitchStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 6), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpForwardDelay.setStatus('mandatory')
hpSwitchStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2), )
if mibBuilder.loadTexts: hpSwitchStpPortTable.setStatus('mandatory')
hpSwitchStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchStpPort"))
if mibBuilder.loadTexts: hpSwitchStpPortEntry.setStatus('mandatory')
hpSwitchStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPort.setStatus('mandatory')
hpSwitchStpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPortType.setStatus('mandatory')
hpSwitchStpPortSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPortSrcMac.setStatus('mandatory')
hpSwitchStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPriority.setStatus('mandatory')
hpSwitchStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPathCost.setStatus('mandatory')
hpSwitchStpPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fast", 2), ("uplink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortMode.setStatus('mandatory')
hpSwitchStpPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortBpduFilter.setStatus('optional')
hpSwitchStpPortBpduProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortBpduProtection.setStatus('optional')
hpSwitchStpPortErrantBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPortErrantBpduCounter.setStatus('optional')
hpSwitchStpPortPvstFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPvstFilter.setStatus('optional')
hpSwitchStpPortPvstProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPvstProtection.setStatus('optional')
hpSwitchStpTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 3), Bits().clone(namedValues=NamedValues(("errantBpdu", 0), ("newRoot", 1), ("rootGuard", 2), ("loopGuard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpTrapCntl.setStatus('optional')
hpSwitchStpBpduProtectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpBpduProtectionTimeout.setStatus('optional')
hpSwitchSTPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSTPAdminStatus.setStatus('mandatory')
hpicfSwitchSTPVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("mstp", 3), ("rapidPvst", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSwitchSTPVersion.setStatus('mandatory')
hpSwitchIgmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15))
hpSwitchIgmpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1), )
if mibBuilder.loadTexts: hpSwitchIgmpConfigTable.setStatus('mandatory')
hpSwitchIgmpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchIgmpVlanIndex"))
if mibBuilder.loadTexts: hpSwitchIgmpConfigEntry.setStatus('mandatory')
hpSwitchIgmpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpVlanIndex.setStatus('mandatory')
hpSwitchIgmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpState.setStatus('mandatory')
hpSwitchIgmpQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpQuerierState.setStatus('mandatory')
hpSwitchIgmpPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpPriorityState.setStatus('deprecated')
hpSwitchIgmpQuerierInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpQuerierInterval.setStatus('mandatory')
hpSwitchIgmpProxyDomainMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainMap.setStatus('mandatory')
hpSwitchIgmpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2), )
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigTable.setStatus('mandatory')
hpSwitchIgmpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchIgmpPortIndex"))
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigEntry.setStatus('mandatory')
hpSwitchIgmpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortIndex.setStatus('mandatory')
hpSwitchIgmpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortType.setStatus('mandatory')
hpSwitchIgmpIpMcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("blocked", 2), ("forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpIpMcastState.setStatus('mandatory')
hpSwitchIgmpPortConfigTable2 = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3), )
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigTable2.setStatus('mandatory')
hpSwitchIgmpPortConfigEntry2 = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchIgmpPortVlanIndex2"), (0, "CONFIG-MIB", "hpSwitchIgmpPortIndex2"))
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigEntry2.setStatus('mandatory')
hpSwitchIgmpPortVlanIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortVlanIndex2.setStatus('mandatory')
hpSwitchIgmpPortIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortIndex2.setStatus('mandatory')
hpSwitchIgmpPortType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 3), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortType2.setStatus('mandatory')
hpSwitchIgmpIpMcastState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("blocked", 2), ("forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpIpMcastState2.setStatus('mandatory')
hpSwitchIgmpPortForcedLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpPortForcedLeaveState.setStatus('mandatory')
hpSwitchIgmpPortFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpPortFastLeaveState.setStatus('mandatory')
hpSwitchIgmpForcedLeaveInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpForcedLeaveInterval.setStatus('mandatory')
hpSwitchCosConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17))
hpSwitchCosPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1), )
if mibBuilder.loadTexts: hpSwitchCosPortConfigTable.setStatus('mandatory')
hpSwitchCosPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosPortIndex"))
if mibBuilder.loadTexts: hpSwitchCosPortConfigEntry.setStatus('mandatory')
hpSwitchCosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortIndex.setStatus('mandatory')
hpSwitchCosPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortType.setStatus('deprecated')
hpSwitchCosPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortPriority.setStatus('mandatory')
hpSwitchCosPortDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortDSCPPolicy.setStatus('mandatory')
hpSwitchCosPortResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortResolvedPriority.setStatus('mandatory')
hpSwitchCosPortApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPolicyOverride", 1), ("applyHpSwitchCosPortPriority", 2), ("applyHpSwitchCosPortDSCPPolicy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortApplyPolicy.setStatus('mandatory')
hpSwitchCosPortTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("trustNone", 1), ("trust8021pCos", 2), ("trustTosIpPrecedence", 3), ("trustTosDiffserv", 4), ("trustAll", 5), ("trustPartnerDevice", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortTrustMode.setStatus('mandatory')
hpSwitchCosPortPartnerDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 8), HpPartnerDeviceTypeList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortPartnerDevice.setStatus('mandatory')
hpSwitchCosPortTrustedPartnerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untrusted", 1), ("trusted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortTrustedPartnerState.setStatus('mandatory')
hpSwitchCosVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2), )
if mibBuilder.loadTexts: hpSwitchCosVlanConfigTable.setStatus('mandatory')
hpSwitchCosVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosVlanIndex"))
if mibBuilder.loadTexts: hpSwitchCosVlanConfigEntry.setStatus('mandatory')
hpSwitchCosVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosVlanIndex.setStatus('mandatory')
hpSwitchCosVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosVlanPriority.setStatus('mandatory')
hpSwitchCosVlanDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosVlanDSCPPolicy.setStatus('mandatory')
hpSwitchCosVlanResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosVlanResolvedPriority.setStatus('mandatory')
hpSwitchCosVlanApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPolicyOverride", 1), ("applyHpSwitchCosVlanPriority", 2), ("applyHpSwitchCosVlanDSCPPolicy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosVlanApplyPolicy.setStatus('mandatory')
hpSwitchCosProtocolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3), )
if mibBuilder.loadTexts: hpSwitchCosProtocolConfigTable.setStatus('mandatory')
hpSwitchCosProtocolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosProtocolType"))
if mibBuilder.loadTexts: hpSwitchCosProtocolConfigEntry.setStatus('mandatory')
hpSwitchCosProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("arp", 3), ("decnet", 4), ("appletalk", 5), ("sna", 6), ("netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosProtocolType.setStatus('mandatory')
hpSwitchCosProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosProtocolPriority.setStatus('mandatory')
hpSwitchCosAddressConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4), )
if mibBuilder.loadTexts: hpSwitchCosAddressConfigTable.setStatus('mandatory')
hpSwitchCosAddressConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosAddressIndex"))
if mibBuilder.loadTexts: hpSwitchCosAddressConfigEntry.setStatus('mandatory')
hpSwitchCosAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosAddressIndex.setStatus('mandatory')
hpSwitchCosAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressType.setStatus('mandatory')
hpSwitchCosAddressIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressIp.setStatus('mandatory')
hpSwitchCosAddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressPriority.setStatus('mandatory')
hpSwitchCosAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressStatus.setStatus('mandatory')
hpSwitchCosAddressDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressDSCPPolicy.setStatus('mandatory')
hpSwitchCosAddressResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosAddressResolvedPriority.setStatus('mandatory')
hpSwitchCosAddressApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("applyHpSwitchCosAddressPriority", 1), ("applyHpSwitchCosAddressDSCPPolicy", 2))).clone('applyHpSwitchCosAddressPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressApplyPolicy.setStatus('mandatory')
hpSwitchCosIpv4AddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosIpv4AddressMask.setStatus('mandatory')
hpSwitchCosAddressIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressIpv6.setStatus('mandatory')
hpSwitchCosAddressIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 11), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressIpv6PrefixLength.setStatus('mandatory')
hpSwitchCosTosConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5))
hpSwitchCosTosConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ipprecedence", 2), ("diffserv", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosConfigMode.setStatus('mandatory')
hpSwitchCosTosConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2), )
if mibBuilder.loadTexts: hpSwitchCosTosConfigTable.setStatus('mandatory')
hpSwitchCosTosConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosTosIndex"))
if mibBuilder.loadTexts: hpSwitchCosTosConfigEntry.setStatus('mandatory')
hpSwitchCosTosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosTosIndex.setStatus('mandatory')
hpSwitchCosTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosPriority.setStatus('deprecated')
hpSwitchCosTosDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosDSCPPolicy.setStatus('mandatory')
hpSwitchCosTosResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosTosResolvedPriority.setStatus('mandatory')
hpSwitchCosTosApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("applyInheritedPriority", 1), ("applyHpSwitchCosTosDSCPPolicy", 2))).clone('applyInheritedPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosApplyPolicy.setStatus('mandatory')
hpSwitchCosDSCPPolicyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6), )
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyConfigTable.setStatus('mandatory')
hpSwitchCosDSCPPolicyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosDSCPPolicyIndex"))
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyConfigEntry.setStatus('mandatory')
hpSwitchCosDSCPPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyIndex.setStatus('mandatory')
hpSwitchCosDSCPPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyPriority.setStatus('mandatory')
hpSwitchCosDSCPPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyName.setStatus('mandatory')
hpSwitchCosAppTypeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7), )
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigTable.setStatus('mandatory')
hpSwitchCosAppTypeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosAppTypeConfigIndex"))
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigEntry.setStatus('mandatory')
hpSwitchCosAppTypeConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigIndex.setStatus('mandatory')
hpSwitchCosAppTypeConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("udpSrcPortConfig", 1), ("udpDestPortConfig", 2), ("udpBothPortsConfig", 3), ("tcpSrcPortConfig", 4), ("tcpDestPortConfig", 5), ("tcpBothPortsConfig", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigType.setStatus('mandatory')
hpSwitchCosAppTypeSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeSrcPort.setStatus('mandatory')
hpSwitchCosAppTypeDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeDestPort.setStatus('mandatory')
hpSwitchCosAppTypePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypePriority.setStatus('mandatory')
hpSwitchCosAppTypeDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeDSCPPolicy.setStatus('mandatory')
hpSwitchCosAppTypeResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosAppTypeResolvedPriority.setStatus('mandatory')
hpSwitchCosAppTypeApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("applyHpSwitchCosAppTypePriority", 1), ("applyHpSwitchCosAppTypeDSCPPolicy", 2))).clone('applyHpSwitchCosAppTypePriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeApplyPolicy.setStatus('mandatory')
hpSwitchCosAppTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeStatus.setStatus('mandatory')
hpSwitchCosAppTypeMaxSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeMaxSrcPort.setStatus('mandatory')
hpSwitchCosAppTypeMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeMaxDestPort.setStatus('mandatory')
hpSwitchCosAppTypeIpPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4PacketsOnly", 1), ("ipv6PacketsOnly", 2), ("ipv4AndIpv6Packets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeIpPacketType.setStatus('mandatory')
hpSwitchCosLastChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosLastChange.setStatus('mandatory')
hpSwitchConfigCosLastConfigError = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("aclQosNoError", 1), ("aclQosTooManyRulesError", 2), ("aclQosTooManyMasksError", 3), ("aclQosTooManyRangesError", 4), ("aclQosTooManyMetersError", 5), ("aclQosTooManyLookupsError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchConfigCosLastConfigError.setStatus('mandatory')
hpSwitchQueueWatchTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10), )
if mibBuilder.loadTexts: hpSwitchQueueWatchTable.setStatus('mandatory')
hpSwitchQueueWatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchQueueWatchPort"))
if mibBuilder.loadTexts: hpSwitchQueueWatchEntry.setStatus('mandatory')
hpSwitchQueueWatchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchQueueWatchPort.setStatus('mandatory')
hpSwitchQueueWatchState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchQueueWatchState.setStatus('mandatory')
hpSwitchMeshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18))
hpSwitchMeshMulticastAgingMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aging", 1), ("nonaging", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMeshMulticastAgingMode.setStatus('deprecated')
hpSwitchMeshBackwardCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMeshBackwardCompatibility.setStatus('mandatory')
hpSwitchMeshConfiguredId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMeshConfiguredId.setStatus('mandatory')
hpSwitchMeshActualId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchMeshActualId.setStatus('mandatory')
hpSwitchPortIsolationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19))
hpSwitchPortIsolationMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortIsolationMode.setStatus('mandatory')
hpSwitchPortIsolationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2), )
if mibBuilder.loadTexts: hpSwitchPortIsolationConfigTable.setStatus('mandatory')
hpSwitchPortIsolationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchPortIsolationPort"))
if mibBuilder.loadTexts: hpSwitchPortIsolationConfigEntry.setStatus('mandatory')
hpSwitchPortIsolationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchPortIsolationPort.setStatus('mandatory')
hpSwitchPortIsolationPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uplink", 1), ("public", 2), ("private", 3), ("local", 4), ("group1", 5), ("group2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortIsolationPortMode.setStatus('mandatory')
hpSwitchSshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20))
hpSwitchSshAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshAdminStatus.setStatus('mandatory')
hpSwitchSshVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version1or2", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshVersion.setStatus('mandatory')
hpSwitchSshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshTimeout.setStatus('mandatory')
hpSwitchSshPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshPortNumber.setStatus('mandatory')
hpSwitchSshServerKeySize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshServerKeySize.setStatus('mandatory')
hpSwitchSshFileServerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshFileServerAdminStatus.setStatus('mandatory')
hpSwitchSshIpVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("ipv4or6", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshIpVersion.setStatus('deprecated')
hpSwitchSshReKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshReKeyStatus.setStatus('mandatory')
hpSwitchSshReKeyTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshReKeyTime.setStatus('mandatory')
hpSwitchSshReKeyVolume = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1048576)).clone(1048576)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshReKeyVolume.setStatus('mandatory')
hpSwitchPendingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 21))
hpSwitchPendingConfigControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyMstp", 1), ("resetMstp", 2), ("noAction", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPendingConfigControl.setStatus('mandatory')
hpSwitchBWMinConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22))
hpSwitchBWMinEgressPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1), )
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortConfigTable.setStatus('deprecated')
hpSwitchBWMinEgressPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchBWMinEgressPortIndex"))
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortConfigEntry.setStatus('deprecated')
hpSwitchBWMinEgressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortIndex.setStatus('deprecated')
hpSwitchBWMinEgressPortPrctLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctLowPriority.setStatus('deprecated')
hpSwitchBWMinEgressPortPrctNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctNormalPriority.setStatus('deprecated')
hpSwitchBWMinEgressPortPrctMedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctMedPriority.setStatus('deprecated')
hpSwitchBWMinEgressPortPrctHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctHighPriority.setStatus('deprecated')
hpSwitchRateLimitPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23))
hpSwitchRateLimitPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1), )
if mibBuilder.loadTexts: hpSwitchRateLimitPortConfigTable.setStatus('mandatory')
hpSwitchRateLimitPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchRateLimitPortIndex"))
if mibBuilder.loadTexts: hpSwitchRateLimitPortConfigEntry.setStatus('mandatory')
hpSwitchRateLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRateLimitPortIndex.setStatus('mandatory')
hpSwitchRateLimitPortControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("rateLimitPerPortOnly", 2), ("rateLimitPerQueue", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortControlMode.setStatus('mandatory')
hpSwitchRateLimitPortSingleControlPrct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortSingleControlPrct.setStatus('mandatory')
hpSwitchRateLimitPortPrctLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctLowPriority.setStatus('mandatory')
hpSwitchRateLimitPortPrctNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctNormalPriority.setStatus('mandatory')
hpSwitchRateLimitPortPrctMedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctMedPriority.setStatus('mandatory')
hpSwitchRateLimitPortPrctHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctHighPriority.setStatus('mandatory')
hpSwitchQosPassThroughMode = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 24))
hpSwitchQosPassThroughModeConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("optimized", 1), ("typical", 2), ("balanced", 3), ("onequeue", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchQosPassThroughModeConfig.setStatus('mandatory')
hpSwitchReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 25))
hpSwitchRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRebootConfig.setStatus('mandatory')
hpSwitchRebootFastBoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRebootFastBoot.setStatus('mandatory')
hpSwitchProtectedPortsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 26))
hpSwitchProtectedPortsMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 26, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProtectedPortsMask.setStatus('mandatory')
hpSwitchLACPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 28))
hpSwitchLACPAllPortsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchLACPAllPortsStatus.setStatus('mandatory')
hpSwitchDSCPRateLimitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31))
hpSwitchDSCPRateLimitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1), )
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitConfigTable.setStatus('mandatory')
hpSwitchDSCPRateLimitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchDSCPRateLimitIndex"))
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitConfigEntry.setStatus('mandatory')
hpSwitchDSCPRateLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1, 1), Dscp())
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitIndex.setStatus('mandatory')
hpSwitchDSCPRateLimitKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitKbps.setStatus('mandatory')
hpSwitchDSCPRateLimitPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitPorts.setStatus('mandatory')
hpSwitchTcpPushPreserve = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 33))
hpSwitchTcpPushPreserveConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTcpPushPreserveConfig.setStatus('mandatory')
hpSwitchIfMau = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34))
hpSwitchIfMauTypeListBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 1), HpSwitchIfMauTypeListBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauTypeListBits.setStatus('mandatory')
hpSwitchIfMauAutoNegCapabilityBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 2), HpSwitchIfMauAutoNegCapabilityBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapabilityBits.setStatus('mandatory')
hpSwitchIfMauAutoNegCapAdvertisedBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 3), HpSwitchIfMauAutoNegCapAdvertisedBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapAdvertisedBits.setStatus('mandatory')
hpSwitchIfMauAutoNegCapReceivedBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 4), HpSwitchIfMauAutoNegCapReceivedBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapReceivedBits.setStatus('mandatory')
hpSwitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0))
hpSwitchTrapsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0, 1))
hpSwitchStpErrantBpduDetector = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bpduFilter", 1), ("bpduProtection", 2), ("pvstFilter", 3), ("pvstProtection", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStpErrantBpduDetector.setStatus('optional')
hpSwitchStpErrantBpduSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStpErrantBpduSrcMac.setStatus('optional')
hpSwitchStpErrantBpduReceived = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0) + (0,1)).setObjects(("CONFIG-MIB", "hpSwitchStpPort"), ("CONFIG-MIB", "hpSwitchStpPortErrantBpduCounter"), ("BRIDGE-MIB", "dot1dStpPortState"), ("BRIDGE-MIB", "dot1dStpPortDesignatedBridge"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"), ("CONFIG-MIB", "hpSwitchStpErrantBpduSrcMac"), ("CONFIG-MIB", "hpSwitchStpErrantBpduDetector"))
mibBuilder.exportSymbols("CONFIG-MIB", hpSwitchSLinkConnInactTime=hpSwitchSLinkConnInactTime, hpSwitchStpVlanTable=hpSwitchStpVlanTable, hpSwitchConsoleConfigLogoutPrompt=hpSwitchConsoleConfigLogoutPrompt, hpSwitchCosAddressDSCPPolicy=hpSwitchCosAddressDSCPPolicy, hpSwitchFilterConfigTable=hpSwitchFilterConfigTable, hpSwitchIpConfigStatus=hpSwitchIpConfigStatus, hpSwitchBWMinEgressPortPrctMedPriority=hpSwitchBWMinEgressPortPrctMedPriority, hpSwitchQosPassThroughMode=hpSwitchQosPassThroughMode, hpSwitchPortEEEOperStatus=hpSwitchPortEEEOperStatus, hpSwitchCosAddressStatus=hpSwitchCosAddressStatus, hpSwitchStpVlan=hpSwitchStpVlan, hpSwitchIgmpProxyDomainMap=hpSwitchIgmpProxyDomainMap, hpSwitchABCConfigIpxRipSapControl=hpSwitchABCConfigIpxRipSapControl, hpicfSwitchCLIOptimization=hpicfSwitchCLIOptimization, hpSwitchStpPort=hpSwitchStpPort, hpSwitchFilterProtocolType=hpSwitchFilterProtocolType, hpSwitchPortEEEAdminStatus=hpSwitchPortEEEAdminStatus, hpSwitchSLinkFlowCtrl=hpSwitchSLinkFlowCtrl, hpSwitchMaxUserSessions=hpSwitchMaxUserSessions, hpSwitchIpTimepInetServerAddrType=hpSwitchIpTimepInetServerAddrType, hpSwitchFddiIpFragConfigStatus=hpSwitchFddiIpFragConfigStatus, hpSwitchIfMauTypeListBits=hpSwitchIfMauTypeListBits, hpSwitchRateLimitPortSingleControlPrct=hpSwitchRateLimitPortSingleControlPrct, hpSwitchABCConfigEntry=hpSwitchABCConfigEntry, hpSwitchRateLimitPortConfigTable=hpSwitchRateLimitPortConfigTable, hpSwitchRateLimitPortControlMode=hpSwitchRateLimitPortControlMode, hpSwitchPortIndex=hpSwitchPortIndex, hpSwitchRateLimitPortPrctNormalPriority=hpSwitchRateLimitPortPrctNormalPriority, hpSwitchPortIsolationConfig=hpSwitchPortIsolationConfig, hpSwitchCosTosConfigEntry=hpSwitchCosTosConfigEntry, hpSwitchPortEEECurrentTwSysTx=hpSwitchPortEEECurrentTwSysTx, hpSwitchPortEtherMode=hpSwitchPortEtherMode, hpSwitchPreviewMode=hpSwitchPreviewMode, hpSwitchMeshConfiguredId=hpSwitchMeshConfiguredId, hpSwitchPortEntry=hpSwitchPortEntry, hpSwitchCosAddressIpv6=hpSwitchCosAddressIpv6, hpSwitchPortEEEMinTwSysTx1=hpSwitchPortEEEMinTwSysTx1, hpSwitchPortTrunkType=hpSwitchPortTrunkType, hpSwitchIgmpPortConfigTable=hpSwitchIgmpPortConfigTable, hpSwitchDSCPRateLimitPorts=hpSwitchDSCPRateLimitPorts, hpSwitchQueueWatchTable=hpSwitchQueueWatchTable, hpSwitchIfMauAutoNegCapReceivedBits=hpSwitchIfMauAutoNegCapReceivedBits, hpSwitchStpErrantBpduDetector=hpSwitchStpErrantBpduDetector, hpSwitchFilterConfigEntry=hpSwitchFilterConfigEntry, hpSwitchCosAppTypeConfigEntry=hpSwitchCosAppTypeConfigEntry, hpSwitchIpTftpMode=hpSwitchIpTftpMode, hpSwitchCosAddressPriority=hpSwitchCosAddressPriority, hpSwitchPortConfig=hpSwitchPortConfig, hpSwitchCosAddressConfigEntry=hpSwitchCosAddressConfigEntry, hpSwitchDaylightEndingDay=hpSwitchDaylightEndingDay, hpSwitchPortTrunkLACPStatus=hpSwitchPortTrunkLACPStatus, hpSwitchAutoReboot=hpSwitchAutoReboot, hpSwitchFilterIndex=hpSwitchFilterIndex, hpSwitchStpPortPathCost=hpSwitchStpPortPathCost, hpSwitchCosAppTypeMaxDestPort=hpSwitchCosAppTypeMaxDestPort, hpSwitchMacDelimiter=hpSwitchMacDelimiter, hpSwitchIgmpPortType=hpSwitchIgmpPortType, hpSwitchPortTaggedVlanMap4k=hpSwitchPortTaggedVlanMap4k, hpSwitchMeshActualId=hpSwitchMeshActualId, hpSwitchBWMinEgressPortPrctLowPriority=hpSwitchBWMinEgressPortPrctLowPriority, hpSwitchStpVlanEntry=hpSwitchStpVlanEntry, hpSwitchQosPassThroughModeConfig=hpSwitchQosPassThroughModeConfig, hpSwitchCosAppTypeDSCPPolicy=hpSwitchCosAppTypeDSCPPolicy, hpSwitchUsbConsoleAdminStatus=hpSwitchUsbConsoleAdminStatus, hpSwitchSLinkBaudRate=hpSwitchSLinkBaudRate, hpSwitchRateLimitPortPrctHighPriority=hpSwitchRateLimitPortPrctHighPriority, hpSwitchPendingConfigControl=hpSwitchPendingConfigControl, hpSwitchFddiIpFragConfigTable=hpSwitchFddiIpFragConfigTable, hpSwitchCosProtocolConfigEntry=hpSwitchCosProtocolConfigEntry, hpSwitchSshIpVersion=hpSwitchSshIpVersion, hpSwitchIpxConfig=hpSwitchIpxConfig, hpSwitchIpTimepServerAddr=hpSwitchIpTimepServerAddr, hpSwitchStpErrantBpduReceived=hpSwitchStpErrantBpduReceived, hpSwitchStpTrapCntl=hpSwitchStpTrapCntl, hpSwitchSshReKeyStatus=hpSwitchSshReKeyStatus, hpSwitchCosLastChange=hpSwitchCosLastChange, hpSwitchSTPAdminStatus=hpSwitchSTPAdminStatus, hpSwitchPortConfigStatus=hpSwitchPortConfigStatus, hpSwitchProbeType=hpSwitchProbeType, hpSwitchCosPortApplyPolicy=hpSwitchCosPortApplyPolicy, hpSwitchIgmpConfigEntry=hpSwitchIgmpConfigEntry, hpSwitchIpConfig=hpSwitchIpConfig, hpSwitchPortIsolationPort=hpSwitchPortIsolationPort, hpicfPrivateVlanPromiscuousPorts=hpicfPrivateVlanPromiscuousPorts, hpSwitchCosAppTypeConfigTable=hpSwitchCosAppTypeConfigTable, hpSwitchPortTaggedVlanMap3k=hpSwitchPortTaggedVlanMap3k, hpSwitchBWMinEgressPortPrctNormalPriority=hpSwitchBWMinEgressPortPrctNormalPriority, hpSwitchIgmpConfigTable=hpSwitchIgmpConfigTable, hpSwitchABCConfigVlan=hpSwitchABCConfigVlan, hpSwitchDaylightBeginningMonth=hpSwitchDaylightBeginningMonth, hpSwitchCosAppTypeSrcPort=hpSwitchCosAppTypeSrcPort, hpSwitchIgmpPortIndex=hpSwitchIgmpPortIndex, hpSwitchTrapsObjects=hpSwitchTrapsObjects, hpSwitchCosPortDSCPPolicy=hpSwitchCosPortDSCPPolicy, hpSwitchFddiIpFragConfigEntry=hpSwitchFddiIpFragConfigEntry, hpSwitchABCConfigTable=hpSwitchABCConfigTable, hpSwitchIgmpDelayedGroupFlushTimer=hpSwitchIgmpDelayedGroupFlushTimer, hpSwitchSshConfig=hpSwitchSshConfig, hpSwitchSystemConfig=hpSwitchSystemConfig, hpSwitchPortType=hpSwitchPortType, hpSwitchPortPtpAdminStatus=hpSwitchPortPtpAdminStatus, hpSwitchStpPortPvstFilter=hpSwitchStpPortPvstFilter, hpSwitchDaylightEndingMonth=hpSwitchDaylightEndingMonth, hpSwitchBWMinEgressPortPrctHighPriority=hpSwitchBWMinEgressPortPrctHighPriority, hpSwitchABCConfigAutoGatewayConfig=hpSwitchABCConfigAutoGatewayConfig, hpSwitchTelnetAdminStatus=hpSwitchTelnetAdminStatus, hpSwitchLinkUpDownTrapAllPortsStatus=hpSwitchLinkUpDownTrapAllPortsStatus, hpSwitchProbeConfig=hpSwitchProbeConfig, hpicfSwitchSTPVersion=hpicfSwitchSTPVersion, hpSwitchIgmpPortType2=hpSwitchIgmpPortType2, hpSwitchProbeAdminStatus=hpSwitchProbeAdminStatus, hpSwitchPortAutoMDIX=hpSwitchPortAutoMDIX, hpSwitchPortTrunkGroup=hpSwitchPortTrunkGroup, hpSwitchConsoleConfig=hpSwitchConsoleConfig, hpSwitchCosTosConfigMode=hpSwitchCosTosConfigMode, hpSwitchIgmpQuerierState=hpSwitchIgmpQuerierState, hpSwitchQueueWatchState=hpSwitchQueueWatchState, hpSwitchAllowV2Modules=hpSwitchAllowV2Modules, hpSwitchPortTable=hpSwitchPortTable, hpSwitchCosProtocolPriority=hpSwitchCosProtocolPriority, hpSwitchCosAppTypeMaxSrcPort=hpSwitchCosAppTypeMaxSrcPort, hpSwitchStpPortType=hpSwitchStpPortType, hpSwitchProtectedPortsConfig=hpSwitchProtectedPortsConfig, hpSwitchFilterPortMask=hpSwitchFilterPortMask, hpSwitchIgmpQuerierInterval=hpSwitchIgmpQuerierInterval, hpSwitchCosDSCPPolicyName=hpSwitchCosDSCPPolicyName, hpSwitchIgmpPortVlanIndex2=hpSwitchIgmpPortVlanIndex2, hpSwitchCosAppTypeIpPacketType=hpSwitchCosAppTypeIpPacketType, hpSwitchPortFastEtherMode=hpSwitchPortFastEtherMode, hpSwitchPortEEEMaxTwSysTx1=hpSwitchPortEEEMaxTwSysTx1, hpSwitchProbePort=hpSwitchProbePort, hpSwitchCosVlanDSCPPolicy=hpSwitchCosVlanDSCPPolicy, hpSwitchPendingConfig=hpSwitchPendingConfig, hpSwitchBWMinEgressPortIndex=hpSwitchBWMinEgressPortIndex, hpSwitchTraps=hpSwitchTraps, hpSwitchStpErrantBpduSrcMac=hpSwitchStpErrantBpduSrcMac, hpSwitchCosDSCPPolicyIndex=hpSwitchCosDSCPPolicyIndex, hpSwitchIgmpPortConfigTable2=hpSwitchIgmpPortConfigTable2, hpSwitchABCConfig=hpSwitchABCConfig, hpSwitchCosVlanIndex=hpSwitchCosVlanIndex, hpSwitchSerialLinkConfig=hpSwitchSerialLinkConfig, hpSwitchIgmpPortConfigEntry=hpSwitchIgmpPortConfigEntry, hpSwitchCosProtocolConfigTable=hpSwitchCosProtocolConfigTable, hpSwitchPortPtpRxCount=hpSwitchPortPtpRxCount, hpSwitchCosProtocolType=hpSwitchCosProtocolType, hpSwitchPortPvid=hpSwitchPortPvid, hpSwitchSessionGlobalIdleTimeout=hpSwitchSessionGlobalIdleTimeout, hpSwitchCosAddressIp=hpSwitchCosAddressIp, hpSwitchCosAppTypePriority=hpSwitchCosAppTypePriority, hpSwitchSshVersion=hpSwitchSshVersion, hpSwitchStpPortBpduFilter=hpSwitchStpPortBpduFilter, hpSwitchIgmpPortIndex2=hpSwitchIgmpPortIndex2, hpSwitchCosIpv4AddressMask=hpSwitchCosIpv4AddressMask, hpSwitchCosTosConfig=hpSwitchCosTosConfig, hpSwitchCosTosApplyPolicy=hpSwitchCosTosApplyPolicy, hpSwitchIgmpPortFastLeaveState=hpSwitchIgmpPortFastLeaveState, hpSwitchSessionConsoleIdleTimeout=hpSwitchSessionConsoleIdleTimeout, hpSwitchSLinkParity=hpSwitchSLinkParity, hpSwitchFilterType=hpSwitchFilterType, hpConfig=hpConfig, hpSwitchRateLimitPortPrctLowPriority=hpSwitchRateLimitPortPrctLowPriority, hpSwitchStpPortPvstProtection=hpSwitchStpPortPvstProtection, hpSwitchPortNetworkDevice=hpSwitchPortNetworkDevice, hpSwitchPortMDIXStatus=hpSwitchPortMDIXStatus, hpSwitchCosPortPriority=hpSwitchCosPortPriority, hpSwitchCosVlanConfigTable=hpSwitchCosVlanConfigTable, hpSwitchPortPtpOperStatus=hpSwitchPortPtpOperStatus, hpSwitchPortIsolationPortMode=hpSwitchPortIsolationPortMode, hpSwitchCosAppTypeConfigIndex=hpSwitchCosAppTypeConfigIndex, hpSwitchStpPriority=hpSwitchStpPriority, hpSwitchCosAppTypeApplyPolicy=hpSwitchCosAppTypeApplyPolicy, hpSwitchRebootConfig=hpSwitchRebootConfig, hpSwitchStpForwardDelay=hpSwitchStpForwardDelay, hpSwitchIfMauAutoNegCapAdvertisedBits=hpSwitchIfMauAutoNegCapAdvertisedBits, hpSwitchPortEEECurrentTwSysTx1=hpSwitchPortEEECurrentTwSysTx1, hpSwitchCosVlanApplyPolicy=hpSwitchCosVlanApplyPolicy, hpSwitchPortTrafficTemplateName=hpSwitchPortTrafficTemplateName, hpSwitchPortLinkbeat=hpSwitchPortLinkbeat, hpSwitchABCConfigControl=hpSwitchABCConfigControl, hpSwitchControlUnknownIPMulticast=hpSwitchControlUnknownIPMulticast, hpSwitchIpTimepPollInterval=hpSwitchIpTimepPollInterval, hpSwitchDSCPRateLimitConfig=hpSwitchDSCPRateLimitConfig, hpSwitchSLinkCharBits=hpSwitchSLinkCharBits, hpSwitchStpPortPriority=hpSwitchStpPortPriority, hpSwitchCosAddressApplyPolicy=hpSwitchCosAddressApplyPolicy, hpSwitchIgmpPriorityState=hpSwitchIgmpPriorityState, hpSwitchRateLimitPortConfig=hpSwitchRateLimitPortConfig, hpSwitchSystemPortLEDMode=hpSwitchSystemPortLEDMode, hpSwitchPortVgMode=hpSwitchPortVgMode, hpSwitchCosVlanConfigEntry=hpSwitchCosVlanConfigEntry, hpSwitchDSCPRateLimitConfigTable=hpSwitchDSCPRateLimitConfigTable, hpSwitchAllowV1Modules=hpSwitchAllowV1Modules, HpicfUsrProfilePortSpeed=HpicfUsrProfilePortSpeed, hpSwitchBWMinEgressPortConfigTable=hpSwitchBWMinEgressPortConfigTable, hpSwitchPortBcastLimit=hpSwitchPortBcastLimit, hpSwitchSshReKeyTime=hpSwitchSshReKeyTime, hpSwitchCosAppTypeResolvedPriority=hpSwitchCosAppTypeResolvedPriority, hpSwitchIpMTU=hpSwitchIpMTU, hpSwitchSystemConfigStatus=hpSwitchSystemConfigStatus, hpSwitchCosPortTrustedPartnerState=hpSwitchCosPortTrustedPartnerState, hpSwitchRateLimitPortPrctMedPriority=hpSwitchRateLimitPortPrctMedPriority, hpSwitchRateLimitPortConfigEntry=hpSwitchRateLimitPortConfigEntry, hpSwitchStpBpduProtectionTimeout=hpSwitchStpBpduProtectionTimeout, hpSwitchSshFileServerAdminStatus=hpSwitchSshFileServerAdminStatus, hpSwitchCosAddressIpv6PrefixLength=hpSwitchCosAddressIpv6PrefixLength, hpSwitchStpMaxAge=hpSwitchStpMaxAge, hpSwitchSshAdminStatus=hpSwitchSshAdminStatus, hpSwitchFilterMacAddr=hpSwitchFilterMacAddr, hpSwitchIpTimepAdminStatus=hpSwitchIpTimepAdminStatus, hpSwitchDaylightTimeRule=hpSwitchDaylightTimeRule, hpSwitchPortIsolationConfigTable=hpSwitchPortIsolationConfigTable, hpSwitchIfMau=hpSwitchIfMau, hpSwitchCosTosConfigTable=hpSwitchCosTosConfigTable, hpSwitchPortEEEMinTwSysTx=hpSwitchPortEEEMinTwSysTx, hpSwitchCosPortConfigTable=hpSwitchCosPortConfigTable, hpSwitchCosPortResolvedPriority=hpSwitchCosPortResolvedPriority, hpSwitchRebootFastBoot=hpSwitchRebootFastBoot, hpSwitchSshTimeout=hpSwitchSshTimeout, hpSwitchStpPortEntry=hpSwitchStpPortEntry, hpSwitchStpAdminStatus=hpSwitchStpAdminStatus, hpSwitchCosTosDSCPPolicy=hpSwitchCosTosDSCPPolicy, hpSwitchCosAddressConfigTable=hpSwitchCosAddressConfigTable, hpSwitchPortPtpTxCount=hpSwitchPortPtpTxCount, hpSwitchCosPortConfigEntry=hpSwitchCosPortConfigEntry, hpSwitchCosPortTrustMode=hpSwitchCosPortTrustMode, hpSwitchCosDSCPPolicyConfigTable=hpSwitchCosDSCPPolicyConfigTable, hpSwitchCosTosResolvedPriority=hpSwitchCosTosResolvedPriority, VlanID=VlanID, hpSwitchMeshMulticastAgingMode=hpSwitchMeshMulticastAgingMode, hpSwitchStpPortErrantBpduCounter=hpSwitchStpPortErrantBpduCounter, hpSwitchTcpPushPreserve=hpSwitchTcpPushPreserve, hpSwitchMaxSessions=hpSwitchMaxSessions, hpSwitchPortAdminStatus=hpSwitchPortAdminStatus, hpSwitchCosPortType=hpSwitchCosPortType, hpSwitchPortDescr=hpSwitchPortDescr, hpSwitchIgmpForcedLeaveInterval=hpSwitchIgmpForcedLeaveInterval, hpSwitchFddiIpFragConfig=hpSwitchFddiIpFragConfig, hpSwitchDaylightBeginningDay=hpSwitchDaylightBeginningDay, hpSwitchPortIsolationMode=hpSwitchPortIsolationMode, hpSwitchSLinkModemConnTime=hpSwitchSLinkModemConnTime, hpSwitchDSCPRateLimitKbps=hpSwitchDSCPRateLimitKbps, hpSwitchIgmpIpMcastState=hpSwitchIgmpIpMcastState, hpSwitchCosAddressType=hpSwitchCosAddressType, hpSwitchFilterEntryStatus=hpSwitchFilterEntryStatus, hpSwitchCosTosIndex=hpSwitchCosTosIndex, hpSwitchTcpPushPreserveConfig=hpSwitchTcpPushPreserveConfig, hpSwitchConfigCosLastConfigError=hpSwitchConfigCosLastConfigError, hpSwitchPortTaggedVlanMap1k=hpSwitchPortTaggedVlanMap1k, hpSwitchDSCPRateLimitConfigEntry=hpSwitchDSCPRateLimitConfigEntry, hpSwitchPortEEEMaxTwSysTx=hpSwitchPortEEEMaxTwSysTx, hpSwitchHibernate=hpSwitchHibernate, hpSwitchStpPortMode=hpSwitchStpPortMode, hpSwitchIgmpPortConfigEntry2=hpSwitchIgmpPortConfigEntry2, hpSwitchTimeZone=hpSwitchTimeZone)
mibBuilder.exportSymbols("CONFIG-MIB", hpSwitchIpTimepInetServerAddr=hpSwitchIpTimepInetServerAddr, hpSwitchDSCPRateLimitIndex=hpSwitchDSCPRateLimitIndex, hpSwitchFddiIpFragConfigIndex=hpSwitchFddiIpFragConfigIndex, hpSwitchCosAppTypeDestPort=hpSwitchCosAppTypeDestPort, hpSwitchProbedPortMask=hpSwitchProbedPortMask, hpSwitchMeshConfig=hpSwitchMeshConfig, hpSwitchPortIsolationConfigEntry=hpSwitchPortIsolationConfigEntry, hpSwitchStpConfig=hpSwitchStpConfig, hpSwitchIgmpPortForcedLeaveState=hpSwitchIgmpPortForcedLeaveState, Timeout=Timeout, hpSwitchQueueWatchPort=hpSwitchQueueWatchPort, hpSwitchSLinkStopBits=hpSwitchSLinkStopBits, hpSwitchSshPortNumber=hpSwitchSshPortNumber, hpSwitchIgmpState=hpSwitchIgmpState, hpSwitchFilterSrcPort=hpSwitchFilterSrcPort, hpSwitchSshReKeyVolume=hpSwitchSshReKeyVolume, hpSwitchStpPortSrcMac=hpSwitchStpPortSrcMac, hpSwitchCosPortPartnerDevice=hpSwitchCosPortPartnerDevice, hpSwitchTerminalType=hpSwitchTerminalType, hpSwitchStpPortBpduProtection=hpSwitchStpPortBpduProtection, hpSwitchCosVlanResolvedPriority=hpSwitchCosVlanResolvedPriority, hpSwitchPortFlowControl=hpSwitchPortFlowControl, hpSwitchCosAddressIndex=hpSwitchCosAddressIndex, hpSwitchStpHelloTime=hpSwitchStpHelloTime, hpSwitchCosConfig=hpSwitchCosConfig, hpSwitchIfMauAutoNegCapabilityBits=hpSwitchIfMauAutoNegCapabilityBits, hpSwitchFilterName=hpSwitchFilterName, hpSwitchABCConfigVlanBcastLimit=hpSwitchABCConfigVlanBcastLimit, hpSwitchProbedVlanId=hpSwitchProbedVlanId, hpSwitchConfig=hpSwitchConfig, hpSwitchLACPConfig=hpSwitchLACPConfig, hpSwitchMaxFrameSize=hpSwitchMaxFrameSize, hpSwitchSshServerKeySize=hpSwitchSshServerKeySize, hpSwitchBWMinEgressPortConfigEntry=hpSwitchBWMinEgressPortConfigEntry, hpSwitchQueueWatchEntry=hpSwitchQueueWatchEntry, hpSwitchCosTosPriority=hpSwitchCosTosPriority, hpSwitchCosDSCPPolicyPriority=hpSwitchCosDSCPPolicyPriority, hpSwitchSLinkConfigStatus=hpSwitchSLinkConfigStatus, hpSwitchLACPAllPortsStatus=hpSwitchLACPAllPortsStatus, hpSwitchABCConfigIpRipControl=hpSwitchABCConfigIpRipControl, hpSwitchCosAppTypeStatus=hpSwitchCosAppTypeStatus, hpSwitchIgmpConfig=hpSwitchIgmpConfig, hpSwitchCosPortIndex=hpSwitchCosPortIndex, hpSwitchCosVlanPriority=hpSwitchCosVlanPriority, hpSwitchFilterConfig=hpSwitchFilterConfig, hpSwitchMeshBackwardCompatibility=hpSwitchMeshBackwardCompatibility, hpSwitchCosAppTypeConfigType=hpSwitchCosAppTypeConfigType, hpSwitchPortTaggedVlanMap2k=hpSwitchPortTaggedVlanMap2k, hpSwitchConsoleConfigStatus=hpSwitchConsoleConfigStatus, hpSwitchReboot=hpSwitchReboot, hpSwitchSLinkModemLostRecvTime=hpSwitchSLinkModemLostRecvTime, hpSwitchIpTimepIsOobm=hpSwitchIpTimepIsOobm, hpSwitchBWMinConfig=hpSwitchBWMinConfig, hpSwitchCosDSCPPolicyConfigEntry=hpSwitchCosDSCPPolicyConfigEntry, hpSwitchCosAddressResolvedPriority=hpSwitchCosAddressResolvedPriority, hpSwitchIgmpVlanIndex=hpSwitchIgmpVlanIndex, hpSwitchConsoleRefRate=hpSwitchConsoleRefRate, hpSwitchStpPortTable=hpSwitchStpPortTable, hpSwitchIgmpIpMcastState2=hpSwitchIgmpIpMcastState2, hpSwitchIpxConfigStatus=hpSwitchIpxConfigStatus, hpSwitchSLinkModemDisConnTime=hpSwitchSLinkModemDisConnTime, hpSwitchPortLACPKey=hpSwitchPortLACPKey, hpSwitchProtectedPortsMask=hpSwitchProtectedPortsMask, hpSwitchDisplayedEvent=hpSwitchDisplayedEvent, hpSwitchRateLimitPortIndex=hpSwitchRateLimitPortIndex)
