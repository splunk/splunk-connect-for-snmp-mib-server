#
# PySNMP MIB module DH90-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DH90-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:31:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, TimeTicks, ModuleIdentity, Unsigned32, iso, ObjectIdentity, enterprises, IpAddress, Gauge32, Integer32, Counter32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Unsigned32", "iso", "ObjectIdentity", "enterprises", "IpAddress", "Gauge32", "Integer32", "Counter32", "NotificationType", "Bits")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
decMIBextension = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18))
decExp = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3))
dh90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1))
da90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2))
ds90L = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3))
drpt90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4))
db90ext = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5))
db90system = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 1))
db90interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 2))
db90bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3))
dh90Type = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("standAloneCommunity", 3), ("dechub90", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90Type.setStatus('mandatory')
dh90Backplane = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90Backplane.setStatus('mandatory')
dh90LastChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90LastChange.setStatus('mandatory')
dh90NumberSlots = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90NumberSlots.setStatus('mandatory')
dh90SlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5), )
if mibBuilder.loadTexts: dh90SlotTable.setStatus('mandatory')
dh90SlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1), ).setIndexNames((0, "DH90-MIB", "dh90SlotIndex"))
if mibBuilder.loadTexts: dh90SlotEntry.setStatus('mandatory')
dh90SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotIndex.setStatus('mandatory')
dh90SlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("decserver90L", 3), ("decbridge90", 4), ("decrepeater90C", 5), ("decrepeater90T", 6), ("decagent90", 7), ("decserver90Lplus", 8), ("decserver90LT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotModuleType.setStatus('mandatory')
dh90SlotModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotModuleName.setStatus('mandatory')
dh90SlotModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotModuleVersion.setStatus('mandatory')
dh90SlotCounterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotCounterTime.setStatus('mandatory')
dh90SlotIfBase = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotIfBase.setStatus('mandatory')
dh90SlotIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotIfNumber.setStatus('mandatory')
dh90SlotPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 8), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotPhysicalAddress.setStatus('mandatory')
dh90SlotNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotNumberOfPorts.setStatus('mandatory')
dh90SlotPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotPassword.setStatus('mandatory')
dh90SlotNewPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotNewPassword.setStatus('mandatory')
dh90SlotPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotPolling.setStatus('mandatory')
dh90SlotPrimarySpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotPrimarySpecific.setStatus('mandatory')
dh90SlotSecondarySpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 5, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotSecondarySpecific.setStatus('mandatory')
dh90TrapAddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 6), )
if mibBuilder.loadTexts: dh90TrapAddressTable.setStatus('mandatory')
dh90TrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 6, 1), ).setIndexNames((0, "DH90-MIB", "dh90TrapAddress"))
if mibBuilder.loadTexts: dh90TrapEntry.setStatus('mandatory')
dh90TrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 1, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90TrapAddress.setStatus('mandatory')
da90FlashErasures = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90FlashErasures.setStatus('mandatory')
da90Maintenance = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("unused", 2), ("reset", 3), ("resetToFactory", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90Maintenance.setStatus('mandatory')
da90CommunityNumber = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90CommunityNumber.setStatus('mandatory')
da90CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 4), )
if mibBuilder.loadTexts: da90CommunityTable.setStatus('mandatory')
da90CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 4, 1), ).setIndexNames((0, "DH90-MIB", "da90CommunityIndex"))
if mibBuilder.loadTexts: da90CommunityEntry.setStatus('mandatory')
da90CommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityIndex.setStatus('mandatory')
da90CommunityType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityType.setStatus('mandatory')
da90CommunityROString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityROString.setStatus('mandatory')
da90CommunityRWString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityRWString.setStatus('mandatory')
da90CommunityTrapString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityTrapString.setStatus('mandatory')
ds90LNumberModules = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LNumberModules.setStatus('mandatory')
ds90LModuleTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2), )
if mibBuilder.loadTexts: ds90LModuleTable.setStatus('mandatory')
ds90LModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1), ).setIndexNames((0, "DH90-MIB", "ds90LSlotIndex"))
if mibBuilder.loadTexts: ds90LModuleEntry.setStatus('mandatory')
ds90LSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSlotIndex.setStatus('mandatory')
ds90LDot3StatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LDot3StatsDeferredTransmissions.setStatus('mandatory')
ds90LDot3StatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LDot3StatsSingleCollisionFrames.setStatus('mandatory')
ds90LDot3StatsMultipleCollsionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LDot3StatsMultipleCollsionFrames.setStatus('mandatory')
ds90LEnetDataOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LEnetDataOverruns.setStatus('mandatory')
ds90LLatCircMsgsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircMsgsIns.setStatus('mandatory')
ds90LLatCircMsgsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircMsgsOuts.setStatus('mandatory')
ds90LLatSessSolicitAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatSessSolicitAccepts.setStatus('mandatory')
ds90LLatSessSolicitRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatSessSolicitRejects.setStatus('mandatory')
ds90LLatCircDuplsMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircDuplsMsgs.setStatus('mandatory')
ds90LLatCircMsgRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircMsgRetransmits.setStatus('mandatory')
ds90LLatSessIllegalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatSessIllegalSlots.setStatus('mandatory')
ds90LIllegalMulticastRcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LIllegalMulticastRcvs.setStatus('mandatory')
ds90LLatCircKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircKeepAlive.setStatus('mandatory')
ds90LLatCircRetransmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircRetransmitLimit.setStatus('mandatory')
ds90LLatCircInvalidMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircInvalidMsgs.setStatus('mandatory')
ds90LAuthorizeMode = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LAuthorizeMode.setStatus('mandatory')
ds90LMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("zeroCounters", 2), ("reset", 3), ("resetToFactory", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LMaintenance.setStatus('mandatory')
ds90LPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPrompt.setStatus('mandatory')
ds90LPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3), )
if mibBuilder.loadTexts: ds90LPortTable.setStatus('mandatory')
ds90LPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LPortIndex.setStatus('mandatory')
ds90LPortRemoteModification = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortRemoteModification.setStatus('mandatory')
ds90LPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminal", 1), ("printer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortType.setStatus('mandatory')
ds90LPortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortBreak.setStatus('mandatory')
ds90LPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortTest.setStatus('mandatory')
ds90LPortAutoConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortAutoConfigure.setStatus('mandatory')
ds90LPortOnDemandLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortOnDemandLoading.setStatus('mandatory')
ds90LSessionTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 4), )
if mibBuilder.loadTexts: ds90LSessionTable.setStatus('mandatory')
ds90LPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 3, 1), ).setIndexNames((0, "DH90-MIB", "ds90LPortIndex"))
if mibBuilder.loadTexts: ds90LPortEntry.setStatus('mandatory')
ds90LSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 4, 1), ).setIndexNames((0, "DH90-MIB", "ds90LSessionPort"), (0, "DH90-MIB", "ds90LSessionIndex"))
if mibBuilder.loadTexts: ds90LSessionEntry.setStatus('mandatory')
ds90LSessionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionPort.setStatus('mandatory')
ds90LSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionIndex.setStatus('mandatory')
ds90LSessionRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionRemoteNode.setStatus('mandatory')
ds90LSessionService = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionService.setStatus('mandatory')
ds90LSessionRemotePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionRemotePortId.setStatus('mandatory')
drpt90PortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1), )
if mibBuilder.loadTexts: drpt90PortTable.setStatus('mandatory')
drpt90PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1), ).setIndexNames((0, "DH90-MIB", "drpt90PortIndex"))
if mibBuilder.loadTexts: drpt90PortEntry.setStatus('mandatory')
drpt90PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortIndex.setStatus('mandatory')
drpt90PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drpt90PortName.setStatus('mandatory')
drpt90PortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drpt90PortAdminStatus.setStatus('mandatory')
drpt90PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("autoPartitioned", 2), ("managementPartitioned", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortState.setStatus('mandatory')
drpt90PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("twistedPair", 2), ("thinWire", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortType.setStatus('mandatory')
drpt90PortPartitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortPartitionCount.setStatus('mandatory')
drpt90PortAutoPartitionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notPartitioned", 0), ("managementPartitioned", 1), ("excessiveLength", 2), ("excessiveLengthAndMgmtPart", 3), ("excessiveCollisions", 4), ("excessiveCollisionsAndMgmtPart", 5), ("jabber", 6), ("jabberAndMgmtPart", 7), ("nocarrierLoopback", 8), ("nocarrierLoopbackAndMgmtPart", 9), ("transmitCarrierDropout", 10), ("transmitCarrierDropoutAndMgmtPart", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortAutoPartitionReason.setStatus('mandatory')
drpt90PortJamBits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("jb96", 2), ("jb128", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortJamBits.setStatus('mandatory')
drpt90PortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 2), )
if mibBuilder.loadTexts: drpt90PortAddrTable.setStatus('mandatory')
drpt90PortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 2, 1), ).setIndexNames((0, "DH90-MIB", "drpt90PortPhyAddr"))
if mibBuilder.loadTexts: drpt90PortAddrEntry.setStatus('mandatory')
drpt90PortPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortPhyAddr.setStatus('mandatory')
drpt90PortAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortAddrIndex.setStatus('mandatory')
dbSysChar = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 1, 1))
dbSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 1, 2))
dbSysRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSysRomVersion.setStatus('mandatory')
dbSysInitSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("resetToFactory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbSysInitSwitch.setStatus('mandatory')
dbSysDeviceState = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("operate", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSysDeviceState.setStatus('mandatory')
dbSysNvramFailed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSysNvramFailed.setStatus('mandatory')
dbIfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 2, 1), )
if mibBuilder.loadTexts: dbIfTable.setStatus('mandatory')
dbIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 2, 1, 1), ).setIndexNames((0, "DH90-MIB", "dbIfIndex"))
if mibBuilder.loadTexts: dbIfEntry.setStatus('mandatory')
dbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbIfIndex.setStatus('mandatory')
dbIfBadFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbIfBadFramesReceived.setStatus('mandatory')
dbIfTransmitFramesError = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbIfTransmitFramesError.setStatus('mandatory')
db90Char = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 1))
db90Stat = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2))
db90Coun = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 3))
db90Span = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4))
db90PortInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5))
db90ProtoFilt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6))
db90LB100SpanningTreeVer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100SpanningTreeVer.setStatus('mandatory')
db90802SpanningTreeVer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90802SpanningTreeVer.setStatus('mandatory')
db90MaxForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxForwardingDBEntries.setStatus('mandatory')
db90MaxNVForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxNVForwardingDBEntries.setStatus('mandatory')
db90MaxProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxProtocolDBEntries.setStatus('mandatory')
db90MaxNVProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxNVProtocolDBEntries.setStatus('mandatory')
db90CurrProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90CurrProtocolDBEntries.setStatus('mandatory')
db90CurrNVProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90CurrNVProtocolDBEntries.setStatus('mandatory')
db90MgmtHeardPort = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backbone", 1), ("workgroup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MgmtHeardPort.setStatus('mandatory')
db90LB100BeingPolled = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100BeingPolled.setStatus('mandatory')
db90TimeSinceLastHello = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90TimeSinceLastHello.setStatus('mandatory')
db90HubManagement = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90HubManagement.setStatus('mandatory')
db90CurrFdbEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90CurrFdbEntries.setStatus('mandatory')
db90SpanningTreeModeChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90SpanningTreeModeChanges.setStatus('mandatory')
db90BestRootAge = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90BestRootAge.setStatus('mandatory')
db90TopologyChangeFlag = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90TopologyChangeFlag.setStatus('mandatory')
db90TellParentFlag = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90TellParentFlag.setStatus('mandatory')
db90ForwardingDBShortAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90ForwardingDBShortAgingTime.setStatus('mandatory')
db90BadHelloLimit = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90BadHelloLimit.setStatus('mandatory')
db90BadHelloResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90BadHelloResetTimer.setStatus('mandatory')
db90NoFrameInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90NoFrameInterval.setStatus('mandatory')
db90LB100PollTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100PollTime.setStatus('mandatory')
db90LB100ResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100ResponseTimeout.setStatus('mandatory')
db90LB100SpanningTreeCompat = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoSelect", 1), ("ieee802", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100SpanningTreeCompat.setStatus('mandatory')
db90IfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 1), )
if mibBuilder.loadTexts: db90IfTable.setStatus('mandatory')
db90IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 1, 1), ).setIndexNames((0, "DH90-MIB", "db90IfIndex"))
if mibBuilder.loadTexts: db90IfEntry.setStatus('mandatory')
db90IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfIndex.setStatus('mandatory')
db90IfDeviceFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfDeviceFramesReceived.setStatus('mandatory')
db90IfBadHelloLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfBadHelloLimitExceeded.setStatus('mandatory')
db90IfEtherTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 2), )
if mibBuilder.loadTexts: db90IfEtherTable.setStatus('optional')
db90IfEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 2, 1), ).setIndexNames((0, "DH90-MIB", "db90IfIndex"))
if mibBuilder.loadTexts: db90IfEtherEntry.setStatus('mandatory')
db90IfEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthIndex.setStatus('mandatory')
db90IfEthFramingError = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthFramingError.setStatus('mandatory')
db90IfEthCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthCarrierLoss.setStatus('mandatory')
db90IfEthCollisionLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthCollisionLimitExceeded.setStatus('mandatory')
db90IfSpanTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 3), )
if mibBuilder.loadTexts: db90IfSpanTable.setStatus('mandatory')
db90IfSpanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 3, 1), ).setIndexNames((0, "DH90-MIB", "db90IfIndex"))
if mibBuilder.loadTexts: db90IfSpanEntry.setStatus('mandatory')
db90IfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpIndex.setStatus('mandatory')
db90IfSpDesigRootAge = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpDesigRootAge.setStatus('mandatory')
db90IfSpForwardDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpForwardDelayTimer.setStatus('mandatory')
db90IfSpBadHelloCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpBadHelloCount.setStatus('mandatory')
db90IfSpTopologyChangeAckFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpTopologyChangeAckFlag.setStatus('mandatory')
db90ProtoFilterOther = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90ProtoFilterOther.setStatus('mandatory')
db90ProtoFilterTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 2), )
if mibBuilder.loadTexts: db90ProtoFilterTable.setStatus('mandatory')
db90ProtoFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 2, 1), ).setIndexNames((0, "DH90-MIB", "db90ProtoFilterProtocol"))
if mibBuilder.loadTexts: db90ProtoFilterEntry.setStatus('mandatory')
db90ProtoFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterProtocol.setStatus('mandatory')
db90ProtoFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("ethernet", 3), ("snap-sap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterType.setStatus('mandatory')
db90ProtoFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterStatus.setStatus('mandatory')
db90ProtoFilterMulticastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allFrames", 1), ("multicastOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterMulticastFlag.setStatus('mandatory')
db90ProtoFilterPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 3, 5, 3, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("backbone", 1), ("workGroup", 2), ("allPorts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterPortMask.setStatus('mandatory')
mibBuilder.exportSymbols("DH90-MIB", dh90SlotEntry=dh90SlotEntry, ema=ema, ds90LLatCircRetransmitLimit=ds90LLatCircRetransmitLimit, decExp=decExp, dh90SlotModuleName=dh90SlotModuleName, dh90SlotPrimarySpecific=dh90SlotPrimarySpecific, ds90LLatSessSolicitRejects=ds90LLatSessSolicitRejects, drpt90PortIndex=drpt90PortIndex, dbSysNvramFailed=dbSysNvramFailed, db90ProtoFilterTable=db90ProtoFilterTable, db90ProtoFilterStatus=db90ProtoFilterStatus, drpt90PortAddrIndex=drpt90PortAddrIndex, ds90LPortRemoteModification=ds90LPortRemoteModification, dh90TrapAddressTable=dh90TrapAddressTable, da90CommunityTable=da90CommunityTable, ds90LModuleTable=ds90LModuleTable, drpt90PortPartitionCount=drpt90PortPartitionCount, dbIfIndex=dbIfIndex, dh90SlotPolling=dh90SlotPolling, dbSysChar=dbSysChar, da90Maintenance=da90Maintenance, db90BadHelloLimit=db90BadHelloLimit, dh90LastChange=dh90LastChange, ds90LIllegalMulticastRcvs=ds90LIllegalMulticastRcvs, db90NoFrameInterval=db90NoFrameInterval, db90IfIndex=db90IfIndex, dh90SlotPassword=dh90SlotPassword, ds90LDot3StatsDeferredTransmissions=ds90LDot3StatsDeferredTransmissions, db90TopologyChangeFlag=db90TopologyChangeFlag, db90ProtoFilterEntry=db90ProtoFilterEntry, db90interfaces=db90interfaces, db90BadHelloResetTimer=db90BadHelloResetTimer, dh90SlotPhysicalAddress=dh90SlotPhysicalAddress, dbIfTransmitFramesError=dbIfTransmitFramesError, ds90LLatCircDuplsMsgs=ds90LLatCircDuplsMsgs, db90ForwardingDBShortAgingTime=db90ForwardingDBShortAgingTime, ds90LModuleEntry=ds90LModuleEntry, drpt90PortAddrTable=drpt90PortAddrTable, ds90LPortOnDemandLoading=ds90LPortOnDemandLoading, db90LB100SpanningTreeCompat=db90LB100SpanningTreeCompat, dh90SlotIndex=dh90SlotIndex, ds90LPortAutoConfigure=ds90LPortAutoConfigure, db90TellParentFlag=db90TellParentFlag, drpt90PortAutoPartitionReason=drpt90PortAutoPartitionReason, dbIfEntry=dbIfEntry, da90CommunityROString=da90CommunityROString, db90IfTable=db90IfTable, db90HubManagement=db90HubManagement, db90IfSpanEntry=db90IfSpanEntry, dh90SlotNewPassword=dh90SlotNewPassword, db90IfSpForwardDelayTimer=db90IfSpForwardDelayTimer, ds90LPrompt=ds90LPrompt, ds90LMaintenance=ds90LMaintenance, db90MaxProtocolDBEntries=db90MaxProtocolDBEntries, db90Span=db90Span, db90bridge=db90bridge, ds90LLatCircInvalidMsgs=ds90LLatCircInvalidMsgs, db90LB100ResponseTimeout=db90LB100ResponseTimeout, db90IfDeviceFramesReceived=db90IfDeviceFramesReceived, ds90LLatCircKeepAlive=ds90LLatCircKeepAlive, dh90SlotIfNumber=dh90SlotIfNumber, ds90LSessionPort=ds90LSessionPort, drpt90PortAdminStatus=drpt90PortAdminStatus, db90IfEthCarrierLoss=db90IfEthCarrierLoss, db90CurrProtocolDBEntries=db90CurrProtocolDBEntries, dh90NumberSlots=dh90NumberSlots, da90CommunityIndex=da90CommunityIndex, db90802SpanningTreeVer=db90802SpanningTreeVer, db90IfEthIndex=db90IfEthIndex, ds90LNumberModules=ds90LNumberModules, db90MaxNVForwardingDBEntries=db90MaxNVForwardingDBEntries, db90ProtoFilterMulticastFlag=db90ProtoFilterMulticastFlag, ds90LLatSessSolicitAccepts=ds90LLatSessSolicitAccepts, drpt90PortTable=drpt90PortTable, da90FlashErasures=da90FlashErasures, db90IfEtherTable=db90IfEtherTable, ds90LAuthorizeMode=ds90LAuthorizeMode, db90IfEtherEntry=db90IfEtherEntry, ds90LEnetDataOverruns=ds90LEnetDataOverruns, da90CommunityEntry=da90CommunityEntry, da90CommunityType=da90CommunityType, ds90LLatCircMsgsIns=ds90LLatCircMsgsIns, drpt90PortName=drpt90PortName, db90IfEntry=db90IfEntry, db90IfSpIndex=db90IfSpIndex, decMIBextension=decMIBextension, ds90LLatSessIllegalSlots=ds90LLatSessIllegalSlots, db90BestRootAge=db90BestRootAge, db90ext=db90ext, ds90LDot3StatsMultipleCollsionFrames=ds90LDot3StatsMultipleCollsionFrames, dbSysStatus=dbSysStatus, db90TimeSinceLastHello=db90TimeSinceLastHello, db90IfBadHelloLimitExceeded=db90IfBadHelloLimitExceeded, db90MaxNVProtocolDBEntries=db90MaxNVProtocolDBEntries, db90IfSpanTable=db90IfSpanTable, drpt90PortJamBits=drpt90PortJamBits, dh90Type=dh90Type, drpt90PortState=drpt90PortState, drpt90PortType=drpt90PortType, db90MgmtHeardPort=db90MgmtHeardPort, ds90LSessionIndex=ds90LSessionIndex, db90MaxForwardingDBEntries=db90MaxForwardingDBEntries, ds90LPortBreak=ds90LPortBreak, db90LB100PollTime=db90LB100PollTime, ds90LPortTest=ds90LPortTest, ds90LPortTable=ds90LPortTable, db90Stat=db90Stat, dec=dec, ds90L=ds90L, db90IfSpTopologyChangeAckFlag=db90IfSpTopologyChangeAckFlag, dh90=dh90, db90ProtoFilterProtocol=db90ProtoFilterProtocol, drpt90PortPhyAddr=drpt90PortPhyAddr, dh90Backplane=dh90Backplane, ds90LSlotIndex=ds90LSlotIndex, ds90LSessionTable=ds90LSessionTable, dh90SlotTable=dh90SlotTable, dbSysRomVersion=dbSysRomVersion, da90=da90, dh90SlotModuleVersion=dh90SlotModuleVersion, dh90SlotIfBase=dh90SlotIfBase, db90system=db90system, dbSysDeviceState=dbSysDeviceState, drpt90PortAddrEntry=drpt90PortAddrEntry, db90IfSpDesigRootAge=db90IfSpDesigRootAge, db90ProtoFilt=db90ProtoFilt, db90ProtoFilterPortMask=db90ProtoFilterPortMask, ds90LLatCircMsgRetransmits=ds90LLatCircMsgRetransmits, db90IfEthFramingError=db90IfEthFramingError, ds90LSessionService=ds90LSessionService, ds90LPortEntry=ds90LPortEntry, da90CommunityNumber=da90CommunityNumber, dbIfBadFramesReceived=dbIfBadFramesReceived, dh90TrapAddress=dh90TrapAddress, db90CurrFdbEntries=db90CurrFdbEntries, da90CommunityRWString=da90CommunityRWString, db90CurrNVProtocolDBEntries=db90CurrNVProtocolDBEntries, dh90TrapEntry=dh90TrapEntry, db90IfEthCollisionLimitExceeded=db90IfEthCollisionLimitExceeded, dbIfTable=dbIfTable, dh90SlotCounterTime=dh90SlotCounterTime, db90Coun=db90Coun, db90LB100BeingPolled=db90LB100BeingPolled, ds90LPortType=ds90LPortType, db90ProtoFilterType=db90ProtoFilterType, db90IfSpBadHelloCount=db90IfSpBadHelloCount, drpt90=drpt90, db90ProtoFilterOther=db90ProtoFilterOther, db90SpanningTreeModeChanges=db90SpanningTreeModeChanges, dh90SlotSecondarySpecific=dh90SlotSecondarySpecific, db90Char=db90Char, ds90LSessionRemotePortId=ds90LSessionRemotePortId, ds90LLatCircMsgsOuts=ds90LLatCircMsgsOuts, ds90LSessionRemoteNode=ds90LSessionRemoteNode, dh90SlotNumberOfPorts=dh90SlotNumberOfPorts, ds90LPortIndex=ds90LPortIndex, dbSysInitSwitch=dbSysInitSwitch, ds90LDot3StatsSingleCollisionFrames=ds90LDot3StatsSingleCollisionFrames, db90PortInterfaces=db90PortInterfaces, dh90SlotModuleType=dh90SlotModuleType, da90CommunityTrapString=da90CommunityTrapString, db90LB100SpanningTreeVer=db90LB100SpanningTreeVer, ds90LSessionEntry=ds90LSessionEntry, drpt90PortEntry=drpt90PortEntry)
