#
# PySNMP MIB module CISCOSB-vlan-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-vlan-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:08:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
VlanList3, VlanList1, VlanList2, VlanList4 = mibBuilder.importSymbols("CISCOSB-BRIDGEMIBOBJECTS-MIB", "VlanList3", "VlanList1", "VlanList2", "VlanList4")
switch001, = mibBuilder.importSymbols("CISCOSB-MIB", "switch001")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
PortList, dot1qVlanIndex, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "dot1qVlanIndex", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, iso, MibIdentifier, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Counter32, TimeTicks, ObjectIdentity, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Counter32", "TimeTicks", "ObjectIdentity", "Gauge32", "IpAddress")
RowStatus, DisplayString, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "MacAddress", "TextualConvention")
vlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48))
vlan.setRevisions(('2006-02-12 00:00', '2004-04-19 00:00',))
if mibBuilder.loadTexts: vlan.setLastUpdated('200602120000Z')
if mibBuilder.loadTexts: vlan.setOrganization('Cisco Small Business')
vlanMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMibVersion.setStatus('current')
vlanMaxTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxTableNumber.setStatus('current')
vlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 21), )
if mibBuilder.loadTexts: vlanNameTable.setStatus('current')
vlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 21, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanNameName"))
if mibBuilder.loadTexts: vlanNameEntry.setStatus('current')
vlanNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 21, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameName.setStatus('current')
vlanNameTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameTag.setStatus('current')
vlanNameIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameIfIndex.setStatus('current')
vlanPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 22), )
if mibBuilder.loadTexts: vlanPortModeTable.setStatus('current')
vlanPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPortModeEntry.setStatus('current')
vlanPortModeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeState.setStatus('current')
vlanSendUnknownToAllPorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSendUnknownToAllPorts.setStatus('current')
vlanDefaultSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDefaultSupported.setStatus('current')
vlanDot1vSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDot1vSupported.setStatus('current')
vlanDefaultEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultEnabled.setStatus('current')
vlanSpecialTagTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 33), )
if mibBuilder.loadTexts: vlanSpecialTagTable.setStatus('current')
vlanSpecialTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanSpecialTagEntry.setStatus('current')
vlanSpecialTagVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 33, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpecialTagVID.setStatus('current')
vlanSpecialTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 33, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpecialTagStatus.setStatus('current')
vlanSpecialTagCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 34), )
if mibBuilder.loadTexts: vlanSpecialTagCurrentTable.setStatus('current')
vlanSpecialTagCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanSpecialTagCurrentEntry.setStatus('current')
vlanSpecialTagCurrentVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 34, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentVID.setStatus('current')
vlanSpecialTagCurrentReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 34, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentReserved.setStatus('current')
vlanSpecialTagCurrentActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 34, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentActive.setStatus('current')
vlanPrivateEdgeSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeSupported.setStatus('current')
vlanPrivateEdgeVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeVersion.setStatus('current')
vlanPrivateEdgeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 37), )
if mibBuilder.loadTexts: vlanPrivateEdgeTable.setStatus('current')
vlanPrivateEdgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 37, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPrivateEdgeEntry.setStatus('current')
vlanPrivateEdgeUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeUplink.setStatus('current')
vlanPrivateEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 37, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeStatus.setStatus('current')
vlanDynamicVlanSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDynamicVlanSupported.setStatus('current')
vlanDynamicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 39), )
if mibBuilder.loadTexts: vlanDynamicVlanTable.setStatus('current')
vlanDynamicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 39, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanDynamicVlanMacAddress"))
if mibBuilder.loadTexts: vlanDynamicVlanEntry.setStatus('current')
vlanDynamicVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 39, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanDynamicVlanMacAddress.setStatus('current')
vlanDynamicVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 39, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDynamicVlanTag.setStatus('current')
vlanDynamicVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 39, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDynamicVlanStatus.setStatus('current')
vlanPortModeExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 40), )
if mibBuilder.loadTexts: vlanPortModeExtTable.setStatus('current')
vlanPortModeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 40, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPortModeExtEntry.setStatus('current')
vlanPortModeExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 40, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeExtState.setStatus('current')
vlanPortModeExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 40, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeExtStatus.setStatus('current')
vlanPrivateSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateSupported.setStatus('current')
vlanPrivateTableOld = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 42), )
if mibBuilder.loadTexts: vlanPrivateTableOld.setStatus('current')
vlanPrivateEntryOld = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 42, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanPrivateEntryOld.setStatus('current')
vlanPrivateOldIsolatedVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateOldIsolatedVlanTag.setStatus('current')
vlanPrivateOldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 42, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateOldStatus.setStatus('current')
vlanPrivateCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 43), )
if mibBuilder.loadTexts: vlanPrivateCommunityTable.setStatus('current')
vlanPrivateCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 43, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "CISCOSB-vlan-MIB", "vlanPrivateCommunityVlanTag"))
if mibBuilder.loadTexts: vlanPrivateCommunityEntry.setStatus('current')
vlanPrivateCommunityVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 43, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanPrivateCommunityVlanTag.setStatus('current')
vlanPrivateCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 43, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateCommunityStatus.setStatus('current')
vlanMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 44), )
if mibBuilder.loadTexts: vlanMulticastTvTable.setStatus('current')
vlanMulticastTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 44, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanMulticastTvEntry.setStatus('current')
vlanMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 44, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMulticastTvVID.setStatus('current')
vlanMulticastTvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 44, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMulticastTvStatus.setStatus('current')
vlanMacBaseVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 45), )
if mibBuilder.loadTexts: vlanMacBaseVlanGroupTable.setStatus('current')
vlanMacBaseVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 45, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanMacBaseVlanMacAddress"), (0, "CISCOSB-vlan-MIB", "vlanMacBaseVlanMacMask"))
if mibBuilder.loadTexts: vlanMacBaseVlanGroupEntry.setStatus('current')
vlanMacBaseVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 45, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanMacBaseVlanMacAddress.setStatus('current')
vlanMacBaseVlanMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 45, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 48)))
if mibBuilder.loadTexts: vlanMacBaseVlanMacMask.setStatus('current')
vlanMacBaseVlanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 45, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanGroupId.setStatus('current')
vlanMacBaseVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 45, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanGroupRowStatus.setStatus('current')
vlanMacBaseVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 46), )
if mibBuilder.loadTexts: vlanMacBaseVlanPortTable.setStatus('current')
vlanMacBaseVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 46, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "CISCOSB-vlan-MIB", "vlanMacBaseVlanPortGroupId"))
if mibBuilder.loadTexts: vlanMacBaseVlanPortEntry.setStatus('current')
vlanMacBaseVlanPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanMacBaseVlanPortGroupId.setStatus('current')
vlanMacBaseVlanPortGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 46, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanPortGroupVid.setStatus('current')
vlanMacBaseVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 46, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanPortRowStatus.setStatus('current')
vlanPrivateEdgeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 47), )
if mibBuilder.loadTexts: vlanPrivateEdgeGroupTable.setStatus('current')
vlanPrivateEdgeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 47, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanPrivateEdgeGroupSource"))
if mibBuilder.loadTexts: vlanPrivateEdgeGroupEntry.setStatus('current')
vlanPrivateEdgeGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupSource.setStatus('current')
vlanPrivateEdgeGroupUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 47, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupUplink.setStatus('current')
vlanPrivateEdgeGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 47, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupStatus.setStatus('current')
vlanPrivateEdgeGroupIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 48), )
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexTable.setStatus('current')
vlanPrivateEdgeGroupIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 48, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexEntry.setStatus('current')
vlanPrivateEdgeGroupIfIndexID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexID.setStatus('current')
vlanPrivateEdgeGroupIfIndexDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 48, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexDomainID.setStatus('current')
vlanSubnetRangeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 49), )
if mibBuilder.loadTexts: vlanSubnetRangeTable.setStatus('current')
vlanSubnetRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 49, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanSubnetRangeAddr"), (0, "CISCOSB-vlan-MIB", "vlanSubnetRangeMask"))
if mibBuilder.loadTexts: vlanSubnetRangeEntry.setStatus('current')
vlanSubnetRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 49, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSubnetRangeAddr.setStatus('current')
vlanSubnetRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 49, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSubnetRangeMask.setStatus('current')
vlanSubnetRangeGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetRangeGroupId.setStatus('current')
vlanSubnetRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 49, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetRangeRowStatus.setStatus('current')
vlanSubnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 50), )
if mibBuilder.loadTexts: vlanSubnetPortTable.setStatus('current')
vlanSubnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 50, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "CISCOSB-vlan-MIB", "vlanSubnetPortGroupId"))
if mibBuilder.loadTexts: vlanSubnetPortEntry.setStatus('current')
vlanSubnetPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanSubnetPortGroupId.setStatus('current')
vlanSubnetPortGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 50, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetPortGroupVid.setStatus('current')
vlanSubnetPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 50, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetPortRowStatus.setStatus('current')
vlanTriplePlayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 51), )
if mibBuilder.loadTexts: vlanTriplePlayTable.setStatus('current')
vlanTriplePlayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 51, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanTriplePlayInnerVID"))
if mibBuilder.loadTexts: vlanTriplePlayEntry.setStatus('current')
vlanTriplePlayInnerVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 51, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanTriplePlayInnerVID.setStatus('current')
vlanTriplePlayMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 51, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvVID.setStatus('current')
vlanTriplePlayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 51, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTriplePlayRowStatus.setStatus('current')
vlanTriplePlayMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 52), )
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvTable.setStatus('current')
vlanTriplePlayMulticatTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 52, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanTriplePlayMulticastTvMulticastTvVID"))
if mibBuilder.loadTexts: vlanTriplePlayMulticatTvEntry.setStatus('current')
vlanTriplePlayMulticastTvMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 52, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvMulticastTvVID.setStatus('current')
vlanTriplePlayMulticastTvMulticastTvPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 52, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvMulticastTvPortList.setStatus('current')
vlanDefaultExtManagment = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 53), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultExtManagment.setStatus('current')
vlanVoice = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54))
vlanVoiceAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200)).clone(1440)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAgingTimeout.setStatus('current')
vlanVoiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 2), )
if mibBuilder.loadTexts: vlanVoiceTable.setStatus('current')
vlanVoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanVoiceEntry.setStatus('current')
vlanVoicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePriority.setStatus('current')
vlanVoicePriorityRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoicePriorityRemark.setStatus('current')
vlanVoiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoiceRowStatus.setStatus('current')
vlanVoiceOUITable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 3), )
if mibBuilder.loadTexts: vlanVoiceOUITable.setStatus('current')
vlanVoiceOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 3, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanVoiceOUIPrefix"))
if mibBuilder.loadTexts: vlanVoiceOUIEntry.setStatus('current')
vlanVoiceOUIPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: vlanVoiceOUIPrefix.setStatus('current')
vlanVoiceOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIDescription.setStatus('current')
vlanVoiceOUIEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoiceOUIEntryRowStatus.setStatus('current')
vlanVoicePortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 4), )
if mibBuilder.loadTexts: vlanVoicePortTable.setStatus('current')
vlanVoicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanVoicePortEntry.setStatus('current')
vlanVoicePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePortEnable.setStatus('current')
vlanVoicePortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 4, 1, 2), VlanIndex().clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePortVlanIndex.setStatus('current')
vlanVoicePortSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePortSecure.setStatus('current')
vlanVoicePortCurrentMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoicePortCurrentMembership.setStatus('current')
vlanVoicePortQosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("src", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePortQosMode.setStatus('current')
vlanVoiceOUISetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUISetToDefault.setStatus('current')
vlanDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 55))
vlanDefaultTaggedPorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 55, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultTaggedPorts.setStatus('current')
vlanDefaultEnabledPorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 55, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultEnabledPorts.setStatus('current')
vlanInetTriplePlayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 56), )
if mibBuilder.loadTexts: vlanInetTriplePlayTable.setStatus('current')
vlanInetTriplePlayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 56, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanInetTriplePlayInetAddressType"), (0, "CISCOSB-vlan-MIB", "vlanTriplePlayInnerVID"))
if mibBuilder.loadTexts: vlanInetTriplePlayEntry.setStatus('current')
vlanInetTriplePlayInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 56, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInetTriplePlayInetAddressType.setStatus('current')
vlanInetTriplePlayInnerVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 56, 1, 2), VlanIndex())
if mibBuilder.loadTexts: vlanInetTriplePlayInnerVID.setStatus('current')
vlanInetTriplePlayMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 56, 1, 3), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvVID.setStatus('current')
vlanInetTriplePlayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 56, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInetTriplePlayRowStatus.setStatus('current')
vlanInetTriplePlayMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 57), )
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvTable.setStatus('current')
vlanInetTriplePlayMulticatTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 57, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanTriplePlayMulticastTvMulticastTvVID"))
if mibBuilder.loadTexts: vlanInetTriplePlayMulticatTvEntry.setStatus('current')
vlanInetTriplePlayMulticastTvMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 57, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvMulticastTvVID.setStatus('current')
vlanInetTriplePlayMulticastTvMulticastTvPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 57, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvMulticastTvPortList.setStatus('current')
vlanAsymmetricEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAsymmetricEnabled.setStatus('current')
vlanPrivateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 59), )
if mibBuilder.loadTexts: vlanPrivateTable.setStatus('current')
vlanPrivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 59, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanPrivateVid"))
if mibBuilder.loadTexts: vlanPrivateEntry.setStatus('current')
vlanPrivateVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 59, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanPrivateVid.setStatus('current')
vlanPrivateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 59, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("isolated", 2), ("community", 3))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateType.setStatus('current')
vlanPrivatePrimaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 59, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivatePrimaryVid.setStatus('current')
vlanPrivateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 59, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateStatus.setStatus('current')
vlanPrivateMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 60), )
if mibBuilder.loadTexts: vlanPrivateMapTable.setStatus('current')
vlanPrivateMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 60, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanPrivateMapPrimaryVid"), (0, "CISCOSB-vlan-MIB", "vlanPrivateMapSecondaryVid"))
if mibBuilder.loadTexts: vlanPrivateMapEntry.setStatus('current')
vlanPrivateMapPrimaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 60, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanPrivateMapPrimaryVid.setStatus('current')
vlanPrivateMapSecondaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 60, 1, 2), VlanIndex())
if mibBuilder.loadTexts: vlanPrivateMapSecondaryVid.setStatus('current')
vlanPrivateMapPrimaryPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 60, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateMapPrimaryPorts.setStatus('current')
vlanPrivateMapSecondaryPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 60, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateMapSecondaryPorts.setStatus('current')
vlanPrivateMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 60, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateMapStatus.setStatus('current')
vlanTrunkPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 61), )
if mibBuilder.loadTexts: vlanTrunkPortModeTable.setStatus('current')
vlanTrunkPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 61, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanTrunkPortModeEntry.setStatus('current')
vlanTrunkPortModeNativeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 61, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkPortModeNativeVlanId.setStatus('current')
vlanTrunkModeList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 61, 1, 2), VlanList1()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkModeList1to1024.setStatus('current')
vlanTrunkModeList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 61, 1, 3), VlanList2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkModeList1025to2048.setStatus('current')
vlanTrunkModeList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 61, 1, 4), VlanList3()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkModeList2049to3072.setStatus('current')
vlanTrunkModeList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 61, 1, 5), VlanList4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkModeList3073to4094.setStatus('current')
vlanAccessPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 62), )
if mibBuilder.loadTexts: vlanAccessPortModeTable.setStatus('current')
vlanAccessPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 62, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanAccessPortModeEntry.setStatus('current')
vlanAccessPortModeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 62, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAccessPortModeVlanId.setStatus('current')
vlanAccessPortModeMcstTvVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 62, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAccessPortModeMcstTvVlanId.setStatus('current')
vlanCustomerPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 63), )
if mibBuilder.loadTexts: vlanCustomerPortModeTable.setStatus('current')
vlanCustomerPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 63, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanCustomerPortModeEntry.setStatus('current')
vlanCustomerPortModeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 63, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCustomerPortModeVlanId.setStatus('current')
vlanCustomerPortModeMtvList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 63, 1, 2), VlanList1()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCustomerPortModeMtvList1to1024.setStatus('current')
vlanCustomerPortModeMtvList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 63, 1, 3), VlanList2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCustomerPortModeMtvList1025to2048.setStatus('current')
vlanCustomerPortModeMtvList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 63, 1, 4), VlanList3()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCustomerPortModeMtvList2049to3072.setStatus('current')
vlanCustomerPortModeMtvList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 63, 1, 5), VlanList4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCustomerPortModeMtvList3073to4094.setStatus('current')
vlanSwitchPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 64), )
if mibBuilder.loadTexts: vlanSwitchPortModeTable.setStatus('current')
vlanSwitchPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 64, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanSwitchPortModeEntry.setStatus('current')
vlanSwitchPortModeCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 64, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSwitchPortModeCategory.setStatus('current')
vlanPortModeContextTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 65), )
if mibBuilder.loadTexts: vlanPortModeContextTable.setStatus('current')
vlanPortModeContextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 65, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPortModeContextEntry.setStatus('current')
vlanPortModeContextValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 65, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeContextValue.setStatus('current')
vlanRsvlEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanRsvlEnable.setStatus('current')
vlanRsvlMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 67), )
if mibBuilder.loadTexts: vlanRsvlMapTable.setStatus('current')
vlanRsvlMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 67, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "vlanRsvlMapPrimaryVid"), (0, "CISCOSB-vlan-MIB", "vlanRsvlMapSecondaryVid"))
if mibBuilder.loadTexts: vlanRsvlMapEntry.setStatus('current')
vlanRsvlMapPrimaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 67, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanRsvlMapPrimaryVid.setStatus('current')
vlanRsvlMapSecondaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 67, 1, 2), VlanIndex())
if mibBuilder.loadTexts: vlanRsvlMapSecondaryVid.setStatus('current')
vlanRsvlMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 67, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanRsvlMapStatus.setStatus('current')
rldot1qPortVlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68), )
if mibBuilder.loadTexts: rldot1qPortVlanStaticTable.setStatus('current')
rldot1qPortVlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rldot1qPortVlanStaticEntry.setStatus('current')
rldot1qPortVlanStaticEgressList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 1), VlanList1().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticEgressList1to1024.setStatus('current')
rldot1qPortVlanStaticEgressList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 2), VlanList2().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticEgressList1025to2048.setStatus('current')
rldot1qPortVlanStaticEgressList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 3), VlanList3().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticEgressList2049to3072.setStatus('current')
rldot1qPortVlanStaticEgressList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 4), VlanList4().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticEgressList3073to4094.setStatus('current')
rldot1qPortVlanStaticUntaggedEgressList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 5), VlanList1().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticUntaggedEgressList1to1024.setStatus('current')
rldot1qPortVlanStaticUntaggedEgressList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 6), VlanList2().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticUntaggedEgressList1025to2048.setStatus('current')
rldot1qPortVlanStaticUntaggedEgressList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 7), VlanList3().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticUntaggedEgressList2049to3072.setStatus('current')
rldot1qPortVlanStaticUntaggedEgressList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 8), VlanList4().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticUntaggedEgressList3073to4094.setStatus('current')
rldot1qPortVlanStaticForbiddenList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 9), VlanList1().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticForbiddenList1to1024.setStatus('current')
rldot1qPortVlanStaticForbiddenList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 10), VlanList2().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticForbiddenList1025to2048.setStatus('current')
rldot1qPortVlanStaticForbiddenList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 11), VlanList3().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticForbiddenList2049to3072.setStatus('current')
rldot1qPortVlanStaticForbiddenList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 68, 1, 12), VlanList4().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qPortVlanStaticForbiddenList3073to4094.setStatus('current')
rldot1qVlanStaticListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 69), )
if mibBuilder.loadTexts: rldot1qVlanStaticListTable.setStatus('current')
rldot1qVlanStaticListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 69, 1), ).setIndexNames((0, "CISCOSB-vlan-MIB", "rldot1qVlanStaticListIndex"))
if mibBuilder.loadTexts: rldot1qVlanStaticListEntry.setStatus('current')
rldot1qVlanStaticListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 69, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("dynamicGvrp", 1), ("dynamicRava", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qVlanStaticListIndex.setStatus('current')
rldot1qVlanStaticList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 69, 1, 2), VlanList1()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qVlanStaticList1to1024.setStatus('current')
rldot1qVlanStaticList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 69, 1, 3), VlanList2().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qVlanStaticList1025to2048.setStatus('current')
rldot1qVlanStaticList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 69, 1, 4), VlanList3().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qVlanStaticList2049to3072.setStatus('current')
rldot1qVlanStaticList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 69, 1, 5), VlanList4().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qVlanStaticList3073to4094.setStatus('current')
rldot1qVlanStaticNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 70), )
if mibBuilder.loadTexts: rldot1qVlanStaticNameTable.setStatus('current')
rldot1qVlanStaticNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 70, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: rldot1qVlanStaticNameEntry.setStatus('current')
rldot1qVlanStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 70, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1qVlanStaticName.setStatus('current')
rlPortVlanTriplePlayMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 71), )
if mibBuilder.loadTexts: rlPortVlanTriplePlayMulticastTvTable.setStatus('current')
rlPortVlanTriplePlayMulticastTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 71, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlPortVlanTriplePlayMulticastTvEntry.setStatus('current')
rlPortVlanTriplePlayMulticastTvList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 71, 1, 1), VlanList1()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortVlanTriplePlayMulticastTvList1to1024.setStatus('current')
rlPortVlanTriplePlayMulticastTvList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 71, 1, 2), VlanList2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortVlanTriplePlayMulticastTvList1025to2048.setStatus('current')
rlPortVlanTriplePlayMulticastTvList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 71, 1, 3), VlanList3()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortVlanTriplePlayMulticastTvList2049to3072.setStatus('current')
rlPortVlanTriplePlayMulticastTvList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 71, 1, 4), VlanList4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortVlanTriplePlayMulticastTvList3073to4094.setStatus('current')
rldot1qVlanMembershipTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 72), )
if mibBuilder.loadTexts: rldot1qVlanMembershipTypeTable.setStatus('current')
rldot1qVlanMembershipTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 72, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: rldot1qVlanMembershipTypeEntry.setStatus('current')
rldot1qVlanMembershipTypeBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 72, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1qVlanMembershipTypeBitmap.setStatus('current')
mibBuilder.exportSymbols("CISCOSB-vlan-MIB", vlanInetTriplePlayTable=vlanInetTriplePlayTable, vlanSubnetRangeGroupId=vlanSubnetRangeGroupId, vlanVoicePriority=vlanVoicePriority, rldot1qVlanStaticName=rldot1qVlanStaticName, rldot1qPortVlanStaticForbiddenList1025to2048=rldot1qPortVlanStaticForbiddenList1025to2048, rlPortVlanTriplePlayMulticastTvEntry=rlPortVlanTriplePlayMulticastTvEntry, vlanTriplePlayMulticastTvVID=vlanTriplePlayMulticastTvVID, vlanSpecialTagCurrentReserved=vlanSpecialTagCurrentReserved, vlanDynamicVlanSupported=vlanDynamicVlanSupported, vlanPortModeContextEntry=vlanPortModeContextEntry, vlanPortModeTable=vlanPortModeTable, vlanSpecialTagCurrentEntry=vlanSpecialTagCurrentEntry, vlanSpecialTagCurrentVID=vlanSpecialTagCurrentVID, vlanPrivateSupported=vlanPrivateSupported, vlanSubnetPortTable=vlanSubnetPortTable, vlanSubnetRangeRowStatus=vlanSubnetRangeRowStatus, vlanTriplePlayMulticastTvMulticastTvPortList=vlanTriplePlayMulticastTvMulticastTvPortList, vlanVoicePortEntry=vlanVoicePortEntry, vlan=vlan, vlanSubnetRangeTable=vlanSubnetRangeTable, vlanSubnetRangeMask=vlanSubnetRangeMask, vlanPrivateTableOld=vlanPrivateTableOld, vlanPrivateEdgeTable=vlanPrivateEdgeTable, vlanCustomerPortModeMtvList1025to2048=vlanCustomerPortModeMtvList1025to2048, rldot1qVlanStaticList2049to3072=rldot1qVlanStaticList2049to3072, vlanMulticastTvTable=vlanMulticastTvTable, vlanDefaultExtManagment=vlanDefaultExtManagment, vlanAsymmetricEnabled=vlanAsymmetricEnabled, vlanPrivateEdgeUplink=vlanPrivateEdgeUplink, vlanCustomerPortModeTable=vlanCustomerPortModeTable, vlanSwitchPortModeTable=vlanSwitchPortModeTable, vlanDefaultEnabled=vlanDefaultEnabled, vlanMacBaseVlanGroupRowStatus=vlanMacBaseVlanGroupRowStatus, vlanTriplePlayInnerVID=vlanTriplePlayInnerVID, vlanPrivateTable=vlanPrivateTable, vlanNameName=vlanNameName, rldot1qVlanMembershipTypeEntry=rldot1qVlanMembershipTypeEntry, vlanMacBaseVlanGroupId=vlanMacBaseVlanGroupId, rldot1qPortVlanStaticUntaggedEgressList2049to3072=rldot1qPortVlanStaticUntaggedEgressList2049to3072, PYSNMP_MODULE_ID=vlan, rldot1qPortVlanStaticTable=rldot1qPortVlanStaticTable, vlanTrunkModeList2049to3072=vlanTrunkModeList2049to3072, vlanVoicePortVlanIndex=vlanVoicePortVlanIndex, vlanRsvlMapTable=vlanRsvlMapTable, vlanTrunkModeList3073to4094=vlanTrunkModeList3073to4094, vlanPrivateMapSecondaryPorts=vlanPrivateMapSecondaryPorts, vlanTriplePlayTable=vlanTriplePlayTable, vlanTrunkPortModeTable=vlanTrunkPortModeTable, vlanPrivateMapTable=vlanPrivateMapTable, vlanPrivateEdgeGroupSource=vlanPrivateEdgeGroupSource, vlanPrivateEdgeGroupIfIndexID=vlanPrivateEdgeGroupIfIndexID, vlanPrivateEntryOld=vlanPrivateEntryOld, vlanSendUnknownToAllPorts=vlanSendUnknownToAllPorts, vlanPrivateEdgeGroupIfIndexEntry=vlanPrivateEdgeGroupIfIndexEntry, vlanSpecialTagCurrentTable=vlanSpecialTagCurrentTable, vlanSubnetPortEntry=vlanSubnetPortEntry, vlanMaxTableNumber=vlanMaxTableNumber, vlanVoiceRowStatus=vlanVoiceRowStatus, vlanPortModeContextTable=vlanPortModeContextTable, rldot1qPortVlanStaticForbiddenList3073to4094=rldot1qPortVlanStaticForbiddenList3073to4094, vlanInetTriplePlayMulticatTvEntry=vlanInetTriplePlayMulticatTvEntry, rldot1qVlanStaticList1025to2048=rldot1qVlanStaticList1025to2048, vlanVoice=vlanVoice, vlanMacBaseVlanPortRowStatus=vlanMacBaseVlanPortRowStatus, vlanSubnetRangeEntry=vlanSubnetRangeEntry, vlanSubnetRangeAddr=vlanSubnetRangeAddr, rldot1qVlanStaticList1to1024=rldot1qVlanStaticList1to1024, vlanVoicePortSecure=vlanVoicePortSecure, vlanPrivateOldIsolatedVlanTag=vlanPrivateOldIsolatedVlanTag, vlanPrivateEdgeStatus=vlanPrivateEdgeStatus, rlPortVlanTriplePlayMulticastTvTable=rlPortVlanTriplePlayMulticastTvTable, vlanTrunkPortModeEntry=vlanTrunkPortModeEntry, rldot1qVlanStaticNameTable=rldot1qVlanStaticNameTable, vlanPrivateEdgeGroupIfIndexTable=vlanPrivateEdgeGroupIfIndexTable, vlanTriplePlayEntry=vlanTriplePlayEntry, rldot1qPortVlanStaticEgressList3073to4094=rldot1qPortVlanStaticEgressList3073to4094, vlanPrivateEdgeGroupIfIndexDomainID=vlanPrivateEdgeGroupIfIndexDomainID, rldot1qPortVlanStaticForbiddenList1to1024=rldot1qPortVlanStaticForbiddenList1to1024, vlanMacBaseVlanPortEntry=vlanMacBaseVlanPortEntry, rldot1qVlanStaticList3073to4094=rldot1qVlanStaticList3073to4094, vlanVoiceOUIEntry=vlanVoiceOUIEntry, vlanDot1vSupported=vlanDot1vSupported, vlanSubnetPortRowStatus=vlanSubnetPortRowStatus, vlanSwitchPortModeEntry=vlanSwitchPortModeEntry, rldot1qVlanStaticNameEntry=rldot1qVlanStaticNameEntry, vlanPrivateVid=vlanPrivateVid, vlanDynamicVlanTable=vlanDynamicVlanTable, vlanMacBaseVlanPortGroupId=vlanMacBaseVlanPortGroupId, vlanRsvlMapPrimaryVid=vlanRsvlMapPrimaryVid, vlanSpecialTagVID=vlanSpecialTagVID, vlanAccessPortModeVlanId=vlanAccessPortModeVlanId, vlanDynamicVlanTag=vlanDynamicVlanTag, vlanMacBaseVlanMacAddress=vlanMacBaseVlanMacAddress, vlanDefaultTaggedPorts=vlanDefaultTaggedPorts, vlanAccessPortModeTable=vlanAccessPortModeTable, rldot1qPortVlanStaticEgressList2049to3072=rldot1qPortVlanStaticEgressList2049to3072, vlanInetTriplePlayEntry=vlanInetTriplePlayEntry, vlanPrivateEdgeGroupUplink=vlanPrivateEdgeGroupUplink, vlanPrivateEdgeEntry=vlanPrivateEdgeEntry, vlanPrivateMapPrimaryVid=vlanPrivateMapPrimaryVid, vlanInetTriplePlayMulticastTvMulticastTvPortList=vlanInetTriplePlayMulticastTvMulticastTvPortList, vlanPortModeExtState=vlanPortModeExtState, vlanRsvlEnable=vlanRsvlEnable, vlanMacBaseVlanGroupEntry=vlanMacBaseVlanGroupEntry, vlanPrivateMapSecondaryVid=vlanPrivateMapSecondaryVid, vlanPrivateEdgeSupported=vlanPrivateEdgeSupported, vlanInetTriplePlayMulticastTvVID=vlanInetTriplePlayMulticastTvVID, vlanPrivateOldStatus=vlanPrivateOldStatus, vlanVoicePortQosMode=vlanVoicePortQosMode, vlanVoiceEntry=vlanVoiceEntry, vlanNameEntry=vlanNameEntry, vlanPrivateEdgeVersion=vlanPrivateEdgeVersion, rlPortVlanTriplePlayMulticastTvList2049to3072=rlPortVlanTriplePlayMulticastTvList2049to3072, vlanMulticastTvStatus=vlanMulticastTvStatus, rldot1qPortVlanStaticUntaggedEgressList1025to2048=rldot1qPortVlanStaticUntaggedEgressList1025to2048, vlanNameIfIndex=vlanNameIfIndex, vlanTrunkPortModeNativeVlanId=vlanTrunkPortModeNativeVlanId, rldot1qPortVlanStaticUntaggedEgressList3073to4094=rldot1qPortVlanStaticUntaggedEgressList3073to4094, vlanVoicePriorityRemark=vlanVoicePriorityRemark, rldot1qVlanStaticListIndex=rldot1qVlanStaticListIndex, vlanPortModeExtStatus=vlanPortModeExtStatus, vlanMibVersion=vlanMibVersion, vlanPrivatePrimaryVid=vlanPrivatePrimaryVid, vlanInetTriplePlayInnerVID=vlanInetTriplePlayInnerVID, vlanDynamicVlanMacAddress=vlanDynamicVlanMacAddress, vlanTriplePlayMulticatTvEntry=vlanTriplePlayMulticatTvEntry, vlanPrivateEdgeGroupEntry=vlanPrivateEdgeGroupEntry, vlanVoiceOUIDescription=vlanVoiceOUIDescription, vlanMacBaseVlanPortTable=vlanMacBaseVlanPortTable, vlanRsvlMapEntry=vlanRsvlMapEntry, vlanInetTriplePlayMulticastTvTable=vlanInetTriplePlayMulticastTvTable, vlanAccessPortModeEntry=vlanAccessPortModeEntry, vlanPortModeEntry=vlanPortModeEntry, vlanPrivateCommunityVlanTag=vlanPrivateCommunityVlanTag, vlanTrunkModeList1025to2048=vlanTrunkModeList1025to2048, vlanNameTag=vlanNameTag, vlanVoiceTable=vlanVoiceTable, vlanDynamicVlanStatus=vlanDynamicVlanStatus, vlanCustomerPortModeMtvList1to1024=vlanCustomerPortModeMtvList1to1024, vlanVoiceOUIPrefix=vlanVoiceOUIPrefix, vlanSpecialTagEntry=vlanSpecialTagEntry, vlanPortModeContextValue=vlanPortModeContextValue, vlanSpecialTagStatus=vlanSpecialTagStatus, vlanTriplePlayRowStatus=vlanTriplePlayRowStatus, vlanInetTriplePlayRowStatus=vlanInetTriplePlayRowStatus, vlanDefaultEnabledPorts=vlanDefaultEnabledPorts, vlanDefaultSupported=vlanDefaultSupported, vlanInetTriplePlayMulticastTvMulticastTvVID=vlanInetTriplePlayMulticastTvMulticastTvVID, vlanNameTable=vlanNameTable, vlanMacBaseVlanPortGroupVid=vlanMacBaseVlanPortGroupVid, vlanSwitchPortModeCategory=vlanSwitchPortModeCategory, rldot1qPortVlanStaticForbiddenList2049to3072=rldot1qPortVlanStaticForbiddenList2049to3072, vlanPrivateEdgeGroupTable=vlanPrivateEdgeGroupTable, rlPortVlanTriplePlayMulticastTvList1025to2048=rlPortVlanTriplePlayMulticastTvList1025to2048, vlanCustomerPortModeMtvList2049to3072=vlanCustomerPortModeMtvList2049to3072, vlanTriplePlayMulticastTvTable=vlanTriplePlayMulticastTvTable, vlanTriplePlayMulticastTvMulticastTvVID=vlanTriplePlayMulticastTvMulticastTvVID, rldot1qVlanStaticListEntry=rldot1qVlanStaticListEntry, vlanVoicePortEnable=vlanVoicePortEnable, rlPortVlanTriplePlayMulticastTvList1to1024=rlPortVlanTriplePlayMulticastTvList1to1024, vlanPrivateType=vlanPrivateType, vlanMulticastTvVID=vlanMulticastTvVID, vlanPrivateEdgeGroupStatus=vlanPrivateEdgeGroupStatus, vlanPortModeState=vlanPortModeState, vlanPrivateCommunityEntry=vlanPrivateCommunityEntry, vlanVoicePortTable=vlanVoicePortTable, vlanCustomerPortModeMtvList3073to4094=vlanCustomerPortModeMtvList3073to4094, vlanVoiceAgingTimeout=vlanVoiceAgingTimeout, vlanTrunkModeList1to1024=vlanTrunkModeList1to1024, vlanSubnetPortGroupVid=vlanSubnetPortGroupVid, vlanVoiceOUISetToDefault=vlanVoiceOUISetToDefault, rldot1qVlanStaticListTable=rldot1qVlanStaticListTable, vlanCustomerPortModeVlanId=vlanCustomerPortModeVlanId, vlanInetTriplePlayInetAddressType=vlanInetTriplePlayInetAddressType, rldot1qPortVlanStaticEgressList1025to2048=rldot1qPortVlanStaticEgressList1025to2048, vlanMacBaseVlanGroupTable=vlanMacBaseVlanGroupTable, rldot1qVlanMembershipTypeTable=rldot1qVlanMembershipTypeTable, vlanVoiceOUITable=vlanVoiceOUITable, vlanSpecialTagCurrentActive=vlanSpecialTagCurrentActive, vlanPrivateMapPrimaryPorts=vlanPrivateMapPrimaryPorts, vlanSpecialTagTable=vlanSpecialTagTable, vlanPrivateCommunityStatus=vlanPrivateCommunityStatus, vlanPortModeExtTable=vlanPortModeExtTable, vlanPrivateCommunityTable=vlanPrivateCommunityTable, vlanAccessPortModeMcstTvVlanId=vlanAccessPortModeMcstTvVlanId, vlanPrivateMapStatus=vlanPrivateMapStatus, rldot1qPortVlanStaticEgressList1to1024=rldot1qPortVlanStaticEgressList1to1024, vlanMacBaseVlanMacMask=vlanMacBaseVlanMacMask, vlanCustomerPortModeEntry=vlanCustomerPortModeEntry, vlanPrivateMapEntry=vlanPrivateMapEntry, vlanVoicePortCurrentMembership=vlanVoicePortCurrentMembership, rldot1qPortVlanStaticEntry=rldot1qPortVlanStaticEntry, vlanDynamicVlanEntry=vlanDynamicVlanEntry, rldot1qVlanMembershipTypeBitmap=rldot1qVlanMembershipTypeBitmap, rlPortVlanTriplePlayMulticastTvList3073to4094=rlPortVlanTriplePlayMulticastTvList3073to4094, vlanPrivateStatus=vlanPrivateStatus, vlanMulticastTvEntry=vlanMulticastTvEntry, rldot1qPortVlanStaticUntaggedEgressList1to1024=rldot1qPortVlanStaticUntaggedEgressList1to1024, vlanDefault=vlanDefault, vlanPortModeExtEntry=vlanPortModeExtEntry, vlanVoiceOUIEntryRowStatus=vlanVoiceOUIEntryRowStatus, vlanRsvlMapSecondaryVid=vlanRsvlMapSecondaryVid, vlanRsvlMapStatus=vlanRsvlMapStatus, vlanSubnetPortGroupId=vlanSubnetPortGroupId, vlanPrivateEntry=vlanPrivateEntry)
