#
# PySNMP MIB module ITOUCH-X25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-X25-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
iTouch, = mibBuilder.importSymbols("ITOUCH-MIB", "iTouch")
X121Address, = mibBuilder.importSymbols("RFC1382-MIB", "X121Address")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Gauge32, iso, NotificationType, Integer32, Counter64, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Gauge32", "iso", "NotificationType", "Integer32", "Counter64", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 20))
xX25ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 33, 20, 4), )
if mibBuilder.loadTexts: xX25ChannelTable.setStatus('mandatory')
xX25ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 20, 4, 1), ).setIndexNames((0, "ITOUCH-X25-MIB", "xX25ChannelIndex"))
if mibBuilder.loadTexts: xX25ChannelEntry.setStatus('mandatory')
xX25ChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xX25ChannelIndex.setStatus('mandatory')
xX25ChannelLowPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25ChannelLowPVC.setStatus('mandatory')
xX25ChannelHighPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25ChannelHighPVC.setStatus('mandatory')
xX25ChannelNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccitt", 1), ("ddnStandard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25ChannelNetwork.setStatus('mandatory')
xX25ChannelMaxPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25ChannelMaxPrecedence.setStatus('mandatory')
xX25ChannelStdVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25ChannelStdVersion.setStatus('mandatory')
xX25VcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 33, 20, 6), )
if mibBuilder.loadTexts: xX25VcCfgTable.setStatus('mandatory')
xX25VcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 20, 6, 1), ).setIndexNames((0, "ITOUCH-X25-MIB", "xX25VcCfgIndex"))
if mibBuilder.loadTexts: xX25VcCfgEntry.setStatus('mandatory')
xX25VcCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xX25VcCfgIndex.setStatus('mandatory')
xX25VcCfgPartnerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 2), X121Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgPartnerAddr.setStatus('mandatory')
xX25VcCfgInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgInterfaceIndex.setStatus('mandatory')
xX25VcCfgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgLinkIndex.setStatus('mandatory')
xX25VcCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("appleTalk", 1), ("bridged", 2), ("decnet", 3), ("ip", 4), ("ipx", 5), ("multiProtocol", 6), ("osi", 7))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgProtocol.setStatus('mandatory')
xX25VcCfgEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("dedicated", 2), ("snap", 3))).clone('dedicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgEncapsulation.setStatus('mandatory')
xX25VcCfgPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgPvc.setStatus('mandatory')
xX25VcCfgPartnerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgPartnerIpAddress.setStatus('mandatory')
xX25VcCfgClearFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2))).clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgClearFacilities.setStatus('mandatory')
xX25VcCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25VcCfgStatus.setStatus('mandatory')
xX25LinkTable = MibTable((1, 3, 6, 1, 4, 1, 33, 20, 7), )
if mibBuilder.loadTexts: xX25LinkTable.setStatus('mandatory')
xX25LinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 20, 7, 1), ).setIndexNames((0, "ITOUCH-X25-MIB", "xX25LinkIndex"))
if mibBuilder.loadTexts: xX25LinkEntry.setStatus('mandatory')
xX25LinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xX25LinkIndex.setStatus('mandatory')
xX25LinkRRDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkRRDelay.setStatus('mandatory')
xX25LinkIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkIdleTimeout.setStatus('mandatory')
xX25LinkHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkHoldDownTimer.setStatus('mandatory')
xX25LinkAccUncfgCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkAccUncfgCalls.setStatus('mandatory')
xX25LinkDefWindSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkDefWindSize.setStatus('mandatory')
xX25LinkMaxWindSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkMaxWindSize.setStatus('mandatory')
xX25LinkDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("bytes16", 16), ("bytes32", 32), ("bytes64", 64), ("bytes128", 128), ("bytes256", 256), ("bytes512", 512), ("bytes1024", 1024), ("bytes2048", 2048), ("bytes4096", 4096)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkDefPktSize.setStatus('mandatory')
xX25LinkDefThrptClassIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 150, 300, 600, 1200, 2400, 4800, 9600, 19200, 48000))).clone(namedValues=NamedValues(("bps75", 75), ("bps150", 150), ("bps300", 300), ("bps600", 600), ("bps1200", 1200), ("bps2400", 2400), ("bps4800", 4800), ("bps9600", 9600), ("bps19200", 19200), ("bps48000", 48000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkDefThrptClassIn.setStatus('mandatory')
xX25LinkDefThrptClassOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 150, 300, 600, 1200, 2400, 4800, 9600, 19200, 48000))).clone(namedValues=NamedValues(("bps75", 75), ("bps150", 150), ("bps300", 300), ("bps600", 600), ("bps1200", 1200), ("bps2400", 2400), ("bps4800", 4800), ("bps9600", 9600), ("bps19200", 19200), ("bps48000", 48000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkDefThrptClassOut.setStatus('mandatory')
xX25LinkDefThrptClassInMsk = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 150, 300, 600, 1200, 2400, 4800, 9600, 19200, 48000))).clone(namedValues=NamedValues(("bps75", 75), ("bps150", 150), ("bps300", 300), ("bps600", 600), ("bps1200", 1200), ("bps2400", 2400), ("bps4800", 4800), ("bps9600", 9600), ("bps19200", 19200), ("bps48000", 48000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkDefThrptClassInMsk.setStatus('deprecated')
xX25LinkDefThrptClassOutMsk = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 150, 300, 600, 1200, 2400, 4800, 9600, 19200, 48000))).clone(namedValues=NamedValues(("bps75", 75), ("bps150", 150), ("bps300", 300), ("bps600", 600), ("bps1200", 1200), ("bps2400", 2400), ("bps4800", 4800), ("bps9600", 9600), ("bps19200", 19200), ("bps48000", 48000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkDefThrptClassOutMsk.setStatus('deprecated')
xX25LinkFlowCtrlNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkFlowCtrlNeg.setStatus('mandatory')
xX25LinkThrptClassNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkThrptClassNeg.setStatus('mandatory')
xX25LinkICallBarred = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkICallBarred.setStatus('mandatory')
xX25LinkOCallBarred = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkOCallBarred.setStatus('mandatory')
xX25LinkOneOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkOneOut.setStatus('mandatory')
xX25LinkOneIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkOneIn.setStatus('mandatory')
xX25LinkRevChargeAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkRevChargeAcc.setStatus('mandatory')
xX25LinkLocalChargePrevent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkLocalChargePrevent.setStatus('mandatory')
xX25LinkRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkRpoa.setStatus('mandatory')
xX25LinkNui = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkNui.setStatus('mandatory')
xX25LinkMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 64, 128, 256, 512, 1024))).clone(namedValues=NamedValues(("bytes16", 16), ("bytes32", 32), ("bytes64", 64), ("bytes128", 128), ("bytes256", 256), ("bytes512", 512), ("bytes1024", 1024)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkMaxPacketSize.setStatus('mandatory')
xX25LinkInsertCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkInsertCallingAddr.setStatus('mandatory')
xX25LinkDefaultInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 20, 7, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xX25LinkDefaultInterface.setStatus('mandatory')
mibBuilder.exportSymbols("ITOUCH-X25-MIB", xX25VcCfgLinkIndex=xX25VcCfgLinkIndex, xX25LinkHoldDownTimer=xX25LinkHoldDownTimer, xX25ChannelIndex=xX25ChannelIndex, xX25LinkTable=xX25LinkTable, xX25ChannelHighPVC=xX25ChannelHighPVC, xX25LinkDefPktSize=xX25LinkDefPktSize, xX25ChannelStdVersion=xX25ChannelStdVersion, xX25=xX25, xX25VcCfgPvc=xX25VcCfgPvc, xX25LinkMaxWindSize=xX25LinkMaxWindSize, xX25LinkDefThrptClassIn=xX25LinkDefThrptClassIn, xX25LinkInsertCallingAddr=xX25LinkInsertCallingAddr, xX25VcCfgClearFacilities=xX25VcCfgClearFacilities, xX25LinkOneOut=xX25LinkOneOut, xX25VcCfgPartnerIpAddress=xX25VcCfgPartnerIpAddress, xX25LinkRevChargeAcc=xX25LinkRevChargeAcc, xX25ChannelLowPVC=xX25ChannelLowPVC, xX25LinkAccUncfgCalls=xX25LinkAccUncfgCalls, xX25ChannelEntry=xX25ChannelEntry, xX25LinkLocalChargePrevent=xX25LinkLocalChargePrevent, xX25LinkDefWindSize=xX25LinkDefWindSize, xX25LinkNui=xX25LinkNui, xX25LinkMaxPacketSize=xX25LinkMaxPacketSize, xX25LinkICallBarred=xX25LinkICallBarred, xX25LinkEntry=xX25LinkEntry, xX25LinkDefThrptClassOutMsk=xX25LinkDefThrptClassOutMsk, xX25VcCfgProtocol=xX25VcCfgProtocol, xX25LinkIndex=xX25LinkIndex, xX25LinkIdleTimeout=xX25LinkIdleTimeout, xX25LinkDefThrptClassInMsk=xX25LinkDefThrptClassInMsk, xX25LinkOneIn=xX25LinkOneIn, xX25LinkRpoa=xX25LinkRpoa, xX25VcCfgPartnerAddr=xX25VcCfgPartnerAddr, xX25ChannelTable=xX25ChannelTable, xX25VcCfgTable=xX25VcCfgTable, xX25LinkDefThrptClassOut=xX25LinkDefThrptClassOut, xX25VcCfgInterfaceIndex=xX25VcCfgInterfaceIndex, xX25LinkThrptClassNeg=xX25LinkThrptClassNeg, xX25LinkFlowCtrlNeg=xX25LinkFlowCtrlNeg, xX25LinkOCallBarred=xX25LinkOCallBarred, xX25VcCfgStatus=xX25VcCfgStatus, xX25ChannelNetwork=xX25ChannelNetwork, xX25VcCfgEntry=xX25VcCfgEntry, xX25LinkDefaultInterface=xX25LinkDefaultInterface, xX25VcCfgIndex=xX25VcCfgIndex, xX25LinkRRDelay=xX25LinkRRDelay, xX25VcCfgEncapsulation=xX25VcCfgEncapsulation, xX25ChannelMaxPrecedence=xX25ChannelMaxPrecedence)
