#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-PORT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
tmnxChassisNotifyChassisId, tmnxChassisIndex, tmnxHwObjs, TmnxMDAChanType, TmnxPortAdminStatus, tmnxHwNotification, TmnxAlarmState, tmnxHwConformance = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId", "tmnxChassisIndex", "tmnxHwObjs", "TmnxMDAChanType", "TmnxPortAdminStatus", "tmnxHwNotification", "TmnxAlarmState", "tmnxHwConformance")
timetraSRMIBModules, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
TPortSchedulerCIR, TPortSchedulerPIR, TmnxPortID, TNamedItemOrEmpty, TmnxOperState, TmnxActionType, TSecondaryShaper10GPIRRate, TQueueId, TItemLongDescription, TNamedItem, TMlpppQoSProfileId, TFCName, TItemDescription = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TPortSchedulerCIR", "TPortSchedulerPIR", "TmnxPortID", "TNamedItemOrEmpty", "TmnxOperState", "TmnxActionType", "TSecondaryShaper10GPIRRate", "TQueueId", "TItemLongDescription", "TNamedItem", "TMlpppQoSProfileId", "TFCName", "TItemDescription")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, IpAddress, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32")
TextualConvention, RowStatus, TimeStamp, RowPointer, MacAddress, DisplayString, DateAndTime, TimeInterval, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "RowPointer", "MacAddress", "DisplayString", "DateAndTime", "TimeInterval", "TruthValue")
tmnxPortMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 25))
tmnxPortMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-03-16 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-03-01 00:00',))
if mibBuilder.loadTexts: tmnxPortMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: tmnxPortMIBModule.setOrganization('Alcatel')
tmnxPortObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4))
tmnxPortNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7))
tmnxFRObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9))
tmnxQosAppObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10))
tmnxATMObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11))
tmnxPortStatsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12))
tmnxPortNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2))
tmnxPortNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0))
tmnxPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2))
class TmnxPortOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("diagnosing", 4), ("failed", 5))

class TmnxPortEtherReportValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notUsed", 0), ("signalFailure", 1), ("remoteFault", 2), ("localFault", 3), ("noFrameLock", 4), ("highBer", 5))

class TmnxPortEtherReportStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("signalFailure", 1), ("remoteFault", 2), ("localFault", 3), ("noFrameLock", 4), ("highBer", 5))

class TmnxPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("faste", 2), ("gige", 3), ("xgige", 4), ("sonet", 5), ("vport", 6), ("unused", 7), ("xcme", 8), ("tdm", 9))

class TmnxPortConnectorType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxPortState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("ghost", 2), ("linkDown", 3), ("linkUp", 4), ("up", 5), ("diagnose", 6))

class TmnxPortType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxDs0ChannelList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 4)

class TmnxBundleID(TextualConvention, Unsigned32):
    status = 'current'

class TmnxDSXBertPattern(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("ones", 1), ("zeros", 2), ("alternating", 3), ("twoexp3", 4), ("twoexp9", 5), ("twoexp15", 6), ("twoexp20", 7), ("twoexp11", 8), ("twoexp20q", 9), ("twoexp23", 10))

class TmnxDSXBertOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("active", 1), ("idle", 2), ("noMdaResources", 3))

class TmnxDSXIdleCycleFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("flags", 1), ("ones", 2))

class TmnxDSXIdleFillType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("allOnes", 1), ("userDefinedPattern", 2))

class TmnxDSXLoopback(TextualConvention, Integer32):
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("remote", 3))

class TmnxDSXReportAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5), ("berSd", 6), ("berSf", 7))

class TmnxDSXClockSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("loopTimed", 1), ("nodeTimed", 2), ("adaptive", 3), ("differential", 4))

class TmnxDSXClockSyncState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("normal", 1), ("holdOver", 2), ("freeRun", 3))

class TmnxDS1Loopback(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("fdlAnsi", 3), ("fdlBellcore", 4), ("payloadAnsi", 5), ("inbandAnsi", 6), ("inbandBellcore", 7))

class TmnxDS3Loopback(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("remote", 3))

class TmnxImaGrpState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("invalid", 0), ("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class TmnxImaGrpFailState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12), ("invalidImaVersionNe", 13), ("invalidImaVersionFe", 14))

class TmnxImaLnkState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

class TmnxImaLnkFailState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9))

class TmnxImaTestState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("operating", 2), ("failed", 3))

class TmnxImaGrpClockModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ctc", 1), ("itc", 2))

class TmnxImaGrpVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("oneDotZero", 1), ("oneDotOne", 2))

class TmnxMcMlpppClassIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 15)

class TmnxMlpppEndpointIdClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("nullClass", 0), ("localAddress", 1), ("ipAddress", 2), ("ieee802dot1GlobalMacAddress", 3), ("pppMagicNumberBlock", 4), ("publicSwitchedNetworkDirNumber", 5))

tmnxPortTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTableLastChange.setStatus('current')
tmnxPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2), )
if mibBuilder.loadTexts: tmnxPortTable.setStatus('current')
tmnxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortEntry.setStatus('current')
tmnxPortPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: tmnxPortPortID.setStatus('current')
tmnxPortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastChangeTime.setStatus('current')
tmnxPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 3), TmnxPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortType.setStatus('current')
tmnxPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 4), TmnxPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortClass.setStatus('current')
tmnxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 5), TItemLongDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDescription.setStatus('current')
tmnxPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortName.setStatus('current')
tmnxPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAlias.setStatus('current')
tmnxPortUserAssignedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortUserAssignedMac.setStatus('current')
tmnxPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortMacAddress.setStatus('current')
tmnxPortHwMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortHwMacAddress.setStatus('current')
tmnxPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("access", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortMode.setStatus('current')
tmnxPortEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("nullEncap", 1), ("qEncap", 2), ("mplsEncap", 3), ("bcpNullEncap", 4), ("bcpDot1qEncap", 5), ("ipcpEncap", 6), ("frEncap", 7), ("pppAutoEncap", 8), ("atmEncap", 9), ("qinqEncap", 10), ("wanMirrorEncap", 11), ("ciscoHDLCEncap", 12), ("cemEncap", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEncapType.setStatus('current')
tmnxPortLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLagId.setStatus('current')
tmnxPortHoldTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeUp.setStatus('current')
tmnxPortHoldTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeDown.setStatus('current')
tmnxPortUpProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 16), Bits().clone(namedValues=NamedValues(("portUpIpv4", 0), ("portUpMpls", 1), ("portUpBcp", 2), ("portUpIso", 3), ("portUpFr", 4), ("portUpAtm", 5), ("portUpChdlc", 6), ("portUpIma", 7), ("portUpIpv6", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortUpProtocols.setStatus('current')
tmnxPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 17), TmnxPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectorType.setStatus('current')
tmnxPortTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 0), ("gbic", 1), ("moduleConnectorSolderedToMotherboard", 2), ("sfpTransceiver", 3), ("xbiTransceiver", 4), ("xenpakTransceiver", 5), ("xfpTransceiver", 6), ("xffTransceiver", 7), ("xfpeTransceiver", 8), ("xpakTransceiver", 9), ("x2Transceiver", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverType.setStatus('current')
tmnxPortTransceiverCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 26), Bits().clone(namedValues=NamedValues(("unknown", 0), ("oc48-longreach", 1), ("oc48-intermediatereach", 2), ("oc48-shortreach", 3), ("oc12-singlemodelongreach", 4), ("oc12-singlemodeinterreach", 5), ("oc12-multimodeshortreach", 6), ("oc3-singlemodelongreach", 7), ("oc3-singlemodeinterreach", 8), ("oc3-multi-modeshortreach", 9), ("gige-1000base-t", 10), ("gige-1000base-cx", 11), ("gige-1000base-lx", 12), ("gige-1000base-sx", 13), ("faste-100base-mm-fx", 14), ("faste-100base-sm-fx", 15), ("xgige-10gbase-sr", 16), ("xgige-10gbase-lr", 17), ("xgige-10gbase-er", 18), ("xgige-10gbase-sw", 19), ("xgige-10gbase-lw", 20), ("xgige-10gbase-ew", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverCode.setStatus('obsolete')
tmnxPortTransceiverLaserWaveLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverLaserWaveLen.setStatus('current')
tmnxPortTransceiverDiagCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverDiagCapable.setStatus('current')
tmnxPortTransceiverModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 29), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverModelNumber.setStatus('current')
tmnxPortSFPConnectorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 128))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("fiberChannel-Style1-CopperConnector", 2), ("fiberChannel-Style2-CopperConnector", 3), ("bncortnc", 4), ("fiberChannelCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdcII", 32), ("copperPigtail", 33), ("copperGigE", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPConnectorCode.setStatus('current')
tmnxPortSFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorOUI.setStatus('current')
tmnxPortSFPVendorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorManufactureDate.setStatus('current')
tmnxPortSFPMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("ethernet", 1), ("sonetsdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPMedia.setStatus('current')
tmnxPortSFPEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPEquipped.setStatus('current')
tmnxPortEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEquipped.setStatus('current')
tmnxPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLinkStatus.setStatus('current')
tmnxPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 37), TmnxPortAdminStatus().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAdminStatus.setStatus('current')
tmnxPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 38), TmnxPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOperStatus.setStatus('current')
tmnxPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 39), TmnxPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortState.setStatus('current')
tmnxPortPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 40), TmnxPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPrevState.setStatus('current')
tmnxPortNumAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNumAlarms.setStatus('current')
tmnxPortAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 42), TmnxAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortAlarmState.setStatus('current')
tmnxPortLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 43), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastAlarmEvent.setStatus('current')
tmnxPortClearAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 44), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortClearAlarms.setStatus('current')
tmnxPortSFPVendorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 45), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorSerialNum.setStatus('current')
tmnxPortSFPVendorPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 46), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorPartNum.setStatus('current')
tmnxPortLastStateChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 48), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastStateChanged.setStatus('current')
tmnxPortNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNumChannels.setStatus('current')
tmnxPortNetworkEgrQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 50), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortNetworkEgrQueues.setStatus('current')
tmnxPortBundleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortBundleNumber.setStatus('current')
tmnxPortIsLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIsLeaf.setStatus('current')
tmnxPortChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 53), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortChanType.setStatus('current')
tmnxPortParentPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 54), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortParentPortID.setStatus('current')
tmnxPortOpticalCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOpticalCompliance.setStatus('current')
tmnxPortLoadBalanceAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("default", 1), ("includeL4", 2), ("excludeL4", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoadBalanceAlgorithm.setStatus('current')
tmnxPortEgrPortSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 57), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrPortSchedPlcy.setStatus('current')
tmnxPortLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 58), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastClearedTime.setStatus('current')
tmnxPortIngNamedPoolPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 60), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortIngNamedPoolPlcy.setStatus('current')
tmnxPortEgrNamedPoolPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 61), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrNamedPoolPlcy.setStatus('current')
tmnxPortIngPoolPercentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortIngPoolPercentRate.setStatus('current')
tmnxPortEgrPoolPercentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrPoolPercentRate.setStatus('current')
tmnxPortDDMEventSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 64), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDDMEventSuppression.setStatus('current')
tmnxPortSFPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-equipped", 0), ("operational", 1), ("read-error", 2), ("data-corrupt", 3), ("ddm-corrupt", 4), ("unsupported", 5))).clone('not-equipped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPStatus.setStatus('current')
tmnxPortTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3), )
if mibBuilder.loadTexts: tmnxPortTestTable.setStatus('current')
tmnxPortTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1), )
tmnxPortEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestEntry"))
tmnxPortTestEntry.setIndexNames(*tmnxPortEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxPortTestEntry.setStatus('current')
tmnxPortTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInTest", 1), ("inTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestState.setStatus('current')
tmnxPortTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("loopback1", 1), ("loopback2", 2), ("loopback3", 3), ("singalInsertion", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestMode.setStatus('current')
tmnxPortTestParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestParameter.setStatus('current')
tmnxPortTestLastResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("success", 1), ("failure", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestLastResult.setStatus('current')
tmnxPortTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestStartTime.setStatus('current')
tmnxPortTestEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestEndTime.setStatus('current')
tmnxPortTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestDuration.setStatus('current')
tmnxPortTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("startTest", 2), ("stopTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestAction.setStatus('current')
tmnxPortEtherTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4), )
if mibBuilder.loadTexts: tmnxPortEtherTable.setStatus('current')
tmnxPortEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortEtherEntry.setStatus('current')
tmnxPortEtherMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9212), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherMTU.setStatus('current')
tmnxPortEtherDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("fullDuplex", 1), ("halfDuplex", 2))).clone('fullDuplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDuplex.setStatus('current')
tmnxPortEtherSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("speed10", 1), ("speed100", 2), ("speed1000", 3), ("speed10000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSpeed.setStatus('current')
tmnxPortEtherAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("true", 1), ("false", 2), ("limited", 3))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherAutoNegotiate.setStatus('current')
tmnxPortEtherOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherOperDuplex.setStatus('current')
tmnxPortEtherOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 6), Unsigned32()).setUnits('mega-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherOperSpeed.setStatus('current')
tmnxPortEtherAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherAcctPolicyId.setStatus('current')
tmnxPortEtherCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCollectStats.setStatus('current')
tmnxPortEtherMDIMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherMDIMDIX.setStatus('current')
tmnxPortEtherXGigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("lan", 1), ("wan", 2))).clone('lan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherXGigMode.setStatus('current')
tmnxPortEtherEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 10000000), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherEgressRate.setStatus('current')
tmnxPortEtherDot1qEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDot1qEtype.setStatus('current')
tmnxPortEtherQinqEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherQinqEtype.setStatus('current')
tmnxPortEtherIngressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 10000), )).clone(-1)).setUnits('mega-bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherIngressRate.setStatus('current')
tmnxPortEtherReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 15), TmnxPortEtherReportStatus().clone(namedValues=NamedValues(("remoteFault", 2), ("localFault", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherReportAlarm.setStatus('current')
tmnxPortEtherReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 16), TmnxPortEtherReportStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherReportAlarmStatus.setStatus('current')
tmnxPortEtherPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherPkts1519toMax.setStatus('current')
tmnxPortEtherHCOverPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherHCOverPkts1519toMax.setStatus('current')
tmnxPortEtherHCPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherHCPkts1519toMax.setStatus('current')
tmnxPortEtherLacpTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherLacpTunnel.setStatus('current')
tmnxPortEtherDownWhenLoopedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedEnabled.setStatus('current')
tmnxPortEtherDownWhenLoopedKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedKeepAlive.setStatus('current')
tmnxPortEtherDownWhenLoopedRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 160), )).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedRetry.setStatus('current')
tmnxPortEtherDownWhenLoopedState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoopDetected", 1), ("loopDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedState.setStatus('current')
tmnxPortEtherPBBEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(35047)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherPBBEtype.setStatus('current')
tmnxPortEtherReasonDownFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 26), Bits().clone(namedValues=NamedValues(("unknown", 0), ("linklossFwd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherReasonDownFlags.setStatus('current')
tmnxSonetTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5), )
if mibBuilder.loadTexts: tmnxSonetTable.setStatus('current')
tmnxSonetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetEntry.setStatus('current')
tmnxSonetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oc3", 1), ("oc12", 2), ("oc48", 3), ("oc192", 4), ("oc768", 5), ("oc1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSpeed.setStatus('current')
tmnxSonetClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTimed", 1), ("nodeTimed", 2))).clone('loopTimed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetClockSource.setStatus('current')
tmnxSonetFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sonet", 2), ("sdh", 3))).clone('sonet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetFraming.setStatus('current')
tmnxSonetReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 4), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12))).clone(namedValues=NamedValues(("loc", 1), ("lrdi", 3), ("lb2erSf", 7), ("slof", 8), ("slos", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetReportAlarm.setStatus('current')
tmnxSonetBerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetBerSdThreshold.setStatus('current')
tmnxSonetBerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 6)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetBerSfThreshold.setStatus('current')
tmnxSonetAps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetAps.setStatus('obsolete')
tmnxSonetApsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 8), TmnxPortAdminStatus().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAdminStatus.setStatus('obsolete')
tmnxSonetApsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 9), TmnxPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsOperStatus.setStatus('obsolete')
tmnxSonetApsAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAuthKey.setStatus('obsolete')
tmnxSonetApsNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsNeighborAddr.setStatus('obsolete')
tmnxSonetApsAdvertiseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 12), TimeInterval().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseInterval.setStatus('obsolete')
tmnxSonetApsAdvertiseTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 13), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseTimeLeft.setStatus('obsolete')
tmnxSonetApsHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 14), TimeInterval().clone(3000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsHoldTime.setStatus('obsolete')
tmnxSonetApsHoldTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 15), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsHoldTimeLeft.setStatus('obsolete')
tmnxSonetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("line", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetLoopback.setStatus('current')
tmnxSonetReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 17), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetReportAlarmStatus.setStatus('current')
tmnxSonetSectionTraceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("increment-z0", 1), ("byte", 2), ("string", 3))).clone('byte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSectionTraceMode.setStatus('current')
tmnxSonetJ0String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="01")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetJ0String.setStatus('current')
tmnxSonetMonS1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(204)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonS1Byte.setStatus('current')
tmnxSonetMonJ0String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonJ0String.setStatus('current')
tmnxSonetMonK1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonK1Byte.setStatus('current')
tmnxSonetMonK2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonK2Byte.setStatus('current')
tmnxSonetSingleFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSingleFiber.setStatus('current')
tmnxSonetHoldTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetHoldTimeUp.setStatus('current')
tmnxSonetHoldTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetHoldTimeDown.setStatus('current')
tmnxSonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6), )
if mibBuilder.loadTexts: tmnxSonetPathTable.setStatus('current')
tmnxSonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetPathEntry.setStatus('current')
tmnxSonetPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathRowStatus.setStatus('current')
tmnxSonetPathLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathLastChangeTime.setStatus('current')
tmnxSonetPathMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathMTU.setStatus('current')
tmnxSonetPathScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathScramble.setStatus('current')
tmnxSonetPathC2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathC2Byte.setStatus('current')
tmnxSonetPathJ1String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathJ1String.setStatus('current')
tmnxSonetPathCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathCRC.setStatus('current')
tmnxSonetPathOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 8), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathOperMTU.setStatus('current')
tmnxSonetPathOperMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathOperMRU.setStatus('current')
tmnxSonetPathReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 10), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8))).clone(namedValues=NamedValues(("plop", 2), ("pplm", 5), ("puneq", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathReportAlarm.setStatus('current')
tmnxSonetPathAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathAcctPolicyId.setStatus('current')
tmnxSonetPathCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathCollectStats.setStatus('current')
tmnxSonetPathReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 13), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathReportAlarmStatus.setStatus('current')
tmnxSonetPathMonC2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathMonC2Byte.setStatus('current')
tmnxSonetPathMonJ1String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathMonJ1String.setStatus('current')
tmnxSonetPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2), ("vtg", 3), ("tug-2", 4), ("tug-3", 5))).clone('ds3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathType.setStatus('obsolete')
tmnxSonetPathChildType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 17), TmnxMDAChanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathChildType.setStatus('current')
tmnxPortTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7), )
if mibBuilder.loadTexts: tmnxPortTypeTable.setStatus('current')
tmnxPortTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeIndex"))
if mibBuilder.loadTexts: tmnxPortTypeEntry.setStatus('current')
tmnxPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 1), TmnxPortType())
if mibBuilder.loadTexts: tmnxPortTypeIndex.setStatus('current')
tmnxPortTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeName.setStatus('current')
tmnxPortTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeDescription.setStatus('current')
tmnxPortTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeStatus.setStatus('current')
tmnxPortConnectTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8), )
if mibBuilder.loadTexts: tmnxPortConnectTypeTable.setStatus('current')
tmnxPortConnectTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeIndex"))
if mibBuilder.loadTexts: tmnxPortConnectTypeEntry.setStatus('current')
tmnxPortConnectTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 1), TmnxPortConnectorType())
if mibBuilder.loadTexts: tmnxPortConnectTypeIndex.setStatus('current')
tmnxPortConnectTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeName.setStatus('current')
tmnxPortConnectTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeDescription.setStatus('current')
tmnxPortConnectTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeStatus.setStatus('current')
tmnxPortFCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9), )
if mibBuilder.loadTexts: tmnxPortFCStatsTable.setStatus('obsolete')
tmnxPortFCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIndex"))
if mibBuilder.loadTexts: tmnxPortFCStatsEntry.setStatus('obsolete')
tmnxPortFCStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 1), TFCName())
if mibBuilder.loadTexts: tmnxPortFCStatsIndex.setStatus('obsolete')
tmnxPortFCStatsIngFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfOcts.setStatus('obsolete')
tmnxPortFCStatsIngFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfOcts.setStatus('obsolete')
tmnxPortFCStatsIngDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfOcts.setStatus('obsolete')
tmnxPortFCStatsIngDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfOcts.setStatus('obsolete')
tmnxDS3Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10), )
if mibBuilder.loadTexts: tmnxDS3Table.setStatus('current')
tmnxDS3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS3Entry.setStatus('current')
tmnxDS3Buildout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3Buildout.setStatus('current')
tmnxDS3LastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3LastChangeTime.setStatus('current')
tmnxDS3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2))).clone('ds3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3Type.setStatus('current')
tmnxDS3ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11), )
if mibBuilder.loadTexts: tmnxDS3ChannelTable.setStatus('current')
tmnxDS3ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS3ChannelEntry.setStatus('current')
tmnxDS3ChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelRowStatus.setStatus('current')
tmnxDS3ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelType.setStatus('current')
tmnxDS3ChannelFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbit", 1), ("m23", 2), ("g751", 3), ("g832", 4))).clone('cbit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelFraming.setStatus('current')
tmnxDS3ChannelClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 4), TmnxDSXClockSource().clone('loopTimed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelClockSource.setStatus('current')
tmnxDS3ChannelChannelized = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ds1", 2), ("e1", 3), ("j1", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelChannelized.setStatus('current')
tmnxDS3ChannelSubrateCSUMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notUsed", 0), ("digital-link", 1))).clone('notUsed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelSubrateCSUMode.setStatus('current')
tmnxDS3ChannelSubrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelSubrate.setStatus('current')
tmnxDS3ChannelIdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 8), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelIdleCycleFlags.setStatus('current')
tmnxDS3ChannelLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 9), TmnxDS3Loopback().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelLoopback.setStatus('current')
tmnxDS3ChannelBitErrorInsertionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBitErrorInsertionRate.setStatus('current')
tmnxDS3ChannelBERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 11), TmnxDSXBertPattern().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTPattern.setStatus('current')
tmnxDS3ChannelBERTDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTDuration.setStatus('current')
tmnxDS3ChannelMDLEicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLEicString.setStatus('current')
tmnxDS3ChannelMDLLicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLLicString.setStatus('current')
tmnxDS3ChannelMDLFicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLFicString.setStatus('current')
tmnxDS3ChannelMDLUnitString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLUnitString.setStatus('current')
tmnxDS3ChannelMDLPfiString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPfiString.setStatus('current')
tmnxDS3ChannelMDLPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPortString.setStatus('current')
tmnxDS3ChannelMDLGenString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLGenString.setStatus('current')
tmnxDS3ChannelMDLMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 20), Bits().clone(namedValues=NamedValues(("none", 0), ("ds3Path", 1), ("idleSignal", 2), ("testSignal", 3))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMessageType.setStatus('current')
tmnxDS3ChannelFEACLoopRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelFEACLoopRespond.setStatus('current')
tmnxDS3ChannelCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelCRC.setStatus('current')
tmnxDS3ChannelMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMTU.setStatus('current')
tmnxDS3ChannelOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 24), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelOperMTU.setStatus('current')
tmnxDS3ChannelReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 25), TmnxDSXReportAlarm().clone(namedValues=NamedValues(("ais", 1), ("los", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarm.setStatus('current')
tmnxDS3ChannelReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 26), TmnxDSXReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarmStatus.setStatus('current')
tmnxDS3ChannelLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelLastChangeTime.setStatus('current')
tmnxDS3ChannelInFEACLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelInFEACLoop.setStatus('current')
tmnxDS3ChannelMDLMonPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonPortString.setStatus('current')
tmnxDS3ChannelMDLMonGenString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonGenString.setStatus('current')
tmnxDS3ChannelBERTOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 31), TmnxDSXBertOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTOperStatus.setStatus('current')
tmnxDS3ChannelBERTSynched = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 32), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTSynched.setStatus('current')
tmnxDS3ChannelBERTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTErrors.setStatus('current')
tmnxDS3ChannelBERTTotalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTTotalBits.setStatus('current')
tmnxDS3ChannelScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 35), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelScramble.setStatus('current')
tmnxDS3ChannelAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelAcctPolicyId.setStatus('current')
tmnxDS3ChannelCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 37), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelCollectStats.setStatus('current')
tmnxDS3ChannelClockSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 38), TmnxDSXClockSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelClockSyncState.setStatus('current')
tmnxDS3ChannelClockMasterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 39), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelClockMasterPortId.setStatus('current')
tmnxDS1Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12), )
if mibBuilder.loadTexts: tmnxDS1Table.setStatus('current')
tmnxDS1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS1Entry.setStatus('current')
tmnxDS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1RowStatus.setStatus('current')
tmnxDS1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("e1", 2), ("j1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1Type.setStatus('current')
tmnxDS1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2), ("g704-no-crc", 3), ("g704", 4), ("e1-unframed", 5), ("ds1-unframed", 6))).clone('esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1Framing.setStatus('current')
tmnxDS1IdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 4), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1IdleCycleFlags.setStatus('obsolete')
tmnxDS1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 5), TmnxDS1Loopback().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1Loopback.setStatus('current')
tmnxDS1InvertData = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1InvertData.setStatus('current')
tmnxDS1BitErrorInsertionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BitErrorInsertionRate.setStatus('current')
tmnxDS1BERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 8), TmnxDSXBertPattern().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BERTPattern.setStatus('current')
tmnxDS1BERTDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BERTDuration.setStatus('current')
tmnxDS1ReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 10), TmnxDSXReportAlarm().clone(namedValues=NamedValues(("ais", 1), ("los", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1ReportAlarm.setStatus('current')
tmnxDS1ReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 11), TmnxDSXReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ReportAlarmStatus.setStatus('current')
tmnxDS1LastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1LastChangeTime.setStatus('current')
tmnxDS1ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 13), TmnxDSXClockSource().clone('loopTimed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1ClockSource.setStatus('current')
tmnxDS1BERTOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 14), TmnxDSXBertOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTOperStatus.setStatus('current')
tmnxDS1BERTSynched = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTSynched.setStatus('current')
tmnxDS1BERTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTErrors.setStatus('current')
tmnxDS1BERTTotalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTTotalBits.setStatus('current')
tmnxDS1RemoteLoopRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1RemoteLoopRespond.setStatus('current')
tmnxDS1InRemoteLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1InRemoteLoop.setStatus('current')
tmnxDS1InsertSingleBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 20), TmnxActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1InsertSingleBitError.setStatus('current')
tmnxDS1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("cas", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1SignalMode.setStatus('current')
tmnxDS1ClockSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 22), TmnxDSXClockSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ClockSyncState.setStatus('current')
tmnxDS1ClockMasterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 23), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ClockMasterPortId.setStatus('current')
tmnxDS1BerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), )).clone(5)).setUnits('error bits in million bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BerSdThreshold.setStatus('current')
tmnxDS1BerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), )).clone(50)).setUnits('error bits in million bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BerSfThreshold.setStatus('current')
tmnxDS0ChanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13), )
if mibBuilder.loadTexts: tmnxDS0ChanGroupTable.setStatus('current')
tmnxDS0ChanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS0ChanGroupEntry.setStatus('current')
tmnxDS0ChanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupRowStatus.setStatus('current')
tmnxDS0ChanGroupTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 2), TmnxDs0ChannelList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupTimeSlots.setStatus('current')
tmnxDS0ChanGroupSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-56", 1), ("speed-64", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSpeed.setStatus('current')
tmnxDS0ChanGroupCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupCRC.setStatus('current')
tmnxDS0ChanGroupMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupMTU.setStatus('current')
tmnxDS0ChanGroupOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 6), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS0ChanGroupOperMTU.setStatus('current')
tmnxDS0ChanGroupLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS0ChanGroupLastChangeTime.setStatus('current')
tmnxDS0ChanGroupIdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 8), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupIdleCycleFlags.setStatus('current')
tmnxDS0ChanGroupScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupScramble.setStatus('current')
tmnxDS0ChanGroupAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupAcctPolicyId.setStatus('current')
tmnxDS0ChanGroupCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupCollectStats.setStatus('current')
tmnxDS0ChanGroupPayloadFillType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 12), TmnxDSXIdleFillType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadFillType.setStatus('current')
tmnxDS0ChanGroupPayloadPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadPattern.setStatus('current')
tmnxDS0ChanGroupSignalFillType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 14), TmnxDSXIdleFillType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalFillType.setStatus('current')
tmnxDS0ChanGroupSignalPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalPattern.setStatus('current')
tmnxBundleTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14), )
if mibBuilder.loadTexts: tmnxBundleTable.setStatus('current')
tmnxBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleEntry.setStatus('current')
tmnxBundleBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 1), TmnxBundleID())
if mibBuilder.loadTexts: tmnxBundleBundleID.setStatus('current')
tmnxBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRowStatus.setStatus('current')
tmnxBundleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mlppp", 1), ("mlfr", 2), ("imagrp", 3))).clone('mlppp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleType.setStatus('current')
tmnxBundleMinimumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMinimumLinks.setStatus('current')
tmnxBundleNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleNumLinks.setStatus('current')
tmnxBundleNumActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleNumActiveLinks.setStatus('current')
tmnxBundleMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1500, 9206), )).clone(1524)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMRRU.setStatus('current')
tmnxBundleOperMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 8), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleOperMRRU.setStatus('current')
tmnxBundlePeerMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundlePeerMRRU.setStatus('current')
tmnxBundleOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 10), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleOperMTU.setStatus('current')
tmnxBundleRedDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25), ValueRangeConstraint(0, 50), ))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRedDiffDelay.setStatus('current')
tmnxBundleRedDiffDelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("down", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRedDiffDelayAction.setStatus('current')
tmnxBundleYellowDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleYellowDiffDelay.setStatus('current')
tmnxBundleShortSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleShortSequence.setStatus('current')
tmnxBundleLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleLastChangeTime.setStatus('current')
tmnxBundleFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 512), )).clone(128)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleFragmentThreshold.setStatus('current')
tmnxBundleUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleUpTime.setStatus('current')
tmnxBundleInputDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleInputDiscards.setStatus('current')
tmnxBundlePrimaryMemberPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 19), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundlePrimaryMemberPortID.setStatus('current')
tmnxBundleLFI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleLFI.setStatus('current')
tmnxBundleProtectedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("working", 1), ("protection", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleProtectedType.setStatus('current')
tmnxBundleParentBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 22), TmnxBundleID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleParentBundle.setStatus('current')
tmnxBundleMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15), )
if mibBuilder.loadTexts: tmnxBundleMemberTable.setStatus('current')
tmnxBundleMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberEntry.setStatus('current')
tmnxBundleMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMemberRowStatus.setStatus('current')
tmnxBundleMemberActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberActive.setStatus('current')
tmnxBundleMemberDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("outOfService", 1), ("redDiffDelayExceeded", 2), ("mismatchEndPtDiscriminator", 3), ("peerNotBundleMember", 4), ("underNegotiation", 5), ("peerInvalidMlHdrFmt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberDownReason.setStatus('current')
tmnxBundleMemberUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberUpTime.setStatus('current')
tmnxPortToChannelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16), )
if mibBuilder.loadTexts: tmnxPortToChannelTable.setStatus('current')
tmnxPortToChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxChannelIdxString"))
if mibBuilder.loadTexts: tmnxPortToChannelEntry.setStatus('current')
tmnxChannelIdxString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1, 1), DisplayString())
if mibBuilder.loadTexts: tmnxChannelIdxString.setStatus('current')
tmnxChannelPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChannelPortID.setStatus('current')
tmnxPortIngrMdaQosStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17), )
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatTable.setStatus('current')
tmnxPortIngrMdaQosStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatEntry.setStatus('current')
tmnxPortIngrMdaQos00StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos00StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos01StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos01StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos02StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos02StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos03StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos03StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos04StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos04StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos05StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos05StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos06StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos06StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos07StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos07StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos08StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos08StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos09StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos09StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos10StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos10StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos11StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos11StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos12StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos12StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos13StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos13StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos14StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos14StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos15StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos15StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropOcts.setStatus('current')
tmnxSonetGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18), )
if mibBuilder.loadTexts: tmnxSonetGroupTable.setStatus('current')
tmnxSonetGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetGroupEntry.setStatus('current')
tmnxSonetGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 1), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupType.setStatus('current')
tmnxSonetGroupParentPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupParentPortID.setStatus('current')
tmnxSonetGroupChildType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 3), TmnxMDAChanType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetGroupChildType.setStatus('current')
tmnxSonetGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupName.setStatus('current')
tmnxCiscoHDLCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20), )
if mibBuilder.loadTexts: tmnxCiscoHDLCTable.setStatus('current')
tmnxCiscoHDLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxCiscoHDLCEntry.setStatus('current')
tmnxCiscoHDLCKeepAliveInt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCKeepAliveInt.setStatus('current')
tmnxCiscoHDLCUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCUpCount.setStatus('current')
tmnxCiscoHDLCDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCDownCount.setStatus('current')
tmnxCiscoHDLCOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 4), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCOperState.setStatus('current')
tmnxCiscoHDLCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3), )
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsTable.setStatus('current')
tmnxCiscoHDLCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1), )
tmnxCiscoHDLCEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatsEntry"))
tmnxCiscoHDLCStatsEntry.setIndexNames(*tmnxCiscoHDLCEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsEntry.setStatus('current')
tmnxCiscoHDLCDiscardStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatInPkts.setStatus('current')
tmnxCiscoHDLCDiscardStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatOutPkts.setStatus('current')
tmnxCiscoHDLCStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInPkts.setStatus('current')
tmnxCiscoHDLCStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutPkts.setStatus('current')
tmnxCiscoHDLCStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInOctets.setStatus('current')
tmnxCiscoHDLCStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutOctets.setStatus('current')
tmnxFRDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1), )
if mibBuilder.loadTexts: tmnxFRDlcmiTable.setStatus('current')
tmnxFRDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxFRDlcmiEntry.setStatus('current')
tmnxFRDlcmiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("bidir", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiMode.setStatus('current')
tmnxFRDlcmiN392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiN392Dce.setStatus('current')
tmnxFRDlcmiN393Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiN393Dce.setStatus('current')
tmnxFRDlcmiT392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiT392Dce.setStatus('current')
tmnxFRDlcmiTxStatusEnqMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusEnqMsgs.setStatus('current')
tmnxFRDlcmiRxStatusEnqMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusEnqMsgs.setStatus('current')
tmnxFRDlcmiStatusEnqMsgTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiStatusEnqMsgTimeouts.setStatus('current')
tmnxFRDlcmiTxStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusMsgs.setStatus('current')
tmnxFRDlcmiRxStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusMsgs.setStatus('current')
tmnxFRDlcmiStatusMsgTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiStatusMsgTimeouts.setStatus('current')
tmnxFRDlcmiDiscardedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiDiscardedMsgs.setStatus('current')
tmnxFRDlcmiInvRxSeqNumMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 12), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiInvRxSeqNumMsgs.setStatus('current')
tmnxQosPoolAppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2), )
if mibBuilder.loadTexts: tmnxQosPoolAppTable.setStatus('current')
tmnxQosPoolAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectType"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectId"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectAppType"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectAppPool"))
if mibBuilder.loadTexts: tmnxQosPoolAppEntry.setStatus('current')
tmnxObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mda", 1), ("port", 2), ("channel", 3), ("bundle", 4))))
if mibBuilder.loadTexts: tmnxObjectType.setStatus('current')
tmnxObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: tmnxObjectId.setStatus('current')
tmnxObjectAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessIngress", 1), ("accessEgress", 2), ("networkIngress", 3), ("networkEgress", 4))))
if mibBuilder.loadTexts: tmnxObjectAppType.setStatus('current')
tmnxObjectAppPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 4), TNamedItem())
if mibBuilder.loadTexts: tmnxObjectAppPool.setStatus('current')
tmnxObjectAppPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxObjectAppPoolRowStatus.setStatus('current')
tmnxObjectAppResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxObjectAppResvCbs.setStatus('current')
tmnxObjectAppSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 7), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxObjectAppSlopePolicy.setStatus('current')
tmnxObjectAppPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxObjectAppPoolSize.setStatus('current')
tmnxATMIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1), )
if mibBuilder.loadTexts: tmnxATMIntfTable.setStatus('current')
tmnxATMIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxATMIntfEntry.setStatus('current')
tmnxATMIntfCellFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2))).clone('uni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfCellFormat.setStatus('current')
tmnxATMIntfMinVpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfMinVpValue.setStatus('current')
tmnxATMIntfMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("plcp", 2))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfMapping.setStatus('current')
tmnxPortNetIngressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1), )
if mibBuilder.loadTexts: tmnxPortNetIngressStatsTable.setStatus('current')
tmnxPortNetIngressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressQueueIndex"))
if mibBuilder.loadTexts: tmnxPortNetIngressStatsEntry.setStatus('current')
tmnxPortNetIngressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxPortNetIngressQueueIndex.setStatus('current')
tmnxPortNetIngressFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfPkts.setStatus('current')
tmnxPortNetIngressFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfPkts.setStatus('current')
tmnxPortNetIngressFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfOcts.setStatus('current')
tmnxPortNetIngressFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfOcts.setStatus('current')
tmnxPortNetIngressDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfPkts.setStatus('current')
tmnxPortNetIngressDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfPkts.setStatus('current')
tmnxPortNetIngressDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfOcts.setStatus('current')
tmnxPortNetIngressDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfOcts.setStatus('current')
tmnxPortNetEgressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2), )
if mibBuilder.loadTexts: tmnxPortNetEgressStatsTable.setStatus('current')
tmnxPortNetEgressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressQueueIndex"))
if mibBuilder.loadTexts: tmnxPortNetEgressStatsEntry.setStatus('current')
tmnxPortNetEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxPortNetEgressQueueIndex.setStatus('current')
tmnxPortNetEgressFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfPkts.setStatus('current')
tmnxPortNetEgressFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfPkts.setStatus('current')
tmnxPortNetEgressFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfOcts.setStatus('current')
tmnxPortNetEgressFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfOcts.setStatus('current')
tmnxPortNetEgressDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfPkts.setStatus('current')
tmnxPortNetEgressDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfPkts.setStatus('current')
tmnxPortNetEgressDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfOcts.setStatus('current')
tmnxPortNetEgressDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfOcts.setStatus('current')
tmnxMcMlpppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4), )
if mibBuilder.loadTexts: tmnxMcMlpppStatsTable.setStatus('current')
tmnxMcMlpppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppClassIndex"))
if mibBuilder.loadTexts: tmnxMcMlpppStatsEntry.setStatus('current')
tmnxMcMlpppClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 1), TmnxMcMlpppClassIndex())
if mibBuilder.loadTexts: tmnxMcMlpppClassIndex.setStatus('current')
tmnxMcMlpppStatsIngressOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressOct.setStatus('current')
tmnxMcMlpppStatsIngressPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressPkt.setStatus('current')
tmnxMcMlpppStatsIngressErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressErrPkt.setStatus('current')
tmnxMcMlpppStatsEgressOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressOct.setStatus('current')
tmnxMcMlpppStatsEgressPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressPkt.setStatus('current')
tmnxMcMlpppStatsEgressErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressErrPkt.setStatus('current')
tmnxBundleImaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21), )
if mibBuilder.loadTexts: tmnxBundleImaGrpTable.setStatus('current')
tmnxBundleImaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleImaGrpEntry.setStatus('current')
tmnxBundleImaGrpLnkActTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkActTimer.setStatus('current')
tmnxBundleImaGrpLnkDeactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkDeactTimer.setStatus('current')
tmnxBundleImaGrpSymmetryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("symmetric", 1))).clone('symmetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpSymmetryMode.setStatus('current')
tmnxBundleImaGrpTxId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxId.setStatus('current')
tmnxBundleImaGrpRxId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxId.setStatus('current')
tmnxBundleImaGrpTxRefLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 6), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxRefLnk.setStatus('current')
tmnxBundleImaGrpRxRefLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 7), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxRefLnk.setStatus('current')
tmnxBundleImaGrpSmNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 8), TmnxImaGrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmNeState.setStatus('current')
tmnxBundleImaGrpSmFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 9), TmnxImaGrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFeState.setStatus('current')
tmnxBundleImaGrpSmFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 10), TmnxImaGrpFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFailState.setStatus('current')
tmnxBundleImaGrpSmDownSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmDownSecs.setStatus('current')
tmnxBundleImaGrpSmOperSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmOperSecs.setStatus('current')
tmnxBundleImaGrpAvailTxCR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailTxCR.setStatus('current')
tmnxBundleImaGrpAvailRxCR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailRxCR.setStatus('current')
tmnxBundleImaGrpNeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpNeFails.setStatus('current')
tmnxBundleImaGrpFeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpFeFails.setStatus('current')
tmnxBundleImaGrpTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxIcpCells.setStatus('current')
tmnxBundleImaGrpRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxIcpCells.setStatus('current')
tmnxBundleImaGrpErrorIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpErrorIcpCells.setStatus('current')
tmnxBundleImaGrpLostRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpLostRxIcpCells.setStatus('current')
tmnxBundleImaGrpTxOamLablVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxOamLablVal.setStatus('current')
tmnxBundleImaGrpRxOamLablVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxOamLablVal.setStatus('current')
tmnxBundleImaGrpAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 23), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpAlphaValue.setStatus('current')
tmnxBundleImaGrpBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 24), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpBetaValue.setStatus('current')
tmnxBundleImaGrpGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 25), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpGammaValue.setStatus('current')
tmnxBundleImaGrpNeClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 26), TmnxImaGrpClockModes().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpNeClockMode.setStatus('current')
tmnxBundleImaGrpFeClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 27), TmnxImaGrpClockModes().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpFeClockMode.setStatus('current')
tmnxBundleImaGrpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 28), TmnxImaGrpVersion().clone('oneDotOne')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpVersion.setStatus('current')
tmnxBundleImaGrpMaxConfBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpMaxConfBw.setStatus('current')
tmnxBundleImaGrpTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 30), TmnxImaTestState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestState.setStatus('current')
tmnxBundleImaGrpTestMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 31), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestMember.setStatus('current')
tmnxBundleImaGrpTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestPattern.setStatus('current')
tmnxBundleImaGrpDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 33), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpDiffDelayMaxObs.setStatus('current')
tmnxBundleImaGrpLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 34), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpLeastDelayLink.setStatus('current')
tmnxBundleMemberImaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22), )
if mibBuilder.loadTexts: tmnxBundleMemberImaTable.setStatus('current')
tmnxBundleMemberImaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberImaEntry.setStatus('current')
tmnxBundleMemberImaNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 1), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxState.setStatus('current')
tmnxBundleMemberImaNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 2), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxState.setStatus('current')
tmnxBundleMemberImaFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 3), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxState.setStatus('current')
tmnxBundleMemberImaFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 4), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxState.setStatus('current')
tmnxBundleMemberImaNeRxFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 5), TmnxImaLnkFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxFailState.setStatus('current')
tmnxBundleMemberImaFeRxFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 6), TmnxImaLnkFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxFailState.setStatus('current')
tmnxBundleMemberImaTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaTxLid.setStatus('current')
tmnxBundleMemberImaRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxLid.setStatus('current')
tmnxBundleMemberImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaViolations.setStatus('current')
tmnxBundleMemberImaNeSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeSevErrSecs.setStatus('current')
tmnxBundleMemberImaFeSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeSevErrSecs.setStatus('current')
tmnxBundleMemberImaNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeUnavailSecs.setStatus('current')
tmnxBundleMemberImaFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeUnavailSecs.setStatus('current')
tmnxBundleMemberImaNeTxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxUnuseSecs.setStatus('current')
tmnxBundleMemberImaNeRxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxUnuseSecs.setStatus('current')
tmnxBundleMemberImaFeTxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxUnuseSecs.setStatus('current')
tmnxBundleMemberImaFeRxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxUnuseSecs.setStatus('current')
tmnxBundleMemberImaNeTxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxNumFails.setStatus('current')
tmnxBundleMemberImaNeRxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxNumFails.setStatus('current')
tmnxBundleMemberImaFeTxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxNumFails.setStatus('current')
tmnxBundleMemberImaFeRxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxNumFails.setStatus('current')
tmnxBundleMemberImaTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaTxIcpCells.setStatus('current')
tmnxBundleMemberImaRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxIcpCells.setStatus('current')
tmnxBundleMemberImaErrorIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaErrorIcpCells.setStatus('current')
tmnxBundleMemberImaLstRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaLstRxIcpCells.setStatus('current')
tmnxBundleMemberImaOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaOifAnomalies.setStatus('current')
tmnxBundleMemberImaRxTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 27), TmnxImaTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestState.setStatus('current')
tmnxBundleMemberImaRxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestPattern.setStatus('current')
tmnxBundleMemberImaRelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 29), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRelDelay.setStatus('current')
tmnxPortScalarObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19))
tmnxL4LoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxL4LoadBalancing.setStatus('current')
tmnxDS1PortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23), )
if mibBuilder.loadTexts: tmnxDS1PortTable.setStatus('current')
tmnxDS1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS1PortEntry.setStatus('current')
tmnxDS1PortBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortBuildout.setStatus('current')
tmnxDS1PortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1PortLastChangeTime.setStatus('current')
tmnxDS1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("e1", 2), ("j1", 3))).clone('ds1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortType.setStatus('current')
tmnxDS1PortLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lengthNotApplicable", 1), ("length0To133", 2), ("length134To266", 3), ("length267To399", 4), ("length400To533", 5), ("length534To655", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortLineLength.setStatus('current')
tmnxDS1PortLbo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lboNotApplicable", 1), ("lbo0dB", 2), ("lboNeg7p5dB", 3), ("lboNeg15p0dB", 4), ("lboNeg22p5dB", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortLbo.setStatus('current')
tmnxDS1PortDbGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 6), Integer32()).setUnits('db').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1PortDbGain.setStatus('current')
tmnxPortSchedOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24), )
if mibBuilder.loadTexts: tmnxPortSchedOverrideTable.setStatus('current')
tmnxPortSchedOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortSchedOverrideEntry.setStatus('current')
tmnxPortSchedOverrideRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideRowStatus.setStatus('current')
tmnxPortSchedOverrideSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSchedOverrideSchedName.setStatus('current')
tmnxPortSchedOverrideLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLastChanged.setStatus('current')
tmnxPortSchedOverrideMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 4), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideMaxRate.setStatus('current')
tmnxPortSchedOverrideLvl1PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 5), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1PIR.setStatus('current')
tmnxPortSchedOverrideLvl1CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 6), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1CIR.setStatus('current')
tmnxPortSchedOverrideLvl2PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 7), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2PIR.setStatus('current')
tmnxPortSchedOverrideLvl2CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 8), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2CIR.setStatus('current')
tmnxPortSchedOverrideLvl3PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 9), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3PIR.setStatus('current')
tmnxPortSchedOverrideLvl3CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 10), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3CIR.setStatus('current')
tmnxPortSchedOverrideLvl4PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 11), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4PIR.setStatus('current')
tmnxPortSchedOverrideLvl4CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 12), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4CIR.setStatus('current')
tmnxPortSchedOverrideLvl5PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 13), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5PIR.setStatus('current')
tmnxPortSchedOverrideLvl5CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 14), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5CIR.setStatus('current')
tmnxPortSchedOverrideLvl6PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 15), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6PIR.setStatus('current')
tmnxPortSchedOverrideLvl6CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 16), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6CIR.setStatus('current')
tmnxPortSchedOverrideLvl7PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 17), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7PIR.setStatus('current')
tmnxPortSchedOverrideLvl7CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 18), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7CIR.setStatus('current')
tmnxPortSchedOverrideLvl8PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 19), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8PIR.setStatus('current')
tmnxPortSchedOverrideLvl8CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 20), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8CIR.setStatus('current')
tmnxPortSchedOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 21), Bits().clone(namedValues=NamedValues(("maxRate", 0), ("lvl1PIR", 1), ("lvl1CIR", 2), ("lvl2PIR", 3), ("lvl2CIR", 4), ("lvl3PIR", 5), ("lvl3CIR", 6), ("lvl4PIR", 7), ("lvl4CIR", 8), ("lvl5PIR", 9), ("lvl5CIR", 10), ("lvl6PIR", 11), ("lvl6CIR", 12), ("lvl7PIR", 13), ("lvl7CIR", 14), ("lvl8PIR", 15), ("lvl8CIR", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideFlags.setStatus('current')
tmnxBPGrpAssocTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25), )
if mibBuilder.loadTexts: tmnxBPGrpAssocTable.setStatus('current')
tmnxBPGrpAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBPGrpAssocEntry.setStatus('current')
tmnxBPGrpAssocWorkingBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 1), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocWorkingBundleID.setStatus('current')
tmnxBPGrpAssocProtectBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 2), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocProtectBundleID.setStatus('current')
tmnxBPGrpAssocActiveBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 3), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocActiveBundleID.setStatus('current')
tmnxBundleMlpppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26), )
if mibBuilder.loadTexts: tmnxBundleMlpppTable.setStatus('current')
tmnxBundleMlpppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleMlpppEntry.setStatus('current')
tmnxBundleMlpppEndpointID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointID.setStatus('current')
tmnxBundleMlpppEndpointIDClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 2), TmnxMlpppEndpointIdClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointIDClass.setStatus('current')
tmnxBundleMlpppClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppClassCount.setStatus('current')
tmnxBundleMlpppIngQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 4), TMlpppQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppIngQoSProfId.setStatus('current')
tmnxBundleMlpppEgrQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 5), TMlpppQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEgrQoSProfId.setStatus('current')
tmnxDigitalDiagMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31), )
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorTable.setStatus('current')
tmnxDigitalDiagMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorEntry.setStatus('current')
tmnxDDMTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTemperature.setStatus('current')
tmnxDDMTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempLowWarning.setStatus('current')
tmnxDDMTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempLowAlarm.setStatus('current')
tmnxDDMTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempHiWarning.setStatus('current')
tmnxDDMTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempHiAlarm.setStatus('current')
tmnxDDMSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltage.setStatus('current')
tmnxDDMSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowWarning.setStatus('current')
tmnxDDMSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowAlarm.setStatus('current')
tmnxDDMSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiWarning.setStatus('current')
tmnxDDMSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiAlarm.setStatus('current')
tmnxDDMTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrent.setStatus('current')
tmnxDDMTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowWarning.setStatus('current')
tmnxDDMTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowAlarm.setStatus('current')
tmnxDDMTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiWarning.setStatus('current')
tmnxDDMTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiAlarm.setStatus('current')
tmnxDDMTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPower.setStatus('current')
tmnxDDMTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowWarning.setStatus('current')
tmnxDDMTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowAlarm.setStatus('current')
tmnxDDMTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiWarning.setStatus('current')
tmnxDDMTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiAlarm.setStatus('current')
tmnxDDMRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPower.setStatus('current')
tmnxDDMRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowWarning.setStatus('current')
tmnxDDMRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowAlarm.setStatus('current')
tmnxDDMRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiWarning.setStatus('current')
tmnxDDMRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiAlarm.setStatus('current')
tmnxDDMRxOpticalPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oma", 0), ("average", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerType.setStatus('current')
tmnxDDMAux1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1.setStatus('current')
tmnxDDMAux1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1LowWarning.setStatus('current')
tmnxDDMAux1LowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1LowAlarm.setStatus('current')
tmnxDDMAux1HiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1HiWarning.setStatus('current')
tmnxDDMAux1HiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1HiAlarm.setStatus('current')
tmnxDDMAux1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("adp-bias-voltage", 1), ("reserved-2", 2), ("tec-current", 3), ("laser-temp", 4), ("laser-wavelength", 5), ("voltage-50", 6), ("voltage-33", 7), ("voltage-18", 8), ("voltage-52", 9), ("current-50", 10), ("reserved-11", 11), ("reserved-12", 12), ("current-33", 13), ("current-18", 14), ("current-52", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1Type.setStatus('current')
tmnxDDMAux2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2.setStatus('current')
tmnxDDMAux2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2LowWarning.setStatus('current')
tmnxDDMAux2LowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2LowAlarm.setStatus('current')
tmnxDDMAux2HiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2HiWarning.setStatus('current')
tmnxDDMAux2HiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2HiAlarm.setStatus('current')
tmnxDDMAux2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("adp-bias-voltage", 1), ("reserved-2", 2), ("tec-current", 3), ("laser-temp", 4), ("laser-wavelength", 5), ("voltage-50", 6), ("voltage-33", 7), ("voltage-18", 8), ("voltage-52", 9), ("current-50", 10), ("reserved-11", 11), ("reserved-12", 12), ("current-33", 13), ("current-18", 14), ("current-52", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2Type.setStatus('current')
tmnxDDMFailedThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 39), Bits().clone(namedValues=NamedValues(("unknown", 0), ("temperature-low-warning", 1), ("temperature-low-alarm", 2), ("temperature-high-warning", 3), ("temperature-high-alarm", 4), ("supplyVoltage-low-warning", 5), ("supplyVoltage-low-alarm", 6), ("supplyVoltage-high-warning", 7), ("supplyVoltage-high-alarm", 8), ("txBiasCurrent-low-warning", 9), ("txBiasCurrent-low-alarm", 10), ("txBiasCurrent-high-warning", 11), ("txBiasCurrent-high-alarm", 12), ("txOutputPower-low-warning", 13), ("txOutputPower-low-alarm", 14), ("txOutputPower-high-warning", 15), ("txOutputPower-high-alarm", 16), ("rxOpticalPower-low-warning", 17), ("rxOpticalPower-low-alarm", 18), ("rxOpticalPower-high-warning", 19), ("rxOpticalPower-high-alarm", 20), ("aux1-low-warning", 21), ("aux1-low-alarm", 22), ("aux1-high-warning", 23), ("aux1-high-alarm", 24), ("aux2-low-warning", 25), ("aux2-low-alarm", 26), ("aux2-high-warning", 27), ("aux2-high-alarm", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMFailedThresholds.setStatus('current')
tmnxDDMExternallyCalibrated = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExternallyCalibrated.setStatus('current')
tmnxDDMExtCalRxPower4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower4.setStatus('current')
tmnxDDMExtCalRxPower3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower3.setStatus('current')
tmnxDDMExtCalRxPower2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower2.setStatus('current')
tmnxDDMExtCalRxPower1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower1.setStatus('current')
tmnxDDMExtCalRxPower0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower0.setStatus('current')
tmnxDDMExtCalTxLaserBiasSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasSlope.setStatus('current')
tmnxDDMExtCalTxLaserBiasOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasOffset.setStatus('current')
tmnxDDMExtCalTxPowerSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerSlope.setStatus('current')
tmnxDDMExtCalTxPowerOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerOffset.setStatus('current')
tmnxDDMExtCalTemperatureSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureSlope.setStatus('current')
tmnxDDMExtCalTemperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureOffset.setStatus('current')
tmnxDDMExtCalVoltageSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageSlope.setStatus('current')
tmnxDDMExtCalVoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageOffset.setStatus('current')
tmnxPortNotifyPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 1), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyPortId.setStatus('current')
tmnxPortNotifySonetAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifySonetAlarmReason.setStatus('current')
tmnxPortNotifySonetPathAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifySonetPathAlarmReason.setStatus('current')
tmnxPortNotifyError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("txClockError", 1), ("rxClockError", 2), ("txFifoError", 3), ("laserError", 4), ("miscError", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyError.setStatus('current')
tmnxPortNotifyDS3AlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDS3AlarmReason.setStatus('current')
tmnxPortNotifyDS1AlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5), ("berSd", 6), ("berSf", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDS1AlarmReason.setStatus('current')
tmnxPortNotifyBundleId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 7), TmnxBundleID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyBundleId.setStatus('current')
tmnxPortNotifyEtherAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 8), TmnxPortEtherReportValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherAlarmReason.setStatus('current')
tmnxDDMFailedObject = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("unknown", 0), ("temperature-low-warning", 1), ("temperature-low-alarm", 2), ("temperature-high-warning", 3), ("temperature-high-alarm", 4), ("supplyVoltage-low-warning", 5), ("supplyVoltage-low-alarm", 6), ("supplyVoltage-high-warning", 7), ("supplyVoltage-high-alarm", 8), ("txBiasCurrent-low-warning", 9), ("txBiasCurrent-low-alarm", 10), ("txBiasCurrent-high-warning", 11), ("txBiasCurrent-high-alarm", 12), ("txOutputPower-low-warning", 13), ("txOutputPower-low-alarm", 14), ("txOutputPower-high-warning", 15), ("txOutputPower-high-alarm", 16), ("rxOpticalPower-low-warning", 17), ("rxOpticalPower-low-alarm", 18), ("rxOpticalPower-high-warning", 19), ("rxOpticalPower-high-alarm", 20), ("aux1-low-warning", 21), ("aux1-low-alarm", 22), ("aux1-high-warning", 23), ("aux1-high-alarm", 24), ("aux2-low-warning", 25), ("aux2-low-alarm", 26), ("aux2-high-warning", 27), ("aux2-high-alarm", 28)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDDMFailedObject.setStatus('current')
tmnxEqOobPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqOobPortFailure.setStatus('obsolete')
tmnxEqPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortFailure.setStatus('obsolete')
tmnxEqPortSonetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetAlarm.setStatus('current')
tmnxEqPortSonetAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetAlarmClear.setStatus('current')
tmnxEqPortSonetPathAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarm.setStatus('current')
tmnxEqPortSonetPathAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarmClear.setStatus('current')
tmnxEqPortSFPInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPInserted.setStatus('current')
tmnxEqPortSFPRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPRemoved.setStatus('current')
tmnxEqPortWrongSFP = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortWrongSFP.setStatus('obsolete')
tmnxEqPortSFPCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPCorrupted.setStatus('obsolete')
tmnxPortNotifyBerSdTca = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetBerSdThreshold"))
if mibBuilder.loadTexts: tmnxPortNotifyBerSdTca.setStatus('obsolete')
tmnxPortNotifyBerSfTca = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"))
if mibBuilder.loadTexts: tmnxPortNotifyBerSfTca.setStatus('obsolete')
tmnxEqPortError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyError"))
if mibBuilder.loadTexts: tmnxEqPortError.setStatus('current')
tmnxEqPortDS3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS3Alarm.setStatus('current')
tmnxEqPortDS3AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS3AlarmClear.setStatus('current')
tmnxEqPortDS1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS1Alarm.setStatus('current')
tmnxEqPortDS1AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS1AlarmClear.setStatus('current')
tmnxEqPortBndlYellowDiffExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"))
if mibBuilder.loadTexts: tmnxEqPortBndlYellowDiffExceeded.setStatus('current')
tmnxEqPortBndlRedDiffExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"))
if mibBuilder.loadTexts: tmnxEqPortBndlRedDiffExceeded.setStatus('current')
tmnxEqPortBndlBadEndPtDiscr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"))
if mibBuilder.loadTexts: tmnxEqPortBndlBadEndPtDiscr.setStatus('current')
tmnxEqPortEtherAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortEtherAlarm.setStatus('current')
tmnxEqPortEtherAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortEtherAlarmClear.setStatus('current')
tmnxDS1E1LoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Loopback"))
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStarted.setStatus('current')
tmnxDS1E1LoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Loopback"))
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStopped.setStatus('current')
tmnxDS3E3LoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"))
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStarted.setStatus('current')
tmnxDS3E3LoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 27)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"))
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStopped.setStatus('current')
tmnxSonetSDHLoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 28)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetLoopback"))
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStarted.setStatus('current')
tmnxSonetSDHLoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 29)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetLoopback"))
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStopped.setStatus('current')
tmnxEqPortEtherLoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 30)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherLoopDetected.setStatus('current')
tmnxEqPortEtherLoopCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 31)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherLoopCleared.setStatus('current')
tmnxEqPortSpeedCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 32)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"))
if mibBuilder.loadTexts: tmnxEqPortSpeedCfgNotCompatible.setStatus('current')
tmnxEqPortDuplexCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 33)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"))
if mibBuilder.loadTexts: tmnxEqPortDuplexCfgNotCompatible.setStatus('current')
tmnxEqPortIngressRateCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 34)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortIngressRateCfgNotCompatible.setStatus('current')
tmnxEqDigitalDiagMonitorFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 35)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMFailedObject"))
if mibBuilder.loadTexts: tmnxEqDigitalDiagMonitorFailure.setStatus('current')
tmnxEqPortSFPStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 36)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPStatus"))
if mibBuilder.loadTexts: tmnxEqPortSFPStatusFailure.setStatus('current')
tmnxQosServiceDegraded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxQosServiceDegraded.setStatus('obsolete')
tmnxPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1))
tmnxPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2))
tmnxPortComp7750 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3))
tmnxPortComp7450 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4))
tmnxPortComp7710 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5))
tmnxPortComp7750V4v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 2)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTDMGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV3v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlBundleGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V4v0 = tmnxPortComp7750V4v0.setStatus('obsolete')
tmnxPortComp7750V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 3)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTDMGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlBundleGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V5v0 = tmnxPortComp7750V5v0.setStatus('obsolete')
tmnxPortComp7750V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 4)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V6v0 = tmnxPortComp7750V6v0.setStatus('current')
tmnxPortComp7450V4v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 2)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV3v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V4v0 = tmnxPortComp7450V4v0.setStatus('obsolete')
tmnxPortComp7450V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 3)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V5v0 = tmnxPortComp7450V5v0.setStatus('obsolete')
tmnxPortComp7450V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 4)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V6v0 = tmnxPortComp7450V6v0.setStatus('current')
tmnxPortComp7710V3v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 1)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTDMV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupR2r1"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortATMV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlBundleV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV3v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V3v0 = tmnxPortComp7710V3v0.setStatus('obsolete')
tmnxPortComp7710V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 2)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTDMGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlBundleGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V5v0 = tmnxPortComp7710V5v0.setStatus('obsolete')
tmnxPortComp7710V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 3)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V6v0 = tmnxPortComp7710V6v0.setStatus('current')
tmnxPortFRGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 5)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiN392Dce"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiN393Dce"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiT392Dce"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiTxStatusEnqMsgs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiRxStatusEnqMsgs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiStatusEnqMsgTimeouts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiTxStatusMsgs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiRxStatusMsgs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiStatusMsgTimeouts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiDiscardedMsgs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxFRDlcmiInvRxSeqNumMsgs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortFRGroup = tmnxPortFRGroup.setStatus('current')
tmnxQosAppObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 6)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectAppPoolRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectAppResvCbs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectAppSlopePolicy"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxObjectAppPoolSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAppObjsGroup = tmnxQosAppObjsGroup.setStatus('current')
tmnxPortTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 7)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestParameter"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestLastResult"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestStartTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestEndTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTestAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTestGroup = tmnxPortTestGroup.setStatus('current')
tmnxPortObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 11)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1IdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdOutProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroOutProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdOutProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroOutProfOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortObsoleteGroup = tmnxPortObsoleteGroup.setStatus('current')
tmnxPortIngrMdaQosStatR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 14)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos00StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos00StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos01StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos01StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos02StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos02StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos03StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos03StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos04StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos04StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos05StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos05StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos06StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos06StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos07StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos07StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos08StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos08StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos09StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos09StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos10StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos10StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos11StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos11StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos12StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos12StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos13StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos13StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos14StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos14StatDropOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos15StatDropPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos15StatDropOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortIngrMdaQosStatR2r1Group = tmnxPortIngrMdaQosStatR2r1Group.setStatus('current')
tmnxPortStatsR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 16)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdOutProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressDroInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressDroOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressDroInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetIngressDroOutProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdOutProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressDroInProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressDroOutProfPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressDroInProfOcts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetEgressDroOutProfOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortStatsR2r1Group = tmnxPortStatsR2r1Group.setStatus('current')
tmnxPortNotificationGroupR2r1 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 17)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortError"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupR2r1 = tmnxPortNotificationGroupR2r1.setStatus('obsolete')
tmnxPortNotifyObjsGroupR2r1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 18)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyError"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyBundleId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupR2r1 = tmnxPortNotifyObjsGroupR2r1.setStatus('current')
tmnxPortNotifyObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 20)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqOobPortFailure"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortFailure"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxQosServiceDegraded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyBerSdTca"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyBerSfTca"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortWrongSFP"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObsoleteGroup = tmnxPortNotifyObsoleteGroup.setStatus('current')
tmnxPortSonetV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 21)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetFraming"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetBerSdThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetLoopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetSectionTraceMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetJ0String"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetMonS1Byte"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetMonJ0String"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetMonK1Byte"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetMonK2Byte"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetSingleFiber"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetHoldTimeUp"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetHoldTimeDown"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathScramble"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathC2Byte"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathJ1String"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathOperMRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathCollectStats"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathMonC2Byte"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathMonJ1String"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetPathChildType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetGroupType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetGroupParentPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetGroupChildType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSonetV3v0Group = tmnxPortSonetV3v0Group.setStatus('current')
tmnxPortTDMV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 22)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMV3v0Group = tmnxPortTDMV3v0Group.setStatus('obsolete')
tmnxPortATMV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 23)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMV3v0Group = tmnxPortATMV3v0Group.setStatus('obsolete')
tmnxScalarPortV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 24)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxScalarPortV3v0Group = tmnxScalarPortV3v0Group.setStatus('current')
tmnxPortV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 25)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClass"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlias"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLagId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortChanType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortV3v0Group = tmnxPortV3v0Group.setStatus('obsolete')
tmnxCiscoHDLCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 26)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCKeepAliveInt"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCUpCount"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCDownCount"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCOperState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCDiscardStatInPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCDiscardStatOutPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatInPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatOutPkts"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatInOctets"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCiscoHDLCGroup = tmnxCiscoHDLCGroup.setStatus('current')
tmnxMlBundleV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 27)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortBundleNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleV3v0Group = tmnxMlBundleV3v0Group.setStatus('obsolete')
tmnxObsoleteGroupV3v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 28)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetAps"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsAdminStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsAuthKey"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsNeighborAddr"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsAdvertiseInterval"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsAdvertiseTimeLeft"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsHoldTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetApsHoldTimeLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoleteGroupV3v0 = tmnxObsoleteGroupV3v0.setStatus('current')
tmnxPortEthernetV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 29)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV3v0Group = tmnxPortEthernetV3v0Group.setStatus('obsolete')
tmnxPortTDMGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 30)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV4v0 = tmnxPortTDMGroupV4v0.setStatus('obsolete')
tmnxPortATMGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 31)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxATMIntfMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMGroupV4v0 = tmnxPortATMGroupV4v0.setStatus('current')
tmnxMlBundleGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 32)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortBundleNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV4v0 = tmnxMlBundleGroupV4v0.setStatus('obsolete')
tmnxMlImaBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 33)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpLnkActTimer"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpLnkDeactTimer"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpSymmetryMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxRefLnk"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxRefLnk"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmNeState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmFeState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmFailState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmDownSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmOperSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpAvailTxCR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpAvailRxCR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpNeFails"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpFeFails"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpErrorIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpLostRxIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxOamLablVal"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxOamLablVal"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpAlphaValue"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpBetaValue"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpGammaValue"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpNeClockMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpFeClockMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpVersion"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpMaxConfBw"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestMember"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpDiffDelayMaxObs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleImaGrpLeastDelayLink"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxFailState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxFailState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaTxLid"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxLid"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaViolations"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeSevErrSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeSevErrSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeUnavailSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeUnavailSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxUnuseSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxUnuseSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxUnuseSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxUnuseSecs"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxNumFails"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxNumFails"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxNumFails"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxNumFails"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaTxIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaErrorIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaLstRxIcpCells"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaOifAnomalies"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxTestState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxTestPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberImaRelDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlImaBundleGroup = tmnxMlImaBundleGroup.setStatus('current')
tmnx7710PortTDMGroupV3v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 34)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortBuildout"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortLineLength"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortLbo"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortDbGain"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InsertSingleBitError"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCollectStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710PortTDMGroupV3v0 = tmnx7710PortTDMGroupV3v0.setStatus('obsolete')
tmnxPortGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 35)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClass"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlias"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLagId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortChanType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV4v0 = tmnxPortGroupV4v0.setStatus('obsolete')
tmnxObsoleteGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 36)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoleteGroupV5v0 = tmnxObsoleteGroupV5v0.setStatus('current')
tmnxPortSchedV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 37)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEgrPortSchedPlcy"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideSchedName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLastChanged"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideMaxRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl1PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl1CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl2PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl2CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl3PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl3CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl4PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl4CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl5PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl5CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl6PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl6CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl7PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl7CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl8PIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl8CIR"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSchedOverrideFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSchedV5v0Group = tmnxPortSchedV5v0Group.setStatus('current')
tmnxPortEthernetV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 38)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV5v0Group = tmnxPortEthernetV5v0Group.setStatus('obsolete')
tmnxPortGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 39)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClass"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlias"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLagId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortChanType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV5v0 = tmnxPortGroupV5v0.setStatus('obsolete')
tmnxMlBundleGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 40)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortBundleNumber"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleProtectedType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleParentBundle"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBPGrpAssocWorkingBundleID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBPGrpAssocProtectBundleID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBPGrpAssocActiveBundleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV5v0 = tmnxMlBundleGroupV5v0.setStatus('obsolete')
tmnxPortNotificationGroupV5v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 41)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortError"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV5v0 = tmnxPortNotificationGroupV5v0.setStatus('obsolete')
tmnxPortTDMGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 42)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV5v0 = tmnxPortTDMGroupV5v0.setStatus('obsolete')
tmnx7710PortTDMGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 43)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortBuildout"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortLineLength"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortLbo"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1PortDbGain"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InsertSingleBitError"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCollectStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710PortTDMGroupV5v0 = tmnx7710PortTDMGroupV5v0.setStatus('current')
tmnxPortCemGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 44)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSyncState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelClockMasterPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1SignalMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ClockSyncState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ClockMasterPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupPayloadFillType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupPayloadPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSignalFillType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSignalPattern"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortCemGroupV6v0 = tmnxPortCemGroupV6v0.setStatus('current')
tmnxMcMlpppBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 45)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMlpppClassCount"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMlpppIngQoSProfId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMlpppEgrQoSProfId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressOct"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressPkt"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressErrPkt"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressOct"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressPkt"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressErrPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMcMlpppBundleGroup = tmnxMcMlpppBundleGroup.setStatus('current')
tmnxPortNotificationGroupV6v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 46)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortError"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopDetected"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopCleared"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorFailure"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPStatusFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV6v0 = tmnxPortNotificationGroupV6v0.setStatus('current')
tmnxPortEthernetV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 47)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedEnabled"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedKeepAlive"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedRetry"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherPBBEtype"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEtherReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV6v0Group = tmnxPortEthernetV6v0Group.setStatus('current')
tmnxMlBundleGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 48)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortBundleNumber"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleProtectedType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleParentBundle"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBPGrpAssocWorkingBundleID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBPGrpAssocProtectBundleID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBPGrpAssocActiveBundleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV6v0 = tmnxMlBundleGroupV6v0.setStatus('current')
tmnxMlpppBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 49)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMlpppEndpointID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMlpppEndpointIDClass"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxBundleLFI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlpppBundleGroup = tmnxMlpppBundleGroup.setStatus('current')
tmnxPortNotificationGroupV3v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 50)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortError"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV3v0 = tmnxPortNotificationGroupV3v0.setStatus('obsolete')
tmnxPortTDMGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 52)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BerSdThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS1BerSfThreshold"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV6v0 = tmnxPortTDMGroupV6v0.setStatus('current')
tmnxDigitalDiagMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 53)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTemperature"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTempLowWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTempLowAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTempHiWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTempHiAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltage"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageLowWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageLowAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageHiWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageHiAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrent"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentLowWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentLowAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentHiWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentHiAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxOutputPower"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerLowWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerLowAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerHiWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerHiAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPower"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerLowWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerLowAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerHiWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerHiAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux1"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux1LowWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux1LowAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux1HiWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux1HiAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux1Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux2"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux2LowWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux2LowAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux2HiWarning"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux2HiAlarm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMAux2Type"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMFailedThresholds"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExternallyCalibrated"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower4"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower3"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower2"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower1"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower0"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalTxLaserBiasSlope"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalTxLaserBiasOffset"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalTxPowerSlope"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalTxPowerOffset"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalTemperatureSlope"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalTemperatureOffset"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalVoltageSlope"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMExtCalVoltageOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDigitalDiagMonitorGroup = tmnxDigitalDiagMonitorGroup.setStatus('current')
tmnxPortGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 54)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClass"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlias"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortMode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLagId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortChanType"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortDDMEventSuppression"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortSFPStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV6v0 = tmnxPortGroupV6v0.setStatus('current')
tmnxNamedPoolGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 55)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngNamedPoolPlcy"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEgrNamedPoolPlcy"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortIngPoolPercentRate"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortEgrPoolPercentRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxNamedPoolGroupV6v0 = tmnxNamedPoolGroupV6v0.setStatus('current')
tmnxPortNotifyObjsGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 57)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxDDMFailedObject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV6v0 = tmnxPortNotifyObjsGroupV6v0.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-PORT-MIB", tmnxBundleImaGrpAlphaValue=tmnxBundleImaGrpAlphaValue, tmnxPortToChannelEntry=tmnxPortToChannelEntry, tmnxBundleImaGrpAvailTxCR=tmnxBundleImaGrpAvailTxCR, tmnxPortTableLastChange=tmnxPortTableLastChange, tmnxDDMTempHiAlarm=tmnxDDMTempHiAlarm, tmnxDDMTxOutputPowerLowAlarm=tmnxDDMTxOutputPowerLowAlarm, tmnxDDMTxOutputPowerHiAlarm=tmnxDDMTxOutputPowerHiAlarm, tmnxDDMAux1LowAlarm=tmnxDDMAux1LowAlarm, tmnxBundleMemberImaFeTxState=tmnxBundleMemberImaFeTxState, tmnxPortTestEndTime=tmnxPortTestEndTime, tmnxBundleMemberImaNeRxFailState=tmnxBundleMemberImaNeRxFailState, tmnxDDMExtCalRxPower3=tmnxDDMExtCalRxPower3, TmnxPortConnectorType=TmnxPortConnectorType, tmnxPortState=tmnxPortState, tmnxSonetJ0String=tmnxSonetJ0String, TmnxImaGrpState=TmnxImaGrpState, tmnxPortEtherTable=tmnxPortEtherTable, TmnxImaTestState=TmnxImaTestState, tmnxEqPortIngressRateCfgNotCompatible=tmnxEqPortIngressRateCfgNotCompatible, tmnxPortSchedOverrideLvl4CIR=tmnxPortSchedOverrideLvl4CIR, tmnxDDMExtCalTemperatureOffset=tmnxDDMExtCalTemperatureOffset, tmnxMlpppBundleGroup=tmnxMlpppBundleGroup, tmnxDS1BERTOperStatus=tmnxDS1BERTOperStatus, tmnxPortEtherAutoNegotiate=tmnxPortEtherAutoNegotiate, tmnxDDMAux1=tmnxDDMAux1, tmnxDS1BerSdThreshold=tmnxDS1BerSdThreshold, tmnxPortSchedV5v0Group=tmnxPortSchedV5v0Group, tmnxBundleMlpppEndpointID=tmnxBundleMlpppEndpointID, tmnxDDMAux2LowWarning=tmnxDDMAux2LowWarning, tmnxSonetPathChildType=tmnxSonetPathChildType, tmnxBundleMlpppTable=tmnxBundleMlpppTable, tmnxPortEthernetV3v0Group=tmnxPortEthernetV3v0Group, tmnxPortNetEgressFwdInProfOcts=tmnxPortNetEgressFwdInProfOcts, tmnxDS1IdleCycleFlags=tmnxDS1IdleCycleFlags, tmnxPortEtherIngressRate=tmnxPortEtherIngressRate, tmnxPortComp7450V4v0=tmnxPortComp7450V4v0, tmnxPortNotifyObjsGroupV6v0=tmnxPortNotifyObjsGroupV6v0, tmnxBundleMemberImaNeRxState=tmnxBundleMemberImaNeRxState, tmnxPortEtherLacpTunnel=tmnxPortEtherLacpTunnel, tmnxPortTypeName=tmnxPortTypeName, tmnxPortEthernetV5v0Group=tmnxPortEthernetV5v0Group, tmnxPortConformance=tmnxPortConformance, tmnxSonetSectionTraceMode=tmnxSonetSectionTraceMode, tmnxPortType=tmnxPortType, tmnxDS3ChannelMDLFicString=tmnxDS3ChannelMDLFicString, tmnxPortEtherXGigMode=tmnxPortEtherXGigMode, tmnxDS3LastChangeTime=tmnxDS3LastChangeTime, tmnxSonetApsOperStatus=tmnxSonetApsOperStatus, tmnxBundleProtectedType=tmnxBundleProtectedType, tmnxDS1SignalMode=tmnxDS1SignalMode, tmnxDS3ChannelClockMasterPortId=tmnxDS3ChannelClockMasterPortId, tmnxBundleMemberImaTxIcpCells=tmnxBundleMemberImaTxIcpCells, tmnxEqPortBndlRedDiffExceeded=tmnxEqPortBndlRedDiffExceeded, tmnxDS0ChanGroupLastChangeTime=tmnxDS0ChanGroupLastChangeTime, TmnxPortClass=TmnxPortClass, tmnxBundlePeerMRRU=tmnxBundlePeerMRRU, tmnxPortIngrMdaQos14StatDropPkts=tmnxPortIngrMdaQos14StatDropPkts, tmnxPortFCStatsEgrFwdOutProfPkts=tmnxPortFCStatsEgrFwdOutProfPkts, tmnxFRDlcmiMode=tmnxFRDlcmiMode, tmnxFRObjs=tmnxFRObjs, tmnxPortIngrMdaQos02StatDropOcts=tmnxPortIngrMdaQos02StatDropOcts, tmnxCiscoHDLCStatsTable=tmnxCiscoHDLCStatsTable, tmnxPortNumChannels=tmnxPortNumChannels, tmnxDS0ChanGroupTimeSlots=tmnxDS0ChanGroupTimeSlots, tmnxATMIntfTable=tmnxATMIntfTable, tmnxBundleImaGrpMaxConfBw=tmnxBundleImaGrpMaxConfBw, tmnxObjectAppPool=tmnxObjectAppPool, tmnxDS3ChannelBERTTotalBits=tmnxDS3ChannelBERTTotalBits, tmnxBundleImaGrpEntry=tmnxBundleImaGrpEntry, tmnxPortChanType=tmnxPortChanType, tmnxPortConnectTypeDescription=tmnxPortConnectTypeDescription, tmnxPortIngrMdaQos14StatDropOcts=tmnxPortIngrMdaQos14StatDropOcts, TmnxDSXIdleCycleFlags=TmnxDSXIdleCycleFlags, tmnxBundlePrimaryMemberPortID=tmnxBundlePrimaryMemberPortID, tmnxPortEtherCollectStats=tmnxPortEtherCollectStats, tmnxPortTransceiverCode=tmnxPortTransceiverCode, tmnxBundleImaGrpGammaValue=tmnxBundleImaGrpGammaValue, tmnxObjectId=tmnxObjectId, tmnxCiscoHDLCTable=tmnxCiscoHDLCTable, tmnxPortEtherSpeed=tmnxPortEtherSpeed, tmnxPortNetEgressQueueIndex=tmnxPortNetEgressQueueIndex, tmnxBundleBundleID=tmnxBundleBundleID, tmnxSonetSDHLoopbackStopped=tmnxSonetSDHLoopbackStopped, tmnxDigitalDiagMonitorTable=tmnxDigitalDiagMonitorTable, tmnxBundleImaGrpRxIcpCells=tmnxBundleImaGrpRxIcpCells, tmnxPortIngrMdaQos10StatDropPkts=tmnxPortIngrMdaQos10StatDropPkts, tmnxSonetPathMonJ1String=tmnxSonetPathMonJ1String, tmnxPortFCStatsEgrFwdOutProfOcts=tmnxPortFCStatsEgrFwdOutProfOcts, tmnxSonetGroupEntry=tmnxSonetGroupEntry, TmnxDSXClockSyncState=TmnxDSXClockSyncState, tmnxBundleMemberImaFeTxUnuseSecs=tmnxBundleMemberImaFeTxUnuseSecs, tmnxBundleImaGrpTxIcpCells=tmnxBundleImaGrpTxIcpCells, tmnxDS1ReportAlarm=tmnxDS1ReportAlarm, tmnxPortFCStatsIngDroOutProfPkts=tmnxPortFCStatsIngDroOutProfPkts, tmnxDS1ClockSource=tmnxDS1ClockSource, tmnxDigitalDiagMonitorEntry=tmnxDigitalDiagMonitorEntry, tmnxEqPortError=tmnxEqPortError, tmnxDS0ChanGroupTable=tmnxDS0ChanGroupTable, TmnxDS3Loopback=TmnxDS3Loopback, tmnxDS3ChannelMDLGenString=tmnxDS3ChannelMDLGenString, tmnxObjectAppPoolRowStatus=tmnxObjectAppPoolRowStatus, tmnxBundleImaGrpLnkDeactTimer=tmnxBundleImaGrpLnkDeactTimer, tmnxBundleImaGrpNeClockMode=tmnxBundleImaGrpNeClockMode, tmnxEqPortDS3Alarm=tmnxEqPortDS3Alarm, tmnxPortTable=tmnxPortTable, tmnxDS1RowStatus=tmnxDS1RowStatus, tmnxPortLinkStatus=tmnxPortLinkStatus, tmnxPortTDMGroupV5v0=tmnxPortTDMGroupV5v0, tmnxPortNetworkEgrQueues=tmnxPortNetworkEgrQueues, tmnxObjectAppResvCbs=tmnxObjectAppResvCbs, tmnxBundleMemberImaNeRxNumFails=tmnxBundleMemberImaNeRxNumFails, tmnxDS3ChannelBitErrorInsertionRate=tmnxDS3ChannelBitErrorInsertionRate, tmnxDS3ChannelFEACLoopRespond=tmnxDS3ChannelFEACLoopRespond, tmnxPortComp7450=tmnxPortComp7450, tmnxPortNotificationGroupV6v0=tmnxPortNotificationGroupV6v0, tmnxPortGroupV6v0=tmnxPortGroupV6v0, tmnxCiscoHDLCEntry=tmnxCiscoHDLCEntry, tmnxPortTestState=tmnxPortTestState, tmnxPortNotifyPortId=tmnxPortNotifyPortId, tmnxPortLastStateChanged=tmnxPortLastStateChanged, tmnxDDMAux2=tmnxDDMAux2, tmnxNamedPoolGroupV6v0=tmnxNamedPoolGroupV6v0, tmnxPortTypeStatus=tmnxPortTypeStatus, tmnxPortNetIngressStatsEntry=tmnxPortNetIngressStatsEntry, tmnxDS1ClockMasterPortId=tmnxDS1ClockMasterPortId, tmnxDS1BERTDuration=tmnxDS1BERTDuration, tmnxDS3ChannelMDLLicString=tmnxDS3ChannelMDLLicString, tmnxPortGroupV5v0=tmnxPortGroupV5v0, tmnxATMIntfEntry=tmnxATMIntfEntry, tmnxMlBundleGroupV6v0=tmnxMlBundleGroupV6v0, tmnxDS3ChannelBERTDuration=tmnxDS3ChannelBERTDuration, tmnxPortPortID=tmnxPortPortID, tmnxEqDigitalDiagMonitorFailure=tmnxEqDigitalDiagMonitorFailure, tmnxDDMAux2HiWarning=tmnxDDMAux2HiWarning, tmnxDS3ChannelTable=tmnxDS3ChannelTable, tmnxPortIngrMdaQos08StatDropOcts=tmnxPortIngrMdaQos08StatDropOcts, tmnxEqPortWrongSFP=tmnxEqPortWrongSFP, tmnxDS1LastChangeTime=tmnxDS1LastChangeTime, tmnxPortNetEgressDroOutProfOcts=tmnxPortNetEgressDroOutProfOcts, TmnxDSXBertPattern=TmnxDSXBertPattern, tmnxSonetMonK1Byte=tmnxSonetMonK1Byte, tmnxPortTestParameter=tmnxPortTestParameter, tmnxBundleMemberImaFeSevErrSecs=tmnxBundleMemberImaFeSevErrSecs, tmnxPortFCStatsTable=tmnxPortFCStatsTable, tmnxSonetBerSfThreshold=tmnxSonetBerSfThreshold, tmnxBundleImaGrpNeFails=tmnxBundleImaGrpNeFails, PYSNMP_MODULE_ID=tmnxPortMIBModule, tmnxDS1BitErrorInsertionRate=tmnxDS1BitErrorInsertionRate, tmnxPortParentPortID=tmnxPortParentPortID, tmnxPortTypeDescription=tmnxPortTypeDescription, tmnxFRDlcmiN393Dce=tmnxFRDlcmiN393Dce, tmnxCiscoHDLCUpCount=tmnxCiscoHDLCUpCount, tmnxL4LoadBalancing=tmnxL4LoadBalancing, tmnxBundleMlpppEntry=tmnxBundleMlpppEntry, tmnxPortEgrPortSchedPlcy=tmnxPortEgrPortSchedPlcy, tmnxBPGrpAssocEntry=tmnxBPGrpAssocEntry, tmnxDS3ChannelReportAlarm=tmnxDS3ChannelReportAlarm, tmnxPortIngrMdaQos13StatDropPkts=tmnxPortIngrMdaQos13StatDropPkts, tmnxDS1BERTPattern=tmnxDS1BERTPattern, tmnxFRDlcmiTable=tmnxFRDlcmiTable, tmnxPortEtherPkts1519toMax=tmnxPortEtherPkts1519toMax, tmnxPortSchedOverrideMaxRate=tmnxPortSchedOverrideMaxRate, tmnxPortConnectTypeIndex=tmnxPortConnectTypeIndex, tmnxBundleLFI=tmnxBundleLFI, tmnxPortNotificationGroupV3v0=tmnxPortNotificationGroupV3v0, tmnxBundleRedDiffDelayAction=tmnxBundleRedDiffDelayAction, tmnxPortComp7750V6v0=tmnxPortComp7750V6v0, tmnxPortComp7710=tmnxPortComp7710, tmnxPortSFPMedia=tmnxPortSFPMedia, tmnxEqPortSFPInserted=tmnxEqPortSFPInserted, tmnxPortIngrMdaQos00StatDropPkts=tmnxPortIngrMdaQos00StatDropPkts, tmnxDDMExtCalTxPowerSlope=tmnxDDMExtCalTxPowerSlope, tmnxDS0ChanGroupCollectStats=tmnxDS0ChanGroupCollectStats, tmnxFRDlcmiStatusMsgTimeouts=tmnxFRDlcmiStatusMsgTimeouts, tmnxBundleMemberImaOifAnomalies=tmnxBundleMemberImaOifAnomalies, tmnxPortEquipped=tmnxPortEquipped, tmnxPortOpticalCompliance=tmnxPortOpticalCompliance, tmnxBundleTable=tmnxBundleTable, tmnxPortTestLastResult=tmnxPortTestLastResult, tmnxPortIngrMdaQos03StatDropOcts=tmnxPortIngrMdaQos03StatDropOcts, tmnxMcMlpppStatsIngressPkt=tmnxMcMlpppStatsIngressPkt, tmnxBundleImaGrpSymmetryMode=tmnxBundleImaGrpSymmetryMode, tmnxDS1PortLbo=tmnxDS1PortLbo, tmnxQosServiceDegraded=tmnxQosServiceDegraded, tmnxDS1Loopback=tmnxDS1Loopback, tmnxSonetPathTable=tmnxSonetPathTable, tmnxPortScalarObjs=tmnxPortScalarObjs, tmnxPortEtherDownWhenLoopedState=tmnxPortEtherDownWhenLoopedState, tmnxPortSFPVendorOUI=tmnxPortSFPVendorOUI, tmnxPortSonetV3v0Group=tmnxPortSonetV3v0Group, tmnxBundleInputDiscards=tmnxBundleInputDiscards, tmnxCiscoHDLCStatInPkts=tmnxCiscoHDLCStatInPkts, tmnxPortBundleNumber=tmnxPortBundleNumber, tmnxDS3ChannelClockSource=tmnxDS3ChannelClockSource, tmnxPortPrevState=tmnxPortPrevState, tmnxBundleMemberRowStatus=tmnxBundleMemberRowStatus, tmnxPortNotification=tmnxPortNotification, tmnxPortNetEgressDroInProfOcts=tmnxPortNetEgressDroInProfOcts, tmnxDS3E3LoopbackStarted=tmnxDS3E3LoopbackStarted, tmnxPortSFPConnectorCode=tmnxPortSFPConnectorCode, tmnxBundleMemberImaTxLid=tmnxBundleMemberImaTxLid, tmnxPortIngrMdaQos01StatDropOcts=tmnxPortIngrMdaQos01StatDropOcts, tmnxDDMExtCalTxPowerOffset=tmnxDDMExtCalTxPowerOffset, tmnxPortTestMode=tmnxPortTestMode, tmnxFRDlcmiTxStatusEnqMsgs=tmnxFRDlcmiTxStatusEnqMsgs, tmnxDS1PortType=tmnxDS1PortType, tmnxPortNetIngressDroOutProfPkts=tmnxPortNetIngressDroOutProfPkts, TmnxDS1Loopback=TmnxDS1Loopback, tmnxEqPortSonetAlarm=tmnxEqPortSonetAlarm, tmnxPortNotifyBerSdTca=tmnxPortNotifyBerSdTca, tmnxEqPortEtherLoopCleared=tmnxEqPortEtherLoopCleared, tmnxPortEtherHCOverPkts1519toMax=tmnxPortEtherHCOverPkts1519toMax, tmnxPortTypeIndex=tmnxPortTypeIndex, tmnxDS3ChannelSubrateCSUMode=tmnxDS3ChannelSubrateCSUMode, tmnxDS3ChannelLoopback=tmnxDS3ChannelLoopback, tmnxPortComp7750V4v0=tmnxPortComp7750V4v0, tmnxSonetPathAcctPolicyId=tmnxSonetPathAcctPolicyId, TmnxMcMlpppClassIndex=TmnxMcMlpppClassIndex, tmnxPortIngrMdaQos09StatDropOcts=tmnxPortIngrMdaQos09StatDropOcts, tmnxPortNetIngressFwdOutProfPkts=tmnxPortNetIngressFwdOutProfPkts, tmnxEqPortSonetPathAlarm=tmnxEqPortSonetPathAlarm, tmnxDS0ChanGroupPayloadFillType=tmnxDS0ChanGroupPayloadFillType, tmnxDS3ChannelCRC=tmnxDS3ChannelCRC, tmnxDS1BERTTotalBits=tmnxDS1BERTTotalBits, TmnxPortEtherReportStatus=TmnxPortEtherReportStatus, tmnxPortTestDuration=tmnxPortTestDuration, tmnxPortEtherHCPkts1519toMax=tmnxPortEtherHCPkts1519toMax, TmnxDSXBertOperStatus=TmnxDSXBertOperStatus, tmnxCiscoHDLCDiscardStatOutPkts=tmnxCiscoHDLCDiscardStatOutPkts, tmnxPortComp7710V6v0=tmnxPortComp7710V6v0, tmnxPortEncapType=tmnxPortEncapType, tmnxQosAppObjs=tmnxQosAppObjs, tmnxPortEtherMTU=tmnxPortEtherMTU, tmnxSonetGroupParentPortID=tmnxSonetGroupParentPortID, tmnxPortFCStatsIngFwdInProfOcts=tmnxPortFCStatsIngFwdInProfOcts, tmnxPortSchedOverrideLastChanged=tmnxPortSchedOverrideLastChanged, tmnxPortFCStatsIngFwdOutProfOcts=tmnxPortFCStatsIngFwdOutProfOcts, tmnxDS3Table=tmnxDS3Table, tmnxDDMRxOpticalPower=tmnxDDMRxOpticalPower, TmnxMlpppEndpointIdClass=TmnxMlpppEndpointIdClass, tmnxPortEtherDot1qEtype=tmnxPortEtherDot1qEtype, tmnxPortSchedOverrideLvl5CIR=tmnxPortSchedOverrideLvl5CIR, tmnxQosPoolAppEntry=tmnxQosPoolAppEntry, tmnxMcMlpppStatsEgressErrPkt=tmnxMcMlpppStatsEgressErrPkt, tmnxCiscoHDLCDownCount=tmnxCiscoHDLCDownCount, tmnxPortEtherEgressRate=tmnxPortEtherEgressRate, tmnxObjectAppPoolSize=tmnxObjectAppPoolSize, tmnxPortConnectTypeEntry=tmnxPortConnectTypeEntry, tmnxPortSchedOverrideLvl4PIR=tmnxPortSchedOverrideLvl4PIR, tmnxDS0ChanGroupOperMTU=tmnxDS0ChanGroupOperMTU, tmnxEqPortEtherAlarm=tmnxEqPortEtherAlarm, tmnxDS1Framing=tmnxDS1Framing, tmnxPortTDMGroupV4v0=tmnxPortTDMGroupV4v0, tmnxScalarPortV3v0Group=tmnxScalarPortV3v0Group)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-PORT-MIB", tmnxPortNotifyError=tmnxPortNotifyError, tmnxEqPortSFPRemoved=tmnxEqPortSFPRemoved, tmnxPortUpProtocols=tmnxPortUpProtocols, tmnxSonetApsNeighborAddr=tmnxSonetApsNeighborAddr, tmnxEqPortDS1Alarm=tmnxEqPortDS1Alarm, tmnxDDMTxBiasCurrentLowWarning=tmnxDDMTxBiasCurrentLowWarning, tmnxDS3ChannelMDLMonGenString=tmnxDS3ChannelMDLMonGenString, tmnxPortEtherQinqEtype=tmnxPortEtherQinqEtype, tmnxDS1InRemoteLoop=tmnxDS1InRemoteLoop, tmnxMcMlpppStatsIngressErrPkt=tmnxMcMlpppStatsIngressErrPkt, tmnxBundleImaGrpSmNeState=tmnxBundleImaGrpSmNeState, tmnxMcMlpppStatsEgressOct=tmnxMcMlpppStatsEgressOct, tmnxDS3ChannelFraming=tmnxDS3ChannelFraming, tmnxDS3ChannelScramble=tmnxDS3ChannelScramble, tmnxEqPortSFPCorrupted=tmnxEqPortSFPCorrupted, tmnxBundleMemberTable=tmnxBundleMemberTable, tmnxDS3ChannelMTU=tmnxDS3ChannelMTU, tmnxPortAlarmState=tmnxPortAlarmState, tmnxDS0ChanGroupSpeed=tmnxDS0ChanGroupSpeed, tmnxPortEtherPBBEtype=tmnxPortEtherPBBEtype, tmnxDDMTxOutputPower=tmnxDDMTxOutputPower, tmnxEqPortDS3AlarmClear=tmnxEqPortDS3AlarmClear, tmnxDS1PortLineLength=tmnxDS1PortLineLength, tmnxDDMSupplyVoltage=tmnxDDMSupplyVoltage, tmnxBundleLastChangeTime=tmnxBundleLastChangeTime, tmnxPortNotifyObsoleteGroup=tmnxPortNotifyObsoleteGroup, tmnxPortEtherOperSpeed=tmnxPortEtherOperSpeed, tmnxPortConnectTypeName=tmnxPortConnectTypeName, tmnxDS1InsertSingleBitError=tmnxDS1InsertSingleBitError, tmnxMlBundleGroupV4v0=tmnxMlBundleGroupV4v0, tmnxBundleYellowDiffDelay=tmnxBundleYellowDiffDelay, TmnxDs0ChannelList=TmnxDs0ChannelList, tmnxSonetPathC2Byte=tmnxSonetPathC2Byte, tmnxSonetGroupName=tmnxSonetGroupName, tmnxPortSFPStatus=tmnxPortSFPStatus, tmnxPortOperStatus=tmnxPortOperStatus, tmnxPortIsLeaf=tmnxPortIsLeaf, tmnxSonetPathScramble=tmnxSonetPathScramble, tmnxPortIngrMdaQos13StatDropOcts=tmnxPortIngrMdaQos13StatDropOcts, TmnxPortOperStatus=TmnxPortOperStatus, tmnxPortFCStatsEgrFwdInProfPkts=tmnxPortFCStatsEgrFwdInProfPkts, tmnxPortIngrMdaQos12StatDropOcts=tmnxPortIngrMdaQos12StatDropOcts, tmnxBundleType=tmnxBundleType, tmnxBundleMemberActive=tmnxBundleMemberActive, tmnxBundleMlpppIngQoSProfId=tmnxBundleMlpppIngQoSProfId, tmnxSonetReportAlarmStatus=tmnxSonetReportAlarmStatus, tmnxPortNetEgressDroOutProfPkts=tmnxPortNetEgressDroOutProfPkts, tmnxDS3ChannelRowStatus=tmnxDS3ChannelRowStatus, tmnxPortEtherDownWhenLoopedRetry=tmnxPortEtherDownWhenLoopedRetry, tmnxBundleOperMRRU=tmnxBundleOperMRRU, tmnxDDMFailedThresholds=tmnxDDMFailedThresholds, tmnxBundleImaGrpSmFeState=tmnxBundleImaGrpSmFeState, tmnxDS3ChannelLastChangeTime=tmnxDS3ChannelLastChangeTime, tmnxDS0ChanGroupAcctPolicyId=tmnxDS0ChanGroupAcctPolicyId, tmnxFRDlcmiRxStatusEnqMsgs=tmnxFRDlcmiRxStatusEnqMsgs, tmnxPortIngrMdaQos15StatDropOcts=tmnxPortIngrMdaQos15StatDropOcts, tmnxPortSchedOverrideLvl7CIR=tmnxPortSchedOverrideLvl7CIR, tmnxBundleImaGrpVersion=tmnxBundleImaGrpVersion, tmnxBundleMemberImaEntry=tmnxBundleMemberImaEntry, tmnxDS1E1LoopbackStarted=tmnxDS1E1LoopbackStarted, TmnxDSXClockSource=TmnxDSXClockSource, tmnxPortConnectorType=tmnxPortConnectorType, tmnxDS3ChannelBERTSynched=tmnxDS3ChannelBERTSynched, tmnxBundleImaGrpAvailRxCR=tmnxBundleImaGrpAvailRxCR, tmnxPortNotifySonetPathAlarmReason=tmnxPortNotifySonetPathAlarmReason, tmnxPortFCStatsEgrDroOutProfOcts=tmnxPortFCStatsEgrDroOutProfOcts, tmnxDS3ChannelType=tmnxDS3ChannelType, tmnxPortComp7710V3v0=tmnxPortComp7710V3v0, tmnxFRDlcmiStatusEnqMsgTimeouts=tmnxFRDlcmiStatusEnqMsgTimeouts, tmnxSonetPathOperMTU=tmnxSonetPathOperMTU, tmnxDDMAux1HiWarning=tmnxDDMAux1HiWarning, tmnxPortSchedOverrideLvl1CIR=tmnxPortSchedOverrideLvl1CIR, tmnxSonetPathOperMRU=tmnxSonetPathOperMRU, tmnxPortSchedOverrideRowStatus=tmnxPortSchedOverrideRowStatus, tmnxPortEtherDownWhenLoopedKeepAlive=tmnxPortEtherDownWhenLoopedKeepAlive, tmnxPortIngPoolPercentRate=tmnxPortIngPoolPercentRate, tmnxBundleImaGrpErrorIcpCells=tmnxBundleImaGrpErrorIcpCells, tmnxDDMAux2Type=tmnxDDMAux2Type, tmnxPortSchedOverrideEntry=tmnxPortSchedOverrideEntry, tmnxBundleMemberImaRxIcpCells=tmnxBundleMemberImaRxIcpCells, tmnxBundleMemberImaViolations=tmnxBundleMemberImaViolations, tmnxPortNotificationObjects=tmnxPortNotificationObjects, tmnxPortNotifyBerSfTca=tmnxPortNotifyBerSfTca, tmnxBundleMemberImaFeRxNumFails=tmnxBundleMemberImaFeRxNumFails, tmnxBundleImaGrpLnkActTimer=tmnxBundleImaGrpLnkActTimer, tmnxObsoleteGroupV3v0=tmnxObsoleteGroupV3v0, tmnxFRDlcmiTxStatusMsgs=tmnxFRDlcmiTxStatusMsgs, tmnxPortIngrMdaQos11StatDropOcts=tmnxPortIngrMdaQos11StatDropOcts, tmnxPortFCStatsIngFwdInProfPkts=tmnxPortFCStatsIngFwdInProfPkts, tmnxBundleMemberImaTable=tmnxBundleMemberImaTable, TmnxPortEtherReportValue=TmnxPortEtherReportValue, tmnxDDMSupplyVoltageHiAlarm=tmnxDDMSupplyVoltageHiAlarm, tmnxDDMTxBiasCurrent=tmnxDDMTxBiasCurrent, tmnxSonetSDHLoopbackStarted=tmnxSonetSDHLoopbackStarted, tmnxPortConnectTypeStatus=tmnxPortConnectTypeStatus, tmnxBundleMemberImaRxLid=tmnxBundleMemberImaRxLid, tmnxPortEthernetV6v0Group=tmnxPortEthernetV6v0Group, tmnxPortLagId=tmnxPortLagId, tmnxPortTransceiverDiagCapable=tmnxPortTransceiverDiagCapable, tmnxPortLastAlarmEvent=tmnxPortLastAlarmEvent, tmnxMcMlpppStatsEntry=tmnxMcMlpppStatsEntry, tmnxBPGrpAssocWorkingBundleID=tmnxBPGrpAssocWorkingBundleID, tmnxSonetEntry=tmnxSonetEntry, tmnxBundleImaGrpSmOperSecs=tmnxBundleImaGrpSmOperSecs, tmnxPortTestGroup=tmnxPortTestGroup, tmnxPortEtherReportAlarm=tmnxPortEtherReportAlarm, tmnxBundleMemberEntry=tmnxBundleMemberEntry, tmnxPortClearAlarms=tmnxPortClearAlarms, tmnxDDMRxOpticalPowerLowAlarm=tmnxDDMRxOpticalPowerLowAlarm, tmnxDS0ChanGroupPayloadPattern=tmnxDS0ChanGroupPayloadPattern, tmnxDS3ChannelClockSyncState=tmnxDS3ChannelClockSyncState, tmnxPortObjs=tmnxPortObjs, tmnxPortMode=tmnxPortMode, tmnxPortIngrMdaQos06StatDropPkts=tmnxPortIngrMdaQos06StatDropPkts, tmnxEqPortBndlYellowDiffExceeded=tmnxEqPortBndlYellowDiffExceeded, tmnxATMIntfMapping=tmnxATMIntfMapping, tmnxBundleParentBundle=tmnxBundleParentBundle, tmnxPortFCStatsEgrFwdInProfOcts=tmnxPortFCStatsEgrFwdInProfOcts, tmnxPortFCStatsEgrDroInProfPkts=tmnxPortFCStatsEgrDroInProfPkts, tmnxPortTransceiverType=tmnxPortTransceiverType, tmnxPortEtherEntry=tmnxPortEtherEntry, tmnxEqPortDuplexCfgNotCompatible=tmnxEqPortDuplexCfgNotCompatible, tmnxMlBundleGroupV5v0=tmnxMlBundleGroupV5v0, tmnxPortEtherMDIMDIX=tmnxPortEtherMDIMDIX, tmnxDS1InvertData=tmnxDS1InvertData, tmnxPortNetIngressFwdOutProfOcts=tmnxPortNetIngressFwdOutProfOcts, TmnxBundleID=TmnxBundleID, tmnxPortEtherReportAlarmStatus=tmnxPortEtherReportAlarmStatus, tmnxDS1Table=tmnxDS1Table, tmnxPortTestStartTime=tmnxPortTestStartTime, tmnxEqOobPortFailure=tmnxEqOobPortFailure, tmnxPortComp7750V5v0=tmnxPortComp7750V5v0, tmnxObsoleteGroupV5v0=tmnxObsoleteGroupV5v0, tmnxEqPortDS1AlarmClear=tmnxEqPortDS1AlarmClear, tmnxBundleImaGrpFeFails=tmnxBundleImaGrpFeFails, tmnxBundleMemberImaLstRxIcpCells=tmnxBundleMemberImaLstRxIcpCells, tmnxPortIngrMdaQos06StatDropOcts=tmnxPortIngrMdaQos06StatDropOcts, tmnxDDMExtCalRxPower4=tmnxDDMExtCalRxPower4, tmnxPortNotifyDS1AlarmReason=tmnxPortNotifyDS1AlarmReason, tmnxPortMIBModule=tmnxPortMIBModule, tmnxPortTestTable=tmnxPortTestTable, tmnxBundleMemberImaFeRxUnuseSecs=tmnxBundleMemberImaFeRxUnuseSecs, tmnxPortTDMV3v0Group=tmnxPortTDMV3v0Group, tmnxPortNetEgressDroInProfPkts=tmnxPortNetEgressDroInProfPkts, tmnxBundleImaGrpRxId=tmnxBundleImaGrpRxId, tmnxBundleImaGrpTxId=tmnxBundleImaGrpTxId, TmnxImaGrpFailState=TmnxImaGrpFailState, tmnxBundleMemberImaNeTxNumFails=tmnxBundleMemberImaNeTxNumFails, tmnxPortIngrMdaQos09StatDropPkts=tmnxPortIngrMdaQos09StatDropPkts, tmnxPortIngrMdaQos08StatDropPkts=tmnxPortIngrMdaQos08StatDropPkts, tmnxPortNetIngressStatsTable=tmnxPortNetIngressStatsTable, tmnxPortSchedOverrideLvl3PIR=tmnxPortSchedOverrideLvl3PIR, tmnxATMIntfMinVpValue=tmnxATMIntfMinVpValue, tmnxDDMAux2HiAlarm=tmnxDDMAux2HiAlarm, tmnxBundleImaGrpFeClockMode=tmnxBundleImaGrpFeClockMode, tmnxCiscoHDLCStatInOctets=tmnxCiscoHDLCStatInOctets, tmnxDS1PortEntry=tmnxDS1PortEntry, tmnxDS0ChanGroupRowStatus=tmnxDS0ChanGroupRowStatus, tmnxDS1ClockSyncState=tmnxDS1ClockSyncState, tmnxCiscoHDLCStatOutPkts=tmnxCiscoHDLCStatOutPkts, tmnxMcMlpppStatsTable=tmnxMcMlpppStatsTable, tmnxPortTestEntry=tmnxPortTestEntry, tmnxSonetSpeed=tmnxSonetSpeed, tmnxDS1PortDbGain=tmnxDS1PortDbGain, tmnxSonetApsAuthKey=tmnxSonetApsAuthKey, tmnxDS3ChannelChannelized=tmnxDS3ChannelChannelized, tmnxPortIngrMdaQos00StatDropOcts=tmnxPortIngrMdaQos00StatDropOcts, tmnxPortNetIngressDroOutProfOcts=tmnxPortNetIngressDroOutProfOcts, tmnxEqPortSpeedCfgNotCompatible=tmnxEqPortSpeedCfgNotCompatible, tmnxPortNotifyObjsGroupR2r1=tmnxPortNotifyObjsGroupR2r1, tmnxEqPortEtherLoopDetected=tmnxEqPortEtherLoopDetected, tmnxPortSchedOverrideLvl2PIR=tmnxPortSchedOverrideLvl2PIR, tmnxDS1BerSfThreshold=tmnxDS1BerSfThreshold, tmnxPortNetEgressStatsEntry=tmnxPortNetEgressStatsEntry, tmnxDDMTempLowAlarm=tmnxDDMTempLowAlarm, tmnxDDMTxBiasCurrentLowAlarm=tmnxDDMTxBiasCurrentLowAlarm, tmnxPortTestAction=tmnxPortTestAction, tmnxEqPortSonetPathAlarmClear=tmnxEqPortSonetPathAlarmClear, tmnxPortSFPVendorManufactureDate=tmnxPortSFPVendorManufactureDate, tmnxPortFCStatsEgrDroOutProfPkts=tmnxPortFCStatsEgrDroOutProfPkts, tmnxFRDlcmiRxStatusMsgs=tmnxFRDlcmiRxStatusMsgs, tmnxDS3ChannelBERTOperStatus=tmnxDS3ChannelBERTOperStatus, tmnxBundleImaGrpTable=tmnxBundleImaGrpTable, tmnxPortNetIngressQueueIndex=tmnxPortNetIngressQueueIndex, tmnxPortFCStatsEgrDroInProfOcts=tmnxPortFCStatsEgrDroInProfOcts, tmnxPortEgrNamedPoolPlcy=tmnxPortEgrNamedPoolPlcy, tmnxDS3ChannelOperMTU=tmnxDS3ChannelOperMTU, tmnxPortSchedOverrideLvl3CIR=tmnxPortSchedOverrideLvl3CIR, tmnxBundleMlpppEndpointIDClass=tmnxBundleMlpppEndpointIDClass, tmnxPortTDMGroupV6v0=tmnxPortTDMGroupV6v0, tmnxPortIngrMdaQos15StatDropPkts=tmnxPortIngrMdaQos15StatDropPkts, tmnxBundleMemberImaNeTxState=tmnxBundleMemberImaNeTxState, tmnxBundleUpTime=tmnxBundleUpTime, tmnxBundleMemberImaFeTxNumFails=tmnxBundleMemberImaFeTxNumFails, tmnxBundleMemberImaFeRxState=tmnxBundleMemberImaFeRxState, tmnxPortLastChangeTime=tmnxPortLastChangeTime, tmnxPortTransceiverLaserWaveLen=tmnxPortTransceiverLaserWaveLen, tmnxDDMTempHiWarning=tmnxDDMTempHiWarning, tmnxPortStatsR2r1Group=tmnxPortStatsR2r1Group, tmnxFRDlcmiT392Dce=tmnxFRDlcmiT392Dce, tmnxDDMExtCalTxLaserBiasOffset=tmnxDDMExtCalTxLaserBiasOffset, tmnxPortGroups=tmnxPortGroups, tmnxPortGroupV4v0=tmnxPortGroupV4v0, tmnxPortNetIngressDroInProfPkts=tmnxPortNetIngressDroInProfPkts, tmnxDS3Buildout=tmnxDS3Buildout, tmnxDDMTempLowWarning=tmnxDDMTempLowWarning, tmnxObjectAppSlopePolicy=tmnxObjectAppSlopePolicy, tmnxPortSchedOverrideLvl1PIR=tmnxPortSchedOverrideLvl1PIR, tmnxSonetPathCollectStats=tmnxSonetPathCollectStats, tmnxSonetPathReportAlarmStatus=tmnxSonetPathReportAlarmStatus, tmnxQosAppObjsGroup=tmnxQosAppObjsGroup, tmnxDDMAux1HiAlarm=tmnxDDMAux1HiAlarm, tmnxBundleImaGrpRxRefLnk=tmnxBundleImaGrpRxRefLnk, tmnxDS3ChannelReportAlarmStatus=tmnxDS3ChannelReportAlarmStatus, tmnxBundleMemberImaNeUnavailSecs=tmnxBundleMemberImaNeUnavailSecs, tmnxBundleImaGrpSmDownSecs=tmnxBundleImaGrpSmDownSecs, tmnxBundleImaGrpLostRxIcpCells=tmnxBundleImaGrpLostRxIcpCells, tmnxPortObsoleteGroup=tmnxPortObsoleteGroup, tmnxPortIngrMdaQosStatR2r1Group=tmnxPortIngrMdaQosStatR2r1Group, tmnxSonetApsHoldTimeLeft=tmnxSonetApsHoldTimeLeft, tmnxBPGrpAssocTable=tmnxBPGrpAssocTable, TmnxImaLnkState=TmnxImaLnkState, TmnxImaLnkFailState=TmnxImaLnkFailState, tmnxPortNumAlarms=tmnxPortNumAlarms, tmnxPortEgrPoolPercentRate=tmnxPortEgrPoolPercentRate, tmnxPortIngrMdaQos04StatDropPkts=tmnxPortIngrMdaQos04StatDropPkts, tmnxBundleImaGrpTestMember=tmnxBundleImaGrpTestMember, tmnxDS0ChanGroupScramble=tmnxDS0ChanGroupScramble, tmnxBundleMemberDownReason=tmnxBundleMemberDownReason, tmnxMcMlpppStatsIngressOct=tmnxMcMlpppStatsIngressOct, tmnxSonetTable=tmnxSonetTable, tmnxDDMExtCalRxPower0=tmnxDDMExtCalRxPower0, tmnxPortFCStatsIngDroInProfPkts=tmnxPortFCStatsIngDroInProfPkts, TmnxPortType=TmnxPortType, tmnxSonetMonS1Byte=tmnxSonetMonS1Byte, tmnxDDMRxOpticalPowerHiAlarm=tmnxDDMRxOpticalPowerHiAlarm, tmnxBundleMemberImaFeUnavailSecs=tmnxBundleMemberImaFeUnavailSecs, tmnxDS1BERTSynched=tmnxDS1BERTSynched, tmnxDS3ChannelSubrate=tmnxDS3ChannelSubrate, TmnxDSXLoopback=TmnxDSXLoopback, tmnxDS3ChannelAcctPolicyId=tmnxDS3ChannelAcctPolicyId, tmnxBundleMemberImaErrorIcpCells=tmnxBundleMemberImaErrorIcpCells, tmnxPortMacAddress=tmnxPortMacAddress, TmnxImaGrpVersion=TmnxImaGrpVersion, tmnxSonetPathMonC2Byte=tmnxSonetPathMonC2Byte, tmnxFRDlcmiDiscardedMsgs=tmnxFRDlcmiDiscardedMsgs, tmnxBundleMemberImaNeRxUnuseSecs=tmnxBundleMemberImaNeRxUnuseSecs, tmnxDDMSupplyVoltageLowAlarm=tmnxDDMSupplyVoltageLowAlarm, tmnxPortTypeTable=tmnxPortTypeTable, tmnxPortSFPVendorSerialNum=tmnxPortSFPVendorSerialNum, tmnxBundleShortSequence=tmnxBundleShortSequence, tmnx7710PortTDMGroupV3v0=tmnx7710PortTDMGroupV3v0, tmnxSonetPathJ1String=tmnxSonetPathJ1String, tmnxPortTransceiverModelNumber=tmnxPortTransceiverModelNumber)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-PORT-MIB", tmnxBundleImaGrpTestState=tmnxBundleImaGrpTestState, tmnxDS1E1LoopbackStopped=tmnxDS1E1LoopbackStopped, tmnxDS1Type=tmnxDS1Type, tmnxDDMRxOpticalPowerType=tmnxDDMRxOpticalPowerType, tmnxBundleMemberImaNeSevErrSecs=tmnxBundleMemberImaNeSevErrSecs, tmnxPortSchedOverrideLvl5PIR=tmnxPortSchedOverrideLvl5PIR, tmnxPortFRGroup=tmnxPortFRGroup, tmnxSonetFraming=tmnxSonetFraming, tmnxBundleEntry=tmnxBundleEntry, tmnxSonetAps=tmnxSonetAps, tmnxPortNotificationGroupV5v0=tmnxPortNotificationGroupV5v0, tmnxPortClass=tmnxPortClass, tmnxPortSchedOverrideLvl7PIR=tmnxPortSchedOverrideLvl7PIR, tmnxDS3ChannelMDLMonPortString=tmnxDS3ChannelMDLMonPortString, tmnxSonetPathMTU=tmnxSonetPathMTU, tmnxDS1PortBuildout=tmnxDS1PortBuildout, tmnxDDMTxBiasCurrentHiAlarm=tmnxDDMTxBiasCurrentHiAlarm, tmnxBundleMRRU=tmnxBundleMRRU, tmnxDDMExtCalRxPower2=tmnxDDMExtCalRxPower2, tmnxDS1ReportAlarmStatus=tmnxDS1ReportAlarmStatus, tmnxBundleMlpppClassCount=tmnxBundleMlpppClassCount, tmnxSonetPathReportAlarm=tmnxSonetPathReportAlarm, tmnxPortName=tmnxPortName, tmnxPortIngrMdaQos02StatDropPkts=tmnxPortIngrMdaQos02StatDropPkts, tmnxPortLoadBalanceAlgorithm=tmnxPortLoadBalanceAlgorithm, tmnxBundleImaGrpLeastDelayLink=tmnxBundleImaGrpLeastDelayLink, tmnxPortFCStatsIngDroOutProfOcts=tmnxPortFCStatsIngDroOutProfOcts, tmnxDDMSupplyVoltageLowWarning=tmnxDDMSupplyVoltageLowWarning, tmnxDS3ChannelMDLMessageType=tmnxDS3ChannelMDLMessageType, tmnxPortIngrMdaQos05StatDropOcts=tmnxPortIngrMdaQos05StatDropOcts, tmnxPortNotifyBundleId=tmnxPortNotifyBundleId, tmnxDS3ChannelMDLPortString=tmnxDS3ChannelMDLPortString, tmnxBundleMemberImaRxTestState=tmnxBundleMemberImaRxTestState, tmnxDDMTxOutputPowerHiWarning=tmnxDDMTxOutputPowerHiWarning, tmnx7710PortTDMGroupV5v0=tmnx7710PortTDMGroupV5v0, tmnxPortConnectTypeTable=tmnxPortConnectTypeTable, tmnxCiscoHDLCStatOutOctets=tmnxCiscoHDLCStatOutOctets, tmnxPortSFPEquipped=tmnxPortSFPEquipped, tmnxPortIngrMdaQos05StatDropPkts=tmnxPortIngrMdaQos05StatDropPkts, tmnxPortSchedOverrideLvl8PIR=tmnxPortSchedOverrideLvl8PIR, tmnxPortLastClearedTime=tmnxPortLastClearedTime, tmnxBundleImaGrpTxRefLnk=tmnxBundleImaGrpTxRefLnk, tmnxDS0ChanGroupIdleCycleFlags=tmnxDS0ChanGroupIdleCycleFlags, tmnxPortComp7710V5v0=tmnxPortComp7710V5v0, tmnxObjectType=tmnxObjectType, tmnxChannelIdxString=tmnxChannelIdxString, tmnxMlBundleV3v0Group=tmnxMlBundleV3v0Group, tmnxPortNotifyPrefix=tmnxPortNotifyPrefix, tmnxDS0ChanGroupEntry=tmnxDS0ChanGroupEntry, tmnxCiscoHDLCOperState=tmnxCiscoHDLCOperState, tmnxFRDlcmiN392Dce=tmnxFRDlcmiN392Dce, tmnxPortFCStatsIngDroInProfOcts=tmnxPortFCStatsIngDroInProfOcts, tmnxPortIngrMdaQos07StatDropOcts=tmnxPortIngrMdaQos07StatDropOcts, tmnxPortCemGroupV6v0=tmnxPortCemGroupV6v0, tmnxPortEtherDownWhenLoopedEnabled=tmnxPortEtherDownWhenLoopedEnabled, tmnxPortSchedOverrideFlags=tmnxPortSchedOverrideFlags, tmnxBundleRedDiffDelay=tmnxBundleRedDiffDelay, tmnxPortEtherDuplex=tmnxPortEtherDuplex, tmnxPortIngrMdaQos03StatDropPkts=tmnxPortIngrMdaQos03StatDropPkts, tmnxFRDlcmiInvRxSeqNumMsgs=tmnxFRDlcmiInvRxSeqNumMsgs, tmnxMcMlpppBundleGroup=tmnxMcMlpppBundleGroup, tmnxDDMExtCalVoltageSlope=tmnxDDMExtCalVoltageSlope, tmnxPortFCStatsIndex=tmnxPortFCStatsIndex, tmnxPortIngrMdaQos01StatDropPkts=tmnxPortIngrMdaQos01StatDropPkts, tmnxPortDescription=tmnxPortDescription, tmnxDS1PortTable=tmnxDS1PortTable, tmnxDDMTxBiasCurrentHiWarning=tmnxDDMTxBiasCurrentHiWarning, tmnxPortFCStatsEntry=tmnxPortFCStatsEntry, tmnxSonetPathLastChangeTime=tmnxSonetPathLastChangeTime, tmnxBundleImaGrpTestPattern=tmnxBundleImaGrpTestPattern, tmnxSonetMonJ0String=tmnxSonetMonJ0String, tmnxPortSFPVendorPartNum=tmnxPortSFPVendorPartNum, tmnxPortCompliances=tmnxPortCompliances, tmnxSonetReportAlarm=tmnxSonetReportAlarm, tmnxDDMRxOpticalPowerHiWarning=tmnxDDMRxOpticalPowerHiWarning, tmnxEqPortBndlBadEndPtDiscr=tmnxEqPortBndlBadEndPtDiscr, tmnxBundleImaGrpTxOamLablVal=tmnxBundleImaGrpTxOamLablVal, tmnxDDMExtCalVoltageOffset=tmnxDDMExtCalVoltageOffset, tmnxPortV3v0Group=tmnxPortV3v0Group, tmnxPortNetIngressFwdInProfOcts=tmnxPortNetIngressFwdInProfOcts, tmnxDDMAux1LowWarning=tmnxDDMAux1LowWarning, tmnxDDMExtCalTemperatureSlope=tmnxDDMExtCalTemperatureSlope, tmnxCiscoHDLCStatsEntry=tmnxCiscoHDLCStatsEntry, tmnxPortNotifyDS3AlarmReason=tmnxPortNotifyDS3AlarmReason, tmnxBundleImaGrpRxOamLablVal=tmnxBundleImaGrpRxOamLablVal, tmnxSonetApsHoldTime=tmnxSonetApsHoldTime, TmnxDSXIdleFillType=TmnxDSXIdleFillType, tmnxSonetClockSource=tmnxSonetClockSource, tmnxChannelPortID=tmnxChannelPortID, tmnxSonetApsAdvertiseInterval=tmnxSonetApsAdvertiseInterval, tmnxBundleMinimumLinks=tmnxBundleMinimumLinks, tmnxDS1Entry=tmnxDS1Entry, tmnxBundleFragmentThreshold=tmnxBundleFragmentThreshold, tmnxPortIngrMdaQos04StatDropOcts=tmnxPortIngrMdaQos04StatDropOcts, tmnxSonetGroupTable=tmnxSonetGroupTable, tmnxDS3ChannelBERTPattern=tmnxDS3ChannelBERTPattern, tmnxBPGrpAssocProtectBundleID=tmnxBPGrpAssocProtectBundleID, tmnxDDMTemperature=tmnxDDMTemperature, tmnxPortEtherOperDuplex=tmnxPortEtherOperDuplex, tmnxBPGrpAssocActiveBundleID=tmnxBPGrpAssocActiveBundleID, tmnxPortIngrMdaQosStatEntry=tmnxPortIngrMdaQosStatEntry, tmnxPortComp7750=tmnxPortComp7750, tmnxCiscoHDLCDiscardStatInPkts=tmnxCiscoHDLCDiscardStatInPkts, tmnxSonetMonK2Byte=tmnxSonetMonK2Byte, tmnxDDMTxOutputPowerLowWarning=tmnxDDMTxOutputPowerLowWarning, tmnxDS3ChannelMDLUnitString=tmnxDS3ChannelMDLUnitString, tmnxPortIngrMdaQosStatTable=tmnxPortIngrMdaQosStatTable, tmnxMcMlpppStatsEgressPkt=tmnxMcMlpppStatsEgressPkt, tmnxPortEtherAcctPolicyId=tmnxPortEtherAcctPolicyId, tmnxPortATMGroupV4v0=tmnxPortATMGroupV4v0, tmnxDS3E3LoopbackStopped=tmnxDS3E3LoopbackStopped, tmnxPortEntry=tmnxPortEntry, tmnxPortAdminStatus=tmnxPortAdminStatus, tmnxPortIngNamedPoolPlcy=tmnxPortIngNamedPoolPlcy, TmnxPortState=TmnxPortState, tmnxDS3ChannelBERTErrors=tmnxDS3ChannelBERTErrors, tmnxATMIntfCellFormat=tmnxATMIntfCellFormat, tmnxBundleMemberImaFeRxFailState=tmnxBundleMemberImaFeRxFailState, tmnxPortStatsObjs=tmnxPortStatsObjs, tmnxSonetApsAdvertiseTimeLeft=tmnxSonetApsAdvertiseTimeLeft, tmnxCiscoHDLCGroup=tmnxCiscoHDLCGroup, tmnxDS1RemoteLoopRespond=tmnxDS1RemoteLoopRespond, tmnxDS0ChanGroupMTU=tmnxDS0ChanGroupMTU, tmnxSonetHoldTimeUp=tmnxSonetHoldTimeUp, tmnxEqPortEtherAlarmClear=tmnxEqPortEtherAlarmClear, tmnxDS3Entry=tmnxDS3Entry, tmnxATMObjs=tmnxATMObjs, tmnxDDMExternallyCalibrated=tmnxDDMExternallyCalibrated, tmnxBundleRowStatus=tmnxBundleRowStatus, TmnxDSXReportAlarm=TmnxDSXReportAlarm, tmnxPortHoldTimeDown=tmnxPortHoldTimeDown, tmnxSonetPathType=tmnxSonetPathType, tmnxDS3ChannelEntry=tmnxDS3ChannelEntry, tmnxPortNetEgressStatsTable=tmnxPortNetEgressStatsTable, tmnxPortNetEgressFwdOutProfPkts=tmnxPortNetEgressFwdOutProfPkts, tmnxMcMlpppClassIndex=tmnxMcMlpppClassIndex, tmnxPortNetIngressFwdInProfPkts=tmnxPortNetIngressFwdInProfPkts, tmnxDDMSupplyVoltageHiWarning=tmnxDDMSupplyVoltageHiWarning, tmnxPortFCStatsIngFwdOutProfPkts=tmnxPortFCStatsIngFwdOutProfPkts, tmnxPortSchedOverrideTable=tmnxPortSchedOverrideTable, tmnxObjectAppType=tmnxObjectAppType, tmnxEqPortFailure=tmnxEqPortFailure, tmnxDDMExtCalRxPower1=tmnxDDMExtCalRxPower1, tmnxSonetPathCRC=tmnxSonetPathCRC, tmnxPortHwMacAddress=tmnxPortHwMacAddress, tmnxPortDDMEventSuppression=tmnxPortDDMEventSuppression, tmnxSonetLoopback=tmnxSonetLoopback, tmnxBundleImaGrpDiffDelayMaxObs=tmnxBundleImaGrpDiffDelayMaxObs, tmnxSonetApsAdminStatus=tmnxSonetApsAdminStatus, tmnxPortNotifyEtherAlarmReason=tmnxPortNotifyEtherAlarmReason, tmnxDS3Type=tmnxDS3Type, tmnxPortSchedOverrideLvl2CIR=tmnxPortSchedOverrideLvl2CIR, tmnxEqPortSFPStatusFailure=tmnxEqPortSFPStatusFailure, tmnxEqPortSonetAlarmClear=tmnxEqPortSonetAlarmClear, tmnxPortSchedOverrideLvl6CIR=tmnxPortSchedOverrideLvl6CIR, tmnxPortIngrMdaQos07StatDropPkts=tmnxPortIngrMdaQos07StatDropPkts, tmnxBundleMemberImaNeTxUnuseSecs=tmnxBundleMemberImaNeTxUnuseSecs, tmnxPortHoldTimeUp=tmnxPortHoldTimeUp, tmnxDS3ChannelMDLPfiString=tmnxDS3ChannelMDLPfiString, tmnxPortIngrMdaQos10StatDropOcts=tmnxPortIngrMdaQos10StatDropOcts, tmnxPortNetEgressFwdInProfPkts=tmnxPortNetEgressFwdInProfPkts, tmnxSonetGroupChildType=tmnxSonetGroupChildType, tmnxPortNotifySonetAlarmReason=tmnxPortNotifySonetAlarmReason, tmnxCiscoHDLCKeepAliveInt=tmnxCiscoHDLCKeepAliveInt, tmnxPortATMV3v0Group=tmnxPortATMV3v0Group, tmnxBundleImaGrpBetaValue=tmnxBundleImaGrpBetaValue, tmnxDS0ChanGroupSignalPattern=tmnxDS0ChanGroupSignalPattern, tmnxBundleMemberImaRxTestPattern=tmnxBundleMemberImaRxTestPattern, tmnxPortSchedOverrideSchedName=tmnxPortSchedOverrideSchedName, tmnxBundleOperMTU=tmnxBundleOperMTU, tmnxBundleMemberUpTime=tmnxBundleMemberUpTime, tmnxBundleImaGrpSmFailState=tmnxBundleImaGrpSmFailState, tmnxDDMFailedObject=tmnxDDMFailedObject, tmnxSonetPathEntry=tmnxSonetPathEntry, tmnxQosPoolAppTable=tmnxQosPoolAppTable, tmnxMlImaBundleGroup=tmnxMlImaBundleGroup, tmnxBundleNumActiveLinks=tmnxBundleNumActiveLinks, tmnxPortTypeEntry=tmnxPortTypeEntry, tmnxPortIngrMdaQos12StatDropPkts=tmnxPortIngrMdaQos12StatDropPkts, tmnxDS3ChannelIdleCycleFlags=tmnxDS3ChannelIdleCycleFlags, tmnxDS1PortLastChangeTime=tmnxDS1PortLastChangeTime, tmnxDDMAux2LowAlarm=tmnxDDMAux2LowAlarm, tmnxBundleMlpppEgrQoSProfId=tmnxBundleMlpppEgrQoSProfId, tmnxDS3ChannelMDLEicString=tmnxDS3ChannelMDLEicString, tmnxPortNetEgressFwdOutProfOcts=tmnxPortNetEgressFwdOutProfOcts, tmnxPortEtherReasonDownFlags=tmnxPortEtherReasonDownFlags, tmnxPortSchedOverrideLvl8CIR=tmnxPortSchedOverrideLvl8CIR, tmnxPortToChannelTable=tmnxPortToChannelTable, tmnxSonetHoldTimeDown=tmnxSonetHoldTimeDown, tmnxDDMRxOpticalPowerLowWarning=tmnxDDMRxOpticalPowerLowWarning, tmnxPortComp7450V5v0=tmnxPortComp7450V5v0, tmnxPortUserAssignedMac=tmnxPortUserAssignedMac, tmnxDS3ChannelCollectStats=tmnxDS3ChannelCollectStats, tmnxSonetGroupType=tmnxSonetGroupType, tmnxPortNetIngressDroInProfOcts=tmnxPortNetIngressDroInProfOcts, tmnxSonetPathRowStatus=tmnxSonetPathRowStatus, tmnxDigitalDiagMonitorGroup=tmnxDigitalDiagMonitorGroup, tmnxBundleMemberImaRelDelay=tmnxBundleMemberImaRelDelay, tmnxSonetSingleFiber=tmnxSonetSingleFiber, tmnxDS0ChanGroupCRC=tmnxDS0ChanGroupCRC, tmnxPortAlias=tmnxPortAlias, tmnxDDMAux1Type=tmnxDDMAux1Type, tmnxFRDlcmiEntry=tmnxFRDlcmiEntry, tmnxDS0ChanGroupSignalFillType=tmnxDS0ChanGroupSignalFillType, tmnxSonetBerSdThreshold=tmnxSonetBerSdThreshold, tmnxDS1BERTErrors=tmnxDS1BERTErrors, tmnxBundleNumLinks=tmnxBundleNumLinks, TmnxImaGrpClockModes=TmnxImaGrpClockModes, tmnxDDMExtCalTxLaserBiasSlope=tmnxDDMExtCalTxLaserBiasSlope, tmnxPortSchedOverrideLvl6PIR=tmnxPortSchedOverrideLvl6PIR, tmnxPortIngrMdaQos11StatDropPkts=tmnxPortIngrMdaQos11StatDropPkts, tmnxPortComp7450V6v0=tmnxPortComp7450V6v0, tmnxPortNotificationGroupR2r1=tmnxPortNotificationGroupR2r1, tmnxDS3ChannelInFEACLoop=tmnxDS3ChannelInFEACLoop)
