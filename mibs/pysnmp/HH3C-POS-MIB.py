#
# PySNMP MIB module HH3C-POS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-POS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
hh3cmlsr, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cmlsr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, ObjectIdentity, Bits, IpAddress, iso, TimeTicks, NotificationType, Unsigned32, Integer32, MibIdentifier, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "ObjectIdentity", "Bits", "IpAddress", "iso", "TimeTicks", "NotificationType", "Unsigned32", "Integer32", "MibIdentifier", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hh3cpos = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8))
hh3cpos.setRevisions(('2004-10-12 00:00', '2004-07-02 00:00',))
if mibBuilder.loadTexts: hh3cpos.setLastUpdated('200410150000Z')
if mibBuilder.loadTexts: hh3cpos.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cposAppTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1), )
if mibBuilder.loadTexts: hh3cposAppTable.setStatus('current')
hh3cposAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1), ).setIndexNames((0, "HH3C-POS-MIB", "hh3cposAppId"))
if mibBuilder.loadTexts: hh3cposAppEntry.setStatus('current')
hh3cposAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppId.setStatus('current')
hh3cposAppConnectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("flow", 2), ("pad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppConnectMode.setStatus('current')
hh3cposAppState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noset", 1), ("down", 2), ("up", 3), ("ok", 4), ("kept", 5), ("linking", 6), ("linked", 7))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppState.setStatus('current')
hh3cposAppIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppIfIndex.setStatus('current')
hh3cposAppHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppHostIP.setStatus('current')
hh3cposAppPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppPort.setStatus('current')
hh3cposAppSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppSourceIp.setStatus('current')
hh3cposAppRecvPacCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppRecvPacCounter.setStatus('current')
hh3cposAppErrPacCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppErrPacCounter.setStatus('current')
hh3cposAppDistrErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppDistrErrCounter.setStatus('current')
hh3cposAppBuffedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppBuffedCounter.setStatus('current')
hh3cposAppDiscardedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppDiscardedCounter.setStatus('current')
hh3cposAppDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("close", 1), ("open", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppDebug.setStatus('current')
hh3cposAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppRowStatus.setStatus('current')
hh3cposAppX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAppX121Addr.setStatus('current')
hh3cposInterTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2), )
if mibBuilder.loadTexts: hh3cposInterTable.setStatus('current')
hh3cposInterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1), ).setIndexNames((0, "HH3C-POS-MIB", "hh3cposPosId"))
if mibBuilder.loadTexts: hh3cposInterEntry.setStatus('current')
hh3cposPosId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposPosId.setStatus('current')
hh3cposPosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposPosIfIndex.setStatus('current')
hh3cposPosConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noset", 1), ("down", 2), ("up", 3), ("ok", 4))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposPosConnectState.setStatus('current')
hh3cposPosRecvPacCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposPosRecvPacCounter.setStatus('current')
hh3cposPosErrPacCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposPosErrPacCounter.setStatus('current')
hh3cposPosMapErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposPosMapErrCounter.setStatus('current')
hh3cposPosBuffedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposPosBuffedCounter.setStatus('current')
hh3cposPosDiscardedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposPosDiscardedCounter.setStatus('current')
hh3cposPosInterDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("close", 1), ("open", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposPosInterDebug.setStatus('current')
hh3cposPosInterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposPosInterRowStatus.setStatus('current')
hh3cposPosInterType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fcm", 1), ("asy", 2), ("pad-client", 3), ("pad-server", 4))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposPosInterType.setStatus('current')
hh3cposMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 3), )
if mibBuilder.loadTexts: hh3cposMapTable.setStatus('current')
hh3cposMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 3, 1), ).setIndexNames((0, "HH3C-POS-MIB", "hh3cposMapDes"))
if mibBuilder.loadTexts: hh3cposMapEntry.setStatus('current')
hh3cposMapDes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposMapDes.setStatus('current')
hh3cposMapAppNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposMapAppNumber.setStatus('current')
hh3cposMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposMapRowStatus.setStatus('current')
hh3cposAsyAppTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 4), )
if mibBuilder.loadTexts: hh3cposAsyAppTable.setStatus('current')
hh3cposAsyAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 4, 1), ).setIndexNames((0, "HH3C-POS-MIB", "hh3cposAsyAppIfIndex"))
if mibBuilder.loadTexts: hh3cposAsyAppEntry.setStatus('current')
hh3cposAsyAppIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAsyAppIfIndex.setStatus('current')
hh3cposAsyAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposAsyAppRowStatus.setStatus('current')
hh3cposFCMTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 5), )
if mibBuilder.loadTexts: hh3cposFCMTable.setStatus('current')
hh3cposFCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 5, 1), ).setIndexNames((0, "HH3C-POS-MIB", "hh3cposFCMIfIndex"))
if mibBuilder.loadTexts: hh3cposFCMEntry.setStatus('current')
hh3cposFCMIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposFCMIfIndex.setStatus('current')
hh3cposFCMTimeoutCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposFCMTimeoutCounter.setStatus('current')
hh3cposFCMConnectFailCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposFCMConnectFailCounter.setStatus('current')
hh3cposAppSum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposAppSum.setStatus('current')
hh3cposInterSum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cposInterSum.setStatus('current')
hh3cposEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposEnable.setStatus('current')
hh3cposAppDebugAll = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("close", 1), ("open", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposAppDebugAll.setStatus('current')
hh3cposPosDebugAll = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("close", 1), ("open", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposPosDebugAll.setStatus('current')
hh3cposClearPacCounter = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("counting", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposClearPacCounter.setStatus('current')
hh3cposClearFCMCounter = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("counting", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposClearFCMCounter.setStatus('current')
hh3cposEnableTrap = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposEnableTrap.setStatus('current')
hh3cposFCMAnswerTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposFCMAnswerTime.setStatus('current')
hh3cposFCMTradeTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000, 1200000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposFCMTradeTime.setStatus('current')
hh3cposFCMPacketInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3500, 10000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposFCMPacketInterval.setStatus('current')
hh3cposPadWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposPadWaitTime.setStatus('current')
hh3cposPadIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposPadIdleTimeout.setStatus('current')
hh3cposPadPacType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syn", 1), ("asy", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposPadPacType.setStatus('current')
hh3cposPadCheckSChar = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cposPadCheckSChar.setStatus('current')
hh3cposPadTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 22), )
if mibBuilder.loadTexts: hh3cposPadTable.setStatus('current')
hh3cposPadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 22, 1), ).setIndexNames((0, "HH3C-POS-MIB", "hh3cposPadIfIndex"))
if mibBuilder.loadTexts: hh3cposPadEntry.setStatus('current')
hh3cposPadIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cposPadIfIndex.setStatus('current')
hh3cposPadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cposPadRowStatus.setStatus('current')
hh3cposTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17))
hh3cposAppNotReadyTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 1)).setObjects(("HH3C-POS-MIB", "hh3cposAppId"))
if mibBuilder.loadTexts: hh3cposAppNotReadyTrap.setStatus('current')
hh3cposAppConnectFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 2)).setObjects(("HH3C-POS-MIB", "hh3cposAppId"))
if mibBuilder.loadTexts: hh3cposAppConnectFailTrap.setStatus('current')
hh3cposAppStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 3)).setObjects(("HH3C-POS-MIB", "hh3cposAppId"), ("HH3C-POS-MIB", "hh3cposAppState"))
if mibBuilder.loadTexts: hh3cposAppStateChangeTrap.setStatus('current')
hh3cposAppNotConfigedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 4)).setObjects(("HH3C-POS-MIB", "hh3cposAppId"))
if mibBuilder.loadTexts: hh3cposAppNotConfigedTrap.setStatus('current')
hh3cposAppBuffOverFlowTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 5)).setObjects(("HH3C-POS-MIB", "hh3cposAppId"))
if mibBuilder.loadTexts: hh3cposAppBuffOverFlowTrap.setStatus('current')
hh3cposAppDebugOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 6)).setObjects(("HH3C-POS-MIB", "hh3cposAppId"))
if mibBuilder.loadTexts: hh3cposAppDebugOpenTrap.setStatus('current')
hh3cposAppDebugAllOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 7))
if mibBuilder.loadTexts: hh3cposAppDebugAllOpenTrap.setStatus('current')
hh3cposInterBuffOverFlowTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 8))
if mibBuilder.loadTexts: hh3cposInterBuffOverFlowTrap.setStatus('current')
hh3cposInterStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 9)).setObjects(("HH3C-POS-MIB", "hh3cposPosId"), ("HH3C-POS-MIB", "hh3cposPosConnectState"))
if mibBuilder.loadTexts: hh3cposInterStateChangeTrap.setStatus('current')
hh3cposInterDebugOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 10)).setObjects(("HH3C-POS-MIB", "hh3cposPosId"))
if mibBuilder.loadTexts: hh3cposInterDebugOpenTrap.setStatus('current')
hh3cposInterDebugAllOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 11))
if mibBuilder.loadTexts: hh3cposInterDebugAllOpenTrap.setStatus('current')
hh3cposFCMTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 12)).setObjects(("HH3C-POS-MIB", "hh3cposFCMIfIndex"))
if mibBuilder.loadTexts: hh3cposFCMTimeoutTrap.setStatus('current')
hh3cposFCMConnectFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 13)).setObjects(("HH3C-POS-MIB", "hh3cposFCMIfIndex"))
if mibBuilder.loadTexts: hh3cposFCMConnectFailTrap.setStatus('current')
hh3cposClearPacketCounter = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 14))
if mibBuilder.loadTexts: hh3cposClearPacketCounter.setStatus('current')
hh3cposClearFcmCounter = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 8, 17, 15))
if mibBuilder.loadTexts: hh3cposClearFcmCounter.setStatus('current')
mibBuilder.exportSymbols("HH3C-POS-MIB", hh3cposFCMAnswerTime=hh3cposFCMAnswerTime, hh3cposAppDistrErrCounter=hh3cposAppDistrErrCounter, hh3cposPadWaitTime=hh3cposPadWaitTime, hh3cposFCMIfIndex=hh3cposFCMIfIndex, PYSNMP_MODULE_ID=hh3cpos, hh3cposAppNotReadyTrap=hh3cposAppNotReadyTrap, hh3cposInterDebugAllOpenTrap=hh3cposInterDebugAllOpenTrap, hh3cposAppRowStatus=hh3cposAppRowStatus, hh3cposPadRowStatus=hh3cposPadRowStatus, hh3cposPadIfIndex=hh3cposPadIfIndex, hh3cposPosIfIndex=hh3cposPosIfIndex, hh3cposPosDebugAll=hh3cposPosDebugAll, hh3cposInterStateChangeTrap=hh3cposInterStateChangeTrap, hh3cposAppHostIP=hh3cposAppHostIP, hh3cposAppConnectFailTrap=hh3cposAppConnectFailTrap, hh3cposPosInterRowStatus=hh3cposPosInterRowStatus, hh3cposAsyAppIfIndex=hh3cposAsyAppIfIndex, hh3cposAppX121Addr=hh3cposAppX121Addr, hh3cposPosRecvPacCounter=hh3cposPosRecvPacCounter, hh3cposAppBuffedCounter=hh3cposAppBuffedCounter, hh3cposFCMConnectFailTrap=hh3cposFCMConnectFailTrap, hh3cposAppConnectMode=hh3cposAppConnectMode, hh3cposClearPacketCounter=hh3cposClearPacketCounter, hh3cposFCMEntry=hh3cposFCMEntry, hh3cposClearPacCounter=hh3cposClearPacCounter, hh3cposAppId=hh3cposAppId, hh3cposFCMTimeoutCounter=hh3cposFCMTimeoutCounter, hh3cposPosDiscardedCounter=hh3cposPosDiscardedCounter, hh3cposFCMConnectFailCounter=hh3cposFCMConnectFailCounter, hh3cposAppBuffOverFlowTrap=hh3cposAppBuffOverFlowTrap, hh3cposInterBuffOverFlowTrap=hh3cposInterBuffOverFlowTrap, hh3cposPadCheckSChar=hh3cposPadCheckSChar, hh3cposAppRecvPacCounter=hh3cposAppRecvPacCounter, hh3cposFCMTimeoutTrap=hh3cposFCMTimeoutTrap, hh3cposAsyAppRowStatus=hh3cposAsyAppRowStatus, hh3cposPosInterType=hh3cposPosInterType, hh3cposAppSum=hh3cposAppSum, hh3cposAppNotConfigedTrap=hh3cposAppNotConfigedTrap, hh3cposMapRowStatus=hh3cposMapRowStatus, hh3cposAppTable=hh3cposAppTable, hh3cposPosErrPacCounter=hh3cposPosErrPacCounter, hh3cposPadPacType=hh3cposPadPacType, hh3cposAppErrPacCounter=hh3cposAppErrPacCounter, hh3cposMapTable=hh3cposMapTable, hh3cposMapDes=hh3cposMapDes, hh3cposMapAppNumber=hh3cposMapAppNumber, hh3cposInterEntry=hh3cposInterEntry, hh3cposAppPort=hh3cposAppPort, hh3cposInterDebugOpenTrap=hh3cposInterDebugOpenTrap, hh3cposEnableTrap=hh3cposEnableTrap, hh3cposAsyAppEntry=hh3cposAsyAppEntry, hh3cposClearFcmCounter=hh3cposClearFcmCounter, hh3cposPosBuffedCounter=hh3cposPosBuffedCounter, hh3cposPadIdleTimeout=hh3cposPadIdleTimeout, hh3cposFCMTable=hh3cposFCMTable, hh3cposAsyAppTable=hh3cposAsyAppTable, hh3cposPadEntry=hh3cposPadEntry, hh3cposAppStateChangeTrap=hh3cposAppStateChangeTrap, hh3cposPosConnectState=hh3cposPosConnectState, hh3cposClearFCMCounter=hh3cposClearFCMCounter, hh3cposPosInterDebug=hh3cposPosInterDebug, hh3cposFCMTradeTime=hh3cposFCMTradeTime, hh3cposPosMapErrCounter=hh3cposPosMapErrCounter, hh3cposFCMPacketInterval=hh3cposFCMPacketInterval, hh3cposInterTable=hh3cposInterTable, hh3cposPadTable=hh3cposPadTable, hh3cpos=hh3cpos, hh3cposInterSum=hh3cposInterSum, hh3cposPosId=hh3cposPosId, hh3cposAppIfIndex=hh3cposAppIfIndex, hh3cposAppState=hh3cposAppState, hh3cposAppDebug=hh3cposAppDebug, hh3cposTrap=hh3cposTrap, hh3cposAppEntry=hh3cposAppEntry, hh3cposEnable=hh3cposEnable, hh3cposAppDebugAllOpenTrap=hh3cposAppDebugAllOpenTrap, hh3cposAppDebugOpenTrap=hh3cposAppDebugOpenTrap, hh3cposAppDebugAll=hh3cposAppDebugAll, hh3cposAppDiscardedCounter=hh3cposAppDiscardedCounter, hh3cposMapEntry=hh3cposMapEntry, hh3cposAppSourceIp=hh3cposAppSourceIp)
