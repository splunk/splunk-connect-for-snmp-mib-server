#
# PySNMP MIB module DTMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DTMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:40:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Gauge32, iso, TimeTicks, Bits, MibIdentifier, NotificationType, Counter32, Integer32, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Gauge32", "iso", "TimeTicks", "Bits", "MibIdentifier", "NotificationType", "Counter32", "Integer32", "IpAddress", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nsi = MibIdentifier((1, 3, 6, 1, 4, 1, 2592))
nsiDoubleTake = MibIdentifier((1, 3, 6, 1, 4, 1, 2592, 3))
dtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2592, 3, 1))
dtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2592, 3, 2))
dtSource = MibIdentifier((1, 3, 6, 1, 4, 1, 2592, 3, 3))
dtTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 2592, 3, 4))
dtSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 2592, 3, 5))
dtConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 2592, 3, 6))
dtUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtUpTime.setStatus('mandatory')
dtCurrentMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtCurrentMemoryUsage.setStatus('mandatory')
dtMirOpsGenerated = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtMirOpsGenerated.setStatus('mandatory')
dtMirBytesGenerated = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtMirBytesGenerated.setStatus('mandatory')
dtRepOpsGenerated = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtRepOpsGenerated.setStatus('mandatory')
dtRepBytesGenerated = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtRepBytesGenerated.setStatus('mandatory')
dtSourceState = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notLoaded", 0), ("loadedNoDriver", 1), ("loadedWithDriver", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtSourceState.setStatus('mandatory')
dtTargetState = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notLoaded", 0), ("loaded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtTargetState.setStatus('mandatory')
dtRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtRetryCount.setStatus('mandatory')
dtOpsDroppedCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtOpsDroppedCount.setStatus('mandatory')
dtLoginCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtLoginCount.setStatus('mandatory')
dtFailedLoginCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtFailedLoginCount.setStatus('mandatory')
dtFailedMirrorCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtFailedMirrorCount.setStatus('mandatory')
dtFailedRepCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtFailedRepCount.setStatus('mandatory')
dtActFailCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtActFailCount.setStatus('mandatory')
dtAutoDisCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtAutoDisCount.setStatus('mandatory')
dtAutoReCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtAutoReCount.setStatus('mandatory')
dtDriverQueuePercent = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtDriverQueuePercent.setStatus('mandatory')
dtConnectionCount = MibScalar((1, 3, 6, 1, 4, 1, 2592, 3, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtConnectionCount.setStatus('mandatory')
dtConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2), )
if mibBuilder.loadTexts: dtConnectionTable.setStatus('mandatory')
dtConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1), ).setIndexNames((0, "DTMIB", "dtConnectionIndex"))
if mibBuilder.loadTexts: dtConnectionEntry.setStatus('mandatory')
dtConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dtConnectionIndex.setStatus('mandatory')
dtconIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconIpAddress.setStatus('mandatory')
dtconConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconConnectTime.setStatus('mandatory')
dtconState = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("conError", 0), ("conActive", 1), ("conPaused", 2), ("conScheduled", 3), ("conNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconState.setStatus('mandatory')
dtconOpsInCmdQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconOpsInCmdQueue.setStatus('mandatory')
dtconOpsInAckQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconOpsInAckQueue.setStatus('mandatory')
dtconOpsInRepQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconOpsInRepQueue.setStatus('mandatory')
dtconOpsInMirQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconOpsInMirQueue.setStatus('mandatory')
dtconBytesInRepQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconBytesInRepQueue.setStatus('mandatory')
dtconBytesInMirQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconBytesInMirQueue.setStatus('mandatory')
dtconOpsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconOpsTx.setStatus('mandatory')
dtconBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconBytesTx.setStatus('mandatory')
dtconOpsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconOpsRx.setStatus('mandatory')
dtconBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconBytesRx.setStatus('mandatory')
dtconResentOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2592, 3, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtconResentOpCount.setStatus('mandatory')
dttrapKernelStarted = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,1))
dttrapKernelStopped = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,2))
dttrapLicenseViolationStartingSource = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,3))
dttrapLicenseViolationOnNetwork = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,4))
dttrapSourceStarted = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,5))
dttrapSourceStopped = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,6))
dttrapTargetStarted = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,7))
dttrapTargetStopped = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,8))
dttrapConnectionRequested = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,9))
dttrapConnectionRequestReceived = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,10))
dttrapConnectionSucceded = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,11))
dttrapConnectionPause = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,12))
dttrapConnectionResume = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,13))
dttrapConnectionFailed = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,14))
dttrapConnectionLost = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,15))
dttrapMemoryLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,16))
dttrapMemoryLimitRemedied = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,17))
dttrapAutoReconnect = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,18))
dttrapScheduledConnectStart = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,19))
dttrapScheduledConnectEnd = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,20))
dttrapAutoDisconnectWriteQueue = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,21))
dttrapAutoDisconnectPauseTransmission = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,22))
dttrapAutoDisconnectEndConnection = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,23))
dttrapAutoDisconnectShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,24))
dttrapReplicationStart = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,25))
dttrapReplicationStop = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,26))
dttrapMirrorStart = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,27))
dttrapMirrorStop = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,28))
dttrapMirrorPause = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,29))
dttrapMirrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,30))
dttrapMirrorEnd = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,31))
dttrapVerificationStart = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,32))
dttrapVerificationEnd = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,33))
dttrapVerficationFailure = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,34))
dttrapRestoreStarted = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,35))
dttrapRestoreComplete = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,36))
dttrapRepSetModified = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,37))
dttrapFailoverConditionMet = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,38))
dttrapFailoverInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,39))
dttrapTargetFull = NotificationType((1, 3, 6, 1, 4, 1, 2592) + (0,40))
mibBuilder.exportSymbols("DTMIB", dttrapMemoryLimitRemedied=dttrapMemoryLimitRemedied, dttrapConnectionPause=dttrapConnectionPause, dttrapConnectionFailed=dttrapConnectionFailed, dtRetryCount=dtRetryCount, dttrapReplicationStart=dttrapReplicationStart, dtActFailCount=dtActFailCount, dttrapScheduledConnectStart=dttrapScheduledConnectStart, dtRepOpsGenerated=dtRepOpsGenerated, dttrapRepSetModified=dttrapRepSetModified, dttrapAutoReconnect=dttrapAutoReconnect, nsi=nsi, dtFailedRepCount=dtFailedRepCount, dttrapConnectionRequested=dttrapConnectionRequested, dtconOpsInAckQueue=dtconOpsInAckQueue, dttrapMemoryLimitReached=dttrapMemoryLimitReached, dtSource=dtSource, dtTarget=dtTarget, dttrapAutoDisconnectEndConnection=dttrapAutoDisconnectEndConnection, dttrapRestoreComplete=dttrapRestoreComplete, nsiDoubleTake=nsiDoubleTake, dtconOpsTx=dtconOpsTx, dtconIpAddress=dtconIpAddress, dtConnectionEntry=dtConnectionEntry, dtMirOpsGenerated=dtMirOpsGenerated, dttrapAutoDisconnectPauseTransmission=dttrapAutoDisconnectPauseTransmission, dtMirBytesGenerated=dtMirBytesGenerated, dttrapTargetFull=dttrapTargetFull, dtCurrentMemoryUsage=dtCurrentMemoryUsage, dttrapAutoDisconnectShutdown=dttrapAutoDisconnectShutdown, dttrapTargetStopped=dttrapTargetStopped, dttrapKernelStarted=dttrapKernelStarted, dttrapVerificationEnd=dttrapVerificationEnd, dttrapConnectionResume=dttrapConnectionResume, dtconOpsInRepQueue=dtconOpsInRepQueue, dtconBytesInRepQueue=dtconBytesInRepQueue, dtAutoReCount=dtAutoReCount, dtOpsDroppedCount=dtOpsDroppedCount, dttrapFailoverConditionMet=dttrapFailoverConditionMet, dttrapConnectionRequestReceived=dttrapConnectionRequestReceived, dttrapTargetStarted=dttrapTargetStarted, dtConnectionIndex=dtConnectionIndex, dttrapLicenseViolationOnNetwork=dttrapLicenseViolationOnNetwork, dtconState=dtconState, dttrapSourceStarted=dttrapSourceStarted, dtconBytesRx=dtconBytesRx, dttrapScheduledConnectEnd=dttrapScheduledConnectEnd, dttrapVerficationFailure=dttrapVerficationFailure, dtFailedMirrorCount=dtFailedMirrorCount, dttrapSourceStopped=dttrapSourceStopped, dtUpTime=dtUpTime, dtDriverQueuePercent=dtDriverQueuePercent, dttrapReplicationStop=dttrapReplicationStop, dtConnection=dtConnection, dtRepBytesGenerated=dtRepBytesGenerated, dtconOpsInMirQueue=dtconOpsInMirQueue, dtConnectionTable=dtConnectionTable, dtConnectionCount=dtConnectionCount, dttrapMirrorResume=dttrapMirrorResume, dttrapFailoverInProgress=dttrapFailoverInProgress, dttrapConnectionLost=dttrapConnectionLost, dttrapMirrorPause=dttrapMirrorPause, dtconBytesTx=dtconBytesTx, dtconOpsInCmdQueue=dtconOpsInCmdQueue, dttrapLicenseViolationStartingSource=dttrapLicenseViolationStartingSource, dtAutoDisCount=dtAutoDisCount, dtGeneral=dtGeneral, dtconOpsRx=dtconOpsRx, dttrapMirrorStop=dttrapMirrorStop, dttrapMirrorEnd=dttrapMirrorEnd, dtFailedLoginCount=dtFailedLoginCount, dttrapMirrorStart=dttrapMirrorStart, dttrapKernelStopped=dttrapKernelStopped, dttrapConnectionSucceded=dttrapConnectionSucceded, dtSourceState=dtSourceState, dttrapRestoreStarted=dttrapRestoreStarted, dttrapAutoDisconnectWriteQueue=dttrapAutoDisconnectWriteQueue, dtconResentOpCount=dtconResentOpCount, dtconConnectTime=dtconConnectTime, dtTraps=dtTraps, dtSecurity=dtSecurity, dtconBytesInMirQueue=dtconBytesInMirQueue, dtTargetState=dtTargetState, dtLoginCount=dtLoginCount, dttrapVerificationStart=dttrapVerificationStart)
