#
# PySNMP MIB module EFDATA-SPECTRACAST-DR5000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EFDATA-SPECTRACAST-DR5000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, Unsigned32, Bits, TimeTicks, Gauge32, ObjectIdentity, MibIdentifier, iso, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "Unsigned32", "Bits", "TimeTicks", "Gauge32", "ObjectIdentity", "MibIdentifier", "iso", "IpAddress", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
efdata = MibIdentifier((1, 3, 6, 1, 4, 1, 6247))
spectracast = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3))
dr5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 1))
class MPEG_PID_mode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("manual", 1), ("automatic", 2))

class FLAG(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('mandatory')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('mandatory')
multicastRoutingStatus = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastRoutingStatus.setStatus('mandatory')
rfparameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 2))
rf_Input = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 2, 1), DisplayString()).setLabel("rf-Input").setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf_Input.setStatus('mandatory')
lnb_Frequency = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 2, 2), DisplayString()).setLabel("lnb-Frequency").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnb_Frequency.setStatus('mandatory')
symbolRate = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: symbolRate.setStatus('mandatory')
polarity = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 14, 18))).clone(namedValues=NamedValues(("disabled", 0), ("vertical", 14), ("horizontal", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polarity.setStatus('mandatory')
frequencyRange = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frequencyRange.setStatus('mandatory')
dvbparameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 3))
pids_number = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 3, 1), Integer32()).setLabel("pids-number").setMaxAccess("readonly")
if mibBuilder.loadTexts: pids_number.setStatus('mandatory')
pidTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 2, 3, 2), )
if mibBuilder.loadTexts: pidTable.setStatus('mandatory')
pidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 2, 3, 2, 1), ).setIndexNames((0, "EFDATA-SPECTRACAST-DR5000-MIB", "pidindex"))
if mibBuilder.loadTexts: pidEntry.setStatus('mandatory')
pidindex = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidindex.setStatus('mandatory')
pidvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pidvalue.setStatus('mandatory')
ccuparameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 4))
ccuConnectionMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("manual", 0), ("duplex", 1), ("simplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccuConnectionMode.setStatus('mandatory')
ccuIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccuIpAddress.setStatus('mandatory')
ccuUserName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 4, 3), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ccuUserName.setStatus('mandatory')
ccuPassword = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 4, 4), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ccuPassword.setStatus('mandatory')
encryptedMulticast = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptedMulticast.setStatus('mandatory')
dialupparameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5))
connectionMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionMode.setStatus('mandatory')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNumber.setStatus('mandatory')
userName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 3), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: userName.setStatus('mandatory')
password = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 4), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: password.setStatus('mandatory')
dialTone = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tone", 0), ("pulse", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialTone.setStatus('mandatory')
speed = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speed.setStatus('mandatory')
idleTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleTimeOut.setStatus('mandatory')
authentication = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authentication.setStatus('mandatory')
status = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6))
initializationStatus = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initializationStatus.setStatus('mandatory')
demodulatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demodulatorStatus.setStatus('mandatory')
spectralInversion = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectralInversion.setStatus('mandatory')
ber_before_Err_Correction = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 4), DisplayString()).setLabel("ber-before-Err-Correction").setMaxAccess("readonly")
if mibBuilder.loadTexts: ber_before_Err_Correction.setStatus('mandatory')
fec = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fec.setStatus('mandatory')
agc = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agc.setStatus('mandatory')
frequencyOffset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyOffset.setStatus('mandatory')
eb_N0 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 8), DisplayString()).setLabel("eb-N0").setMaxAccess("readonly")
if mibBuilder.loadTexts: eb_N0.setStatus('mandatory')
ccu_connection_status = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1), ("tryingtoconnect", 2), ("waitingfordialup", 3), ("waitingforrflock", 4)))).setLabel("ccu-connection-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: ccu_connection_status.setStatus('mandatory')
dialup_connection_status = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1), ("tryingtoconnect", 2), ("idle", 10)))).setLabel("dialup-connection-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: dialup_connection_status.setStatus('mandatory')
flowStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7))
totalThroughput = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalThroughput.setStatus('mandatory')
unicastThroughput = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastThroughput.setStatus('mandatory')
multicastThroughput = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastThroughput.setStatus('mandatory')
totalPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPackets.setStatus('mandatory')
badPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: badPackets.setStatus('mandatory')
correctedPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: correctedPackets.setStatus('mandatory')
resetFlowStatistics = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetFlowStatistics.setStatus('mandatory')
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 8))
driverRestart = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: driverRestart.setStatus('mandatory')
dialupConnect = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialupConnect.setStatus('mandatory')
dialupDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialupDisconnect.setStatus('mandatory')
ccuconnect = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccuconnect.setStatus('mandatory')
ccudisconnect = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccudisconnect.setStatus('mandatory')
upgrade = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 8, 6), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: upgrade.setStatus('mandatory')
snmpVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9))
enableTraps = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTraps.setStatus('mandatory')
snmpManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerIP.setStatus('mandatory')
trapPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPeriod.setStatus('mandatory')
trapList = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4))
multicastDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 1))
multicastTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastTrapEnable.setStatus('mandatory')
demodulator = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 2))
demodulatorTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: demodulatorTrapEnable.setStatus('mandatory')
ccuConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 3))
ccuTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccuTrapEnable.setStatus('mandatory')
dialup = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 4))
dialupTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialupTrapEnable.setStatus('mandatory')
berLevel = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 5))
berTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berTrapEnable.setStatus('mandatory')
berThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berThreshold.setStatus('mandatory')
freqOffset = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 6))
freqOffsetTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: freqOffsetTrapEnable.setStatus('mandatory')
freqOffsetThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 6, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: freqOffsetThreshold.setStatus('mandatory')
agcLevel = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 7))
agcTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agcTrapEnable.setStatus('mandatory')
agcThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 2, 9, 4, 7, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agcThreshold.setStatus('mandatory')
mibBuilder.exportSymbols("EFDATA-SPECTRACAST-DR5000-MIB", pids_number=pids_number, MPEG_PID_mode=MPEG_PID_mode, multicastDaemon=multicastDaemon, dr5000=dr5000, macAddress=macAddress, multicastTrapEnable=multicastTrapEnable, spectracast=spectracast, snmpManagerIP=snmpManagerIP, symbolRate=symbolRate, dialup_connection_status=dialup_connection_status, dialupTrapEnable=dialupTrapEnable, badPackets=badPackets, agcLevel=agcLevel, totalThroughput=totalThroughput, polarity=polarity, ber_before_Err_Correction=ber_before_Err_Correction, totalPackets=totalPackets, dialup=dialup, driverRestart=driverRestart, maintenance=maintenance, fec=fec, pidvalue=pidvalue, frequencyOffset=frequencyOffset, ccuUserName=ccuUserName, resetFlowStatistics=resetFlowStatistics, dialTone=dialTone, freqOffset=freqOffset, freqOffsetTrapEnable=freqOffsetTrapEnable, phoneNumber=phoneNumber, status=status, agc=agc, ccudisconnect=ccudisconnect, pidEntry=pidEntry, ccuTrapEnable=ccuTrapEnable, ccuIpAddress=ccuIpAddress, general=general, lnb_Frequency=lnb_Frequency, efdata=efdata, multicastThroughput=multicastThroughput, eb_N0=eb_N0, initializationStatus=initializationStatus, agcTrapEnable=agcTrapEnable, idleTimeOut=idleTimeOut, connectionMode=connectionMode, spectralInversion=spectralInversion, demodulator=demodulator, agcThreshold=agcThreshold, dialupConnect=dialupConnect, berThreshold=berThreshold, rfparameters=rfparameters, hardwareVersion=hardwareVersion, demodulatorTrapEnable=demodulatorTrapEnable, demodulatorStatus=demodulatorStatus, ccuConnection=ccuConnection, ccu_connection_status=ccu_connection_status, ccuparameters=ccuparameters, dialupDisconnect=dialupDisconnect, enableTraps=enableTraps, berLevel=berLevel, snmpVariables=snmpVariables, dialupparameters=dialupparameters, pidindex=pidindex, ccuPassword=ccuPassword, dvbparameters=dvbparameters, upgrade=upgrade, userName=userName, unicastThroughput=unicastThroughput, speed=speed, pidTable=pidTable, frequencyRange=frequencyRange, flowStatistics=flowStatistics, ccuconnect=ccuconnect, trapPeriod=trapPeriod, freqOffsetThreshold=freqOffsetThreshold, authentication=authentication, encryptedMulticast=encryptedMulticast, FLAG=FLAG, trapList=trapList, password=password, rf_Input=rf_Input, berTrapEnable=berTrapEnable, softwareVersion=softwareVersion, multicastRoutingStatus=multicastRoutingStatus, correctedPackets=correctedPackets, ccuConnectionMode=ccuConnectionMode)
