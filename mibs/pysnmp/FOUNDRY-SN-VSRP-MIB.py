#
# PySNMP MIB module FOUNDRY-SN-VSRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-VSRP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:02:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
snSwitch, = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter64, MibIdentifier, ObjectIdentity, Gauge32, Integer32, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter64", "MibIdentifier", "ObjectIdentity", "Gauge32", "Integer32", "Counter32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snVsrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21))
snVsrp.setRevisions(('2010-06-02 00:00', '2009-09-30 00:00',))
if mibBuilder.loadTexts: snVsrp.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: snVsrp.setOrganization('Brocade Communications Systems, Inc.')
class MacAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

snVsrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1))
snVsrpIfIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2))
snVsrpVirRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3))
snVsrpGroupOperModeVsrp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpGroupOperModeVsrp.setStatus('current')
snVsrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfStateChangeTrap.setStatus('current')
snVsrpIfMaxNumVridPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerIntf.setStatus('current')
snVsrpIfMaxNumVridPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerSystem.setStatus('current')
snVsrpClearVrrpStat = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpClearVrrpStat.setStatus('current')
snVsrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1), )
if mibBuilder.loadTexts: snVsrpIfTable.setStatus('current')
snVsrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-VSRP-MIB", "snVsrpIfVlanId"))
if mibBuilder.loadTexts: snVsrpIfEntry.setStatus('current')
snVsrpIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfVlanId.setStatus('current')
snVsrpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfAuthType.setStatus('current')
snVsrpIfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfAuthPassword.setStatus('current')
snVsrpVirRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1), )
if mibBuilder.loadTexts: snVsrpVirRtrTable.setStatus('current')
snVsrpVirRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-VSRP-MIB", "snVsrpVirRtrVlanId"), (0, "FOUNDRY-SN-VSRP-MIB", "snVsrpVirRtrId"))
if mibBuilder.loadTexts: snVsrpVirRtrEntry.setStatus('current')
snVsrpVirRtrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrVlanId.setStatus('current')
snVsrpVirRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrId.setStatus('current')
snVsrpVirRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrOwnership.setStatus('current')
snVsrpVirRtrCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrCfgPriority.setStatus('current')
snVsrpVirRtrTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrTrackPriority.setStatus('current')
snVsrpVirRtrCurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurrPriority.setStatus('current')
snVsrpVirRtrHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrHelloInt.setStatus('current')
snVsrpVirRtrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrDeadInt.setStatus('current')
snVsrpVirRtrPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrPreemptMode.setStatus('current')
snVsrpVirRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrState.setStatus('current')
snVsrpVirRtrIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrIpAddrMask.setStatus('current')
snVsrpVirRtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrActivate.setStatus('current')
snVsrpVirRtrTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrTrackPortList.setStatus('current')
snVsrpVirRtrAdvertiseBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrAdvertiseBackup.setStatus('current')
snVsrpVirRtrHoldDownInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrHoldDownInt.setStatus('current')
snVsrpVirRtrInitTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrInitTtl.setStatus('current')
snVsrpVirRtrIncPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrIncPortList.setStatus('current')
snVsrpVirRtrSave = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrSave.setStatus('current')
snVsrpVirRtrBackupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrBackupInt.setStatus('current')
snVsrpVirRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrRowStatus.setStatus('current')
snVsrpVirRtrRxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxArpPktDropCnts.setStatus('current')
snVsrpVirRtrRxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxIpPktDropCnts.setStatus('current')
snVsrpVirRtrRxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxPortMismatchCnts.setStatus('current')
snVsrpVirRtrRxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxNumOfIpMismatchCnts.setStatus('current')
snVsrpVirRtrRxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxIpMismatchCnts.setStatus('current')
snVsrpVirRtrRxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxHelloIntMismatchCnts.setStatus('current')
snVsrpVirRtrRxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxPriorityZeroFromMasterCnts.setStatus('current')
snVsrpVirRtrRxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxHigherPriorityCnts.setStatus('current')
snVsrpVirRtrTransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrTransToMasterStateCnts.setStatus('current')
snVsrpVirRtrTransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrTransToBackupStateCnts.setStatus('current')
snVsrpVirRtrCurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurrDeadInt.setStatus('current')
snVsrpVirRtrCurHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurHelloInt.setStatus('current')
snVsrpVirRtrCurHoldDownInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurHoldDownInt.setStatus('current')
snVsrpVirRtrCurInitTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurInitTtl.setStatus('current')
snVsrpVirRtrHelloMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 35), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrHelloMacAddress.setStatus('current')
snVsrpVirRtrMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrMasterIpAddr.setStatus('current')
mibBuilder.exportSymbols("FOUNDRY-SN-VSRP-MIB", snVsrpVirRtrActivate=snVsrpVirRtrActivate, snVsrpVirRtrSave=snVsrpVirRtrSave, snVsrpIfStateChangeTrap=snVsrpIfStateChangeTrap, snVsrpVirRtrRxArpPktDropCnts=snVsrpVirRtrRxArpPktDropCnts, snVsrpVirRtrCurrDeadInt=snVsrpVirRtrCurrDeadInt, snVsrpVirRtr=snVsrpVirRtr, snVsrpVirRtrCurrPriority=snVsrpVirRtrCurrPriority, snVsrpVirRtrPreemptMode=snVsrpVirRtrPreemptMode, snVsrpVirRtrHoldDownInt=snVsrpVirRtrHoldDownInt, snVsrpVirRtrInitTtl=snVsrpVirRtrInitTtl, snVsrpVirRtrCurHoldDownInt=snVsrpVirRtrCurHoldDownInt, snVsrpVirRtrRxIpPktDropCnts=snVsrpVirRtrRxIpPktDropCnts, snVsrpIfVlanId=snVsrpIfVlanId, snVsrpVirRtrDeadInt=snVsrpVirRtrDeadInt, snVsrpVirRtrEntry=snVsrpVirRtrEntry, snVsrpVirRtrHelloMacAddress=snVsrpVirRtrHelloMacAddress, snVsrpVirRtrMasterIpAddr=snVsrpVirRtrMasterIpAddr, snVsrpVirRtrCfgPriority=snVsrpVirRtrCfgPriority, snVsrpVirRtrIpAddrMask=snVsrpVirRtrIpAddrMask, snVsrpVirRtrIncPortList=snVsrpVirRtrIncPortList, MacAddress=MacAddress, snVsrpIfTable=snVsrpIfTable, snVsrpVirRtrRxHelloIntMismatchCnts=snVsrpVirRtrRxHelloIntMismatchCnts, snVsrpIfEntry=snVsrpIfEntry, PYSNMP_MODULE_ID=snVsrp, snVsrpVirRtrCurInitTtl=snVsrpVirRtrCurInitTtl, snVsrpGlobal=snVsrpGlobal, snVsrpGroupOperModeVsrp=snVsrpGroupOperModeVsrp, snVsrpVirRtrBackupInt=snVsrpVirRtrBackupInt, snVsrpVirRtrOwnership=snVsrpVirRtrOwnership, snVsrpVirRtrHelloInt=snVsrpVirRtrHelloInt, snVsrpIfIntf=snVsrpIfIntf, snVsrpVirRtrVlanId=snVsrpVirRtrVlanId, snVsrpVirRtrRxIpMismatchCnts=snVsrpVirRtrRxIpMismatchCnts, snVsrpVirRtrTransToMasterStateCnts=snVsrpVirRtrTransToMasterStateCnts, snVsrpVirRtrRowStatus=snVsrpVirRtrRowStatus, snVsrpIfAuthPassword=snVsrpIfAuthPassword, snVsrpVirRtrState=snVsrpVirRtrState, snVsrpIfMaxNumVridPerIntf=snVsrpIfMaxNumVridPerIntf, snVsrpClearVrrpStat=snVsrpClearVrrpStat, snVsrpIfAuthType=snVsrpIfAuthType, snVsrpVirRtrRxPortMismatchCnts=snVsrpVirRtrRxPortMismatchCnts, snVsrpVirRtrRxPriorityZeroFromMasterCnts=snVsrpVirRtrRxPriorityZeroFromMasterCnts, snVsrpVirRtrAdvertiseBackup=snVsrpVirRtrAdvertiseBackup, snVsrpVirRtrRxHigherPriorityCnts=snVsrpVirRtrRxHigherPriorityCnts, snVsrpVirRtrRxNumOfIpMismatchCnts=snVsrpVirRtrRxNumOfIpMismatchCnts, snVsrpVirRtrId=snVsrpVirRtrId, snVsrp=snVsrp, snVsrpVirRtrTrackPriority=snVsrpVirRtrTrackPriority, snVsrpVirRtrTable=snVsrpVirRtrTable, snVsrpVirRtrTransToBackupStateCnts=snVsrpVirRtrTransToBackupStateCnts, snVsrpIfMaxNumVridPerSystem=snVsrpIfMaxNumVridPerSystem, snVsrpVirRtrCurHelloInt=snVsrpVirRtrCurHelloInt, snVsrpVirRtrTrackPortList=snVsrpVirRtrTrackPortList)
