#
# PySNMP MIB module NMC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:11:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, Bits, iso, TimeTicks, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, enterprises, experimental = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Bits", "iso", "TimeTicks", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "enterprises", "experimental")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
nmc = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2))
nmcCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 1))
nmcCfgSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgSystemTime.setStatus('mandatory')
nmcCfgSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgSystemDate.setStatus('mandatory')
nmcGmtime = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcGmtime.setStatus('mandatory')
nmcTimezone = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("easternUSA-gmtMinus5", 1), ("centralUSA-gmtMinus6", 2), ("mountainUSA-gmtMinus7", 3), ("pacificUSA-gmtMinus8", 4), ("gmtMinus9", 5), ("gmtMinus10", 6), ("gmtMinus11", 7), ("gmtMinus12", 8), ("gmtPlus12", 9), ("gmtPlus11", 10), ("gmtPlus10", 11), ("gmtPlus9", 12), ("gmtPlus8", 13), ("gmtPlus7", 14), ("gmtPlus6", 15), ("gmtPlus5", 16), ("gmtPlus4", 17), ("gmtPlus3", 18), ("gmtPlus2", 19), ("gmtPlus1", 20), ("gmt", 21), ("gmtMinus1", 22), ("gmtMinus2", 23), ("gmtMinus3", 24), ("gmtMinus4", 25), ("newfoundland-gmtMinus3-30", 26), ("tehran-gmtPlus3-30", 27), ("kabul-gmtPlus4-30", 28), ("bombay-gmtPlus5-30", 29), ("adelaide-gmtPlus9-30", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTimezone.setStatus('mandatory')
nmcCfgAuthFailTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgAuthFailTrapEnable.setStatus('mandatory')
nmcDaySavingTime = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcDaySavingTime.setStatus('mandatory')
nmcCfgWanDialOutPhoneNum = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgWanDialOutPhoneNum.setStatus('mandatory')
nmcCfgAtString = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgAtString.setStatus('mandatory')
nmcPowerUpAutoCfgEnable = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcPowerUpAutoCfgEnable.setStatus('mandatory')
nmcCfgNumWanRetries = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgNumWanRetries.setStatus('mandatory')
nmcCfgWanRetryPause = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgWanRetryPause.setStatus('mandatory')
nmcCfgWanRetrySuspendTime = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgWanRetrySuspendTime.setStatus('mandatory')
nmcCfgNumFailBefSuspend = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgNumFailBefSuspend.setStatus('mandatory')
nmcCfgLogSrvrSelect = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("none", 3), ("third", 4), ("fourth", 5), ("fifth", 6), ("sixth", 7), ("seventh", 8), ("eighth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcCfgLogSrvrSelect.setStatus('mandatory')
nmcCfgLogPriSrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogPriSrvrAddr.setStatus('mandatory')
nmcCfgLogSecSrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogSecSrvrAddr.setStatus('mandatory')
nmcCfgLogUdpPortNum = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogUdpPortNum.setStatus('mandatory')
nmcCfgLogRetryCnt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogRetryCnt.setStatus('mandatory')
nmcCfgLogCallStatGrpSel = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 1), ("group2", 2), ("group3", 3), ("group4", 4), ("group23", 5), ("group24", 6), ("group34", 7), ("group234", 8), ("group5", 9), ("group25", 10), ("group35", 11), ("group45", 12), ("group235", 13), ("group245", 14), ("group345", 15), ("group2345", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogCallStatGrpSel.setStatus('mandatory')
nmcCfgLogMD5Calc = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogMD5Calc.setStatus('optional')
nmcCfgTFTPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgTFTPTimeout.setStatus('mandatory')
nmcCfgDnsPriSrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgDnsPriSrvrAddr.setStatus('mandatory')
nmcCfgDnsSecSrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgDnsSecSrvrAddr.setStatus('mandatory')
nmcCfgLog3SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLog3SrvrAddr.setStatus('mandatory')
nmcCfgLog4SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLog4SrvrAddr.setStatus('mandatory')
nmcCfgLog5SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLog5SrvrAddr.setStatus('mandatory')
nmcCfgLog6SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLog6SrvrAddr.setStatus('mandatory')
nmcCfgLog7SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLog7SrvrAddr.setStatus('mandatory')
nmcCfgLog8SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLog8SrvrAddr.setStatus('mandatory')
nmcCfgLogSrvrName = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogSrvrName.setStatus('mandatory')
nmcCfgDnsRetryCnt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgDnsRetryCnt.setStatus('mandatory')
nmcCfgDnsUdpPortNum = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgDnsUdpPortNum.setStatus('mandatory')
nmcCfgDnsSrvrSelect = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcCfgDnsSrvrSelect.setStatus('mandatory')
nmcCfgLogDnsEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogDnsEna.setStatus('mandatory')
nmcCfgLogStatusInterval = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgLogStatusInterval.setStatus('mandatory')
nmcCfgDnsSrvrFailure = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("commFailure", 3), ("invalidEntry", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcCfgDnsSrvrFailure.setStatus('mandatory')
nmcCfgLogSrvrFailure = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("commFailure", 3), ("invalidResponse", 4), ("disabledServer", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcCfgLogSrvrFailure.setStatus('mandatory')
nmcCfgSessionIDNewFmt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCfgSessionIDNewFmt.setStatus('optional')
nmcStat = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 2))
nmcStatStatus = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("nonCriticalFailure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatStatus.setStatus('mandatory')
nmcStatDramInstalled = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatDramInstalled.setStatus('mandatory')
nmcStatNVRAMInstalled = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatNVRAMInstalled.setStatus('mandatory')
nmcStatEventId = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatEventId.setStatus('mandatory')
nmcStatTemperature = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatTemperature.setStatus('optional')
nmcStatPowerUpTstFailures = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatPowerUpTstFailures.setStatus('mandatory')
nmcStatPowerUpTstFailBMap = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatPowerUpTstFailBMap.setStatus('mandatory')
nmcStatTestResult = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatTestResult.setStatus('mandatory')
nmcStatCompSwVer = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatCompSwVer.setStatus('mandatory')
nmcStatPktBusClkSrc = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("backplaneActive", 2), ("backplaneActive1ClkFail", 3), ("nmcActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatPktBusClkSrc.setStatus('optional')
nmcStatNmcPktBusClk = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("available", 2), ("active", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatNmcPktBusClk.setStatus('optional')
nmcStatRedLed = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("chassisTemperatureHigh", 2), ("chassisFanFailure", 3), ("voltageWarningforPSU", 4), ("failureofPSU", 5), ("managementBusFailure", 6), ("interfaceCardFailure", 7), ("incompatibleTokenRingNIC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcStatRedLed.setStatus('optional')
nmcAuxIn1Sts = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portOpen", 1), ("portClosed", 2), ("portNotApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcAuxIn1Sts.setStatus('mandatory')
nmcAuxIn2Sts = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portOpen", 1), ("portClosed", 2), ("portNotApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcAuxIn2Sts.setStatus('mandatory')
nmcAuxOut1Sts = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portOpen", 1), ("portClosed", 2), ("portNotApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcAuxOut1Sts.setStatus('mandatory')
nmcAuxOut2Sts = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portOpen", 1), ("portClosed", 2), ("portNotApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcAuxOut2Sts.setStatus('mandatory')
nmcTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 3))
nmcTrapSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcTrapSequenceNumber.setStatus('mandatory')
nmcTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 2, 3, 2), )
if mibBuilder.loadTexts: nmcTrapDestTable.setStatus('mandatory')
nmcTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 2, 3, 2, 1), ).setIndexNames((0, "NMC-MIB", "nmcTrapDestIP"))
if mibBuilder.loadTexts: nmcTrapDestEntry.setStatus('mandatory')
nmcTrapDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 2, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcTrapDestIP.setStatus('mandatory')
nmcTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 2, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTrapDestCommunity.setStatus('mandatory')
nmcTrapDestDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTrapDestDescr.setStatus('mandatory')
nmcArTrapId = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcArTrapId.setStatus('optional')
nmcCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 4))
nmcCmdMgtStationId = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCmdMgtStationId.setStatus('mandatory')
nmcCmdReqId = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCmdReqId.setStatus('mandatory')
nmcCmdFunction = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noCommand", 1), ("saveToNvram", 2), ("restoreFromDefaults", 3), ("restoreFromNvram", 4), ("nonDisruptSelfTest", 5), ("softwareReset", 6), ("saveUiParmsToEEPROM", 7), ("restoreNmcFromDefaults", 8), ("restoreNmcFromNvram", 9), ("bulkFileUpload", 10), ("bulkFileDownload", 11), ("openAuxOutputPort1", 12), ("openAuxOutputPort2", 13), ("closeAuxOutputPort1", 14), ("closeAuxOutputPort2", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCmdFunction.setStatus('mandatory')
nmcCmdForce = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noForce", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCmdForce.setStatus('mandatory')
nmcCmdParam = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcCmdParam.setStatus('mandatory')
nmcCmdResult = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcCmdResult.setStatus('mandatory')
nmcCmdCode = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 8, 20, 25, 27, 63, 72, 73, 81, 86, 88, 93, 115))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedData", 5), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("unsupportedCommand", 20), ("testFailed", 25), ("nvramAccessConflict", 27), ("erasingFlashError", 63), ("badCRC", 72), ("pendingSoftwareDownload", 73), ("erasingFlash", 81), ("fileTransferTimedOut", 86), ("unrecognizedFile", 88), ("fileTransferInProgress", 93), ("pendingFileTransfer", 115)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcCmdCode.setStatus('mandatory')
nmcHs = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 6))
nmcHsDialInOutNamePrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialInOutNamePrompt.setStatus('optional')
nmcHsDialInOutPsswdPrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialInOutPsswdPrompt.setStatus('optional')
nmcHsDialBackNamePrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialBackNamePrompt.setStatus('optional')
nmcHsDialBackPsswdPrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialBackPsswdPrompt.setStatus('optional')
nmcHsDialBackPhonePrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialBackPhonePrompt.setStatus('optional')
nmcHsDialBackPendPrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialBackPendPrompt.setStatus('optional')
nmcHsMdmSelectPrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsMdmSelectPrompt.setStatus('optional')
nmcHsLoginFailedMsg = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsLoginFailedMsg.setStatus('optional')
nmcHsPhoneRestrictPrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsPhoneRestrictPrompt.setStatus('optional')
nmcHsInvalidMdmSelecMsg = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsInvalidMdmSelecMsg.setStatus('optional')
nmcHsNoMdnsAvailMsg = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsNoMdnsAvailMsg.setStatus('optional')
nmcHsConnectSuccessMsg = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsConnectSuccessMsg.setStatus('optional')
nmcHsNewPasswordPrompt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsNewPasswordPrompt.setStatus('optional')
nmcHsChangePasswordMsg = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsChangePasswordMsg.setStatus('optional')
nmcHsPromptRspTimeout = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsPromptRspTimeout.setStatus('optional')
nmcHsPromptRspAttempts = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsPromptRspAttempts.setStatus('optional')
nmcHsPromptRspEchoEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsPromptRspEchoEna.setStatus('optional')
nmcHsDialBackDelay = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialBackDelay.setStatus('optional')
nmcHsDialBackAttempts = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDialBackAttempts.setStatus('optional')
nmcHsSecuritySrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecuritySrvrAddr.setStatus('mandatory')
nmcHsSecuritySrvrPort = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecuritySrvrPort.setStatus('mandatory')
nmcHsSecuritySrvrRetries = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecuritySrvrRetries.setStatus('mandatory')
nmcHsMdmAttemptLimit = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsMdmAttemptLimit.setStatus('mandatory')
nmcHsServerUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyCall", 1), ("allowCall", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsServerUnavailable.setStatus('mandatory')
nmcHsServerSelect = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("none", 3), ("third", 4), ("fourth", 5), ("fifth", 6), ("sixth", 7), ("seventh", 8), ("eighth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcHsServerSelect.setStatus('mandatory')
nmcHsSecondarySrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecondarySrvrAddr.setStatus('mandatory')
nmcHsDiPasswdEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsDiPasswdEnaDis.setStatus('optional')
nmcHsSecurity3SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecurity3SrvrAddr.setStatus('mandatory')
nmcHsSecurity4SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecurity4SrvrAddr.setStatus('mandatory')
nmcHsSecurity5SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecurity5SrvrAddr.setStatus('mandatory')
nmcHsSecurity6SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecurity6SrvrAddr.setStatus('mandatory')
nmcHsSecurity7SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecurity7SrvrAddr.setStatus('mandatory')
nmcHsSecurity8SrvrAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecurity8SrvrAddr.setStatus('mandatory')
nmcHsSecuritySrvrName = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecuritySrvrName.setStatus('mandatory')
nmcHsSecuritySrvrDnsEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecuritySrvrDnsEna.setStatus('mandatory')
nmcHsSecurityStatusInt = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcHsSecurityStatusInt.setStatus('mandatory')
nmcHsSecurityFailure = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 6, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("commFailure", 3), ("invalidResponse", 4), ("disabledServer", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcHsSecurityFailure.setStatus('mandatory')
nmcTe = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 7))
nmcTeDialOutLoginFail = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeDialOutLoginFail.setStatus('optional')
nmcTeDialInLoginFail = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeDialInLoginFail.setStatus('optional')
nmcTeDialOutRestrictNum = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeDialOutRestrictNum.setStatus('optional')
nmcTeDialBackRestrictNum = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeDialBackRestrictNum.setStatus('optional')
nmcTeUserBlacklist = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeUserBlacklist.setStatus('optional')
nmcTeUserBlacklistLogin = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeUserBlacklistLogin.setStatus('optional')
nmcTeRespAttmptLimExceed = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeRespAttmptLimExceed.setStatus('optional')
nmcTeLoginAttmptLimExceed = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeLoginAttmptLimExceed.setStatus('optional')
nmcTeLogSrvrLoss = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeLogSrvrLoss.setStatus('mandatory')
nmcTeSecSrvrLoss = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeSecSrvrLoss.setStatus('mandatory')
nmcTeSinglePbClockFail = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeSinglePbClockFail.setStatus('mandatory')
nmcTePbClockSwitch = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTePbClockSwitch.setStatus('mandatory')
nmcTePbClockFail = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTePbClockFail.setStatus('mandatory')
nmcTeDnsSrvrLoss = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeDnsSrvrLoss.setStatus('mandatory')
nmcTeNtpSrvrLoss = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeNtpSrvrLoss.setStatus('mandatory')
nmcTeNtpSrvrRestore = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeNtpSrvrRestore.setStatus('mandatory')
nmcTeNtpSrvrDegraded = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeNtpSrvrDegraded.setStatus('mandatory')
nmcTeDnsSrvrRestore = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeDnsSrvrRestore.setStatus('mandatory')
nmcTeDnsSrvrDegraded = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeDnsSrvrDegraded.setStatus('mandatory')
nmcTeLogSrvrRestore = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeLogSrvrRestore.setStatus('mandatory')
nmcTeLogSrvrGroupOper = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeLogSrvrGroupOper.setStatus('mandatory')
nmcTeLogSrvrGroupDegr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeLogSrvrGroupDegr.setStatus('mandatory')
nmcTeLogSrvrGroupNonOp = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeLogSrvrGroupNonOp.setStatus('mandatory')
nmcTeSecSrvrRestore = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeSecSrvrRestore.setStatus('mandatory')
nmcTeSecSrvrGroupOper = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeSecSrvrGroupOper.setStatus('mandatory')
nmcTeSecSrvrGroupDegr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeSecSrvrGroupDegr.setStatus('mandatory')
nmcTeSecSrvrGroupNonOp = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 7, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcTeSecSrvrGroupNonOp.setStatus('mandatory')
nmcUiCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 8))
nmcUiCfgLanIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgLanIPAddr.setStatus('mandatory')
nmcUiCfgLanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgLanSubnetMask.setStatus('mandatory')
nmcUiCfgWanIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgWanIPAddr.setStatus('mandatory')
nmcUiCfgWanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgWanSubnetMask.setStatus('mandatory')
nmcUiCfgDefaultGwyIP = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgDefaultGwyIP.setStatus('mandatory')
nmcUiCfgLocalTrIeeeAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgLocalTrIeeeAddr.setStatus('mandatory')
nmcUiCfgPrivateString = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nmcUiCfgPrivateString.setStatus('mandatory')
nmcUiCfgLanIfEnable = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgLanIfEnable.setStatus('optional')
nmcUiCfgPublicString = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nmcUiCfgPublicString.setStatus('mandatory')
nmcUiCfgRouteEnable = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgRouteEnable.setStatus('optional')
nmcUiCfgUiSlipCfg = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uiport", 1), ("slipport", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgUiSlipCfg.setStatus('optional')
nmcUiCfgWan2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgWan2IpAddr.setStatus('mandatory')
nmcUiCfgWan2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgWan2SubnetMask.setStatus('mandatory')
nmcUiCfgInactiveTime = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgInactiveTime.setStatus('optional')
nmcUiCfgPassword = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcUiCfgPassword.setStatus('optional')
nmcAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 9))
nmcAuthAccTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 2, 9, 1), )
if mibBuilder.loadTexts: nmcAuthAccTable.setStatus('mandatory')
nmcAuthAccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 2, 9, 1, 1), ).setIndexNames((0, "NMC-MIB", "nmcAuthAccIpAddr"))
if mibBuilder.loadTexts: nmcAuthAccEntry.setStatus('mandatory')
nmcAuthAccIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 2, 9, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcAuthAccIpAddr.setStatus('mandatory')
nmcAuthAccNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 2, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcAuthAccNetMask.setStatus('mandatory')
nmcAuthAccDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 2, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcAuthAccDescr.setStatus('mandatory')
nmcNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 2, 10))
nmcNtpSrvrPrimAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcNtpSrvrPrimAddr.setStatus('mandatory')
nmcNtpSrvrSecdAddr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcNtpSrvrSecdAddr.setStatus('mandatory')
nmcNtpSyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcNtpSyncInterval.setStatus('mandatory')
nmcNtpOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("unicast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmcNtpOperationalMode.setStatus('mandatory')
nmcNtpLastSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcNtpLastSyncTime.setStatus('mandatory')
nmcNtpLastSyncServer = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcNtpLastSyncServer.setStatus('mandatory')
nmcNtpLastFailedTime = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcNtpLastFailedTime.setStatus('mandatory')
nmcNtpLastFailedServer = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmcNtpLastFailedServer.setStatus('mandatory')
mibBuilder.exportSymbols("NMC-MIB", nmcCfgDnsRetryCnt=nmcCfgDnsRetryCnt, nmcAuth=nmcAuth, nmcNtpOperationalMode=nmcNtpOperationalMode, nmcArTrapId=nmcArTrapId, nmcUiCfgPublicString=nmcUiCfgPublicString, nmcTimezone=nmcTimezone, nmcCmdFunction=nmcCmdFunction, nmcCfgWanRetrySuspendTime=nmcCfgWanRetrySuspendTime, nmcTeNtpSrvrRestore=nmcTeNtpSrvrRestore, nmcHsSecurity3SrvrAddr=nmcHsSecurity3SrvrAddr, nmcUiCfgRouteEnable=nmcUiCfgRouteEnable, nmcCfgLog4SrvrAddr=nmcCfgLog4SrvrAddr, nmcTeLogSrvrLoss=nmcTeLogSrvrLoss, nmcHsPhoneRestrictPrompt=nmcHsPhoneRestrictPrompt, nmcUiCfgInactiveTime=nmcUiCfgInactiveTime, nmcStatPowerUpTstFailBMap=nmcStatPowerUpTstFailBMap, nmcNtpSrvrPrimAddr=nmcNtpSrvrPrimAddr, nmcCfgLog6SrvrAddr=nmcCfgLog6SrvrAddr, nmcCfgLogDnsEna=nmcCfgLogDnsEna, nmcNtpSrvrSecdAddr=nmcNtpSrvrSecdAddr, nmcNtpLastFailedTime=nmcNtpLastFailedTime, nmcTeUserBlacklist=nmcTeUserBlacklist, nmcUiCfgLanIPAddr=nmcUiCfgLanIPAddr, nmcAuthAccTable=nmcAuthAccTable, nmcTeLogSrvrGroupDegr=nmcTeLogSrvrGroupDegr, nmcTrapDestEntry=nmcTrapDestEntry, nmcStatNVRAMInstalled=nmcStatNVRAMInstalled, nmcCfgWanRetryPause=nmcCfgWanRetryPause, nmcCfgTFTPTimeout=nmcCfgTFTPTimeout, nmcCfgDnsUdpPortNum=nmcCfgDnsUdpPortNum, nmcTeNtpSrvrDegraded=nmcTeNtpSrvrDegraded, nmcHsLoginFailedMsg=nmcHsLoginFailedMsg, nmcHsPromptRspEchoEna=nmcHsPromptRspEchoEna, usr=usr, nmcHsServerSelect=nmcHsServerSelect, nmcUiCfgUiSlipCfg=nmcUiCfgUiSlipCfg, nmcCfgLogSrvrName=nmcCfgLogSrvrName, nmcHsSecurity8SrvrAddr=nmcHsSecurity8SrvrAddr, nmcTeUserBlacklistLogin=nmcTeUserBlacklistLogin, nmcTrapDestIP=nmcTrapDestIP, nmcHsChangePasswordMsg=nmcHsChangePasswordMsg, nmcUiCfgWanIPAddr=nmcUiCfgWanIPAddr, nmcPowerUpAutoCfgEnable=nmcPowerUpAutoCfgEnable, nmcHsSecurity5SrvrAddr=nmcHsSecurity5SrvrAddr, nmcCfgLogCallStatGrpSel=nmcCfgLogCallStatGrpSel, nmcCfgDnsPriSrvrAddr=nmcCfgDnsPriSrvrAddr, nmcTeSinglePbClockFail=nmcTeSinglePbClockFail, nmcHs=nmcHs, nmcCfgWanDialOutPhoneNum=nmcCfgWanDialOutPhoneNum, nmcTeDnsSrvrDegraded=nmcTeDnsSrvrDegraded, nmcHsSecuritySrvrPort=nmcHsSecuritySrvrPort, nmcHsMdmAttemptLimit=nmcHsMdmAttemptLimit, nmcHsSecondarySrvrAddr=nmcHsSecondarySrvrAddr, nmcCfgLogSrvrFailure=nmcCfgLogSrvrFailure, nmcHsMdmSelectPrompt=nmcHsMdmSelectPrompt, nmcTePbClockSwitch=nmcTePbClockSwitch, nmcTeSecSrvrGroupDegr=nmcTeSecSrvrGroupDegr, nmcCfgLogRetryCnt=nmcCfgLogRetryCnt, nmcCfgAtString=nmcCfgAtString, nmcHsDialBackPendPrompt=nmcHsDialBackPendPrompt, nmcAuxOut2Sts=nmcAuxOut2Sts, nmcUiCfgWanSubnetMask=nmcUiCfgWanSubnetMask, nmcTeDnsSrvrLoss=nmcTeDnsSrvrLoss, nmcUiCfg=nmcUiCfg, nmcCmdMgtStationId=nmcCmdMgtStationId, nmcCmdForce=nmcCmdForce, nmcStatTestResult=nmcStatTestResult, nmcHsSecurity7SrvrAddr=nmcHsSecurity7SrvrAddr, nmcTeSecSrvrRestore=nmcTeSecSrvrRestore, nmcHsSecuritySrvrName=nmcHsSecuritySrvrName, nmcTeDialBackRestrictNum=nmcTeDialBackRestrictNum, nmcTeDialOutLoginFail=nmcTeDialOutLoginFail, nmcAuxOut1Sts=nmcAuxOut1Sts, nmcCfgSessionIDNewFmt=nmcCfgSessionIDNewFmt, nmcTeRespAttmptLimExceed=nmcTeRespAttmptLimExceed, nmcStatDramInstalled=nmcStatDramInstalled, nmcCmd=nmcCmd, nmcNtpLastSyncServer=nmcNtpLastSyncServer, nmcCfgLog5SrvrAddr=nmcCfgLog5SrvrAddr, nmcHsNewPasswordPrompt=nmcHsNewPasswordPrompt, nmcCfgDnsSecSrvrAddr=nmcCfgDnsSecSrvrAddr, nmcTeLogSrvrGroupNonOp=nmcTeLogSrvrGroupNonOp, nmcTeDialOutRestrictNum=nmcTeDialOutRestrictNum, nmcHsSecurity4SrvrAddr=nmcHsSecurity4SrvrAddr, nmcCmdParam=nmcCmdParam, nmcUiCfgWan2SubnetMask=nmcUiCfgWan2SubnetMask, nmcTeLogSrvrGroupOper=nmcTeLogSrvrGroupOper, nmcTrapDestDescr=nmcTrapDestDescr, nmcTeSecSrvrLoss=nmcTeSecSrvrLoss, nmcHsDiPasswdEnaDis=nmcHsDiPasswdEnaDis, nmcStatEventId=nmcStatEventId, nmcUiCfgLanIfEnable=nmcUiCfgLanIfEnable, nmcAuthAccEntry=nmcAuthAccEntry, nmcTeDnsSrvrRestore=nmcTeDnsSrvrRestore, nmcCfgSystemTime=nmcCfgSystemTime, nmcStatPktBusClkSrc=nmcStatPktBusClkSrc, nmcHsDialBackNamePrompt=nmcHsDialBackNamePrompt, nmcTeSecSrvrGroupOper=nmcTeSecSrvrGroupOper, nmcCmdCode=nmcCmdCode, nmcHsDialBackPhonePrompt=nmcHsDialBackPhonePrompt, nmcHsPromptRspAttempts=nmcHsPromptRspAttempts, nmcCfgLog8SrvrAddr=nmcCfgLog8SrvrAddr, nmcHsSecurityStatusInt=nmcHsSecurityStatusInt, nmcTeSecSrvrGroupNonOp=nmcTeSecSrvrGroupNonOp, nmcAuthAccIpAddr=nmcAuthAccIpAddr, nmcHsSecuritySrvrAddr=nmcHsSecuritySrvrAddr, nmcCfgLogStatusInterval=nmcCfgLogStatusInterval, nmcTrapDestCommunity=nmcTrapDestCommunity, nmcTrap=nmcTrap, nmcCfgLog3SrvrAddr=nmcCfgLog3SrvrAddr, nmcCfg=nmcCfg, nmcTeNtpSrvrLoss=nmcTeNtpSrvrLoss, nmcCfgDnsSrvrFailure=nmcCfgDnsSrvrFailure, nmcUiCfgPassword=nmcUiCfgPassword, nmcHsDialInOutPsswdPrompt=nmcHsDialInOutPsswdPrompt, nmcAuxIn1Sts=nmcAuxIn1Sts, nmcTrapDestTable=nmcTrapDestTable, nmcStatPowerUpTstFailures=nmcStatPowerUpTstFailures, nmcDaySavingTime=nmcDaySavingTime, nmcCmdResult=nmcCmdResult, nmcHsSecuritySrvrDnsEna=nmcHsSecuritySrvrDnsEna, nmcTeLoginAttmptLimExceed=nmcTeLoginAttmptLimExceed, nmcNtpLastFailedServer=nmcNtpLastFailedServer, nmcHsDialInOutNamePrompt=nmcHsDialInOutNamePrompt, nmcTeLogSrvrRestore=nmcTeLogSrvrRestore, nmcHsPromptRspTimeout=nmcHsPromptRspTimeout, nmcTe=nmcTe, nmcHsServerUnavailable=nmcHsServerUnavailable, nmcHsDialBackPsswdPrompt=nmcHsDialBackPsswdPrompt, nmcHsConnectSuccessMsg=nmcHsConnectSuccessMsg, nmcTeDialInLoginFail=nmcTeDialInLoginFail, nmcCmdReqId=nmcCmdReqId, nmcCfgDnsSrvrSelect=nmcCfgDnsSrvrSelect, nmcStatNmcPktBusClk=nmcStatNmcPktBusClk, nmcUiCfgWan2IpAddr=nmcUiCfgWan2IpAddr, nmcTrapSequenceNumber=nmcTrapSequenceNumber, nmcAuxIn2Sts=nmcAuxIn2Sts, nmcHsInvalidMdmSelecMsg=nmcHsInvalidMdmSelecMsg, nmcStat=nmcStat, nmcUiCfgPrivateString=nmcUiCfgPrivateString, nmcCfgLogPriSrvrAddr=nmcCfgLogPriSrvrAddr, nmcCfgLogUdpPortNum=nmcCfgLogUdpPortNum, nmcHsDialBackDelay=nmcHsDialBackDelay, nmcNtp=nmcNtp, nmcHsSecurity6SrvrAddr=nmcHsSecurity6SrvrAddr, nmcAuthAccNetMask=nmcAuthAccNetMask, nmcCfgLog7SrvrAddr=nmcCfgLog7SrvrAddr, nmcTePbClockFail=nmcTePbClockFail, nmcCfgNumWanRetries=nmcCfgNumWanRetries, nmcCfgSystemDate=nmcCfgSystemDate, nmcCfgNumFailBefSuspend=nmcCfgNumFailBefSuspend, nmcStatStatus=nmcStatStatus, nmcUiCfgLocalTrIeeeAddr=nmcUiCfgLocalTrIeeeAddr, nmcHsNoMdnsAvailMsg=nmcHsNoMdnsAvailMsg, nmcNtpSyncInterval=nmcNtpSyncInterval, nmcStatTemperature=nmcStatTemperature, nmcCfgAuthFailTrapEnable=nmcCfgAuthFailTrapEnable, nmcHsSecuritySrvrRetries=nmcHsSecuritySrvrRetries, nmcHsSecurityFailure=nmcHsSecurityFailure, nmcUiCfgLanSubnetMask=nmcUiCfgLanSubnetMask, nmcGmtime=nmcGmtime, nmcAuthAccDescr=nmcAuthAccDescr, nmcCfgLogSrvrSelect=nmcCfgLogSrvrSelect, nmcCfgLogSecSrvrAddr=nmcCfgLogSecSrvrAddr, nmc=nmc, nas=nas, nmcStatRedLed=nmcStatRedLed, nmcHsDialBackAttempts=nmcHsDialBackAttempts, nmcCfgLogMD5Calc=nmcCfgLogMD5Calc, nmcStatCompSwVer=nmcStatCompSwVer, nmcNtpLastSyncTime=nmcNtpLastSyncTime, nmcUiCfgDefaultGwyIP=nmcUiCfgDefaultGwyIP)
