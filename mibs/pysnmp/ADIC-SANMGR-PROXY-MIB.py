#
# PySNMP MIB module ADIC-SANMGR-PROXY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADIC-SANMGR-PROXY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AdicAgentStatus, hardware, productAgentInfo, AdicGlobalId, sml, componentId, components, adic, globalData, network, software = mibBuilder.importSymbols("ADIC-INTELLIGENT-STORAGE-MIB", "AdicAgentStatus", "hardware", "productAgentInfo", "AdicGlobalId", "sml", "componentId", "components", "adic", "globalData", "network", "software")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, experimental, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Integer32, IpAddress, enterprises, NotificationType, Counter32, TimeTicks, iso, Counter64, Unsigned32, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "experimental", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Integer32", "IpAddress", "enterprises", "NotificationType", "Counter32", "TimeTicks", "iso", "Counter64", "Unsigned32", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sanmgr_proxy = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10)).setLabel("sanmgr-proxy")
pathlight = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2))
devices = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3))
controllers = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4))
notification = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5))
panelLED = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 6))
paHost = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7))
scsiMap = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8))
deviceMap = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9))
replication = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10))
envData = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11))
portFailover = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12))
utilityModule = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 13))
trapDefinition = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000))
class PathlightProduct(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("sanGateway", 1), ("sanRouter", 2), ("sanBridge", 3), ("adicFCR2", 4), ("dellFCR2", 5), ("siemensFCR2", 6), ("sanHoneoye", 7), ("adicHoneoye", 8), ("dellHoneoye", 9), ("siemensHoneoye", 10), ("ibmGatewayModule", 11), ("ibmHoneoye", 12), ("adicPlt5000", 13), ("dellPlt5000", 14), ("ibmPlt5000", 15), ("adicSNC4000", 16), ("dellSNC4000", 17), ("adicSNC6101", 18), ("dellSNC6101", 19), ("adicSNC6404", 20), ("adicSNC6104", 21))

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class PltStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("failed", 1), ("down", 2), ("testing", 3), ("up", 4))

class FcStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("configWait", 0), ("loopInit", 1), ("login", 2), ("ready", 3), ("lostSync", 4), ("error", 5), ("reinit", 6), ("nonPart", 7), ("failed", 8))

class Interface(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("none", 0), ("sanGateway", 1), ("ssa", 2), ("fibreChannel", 3), ("scsi", 4), ("ethernet", 5), ("unknown", 6), ("any", 7), ("sanReplication", 8), ("vLib", 9), ("soip", 10), ("soip2", 11))

class Reset(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("run", 0), ("reset", 1), ("reboot", 2))

class DeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 31))
    namedValues = NamedValues(("directAccess", 0), ("sequentialAccess", 1), ("printer", 2), ("processor", 3), ("worm", 4), ("cd", 5), ("scanner", 6), ("opticalMemory", 7), ("mediumChanger", 8), ("communications", 9), ("ascIt81", 10), ("ascIt82", 11), ("storageArrayController", 12), ("enclosure", 13), ("simplifiedDirectAccess", 14), ("opticalCardReader", 15), ("unknown", 31))

class VendorIDInt(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 4096, 4130, 4215, 4537))
    namedValues = NamedValues(("unknown", 0), ("symbios", 4096), ("amd", 4130), ("qlogic", 4215), ("pathlight", 4537))

class FibreMedia(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("unknown", 0), ("copper", 1), ("shortWaveOptical", 2), ("longWaveOptical", 3), ("shortWaveOpticalDual", 4), ("longWaveOpticalDual", 5), ("shortWaveOpticalLongDistance", 6), ("longWaveOpticalLongDistance", 7), ("gbicSWOneGB", 8), ("gbicLW1300OneGB", 9), ("gbicLW1300HPOneGB", 10), ("gbicLW1550HPOneGB", 11), ("gbicCopperHSSDCOneGB", 12), ("gbicCopperDB9OneGB", 13), ("gbicSWTwoGB", 14), ("gbicLW1300TwoGB", 15), ("gbicLW1300HPTwoGB", 16), ("gbicLW1550HPTwoGB", 17), ("gbicCopperHSSDCTwoGB", 18), ("gbicCopperDB9TwoGB", 19), ("noGBIC", 20), ("sfpSWTwoGB", 21))

class FibrePort(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))
    namedValues = NamedValues(("nodeLoop", 0), ("node", 1), ("fabricLoop", 3), ("fabric", 4), ("none", 255))

class FibreLoopIDMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("soft", 0), ("hard", 1))

class FibrePortMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 17, 18, 19))
    namedValues = NamedValues(("privateTargetOnly", 1), ("privateInitiatorOnly", 2), ("privateTargetAndInitiator", 3), ("publicTargetOnly", 17), ("publicInitiatorOnly", 18), ("publicTargetAndInitiator", 19))

class FibreConnOptions(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("loopOnly", 0), ("pointToPointOnly", 1), ("loopPreferred", 2), ("pointToPointPreferred", 3))

class ScsiSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("async", 0), ("fast", 1), ("ultra", 2), ("ultra2", 3), ("ultra160", 4), ("ultra320", 5))

class ScsiCardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("differentialNoTermination", 1), ("differentialTerminated", 2), ("singleEndedNoTermination", 3), ("singleEndedTerminated", 4), ("unknown", 5), ("lowVoltageSingleEnded", 6), ("lowVoltageDifferential", 7), ("lowVoltageMultiFunction", 8))

class ScsiAnsiLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notScsi", 0), ("scsi-1", 1), ("scsi-2", 2), ("scsi-3", 3))

class HostLUNType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("bit8", 0), ("bit16", 1), ("vsa", 2))

class FcHPFRecoveryType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("returnToActive", 0), ("returnToStandby", 1), ("requiresIntervention", 2))

class FcHPFPortState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("onLine", 0), ("offLine", 1))

class FcHPFPortFailType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("linkDown", 1), ("linkError", 2))

agentScalarTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1), )
if mibBuilder.loadTexts: agentScalarTable.setStatus('mandatory')
agentScalarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: agentScalarEntry.setStatus('mandatory')
paIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paIdentify.setStatus('mandatory')
paReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 2), Reset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paReboot.setStatus('mandatory')
paHealthCheckValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paHealthCheckValue.setStatus('mandatory')
paHealthCheckLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("system", 1), ("interface", 2), ("simpleDevice", 3), ("deviceReady", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paHealthCheckLevel.setStatus('mandatory')
paHealthCheckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paHealthCheckInterval.setStatus('mandatory')
paEvRptLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("private", 0), ("notice", 1), ("warning", 2), ("information", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paEvRptLevel.setStatus('mandatory')
paEventLogLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paEventLogLevels.setStatus('mandatory')
paTrapThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paTrapThresholds.setStatus('mandatory')
paBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("baud9600", 0), ("baud19200", 1), ("baud38400", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paBaudRate.setStatus('mandatory')
paLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogSize.setStatus('mandatory')
paCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 0), ("snapshot", 1), ("scroll", 2), ("save", 3), ("clear", 4), ("removeFile", 5), ("logModeCurrent", 6), ("logModeAbsolute", 7), ("doHealthCheck", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paCommand.setStatus('mandatory')
paLogBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paLogBoot.setStatus('mandatory')
paLogNCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 14), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogNCurrent.setStatus('mandatory')
paLogChronFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 15), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogChronFirst.setStatus('obsolete')
paLogChronLast = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 16), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogChronLast.setStatus('obsolete')
paLogScroll = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogScroll.setStatus('obsolete')
paLogFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogFilename.setStatus('mandatory')
paEnvironmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEnvironmentState.setStatus('mandatory')
paGatewayFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paGatewayFWRev.setStatus('mandatory')
paGatewayHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paGatewayHWRev.setStatus('mandatory')
paSnmpFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSnmpFWRev.setStatus('mandatory')
paRidTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paRidTag.setStatus('mandatory')
paSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSerialNumber.setStatus('mandatory')
paServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paServerVersion.setStatus('mandatory')
paProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 26), PathlightProduct()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paProductType.setStatus('mandatory')
paVPSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 27), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paVPSEnabled.setStatus('mandatory')
paLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLicenseKey.setStatus('mandatory')
paThirdPartyCopyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 29), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paThirdPartyCopyEnabled.setStatus('mandatory')
paVPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paVPSStatus.setStatus('mandatory')
paThirdPartyCopyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paThirdPartyCopyStatus.setStatus('mandatory')
paCommandControlLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paCommandControlLUN.setStatus('mandatory')
paSanDirectorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 33), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSanDirectorEnabled.setStatus('mandatory')
paNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: paNodeName.setStatus('mandatory')
paVPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paVPMStatus.setStatus('mandatory')
paSRSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSRSStatus.setStatus('mandatory')
paEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEthernetType.setStatus('mandatory')
paTrapSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paTrapSequenceNumber.setStatus('mandatory')
paSysNodeNameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sameForEachPort", 0), ("differentForEachPort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSysNodeNameMode.setStatus('mandatory')
paGhostIOTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paGhostIOTimeToLive.setStatus('mandatory')
paMaxLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paMaxLun.setStatus('mandatory')
paEVPSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paEVPSEnabled.setStatus('mandatory')
paMaxHostLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paMaxHostLun.setStatus('mandatory')
paAMPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paAMPStatus.setStatus('mandatory')
paEnableAllScsiTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paEnableAllScsiTargets.setStatus('mandatory')
paHPFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paHPFStatus.setStatus('mandatory')
paSoip2iRescan = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 47), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSoip2iRescan.setStatus('mandatory')
paSoipiRescan = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 48), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSoipiRescan.setStatus('mandatory')
paFLBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paFLBStatus.setStatus('mandatory')
paSoip2iScanPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSoip2iScanPeriod.setStatus('mandatory')
paCommandFlowLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 1, 1, 51), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paCommandFlowLogEnabled.setStatus('mandatory')
paEventLog = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500), )
if mibBuilder.loadTexts: paEventLog.setStatus('mandatory')
paEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1), ).setIndexNames((0, "ADIC-SANMGR-PROXY-MIB", "paIndex"))
if mibBuilder.loadTexts: paEventLogEntry.setStatus('mandatory')
paIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paIndex.setStatus('mandatory')
paTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paTime.setStatus('mandatory')
paProducer = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paProducer.setStatus('mandatory')
paEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEventClass.setStatus('mandatory')
paEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEventCode.setStatus('mandatory')
paSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSeq.setStatus('mandatory')
paEventVars = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 2, 500, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEventVars.setStatus('mandatory')
pdDevices = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1), )
if mibBuilder.loadTexts: pdDevices.setStatus('mandatory')
pdDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "pdIndex"))
if mibBuilder.loadTexts: pdDevEntry.setStatus('mandatory')
pdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdIndex.setStatus('mandatory')
pdUID = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdUID.setStatus('mandatory')
pdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 3), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdType.setStatus('mandatory')
pdVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdVendor.setStatus('mandatory')
pdProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdProduct.setStatus('mandatory')
pdBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdBlockSize.setStatus('mandatory')
pdCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdCapacity.setStatus('mandatory')
pdAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdAccess.setStatus('mandatory')
pdRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 9), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdRemovable.setStatus('mandatory')
pdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 10), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdStatus.setStatus('mandatory')
pdSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdSpeed.setStatus('mandatory')
pdWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdWidth.setStatus('mandatory')
pdSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdSerial.setStatus('mandatory')
pdIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdIdentify.setStatus('mandatory')
pdInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 15), Interface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdInterfaceType.setStatus('mandatory')
pdBus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdBus.setStatus('mandatory')
pdId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdId.setStatus('mandatory')
pdLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdLun.setStatus('mandatory')
pdCtlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdCtlrIndex.setStatus('mandatory')
pdHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdHWRev.setStatus('mandatory')
pdFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdFWRev.setStatus('mandatory')
pdReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 22), Reset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdReset.setStatus('mandatory')
pdStatusBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdStatusBits.setStatus('mandatory')
pdScsiAnsiLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 24), ScsiAnsiLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdScsiAnsiLevel.setStatus('mandatory')
pdTargetLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdTargetLun.setStatus('mandatory')
pdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdIpAddress.setStatus('mandatory')
pdAltVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdAltVendor.setStatus('mandatory')
pdAltProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 3, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdAltProduct.setStatus('mandatory')
pcControllers = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1), )
if mibBuilder.loadTexts: pcControllers.setStatus('mandatory')
pcCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "pcIndex"))
if mibBuilder.loadTexts: pcCtlrEntry.setStatus('mandatory')
pcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcIndex.setStatus('mandatory')
pcType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 2), Interface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcType.setStatus('mandatory')
pcVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 3), VendorIDInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcVendorId.setStatus('mandatory')
pcProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcProductId.setStatus('mandatory')
pcRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcRevision.setStatus('deprecated')
pcSubVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcSubVendor.setStatus('mandatory')
pcSubProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcSubProduct.setStatus('mandatory')
pcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcMaxBurst.setStatus('mandatory')
pcLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcLatency.setStatus('mandatory')
pcIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcIdentify.setStatus('mandatory')
pcPCIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIBus.setStatus('mandatory')
pcPCIDev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIDev.setStatus('mandatory')
pcPCIFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIFunc.setStatus('mandatory')
pcReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 14), Reset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcReset.setStatus('mandatory')
pcRescan = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 15), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcRescan.setStatus('mandatory')
pcLED = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcLED.setStatus('mandatory')
pcHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcHWRev.setStatus('mandatory')
pcFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcFWRev.setStatus('mandatory')
pcPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCISlot.setStatus('mandatory')
pcPMCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPMCSlot.setStatus('mandatory')
pcPCIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIClass.setStatus('mandatory')
pcSplitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 22), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcSplitMode.setStatus('mandatory')
pcChannelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 23), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcChannelMask.setStatus('mandatory')
pcPortHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcPortHostType.setStatus('mandatory')
pcFCCtlrs = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2), )
if mibBuilder.loadTexts: pcFCCtlrs.setStatus('mandatory')
fcCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "pcIndex"))
if mibBuilder.loadTexts: fcCtlrEntry.setStatus('mandatory')
fcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 1), FcStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatus.setStatus('mandatory')
fcMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcMaxSpeed.setStatus('mandatory')
fcWWID = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWWID.setStatus('mandatory')
fcFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFWRev.setStatus('mandatory')
fcHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHWRev.setStatus('mandatory')
fcLoopID = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcLoopID.setStatus('mandatory')
fcFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFrameSize.setStatus('mandatory')
fcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 8), FibrePort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPortType.setStatus('mandatory')
fcMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 9), FibreMedia()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcMedia.setStatus('mandatory')
fcSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSerialNumber.setStatus('mandatory')
fcLoopIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 11), FibreLoopIDMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopIDMode.setStatus('mandatory')
fcALPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcALPhysicalAddress.setStatus('mandatory')
fcPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 13), FibrePortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPortMode.setStatus('mandatory')
fcConnectionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 14), FibreConnOptions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnectionOptions.setStatus('mandatory')
fcCtlrChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlrChipType.setStatus('mandatory')
fcTapeFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 16), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTapeFeature.setStatus('mandatory')
fcHardID = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHardID.setStatus('mandatory')
fcCurrentSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCurrentSpeedSetting.setStatus('mandatory')
fcCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCurrentSpeed.setStatus('mandatory')
fcFrameBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFrameBufferSize.setStatus('mandatory')
fcLinkFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLinkFailureCount.setStatus('mandatory')
fcLossSyncCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSyncCount.setStatus('mandatory')
fcLossSignalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSignalCount.setStatus('mandatory')
fcProtocolErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProtocolErrorCount.setStatus('mandatory')
fcInvalidTxWordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInvalidTxWordCount.setStatus('mandatory')
fcInvalidCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInvalidCRCCount.setStatus('mandatory')
fcWWNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWWNodeName.setStatus('mandatory')
fcPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortID.setStatus('mandatory')
pcSSACtlrs = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3), )
if mibBuilder.loadTexts: pcSSACtlrs.setStatus('obsolete')
ssaCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1), ).setIndexNames((0, "ADIC-SANMGR-PROXY-MIB", "pcIndex"))
if mibBuilder.loadTexts: ssaCtlrEntry.setStatus('obsolete')
ssaStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 1), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaStatus1.setStatus('mandatory')
ssaStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 2), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaStatus2.setStatus('mandatory')
ssaSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ssa80", 1), ("ssa160", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaSpeed.setStatus('mandatory')
ssaUID = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaUID.setStatus('mandatory')
ssaFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaFWRev.setStatus('mandatory')
ssaMaxTarg = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaMaxTarg.setStatus('mandatory')
ssaMaxInit = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaMaxInit.setStatus('mandatory')
ssaPathAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("skipInitiators", 1), ("unknown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaPathAlg.setStatus('mandatory')
ssaHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaHWRev.setStatus('mandatory')
ssaMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaMasterPriority.setStatus('mandatory')
ssaSATAQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaSATAQuota.setStatus('mandatory')
ssaSATBQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaSATBQuota.setStatus('mandatory')
ssaSATIQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaSATIQuota.setStatus('mandatory')
pcSCSICtlrs = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4), )
if mibBuilder.loadTexts: pcSCSICtlrs.setStatus('mandatory')
scsiCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "pcIndex"))
if mibBuilder.loadTexts: scsiCtlrEntry.setStatus('mandatory')
scsiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 1), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiStatus.setStatus('mandatory')
scsiSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 2), ScsiSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiSpeed.setStatus('mandatory')
scsiRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiRole.setStatus('mandatory')
scsiHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiHostId.setStatus('mandatory')
scsiMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 5), ScsiSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMaxSpeed.setStatus('mandatory')
scsiTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notPresent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiTerm.setStatus('mandatory')
scsiIoCard = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 7), ScsiCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIoCard.setStatus('mandatory')
scsiMaxIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMaxIds.setStatus('mandatory')
scsiMaxLuns = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMaxLuns.setStatus('mandatory')
scsiMaxWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMaxWidth.setStatus('mandatory')
scsiHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiHWRev.setStatus('mandatory')
scsiFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiFWRev.setStatus('mandatory')
scsiResetOnPowerUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 13), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiResetOnPowerUp.setStatus('mandatory')
scsiMultiInitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 14), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMultiInitEnabled.setStatus('mandatory')
scsiAlternateHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiAlternateHostId.setStatus('mandatory')
scsiTargetEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 4, 4, 1, 16), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTargetEnabled.setStatus('mandatory')
pnTrapDest = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5, 1), )
if mibBuilder.loadTexts: pnTrapDest.setStatus('obsolete')
pnTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "pnIPAddr"), (0, "ADIC-SANMGR-PROXY-MIB", "pnUdpPort"))
if mibBuilder.loadTexts: pnTrapDestEntry.setStatus('obsolete')
pnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnIndex.setStatus('obsolete')
pnIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnIPAddr.setStatus('obsolete')
pnUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnUdpPort.setStatus('obsolete')
pnTrapStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proprietary", 1), ("rfc1215", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnTrapStyle.setStatus('obsolete')
pnTrapBroadcastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnTrapBroadcastMode.setStatus('mandatory')
hostCommandTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 1), )
if mibBuilder.loadTexts: hostCommandTable.setStatus('mandatory')
hostCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: hostCommandEntry.setStatus('mandatory')
hostCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("commitChanges", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostCommand.setStatus('mandatory')
hostInitiator = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2), )
if mibBuilder.loadTexts: hostInitiator.setStatus('mandatory')
hostInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostInitiatorEntry.setStatus('mandatory')
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIndex.setStatus('mandatory')
hostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostRowStatus.setStatus('mandatory')
hostWWName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostWWName.setStatus('mandatory')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
hostType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostType.setStatus('mandatory')
hostPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostPortID.setStatus('mandatory')
hostSANConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSANConnection.setStatus('mandatory')
hostConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 8), Interface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConnectionType.setStatus('mandatory')
hostITLData = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostITLData.setStatus('mandatory')
hostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIPAddr.setStatus('mandatory')
hostLunType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 11), HostLUNType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostLunType.setStatus('mandatory')
hostLunMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostLunMap.setStatus('mandatory')
hostInbandAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 7, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInbandAccess.setStatus('mandatory')
scsiMapCommandTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 1), )
if mibBuilder.loadTexts: scsiMapCommandTable.setStatus('mandatory')
scsiMapCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: scsiMapCommandEntry.setStatus('mandatory')
scsiMapCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapCommand.setStatus('mandatory')
scsiChannelMap = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2), )
if mibBuilder.loadTexts: scsiChannelMap.setStatus('mandatory')
scsiMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "scsiMapPort"), (0, "ADIC-SANMGR-PROXY-MIB", "scsiMapTid"), (0, "ADIC-SANMGR-PROXY-MIB", "scsiMapLun"))
if mibBuilder.loadTexts: scsiMapEntry.setStatus('mandatory')
scsiMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapRowStatus.setStatus('mandatory')
scsiMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapPort.setStatus('mandatory')
scsiMapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapTid.setStatus('mandatory')
scsiMapLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapLun.setStatus('mandatory')
scsiMapAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapAssignedLun.setStatus('mandatory')
scsiMapComments = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapComments.setStatus('mandatory')
scsiMapPdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapPdIndex.setStatus('mandatory')
deviceMapCommandTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 1), )
if mibBuilder.loadTexts: deviceMapCommandTable.setStatus('mandatory')
deviceMapCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: deviceMapCommandEntry.setStatus('mandatory')
deviceMapCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clearCopy", 1), ("commit", 2), ("winnow", 3), ("mapClearDatabase", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMapCommand.setStatus('mandatory')
deviceMapMultipathMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("single", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMapMultipathMode.setStatus('mandatory')
deviceMapRemoveDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 1, 1, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: deviceMapRemoveDevice.setStatus('mandatory')
deviceLoadBalancingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceLoadBalancingMode.setStatus('mandatory')
dmDeviceMap = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2), )
if mibBuilder.loadTexts: dmDeviceMap.setStatus('mandatory')
dmDevMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "dmAssignedLun"))
if mibBuilder.loadTexts: dmDevMapEntry.setStatus('mandatory')
dmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmRowStatus.setStatus('mandatory')
dmAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmAssignedLun.setStatus('mandatory')
dmType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 3), Interface()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmType.setStatus('mandatory')
dmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmPort.setStatus('mandatory')
dmTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmTargetId.setStatus('mandatory')
dmTargetLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmTargetLun.setStatus('mandatory')
dmUid = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmUid.setStatus('mandatory')
dmPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("single", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmPath.setStatus('mandatory')
dmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 9, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmSerialNum.setStatus('mandatory')
srsDevTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1), )
if mibBuilder.loadTexts: srsDevTable.setStatus('mandatory')
srsDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "srsDevId"))
if mibBuilder.loadTexts: srsDevEntry.setStatus('mandatory')
srsDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevId.setStatus('mandatory')
srsDevState = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("initialized", 1), ("online", 2), ("error", 3), ("deleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevState.setStatus('mandatory')
srsDevCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevCommand.setStatus('mandatory')
srsDevAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevAssignedLun.setStatus('mandatory')
srsDevMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevMemberCount.setStatus('mandatory')
srsDevMembersOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevMembersOnline.setStatus('mandatory')
srsDevFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevFlags.setStatus('mandatory')
srsDevSizeInBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevSizeInBlocks.setStatus('mandatory')
srsDevBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevBlockSize.setStatus('mandatory')
srsDevPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevPrimary.setStatus('mandatory')
srsMemTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2), )
if mibBuilder.loadTexts: srsMemTable.setStatus('mandatory')
srsMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "srsMemDeviceId"), (0, "ADIC-SANMGR-PROXY-MIB", "srsMemId"))
if mibBuilder.loadTexts: srsMemEntry.setStatus('mandatory')
srsMemDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemDeviceId.setStatus('mandatory')
srsMemId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemId.setStatus('mandatory')
srsMemState = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("online", 1), ("synchronized", 2), ("synchronizing", 3), ("suspended", 4), ("readError", 5), ("writeError", 6), ("offline", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemState.setStatus('mandatory')
srsMemCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("memberAdd", 1), ("suspend", 2), ("resume", 3), ("remove", 4), ("primarySet", 5), ("fullSynchronize", 6), ("quickSynchronize", 7), ("memberChange", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemCommand.setStatus('mandatory')
srsMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemType.setStatus('mandatory')
srsMemSyncPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemSyncPoint.setStatus('mandatory')
srsMemAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemAssignedLun.setStatus('mandatory')
srsMemReadOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemReadOptions.setStatus('mandatory')
srsMemWriteOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("synchronous", 0), ("asynchronous", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemWriteOptions.setStatus('mandatory')
envDataTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1), )
if mibBuilder.loadTexts: envDataTable.setStatus('mandatory')
envDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "envDataId"))
if mibBuilder.loadTexts: envDataEntry.setStatus('mandatory')
envDataId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDataId.setStatus('mandatory')
envDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDataName.setStatus('mandatory')
envNominalLo = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNominalLo.setStatus('mandatory')
envNominalHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNominalHi.setStatus('mandatory')
envWarningLo = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envWarningLo.setStatus('mandatory')
envWarningHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envWarningHi.setStatus('mandatory')
envCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCurValue.setStatus('mandatory')
envCurStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCurStatus.setStatus('mandatory')
envUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envUnit.setStatus('mandatory')
fcHostPortFailover = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1))
fcHPFPortMappings = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 1), )
if mibBuilder.loadTexts: fcHPFPortMappings.setStatus('mandatory')
fcHPFMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 1, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "fcHPFMapVirtualPort"))
if mibBuilder.loadTexts: fcHPFMapEntry.setStatus('mandatory')
fcHPFMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFMapRowStatus.setStatus('mandatory')
fcHPFMapVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFMapVirtualPort.setStatus('mandatory')
fcHPFMapPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFMapPrimaryPort.setStatus('mandatory')
fcHPFMapStandbyList = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFMapStandbyList.setStatus('mandatory')
fcHPFMapActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFMapActivePort.setStatus('mandatory')
fcHPFPhysicalPorts = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 2), )
if mibBuilder.loadTexts: fcHPFPhysicalPorts.setStatus('mandatory')
fcHPFPhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 2, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-SANMGR-PROXY-MIB", "fcHPFPhysicalPort"))
if mibBuilder.loadTexts: fcHPFPhysicalPortEntry.setStatus('mandatory')
fcHPFPhysicalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFPhysicalPortRowStatus.setStatus('mandatory')
fcHPFPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHPFPhysicalPort.setStatus('mandatory')
fcHPFPhysicalPortFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 2, 1, 3), FcHPFPortFailType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHPFPhysicalPortFailureType.setStatus('mandatory')
fcHPFPhysicalPortCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 2, 1, 4), FcHPFPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHPFPhysicalPortCurrentState.setStatus('mandatory')
fcHPFPhysicalPortIntervention = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 2, 1, 5), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFPhysicalPortIntervention.setStatus('mandatory')
fcHPFGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 3), )
if mibBuilder.loadTexts: fcHPFGlobalTable.setStatus('mandatory')
fcHPFGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 3, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: fcHPFGlobalEntry.setStatus('mandatory')
fcHPFLinkDownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFLinkDownThreshold.setStatus('mandatory')
fcHPFErrorRecoveryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 3, 1, 2), FcHPFRecoveryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFErrorRecoveryMode.setStatus('mandatory')
fcHPFLinkDownRecoveryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 12, 1, 3, 1, 3), FcHPFRecoveryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHPFLinkDownRecoveryMode.setStatus('mandatory')
utilityModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 13, 1), )
if mibBuilder.loadTexts: utilityModuleTable.setStatus('mandatory')
utilityModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 13, 1, 1), ).setIndexNames((0, "ADIC-SANMGR-PROXY-MIB", "utilityModuleId"))
if mibBuilder.loadTexts: utilityModuleEntry.setStatus('mandatory')
utilityModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utilityModuleId.setStatus('mandatory')
utilityModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utilityModuleVersion.setStatus('mandatory')
ssaPortUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,1)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ssaPortDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,2)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ssaUidAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,3)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ssaUidRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,4)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ssaWebReconfiguredEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,5)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ssaAsyncErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,6)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ssaAdapterEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,7)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
senseDataEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,8)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
unitAttentionEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,9)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ibfEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,10)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
temperatureChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,11)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
timeReferenceEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,12)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
shutdownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,13)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
diagnosticEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,14)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
configurationEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,15)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
unexpectedScsiInterruptEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,16)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
lipResetEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,17)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcSystemErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,18)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcRequestTransferErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,19)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcResponseTransferErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,20)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
memoryFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,21)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcLipEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,22)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcLoopUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,23)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcLoopDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,24)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
pciBusParityErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,25)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
pciInterfaceErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,26)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
scsiDeviceAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,27)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
scsiBusResetEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,28)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
deviceAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,29)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
deviceRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,30)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
loggingStartedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,31)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
loggingStoppedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,32)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
interfaceBusFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,33)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
interfaceDeviceFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,34)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
scsiUnexpectedDisconnectEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,35)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
scsiParityErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,36)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcPortDatabaseChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,37)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ddfMemoryErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,38)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcDirectoryServerChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,39)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
lunLimitExcededEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,40)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcTransferFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,41)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
deviceLimitExcededEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,42)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcDebugDumpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,43)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
excessiveScsiBusErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,44)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
memoryScrubberErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,45)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsDeviceCreatedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,46)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsDeviceOnlineEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,47)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsDeviceRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,48)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsDeviceFailedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,49)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,50)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberSuspendedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,51)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,52)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberSyncStartedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,53)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberSyncDoneEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,54)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberSyncErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,55)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberRetryEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,56)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
srsMemberErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,57)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envPowerNominalEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,58)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envPowerWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,59)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envPowerAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,60)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envTemperatureNominalEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,61)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envInletTemperatureWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,62)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envInletTemperatureAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,63)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envOutletTemperatureWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,64)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envOutletTemperatureAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,65)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envFanNominalEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,66)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envFanWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,67)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envFanAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,68)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
eccMemoryErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,69)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
restartCompleteEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,70)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
firmwareUploadCompleteEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,71)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
maxInitiatorsExceededEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,72)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
dataPathFailoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,73)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
amemWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,74)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
hostOfflineEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,75)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
hostOnlineEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,76)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
hostPortFailoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,77)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
hpfRequiresInterventionEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,78)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
controllerResetCompletedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,79)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
controllerStatusChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,80)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ethFailoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,81)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
memUsageWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,82)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
taskSuspendedWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,83)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
umTaskWatchdogWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,84)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
dataPathTrespassEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,85)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
deviceListChangedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,86)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
autoLevelStart = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,87)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
autoLevelEnd = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,88)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
autoLevelError = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,89)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
corruptNVRAMError = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,90)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
powerSupplyOutOfSpecEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,100)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
auxPowerOutOfSpecEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,101)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
newTemperatureChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,102)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
newPciErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,103)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
newMemoryParityErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,104)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
pciBusInterfaceErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,105)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcInterfaceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,106)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
scsiInterfaceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,107)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
ssaInterfaceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,108)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
deviceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,109)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
fcLinkStatusChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,110)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
newFcTranferErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,111)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envFanEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,112)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envPowerEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,113)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
envTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,114)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
eccMemoryHealthCheckEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,115)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
eccMemoryScrubberEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,116)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
deviceRecoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,118)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-SANMGR-PROXY-MIB", "paTrapSequenceNumber"), ("ADIC-SANMGR-PROXY-MIB", "paTime"), ("ADIC-SANMGR-PROXY-MIB", "paProducer"), ("ADIC-SANMGR-PROXY-MIB", "paEventClass"), ("ADIC-SANMGR-PROXY-MIB", "paEventCode"), ("ADIC-SANMGR-PROXY-MIB", "paSeq"), ("ADIC-SANMGR-PROXY-MIB", "paEventVars"))
logWillOverwriteEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,150)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
bootCompletedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 400, 10, 10, 1000) + (0,4444)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
mibBuilder.exportSymbols("ADIC-SANMGR-PROXY-MIB", fcWWNodeName=fcWWNodeName, unexpectedScsiInterruptEvent=unexpectedScsiInterruptEvent, eccMemoryScrubberEvent=eccMemoryScrubberEvent, paVPSStatus=paVPSStatus, FcHPFPortState=FcHPFPortState, srsDevMembersOnline=srsDevMembersOnline, srsMemTable=srsMemTable, timeReferenceEvent=timeReferenceEvent, envNominalHi=envNominalHi, srsMemberAddedEvent=srsMemberAddedEvent, fcResponseTransferErrorEvent=fcResponseTransferErrorEvent, bootCompletedEvent=bootCompletedEvent, scsiMaxWidth=scsiMaxWidth, shutdownEvent=shutdownEvent, pdProduct=pdProduct, paLicenseKey=paLicenseKey, pcReset=pcReset, hostInitiatorEntry=hostInitiatorEntry, pcLED=pcLED, pdType=pdType, envTemperatureNominalEvent=envTemperatureNominalEvent, srsDevFlags=srsDevFlags, ssaPortDownEvent=ssaPortDownEvent, dmDeviceMap=dmDeviceMap, fcPortType=fcPortType, newTemperatureChangeEvent=newTemperatureChangeEvent, fcStatus=fcStatus, fcHPFLinkDownRecoveryMode=fcHPFLinkDownRecoveryMode, fcHPFPortMappings=fcHPFPortMappings, fcPortDatabaseChangeEvent=fcPortDatabaseChangeEvent, paSoip2iScanPeriod=paSoip2iScanPeriod, deviceLimitExcededEvent=deviceLimitExcededEvent, pdDevEntry=pdDevEntry, scsiMapCommandTable=scsiMapCommandTable, memUsageWarningEvent=memUsageWarningEvent, pnTrapStyle=pnTrapStyle, dmPath=dmPath, ssaPortUpEvent=ssaPortUpEvent, unitAttentionEvent=unitAttentionEvent, ssaSATIQuota=ssaSATIQuota, FcHPFPortFailType=FcHPFPortFailType, envDataName=envDataName, hostIndex=hostIndex, envDataId=envDataId, paEVPSEnabled=paEVPSEnabled, ssaMasterPriority=ssaMasterPriority, dmRowStatus=dmRowStatus, dmDevMapEntry=dmDevMapEntry, paSRSStatus=paSRSStatus, pcIdentify=pcIdentify, dmAssignedLun=dmAssignedLun, utilityModule=utilityModule, pciInterfaceErrorEvent=pciInterfaceErrorEvent, envInletTemperatureWarningEvent=envInletTemperatureWarningEvent, interfaceBusFaultEvent=interfaceBusFaultEvent, pdIdentify=pdIdentify, scsiStatus=scsiStatus, ScsiCardType=ScsiCardType, pcCtlrEntry=pcCtlrEntry, Reset=Reset, deviceMapCommand=deviceMapCommand, fcHPFPhysicalPortEntry=fcHPFPhysicalPortEntry, ssaAsyncErrorEvent=ssaAsyncErrorEvent, fcLinkStatusChangeEvent=fcLinkStatusChangeEvent, pdAltProduct=pdAltProduct, ScsiSpeed=ScsiSpeed, ssaWebReconfiguredEvent=ssaWebReconfiguredEvent, paLogBoot=paLogBoot, pcRescan=pcRescan, hostType=hostType, dmTargetLun=dmTargetLun, paThirdPartyCopyStatus=paThirdPartyCopyStatus, controllerStatusChangeEvent=controllerStatusChangeEvent, envPowerEvent=envPowerEvent, pdIndex=pdIndex, scsiInterfaceFailureEvent=scsiInterfaceFailureEvent, trapDefinition=trapDefinition, pcLatency=pcLatency, pciBusParityErrorEvent=pciBusParityErrorEvent, scsiHostId=scsiHostId, hostWWName=hostWWName, notification=notification, pcSubVendor=pcSubVendor, fcFWRev=fcFWRev, paSoipiRescan=paSoipiRescan, DeviceType=DeviceType, FibreLoopIDMode=FibreLoopIDMode, scsiMaxIds=scsiMaxIds, pcHWRev=pcHWRev, paTrapThresholds=paTrapThresholds, fcRequestTransferErrorEvent=fcRequestTransferErrorEvent, envOutletTemperatureWarningEvent=envOutletTemperatureWarningEvent, hostRowStatus=hostRowStatus, srsDeviceOnlineEvent=srsDeviceOnlineEvent, hostPortID=hostPortID, pnUdpPort=pnUdpPort, excessiveScsiBusErrorsEvent=excessiveScsiBusErrorsEvent, hostCommand=hostCommand, envWarningHi=envWarningHi, pnTrapDestEntry=pnTrapDestEntry, fcHPFPhysicalPortRowStatus=fcHPFPhysicalPortRowStatus, fcHWRev=fcHWRev, pcPCIClass=pcPCIClass, VendorIDInt=VendorIDInt, fcHPFMapRowStatus=fcHPFMapRowStatus, scsiParityErrorEvent=scsiParityErrorEvent, pdLun=pdLun, controllers=controllers, scsiMapRowStatus=scsiMapRowStatus, fcLinkFailureCount=fcLinkFailureCount, replication=replication, envPowerNominalEvent=envPowerNominalEvent, deviceLoadBalancingMode=deviceLoadBalancingMode, paFLBStatus=paFLBStatus, eccMemoryErrorEvent=eccMemoryErrorEvent, pdScsiAnsiLevel=pdScsiAnsiLevel, fcHPFLinkDownThreshold=fcHPFLinkDownThreshold, scsiMap=scsiMap, memoryFaultEvent=memoryFaultEvent, paVPMStatus=paVPMStatus, paRidTag=paRidTag, pcVendorId=pcVendorId, FcHPFRecoveryType=FcHPFRecoveryType, logWillOverwriteEvent=logWillOverwriteEvent, ssaUID=ssaUID, hostInbandAccess=hostInbandAccess, envUnit=envUnit, hostOnlineEvent=hostOnlineEvent, autoLevelEnd=autoLevelEnd, pcPortHostType=pcPortHostType, dmSerialNum=dmSerialNum, fcHPFPhysicalPortCurrentState=fcHPFPhysicalPortCurrentState, scsiUnexpectedDisconnectEvent=scsiUnexpectedDisconnectEvent, hostConnectionType=hostConnectionType, paMaxHostLun=paMaxHostLun, envCurValue=envCurValue, envFanAlarmEvent=envFanAlarmEvent, HostLUNType=HostLUNType, pcPCIBus=pcPCIBus, utilityModuleId=utilityModuleId, newPciErrorsEvent=newPciErrorsEvent, pcControllers=pcControllers, devices=devices, paReboot=paReboot, fcHPFPhysicalPort=fcHPFPhysicalPort, pcSCSICtlrs=pcSCSICtlrs, scsiChannelMap=scsiChannelMap, paSanDirectorEnabled=paSanDirectorEnabled, srsMemCommand=srsMemCommand, ddfMemoryErrorEvent=ddfMemoryErrorEvent, scsiCtlrEntry=scsiCtlrEntry, fcHardID=fcHardID, pdRemovable=pdRemovable, pdInterfaceType=pdInterfaceType, paHPFStatus=paHPFStatus, deviceFailureEvent=deviceFailureEvent, paSysNodeNameMode=paSysNodeNameMode, ibfEvent=ibfEvent, fcLoopID=fcLoopID, pdStatusBits=pdStatusBits, srsDeviceCreatedEvent=srsDeviceCreatedEvent, envPowerWarningEvent=envPowerWarningEvent, pcPCIDev=pcPCIDev, dataPathTrespassEvent=dataPathTrespassEvent, paEventClass=paEventClass, envData=envData, fcHPFPhysicalPortIntervention=fcHPFPhysicalPortIntervention, FcStatus=FcStatus, fcInvalidCRCCount=fcInvalidCRCCount, pnIndex=pnIndex, hostCommandEntry=hostCommandEntry, memoryScrubberErrorEvent=memoryScrubberErrorEvent, paLogScroll=paLogScroll, loggingStartedEvent=loggingStartedEvent, hostSANConnection=hostSANConnection, pdTargetLun=pdTargetLun, hpfRequiresInterventionEvent=hpfRequiresInterventionEvent, paGhostIOTimeToLive=paGhostIOTimeToLive, scsiDeviceAddedEvent=scsiDeviceAddedEvent, fcDirectoryServerChangeEvent=fcDirectoryServerChangeEvent, srsMemEntry=srsMemEntry, envFanNominalEvent=envFanNominalEvent, envTemperatureEvent=envTemperatureEvent, srsMemberErrorEvent=srsMemberErrorEvent, fcCurrentSpeedSetting=fcCurrentSpeedSetting, amemWarningEvent=amemWarningEvent, ScsiAnsiLevel=ScsiAnsiLevel, portFailover=portFailover, scsiAlternateHostId=scsiAlternateHostId, paEnableAllScsiTargets=paEnableAllScsiTargets, paSeq=paSeq, pdId=pdId, envFanEvent=envFanEvent, pnTrapDest=pnTrapDest, paEthernetType=paEthernetType, agentScalarEntry=agentScalarEntry, srsMemberRetryEvent=srsMemberRetryEvent, RowStatus=RowStatus, pdUID=pdUID, pcChannelMask=pcChannelMask, fcHPFMapStandbyList=fcHPFMapStandbyList, srsMemberSyncDoneEvent=srsMemberSyncDoneEvent, autoLevelError=autoLevelError, paEventVars=paEventVars, dmType=dmType, lunLimitExcededEvent=lunLimitExcededEvent, utilityModuleVersion=utilityModuleVersion, ssaHWRev=ssaHWRev, hostIPAddr=hostIPAddr, scsiMapComments=scsiMapComments, hostInitiator=hostInitiator, paThirdPartyCopyEnabled=paThirdPartyCopyEnabled, paEventCode=paEventCode, utilityModuleTable=utilityModuleTable, scsiMapPort=scsiMapPort, scsiMultiInitEnabled=scsiMultiInitEnabled, scsiMaxSpeed=scsiMaxSpeed, panelLED=panelLED, envInletTemperatureAlarmEvent=envInletTemperatureAlarmEvent, scsiMapCommand=scsiMapCommand, scsiMapEntry=scsiMapEntry, scsiMapAssignedLun=scsiMapAssignedLun, fcLipEvent=fcLipEvent, ssaSpeed=ssaSpeed, fcPortID=fcPortID, fcConnectionOptions=fcConnectionOptions, pnIPAddr=pnIPAddr, agentScalarTable=agentScalarTable, pdDevices=pdDevices, pcSSACtlrs=pcSSACtlrs, ssaFWRev=ssaFWRev, pdWidth=pdWidth, umTaskWatchdogWarningEvent=umTaskWatchdogWarningEvent, srsMemSyncPoint=srsMemSyncPoint, pathlight=pathlight, fcProtocolErrorCount=fcProtocolErrorCount, pdBus=pdBus, temperatureChangeEvent=temperatureChangeEvent, envWarningLo=envWarningLo, dataPathFailoverEvent=dataPathFailoverEvent, pcProductId=pcProductId, fcHPFGlobalEntry=fcHPFGlobalEntry, envDataTable=envDataTable, deviceMapCommandEntry=deviceMapCommandEntry, fcHPFMapPrimaryPort=fcHPFMapPrimaryPort, fcHostPortFailover=fcHostPortFailover, srsDevEntry=srsDevEntry, paEnvironmentState=paEnvironmentState, hostLunMap=hostLunMap, pdSerial=pdSerial, scsiRole=scsiRole, ssaMaxTarg=ssaMaxTarg, ssaStatus2=ssaStatus2, scsiFWRev=scsiFWRev)
mibBuilder.exportSymbols("ADIC-SANMGR-PROXY-MIB", scsiSpeed=scsiSpeed, scsiMapLun=scsiMapLun, srsDevTable=srsDevTable, fcLoopDownEvent=fcLoopDownEvent, srsDevBlockSize=srsDevBlockSize, scsiMapCommandEntry=scsiMapCommandEntry, pdIpAddress=pdIpAddress, envFanWarningEvent=envFanWarningEvent, restartCompleteEvent=restartCompleteEvent, fcALPhysicalAddress=fcALPhysicalAddress, srsMemDeviceId=srsMemDeviceId, deviceListChangedEvent=deviceListChangedEvent, pcMaxBurst=pcMaxBurst, corruptNVRAMError=corruptNVRAMError, paMaxLun=paMaxLun, sanmgr_proxy=sanmgr_proxy, hostCommandTable=hostCommandTable, ssaMaxInit=ssaMaxInit, paEventLogEntry=paEventLogEntry, scsiMaxLuns=scsiMaxLuns, paCommandControlLUN=paCommandControlLUN, paIndex=paIndex, dmPort=dmPort, FibrePortMode=FibrePortMode, paNodeName=paNodeName, paProducer=paProducer, pcSplitMode=pcSplitMode, pdCapacity=pdCapacity, paSoip2iRescan=paSoip2iRescan, paHealthCheckValue=paHealthCheckValue, envCurStatus=envCurStatus, deviceMapMultipathMode=deviceMapMultipathMode, fcHPFMapActivePort=fcHPFMapActivePort, ethFailoverEvent=ethFailoverEvent, pdCtlrIndex=pdCtlrIndex, newFcTranferErrorsEvent=newFcTranferErrorsEvent, srsMemState=srsMemState, dmTargetId=dmTargetId, fcLoopIDMode=fcLoopIDMode, envNominalLo=envNominalLo, scsiIoCard=scsiIoCard, pdReset=pdReset, ssaPathAlg=ssaPathAlg, pdAltVendor=pdAltVendor, paLogChronLast=paLogChronLast, FibreConnOptions=FibreConnOptions, pdBlockSize=pdBlockSize, ssaCtlrEntry=ssaCtlrEntry, srsMemberSyncErrorEvent=srsMemberSyncErrorEvent, paLogSize=paLogSize, powerSupplyOutOfSpecEvent=powerSupplyOutOfSpecEvent, fcHPFPhysicalPortFailureType=fcHPFPhysicalPortFailureType, interfaceDeviceFaultEvent=interfaceDeviceFaultEvent, paHealthCheckLevel=paHealthCheckLevel, PathlightProduct=PathlightProduct, scsiTargetEnabled=scsiTargetEnabled, agent=agent, fcLossSyncCount=fcLossSyncCount, pcPCISlot=pcPCISlot, paLogFilename=paLogFilename, srsMemberRemovedEvent=srsMemberRemovedEvent, eccMemoryHealthCheckEvent=eccMemoryHealthCheckEvent, fcWWID=fcWWID, maxInitiatorsExceededEvent=maxInitiatorsExceededEvent, lipResetEvent=lipResetEvent, srsMemAssignedLun=srsMemAssignedLun, fcFrameBufferSize=fcFrameBufferSize, scsiResetOnPowerUp=scsiResetOnPowerUp, deviceAddedEvent=deviceAddedEvent, fcTransferFailureEvent=fcTransferFailureEvent, fcCtlrEntry=fcCtlrEntry, hostPortFailoverEvent=hostPortFailoverEvent, ssaStatus1=ssaStatus1, fcHPFPhysicalPorts=fcHPFPhysicalPorts, paIdentify=paIdentify, fcCurrentSpeed=fcCurrentSpeed, auxPowerOutOfSpecEvent=auxPowerOutOfSpecEvent, srsDevId=srsDevId, paEventLog=paEventLog, srsDevMemberCount=srsDevMemberCount, envDataEntry=envDataEntry, pcFCCtlrs=pcFCCtlrs, pnTrapBroadcastMode=pnTrapBroadcastMode, srsDevAssignedLun=srsDevAssignedLun, fcHPFErrorRecoveryMode=fcHPFErrorRecoveryMode, Boolean=Boolean, fcSystemErrorEvent=fcSystemErrorEvent, fcInvalidTxWordCount=fcInvalidTxWordCount, paEvRptLevel=paEvRptLevel, srsDeviceRemovedEvent=srsDeviceRemovedEvent, paSnmpFWRev=paSnmpFWRev, fcCtlrChipType=fcCtlrChipType, ssaInterfaceFailureEvent=ssaInterfaceFailureEvent, pciBusInterfaceErrorEvent=pciBusInterfaceErrorEvent, fcHPFGlobalTable=fcHPFGlobalTable, deviceRemovedEvent=deviceRemovedEvent, diagnosticEvent=diagnosticEvent, fcLossSignalCount=fcLossSignalCount, ssaUidRemovedEvent=ssaUidRemovedEvent, configurationEvent=configurationEvent, pcPMCSlot=pcPMCSlot, fcLoopUpEvent=fcLoopUpEvent, envPowerAlarmEvent=envPowerAlarmEvent, Interface=Interface, srsMemReadOptions=srsMemReadOptions, loggingStoppedEvent=loggingStoppedEvent, srsMemberSuspendedEvent=srsMemberSuspendedEvent, paEventLogLevels=paEventLogLevels, paHealthCheckInterval=paHealthCheckInterval, paTrapSequenceNumber=paTrapSequenceNumber, ssaSATBQuota=ssaSATBQuota, senseDataEvent=senseDataEvent, pdHWRev=pdHWRev, pcIndex=pcIndex, fcTapeFeature=fcTapeFeature, fcInterfaceFailureEvent=fcInterfaceFailureEvent, paLogChronFirst=paLogChronFirst, deviceRecoverEvent=deviceRecoverEvent, scsiBusResetEvent=scsiBusResetEvent, scsiMapPdIndex=scsiMapPdIndex, hostName=hostName, pcPCIFunc=pcPCIFunc, envOutletTemperatureAlarmEvent=envOutletTemperatureAlarmEvent, srsDevCommand=srsDevCommand, paHost=paHost, FibrePort=FibrePort, paTime=paTime, autoLevelStart=autoLevelStart, paProductType=paProductType, taskSuspendedWarningEvent=taskSuspendedWarningEvent, paSerialNumber=paSerialNumber, fcMaxSpeed=fcMaxSpeed, scsiMapTid=scsiMapTid, hostLunType=hostLunType, fcDebugDumpEvent=fcDebugDumpEvent, firmwareUploadCompleteEvent=firmwareUploadCompleteEvent, scsiTerm=scsiTerm, ssaAdapterEvent=ssaAdapterEvent, deviceMapCommandTable=deviceMapCommandTable, FibreMedia=FibreMedia, srsMemberSyncStartedEvent=srsMemberSyncStartedEvent, PltStatus=PltStatus, ssaUidAddedEvent=ssaUidAddedEvent, pcType=pcType, paVPSEnabled=paVPSEnabled, pdFWRev=pdFWRev, paCommandFlowLogEnabled=paCommandFlowLogEnabled, deviceMapRemoveDevice=deviceMapRemoveDevice, deviceMap=deviceMap, paCommand=paCommand, srsDeviceFailedEvent=srsDeviceFailedEvent, paAMPStatus=paAMPStatus, pdAccess=pdAccess, scsiHWRev=scsiHWRev, paLogNCurrent=paLogNCurrent, pcSubProduct=pcSubProduct, fcSerialNumber=fcSerialNumber, srsMemWriteOptions=srsMemWriteOptions, paGatewayFWRev=paGatewayFWRev, fcHPFMapEntry=fcHPFMapEntry, dmUid=dmUid, controllerResetCompletedEvent=controllerResetCompletedEvent, fcHPFMapVirtualPort=fcHPFMapVirtualPort, srsDevPrimary=srsDevPrimary, srsMemId=srsMemId, utilityModuleEntry=utilityModuleEntry, pcFWRev=pcFWRev, paBaudRate=paBaudRate, paGatewayHWRev=paGatewayHWRev, hostITLData=hostITLData, pcRevision=pcRevision, srsDevSizeInBlocks=srsDevSizeInBlocks, fcPortMode=fcPortMode, paServerVersion=paServerVersion, ssaSATAQuota=ssaSATAQuota, srsMemType=srsMemType, fcMedia=fcMedia, srsDevState=srsDevState, newMemoryParityErrorsEvent=newMemoryParityErrorsEvent, pdStatus=pdStatus, pdVendor=pdVendor, hostOfflineEvent=hostOfflineEvent, fcFrameSize=fcFrameSize, pdSpeed=pdSpeed)
