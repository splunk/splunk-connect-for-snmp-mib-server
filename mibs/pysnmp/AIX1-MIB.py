#
# PySNMP MIB module AIX1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIX1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:01:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Bits, enterprises, ModuleIdentity, Unsigned32, Integer32, NotificationType, IpAddress, TimeTicks, ObjectIdentity, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Bits", "enterprises", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "IpAddress", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiX1 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12))
aiX1System = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 1))
aiX1Appl = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 2))
aiX1Pkt = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 3))
aiX1Frm = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 4))
aiX1Phys = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 5))
aiX1VC = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 6))
ai192 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192))
ai192Ver7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7))
ai192Ver70 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 0))
ai192Ver708 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 0, 8))
ai192Ver709 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 0, 9))
ai192Ver71 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 1))
ai192Ver710 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 1, 0))
ai192Ver711 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 1, 1))
ai192Ver72 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 2))
ai192Ver720 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 2, 0))
ai192Ver721 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 2, 1))
ai192Ver77 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 7))
ai196 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196))
ai196Ver7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7))
ai196Ver70 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 0))
ai196Ver708 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 0, 8))
ai196Ver709 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 0, 9))
ai196Ver71 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 1))
ai196Ver710 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 1, 0))
ai196Ver711 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 1, 1))
ai196Ver72 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 2))
ai196Ver720 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 2, 0))
ai196Ver721 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 2, 1))
ai196Ver77 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 7))
class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aix1AdminGbufXoffThreshold = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminGbufXoffThreshold.setStatus('mandatory')
aix1AdminGbufRecovThreshold = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminGbufRecovThreshold.setStatus('mandatory')
aix1AdminRollover = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("roll", 2))).clone('ready')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1AdminRollover.setStatus('mandatory')
aix1Bx25AdminCallDown = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1Bx25AdminCallDown.setStatus('mandatory')
aix1Bx25AdminDMlock = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 4294967295)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1Bx25AdminDMlock.setStatus('mandatory')
aix1Bx25AdminLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 4294967295)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1Bx25AdminLinkUp.setStatus('mandatory')
aix1StatErrX25InData = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25InData.setStatus('mandatory')
aix1StatErrX25OutData = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25OutData.setStatus('mandatory')
aix1StatErrX25OutPkt = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25OutPkt.setStatus('mandatory')
aix1StatErrX25OutChoked = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25OutChoked.setStatus('mandatory')
aix1StatErrPlogCount = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrPlogCount.setStatus('mandatory')
aix1StatErrGfctlXoffs = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrGfctlXoffs.setStatus('mandatory')
aix1StatErrGfctlDiscards = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrGfctlDiscards.setStatus('mandatory')
aix1StatErrUwteBadTrans = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrUwteBadTrans.setStatus('mandatory')
aix1StatErrUwteBadFlds = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrUwteBadFlds.setStatus('mandatory')
aix1StatErrUwteMissingFlds = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrUwteMissingFlds.setStatus('mandatory')
aix1StatErrLogOutLost = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrLogOutLost.setStatus('mandatory')
aix1StatErrVcMuxErrs = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrVcMuxErrs.setStatus('mandatory')
aix1StatErrEmptyPktsRcv = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrEmptyPktsRcv.setStatus('mandatory')
aix1StatInCharsPerSec80s = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatInCharsPerSec80s.setStatus('mandatory')
aix1StatOutCharsPerSec80s = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatOutCharsPerSec80s.setStatus('mandatory')
aix1ApplAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 2, 1), )
if mibBuilder.loadTexts: aix1ApplAdminTable.setStatus('mandatory')
aix1ApplAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1ApplAdminIndex"))
if mibBuilder.loadTexts: aix1ApplAdminEntry.setStatus('mandatory')
aix1ApplAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplAdminIndex.setStatus('mandatory')
aix1ApplAdminLinkStart = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("started", 1), ("stopped", 2))).clone('started')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkStart.setStatus('mandatory')
aix1ApplAdminLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("passive", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkMode.setStatus('mandatory')
aix1ApplAdminResetErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminResetErrs.setStatus('mandatory')
aix1ApplAdminXONXOFFProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminXONXOFFProto.setStatus('mandatory')
aix1ApplAdminNMAProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminNMAProto.setStatus('mandatory')
aix1ApplAdminOPSINEProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminOPSINEProto.setStatus('mandatory')
aix1ApplAdminTL1Proto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminTL1Proto.setStatus('mandatory')
aix1ApplAdminLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkDescription.setStatus('mandatory')
aix1ApplAdminLinkConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkConnectionMode.setStatus('mandatory')
aix1ApplOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 2, 2), )
if mibBuilder.loadTexts: aix1ApplOperTable.setStatus('mandatory')
aix1ApplOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1ApplOperIndex"))
if mibBuilder.loadTexts: aix1ApplOperEntry.setStatus('mandatory')
aix1ApplOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperIndex.setStatus('mandatory')
aix1ApplOperLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("passive", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperLinkMode.setStatus('mandatory')
aix1ApplOperXONXOFFProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperXONXOFFProto.setStatus('mandatory')
aix1ApplOperNMAProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperNMAProto.setStatus('mandatory')
aix1ApplOperOPSINEProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperOPSINEProto.setStatus('mandatory')
aix1ApplOperTL1Proto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperTL1Proto.setStatus('mandatory')
aix1ApplOperLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperLinkDescription.setStatus('mandatory')
aix1ApplOperLinkConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("reconnected", 3), ("disabled", 4), ("linkdown", 5), ("linkup", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperLinkConnectionMode.setStatus('mandatory')
aix1PktAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 3, 1), )
if mibBuilder.loadTexts: aix1PktAdminTable.setStatus('mandatory')
aix1PktAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PktAdminIndex"))
if mibBuilder.loadTexts: aix1PktAdminEntry.setStatus('mandatory')
aix1PktAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktAdminIndex.setStatus('mandatory')
aix1PktAdminConformanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccitt", 1), ("ddn", 2))).clone('ccitt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminConformanceMode.setStatus('mandatory')
aix1PktAdminDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dbitNotAllowed", 1), ("dbitAllowed", 2))).clone('dbitNotAllowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminDBit.setStatus('mandatory')
aix1PktAdminQBitMBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noQMCheck", 1), ("qmCheck", 2))).clone('noQMCheck')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminQBitMBit.setStatus('mandatory')
aix1PktAdminUseRejectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPktRetrans", 1), ("pktRetrans", 2))).clone('noPktRetrans')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminUseRejectPkts.setStatus('mandatory')
aix1PktAdminSendInitialRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialRestart", 1), ("noInitialRestart", 2))).clone('initialRestart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminSendInitialRestart.setStatus('mandatory')
aix1PktAdminStdsBody = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccittPktLvl", 1), ("isoPktLvl", 2))).clone('ccittPktLvl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminStdsBody.setStatus('mandatory')
aix1PktAdminFacilChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checkFacils", 1), ("noCheckFacils", 2))).clone('noCheckFacils')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminFacilChecking.setStatus('mandatory')
aix1PktAdminUndefinedFacils = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUndefFacils", 1), ("undefFacils", 2))).clone('noUndefFacils')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminUndefinedFacils.setStatus('mandatory')
aix1PktAdminDefMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 256, 512, 1024))).clone(namedValues=NamedValues(("pkt128", 128), ("pkt256", 256), ("pkt512", 512), ("pkt1024", 1024))).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminDefMaxPktSize.setStatus('mandatory')
aix1PktAdminDefWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminDefWindowSize.setStatus('mandatory')
aix1PktAdminNegMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminNegMaxPktSize.setStatus('mandatory')
aix1PktAdminNegWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminNegWindowSize.setStatus('mandatory')
aix1PktAdminPacketizingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminPacketizingTimer.setStatus('mandatory')
aix1PktAdminPVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminPVCOffset.setStatus('mandatory')
aix1PktAdminSVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminSVCOffset.setStatus('mandatory')
aix1PktOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 3, 2), )
if mibBuilder.loadTexts: aix1PktOperTable.setStatus('mandatory')
aix1PktOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PktOperIndex"))
if mibBuilder.loadTexts: aix1PktOperEntry.setStatus('mandatory')
aix1PktOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperIndex.setStatus('mandatory')
aix1PktOperConformanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccitt", 1), ("ddn", 2))).clone('ccitt')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperConformanceMode.setStatus('mandatory')
aix1PktOperDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dbitNotAllowed", 1), ("dbitAllowed", 2))).clone('dbitNotAllowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperDBit.setStatus('mandatory')
aix1PktOperQBitMBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noQMCheck", 1), ("qmCheck", 2))).clone('noQMCheck')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperQBitMBit.setStatus('mandatory')
aix1PktOperUseRejectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPktRetrans", 1), ("pktRetrans", 2))).clone('noPktRetrans')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperUseRejectPkts.setStatus('mandatory')
aix1PktOperSendInitialRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialRestart", 1), ("noInitialRestart", 2))).clone('initialRestart')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperSendInitialRestart.setStatus('mandatory')
aix1PktOperStdsBody = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccittPktLvl", 1), ("isoPktLvl", 2))).clone('ccittPktLvl')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperStdsBody.setStatus('mandatory')
aix1PktOperFacilChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checkFacils", 1), ("noCheckFacils", 2))).clone('noCheckFacils')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperFacilChecking.setStatus('mandatory')
aix1PktOperUndefinedFacils = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUndefFacils", 1), ("undefFacils", 2))).clone('noUndefFacils')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperUndefinedFacils.setStatus('mandatory')
aix1PktOperDefMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 256, 512, 1024))).clone(namedValues=NamedValues(("pkt128", 128), ("pkt256", 256), ("pkt512", 512), ("pkt1024", 1024))).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperDefMaxPktSize.setStatus('mandatory')
aix1PktOperDefWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperDefWindowSize.setStatus('mandatory')
aix1PktOperNegMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperNegMaxPktSize.setStatus('mandatory')
aix1PktOperNegWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperNegWindowSize.setStatus('mandatory')
aix1PktOperPacketizingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperPacketizingTimer.setStatus('mandatory')
aix1PktOperPVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperPVCOffset.setStatus('mandatory')
aix1PktOperSVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperSVCOffset.setStatus('mandatory')
aix1PktStatTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 3, 3), )
if mibBuilder.loadTexts: aix1PktStatTable.setStatus('mandatory')
aix1PktStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PktStatIndex"))
if mibBuilder.loadTexts: aix1PktStatEntry.setStatus('mandatory')
aix1PktStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktStatIndex.setStatus('mandatory')
aix1PktStatInCharsPerSec80s = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktStatInCharsPerSec80s.setStatus('mandatory')
aix1PktStatOutCharsPerSec80s = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktStatOutCharsPerSec80s.setStatus('mandatory')
aix1FrmAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 4, 1), )
if mibBuilder.loadTexts: aix1FrmAdminTable.setStatus('mandatory')
aix1FrmAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1FrmAdminIndex"))
if mibBuilder.loadTexts: aix1FrmAdminEntry.setStatus('mandatory')
aix1FrmAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmAdminIndex.setStatus('mandatory')
aix1FrmAdminIdleRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idleRRs", 1), ("noIdleRRs", 2))).clone('idleRRs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1FrmAdminIdleRRs.setStatus('mandatory')
aix1FrmAdminRandomizeT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("randomT1", 1), ("noRandomT1", 2))).clone('randomT1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1FrmAdminRandomizeT1.setStatus('mandatory')
aix1FrmOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 4, 2), )
if mibBuilder.loadTexts: aix1FrmOperTable.setStatus('mandatory')
aix1FrmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1FrmOperIndex"))
if mibBuilder.loadTexts: aix1FrmOperEntry.setStatus('mandatory')
aix1FrmOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmOperIndex.setStatus('mandatory')
aix1FrmOperIdleRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idleRRs", 1), ("noIdleRRs", 2))).clone('idleRRs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmOperIdleRRs.setStatus('mandatory')
aix1FrmOperRandomizeT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("randomT1", 1), ("noRandomT1", 2))).clone('randomT1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmOperRandomizeT1.setStatus('mandatory')
aix1PhysAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 5, 1), )
if mibBuilder.loadTexts: aix1PhysAdminTable.setStatus('mandatory')
aix1PhysAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PhysAdminIndex"))
if mibBuilder.loadTexts: aix1PhysAdminEntry.setStatus('mandatory')
aix1PhysAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysAdminIndex.setStatus('mandatory')
aix1PhysAdminInterFrameDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ifdDisabled", 1), ("ifdEnabled", 2))).clone('ifdDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PhysAdminInterFrameDelayStatus.setStatus('mandatory')
aix1PhysAdminInterFrameDelayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PhysAdminInterFrameDelayInterval.setStatus('mandatory')
aix1PhysAdminT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lbo0to133", 1), ("lbo133to266", 2), ("lbo266to399", 3), ("lbo399to533", 4), ("lbo533to655", 5))).clone('lbo133to266')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PhysAdminT1LineBuildOut.setStatus('mandatory')
aix1PhysOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 5, 2), )
if mibBuilder.loadTexts: aix1PhysOperTable.setStatus('mandatory')
aix1PhysOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PhysOperIndex"))
if mibBuilder.loadTexts: aix1PhysOperEntry.setStatus('mandatory')
aix1PhysOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperIndex.setStatus('mandatory')
aix1PhysOperInterFrameDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ifdDisabled", 1), ("ifdEnabled", 2))).clone('ifdDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperInterFrameDelayStatus.setStatus('mandatory')
aix1PhysOperInterFrameDelayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperInterFrameDelayInterval.setStatus('mandatory')
aix1PhysOperT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lbo0to133", 1), ("lbo133to266", 2), ("lbo266to399", 3), ("lbo399to533", 4), ("lbo533to655", 5))).clone('lbo133to266')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperT1LineBuildOut.setStatus('mandatory')
aix1PhysStatTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 5, 3), )
if mibBuilder.loadTexts: aix1PhysStatTable.setStatus('mandatory')
aix1PhysStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 5, 3, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PhysStatIndex"))
if mibBuilder.loadTexts: aix1PhysStatEntry.setStatus('mandatory')
aix1PhysStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysStatIndex.setStatus('mandatory')
aix1PhysStatTxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysStatTxAborts.setStatus('mandatory')
aix1CircuitTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 6, 1), )
if mibBuilder.loadTexts: aix1CircuitTable.setStatus('mandatory')
aix1CircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1CircuitLinkId"), (0, "AIX1-MIB", "aix1CircuitChannelNumber"))
if mibBuilder.loadTexts: aix1CircuitEntry.setStatus('mandatory')
aix1CircuitLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitLinkId.setStatus('mandatory')
aix1CircuitChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitChannelNumber.setStatus('mandatory')
aix1CircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("csCall", 3), ("csDisco", 4), ("csCancel", 5), ("csReject", 6), ("csCol", 7), ("csUncol", 8), ("npCall", 9), ("npDisco", 10), ("npCancel", 11), ("npReject", 12), ("npCol", 13), ("npUncol", 14), ("trapped", 15), ("csSuspend", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitState.setStatus('mandatory')
aix1CircuitConType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 11, 12))).clone(namedValues=NamedValues(("lmux", 1), ("rmux", 2), ("debug", 5), ("background", 6), ("pvc", 11), ("svc", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitConType.setStatus('mandatory')
aix1CircuitBCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitBCNumber.setStatus('mandatory')
aix1CircuitUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitUserData.setStatus('mandatory')
aix1CircuitRemoteBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitRemoteBasePort.setStatus('mandatory')
aix1CircuitRemoteVCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitRemoteVCNumber.setStatus('mandatory')
aix1CircuitPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitPktsSent.setStatus('mandatory')
aix1CircuitPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitPktsRcvd.setStatus('mandatory')
aix1CircuitOperPVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("connectOnActivity", 3), ("passive", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1CircuitOperPVCType.setStatus('mandatory')
aix1CircuitOperPVCTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1CircuitOperPVCTimer.setStatus('mandatory')
aix1VCTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 6, 2), )
if mibBuilder.loadTexts: aix1VCTable.setStatus('mandatory')
aix1VCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1VCVCNumber"))
if mibBuilder.loadTexts: aix1VCEntry.setStatus('mandatory')
aix1VCVCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 287))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCVCNumber.setStatus('mandatory')
aix1VCState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("csCall", 3), ("csDisco", 4), ("csCancel", 5), ("csReject", 6), ("csCol", 7), ("csUncol", 8), ("npCall", 9), ("npDisco", 10), ("npCancel", 11), ("npReject", 12), ("npCol", 13), ("npUncol", 14), ("trapped", 15), ("csSuspend", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCState.setStatus('mandatory')
aix1VCConType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 11, 12))).clone(namedValues=NamedValues(("lmux", 1), ("rmux", 2), ("debug", 5), ("background", 6), ("pvc", 11), ("svc", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCConType.setStatus('mandatory')
aix1VCBCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCBCNumber.setStatus('mandatory')
aix1VCUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCUserData.setStatus('mandatory')
aix1VCRemoteBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCRemoteBasePort.setStatus('mandatory')
aix1VCRemoteVCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCRemoteVCNumber.setStatus('mandatory')
aix1VCPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCPktsSent.setStatus('mandatory')
aix1VCPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCPktsRcvd.setStatus('mandatory')
aix1VCOperPVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("connectOnActivity", 3), ("passive", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1VCOperPVCType.setStatus('mandatory')
aix1VCOperPVCTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1VCOperPVCTimer.setStatus('mandatory')
aix1AdminPVCTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 6, 3), )
if mibBuilder.loadTexts: aix1AdminPVCTable.setStatus('mandatory')
aix1AdminPVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1), ).setIndexNames((0, "AIX1-MIB", "aix1AdminPVCLinkId"), (0, "AIX1-MIB", "aix1AdminPVCChannelNumber"))
if mibBuilder.loadTexts: aix1AdminPVCEntry.setStatus('mandatory')
aix1AdminPVCLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1AdminPVCLinkId.setStatus('mandatory')
aix1AdminPVCChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1AdminPVCChannelNumber.setStatus('mandatory')
aix1AdminPVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("connectOnActivity", 3), ("passive", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminPVCType.setStatus('mandatory')
aix1AdminPVCTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminPVCTimer.setStatus('mandatory')
mibBuilder.exportSymbols("AIX1-MIB", ai192Ver708=ai192Ver708, aix1CircuitConType=aix1CircuitConType, aix1StatErrGfctlDiscards=aix1StatErrGfctlDiscards, aix1StatErrLogOutLost=aix1StatErrLogOutLost, ai196Ver721=ai196Ver721, ai196Ver710=ai196Ver710, ai196Ver7=ai196Ver7, aix1PktAdminUseRejectPkts=aix1PktAdminUseRejectPkts, aix1PktOperSendInitialRestart=aix1PktOperSendInitialRestart, aix1StatErrVcMuxErrs=aix1StatErrVcMuxErrs, ai196Ver720=ai196Ver720, ai192Ver72=ai192Ver72, aix1AdminRollover=aix1AdminRollover, aix1PktOperPacketizingTimer=aix1PktOperPacketizingTimer, aix1FrmOperEntry=aix1FrmOperEntry, aix1PhysOperInterFrameDelayStatus=aix1PhysOperInterFrameDelayStatus, aix1StatErrUwteBadTrans=aix1StatErrUwteBadTrans, aiX1Pkt=aiX1Pkt, aix1AdminPVCTimer=aix1AdminPVCTimer, aix1CircuitUserData=aix1CircuitUserData, aix1PktAdminTable=aix1PktAdminTable, aix1PhysAdminIndex=aix1PhysAdminIndex, aii=aii, ai196Ver70=ai196Ver70, ai196Ver708=ai196Ver708, aix1PktAdminNegWindowSize=aix1PktAdminNegWindowSize, aix1PktAdminStdsBody=aix1PktAdminStdsBody, aix1ApplOperLinkMode=aix1ApplOperLinkMode, aiX1Appl=aiX1Appl, aix1VCRemoteBasePort=aix1VCRemoteBasePort, aix1ApplOperTable=aix1ApplOperTable, aix1VCOperPVCType=aix1VCOperPVCType, ai196Ver77=ai196Ver77, aix1PktStatEntry=aix1PktStatEntry, aix1PhysOperT1LineBuildOut=aix1PhysOperT1LineBuildOut, aix1PhysOperTable=aix1PhysOperTable, aix1StatErrX25OutData=aix1StatErrX25OutData, aix1StatErrEmptyPktsRcv=aix1StatErrEmptyPktsRcv, aix1ApplOperIndex=aix1ApplOperIndex, aix1PktAdminIndex=aix1PktAdminIndex, aix1ApplOperEntry=aix1ApplOperEntry, aix1CircuitPktsSent=aix1CircuitPktsSent, aix1PhysOperIndex=aix1PhysOperIndex, aix1FrmOperIdleRRs=aix1FrmOperIdleRRs, aix1PhysStatTxAborts=aix1PhysStatTxAborts, ai196=ai196, aix1PhysStatEntry=aix1PhysStatEntry, aix1StatInCharsPerSec80s=aix1StatInCharsPerSec80s, aix1PktAdminPacketizingTimer=aix1PktAdminPacketizingTimer, aix1CircuitEntry=aix1CircuitEntry, aix1ApplAdminOPSINEProto=aix1ApplAdminOPSINEProto, aix1StatErrX25InData=aix1StatErrX25InData, aix1PktAdminSendInitialRestart=aix1PktAdminSendInitialRestart, aix1ApplOperXONXOFFProto=aix1ApplOperXONXOFFProto, aix1FrmAdminIndex=aix1FrmAdminIndex, aix1CircuitLinkId=aix1CircuitLinkId, aix1CircuitBCNumber=aix1CircuitBCNumber, aix1FrmAdminTable=aix1FrmAdminTable, aix1VCState=aix1VCState, aix1ApplAdminTL1Proto=aix1ApplAdminTL1Proto, aix1PktOperQBitMBit=aix1PktOperQBitMBit, ai196Ver72=ai196Ver72, aix1ApplOperNMAProto=aix1ApplOperNMAProto, aix1AdminPVCTable=aix1AdminPVCTable, aix1StatErrGfctlXoffs=aix1StatErrGfctlXoffs, aix1VCOperPVCTimer=aix1VCOperPVCTimer, aix1ApplAdminLinkConnectionMode=aix1ApplAdminLinkConnectionMode, aix1AdminPVCType=aix1AdminPVCType, aiX1System=aiX1System, ai192Ver70=ai192Ver70, aix1CircuitPktsRcvd=aix1CircuitPktsRcvd, aix1PktOperEntry=aix1PktOperEntry, aix1PktAdminConformanceMode=aix1PktAdminConformanceMode, aix1PktAdminFacilChecking=aix1PktAdminFacilChecking, aiX1=aiX1, aix1PktOperPVCOffset=aix1PktOperPVCOffset, aix1PktStatOutCharsPerSec80s=aix1PktStatOutCharsPerSec80s, aix1PhysAdminTable=aix1PhysAdminTable, aix1PhysOperEntry=aix1PhysOperEntry, ai192Ver71=ai192Ver71, aix1PhysAdminInterFrameDelayInterval=aix1PhysAdminInterFrameDelayInterval, aix1PhysOperInterFrameDelayInterval=aix1PhysOperInterFrameDelayInterval, aix1Bx25AdminCallDown=aix1Bx25AdminCallDown, aix1AdminPVCChannelNumber=aix1AdminPVCChannelNumber, aix1PktAdminEntry=aix1PktAdminEntry, aix1PktOperSVCOffset=aix1PktOperSVCOffset, aix1CircuitChannelNumber=aix1CircuitChannelNumber, aix1ApplAdminIndex=aix1ApplAdminIndex, aix1PktOperNegMaxPktSize=aix1PktOperNegMaxPktSize, aix1ApplAdminResetErrs=aix1ApplAdminResetErrs, aix1CircuitOperPVCTimer=aix1CircuitOperPVCTimer, aix1ApplAdminXONXOFFProto=aix1ApplAdminXONXOFFProto, aiSystemOID=aiSystemOID, ai192Ver77=ai192Ver77, aix1FrmAdminRandomizeT1=aix1FrmAdminRandomizeT1, aix1FrmOperTable=aix1FrmOperTable, aix1ApplOperOPSINEProto=aix1ApplOperOPSINEProto, aix1PktOperUndefinedFacils=aix1PktOperUndefinedFacils, aix1CircuitRemoteBasePort=aix1CircuitRemoteBasePort, aix1VCUserData=aix1VCUserData, aix1ApplAdminEntry=aix1ApplAdminEntry, aix1Bx25AdminLinkUp=aix1Bx25AdminLinkUp, aix1CircuitRemoteVCNumber=aix1CircuitRemoteVCNumber, aiX1VC=aiX1VC, aix1ApplAdminNMAProto=aix1ApplAdminNMAProto, aix1VCConType=aix1VCConType, aix1VCBCNumber=aix1VCBCNumber, aix1ApplAdminTable=aix1ApplAdminTable, aix1ApplAdminLinkDescription=aix1ApplAdminLinkDescription, aix1PhysAdminEntry=aix1PhysAdminEntry, ai192Ver709=ai192Ver709, aix1FrmOperIndex=aix1FrmOperIndex, aix1CircuitTable=aix1CircuitTable, aix1AdminPVCEntry=aix1AdminPVCEntry, aix1ApplAdminLinkStart=aix1ApplAdminLinkStart, ai196Ver71=ai196Ver71, aix1VCTable=aix1VCTable, aix1PhysStatTable=aix1PhysStatTable, ai192Ver711=ai192Ver711, aix1PktAdminDBit=aix1PktAdminDBit, aix1PktOperConformanceMode=aix1PktOperConformanceMode, aix1PktStatIndex=aix1PktStatIndex, aix1StatErrX25OutPkt=aix1StatErrX25OutPkt, aix1ApplOperLinkConnectionMode=aix1ApplOperLinkConnectionMode, aiX1Phys=aiX1Phys, ai192=ai192, aix1PktAdminDefWindowSize=aix1PktAdminDefWindowSize, aix1PhysAdminT1LineBuildOut=aix1PhysAdminT1LineBuildOut, aix1PktOperDBit=aix1PktOperDBit, aix1PktAdminDefMaxPktSize=aix1PktAdminDefMaxPktSize, aix1PhysStatIndex=aix1PhysStatIndex, ai192Ver720=ai192Ver720, ai192Ver710=ai192Ver710, aix1StatOutCharsPerSec80s=aix1StatOutCharsPerSec80s, aix1VCRemoteVCNumber=aix1VCRemoteVCNumber, aix1StatErrPlogCount=aix1StatErrPlogCount, aix1PktOperUseRejectPkts=aix1PktOperUseRejectPkts, aix1PktOperStdsBody=aix1PktOperStdsBody, aix1VCPktsSent=aix1VCPktsSent, aix1PktOperTable=aix1PktOperTable, aix1PktAdminSVCOffset=aix1PktAdminSVCOffset, aix1StatErrUwteMissingFlds=aix1StatErrUwteMissingFlds, aix1PktOperNegWindowSize=aix1PktOperNegWindowSize, aix1PhysAdminInterFrameDelayStatus=aix1PhysAdminInterFrameDelayStatus, aix1PktOperIndex=aix1PktOperIndex, aix1PktOperFacilChecking=aix1PktOperFacilChecking, aix1AdminPVCLinkId=aix1AdminPVCLinkId, aix1VCEntry=aix1VCEntry, aix1ApplAdminLinkMode=aix1ApplAdminLinkMode, aix1FrmAdminIdleRRs=aix1FrmAdminIdleRRs, aix1VCVCNumber=aix1VCVCNumber, aix1PktStatInCharsPerSec80s=aix1PktStatInCharsPerSec80s, aix1FrmAdminEntry=aix1FrmAdminEntry, ai192Ver7=ai192Ver7, IfIndexType=IfIndexType, aix1PktAdminQBitMBit=aix1PktAdminQBitMBit, aix1ApplOperTL1Proto=aix1ApplOperTL1Proto, aix1StatErrX25OutChoked=aix1StatErrX25OutChoked, aix1PktOperDefMaxPktSize=aix1PktOperDefMaxPktSize, aix1PktAdminNegMaxPktSize=aix1PktAdminNegMaxPktSize, aiX1Frm=aiX1Frm, aix1StatErrUwteBadFlds=aix1StatErrUwteBadFlds, aix1CircuitState=aix1CircuitState, ai196Ver709=ai196Ver709, aix1Bx25AdminDMlock=aix1Bx25AdminDMlock, ai192Ver721=ai192Ver721, aix1PktAdminUndefinedFacils=aix1PktAdminUndefinedFacils, aix1AdminGbufXoffThreshold=aix1AdminGbufXoffThreshold, aix1FrmOperRandomizeT1=aix1FrmOperRandomizeT1, aix1PktStatTable=aix1PktStatTable, aix1ApplOperLinkDescription=aix1ApplOperLinkDescription, ai196Ver711=ai196Ver711, aix1PktAdminPVCOffset=aix1PktAdminPVCOffset, aix1CircuitOperPVCType=aix1CircuitOperPVCType, aix1AdminGbufRecovThreshold=aix1AdminGbufRecovThreshold, aix1VCPktsRcvd=aix1VCPktsRcvd, aix1PktOperDefWindowSize=aix1PktOperDefWindowSize)
