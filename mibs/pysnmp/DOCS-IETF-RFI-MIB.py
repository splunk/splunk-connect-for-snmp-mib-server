#
# PySNMP MIB module DOCS-IETF-RFI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-IETF-RFI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:37:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, IpAddress, MibIdentifier, ObjectIdentity, iso, Unsigned32, Gauge32, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, transmission, Bits, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibIdentifier", "ObjectIdentity", "iso", "Unsigned32", "Gauge32", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "transmission", "Bits", "TimeTicks", "Counter64")
DisplayString, RowStatus, TruthValue, TextualConvention, TimeStamp, TimeInterval, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention", "TimeStamp", "TimeInterval", "MacAddress")
docsIfMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 127))
docsIfMib.setRevisions(('2003-03-02 00:00', '1999-08-19 00:00',))
if mibBuilder.loadTexts: docsIfMib.setLastUpdated('200303020000Z')
if mibBuilder.loadTexts: docsIfMib.setOrganization('IETF IPCDN Working Group')
class TenthdBmV(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class TenthdB(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class DocsisVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("docsis10", 1), ("docsis11", 2), ("docsis20", 3))

class DocsisQosVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("docsis10", 1), ("docsis11", 2))

class DocsisUpstreamType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("tdma", 1), ("atdma", 2), ("scdma", 3), ("tdmaAndAtdma", 4))

class DocsisUpstreamTypeStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("tdma", 1), ("atdma", 2), ("scdma", 3))

docsIfMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1))
docsIfBaseObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1, 1))
docsIfCmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1, 2))
docsIfCmtsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1, 3))
docsIfDownstreamChannelTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1), )
if mibBuilder.loadTexts: docsIfDownstreamChannelTable.setStatus('current')
docsIfDownstreamChannelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfDownstreamChannelEntry.setStatus('current')
docsIfDownChannelId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfDownChannelId.setStatus('current')
docsIfDownChannelFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelFrequency.setStatus('current')
docsIfDownChannelWidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000000))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelWidth.setStatus('current')
docsIfDownChannelModulation = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("qam64", 3), ("qam256", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelModulation.setStatus('current')
docsIfDownChannelInterleave = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("taps8Increment16", 3), ("taps16Increment8", 4), ("taps32Increment4", 5), ("taps64Increment2", 6), ("taps128Increment1", 7), ("taps12increment17", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelInterleave.setStatus('current')
docsIfDownChannelPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 6), TenthdBmV()).setUnits('dBmV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelPower.setStatus('current')
docsIfDownChannelAnnex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfDownChannelAnnex.setStatus('current')
docsIfUpstreamChannelTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2), )
if mibBuilder.loadTexts: docsIfUpstreamChannelTable.setStatus('current')
docsIfUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfUpstreamChannelEntry.setStatus('current')
docsIfUpChannelId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfUpChannelId.setStatus('current')
docsIfUpChannelFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('hertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelFrequency.setStatus('current')
docsIfUpChannelWidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000000))).setUnits('hertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelWidth.setStatus('current')
docsIfUpChannelModulationProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelModulationProfile.setStatus('current')
docsIfUpChannelSlotSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelSlotSize.setStatus('current')
docsIfUpChannelTxTimingOffset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfUpChannelTxTimingOffset.setStatus('current')
docsIfUpChannelRangingBackoffStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffStart.setStatus('current')
docsIfUpChannelRangingBackoffEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffEnd.setStatus('current')
docsIfUpChannelTxBackoffStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffStart.setStatus('current')
docsIfUpChannelTxBackoffEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffEnd.setStatus('current')
docsIfUpChannelScdmaActiveCodes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 128), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelScdmaActiveCodes.setStatus('current')
docsIfUpChannelScdmaCodesPerSlot = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 32), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelScdmaCodesPerSlot.setStatus('current')
docsIfUpChannelScdmaFrameSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelScdmaFrameSize.setStatus('current')
docsIfUpChannelScdmaHoppingSeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelScdmaHoppingSeed.setStatus('current')
docsIfUpChannelType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 15), DocsisUpstreamType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelType.setStatus('current')
docsIfUpChannelCloneFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelCloneFrom.setStatus('current')
docsIfUpChannelUpdate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelUpdate.setStatus('current')
docsIfUpChannelStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelStatus.setStatus('current')
docsIfUpChannelPreEqEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfUpChannelPreEqEnable.setStatus('current')
docsIfQosProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3), )
if mibBuilder.loadTexts: docsIfQosProfileTable.setStatus('current')
docsIfQosProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1), ).setIndexNames((0, "DOCS-IETF-RFI-MIB", "docsIfQosProfIndex"))
if mibBuilder.loadTexts: docsIfQosProfileEntry.setStatus('current')
docsIfQosProfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsIfQosProfIndex.setStatus('current')
docsIfQosProfPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfPriority.setStatus('current')
docsIfQosProfMaxUpBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfMaxUpBandwidth.setStatus('current')
docsIfQosProfGuarUpBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfGuarUpBandwidth.setStatus('current')
docsIfQosProfMaxDownBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfMaxDownBandwidth.setStatus('current')
docsIfQosProfMaxTxBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfMaxTxBurst.setStatus('deprecated')
docsIfQosProfBaselinePrivacy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfBaselinePrivacy.setStatus('current')
docsIfQosProfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfStatus.setStatus('current')
docsIfQosProfMaxTransmitBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfMaxTransmitBurst.setStatus('current')
docsIfSignalQualityTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4), )
if mibBuilder.loadTexts: docsIfSignalQualityTable.setStatus('current')
docsIfSignalQualityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfSignalQualityEntry.setStatus('current')
docsIfSigQIncludesContention = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQIncludesContention.setStatus('current')
docsIfSigQUnerroreds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQUnerroreds.setStatus('current')
docsIfSigQCorrecteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQCorrecteds.setStatus('current')
docsIfSigQUncorrectables = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQUncorrectables.setStatus('current')
docsIfSigQSignalNoise = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 5), TenthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQSignalNoise.setStatus('current')
docsIfSigQMicroreflections = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('dBc').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQMicroreflections.setStatus('current')
docsIfSigQEqualizationData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQEqualizationData.setStatus('current')
docsIfSigQExtUnerroreds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQExtUnerroreds.setStatus('current')
docsIfSigQExtCorrecteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQExtCorrecteds.setStatus('current')
docsIfSigQExtUncorrectables = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQExtUncorrectables.setStatus('current')
docsIfDocsisBaseCapability = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 5), DocsisVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfDocsisBaseCapability.setStatus('current')
docsIfCmMacTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1), )
if mibBuilder.loadTexts: docsIfCmMacTable.setStatus('current')
docsIfCmMacEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmMacEntry.setStatus('current')
docsIfCmCmtsAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmCmtsAddress.setStatus('current')
docsIfCmCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("atmCells", 0), ("concatenation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmCapabilities.setStatus('current')
docsIfCmRangingRespTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 3), TimeTicks().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmRangingRespTimeout.setStatus('obsolete')
docsIfCmRangingTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 4), TimeInterval().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmRangingTimeout.setStatus('current')
docsIfCmStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2), )
if mibBuilder.loadTexts: docsIfCmStatusTable.setStatus('current')
docsIfCmStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmStatusEntry.setStatus('current')
docsIfCmStatusValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("notReady", 2), ("notSynchronized", 3), ("phySynchronized", 4), ("usParametersAcquired", 5), ("rangingComplete", 6), ("ipComplete", 7), ("todEstablished", 8), ("securityEstablished", 9), ("paramTransferComplete", 10), ("registrationComplete", 11), ("operational", 12), ("accessDenied", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusValue.setStatus('current')
docsIfCmStatusCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusCode.setStatus('current')
docsIfCmStatusTxPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 3), TenthdBmV()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusTxPower.setStatus('current')
docsIfCmStatusResets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusResets.setStatus('current')
docsIfCmStatusLostSyncs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusLostSyncs.setStatus('current')
docsIfCmStatusInvalidMaps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidMaps.setStatus('current')
docsIfCmStatusInvalidUcds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidUcds.setStatus('current')
docsIfCmStatusInvalidRangingResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidRangingResponses.setStatus('current')
docsIfCmStatusInvalidRegistrationResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidRegistrationResponses.setStatus('current')
docsIfCmStatusT1Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT1Timeouts.setStatus('current')
docsIfCmStatusT2Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT2Timeouts.setStatus('current')
docsIfCmStatusT3Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT3Timeouts.setStatus('current')
docsIfCmStatusT4Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT4Timeouts.setStatus('current')
docsIfCmStatusRangingAborteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusRangingAborteds.setStatus('current')
docsIfCmStatusDocsisOperMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 15), DocsisQosVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusDocsisOperMode.setStatus('current')
docsIfCmStatusModulationType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 16), DocsisUpstreamTypeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusModulationType.setStatus('current')
docsIfCmStatusEqualizationData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusEqualizationData.setStatus('current')
docsIfCmServiceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3), )
if mibBuilder.loadTexts: docsIfCmServiceTable.setStatus('current')
docsIfCmServiceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-RFI-MIB", "docsIfCmServiceId"))
if mibBuilder.loadTexts: docsIfCmServiceEntry.setStatus('current')
docsIfCmServiceId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsIfCmServiceId.setStatus('current')
docsIfCmServiceQosProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceQosProfile.setStatus('current')
docsIfCmServiceTxSlotsImmed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsImmed.setStatus('current')
docsIfCmServiceTxSlotsDed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsDed.setStatus('current')
docsIfCmServiceTxRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxRetries.setStatus('current')
docsIfCmServiceTxExceededs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxExceededs.setStatus('current')
docsIfCmServiceRqRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceRqRetries.setStatus('current')
docsIfCmServiceRqExceededs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceRqExceededs.setStatus('current')
docsIfCmServiceExtTxSlotsImmed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceExtTxSlotsImmed.setStatus('current')
docsIfCmServiceExtTxSlotsDed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceExtTxSlotsDed.setStatus('current')
docsIfCmtsMacTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1), )
if mibBuilder.loadTexts: docsIfCmtsMacTable.setStatus('current')
docsIfCmtsMacEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmtsMacEntry.setStatus('current')
docsIfCmtsCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 1), Bits().clone(namedValues=NamedValues(("atmCells", 0), ("concatenation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCapabilities.setStatus('current')
docsIfCmtsSyncInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsSyncInterval.setStatus('current')
docsIfCmtsUcdInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsUcdInterval.setStatus('current')
docsIfCmtsMaxServiceIds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsMaxServiceIds.setStatus('current')
docsIfCmtsInsertionInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsInsertionInterval.setStatus('obsolete')
docsIfCmtsInvitedRangingAttempts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsInvitedRangingAttempts.setStatus('current')
docsIfCmtsInsertInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 7), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsInsertInterval.setStatus('current')
docsIfCmtsStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2), )
if mibBuilder.loadTexts: docsIfCmtsStatusTable.setStatus('current')
docsIfCmtsStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmtsStatusEntry.setStatus('current')
docsIfCmtsStatusInvalidRangeReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidRangeReqs.setStatus('current')
docsIfCmtsStatusRangingAborteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusRangingAborteds.setStatus('current')
docsIfCmtsStatusInvalidRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidRegReqs.setStatus('current')
docsIfCmtsStatusFailedRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusFailedRegReqs.setStatus('current')
docsIfCmtsStatusInvalidDataReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidDataReqs.setStatus('current')
docsIfCmtsStatusT5Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusT5Timeouts.setStatus('current')
docsIfCmtsCmStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3), )
if mibBuilder.loadTexts: docsIfCmtsCmStatusTable.setStatus('current')
docsIfCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1), ).setIndexNames((0, "DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusIndex"))
if mibBuilder.loadTexts: docsIfCmtsCmStatusEntry.setStatus('current')
docsIfCmtsCmStatusIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsIfCmtsCmStatusIndex.setStatus('current')
docsIfCmtsCmStatusMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusMacAddress.setStatus('current')
docsIfCmtsCmStatusIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusIpAddress.setStatus('deprecated')
docsIfCmtsCmStatusDownChannelIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusDownChannelIfIndex.setStatus('current')
docsIfCmtsCmStatusUpChannelIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusUpChannelIfIndex.setStatus('current')
docsIfCmtsCmStatusRxPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 6), TenthdBmV()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusRxPower.setStatus('current')
docsIfCmtsCmStatusTimingOffset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusTimingOffset.setStatus('current')
docsIfCmtsCmStatusEqualizationData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusEqualizationData.setStatus('current')
docsIfCmtsCmStatusValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("ranging", 2), ("rangingAborted", 3), ("rangingComplete", 4), ("ipComplete", 5), ("registrationComplete", 6), ("accessDenied", 7), ("operational", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusValue.setStatus('current')
docsIfCmtsCmStatusUnerroreds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusUnerroreds.setStatus('current')
docsIfCmtsCmStatusCorrecteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusCorrecteds.setStatus('current')
docsIfCmtsCmStatusUncorrectables = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusUncorrectables.setStatus('current')
docsIfCmtsCmStatusSignalNoise = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 13), TenthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusSignalNoise.setStatus('current')
docsIfCmtsCmStatusMicroreflections = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('dBc').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusMicroreflections.setStatus('current')
docsIfCmtsCmStatusExtUnerroreds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusExtUnerroreds.setStatus('current')
docsIfCmtsCmStatusExtCorrecteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusExtCorrecteds.setStatus('current')
docsIfCmtsCmStatusExtUncorrectables = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusExtUncorrectables.setStatus('current')
docsIfCmtsCmStatusDocsisRegMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 18), DocsisQosVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusDocsisRegMode.setStatus('current')
docsIfCmtsCmStatusModulationType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 19), DocsisUpstreamTypeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusModulationType.setStatus('current')
docsIfCmtsCmStatusInetAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusInetAddressType.setStatus('current')
docsIfCmtsCmStatusInetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusInetAddress.setStatus('current')
docsIfCmtsServiceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4), )
if mibBuilder.loadTexts: docsIfCmtsServiceTable.setStatus('current')
docsIfCmtsServiceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-RFI-MIB", "docsIfCmtsServiceId"))
if mibBuilder.loadTexts: docsIfCmtsServiceEntry.setStatus('current')
docsIfCmtsServiceId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsIfCmtsServiceId.setStatus('current')
docsIfCmtsServiceCmStatusIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceCmStatusIndex.setStatus('deprecated')
docsIfCmtsServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("destroyed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsServiceAdminStatus.setStatus('current')
docsIfCmtsServiceQosProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceQosProfile.setStatus('current')
docsIfCmtsServiceCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceCreateTime.setStatus('current')
docsIfCmtsServiceInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceInOctets.setStatus('current')
docsIfCmtsServiceInPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceInPackets.setStatus('current')
docsIfCmtsServiceNewCmStatusIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceNewCmStatusIndex.setStatus('current')
docsIfCmtsModulationTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5), )
if mibBuilder.loadTexts: docsIfCmtsModulationTable.setStatus('current')
docsIfCmtsModulationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1), ).setIndexNames((0, "DOCS-IETF-RFI-MIB", "docsIfCmtsModIndex"), (0, "DOCS-IETF-RFI-MIB", "docsIfCmtsModIntervalUsageCode"))
if mibBuilder.loadTexts: docsIfCmtsModulationEntry.setStatus('current')
docsIfCmtsModIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsIfCmtsModIndex.setStatus('current')
docsIfCmtsModIntervalUsageCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10, 11))).clone(namedValues=NamedValues(("request", 1), ("requestData", 2), ("initialRanging", 3), ("periodicRanging", 4), ("shortData", 5), ("longData", 6), ("advPhyShortData", 9), ("advPhyLongData", 10), ("ugs", 11))))
if mibBuilder.loadTexts: docsIfCmtsModIntervalUsageCode.setStatus('current')
docsIfCmtsModControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModControl.setStatus('current')
docsIfCmtsModType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("qpsk", 2), ("qam16", 3), ("qam8", 4), ("qam32", 5), ("qam64", 6), ("qam128", 7))).clone('qpsk')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModType.setStatus('current')
docsIfCmtsModPreambleLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModPreambleLen.setStatus('current')
docsIfCmtsModDifferentialEncoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModDifferentialEncoding.setStatus('current')
docsIfCmtsModFECErrorCorrection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModFECErrorCorrection.setStatus('current')
docsIfCmtsModFECCodewordLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModFECCodewordLength.setStatus('current')
docsIfCmtsModScramblerSeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModScramblerSeed.setStatus('current')
docsIfCmtsModMaxBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModMaxBurstSize.setStatus('current')
docsIfCmtsModGuardTimeSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsModGuardTimeSize.setStatus('current')
docsIfCmtsModLastCodewordShortened = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModLastCodewordShortened.setStatus('current')
docsIfCmtsModScrambler = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModScrambler.setStatus('current')
docsIfCmtsModByteInterleaverDepth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 14), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModByteInterleaverDepth.setStatus('current')
docsIfCmtsModByteInterleaverBlockSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 15), Unsigned32().clone(18)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModByteInterleaverBlockSize.setStatus('current')
docsIfCmtsModPreambleType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qpsk0", 1), ("qpsk1", 2))).clone('qpsk0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModPreambleType.setStatus('current')
docsIfCmtsModTcmErrorCorrectionOn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModTcmErrorCorrectionOn.setStatus('current')
docsIfCmtsModScdmaInterleaverStepSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModScdmaInterleaverStepSize.setStatus('current')
docsIfCmtsModScdmaSpreaderEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModScdmaSpreaderEnable.setStatus('current')
docsIfCmtsModScdmaSubframeCodes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 128), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModScdmaSubframeCodes.setStatus('current')
docsIfCmtsModChannelType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 21), DocsisUpstreamType().clone('tdma')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModChannelType.setStatus('current')
docsIfCmtsQosProfilePermissions = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 6), Bits().clone(namedValues=NamedValues(("createByManagement", 0), ("updateByManagement", 1), ("createByModems", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsQosProfilePermissions.setStatus('current')
docsIfCmtsMacToCmTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7), )
if mibBuilder.loadTexts: docsIfCmtsMacToCmTable.setStatus('current')
docsIfCmtsMacToCmEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1), ).setIndexNames((0, "DOCS-IETF-RFI-MIB", "docsIfCmtsCmMac"))
if mibBuilder.loadTexts: docsIfCmtsMacToCmEntry.setStatus('current')
docsIfCmtsCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsIfCmtsCmMac.setStatus('current')
docsIfCmtsCmPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmPtr.setStatus('current')
docsIfCmtsChannelUtilizationInterval = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsChannelUtilizationInterval.setStatus('current')
docsIfCmtsChannelUtilizationTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9), )
if mibBuilder.loadTexts: docsIfCmtsChannelUtilizationTable.setStatus('current')
docsIfCmtsChannelUtilizationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-RFI-MIB", "docsIfCmtsChannelUtIfType"), (0, "DOCS-IETF-RFI-MIB", "docsIfCmtsChannelUtId"))
if mibBuilder.loadTexts: docsIfCmtsChannelUtilizationEntry.setStatus('current')
docsIfCmtsChannelUtIfType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1, 1), IANAifType())
if mibBuilder.loadTexts: docsIfCmtsChannelUtIfType.setStatus('current')
docsIfCmtsChannelUtId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsIfCmtsChannelUtId.setStatus('current')
docsIfCmtsChannelUtUtilization = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsChannelUtUtilization.setStatus('current')
docsIfCmtsDownChannelCounterTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10), )
if mibBuilder.loadTexts: docsIfCmtsDownChannelCounterTable.setStatus('current')
docsIfCmtsDownChannelCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmtsDownChannelCounterEntry.setStatus('current')
docsIfCmtsDownChnlCtrId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsDownChnlCtrId.setStatus('current')
docsIfCmtsDownChnlCtrTotalBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsDownChnlCtrTotalBytes.setStatus('current')
docsIfCmtsDownChnlCtrUsedBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsDownChnlCtrUsedBytes.setStatus('current')
docsIfCmtsDownChnlCtrExtTotalBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsDownChnlCtrExtTotalBytes.setStatus('current')
docsIfCmtsDownChnlCtrExtUsedBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsDownChnlCtrExtUsedBytes.setStatus('current')
docsIfCmtsUpChannelCounterTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11), )
if mibBuilder.loadTexts: docsIfCmtsUpChannelCounterTable.setStatus('current')
docsIfCmtsUpChannelCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmtsUpChannelCounterEntry.setStatus('current')
docsIfCmtsUpChnlCtrId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrId.setStatus('current')
docsIfCmtsUpChnlCtrTotalMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrTotalMslots.setStatus('current')
docsIfCmtsUpChnlCtrUcastGrantedMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrUcastGrantedMslots.setStatus('current')
docsIfCmtsUpChnlCtrTotalCntnMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrTotalCntnMslots.setStatus('current')
docsIfCmtsUpChnlCtrUsedCntnMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrUsedCntnMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtTotalMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtTotalMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtUcastGrantedMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtUcastGrantedMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtTotalCntnMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtTotalCntnMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtUsedCntnMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtUsedCntnMslots.setStatus('current')
docsIfCmtsUpChnlCtrCollCntnMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrCollCntnMslots.setStatus('current')
docsIfCmtsUpChnlCtrTotalCntnReqMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrTotalCntnReqMslots.setStatus('current')
docsIfCmtsUpChnlCtrUsedCntnReqMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrUsedCntnReqMslots.setStatus('current')
docsIfCmtsUpChnlCtrCollCntnReqMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrCollCntnReqMslots.setStatus('current')
docsIfCmtsUpChnlCtrTotalCntnReqDataMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrTotalCntnReqDataMslots.setStatus('current')
docsIfCmtsUpChnlCtrUsedCntnReqDataMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrUsedCntnReqDataMslots.setStatus('current')
docsIfCmtsUpChnlCtrCollCntnReqDataMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrCollCntnReqDataMslots.setStatus('current')
docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots.setStatus('current')
docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots.setStatus('current')
docsIfCmtsUpChnlCtrCollCntnInitMaintMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrCollCntnInitMaintMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtCollCntnMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtCollCntnMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtTotalCntnReqMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtTotalCntnReqMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtUsedCntnReqMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtUsedCntnReqMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtCollCntnReqMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtCollCntnReqMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots.setStatus('current')
docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots.setStatus('current')
docsIfNotification = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 2))
docsIfConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3))
docsIfCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3, 1))
docsIfGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3, 2))
docsIfBasicCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 127, 3, 1, 1)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfBasicGroup"), ("DOCS-IETF-RFI-MIB", "docsIfCmGroup"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfBasicCompliance = docsIfBasicCompliance.setStatus('current')
docsIfBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 1)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfDownChannelId"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelFrequency"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelWidth"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelModulation"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelInterleave"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelPower"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelId"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelFrequency"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelWidth"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelModulationProfile"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelSlotSize"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelTxTimingOffset"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelRangingBackoffStart"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelRangingBackoffEnd"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelTxBackoffStart"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelTxBackoffEnd"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfPriority"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfMaxUpBandwidth"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfGuarUpBandwidth"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfMaxDownBandwidth"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfMaxTxBurst"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfBaselinePrivacy"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfStatus"), ("DOCS-IETF-RFI-MIB", "docsIfSigQIncludesContention"), ("DOCS-IETF-RFI-MIB", "docsIfSigQUnerroreds"), ("DOCS-IETF-RFI-MIB", "docsIfSigQCorrecteds"), ("DOCS-IETF-RFI-MIB", "docsIfSigQUncorrectables"), ("DOCS-IETF-RFI-MIB", "docsIfSigQSignalNoise"), ("DOCS-IETF-RFI-MIB", "docsIfSigQMicroreflections"), ("DOCS-IETF-RFI-MIB", "docsIfSigQEqualizationData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfBasicGroup = docsIfBasicGroup.setStatus('current')
docsIfCmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 2)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfCmCmtsAddress"), ("DOCS-IETF-RFI-MIB", "docsIfCmCapabilities"), ("DOCS-IETF-RFI-MIB", "docsIfCmRangingTimeout"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusValue"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusCode"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusTxPower"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusResets"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusLostSyncs"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidMaps"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidUcds"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidRangingResponses"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidRegistrationResponses"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT1Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT2Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT3Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT4Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusRangingAborteds"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceQosProfile"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxSlotsImmed"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxSlotsDed"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxRetries"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxExceededs"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceRqRetries"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceRqExceededs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfCmGroup = docsIfCmGroup.setStatus('current')
docsIfCmtsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 3)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfCmtsCapabilities"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsSyncInterval"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUcdInterval"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsMaxServiceIds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsInvitedRangingAttempts"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsInsertInterval"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusInvalidRangeReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusRangingAborteds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusInvalidRegReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusFailedRegReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusInvalidDataReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusT5Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusIpAddress"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusDownChannelIfIndex"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusUpChannelIfIndex"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusRxPower"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusTimingOffset"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusEqualizationData"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusValue"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusUnerroreds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusCorrecteds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusUncorrectables"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusSignalNoise"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusMicroreflections"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceCmStatusIndex"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceAdminStatus"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceQosProfile"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceCreateTime"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceInOctets"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceInPackets"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModType"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModControl"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModPreambleLen"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModDifferentialEncoding"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModFECErrorCorrection"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModFECCodewordLength"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModScramblerSeed"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModMaxBurstSize"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModGuardTimeSize"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModLastCodewordShortened"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModScrambler"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsQosProfilePermissions"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfCmtsGroup = docsIfCmtsGroup.setStatus('current')
docsIfCompliancesV2 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3, 3))
docsIfGroupsV2 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3, 4))
docsIfBasicComplianceV2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 127, 3, 3, 1)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfBasicGroupV2"), ("DOCS-IETF-RFI-MIB", "docsIfCmGroupV2"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsGroupV2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfBasicComplianceV2 = docsIfBasicComplianceV2.setStatus('current')
docsIfBasicGroupV2 = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 4, 1)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfDownChannelId"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelFrequency"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelWidth"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelModulation"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelInterleave"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelPower"), ("DOCS-IETF-RFI-MIB", "docsIfDownChannelAnnex"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelId"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelFrequency"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelWidth"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelModulationProfile"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelSlotSize"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelTxTimingOffset"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelRangingBackoffStart"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelRangingBackoffEnd"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelTxBackoffStart"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelTxBackoffEnd"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelScdmaActiveCodes"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelScdmaCodesPerSlot"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelScdmaFrameSize"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelScdmaHoppingSeed"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelType"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelCloneFrom"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelUpdate"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelStatus"), ("DOCS-IETF-RFI-MIB", "docsIfUpChannelPreEqEnable"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfPriority"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfMaxUpBandwidth"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfGuarUpBandwidth"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfMaxDownBandwidth"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfBaselinePrivacy"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfStatus"), ("DOCS-IETF-RFI-MIB", "docsIfQosProfMaxTransmitBurst"), ("DOCS-IETF-RFI-MIB", "docsIfSigQIncludesContention"), ("DOCS-IETF-RFI-MIB", "docsIfSigQUnerroreds"), ("DOCS-IETF-RFI-MIB", "docsIfSigQCorrecteds"), ("DOCS-IETF-RFI-MIB", "docsIfSigQUncorrectables"), ("DOCS-IETF-RFI-MIB", "docsIfSigQSignalNoise"), ("DOCS-IETF-RFI-MIB", "docsIfSigQMicroreflections"), ("DOCS-IETF-RFI-MIB", "docsIfSigQEqualizationData"), ("DOCS-IETF-RFI-MIB", "docsIfSigQExtUnerroreds"), ("DOCS-IETF-RFI-MIB", "docsIfSigQExtCorrecteds"), ("DOCS-IETF-RFI-MIB", "docsIfSigQExtUncorrectables"), ("DOCS-IETF-RFI-MIB", "docsIfDocsisBaseCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfBasicGroupV2 = docsIfBasicGroupV2.setStatus('current')
docsIfCmGroupV2 = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 4, 2)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfCmCmtsAddress"), ("DOCS-IETF-RFI-MIB", "docsIfCmCapabilities"), ("DOCS-IETF-RFI-MIB", "docsIfCmRangingTimeout"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusValue"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusCode"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusTxPower"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusResets"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusLostSyncs"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidMaps"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidUcds"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidRangingResponses"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusInvalidRegistrationResponses"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT1Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT2Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT3Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusT4Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusRangingAborteds"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusModulationType"), ("DOCS-IETF-RFI-MIB", "docsIfCmStatusEqualizationData"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceQosProfile"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxSlotsImmed"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxSlotsDed"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxRetries"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceTxExceededs"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceRqRetries"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceRqExceededs"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceExtTxSlotsImmed"), ("DOCS-IETF-RFI-MIB", "docsIfCmServiceExtTxSlotsDed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfCmGroupV2 = docsIfCmGroupV2.setStatus('current')
docsIfCmtsGroupV2 = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 4, 3)).setObjects(("DOCS-IETF-RFI-MIB", "docsIfCmtsCapabilities"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsSyncInterval"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUcdInterval"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsMaxServiceIds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsInvitedRangingAttempts"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsInsertInterval"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusInvalidRangeReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusRangingAborteds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusInvalidRegReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusFailedRegReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusInvalidDataReqs"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsStatusT5Timeouts"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusDownChannelIfIndex"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusUpChannelIfIndex"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusRxPower"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusTimingOffset"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusEqualizationData"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusValue"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusUnerroreds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusCorrecteds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusUncorrectables"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusSignalNoise"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusMicroreflections"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusExtUnerroreds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusExtCorrecteds"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusExtUncorrectables"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusInetAddressType"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmStatusInetAddress"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceAdminStatus"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceQosProfile"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceCreateTime"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceInOctets"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceInPackets"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsServiceNewCmStatusIndex"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModType"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModControl"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModPreambleLen"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModDifferentialEncoding"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModFECErrorCorrection"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModFECCodewordLength"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModScramblerSeed"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModMaxBurstSize"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModGuardTimeSize"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModLastCodewordShortened"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModScrambler"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModByteInterleaverDepth"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModByteInterleaverBlockSize"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModPreambleType"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModTcmErrorCorrectionOn"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModScdmaInterleaverStepSize"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModScdmaSpreaderEnable"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModScdmaSubframeCodes"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsModChannelType"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsQosProfilePermissions"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsCmPtr"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsChannelUtilizationInterval"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsChannelUtUtilization"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsDownChnlCtrId"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsDownChnlCtrTotalBytes"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsDownChnlCtrUsedBytes"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsDownChnlCtrExtTotalBytes"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsDownChnlCtrExtUsedBytes"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrId"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrTotalMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrUcastGrantedMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrTotalCntnMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrUsedCntnMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtTotalMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtUcastGrantedMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtTotalCntnMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtUsedCntnMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrCollCntnMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrTotalCntnReqMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrUsedCntnReqMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrCollCntnReqMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrTotalCntnReqDataMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrUsedCntnReqDataMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrCollCntnReqDataMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrCollCntnInitMaintMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtCollCntnMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtTotalCntnReqMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtUsedCntnReqMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtCollCntnReqMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots"), ("DOCS-IETF-RFI-MIB", "docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfCmtsGroupV2 = docsIfCmtsGroupV2.setStatus('current')
mibBuilder.exportSymbols("DOCS-IETF-RFI-MIB", docsIfCmtsModMaxBurstSize=docsIfCmtsModMaxBurstSize, docsIfCmtsModGuardTimeSize=docsIfCmtsModGuardTimeSize, docsIfCmtsModScdmaSubframeCodes=docsIfCmtsModScdmaSubframeCodes, docsIfUpChannelTxBackoffStart=docsIfUpChannelTxBackoffStart, docsIfUpChannelType=docsIfUpChannelType, docsIfBasicComplianceV2=docsIfBasicComplianceV2, docsIfQosProfIndex=docsIfQosProfIndex, docsIfCmtsStatusFailedRegReqs=docsIfCmtsStatusFailedRegReqs, docsIfCmStatusLostSyncs=docsIfCmStatusLostSyncs, docsIfCmtsCmStatusExtUncorrectables=docsIfCmtsCmStatusExtUncorrectables, docsIfCmtsCmPtr=docsIfCmtsCmPtr, docsIfCmtsServiceId=docsIfCmtsServiceId, docsIfCmtsUpChnlCtrTotalCntnMslots=docsIfCmtsUpChnlCtrTotalCntnMslots, docsIfCmStatusDocsisOperMode=docsIfCmStatusDocsisOperMode, docsIfQosProfMaxTransmitBurst=docsIfQosProfMaxTransmitBurst, docsIfCmtsUcdInterval=docsIfCmtsUcdInterval, docsIfCmCmtsAddress=docsIfCmCmtsAddress, docsIfCmStatusInvalidRangingResponses=docsIfCmStatusInvalidRangingResponses, docsIfUpChannelStatus=docsIfUpChannelStatus, docsIfCmtsUpChnlCtrId=docsIfCmtsUpChnlCtrId, docsIfCmtsModScrambler=docsIfCmtsModScrambler, TenthdB=TenthdB, docsIfCmStatusT4Timeouts=docsIfCmStatusT4Timeouts, docsIfCmtsChannelUtId=docsIfCmtsChannelUtId, docsIfConformance=docsIfConformance, docsIfUpChannelRangingBackoffEnd=docsIfUpChannelRangingBackoffEnd, docsIfCmtsServiceAdminStatus=docsIfCmtsServiceAdminStatus, docsIfCmtsModScramblerSeed=docsIfCmtsModScramblerSeed, docsIfUpChannelTxTimingOffset=docsIfUpChannelTxTimingOffset, docsIfCmServiceExtTxSlotsDed=docsIfCmServiceExtTxSlotsDed, docsIfCmServiceId=docsIfCmServiceId, docsIfCmtsInsertionInterval=docsIfCmtsInsertionInterval, docsIfSigQUncorrectables=docsIfSigQUncorrectables, docsIfUpChannelRangingBackoffStart=docsIfUpChannelRangingBackoffStart, docsIfUpChannelPreEqEnable=docsIfUpChannelPreEqEnable, docsIfCmServiceQosProfile=docsIfCmServiceQosProfile, docsIfSignalQualityTable=docsIfSignalQualityTable, docsIfCmStatusResets=docsIfCmStatusResets, docsIfCmStatusRangingAborteds=docsIfCmStatusRangingAborteds, docsIfCmtsCmStatusInetAddressType=docsIfCmtsCmStatusInetAddressType, docsIfQosProfileEntry=docsIfQosProfileEntry, docsIfCmtsModType=docsIfCmtsModType, docsIfCmtsUpChnlCtrCollCntnReqMslots=docsIfCmtsUpChnlCtrCollCntnReqMslots, docsIfCmtsServiceNewCmStatusIndex=docsIfCmtsServiceNewCmStatusIndex, docsIfCmtsCmStatusExtUnerroreds=docsIfCmtsCmStatusExtUnerroreds, docsIfCmtsCmStatusDocsisRegMode=docsIfCmtsCmStatusDocsisRegMode, docsIfCmtsCmMac=docsIfCmtsCmMac, docsIfCmtsCmStatusDownChannelIfIndex=docsIfCmtsCmStatusDownChannelIfIndex, docsIfCmtsUpChnlCtrTotalMslots=docsIfCmtsUpChnlCtrTotalMslots, docsIfCmtsServiceEntry=docsIfCmtsServiceEntry, docsIfCmtsStatusInvalidRegReqs=docsIfCmtsStatusInvalidRegReqs, docsIfCmtsChannelUtIfType=docsIfCmtsChannelUtIfType, docsIfCmtsModLastCodewordShortened=docsIfCmtsModLastCodewordShortened, docsIfBasicGroupV2=docsIfBasicGroupV2, docsIfCmtsModControl=docsIfCmtsModControl, docsIfCmtsUpChnlCtrCollCntnInitMaintMslots=docsIfCmtsUpChnlCtrCollCntnInitMaintMslots, docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots=docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots, docsIfUpChannelWidth=docsIfUpChannelWidth, docsIfCmtsUpChnlCtrUcastGrantedMslots=docsIfCmtsUpChnlCtrUcastGrantedMslots, docsIfCmtsStatusRangingAborteds=docsIfCmtsStatusRangingAborteds, docsIfCmtsModPreambleLen=docsIfCmtsModPreambleLen, docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots=docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots, docsIfCmMacEntry=docsIfCmMacEntry, docsIfCmtsStatusT5Timeouts=docsIfCmtsStatusT5Timeouts, docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots=docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots, docsIfSigQCorrecteds=docsIfSigQCorrecteds, docsIfCmtsDownChnlCtrTotalBytes=docsIfCmtsDownChnlCtrTotalBytes, docsIfCmMacTable=docsIfCmMacTable, docsIfCmtsUpChnlCtrCollCntnMslots=docsIfCmtsUpChnlCtrCollCntnMslots, docsIfUpChannelCloneFrom=docsIfUpChannelCloneFrom, docsIfCmRangingTimeout=docsIfCmRangingTimeout, docsIfQosProfPriority=docsIfQosProfPriority, docsIfCmStatusEntry=docsIfCmStatusEntry, docsIfGroupsV2=docsIfGroupsV2, docsIfCmtsSyncInterval=docsIfCmtsSyncInterval, docsIfCmtsModIntervalUsageCode=docsIfCmtsModIntervalUsageCode, docsIfBasicGroup=docsIfBasicGroup, docsIfSignalQualityEntry=docsIfSignalQualityEntry, docsIfCmtsCmStatusEntry=docsIfCmtsCmStatusEntry, docsIfCmtsModTcmErrorCorrectionOn=docsIfCmtsModTcmErrorCorrectionOn, docsIfUpChannelScdmaActiveCodes=docsIfUpChannelScdmaActiveCodes, docsIfQosProfileTable=docsIfQosProfileTable, docsIfSigQUnerroreds=docsIfSigQUnerroreds, DocsisVersion=DocsisVersion, docsIfCmStatusModulationType=docsIfCmStatusModulationType, PYSNMP_MODULE_ID=docsIfMib, docsIfCmtsChannelUtilizationTable=docsIfCmtsChannelUtilizationTable, docsIfCmtsMacEntry=docsIfCmtsMacEntry, docsIfCmtsCmStatusTimingOffset=docsIfCmtsCmStatusTimingOffset, docsIfCmtsCmStatusUpChannelIfIndex=docsIfCmtsCmStatusUpChannelIfIndex, docsIfCmtsCmStatusModulationType=docsIfCmtsCmStatusModulationType, docsIfUpChannelId=docsIfUpChannelId, docsIfCmtsStatusInvalidDataReqs=docsIfCmtsStatusInvalidDataReqs, docsIfCmStatusValue=docsIfCmStatusValue, docsIfCmtsStatusTable=docsIfCmtsStatusTable, docsIfUpChannelSlotSize=docsIfUpChannelSlotSize, docsIfQosProfBaselinePrivacy=docsIfQosProfBaselinePrivacy, docsIfSigQExtCorrecteds=docsIfSigQExtCorrecteds, docsIfCmtsStatusEntry=docsIfCmtsStatusEntry, docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots=docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots, docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots=docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots, docsIfCmtsCmStatusInetAddress=docsIfCmtsCmStatusInetAddress, docsIfCmtsUpChnlCtrUsedCntnReqMslots=docsIfCmtsUpChnlCtrUsedCntnReqMslots, docsIfCmGroup=docsIfCmGroup, docsIfCmtsDownChnlCtrUsedBytes=docsIfCmtsDownChnlCtrUsedBytes, docsIfDownChannelPower=docsIfDownChannelPower, docsIfCmServiceTxSlotsImmed=docsIfCmServiceTxSlotsImmed, docsIfCmtsModIndex=docsIfCmtsModIndex, docsIfSigQExtUnerroreds=docsIfSigQExtUnerroreds, docsIfCmtsCmStatusEqualizationData=docsIfCmtsCmStatusEqualizationData, docsIfCmtsUpChnlCtrExtCollCntnMslots=docsIfCmtsUpChnlCtrExtCollCntnMslots, docsIfCmtsServiceCmStatusIndex=docsIfCmtsServiceCmStatusIndex, docsIfCmServiceRqRetries=docsIfCmServiceRqRetries, docsIfCmtsUpChnlCtrExtTotalCntnMslots=docsIfCmtsUpChnlCtrExtTotalCntnMslots, docsIfDownChannelFrequency=docsIfDownChannelFrequency, docsIfCmServiceEntry=docsIfCmServiceEntry, docsIfCmtsDownChannelCounterEntry=docsIfCmtsDownChannelCounterEntry, docsIfUpChannelUpdate=docsIfUpChannelUpdate, docsIfDownChannelAnnex=docsIfDownChannelAnnex, docsIfCmStatusInvalidUcds=docsIfCmStatusInvalidUcds, docsIfCmtsDownChnlCtrExtUsedBytes=docsIfCmtsDownChnlCtrExtUsedBytes, docsIfCmtsUpChnlCtrExtTotalCntnReqMslots=docsIfCmtsUpChnlCtrExtTotalCntnReqMslots, docsIfCmServiceTable=docsIfCmServiceTable, docsIfCmtsUpChnlCtrTotalCntnReqDataMslots=docsIfCmtsUpChnlCtrTotalCntnReqDataMslots, DocsisUpstreamType=DocsisUpstreamType, docsIfCmtsObjects=docsIfCmtsObjects, docsIfCmtsModPreambleType=docsIfCmtsModPreambleType, docsIfCmtsGroupV2=docsIfCmtsGroupV2, docsIfMib=docsIfMib, docsIfCmStatusCode=docsIfCmStatusCode, docsIfCmtsGroup=docsIfCmtsGroup, docsIfCmtsStatusInvalidRangeReqs=docsIfCmtsStatusInvalidRangeReqs, docsIfCmtsCmStatusUnerroreds=docsIfCmtsCmStatusUnerroreds, docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots=docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots, docsIfCmtsUpChnlCtrExtUsedCntnReqMslots=docsIfCmtsUpChnlCtrExtUsedCntnReqMslots, docsIfCmtsModByteInterleaverDepth=docsIfCmtsModByteInterleaverDepth, docsIfGroups=docsIfGroups, docsIfCmServiceTxSlotsDed=docsIfCmServiceTxSlotsDed, docsIfCompliancesV2=docsIfCompliancesV2, docsIfUpChannelFrequency=docsIfUpChannelFrequency, docsIfCmtsModulationEntry=docsIfCmtsModulationEntry, docsIfSigQExtUncorrectables=docsIfSigQExtUncorrectables, docsIfCmtsCmStatusIndex=docsIfCmtsCmStatusIndex, docsIfQosProfMaxUpBandwidth=docsIfQosProfMaxUpBandwidth, docsIfCmServiceTxRetries=docsIfCmServiceTxRetries, docsIfCmServiceRqExceededs=docsIfCmServiceRqExceededs, docsIfCmtsModByteInterleaverBlockSize=docsIfCmtsModByteInterleaverBlockSize, docsIfCmtsCmStatusIpAddress=docsIfCmtsCmStatusIpAddress, docsIfBasicCompliance=docsIfBasicCompliance, docsIfUpChannelScdmaCodesPerSlot=docsIfUpChannelScdmaCodesPerSlot, docsIfQosProfStatus=docsIfQosProfStatus, docsIfDocsisBaseCapability=docsIfDocsisBaseCapability, docsIfCmtsCmStatusMicroreflections=docsIfCmtsCmStatusMicroreflections, docsIfCmtsUpChnlCtrExtTotalMslots=docsIfCmtsUpChnlCtrExtTotalMslots, docsIfDownstreamChannelEntry=docsIfDownstreamChannelEntry, docsIfCmtsDownChannelCounterTable=docsIfCmtsDownChannelCounterTable, docsIfDownChannelModulation=docsIfDownChannelModulation, docsIfCmtsMacToCmEntry=docsIfCmtsMacToCmEntry, docsIfCmtsInvitedRangingAttempts=docsIfCmtsInvitedRangingAttempts, docsIfCmtsCmStatusUncorrectables=docsIfCmtsCmStatusUncorrectables, docsIfCmtsCapabilities=docsIfCmtsCapabilities, docsIfSigQEqualizationData=docsIfSigQEqualizationData, docsIfCmtsCmStatusCorrecteds=docsIfCmtsCmStatusCorrecteds, docsIfCmtsChannelUtilizationEntry=docsIfCmtsChannelUtilizationEntry, docsIfCmtsModScdmaSpreaderEnable=docsIfCmtsModScdmaSpreaderEnable, docsIfCmtsUpChnlCtrTotalCntnReqMslots=docsIfCmtsUpChnlCtrTotalCntnReqMslots, docsIfBaseObjects=docsIfBaseObjects, docsIfCmtsCmStatusRxPower=docsIfCmtsCmStatusRxPower, docsIfCmtsModFECCodewordLength=docsIfCmtsModFECCodewordLength, DocsisUpstreamTypeStatus=DocsisUpstreamTypeStatus, docsIfCmtsUpChannelCounterEntry=docsIfCmtsUpChannelCounterEntry, docsIfCmtsServiceInOctets=docsIfCmtsServiceInOctets, docsIfDownChannelWidth=docsIfDownChannelWidth, docsIfCmtsMacToCmTable=docsIfCmtsMacToCmTable, docsIfCmStatusEqualizationData=docsIfCmStatusEqualizationData, docsIfMibObjects=docsIfMibObjects, docsIfCmStatusTxPower=docsIfCmStatusTxPower, docsIfCmtsMaxServiceIds=docsIfCmtsMaxServiceIds, docsIfCmtsDownChnlCtrExtTotalBytes=docsIfCmtsDownChnlCtrExtTotalBytes, docsIfCmtsUpChnlCtrExtUcastGrantedMslots=docsIfCmtsUpChnlCtrExtUcastGrantedMslots, docsIfCmtsServiceQosProfile=docsIfCmtsServiceQosProfile, docsIfQosProfMaxTxBurst=docsIfQosProfMaxTxBurst, docsIfQosProfGuarUpBandwidth=docsIfQosProfGuarUpBandwidth, docsIfCmtsMacTable=docsIfCmtsMacTable, docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots=docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots, docsIfCmtsCmStatusExtCorrecteds=docsIfCmtsCmStatusExtCorrecteds, docsIfUpstreamChannelTable=docsIfUpstreamChannelTable, docsIfUpChannelModulationProfile=docsIfUpChannelModulationProfile, docsIfSigQSignalNoise=docsIfSigQSignalNoise, docsIfCmStatusInvalidMaps=docsIfCmStatusInvalidMaps, docsIfCmtsModDifferentialEncoding=docsIfCmtsModDifferentialEncoding, docsIfCmStatusT2Timeouts=docsIfCmStatusT2Timeouts, docsIfSigQIncludesContention=docsIfSigQIncludesContention, docsIfUpChannelTxBackoffEnd=docsIfUpChannelTxBackoffEnd, DocsisQosVersion=DocsisQosVersion, docsIfUpChannelScdmaFrameSize=docsIfUpChannelScdmaFrameSize, docsIfCmtsModulationTable=docsIfCmtsModulationTable, docsIfCmtsModChannelType=docsIfCmtsModChannelType, docsIfCmStatusInvalidRegistrationResponses=docsIfCmStatusInvalidRegistrationResponses, docsIfCmtsDownChnlCtrId=docsIfCmtsDownChnlCtrId, docsIfCmCapabilities=docsIfCmCapabilities, docsIfCmServiceExtTxSlotsImmed=docsIfCmServiceExtTxSlotsImmed, docsIfCmStatusTable=docsIfCmStatusTable, docsIfDownChannelId=docsIfDownChannelId, docsIfUpChannelScdmaHoppingSeed=docsIfUpChannelScdmaHoppingSeed, docsIfCmtsChannelUtUtilization=docsIfCmtsChannelUtUtilization, TenthdBmV=TenthdBmV, docsIfUpstreamChannelEntry=docsIfUpstreamChannelEntry, docsIfCmtsServiceTable=docsIfCmtsServiceTable, docsIfCmtsCmStatusSignalNoise=docsIfCmtsCmStatusSignalNoise, docsIfCmStatusT3Timeouts=docsIfCmStatusT3Timeouts, docsIfCmtsServiceCreateTime=docsIfCmtsServiceCreateTime, docsIfQosProfMaxDownBandwidth=docsIfQosProfMaxDownBandwidth, docsIfCmtsInsertInterval=docsIfCmtsInsertInterval, docsIfCmtsModFECErrorCorrection=docsIfCmtsModFECErrorCorrection, docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots=docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots, docsIfCompliances=docsIfCompliances, docsIfCmtsServiceInPackets=docsIfCmtsServiceInPackets, docsIfDownChannelInterleave=docsIfDownChannelInterleave, docsIfCmtsModScdmaInterleaverStepSize=docsIfCmtsModScdmaInterleaverStepSize, docsIfCmtsQosProfilePermissions=docsIfCmtsQosProfilePermissions, docsIfCmtsUpChnlCtrCollCntnReqDataMslots=docsIfCmtsUpChnlCtrCollCntnReqDataMslots, docsIfCmtsChannelUtilizationInterval=docsIfCmtsChannelUtilizationInterval, docsIfCmtsCmStatusValue=docsIfCmtsCmStatusValue, docsIfCmtsCmStatusMacAddress=docsIfCmtsCmStatusMacAddress, docsIfCmtsUpChnlCtrUsedCntnMslots=docsIfCmtsUpChnlCtrUsedCntnMslots, docsIfCmtsUpChnlCtrUsedCntnReqDataMslots=docsIfCmtsUpChnlCtrUsedCntnReqDataMslots, docsIfNotification=docsIfNotification, docsIfDownstreamChannelTable=docsIfDownstreamChannelTable, docsIfCmStatusT1Timeouts=docsIfCmStatusT1Timeouts, docsIfCmGroupV2=docsIfCmGroupV2, docsIfCmRangingRespTimeout=docsIfCmRangingRespTimeout, docsIfCmtsUpChnlCtrExtCollCntnReqMslots=docsIfCmtsUpChnlCtrExtCollCntnReqMslots, docsIfCmObjects=docsIfCmObjects, docsIfCmServiceTxExceededs=docsIfCmServiceTxExceededs, docsIfCmtsUpChannelCounterTable=docsIfCmtsUpChannelCounterTable, docsIfCmtsCmStatusTable=docsIfCmtsCmStatusTable, docsIfSigQMicroreflections=docsIfSigQMicroreflections, docsIfCmtsUpChnlCtrExtUsedCntnMslots=docsIfCmtsUpChnlCtrExtUsedCntnMslots)
