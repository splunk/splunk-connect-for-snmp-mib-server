#
# PySNMP MIB module JUNIPER-IFOPTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IFOPTICS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
jnxOpticsMibRoot, jnxOpticsNotifications = mibBuilder.importSymbols("JUNIPER-SMI", "jnxOpticsMibRoot", "jnxOpticsNotifications")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, TimeTicks, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, IpAddress, Counter64, MibIdentifier, ModuleIdentity, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "TimeTicks", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "IpAddress", "Counter64", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Integer32")
DateAndTime, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TextualConvention", "DisplayString")
jnxIfOpticsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1))
jnxIfOpticsMib.setRevisions(('2012-01-26 00:00', '2012-01-26 00:00',))
if mibBuilder.loadTexts: jnxIfOpticsMib.setLastUpdated('201201261414Z')
if mibBuilder.loadTexts: jnxIfOpticsMib.setOrganization('Juniper Networks, Inc.')
class JnxOpticsLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("jnxNearEnd", 1), ("jnxFarEnd", 2))

class JnxOpticsDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3))

class JnxOpticsSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4))

class JnxOpticsServiceStateAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("jnxNotSupported", 0), ("jnxNonServiceAffecting", 1), ("jnxServiceAffecting", 2))

class JnxOpticsChannelSpacing(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("spacing100Ghz", 1), ("spacing50Ghz", 2), ("spacing25Ghz", 3), ("spacing12point5Ghz", 4), ("spacing6point5Ghz", 5))

class JnxOpticsNotificationId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))
    namedValues = NamedValues(("jnxOpticsLOS", 1), ("jnxOpticsWavelenthLockErr", 2), ("jnxOpticsPowerHighAlarm", 3), ("jnxOpticsPowerLowAlarm", 4), ("jnxOpticsBiasCurrentHighAlarm", 5), ("jnxOpticsBiasCurrentLowAlarm", 6), ("jnxOpticsTemperatureHighAlarm", 7), ("jnxOpticsTemperaturelowAlarm", 8), ("jnxOpticsTxPLLLockAlarm", 9), ("jnxOpticsRxPLLLockAlarm", 10), ("jnxOpticsAvgPowerAlarm", 11), ("jnxOpticsRxLossAvgPowerAlarm", 12), ("jnxOpticsLossofACPowerAlarm", 13), ("jnxOpticsTxPowerHighThreshAlert", 14), ("jnxOpticsTxPowerLowThreshAlert", 15), ("jnxOpticsRxPowerHighThreshAlert", 16), ("jnxOpticsRxPowerLowThreshAlert", 17), ("jnxOpticsModuleTempHighThreshAlert", 18), ("jnxOpticsModuleTempLowThreshAlert", 19), ("jnxOptics24HourTxPowerHighThreshAlert", 20), ("jnxOptics24HourTxPowerLowThreshAlert", 21), ("jnxOptics24HourRxPowerHighThreshAlert", 22), ("jnxOptics24HourRxPowerLowThreshAlert", 23), ("jnxOptics24HourModuleTempHighThreshAlert", 24), ("jnxOptics24HourModuleTempLowThreshAlert", 25), ("jnxOpticsRxPowerHighAlarm", 26), ("jnxOpticsRxPowerLowAlarm", 27), ("jnxOpticsTxPowerHighWarning", 28), ("jnxOpticsTxPowerLowWarning", 29), ("jnxOpticsRxPowerHighWarning", 30), ("jnxOpticsRxPowerLowWarning", 31), ("jnxOpticsModuleTempHighWarning", 32), ("jnxOpticsModuleTempLowWarning", 33), ("jnxOpticsRxCarrierFreqHigh", 34), ("jnxOpticsRxCarrierFreqLow", 35), ("jnxOpticsChromaticDispHighWarning", 36), ("jnxOpticsChromaticDispLowWarning", 37), ("jnxOpticsQLowWarning", 38), ("jnxOpticsOSNRLowWarning", 39), ("jnxOpticsCarrierFreqHighAlert", 40), ("jnxOpticsCarrierFreqLowAlert", 41), ("jnxOptics24HourCarrierFreqHighAlert", 42), ("jnxOptics24HourCarrierFreqLowAlert", 43))

jnxOptics = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1))
jnxOpticsPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2))
jnxOpticsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3))
jnxOpticsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1), )
if mibBuilder.loadTexts: jnxOpticsConfigTable.setStatus('current')
jnxOpticsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL3Index"))
if mibBuilder.loadTexts: jnxOpticsConfigEntry.setStatus('current')
jnxOpticsConfigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigContainerIndex.setStatus('current')
jnxOpticsConfigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigL1Index.setStatus('current')
jnxOpticsConfigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigL2Index.setStatus('current')
jnxOpticsConfigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigL3Index.setStatus('current')
jnxOpticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsType.setStatus('current')
jnxLaserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxLaserEnable.setStatus('current')
jnxWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 7), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxWavelength.setStatus('current')
jnxSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 8), JnxOpticsChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpacing.setStatus('current')
jnxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModulation.setStatus('current')
jnxTxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 10), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxOpticalPower.setStatus('current')
jnxRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 11), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRxOpticalPower.setStatus('current')
jnxModuleTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 12), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModuleTempHighThresh.setStatus('current')
jnxModuleTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 13), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModuleTempLowThresh.setStatus('current')
jnxTxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 14), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerHighThresh.setStatus('current')
jnxTxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 15), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerLowThresh.setStatus('current')
jnxRxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 16), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerHighThresh.setStatus('current')
jnxRxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 17), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerLowThresh.setStatus('current')
jnx24HourModuleTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 18), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnx24HourModuleTempHighThresh.setStatus('current')
jnx24HourModuleTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 19), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnx24HourModuleTempLowThresh.setStatus('current')
jnx24HourTxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 20), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourTxPowerHighThresh.setStatus('current')
jnx24HourTxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 21), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourTxPowerLowThresh.setStatus('current')
jnx24HourRxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 22), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourRxPowerHighThresh.setStatus('current')
jnx24HourRxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 23), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourRxPowerLowThresh.setStatus('current')
jnxRxLosPowerWarningThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 24), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxLosPowerWarningThresh.setStatus('current')
jnxRxLosPowerAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 25), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxLosPowerAlarmThresh.setStatus('current')
jnxOpticsCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 26), Bits().clone(namedValues=NamedValues(("opticalLos", 1), ("wavelenthLockErr", 2), ("powerHighAlarm", 3), ("powerLowAlarm", 4), ("biasCurrentHighAlarm", 5), ("biasCurrentLowAlarm", 6), ("temperatureHighAlarm", 7), ("temperaturelowAlarm", 8), ("txPLLLockAlarm", 9), ("rxPLLLockAlarm", 10), ("avgPowerAlarm", 11), ("rxLossAvgPowerAlarm", 12), ("lossofACPowerAlarm", 13), ("txPowerHighThreshAlert", 14), ("txPowerLowThreshAlert", 15), ("rxPowerHighThreshAlert", 16), ("rxPowerLowThreshAlert", 17), ("moduleTempHighThreshAlert", 18), ("moduleTempLowThreshAlert", 19), ("txPowerHigh24HourThreshAlert", 20), ("txPowerLow24HourThreshAlert", 21), ("rxPowerHigh24HourThreshAlert", 22), ("rxPowerLow24HourThreshAlert", 23), ("moduleTempHigh24HourThreshAlert", 24), ("moduleTempLow24HourThreshAlert", 25), ("powerRxHighAlarm", 26), ("powerRxLowAlarm", 27), ("powerTxHighWarning", 28), ("powerTxLowWarning", 29), ("powerRxHighWarning", 30), ("powerRxLowWarning", 31), ("temperatureHighWarning", 32), ("temperaturelowWarning", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsCurrentStatus.setStatus('current')
jnxTxPowerHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerHighEnableTCA.setStatus('current')
jnxTxPowerLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerLowEnableTCA.setStatus('current')
jnxRxPowerHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerHighEnableTCA.setStatus('current')
jnxRxPowerLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerLowEnableTCA.setStatus('current')
jnxModuleTempHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxModuleTempHighEnableTCA.setStatus('current')
jnxModuleTempLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxModuleTempLowEnableTCA.setStatus('current')
jnxCarFreqOffsetHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetHighEnableTCA.setStatus('current')
jnxCarFreqOffsetLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetLowEnableTCA.setStatus('current')
jnxCarFreqOffsetHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 35), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetHighThresh.setStatus('current')
jnx24HourCarFreqOffsetHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 36), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourCarFreqOffsetHighThresh.setStatus('current')
jnxCarFreqOffsetLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 37), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetLowThresh.setStatus('current')
jnx24HourCarFreqOffsetLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 38), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourCarFreqOffsetLowThresh.setStatus('current')
jnxOpticsTraceToneCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2), )
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTable.setStatus('current')
jnxOpticsTraceToneCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL3Index"))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgEntry.setStatus('current')
jnxOpticsTraceToneCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgContainerIndex.setStatus('current')
jnxOpticsTraceToneCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL1Index.setStatus('current')
jnxOpticsTraceToneCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL2Index.setStatus('current')
jnxOpticsTraceToneCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL3Index.setStatus('current')
jnxOpticsTraceToneCfgTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxEnable.setStatus('current')
jnxOpticsTraceToneCfgRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxEnable.setStatus('current')
jnxOpticsTraceToneCfgDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgDestId.setStatus('current')
jnxOpticsTraceToneCfgTxMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxMsg.setStatus('current')
jnxOpticsTraceToneCfgRxMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxMsg.setStatus('current')
jnxOpticsNotificationTrigDefaultHoldtimeUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeUp.setStatus('current')
jnxOpticsNotificationTrigDefaultHoldtimeDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeDown.setStatus('current')
jnxOpticsNotificationTrigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5), )
if mibBuilder.loadTexts: jnxOpticsNotificationTrigTable.setStatus('current')
jnxOpticsNotificationTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1), ).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL3Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigAlmId"))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigEntry.setStatus('current')
jnxOpticsNotificationTrigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigContainerIndex.setStatus('current')
jnxOpticsNotificationTrigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL1Index.setStatus('current')
jnxOpticsNotificationTrigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL2Index.setStatus('current')
jnxOpticsNotificationTrigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL3Index.setStatus('current')
jnxOpticsNotificationTrigAlmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 5), JnxOpticsNotificationId())
if mibBuilder.loadTexts: jnxOpticsNotificationTrigAlmId.setStatus('current')
jnxOpticsNotificationTrigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 6), JnxOpticsSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigSeverity.setStatus('current')
jnxOpticsNotificationTrigIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigIgnore.setStatus('current')
jnxOpticsNotificationTrigHoldtimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeUp.setStatus('current')
jnxOpticsNotificationTrigHoldtimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeDown.setStatus('current')
jnxOpticsTrigServiceStateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 10), JnxOpticsServiceStateAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsTrigServiceStateAction.setStatus('current')
jnxOpticsPMCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1), )
if mibBuilder.loadTexts: jnxOpticsPMCurrentTable.setStatus('current')
jnxOpticsPMCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOpticsPMCurrentEntry.setStatus('current')
jnxPMCurChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 1), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurChromaticDispersion.setStatus('current')
jnxPMCurDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurDiffGroupDelay.setStatus('current')
jnxPMCurPolarizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 3), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurPolarizationState.setStatus('current')
jnxPMCurPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurPolarDepLoss.setStatus('current')
jnxPMCurQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 5), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurQ.setStatus('current')
jnxPMCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSNR.setStatus('current')
jnxPMCurTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 7), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurTxOutputPower.setStatus('current')
jnxPMCurRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 8), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurRxInputPower.setStatus('current')
jnxPMCurMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 9), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinChromaticDispersion.setStatus('current')
jnxPMCurMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 10), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxChromaticDispersion.setStatus('current')
jnxPMCurAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 11), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgChromaticDispersion.setStatus('current')
jnxPMCurMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 12), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinDiffGroupDelay.setStatus('current')
jnxPMCurMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 13), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxDiffGroupDelay.setStatus('current')
jnxPMCurAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 14), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgDiffGroupDelay.setStatus('current')
jnxPMCurMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 15), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinPolarState.setStatus('current')
jnxPMCurMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 16), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxPolarState.setStatus('current')
jnxPMCurAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 17), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgPolarState.setStatus('current')
jnxPMCurMinPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinPolarDepLoss.setStatus('current')
jnxPMCurMaxPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 19), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxPolarDepLoss.setStatus('current')
jnxPMCurAvgPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 20), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgPolarDepLoss.setStatus('current')
jnxPMCurMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 21), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinQ.setStatus('current')
jnxPMCurMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 22), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxQ.setStatus('current')
jnxPMCurAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 23), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgQ.setStatus('current')
jnxPMCurMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 24), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinSNR.setStatus('current')
jnxPMCurMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 25), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxSNR.setStatus('current')
jnxPMCurAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 26), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgSNR.setStatus('current')
jnxPMCurMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 27), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinTxOutputPower.setStatus('current')
jnxPMCurMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 28), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxTxOutputPower.setStatus('current')
jnxPMCurAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 29), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgTxOutputPower.setStatus('current')
jnxPMCurMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 30), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinRxInputPower.setStatus('current')
jnxPMCurMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 31), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxRxInputPower.setStatus('current')
jnxPMCurAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 32), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgRxInputPower.setStatus('current')
jnxPMCurSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSuspectedFlag.setStatus('current')
jnxPMCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSuspectReason.setStatus('current')
jnxPMCurTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 35), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurTxLaserBiasCurrent.setStatus('current')
jnxPMCurMinTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 36), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinTxLaserBiasCurrent.setStatus('current')
jnxPMCurMaxTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 37), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxTxLaserBiasCurrent.setStatus('current')
jnxPMCurAvgTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 38), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgTxLaserBiasCurrent.setStatus('current')
jnxPMCurTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 39), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurTemperature.setStatus('current')
jnxPMCurMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 40), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinTemperature.setStatus('current')
jnxPMCurMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 41), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxTemperature.setStatus('current')
jnxPMCurAvgTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 42), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgTemperature.setStatus('current')
jnxPMCurCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 43), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurCarFreqOffset.setStatus('current')
jnxPMCurMinCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 44), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinCarFreqOffset.setStatus('current')
jnxPMCurMaxCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 45), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxCarFreqOffset.setStatus('current')
jnxPMCurAvgCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 46), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgCarFreqOffset.setStatus('current')
jnxPMCurRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 47), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurRxLaserBiasCurrent.setStatus('current')
jnxPMCurMinRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 48), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinRxLaserBiasCurrent.setStatus('current')
jnxPMCurMaxRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 49), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxRxLaserBiasCurrent.setStatus('current')
jnxPMCurAvgRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 50), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgRxLaserBiasCurrent.setStatus('current')
jnxOpticsPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2), )
if mibBuilder.loadTexts: jnxOpticsPMIntervalTable.setStatus('current')
jnxOpticsPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsPMIntervalNumber"))
if mibBuilder.loadTexts: jnxOpticsPMIntervalEntry.setStatus('current')
jnxOpticsPMIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: jnxOpticsPMIntervalNumber.setStatus('current')
jnxPMIntMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinChromaticDispersion.setStatus('current')
jnxPMIntMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxChromaticDispersion.setStatus('current')
jnxPMIntAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgChromaticDispersion.setStatus('current')
jnxPMIntMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 5), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinDiffGroupDelay.setStatus('current')
jnxPMIntMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 6), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxDiffGroupDelay.setStatus('current')
jnxPMIntAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 7), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgDiffGroupDelay.setStatus('current')
jnxPMIntMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 8), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinPolarState.setStatus('current')
jnxPMIntMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 9), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxPolarState.setStatus('current')
jnxPMIntAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 10), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgPolarState.setStatus('current')
jnxPMIntMinPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinPolarDependentLoss.setStatus('current')
jnxPMIntMaxPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 12), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxPolarDependentLoss.setStatus('current')
jnxPMIntAvgPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 13), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgPolarDependentLoss.setStatus('current')
jnxPMIntMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 14), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinQ.setStatus('current')
jnxPMIntMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxQ.setStatus('current')
jnxPMIntAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 16), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgQ.setStatus('current')
jnxPMIntMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinSNR.setStatus('current')
jnxPMIntMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxSNR.setStatus('current')
jnxPMIntAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 19), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgSNR.setStatus('current')
jnxPMIntMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 20), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinTxOutputPower.setStatus('current')
jnxPMIntMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 21), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxTxOutputPower.setStatus('current')
jnxPMIntAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 22), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgTxOutputPower.setStatus('current')
jnxPMIntMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 23), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinRxInputPower.setStatus('current')
jnxPMIntMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 24), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxRxInputPower.setStatus('current')
jnxPMIntAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 25), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgRxInputPower.setStatus('current')
jnxPMIntTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntTimeStamp.setStatus('current')
jnxPMIntSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntSuspectedFlag.setStatus('current')
jnxPMIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntSuspectReason.setStatus('current')
jnxPMIntMinTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 29), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinTxLaserBiasCurrent.setStatus('current')
jnxPMIntMaxTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 30), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxTxLaserBiasCurrent.setStatus('current')
jnxPMIntAvgTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 31), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgTxLaserBiasCurrent.setStatus('current')
jnxPMIntMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 32), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinTemperature.setStatus('current')
jnxPMIntMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 33), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxTemperature.setStatus('current')
jnxPMIntAvgTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 34), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgTemperature.setStatus('current')
jnxPMIntMinCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 35), Integer32()).setUnits('Mhz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinCarFreqOffset.setStatus('current')
jnxPMIntMaxCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 36), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxCarFreqOffset.setStatus('current')
jnxPMIntAvgCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 37), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgCarFreqOffset.setStatus('current')
jnxPMIntMinRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 38), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinRxLaserBiasCurrent.setStatus('current')
jnxPMIntMaxRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 39), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxRxLaserBiasCurrent.setStatus('current')
jnxPMIntAvgRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 40), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgRxLaserBiasCurrent.setStatus('current')
jnxOpticsPMDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3), )
if mibBuilder.loadTexts: jnxOpticsPMDayTable.setStatus('current')
jnxOpticsPMDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsPMDayIndex"))
if mibBuilder.loadTexts: jnxOpticsPMDayEntry.setStatus('current')
jnxOpticsPMDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: jnxOpticsPMDayIndex.setStatus('current')
jnxPMDayMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinChromaticDispersion.setStatus('current')
jnxPMDayMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxChromaticDispersion.setStatus('current')
jnxPMDayAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgChromaticDispersion.setStatus('current')
jnxPMDayMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 5), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinDiffGroupDelay.setStatus('current')
jnxPMDayMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 6), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxDiffGroupDelay.setStatus('current')
jnxPMDayAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 7), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgDiffGroupDelay.setStatus('current')
jnxPMDayMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 8), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinPolarState.setStatus('current')
jnxPMDayMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 9), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxPolarState.setStatus('current')
jnxPMDayAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 10), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgPolarState.setStatus('current')
jnxPMDayMinPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinPolarDependentLoss.setStatus('current')
jnxPMDayMaxPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 12), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxPolarDependentLoss.setStatus('current')
jnxPMDayAvgPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 13), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgPolarDependentLoss.setStatus('current')
jnxPMDayMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 14), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinQ.setStatus('current')
jnxPMDayMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxQ.setStatus('current')
jnxPMDayAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 16), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgQ.setStatus('current')
jnxPMDayMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinSNR.setStatus('current')
jnxPMDayMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxSNR.setStatus('current')
jnxPMDayAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 19), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgSNR.setStatus('current')
jnxPMDayMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 20), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinTxOutputPower.setStatus('current')
jnxPMDayMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 21), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxTxOutputPower.setStatus('current')
jnxPMDayAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 22), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgTxOutputPower.setStatus('current')
jnxPMDayMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 23), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinRxInputPower.setStatus('current')
jnxPMDayMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 24), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxRxInputPower.setStatus('current')
jnxPMDayAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 25), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgRxInputPower.setStatus('current')
jnxPMDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayTimeStamp.setStatus('current')
jnxPMDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDaySuspectedFlag.setStatus('current')
jnxPMDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDaySuspectReason.setStatus('current')
jnxPMDayMinTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 29), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinTxLaserBiasCurrent.setStatus('current')
jnxPMDayMaxTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 30), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxTxLaserBiasCurrent.setStatus('current')
jnxPMDayAvgTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 31), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgTxLaserBiasCurrent.setStatus('current')
jnxPMDayMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 32), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinTemperature.setStatus('current')
jnxPMDayMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 33), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxTemperature.setStatus('current')
jnxPMDayAvgTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 34), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgTemperature.setStatus('current')
jnxPMDayMinCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 35), Integer32()).setUnits('Mhz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinCarFreqOffset.setStatus('current')
jnxPMDayMaxCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 36), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxCarFreqOffset.setStatus('current')
jnxPMDayAvgCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 37), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgCarFreqOffset.setStatus('current')
jnxPMDayMinRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 38), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinRxLaserBiasCurrent.setStatus('current')
jnxPMDayMaxRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 39), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxRxLaserBiasCurrent.setStatus('current')
jnxPMDayAvgRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 40), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgRxLaserBiasCurrent.setStatus('current')
jnxOpticsNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1), )
if mibBuilder.loadTexts: jnxOpticsNotificationTable.setStatus('current')
jnxOpticsNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"))
if mibBuilder.loadTexts: jnxOpticsNotificationEntry.setStatus('current')
jnxOpticsNotificationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 1), JnxOpticsLocation()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationLocation.setStatus('current')
jnxOpticsNotificationDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 2), JnxOpticsDirection()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationDirection.setStatus('current')
jnxOpticsLastNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 3), JnxOpticsNotificationId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsLastNotificationId.setStatus('current')
jnxOpticsNotificationSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 4), JnxOpticsSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationSeverity.setStatus('current')
jnxOpticsNotificationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 5), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationDate.setStatus('current')
jnxOpticsClearAllPMs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearAllPMs.setStatus('current')
jnxOpticsClearIfPMsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOpticsClearIfPMsTable.setStatus('current')
jnxOpticsClearIfPMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOpticsClearIfPMsEntry.setStatus('current')
jnxOpticsClearCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearCurrent.setStatus('current')
jnxOpticsClearInterfaceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearInterfaceInterval.setStatus('current')
jnxOpticsClearInterfaceDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearInterfaceDay.setStatus('current')
jnxOpticsClearInterfaceAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearInterfaceAll.setStatus('current')
jnxOpticsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0))
jnxOpticsNotificationSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0, 1)).setObjects(("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"), ("IF-MIB", "ifDescr"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsLastNotificationId"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationSeverity"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDate"))
if mibBuilder.loadTexts: jnxOpticsNotificationSet.setStatus('current')
jnxOpticsNotificationCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0, 2)).setObjects(("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"), ("IF-MIB", "ifDescr"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsLastNotificationId"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationSeverity"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDate"))
if mibBuilder.loadTexts: jnxOpticsNotificationCleared.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-IFOPTICS-MIB", jnxPMCurSuspectReason=jnxPMCurSuspectReason, jnxPMCurMinPolarState=jnxPMCurMinPolarState, jnxPMDayMaxTxOutputPower=jnxPMDayMaxTxOutputPower, jnxPMIntMinPolarDependentLoss=jnxPMIntMinPolarDependentLoss, jnxPMCurMaxTxOutputPower=jnxPMCurMaxTxOutputPower, jnxPMCurMinChromaticDispersion=jnxPMCurMinChromaticDispersion, jnxPMCurRxLaserBiasCurrent=jnxPMCurRxLaserBiasCurrent, jnxPMIntAvgRxLaserBiasCurrent=jnxPMIntAvgRxLaserBiasCurrent, jnxPMCurMinTxLaserBiasCurrent=jnxPMCurMinTxLaserBiasCurrent, JnxOpticsLocation=JnxOpticsLocation, jnxOpticsTraceToneCfgL1Index=jnxOpticsTraceToneCfgL1Index, jnxRxPowerLowEnableTCA=jnxRxPowerLowEnableTCA, jnxPMDayAvgRxLaserBiasCurrent=jnxPMDayAvgRxLaserBiasCurrent, jnxRxPowerHighEnableTCA=jnxRxPowerHighEnableTCA, jnxPMDaySuspectReason=jnxPMDaySuspectReason, jnxPMIntMaxRxInputPower=jnxPMIntMaxRxInputPower, jnxOpticsNotificationTrigHoldtimeUp=jnxOpticsNotificationTrigHoldtimeUp, jnxPMCurMinRxInputPower=jnxPMCurMinRxInputPower, jnxPMDayAvgPolarDependentLoss=jnxPMDayAvgPolarDependentLoss, jnxOpticsPMIntervalEntry=jnxOpticsPMIntervalEntry, jnxOpticsTraceToneCfgL3Index=jnxOpticsTraceToneCfgL3Index, jnxPMDayAvgSNR=jnxPMDayAvgSNR, jnxPMIntMaxPolarState=jnxPMIntMaxPolarState, jnxTxPowerHighEnableTCA=jnxTxPowerHighEnableTCA, jnxPMCurMaxSNR=jnxPMCurMaxSNR, jnxOpticsClearInterfaceInterval=jnxOpticsClearInterfaceInterval, jnxOpticsType=jnxOpticsType, jnxOpticsNotificationDate=jnxOpticsNotificationDate, jnxOpticsConfigL1Index=jnxOpticsConfigL1Index, jnxLaserEnable=jnxLaserEnable, jnxPMCurAvgTxOutputPower=jnxPMCurAvgTxOutputPower, jnxPMCurAvgQ=jnxPMCurAvgQ, jnxOpticsAlarm=jnxOpticsAlarm, jnxOpticsNotificationCleared=jnxOpticsNotificationCleared, jnxPMDayMinTxOutputPower=jnxPMDayMinTxOutputPower, jnxPMCurAvgRxLaserBiasCurrent=jnxPMCurAvgRxLaserBiasCurrent, jnxOpticsTraceToneCfgL2Index=jnxOpticsTraceToneCfgL2Index, jnxPMIntMaxRxLaserBiasCurrent=jnxPMIntMaxRxLaserBiasCurrent, jnxPMCurMinDiffGroupDelay=jnxPMCurMinDiffGroupDelay, jnxOpticsConfigEntry=jnxOpticsConfigEntry, jnx24HourModuleTempLowThresh=jnx24HourModuleTempLowThresh, jnxOpticsNotificationTrigL1Index=jnxOpticsNotificationTrigL1Index, jnxOpticsConfigL3Index=jnxOpticsConfigL3Index, jnxPMDayMinSNR=jnxPMDayMinSNR, jnxPMIntAvgChromaticDispersion=jnxPMIntAvgChromaticDispersion, jnxPMIntMaxTxOutputPower=jnxPMIntMaxTxOutputPower, jnxRxPowerLowThresh=jnxRxPowerLowThresh, jnxPMDayMinCarFreqOffset=jnxPMDayMinCarFreqOffset, jnxModuleTempLowEnableTCA=jnxModuleTempLowEnableTCA, jnxPMIntMaxChromaticDispersion=jnxPMIntMaxChromaticDispersion, jnxCarFreqOffsetLowEnableTCA=jnxCarFreqOffsetLowEnableTCA, jnxTxPowerLowEnableTCA=jnxTxPowerLowEnableTCA, jnxOpticsTraceToneCfgTxMsg=jnxOpticsTraceToneCfgTxMsg, jnxPMIntMaxPolarDependentLoss=jnxPMIntMaxPolarDependentLoss, jnxOpticsPMIntervalNumber=jnxOpticsPMIntervalNumber, jnxPMCurMinTemperature=jnxPMCurMinTemperature, jnxRxLosPowerAlarmThresh=jnxRxLosPowerAlarmThresh, jnxPMDayMaxDiffGroupDelay=jnxPMDayMaxDiffGroupDelay, jnxPMDayAvgPolarState=jnxPMDayAvgPolarState, jnxOpticsPMIntervalTable=jnxOpticsPMIntervalTable, jnxModulation=jnxModulation, jnxPMDayAvgQ=jnxPMDayAvgQ, jnx24HourModuleTempHighThresh=jnx24HourModuleTempHighThresh, jnxPMDaySuspectedFlag=jnxPMDaySuspectedFlag, jnxOpticsPMCurrentTable=jnxOpticsPMCurrentTable, jnxOpticsNotificationLocation=jnxOpticsNotificationLocation, jnxOpticsLastNotificationId=jnxOpticsLastNotificationId, jnxTxPowerLowThresh=jnxTxPowerLowThresh, jnxPMIntMaxDiffGroupDelay=jnxPMIntMaxDiffGroupDelay, jnxPMCurAvgSNR=jnxPMCurAvgSNR, jnxPMIntMaxSNR=jnxPMIntMaxSNR, JnxOpticsSeverity=JnxOpticsSeverity, jnxPMCurMinCarFreqOffset=jnxPMCurMinCarFreqOffset, JnxOpticsDirection=JnxOpticsDirection, jnxPMCurPolarizationState=jnxPMCurPolarizationState, jnxPMDayMaxCarFreqOffset=jnxPMDayMaxCarFreqOffset, jnxTxPowerHighThresh=jnxTxPowerHighThresh, JnxOpticsServiceStateAction=JnxOpticsServiceStateAction, jnxPMCurMaxTemperature=jnxPMCurMaxTemperature, jnxCarFreqOffsetHighEnableTCA=jnxCarFreqOffsetHighEnableTCA, jnxPMIntMinRxInputPower=jnxPMIntMinRxInputPower, jnxPMDayAvgRxInputPower=jnxPMDayAvgRxInputPower, jnxPMIntMinCarFreqOffset=jnxPMIntMinCarFreqOffset, jnxOpticsTraceToneCfgTable=jnxOpticsTraceToneCfgTable, jnxOpticsNotificationDirection=jnxOpticsNotificationDirection, jnxPMCurMinRxLaserBiasCurrent=jnxPMCurMinRxLaserBiasCurrent, jnxPMCurCarFreqOffset=jnxPMCurCarFreqOffset, JnxOpticsNotificationId=JnxOpticsNotificationId, jnxPMCurAvgTemperature=jnxPMCurAvgTemperature, jnxPMIntAvgTxLaserBiasCurrent=jnxPMIntAvgTxLaserBiasCurrent, jnx24HourTxPowerHighThresh=jnx24HourTxPowerHighThresh, jnxRxPowerHighThresh=jnxRxPowerHighThresh, jnxPMCurPolarDepLoss=jnxPMCurPolarDepLoss, jnxOpticsClearInterfaceDay=jnxOpticsClearInterfaceDay, jnxOpticsPerformanceMonitoring=jnxOpticsPerformanceMonitoring, jnxPMCurMaxChromaticDispersion=jnxPMCurMaxChromaticDispersion, jnxPMCurRxInputPower=jnxPMCurRxInputPower, jnxOpticsNotificationTrigL2Index=jnxOpticsNotificationTrigL2Index, JnxOpticsChannelSpacing=JnxOpticsChannelSpacing, jnxOpticsNotificationTrigContainerIndex=jnxOpticsNotificationTrigContainerIndex, jnxPMIntMinTxLaserBiasCurrent=jnxPMIntMinTxLaserBiasCurrent, jnxSpacing=jnxSpacing, jnxPMCurMinTxOutputPower=jnxPMCurMinTxOutputPower, jnxPMDayMinDiffGroupDelay=jnxPMDayMinDiffGroupDelay, jnxPMDayMinPolarDependentLoss=jnxPMDayMinPolarDependentLoss, jnxPMCurAvgRxInputPower=jnxPMCurAvgRxInputPower, jnxOpticsTraceToneCfgRxMsg=jnxOpticsTraceToneCfgRxMsg, jnxOpticsNotificationEntry=jnxOpticsNotificationEntry, jnxOpticsTraceToneCfgTxEnable=jnxOpticsTraceToneCfgTxEnable, jnxPMCurAvgPolarState=jnxPMCurAvgPolarState, jnxCarFreqOffsetHighThresh=jnxCarFreqOffsetHighThresh, jnxPMDayMinTxLaserBiasCurrent=jnxPMDayMinTxLaserBiasCurrent, jnxPMCurMaxPolarDepLoss=jnxPMCurMaxPolarDepLoss, jnxPMDayAvgChromaticDispersion=jnxPMDayAvgChromaticDispersion, jnxPMDayAvgDiffGroupDelay=jnxPMDayAvgDiffGroupDelay, jnx24HourRxPowerHighThresh=jnx24HourRxPowerHighThresh, jnxOpticsNotificationTrigDefaultHoldtimeUp=jnxOpticsNotificationTrigDefaultHoldtimeUp, jnxPMIntMaxQ=jnxPMIntMaxQ, jnx24HourCarFreqOffsetLowThresh=jnx24HourCarFreqOffsetLowThresh, jnxOpticsNotificationTrigIgnore=jnxOpticsNotificationTrigIgnore, jnxPMIntMinTxOutputPower=jnxPMIntMinTxOutputPower, jnxPMIntSuspectReason=jnxPMIntSuspectReason, jnxPMIntAvgPolarDependentLoss=jnxPMIntAvgPolarDependentLoss, jnxPMIntMaxTemperature=jnxPMIntMaxTemperature, jnxOpticsPMCurrentEntry=jnxOpticsPMCurrentEntry, jnx24HourCarFreqOffsetHighThresh=jnx24HourCarFreqOffsetHighThresh, jnxPMCurTxOutputPower=jnxPMCurTxOutputPower, jnxPMDayMaxTemperature=jnxPMDayMaxTemperature, jnxOpticsNotificationTrigTable=jnxOpticsNotificationTrigTable, jnxOpticsPMDayIndex=jnxOpticsPMDayIndex, jnxTxOpticalPower=jnxTxOpticalPower, jnxPMCurMinQ=jnxPMCurMinQ, jnxPMIntMinSNR=jnxPMIntMinSNR, jnxPMCurMaxDiffGroupDelay=jnxPMCurMaxDiffGroupDelay, jnxPMCurAvgCarFreqOffset=jnxPMCurAvgCarFreqOffset, jnxCarFreqOffsetLowThresh=jnxCarFreqOffsetLowThresh, jnxPMIntMaxCarFreqOffset=jnxPMIntMaxCarFreqOffset, jnxOpticsClearCurrent=jnxOpticsClearCurrent, jnxModuleTempHighThresh=jnxModuleTempHighThresh, jnxOpticsPMDayTable=jnxOpticsPMDayTable, jnxPMDayMinTemperature=jnxPMDayMinTemperature, jnxPMIntMinQ=jnxPMIntMinQ, jnxOpticsTraceToneCfgEntry=jnxOpticsTraceToneCfgEntry, jnxPMIntMinRxLaserBiasCurrent=jnxPMIntMinRxLaserBiasCurrent, jnxPMDayMaxRxInputPower=jnxPMDayMaxRxInputPower, jnxOpticsConfigTable=jnxOpticsConfigTable, jnxOpticsClearIfPMsEntry=jnxOpticsClearIfPMsEntry, jnxOpticsTraceToneCfgRxEnable=jnxOpticsTraceToneCfgRxEnable, jnxModuleTempHighEnableTCA=jnxModuleTempHighEnableTCA, jnxOpticsNotificationTrigEntry=jnxOpticsNotificationTrigEntry, jnxPMCurAvgDiffGroupDelay=jnxPMCurAvgDiffGroupDelay, jnxPMIntAvgRxInputPower=jnxPMIntAvgRxInputPower, jnxOpticsNotificationSeverity=jnxOpticsNotificationSeverity, jnxPMDayAvgCarFreqOffset=jnxPMDayAvgCarFreqOffset, jnxPMCurAvgPolarDepLoss=jnxPMCurAvgPolarDepLoss, jnxOpticsNotificationTrigSeverity=jnxOpticsNotificationTrigSeverity, jnxPMIntMinChromaticDispersion=jnxPMIntMinChromaticDispersion, jnxPMDayMaxQ=jnxPMDayMaxQ, jnxOpticsNotificationTrigHoldtimeDown=jnxOpticsNotificationTrigHoldtimeDown, jnxPMIntMaxTxLaserBiasCurrent=jnxPMIntMaxTxLaserBiasCurrent, jnxPMIntSuspectedFlag=jnxPMIntSuspectedFlag, jnxPMDayMinRxLaserBiasCurrent=jnxPMDayMinRxLaserBiasCurrent, jnxOpticsNotificationTrigL3Index=jnxOpticsNotificationTrigL3Index, jnxPMDayAvgTxOutputPower=jnxPMDayAvgTxOutputPower, jnxOptics=jnxOptics, jnx24HourTxPowerLowThresh=jnx24HourTxPowerLowThresh, jnxPMDayTimeStamp=jnxPMDayTimeStamp, jnxPMDayMaxTxLaserBiasCurrent=jnxPMDayMaxTxLaserBiasCurrent, jnxPMIntMinDiffGroupDelay=jnxPMIntMinDiffGroupDelay, jnxPMCurMaxCarFreqOffset=jnxPMCurMaxCarFreqOffset, jnxPMCurMaxTxLaserBiasCurrent=jnxPMCurMaxTxLaserBiasCurrent, jnxOpticsClearAllPMs=jnxOpticsClearAllPMs, jnxOpticsNotificationTrigAlmId=jnxOpticsNotificationTrigAlmId, jnxPMCurQ=jnxPMCurQ, jnxPMIntAvgDiffGroupDelay=jnxPMIntAvgDiffGroupDelay, jnxPMCurAvgChromaticDispersion=jnxPMCurAvgChromaticDispersion, jnxPMIntAvgCarFreqOffset=jnxPMIntAvgCarFreqOffset, jnxOpticsPMDayEntry=jnxOpticsPMDayEntry, jnxPMDayAvgTxLaserBiasCurrent=jnxPMDayAvgTxLaserBiasCurrent, jnxOpticsTraceToneCfgContainerIndex=jnxOpticsTraceToneCfgContainerIndex, jnxOpticsClearInterfaceAll=jnxOpticsClearInterfaceAll, jnxPMDayMaxChromaticDispersion=jnxPMDayMaxChromaticDispersion, jnxOpticsCurrentStatus=jnxOpticsCurrentStatus, jnxOpticsNotificationTrigDefaultHoldtimeDown=jnxOpticsNotificationTrigDefaultHoldtimeDown, jnxPMCurChromaticDispersion=jnxPMCurChromaticDispersion, jnxPMIntAvgQ=jnxPMIntAvgQ, jnxPMCurTxLaserBiasCurrent=jnxPMCurTxLaserBiasCurrent, jnxPMCurDiffGroupDelay=jnxPMCurDiffGroupDelay, jnxPMCurMaxPolarState=jnxPMCurMaxPolarState, jnxPMCurSuspectedFlag=jnxPMCurSuspectedFlag, jnxPMCurMaxQ=jnxPMCurMaxQ, jnxPMCurMinSNR=jnxPMCurMinSNR, jnxPMDayMinPolarState=jnxPMDayMinPolarState, jnxRxLosPowerWarningThresh=jnxRxLosPowerWarningThresh, jnxPMDayMaxSNR=jnxPMDayMaxSNR, jnxPMCurMaxRxInputPower=jnxPMCurMaxRxInputPower, jnxPMDayMinChromaticDispersion=jnxPMDayMinChromaticDispersion, jnxIfOpticsMib=jnxIfOpticsMib, jnxOpticsConfigL2Index=jnxOpticsConfigL2Index, jnxOpticsTraceToneCfgDestId=jnxOpticsTraceToneCfgDestId, PYSNMP_MODULE_ID=jnxIfOpticsMib, jnxPMDayMinRxInputPower=jnxPMDayMinRxInputPower, jnxPMIntMinPolarState=jnxPMIntMinPolarState, jnxPMIntAvgPolarState=jnxPMIntAvgPolarState, jnxPMIntAvgSNR=jnxPMIntAvgSNR, jnxPMIntTimeStamp=jnxPMIntTimeStamp, jnxPMIntAvgTemperature=jnxPMIntAvgTemperature, jnxRxOpticalPower=jnxRxOpticalPower, jnxPMCurSNR=jnxPMCurSNR, jnxPMDayMaxRxLaserBiasCurrent=jnxPMDayMaxRxLaserBiasCurrent, jnxModuleTempLowThresh=jnxModuleTempLowThresh, jnxPMCurTemperature=jnxPMCurTemperature, jnxPMDayMaxPolarDependentLoss=jnxPMDayMaxPolarDependentLoss, jnxPMIntMinTemperature=jnxPMIntMinTemperature, jnxPMDayMinQ=jnxPMDayMinQ, jnxOpticsTrigServiceStateAction=jnxOpticsTrigServiceStateAction, jnxOpticsClearIfPMsTable=jnxOpticsClearIfPMsTable, jnx24HourRxPowerLowThresh=jnx24HourRxPowerLowThresh, jnxOpticsNotificationSet=jnxOpticsNotificationSet, jnxPMCurMaxRxLaserBiasCurrent=jnxPMCurMaxRxLaserBiasCurrent, jnxOpticsConfigContainerIndex=jnxOpticsConfigContainerIndex, jnxPMCurAvgTxLaserBiasCurrent=jnxPMCurAvgTxLaserBiasCurrent, jnxPMDayMaxPolarState=jnxPMDayMaxPolarState, jnxPMDayAvgTemperature=jnxPMDayAvgTemperature, jnxWavelength=jnxWavelength, jnxOpticsNotificationTable=jnxOpticsNotificationTable, jnxPMIntAvgTxOutputPower=jnxPMIntAvgTxOutputPower, jnxOpticsNotificationPrefix=jnxOpticsNotificationPrefix, jnxPMCurMinPolarDepLoss=jnxPMCurMinPolarDepLoss)
