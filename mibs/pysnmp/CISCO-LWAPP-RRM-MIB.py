#
# PySNMP MIB module CISCO-LWAPP-RRM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-RRM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:49:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
cLApName, = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApName")
cldcIfType, cldcClientMacAddress, cldcApMacAddress = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType", "cldcClientMacAddress", "cldcApMacAddress")
CLApIfType, = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLApIfType")
cLWlanChdEnable, = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLWlanChdEnable")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, MibIdentifier, ObjectIdentity, Counter64, Gauge32, Unsigned32, Counter32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Counter64", "Gauge32", "Unsigned32", "Counter32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "iso")
MacAddress, TruthValue, DisplayString, RowStatus, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "RowStatus", "TimeStamp", "TextualConvention")
ciscoLwappRrmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 615))
ciscoLwappRrmMIB.setRevisions(('2011-03-08 00:00', '2007-11-13 00:00', '2007-02-21 00:00',))
if mibBuilder.loadTexts: ciscoLwappRrmMIB.setLastUpdated('201103290000Z')
if mibBuilder.loadTexts: ciscoLwappRrmMIB.setOrganization('Cisco Systems Inc.')
ciscoLwappRrmMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 0))
ciscoLwappRrmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 1))
ciscoLwappRrmMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 2))
clrRrmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1))
class ClrRrmTupleTuningRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-127, 127)

clrRrmParametersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1), )
if mibBuilder.loadTexts: clrRrmParametersTable.setStatus('current')
clrRrmParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-RRM-MIB", "clrRrmParametersType"))
if mibBuilder.loadTexts: clrRrmParametersEntry.setStatus('current')
clrRrmParametersType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 1), CLApIfType())
if mibBuilder.loadTexts: clrRrmParametersType.setStatus('current')
clrRrmParametersPicoCellMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("picoCellv1", 2), ("picoCellv2", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersPicoCellMode.setStatus('deprecated')
clrRrmParametersChdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersChdEnable.setStatus('current')
clrRrmParametersVoicePktCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersVoicePktCountThreshold.setStatus('current')
clrRrmParametersVoicePktPercentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersVoicePktPercentThreshold.setStatus('current')
clrRrmParametersVoiceRssiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60)).clone(-80)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersVoiceRssiThreshold.setStatus('current')
clrRrmParametersDataPktCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersDataPktCountThreshold.setStatus('current')
clrRrmParametersDataPktPercentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersDataPktPercentThreshold.setStatus('current')
clrRrmParametersDataRssiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60)).clone(-74)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersDataRssiThreshold.setStatus('current')
clrRrmParametersDcaChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("min", 1), ("medium", 2), ("max", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersDcaChannelWidth.setStatus('current')
clrRrmParametersMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-126, 126)).clone(30)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersMaxTxPower.setStatus('current')
clrRrmParametersMinTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-126, 126)).clone(-10)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersMinTxPower.setStatus('current')
clrRrmParametersTpcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("versionOne", 1), ("versionTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersTpcVersion.setStatus('current')
clrRrmParametersMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersMaxClients.setStatus('current')
clrRrmParametersRssiCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersRssiCheckEnable.setStatus('current')
clrRrmParametersRssiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60)).clone(-80)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersRssiThreshold.setStatus('current')
clrRrmParametersOptRoamEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersOptRoamEnable.setStatus('current')
clrRrmParametersOptRoamDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersOptRoamDataRate.setStatus('current')
clrRrmParametersOptRoamInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 90)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmParametersOptRoamInterval.setStatus('current')
clrRrmTupleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2), )
if mibBuilder.loadTexts: clrRrmTupleTable.setStatus('deprecated')
clrRrmTupleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-RRM-MIB", "clrRrmParametersType"))
if mibBuilder.loadTexts: clrRrmTupleEntry.setStatus('deprecated')
clrRrmTupleRxSenseThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 1), ClrRrmTupleTuningRange().clone(-127)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleRxSenseThresholdMin.setStatus('deprecated')
clrRrmTupleRxSenseThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 2), ClrRrmTupleTuningRange().clone(127)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleRxSenseThresholdMax.setStatus('deprecated')
clrRrmTupleRxSenseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 3), ClrRrmTupleTuningRange().clone(-80)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleRxSenseThreshold.setStatus('deprecated')
clrRrmTupleCcaSenseThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 4), ClrRrmTupleTuningRange().clone(-127)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleCcaSenseThresholdMin.setStatus('deprecated')
clrRrmTupleCcaSenseThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 5), ClrRrmTupleTuningRange().clone(127)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleCcaSenseThresholdMax.setStatus('deprecated')
clrRrmTupleCcaSenseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 6), ClrRrmTupleTuningRange().clone(-60)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleCcaSenseThreshold.setStatus('deprecated')
clrRrmTupleTransmitPowerLevelMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 7), ClrRrmTupleTuningRange().clone(-127)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleTransmitPowerLevelMin.setStatus('deprecated')
clrRrmTupleTransmitPowerLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 8), ClrRrmTupleTuningRange().clone(127)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleTransmitPowerLevelMax.setStatus('deprecated')
clrRrmTupleTransmitPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 9), ClrRrmTupleTuningRange().clone(10)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleTransmitPowerLevel.setStatus('deprecated')
clrRrmTupleSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmTupleSetDefault.setStatus('deprecated')
clrRrmChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 4), )
if mibBuilder.loadTexts: clrRrmChannelTable.setStatus('current')
clrRrmChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-RRM-MIB", "clrRrmParametersType"), (0, "CISCO-LWAPP-RRM-MIB", "clrRrmChannelNum"))
if mibBuilder.loadTexts: clrRrmChannelEntry.setStatus('current')
clrRrmChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clrRrmChannelNum.setStatus('current')
clrRrmChannelDcaState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmChannelDcaState.setStatus('current')
clrRrmDot11BandGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5), )
if mibBuilder.loadTexts: clrRrmDot11BandGrpTable.setStatus('current')
clrRrmDot11BandGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-RRM-MIB", "clrRrmParametersType"))
if mibBuilder.loadTexts: clrRrmDot11BandGrpEntry.setStatus('current')
clrRrmDot11BandGrpLeaderIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandGrpLeaderIpAddressType.setStatus('current')
clrRrmDot11BandGrpLeaderIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandGrpLeaderIpAddress.setStatus('current')
clrRrmDot11BandGrpLeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandGrpLeaderName.setStatus('current')
clrRrmDot11BandGrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("leader", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmDot11BandGrpMode.setStatus('current')
clrRrmDot11BandGrpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("auto-leader", 2), ("auto-member", 3), ("static-leader", 4), ("static-member", 5))).clone('auto-leader')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandGrpRole.setStatus('current')
clrRrmDot11BandGrpRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmDot11BandGrpRestart.setStatus('current')
clrRrmDot11BandGrpLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandGrpLastUpdateTime.setStatus('current')
clrRrmDot11BandGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandGrpInterval.setStatus('current')
clrRrmDot11BandGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6), )
if mibBuilder.loadTexts: clrRrmDot11BandGrpMemberTable.setStatus('current')
clrRrmDot11BandGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-RRM-MIB", "clrRrmParametersType"), (0, "CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandMemberIpAddressType"), (0, "CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandMemberIpAddress"))
if mibBuilder.loadTexts: clrRrmDot11BandGrpMemberEntry.setStatus('current')
clrRrmDot11BandMemberIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: clrRrmDot11BandMemberIpAddressType.setStatus('current')
clrRrmDot11BandMemberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: clrRrmDot11BandMemberIpAddress.setStatus('current')
clrRrmDot11BandMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRrmDot11BandMemberName.setStatus('current')
clrRrmDot11BandMemberIsJoined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandMemberIsJoined.setStatus('current')
clrRrmDot11BandMemberJoinFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("joinedSuccessfully", 1), ("invalidIp", 2), ("groupSizeExceeded", 3), ("invalidGroupOrder", 4), ("nonMatchingGroupID", 5), ("unexpectedError", 6), ("weakSignalStrength", 7), ("joinPending", 8), ("notAManager", 9), ("groupingDelayed", 10), ("groupingDisabled", 11), ("invalidProtocolVersion", 12), ("countryCodeMismatch", 13), ("invalidHierarchy", 14), ("alreadyAStaticLeader", 15), ("memberOfAnotherGroup", 16), ("unconfiguredAsStaticMember", 17), ("cntlrNameAndIpMismatch", 18), ("unexpectedMemoryError", 19), ("rfDomainMismatch", 20), ("splitForInvalidStateRequest", 21), ("transitioningToStaticFromAuto", 22), ("splitDueToUserAction", 23))).clone('joinedSuccessfully')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmDot11BandMemberJoinFailureReason.setStatus('current')
clrRrmDot11BandMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRrmDot11BandMemberRowStatus.setStatus('current')
clrRrmDcaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 7))
clrRrmDcaDot11aOutdoorAPDca = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmDcaDot11aOutdoorAPDca.setStatus('current')
clrRrmRfGroupingPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRrmRfGroupingPriority.setStatus('current')
clrRrmPakRssiConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 10))
clrRrmPakRssiEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 10, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmPakRssiEnable.setStatus('current')
clrRrmPakRssiThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 10, 2), Integer32().clone(-100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmPakRssiThreshold.setStatus('current')
clrRrmPakRssiThresholdTrigger = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 10, 3), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmPakRssiThresholdTrigger.setStatus('current')
clrRrmPakRssiNtpIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 10, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmPakRssiNtpIpAddressType.setStatus('current')
clrRrmPakRssiNtp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 1, 10, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrRrmPakRssiNtp.setStatus('current')
clrRrmNotificationVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2))
clrRrmApTransmitPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 200))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmApTransmitPowerLevel.setStatus('current')
clrRrmTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 2), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmTimeStamp.setStatus('current')
clrRrmClientType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmClientType.setStatus('current')
clrRrmRssiHistogramLength = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmRssiHistogramLength.setStatus('current')
clrRrmRssiHistogramMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmRssiHistogramMaxIndex.setStatus('current')
clrRrmRssiHistogramMinIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmRssiHistogramMinIndex.setStatus('current')
clrRrmRssiHistogramValues = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 7), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmRssiHistogramValues.setStatus('current')
clrRrmNeighborApCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmNeighborApCount.setStatus('current')
clrRrmNeighborApMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 9), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmNeighborApMacAddress.setStatus('current')
clrRrmNeighborApRssi = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 10), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmNeighborApRssi.setStatus('current')
clrRrmNeighborApIfType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 11), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmNeighborApIfType.setStatus('current')
clrRrmSysMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 12), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmSysMacAddress.setStatus('current')
clrRrmSysIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 615, 1, 2, 13), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clrRrmSysIpAddress.setStatus('current')
ciscoLwappDot11ClientCoverageHolePreAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 615, 0, 1)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-RRM-MIB", "clrRrmApTransmitPowerLevel"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTimeStamp"), ("CISCO-LWAPP-RRM-MIB", "clrRrmClientType"), ("CISCO-LWAPP-RRM-MIB", "clrRrmRssiHistogramLength"), ("CISCO-LWAPP-RRM-MIB", "clrRrmRssiHistogramMaxIndex"), ("CISCO-LWAPP-RRM-MIB", "clrRrmRssiHistogramMinIndex"), ("CISCO-LWAPP-RRM-MIB", "clrRrmRssiHistogramValues"), ("CISCO-LWAPP-RRM-MIB", "clrRrmNeighborApCount"), ("CISCO-LWAPP-RRM-MIB", "clrRrmNeighborApMacAddress"), ("CISCO-LWAPP-RRM-MIB", "clrRrmNeighborApRssi"), ("CISCO-LWAPP-RRM-MIB", "clrRrmNeighborApIfType"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanChdEnable"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientCoverageHolePreAlarm.setStatus('current')
ciscoLwappRrmRfGroupLeaderChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 615, 0, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-RRM-MIB", "clrRrmSysMacAddress"), ("CISCO-LWAPP-RRM-MIB", "clrRrmSysIpAddress"))
if mibBuilder.loadTexts: ciscoLwappRrmRfGroupLeaderChange.setStatus('current')
ciscoLwappRrmRfGroupMemberAdded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 615, 0, 3)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-RRM-MIB", "clrRrmSysMacAddress"), ("CISCO-LWAPP-RRM-MIB", "clrRrmSysIpAddress"))
if mibBuilder.loadTexts: ciscoLwappRrmRfGroupMemberAdded.setStatus('current')
ciscoLwappRrmRfGroupMemberRemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 615, 0, 4)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-RRM-MIB", "clrRrmSysMacAddress"), ("CISCO-LWAPP-RRM-MIB", "clrRrmSysIpAddress"))
if mibBuilder.loadTexts: ciscoLwappRrmRfGroupMemberRemoved.setStatus('current')
ciscoLwappRrmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 1))
ciscoLwappRrmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 2))
ciscoLwappRrmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 1, 1)).setObjects(("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmMIBCompliance = ciscoLwappRrmMIBCompliance.setStatus('deprecated')
ciscoLwappRrmMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 1, 2)).setObjects(("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmConfigGroup"), ("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmConfigGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmMIBComplianceRev1 = ciscoLwappRrmMIBComplianceRev1.setStatus('deprecated')
ciscoLwappRrmMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 1, 3)).setObjects(("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmConfigGroupSup2"), ("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmConfigGroupSup1"), ("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmConfigGroupSup3"), ("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmConfigGroupSup4"), ("CISCO-LWAPP-RRM-MIB", "ciscoLwappRrmGrpStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmMIBComplianceRev2 = ciscoLwappRrmMIBComplianceRev2.setStatus('current')
ciscoLwappRrmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 2, 1)).setObjects(("CISCO-LWAPP-RRM-MIB", "clrRrmParametersPicoCellMode"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleRxSenseThresholdMin"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleRxSenseThresholdMax"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleRxSenseThreshold"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleCcaSenseThresholdMin"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleCcaSenseThresholdMax"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleCcaSenseThreshold"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleTransmitPowerLevelMin"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleTransmitPowerLevelMax"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleTransmitPowerLevel"), ("CISCO-LWAPP-RRM-MIB", "clrRrmTupleSetDefault"), ("CISCO-LWAPP-RRM-MIB", "clrRrmChannelDcaState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmConfigGroup = ciscoLwappRrmConfigGroup.setStatus('deprecated')
ciscoLwappRrmConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 2, 2)).setObjects(("CISCO-LWAPP-RRM-MIB", "clrRrmParametersChdEnable"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersVoicePktCountThreshold"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersVoicePktPercentThreshold"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersVoiceRssiThreshold"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersDataPktCountThreshold"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersDataPktPercentThreshold"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersDataRssiThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmConfigGroupSup1 = ciscoLwappRrmConfigGroupSup1.setStatus('current')
ciscoLwappRrmConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 2, 3)).setObjects(("CISCO-LWAPP-RRM-MIB", "clrRrmChannelDcaState"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersDcaChannelWidth"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDcaDot11aOutdoorAPDca"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmConfigGroupSup2 = ciscoLwappRrmConfigGroupSup2.setStatus('current')
ciscoLwappRrmConfigGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 2, 4)).setObjects(("CISCO-LWAPP-RRM-MIB", "clrRrmParametersMaxTxPower"), ("CISCO-LWAPP-RRM-MIB", "clrRrmParametersMinTxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmConfigGroupSup3 = ciscoLwappRrmConfigGroupSup3.setStatus('current')
ciscoLwappRrmConfigGroupSup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 2, 5)).setObjects(("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpMode"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpRestart"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandMemberName"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmConfigGroupSup4 = ciscoLwappRrmConfigGroupSup4.setStatus('current')
ciscoLwappRrmGrpStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 615, 2, 2, 6)).setObjects(("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpLeaderIpAddressType"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpLeaderIpAddress"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpLeaderName"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpRole"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpLastUpdateTime"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandGrpInterval"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandMemberIsJoined"), ("CISCO-LWAPP-RRM-MIB", "clrRrmDot11BandMemberJoinFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRrmGrpStatusGroup = ciscoLwappRrmGrpStatusGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-RRM-MIB", clrRrmDcaDot11aOutdoorAPDca=clrRrmDcaDot11aOutdoorAPDca, clrRrmPakRssiEnable=clrRrmPakRssiEnable, clrRrmPakRssiNtp=clrRrmPakRssiNtp, clrRrmParametersEntry=clrRrmParametersEntry, clrRrmRssiHistogramMinIndex=clrRrmRssiHistogramMinIndex, clrRrmParametersVoiceRssiThreshold=clrRrmParametersVoiceRssiThreshold, clrRrmParametersRssiCheckEnable=clrRrmParametersRssiCheckEnable, clrRrmDot11BandMemberIpAddressType=clrRrmDot11BandMemberIpAddressType, clrRrmParametersChdEnable=clrRrmParametersChdEnable, ciscoLwappRrmMIBObjects=ciscoLwappRrmMIBObjects, clrRrmNotificationVariable=clrRrmNotificationVariable, clrRrmChannelDcaState=clrRrmChannelDcaState, clrRrmParametersMaxClients=clrRrmParametersMaxClients, clrRrmTupleEntry=clrRrmTupleEntry, clrRrmParametersMaxTxPower=clrRrmParametersMaxTxPower, clrRrmRssiHistogramValues=clrRrmRssiHistogramValues, clrRrmParametersOptRoamEnable=clrRrmParametersOptRoamEnable, ciscoLwappRrmConfigGroupSup3=ciscoLwappRrmConfigGroupSup3, clrRrmSysIpAddress=clrRrmSysIpAddress, clrRrmRssiHistogramLength=clrRrmRssiHistogramLength, clrRrmClientType=clrRrmClientType, ciscoLwappRrmConfigGroupSup2=ciscoLwappRrmConfigGroupSup2, clrRrmTimeStamp=clrRrmTimeStamp, clrRrmChannelTable=clrRrmChannelTable, ciscoLwappRrmMIBCompliances=ciscoLwappRrmMIBCompliances, ciscoLwappRrmMIBComplianceRev1=ciscoLwappRrmMIBComplianceRev1, clrRrmParametersDataRssiThreshold=clrRrmParametersDataRssiThreshold, ciscoLwappRrmConfigGroupSup4=ciscoLwappRrmConfigGroupSup4, clrRrmDot11BandGrpTable=clrRrmDot11BandGrpTable, clrRrmDot11BandGrpInterval=clrRrmDot11BandGrpInterval, ciscoLwappRrmRfGroupMemberAdded=ciscoLwappRrmRfGroupMemberAdded, ClrRrmTupleTuningRange=ClrRrmTupleTuningRange, clrRrmTupleCcaSenseThreshold=clrRrmTupleCcaSenseThreshold, clrRrmNeighborApMacAddress=clrRrmNeighborApMacAddress, clrRrmDot11BandGrpLeaderIpAddressType=clrRrmDot11BandGrpLeaderIpAddressType, clrRrmPakRssiThreshold=clrRrmPakRssiThreshold, clrRrmPakRssiNtpIpAddressType=clrRrmPakRssiNtpIpAddressType, ciscoLwappRrmConfigGroupSup1=ciscoLwappRrmConfigGroupSup1, clrRrmParametersTpcVersion=clrRrmParametersTpcVersion, clrRrmTupleCcaSenseThresholdMax=clrRrmTupleCcaSenseThresholdMax, clrRrmNeighborApRssi=clrRrmNeighborApRssi, ciscoLwappRrmMIBNotifs=ciscoLwappRrmMIBNotifs, clrRrmChannelEntry=clrRrmChannelEntry, clrRrmPakRssiConfig=clrRrmPakRssiConfig, clrRrmNeighborApIfType=clrRrmNeighborApIfType, clrRrmDot11BandMemberRowStatus=clrRrmDot11BandMemberRowStatus, ciscoLwappRrmRfGroupLeaderChange=ciscoLwappRrmRfGroupLeaderChange, ciscoLwappRrmGrpStatusGroup=ciscoLwappRrmGrpStatusGroup, clrRrmTupleTransmitPowerLevelMax=clrRrmTupleTransmitPowerLevelMax, PYSNMP_MODULE_ID=ciscoLwappRrmMIB, clrRrmDot11BandGrpLeaderIpAddress=clrRrmDot11BandGrpLeaderIpAddress, clrRrmTupleSetDefault=clrRrmTupleSetDefault, clrRrmParametersOptRoamDataRate=clrRrmParametersOptRoamDataRate, clrRrmTupleTable=clrRrmTupleTable, clrRrmParametersOptRoamInterval=clrRrmParametersOptRoamInterval, ciscoLwappRrmMIBConform=ciscoLwappRrmMIBConform, clrRrmDot11BandGrpLeaderName=clrRrmDot11BandGrpLeaderName, clrRrmTupleCcaSenseThresholdMin=clrRrmTupleCcaSenseThresholdMin, clrRrmApTransmitPowerLevel=clrRrmApTransmitPowerLevel, clrRrmTupleRxSenseThreshold=clrRrmTupleRxSenseThreshold, clrRrmTupleTransmitPowerLevelMin=clrRrmTupleTransmitPowerLevelMin, clrRrmRfGroupingPriority=clrRrmRfGroupingPriority, ciscoLwappDot11ClientCoverageHolePreAlarm=ciscoLwappDot11ClientCoverageHolePreAlarm, clrRrmDot11BandGrpMemberEntry=clrRrmDot11BandGrpMemberEntry, clrRrmDot11BandGrpRestart=clrRrmDot11BandGrpRestart, clrRrmParametersTable=clrRrmParametersTable, clrRrmDot11BandMemberIpAddress=clrRrmDot11BandMemberIpAddress, clrRrmDot11BandMemberName=clrRrmDot11BandMemberName, clrRrmDot11BandGrpMemberTable=clrRrmDot11BandGrpMemberTable, clrRrmDot11BandGrpMode=clrRrmDot11BandGrpMode, clrRrmParametersPicoCellMode=clrRrmParametersPicoCellMode, clrRrmParametersVoicePktPercentThreshold=clrRrmParametersVoicePktPercentThreshold, clrRrmParametersVoicePktCountThreshold=clrRrmParametersVoicePktCountThreshold, clrRrmParametersDcaChannelWidth=clrRrmParametersDcaChannelWidth, clrRrmParametersDataPktPercentThreshold=clrRrmParametersDataPktPercentThreshold, clrRrmDcaConfig=clrRrmDcaConfig, clrRrmDot11BandGrpLastUpdateTime=clrRrmDot11BandGrpLastUpdateTime, clrRrmDot11BandMemberJoinFailureReason=clrRrmDot11BandMemberJoinFailureReason, clrRrmChannelNum=clrRrmChannelNum, clrRrmSysMacAddress=clrRrmSysMacAddress, ciscoLwappRrmMIBComplianceRev2=ciscoLwappRrmMIBComplianceRev2, clrRrmTupleRxSenseThresholdMax=clrRrmTupleRxSenseThresholdMax, ciscoLwappRrmMIB=ciscoLwappRrmMIB, clrRrmPakRssiThresholdTrigger=clrRrmPakRssiThresholdTrigger, clrRrmNeighborApCount=clrRrmNeighborApCount, clrRrmTupleTransmitPowerLevel=clrRrmTupleTransmitPowerLevel, ciscoLwappRrmConfigGroup=ciscoLwappRrmConfigGroup, clrRrmConfig=clrRrmConfig, clrRrmParametersType=clrRrmParametersType, clrRrmParametersRssiThreshold=clrRrmParametersRssiThreshold, clrRrmRssiHistogramMaxIndex=clrRrmRssiHistogramMaxIndex, clrRrmDot11BandMemberIsJoined=clrRrmDot11BandMemberIsJoined, clrRrmDot11BandGrpRole=clrRrmDot11BandGrpRole, ciscoLwappRrmMIBCompliance=ciscoLwappRrmMIBCompliance, clrRrmTupleRxSenseThresholdMin=clrRrmTupleRxSenseThresholdMin, clrRrmDot11BandGrpEntry=clrRrmDot11BandGrpEntry, ciscoLwappRrmRfGroupMemberRemoved=ciscoLwappRrmRfGroupMemberRemoved, clrRrmParametersDataPktCountThreshold=clrRrmParametersDataPktCountThreshold, clrRrmParametersMinTxPower=clrRrmParametersMinTxPower, ciscoLwappRrmMIBGroups=ciscoLwappRrmMIBGroups)
