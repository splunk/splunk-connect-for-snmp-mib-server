#
# PySNMP MIB module CTRON-SFPS-MCAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-SFPS-MCAST-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:15:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
sfpsMcastCnxAPI, sfpsMcastConfigApi, sfpsMcastCnx, sfpsMcastIPRouter, sfpsMcastIPSIBApi, sfpsMcastIPSenderInfoBase, sfpsMcastIPRIBApi, sfpsMcastIPReceiverInfoBase = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsMcastCnxAPI", "sfpsMcastConfigApi", "sfpsMcastCnx", "sfpsMcastIPRouter", "sfpsMcastIPSIBApi", "sfpsMcastIPSenderInfoBase", "sfpsMcastIPRIBApi", "sfpsMcastIPReceiverInfoBase")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Gauge32, Counter32, NotificationType, ObjectIdentity, MibIdentifier, Integer32, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Gauge32", "Counter32", "NotificationType", "ObjectIdentity", "MibIdentifier", "Integer32", "Unsigned32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsMcastCnxDestination = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 1), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxDestination.setStatus('mandatory')
sfpsMcastCnxSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxSource.setStatus('mandatory')
sfpsMcastCnxSenderSw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxSenderSw.setStatus('mandatory')
sfpsMcastCnxInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxInPort.setStatus('mandatory')
sfpsMcastCnxOutPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxOutPorts.setStatus('mandatory')
sfpsMcastCnxGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxGroup.setStatus('mandatory')
sfpsMcastCnxTTL = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxTTL.setStatus('deprecated')
sfpsMcastCnxAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAge.setStatus('mandatory')
sfpsMcastCnxStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 8, 16, 17, 18))).clone(namedValues=NamedValues(("filter", 1), ("inActive", 2), ("remote", 4), ("netFilter", 5), ("dying", 8), ("static", 16), ("staticFilter", 17), ("staticInactive", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxStatus.setStatus('mandatory')
sfpsMcastCnxNextSw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 10), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxNextSw.setStatus('mandatory')
sfpsMcastCnxAPIDestination = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 1), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIDestination.setStatus('mandatory')
sfpsMcastCnxAPISource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPISource.setStatus('mandatory')
sfpsMcastCnxAPISenderSw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPISenderSw.setStatus('mandatory')
sfpsMcastCnxAPIInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIInPort.setStatus('mandatory')
sfpsMcastCnxAPIOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIOutPort.setStatus('mandatory')
sfpsMcastCnxAPIGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIGroup.setStatus('mandatory')
sfpsMcastCnxAPITTL = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPITTL.setStatus('deprecated')
sfpsMcastCnxAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("addFilter", 2), ("addPort", 3), ("delPort", 4), ("addCnx", 5), ("delCnx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIVerb.setStatus('mandatory')
sfpsMcastCnxAPIFilters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIFilters.setStatus('mandatory')
sfpsMcastCnxAPINonFilters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPINonFilters.setStatus('mandatory')
sfpsMcastIPRouterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1), )
if mibBuilder.loadTexts: sfpsMcastIPRouterTable.setStatus('mandatory')
sfpsMcastIPRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPRouterIfNum"))
if mibBuilder.loadTexts: sfpsMcastIPRouterEntry.setStatus('mandatory')
sfpsMcastIPRouterIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterIfNum.setStatus('mandatory')
sfpsMcastIPRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterVlanId.setStatus('mandatory')
sfpsMcastIPRouterRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterRouterIP.setStatus('mandatory')
sfpsMcastIPRouterTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterTTL.setStatus('deprecated')
sfpsMcastIPRouterAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("portMap", 2), ("portUnmap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIVerb.setStatus('mandatory')
sfpsMcastIPRouterAPIIFNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIIFNum.setStatus('mandatory')
sfpsMcastIPRouterAPIRouterIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIRouterIP.setStatus('mandatory')
sfpsMcastIPRouterAPITTLScope = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 16, 64, 128, 192, 255))).clone(namedValues=NamedValues(("subnet", 1), ("vacinity", 4), ("site", 16), ("region", 64), ("world", 128), ("worldLimited", 192), ("unrestricted", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPITTLScope.setStatus('deprecated')
sfpsMcastIPRouterAPIVlanId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIVlanId.setStatus('mandatory')
sfpsMcastIPRIBTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1), )
if mibBuilder.loadTexts: sfpsMcastIPRIBTable.setStatus('mandatory')
sfpsMcastIPRIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPRIBGroup"))
if mibBuilder.loadTexts: sfpsMcastIPRIBEntry.setStatus('mandatory')
sfpsMcastIPRIBGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBGroup.setStatus('mandatory')
sfpsMcastIPRIBOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("router", 3), ("igmp", 4), ("netMgt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBOrigin.setStatus('mandatory')
sfpsMcastIPRIBInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBInclusion.setStatus('mandatory')
sfpsMcastIPRIBRcvPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBRcvPorts.setStatus('mandatory')
sfpsMcastIPRIBAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBAge.setStatus('mandatory')
sfpsMcastIPRIBApiGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBApiGroup.setStatus('mandatory')
sfpsMcastIPRIBApiPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBApiPort.setStatus('mandatory')
sfpsMcastIPRIBApiVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("includePort", 1), ("undoInclude", 2), ("excludePort", 3), ("undoExclude", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBApiVerb.setStatus('mandatory')
sfpsMcastConfigApiSenderTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiSenderTableSize.setStatus('mandatory')
sfpsMcastConfigApiMaxNonFilters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiMaxNonFilters.setStatus('mandatory')
sfpsMcastConfigApiRDRetryBuffs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRDRetryBuffs.setStatus('mandatory')
sfpsMcastConfigApiRDPktBuffs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRDPktBuffs.setStatus('mandatory')
sfpsMcastConfigApiPendingMaps = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiPendingMaps.setStatus('mandatory')
sfpsMcastConfigApiSndrAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiSndrAgeOut.setStatus('mandatory')
sfpsMcastConfigApiRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRefreshInterval.setStatus('mandatory')
sfpsMcastConfigApiSndersPerAncmt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiSndersPerAncmt.setStatus('mandatory')
sfpsMcastConfigApiDebugLog = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiDebugLog.setStatus('mandatory')
sfpsMcastConfigApiStaticTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiStaticTblSize.setStatus('mandatory')
sfpsMcastConfigApiMcribSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiMcribSize.setStatus('mandatory')
sfpsMcastConfigApiMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("doNoVlanChecking", 1), ("doSomeVlanChecking", 2), ("checkAll", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiMcastMode.setStatus('mandatory')
sfpsMcastConfigApiRemapDelay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRemapDelay.setStatus('mandatory')
sfpsMcastConfigApiQHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiQHighLimit.setStatus('mandatory')
sfpsMcastConfigApiQLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiQLowLimit.setStatus('mandatory')
sfpsMcastConfigApiDynamicQuery = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiDynamicQuery.setStatus('mandatory')
sfpsMcastIPSIBTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1), )
if mibBuilder.loadTexts: sfpsMcastIPSIBTable.setStatus('mandatory')
sfpsMcastIPSIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPSIBGroup"), (0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPSIBSender"))
if mibBuilder.loadTexts: sfpsMcastIPSIBEntry.setStatus('mandatory')
sfpsMcastIPSIBGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBGroup.setStatus('mandatory')
sfpsMcastIPSIBSender = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBSender.setStatus('mandatory')
sfpsMcastIPSIBInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBInclusion.setStatus('mandatory')
sfpsMcastIPSIBAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBAge.setStatus('mandatory')
sfpsMcastIPSibApiGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPSibApiGroup.setStatus('mandatory')
sfpsMcastIPSibApiSender = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 2, 2), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPSibApiSender.setStatus('mandatory')
sfpsMcastIPSibApiVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("includeSender", 1), ("undoInclude", 2), ("excludeSender", 3), ("undoExclude", 4), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPSibApiVerb.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-MCAST-MIB", sfpsMcastIPRouterAPIRouterIP=sfpsMcastIPRouterAPIRouterIP, sfpsMcastIPSIBGroup=sfpsMcastIPSIBGroup, sfpsMcastConfigApiDebugLog=sfpsMcastConfigApiDebugLog, sfpsMcastCnxAPISource=sfpsMcastCnxAPISource, sfpsMcastCnxAPIVerb=sfpsMcastCnxAPIVerb, sfpsMcastIPRouterAPIVlanId=sfpsMcastIPRouterAPIVlanId, sfpsMcastConfigApiMcastMode=sfpsMcastConfigApiMcastMode, sfpsMcastConfigApiQHighLimit=sfpsMcastConfigApiQHighLimit, sfpsMcastIPRIBAge=sfpsMcastIPRIBAge, sfpsMcastCnxAPIGroup=sfpsMcastCnxAPIGroup, sfpsMcastConfigApiDynamicQuery=sfpsMcastConfigApiDynamicQuery, sfpsMcastConfigApiRefreshInterval=sfpsMcastConfigApiRefreshInterval, sfpsMcastIPRIBRcvPorts=sfpsMcastIPRIBRcvPorts, sfpsMcastIPRouterEntry=sfpsMcastIPRouterEntry, sfpsMcastIPRouterRouterIP=sfpsMcastIPRouterRouterIP, sfpsMcastIPRIBInclusion=sfpsMcastIPRIBInclusion, sfpsMcastConfigApiStaticTblSize=sfpsMcastConfigApiStaticTblSize, sfpsMcastCnxOutPorts=sfpsMcastCnxOutPorts, sfpsMcastCnxStatus=sfpsMcastCnxStatus, sfpsMcastCnxAPITTL=sfpsMcastCnxAPITTL, sfpsMcastIPSibApiGroup=sfpsMcastIPSibApiGroup, sfpsMcastCnxAge=sfpsMcastCnxAge, sfpsMcastIPSIBAge=sfpsMcastIPSIBAge, sfpsMcastCnxInPort=sfpsMcastCnxInPort, sfpsMcastCnxAPIInPort=sfpsMcastCnxAPIInPort, sfpsMcastCnxAPINonFilters=sfpsMcastCnxAPINonFilters, sfpsMcastIPRIBApiPort=sfpsMcastIPRIBApiPort, sfpsMcastCnxAPIOutPort=sfpsMcastCnxAPIOutPort, sfpsMcastIPSIBInclusion=sfpsMcastIPSIBInclusion, sfpsMcastCnxAPIDestination=sfpsMcastCnxAPIDestination, sfpsMcastIPSIBSender=sfpsMcastIPSIBSender, sfpsMcastCnxAPIFilters=sfpsMcastCnxAPIFilters, sfpsMcastConfigApiSenderTableSize=sfpsMcastConfigApiSenderTableSize, sfpsMcastCnxAPISenderSw=sfpsMcastCnxAPISenderSw, sfpsMcastCnxSource=sfpsMcastCnxSource, sfpsMcastCnxTTL=sfpsMcastCnxTTL, sfpsMcastConfigApiSndrAgeOut=sfpsMcastConfigApiSndrAgeOut, sfpsMcastCnxSenderSw=sfpsMcastCnxSenderSw, sfpsMcastIPSIBEntry=sfpsMcastIPSIBEntry, sfpsMcastConfigApiMaxNonFilters=sfpsMcastConfigApiMaxNonFilters, sfpsMcastIPSibApiVerb=sfpsMcastIPSibApiVerb, sfpsMcastCnxDestination=sfpsMcastCnxDestination, sfpsMcastConfigApiMcribSize=sfpsMcastConfigApiMcribSize, sfpsMcastCnxNextSw=sfpsMcastCnxNextSw, sfpsMcastConfigApiRDPktBuffs=sfpsMcastConfigApiRDPktBuffs, sfpsMcastIPRouterTTL=sfpsMcastIPRouterTTL, sfpsMcastConfigApiRemapDelay=sfpsMcastConfigApiRemapDelay, sfpsMcastCnxGroup=sfpsMcastCnxGroup, SfpsAddress=SfpsAddress, sfpsMcastIPRIBOrigin=sfpsMcastIPRIBOrigin, sfpsMcastConfigApiRDRetryBuffs=sfpsMcastConfigApiRDRetryBuffs, sfpsMcastIPRouterTable=sfpsMcastIPRouterTable, sfpsMcastConfigApiQLowLimit=sfpsMcastConfigApiQLowLimit, sfpsMcastIPRIBApiGroup=sfpsMcastIPRIBApiGroup, sfpsMcastIPRIBGroup=sfpsMcastIPRIBGroup, sfpsMcastIPSIBTable=sfpsMcastIPSIBTable, sfpsMcastIPRouterAPIVerb=sfpsMcastIPRouterAPIVerb, sfpsMcastIPRIBApiVerb=sfpsMcastIPRIBApiVerb, sfpsMcastConfigApiPendingMaps=sfpsMcastConfigApiPendingMaps, sfpsMcastIPRouterAPIIFNum=sfpsMcastIPRouterAPIIFNum, sfpsMcastIPRIBTable=sfpsMcastIPRIBTable, sfpsMcastIPRIBEntry=sfpsMcastIPRIBEntry, sfpsMcastIPRouterIfNum=sfpsMcastIPRouterIfNum, sfpsMcastIPSibApiSender=sfpsMcastIPSibApiSender, sfpsMcastIPRouterVlanId=sfpsMcastIPRouterVlanId, sfpsMcastIPRouterAPITTLScope=sfpsMcastIPRouterAPITTLScope, sfpsMcastConfigApiSndersPerAncmt=sfpsMcastConfigApiSndersPerAncmt)
