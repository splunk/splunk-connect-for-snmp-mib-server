#
# PySNMP MIB module HH3C-RRPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RRPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, ObjectIdentity, TimeTicks, IpAddress, Integer32, iso, MibIdentifier, Counter32, ModuleIdentity, NotificationType, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "ObjectIdentity", "TimeTicks", "IpAddress", "Integer32", "iso", "MibIdentifier", "Counter32", "ModuleIdentity", "NotificationType", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hh3cRrpp = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 45))
if mibBuilder.loadTexts: hh3cRrpp.setLastUpdated('200412020000Z')
if mibBuilder.loadTexts: hh3cRrpp.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hh3cRrppScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 45, 1))
hh3cRrppEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 45, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRrppEnableStatus.setStatus('current')
hh3cRrppPassword = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 45, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone(hexValue="303030464532303346443735")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRrppPassword.setStatus('current')
hh3cRrppPasswordType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("cipher", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRrppPasswordType.setStatus('current')
hh3cRrppProtectVlanConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 45, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("instance", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppProtectVlanConfigMode.setStatus('current')
hh3cRrppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2))
hh3cRrppDomainTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1), )
if mibBuilder.loadTexts: hh3cRrppDomainTable.setStatus('current')
hh3cRrppDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1), ).setIndexNames((0, "HH3C-RRPP-MIB", "hh3cRrppDomainID"))
if mibBuilder.loadTexts: hh3cRrppDomainEntry.setStatus('current')
hh3cRrppDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRrppDomainID.setStatus('current')
hh3cRrppDomainControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainControlVlanID.setStatus('current')
hh3cRrppDomainHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainHelloTime.setStatus('current')
hh3cRrppDomainFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainFailTime.setStatus('current')
hh3cRrppDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainRowStatus.setStatus('current')
hh3cRrppDomainInstanceListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainInstanceListLow.setStatus('current')
hh3cRrppDomainInstanceListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainInstanceListHigh.setStatus('current')
hh3cRrppDomainProtectVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainProtectVlanListLow.setStatus('current')
hh3cRrppDomainProtectVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppDomainProtectVlanListHigh.setStatus('current')
hh3cRrppRingTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2), )
if mibBuilder.loadTexts: hh3cRrppRingTable.setStatus('current')
hh3cRrppRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1), ).setIndexNames((0, "HH3C-RRPP-MIB", "hh3cRrppDomainID"), (0, "HH3C-RRPP-MIB", "hh3cRrppRingID"))
if mibBuilder.loadTexts: hh3cRrppRingEntry.setStatus('current')
hh3cRrppRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRrppRingID.setStatus('current')
hh3cRrppRingEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 2), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppRingEnableStatus.setStatus('current')
hh3cRrppRingActive = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppRingActive.setStatus('current')
hh3cRrppRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("health", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppRingState.setStatus('current')
hh3cRrppRingNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("transit", 2), ("edge", 3), ("assistantEdge", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppRingNodeMode.setStatus('current')
hh3cRrppRingPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppRingPrimaryPort.setStatus('current')
hh3cRrppRingSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppRingSecondaryPort.setStatus('current')
hh3cRrppRingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("majorRing", 1), ("subRing", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppRingLevel.setStatus('current')
hh3cRrppRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRrppRingRowStatus.setStatus('current')
hh3cRrppPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3), )
if mibBuilder.loadTexts: hh3cRrppPortTable.setStatus('current')
hh3cRrppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1), ).setIndexNames((0, "HH3C-RRPP-MIB", "hh3cRrppDomainID"), (0, "HH3C-RRPP-MIB", "hh3cRrppRingID"), (0, "HH3C-RRPP-MIB", "hh3cRrppPortID"))
if mibBuilder.loadTexts: hh3cRrppPortEntry.setStatus('current')
hh3cRrppPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cRrppPortID.setStatus('current')
hh3cRrppPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("common", 3), ("edge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRole.setStatus('current')
hh3cRrppPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("unblocked", 2), ("blocked", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortState.setStatus('current')
hh3cRrppPortRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXError.setStatus('current')
hh3cRrppPortRXHello = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXHello.setStatus('current')
hh3cRrppPortRXLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXLinkUp.setStatus('current')
hh3cRrppPortRXLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXLinkDown.setStatus('current')
hh3cRrppPortRXCommonFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXCommonFlush.setStatus('current')
hh3cRrppPortRXCompleteFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXCompleteFlush.setStatus('current')
hh3cRrppPortTXHello = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortTXHello.setStatus('current')
hh3cRrppPortTXLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortTXLinkUp.setStatus('current')
hh3cRrppPortTXLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortTXLinkDown.setStatus('current')
hh3cRrppPortTXCommonFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortTXCommonFlush.setStatus('current')
hh3cRrppPortTXCompleteFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortTXCompleteFlush.setStatus('current')
hh3cRrppPortRXEdgeHello = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXEdgeHello.setStatus('current')
hh3cRrppPortRXMajorFault = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortRXMajorFault.setStatus('current')
hh3cRrppPortTXEdgeHello = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortTXEdgeHello.setStatus('current')
hh3cRrppPortTXMajorFault = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 45, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRrppPortTXMajorFault.setStatus('current')
hh3cRrppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 45, 3))
hh3cRrppRingRecover = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 45, 3, 1)).setObjects(("HH3C-RRPP-MIB", "hh3cRrppDomainID"), ("HH3C-RRPP-MIB", "hh3cRrppRingID"))
if mibBuilder.loadTexts: hh3cRrppRingRecover.setStatus('current')
hh3cRrppRingFail = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 45, 3, 2)).setObjects(("HH3C-RRPP-MIB", "hh3cRrppDomainID"), ("HH3C-RRPP-MIB", "hh3cRrppRingID"))
if mibBuilder.loadTexts: hh3cRrppRingFail.setStatus('current')
hh3cRrppMultiMaster = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 45, 3, 3)).setObjects(("HH3C-RRPP-MIB", "hh3cRrppDomainID"), ("HH3C-RRPP-MIB", "hh3cRrppRingID"))
if mibBuilder.loadTexts: hh3cRrppMultiMaster.setStatus('current')
hh3cRrppMajorFault = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 45, 3, 4)).setObjects(("HH3C-RRPP-MIB", "hh3cRrppDomainID"), ("HH3C-RRPP-MIB", "hh3cRrppRingID"))
if mibBuilder.loadTexts: hh3cRrppMajorFault.setStatus('current')
mibBuilder.exportSymbols("HH3C-RRPP-MIB", hh3cRrppDomainTable=hh3cRrppDomainTable, hh3cRrppRingLevel=hh3cRrppRingLevel, hh3cRrppDomainInstanceListLow=hh3cRrppDomainInstanceListLow, hh3cRrppPortTXLinkDown=hh3cRrppPortTXLinkDown, hh3cRrppPortID=hh3cRrppPortID, hh3cRrppDomainProtectVlanListLow=hh3cRrppDomainProtectVlanListLow, EnabledStatus=EnabledStatus, hh3cRrppPortTXEdgeHello=hh3cRrppPortTXEdgeHello, hh3cRrppDomainInstanceListHigh=hh3cRrppDomainInstanceListHigh, hh3cRrppRingEnableStatus=hh3cRrppRingEnableStatus, hh3cRrppRingRowStatus=hh3cRrppRingRowStatus, hh3cRrppPortRXCompleteFlush=hh3cRrppPortRXCompleteFlush, hh3cRrppPortRXLinkDown=hh3cRrppPortRXLinkDown, hh3cRrppPortTXCommonFlush=hh3cRrppPortTXCommonFlush, hh3cRrpp=hh3cRrpp, hh3cRrppMajorFault=hh3cRrppMajorFault, hh3cRrppRingFail=hh3cRrppRingFail, hh3cRrppRingRecover=hh3cRrppRingRecover, hh3cRrppRingID=hh3cRrppRingID, hh3cRrppProtectVlanConfigMode=hh3cRrppProtectVlanConfigMode, hh3cRrppPortRXMajorFault=hh3cRrppPortRXMajorFault, hh3cRrppPortTXLinkUp=hh3cRrppPortTXLinkUp, hh3cRrppTable=hh3cRrppTable, hh3cRrppPortRXCommonFlush=hh3cRrppPortRXCommonFlush, hh3cRrppScalarGroup=hh3cRrppScalarGroup, hh3cRrppPortRXError=hh3cRrppPortRXError, hh3cRrppPortTXCompleteFlush=hh3cRrppPortTXCompleteFlush, hh3cRrppRingActive=hh3cRrppRingActive, hh3cRrppPortRXHello=hh3cRrppPortRXHello, hh3cRrppPortRXEdgeHello=hh3cRrppPortRXEdgeHello, hh3cRrppPortTable=hh3cRrppPortTable, hh3cRrppDomainProtectVlanListHigh=hh3cRrppDomainProtectVlanListHigh, hh3cRrppDomainID=hh3cRrppDomainID, hh3cRrppDomainFailTime=hh3cRrppDomainFailTime, hh3cRrppPortEntry=hh3cRrppPortEntry, hh3cRrppPassword=hh3cRrppPassword, hh3cRrppPortRole=hh3cRrppPortRole, hh3cRrppNotifications=hh3cRrppNotifications, hh3cRrppRingNodeMode=hh3cRrppRingNodeMode, hh3cRrppDomainEntry=hh3cRrppDomainEntry, hh3cRrppRingTable=hh3cRrppRingTable, hh3cRrppRingPrimaryPort=hh3cRrppRingPrimaryPort, hh3cRrppDomainHelloTime=hh3cRrppDomainHelloTime, hh3cRrppRingEntry=hh3cRrppRingEntry, hh3cRrppPortTXMajorFault=hh3cRrppPortTXMajorFault, hh3cRrppMultiMaster=hh3cRrppMultiMaster, hh3cRrppRingSecondaryPort=hh3cRrppRingSecondaryPort, hh3cRrppDomainRowStatus=hh3cRrppDomainRowStatus, hh3cRrppPortTXHello=hh3cRrppPortTXHello, hh3cRrppEnableStatus=hh3cRrppEnableStatus, hh3cRrppDomainControlVlanID=hh3cRrppDomainControlVlanID, hh3cRrppPasswordType=hh3cRrppPasswordType, hh3cRrppPortState=hh3cRrppPortState, hh3cRrppPortRXLinkUp=hh3cRrppPortRXLinkUp, PYSNMP_MODULE_ID=hh3cRrpp, hh3cRrppRingState=hh3cRrppRingState)
