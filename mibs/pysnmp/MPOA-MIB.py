#
# PySNMP MIB module MPOA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPOA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
lecIndex, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "lecIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, enterprises, Unsigned32, Counter32, IpAddress, Gauge32, NotificationType, MibIdentifier, ObjectIdentity, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "enterprises", "Unsigned32", "Counter32", "IpAddress", "Gauge32", "NotificationType", "MibIdentifier", "ObjectIdentity", "Integer32", "Counter64")
TimeInterval, MacAddress, RowStatus, TimeStamp, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "MacAddress", "RowStatus", "TimeStamp", "TruthValue", "DisplayString", "TextualConvention")
mpoaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 8, 1))
mpoaMIB.setRevisions(('1998-11-09 00:00', '1998-05-22 00:00', '1998-02-25 00:00',))
if mibBuilder.loadTexts: mpoaMIB.setLastUpdated('9811090000Z')
if mibBuilder.loadTexts: mpoaMIB.setOrganization('ATM Forum LANE/MPOA Working Group')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfMpoa = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8))
class AtmAddr(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(20, 20), )
class LecIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class AtmConfigAddr(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(1, 1), ValueSizeConstraint(8, 8), ValueSizeConstraint(20, 20), )
class InternetworkAddrType(TextualConvention, Integer32):
    reference = 'Assigned Numbers, RFC1700, ADDRESS FAMILY NUMBERS'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 0), ("ipV4", 1), ("ipV6", 2), ("nsap", 3), ("hdlc", 4), ("bbn1822", 5), ("ieee802", 6), ("e163", 7), ("e164", 8), ("f69", 9), ("x121", 10), ("ipx", 11), ("appleTalk", 12), ("decnetIV", 13), ("banyanVines", 14), ("e164WithNsap", 15))

class InternetworkAddr(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 60)

class MpcIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class MpsIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

mpoaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1))
mpoaCommonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1))
deviceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1), )
if mibBuilder.loadTexts: deviceTypeTable.setStatus('current')
deviceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1, 1), ).setIndexNames((0, "MPOA-MIB", "deviceTypeIndex"))
if mibBuilder.loadTexts: deviceTypeEntry.setStatus('current')
deviceTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: deviceTypeIndex.setStatus('current')
deviceTypeLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1, 1, 2), LecIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeLecIndex.setStatus('current')
deviceTypeRemoteLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1, 1, 3), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeRemoteLecAtmAddress.setStatus('current')
deviceTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonMpoa", 1), ("mps", 2), ("mpc", 3), ("mpsAndMpc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeType.setStatus('current')
deviceTypeMpsAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1, 1, 5), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeMpsAtmAddress.setStatus('current')
deviceTypeMpcAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 1, 1, 6), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeMpcAtmAddress.setStatus('current')
deviceTypeMpsMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 2), )
if mibBuilder.loadTexts: deviceTypeMpsMacAddressTable.setStatus('current')
deviceTypeMpsMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 2, 1), ).setIndexNames((0, "MPOA-MIB", "deviceTypeIndex"), (0, "MPOA-MIB", "deviceTypeMpsMacAddress"))
if mibBuilder.loadTexts: deviceTypeMpsMacAddressEntry.setStatus('current')
deviceTypeMpsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeMpsMacAddress.setStatus('current')
mpcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2))
mpcNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpcNextIndex.setStatus('current')
mpcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2), )
if mibBuilder.loadTexts: mpcConfigTable.setStatus('current')
mpcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1), ).setIndexNames((0, "MPOA-MIB", "mpcIndex"))
if mibBuilder.loadTexts: mpcConfigEntry.setStatus('current')
mpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 1), MpcIndex())
if mibBuilder.loadTexts: mpcIndex.setStatus('current')
mpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcRowStatus.setStatus('current')
mpcConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2))).clone('automatic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcConfigMode.setStatus('current')
mpcCtrlAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 4), AtmConfigAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcCtrlAtmAddr.setStatus('current')
mpcSCSetupFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcSCSetupFrameCount.setStatus('current')
mpcSCSetupFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcSCSetupFrameTime.setStatus('current')
mpcInitialRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcInitialRetryTime.setStatus('current')
mpcRetryTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcRetryTimeMaximum.setStatus('current')
mpcHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1200)).clone(160)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcHoldDownTime.setStatus('current')
mpcActualTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3), )
if mibBuilder.loadTexts: mpcActualTable.setStatus('current')
mpcActualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1), )
mpcConfigEntry.registerAugmentions(("MPOA-MIB", "mpcActualEntry"))
mpcActualEntry.setIndexNames(*mpcConfigEntry.getIndexNames())
if mibBuilder.loadTexts: mpcActualEntry.setStatus('current')
mpcActualState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("initialState", 2), ("up", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualState.setStatus('current')
mpcDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcDiscontinuityTime.setStatus('current')
mpcActualConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualConfigMode.setStatus('current')
mpcActualSCSetupFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualSCSetupFrameCount.setStatus('current')
mpcActualSCSetupFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualSCSetupFrameTime.setStatus('current')
mpcActualInitialRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualInitialRetryTime.setStatus('current')
mpcActualRetryTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualRetryTimeMaximum.setStatus('current')
mpcActualHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualHoldDownTime.setStatus('current')
mpcDataAtmAddressTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 4), )
if mibBuilder.loadTexts: mpcDataAtmAddressTable.setStatus('current')
mpcDataAtmAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 4, 1), ).setIndexNames((0, "MPOA-MIB", "mpcIndex"), (0, "MPOA-MIB", "mpcDataAtmAddress"))
if mibBuilder.loadTexts: mpcDataAtmAddressEntry.setStatus('current')
mpcDataAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 4, 1, 1), AtmAddr())
if mibBuilder.loadTexts: mpcDataAtmAddress.setStatus('current')
mpcDataAtmAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcDataAtmAddressRowStatus.setStatus('current')
mpcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5), )
if mibBuilder.loadTexts: mpcStatisticsTable.setStatus('current')
mpcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1), )
mpcConfigEntry.registerAugmentions(("MPOA-MIB", "mpcStatisticsEntry"))
mpcStatisticsEntry.setIndexNames(*mpcConfigEntry.getIndexNames())
if mibBuilder.loadTexts: mpcStatisticsEntry.setStatus('current')
mpcStatTxMpoaResolveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaResolveRequests.setStatus('current')
mpcStatRxMpoaResolveReplyAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyAcks.setStatus('current')
mpcStatRxMpoaResolveReplyInsufECResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyInsufECResources.setStatus('current')
mpcStatRxMpoaResolveReplyInsufSCResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyInsufSCResources.setStatus('current')
mpcStatRxMpoaResolveReplyInsufEitherResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyInsufEitherResources.setStatus('current')
mpcStatRxMpoaResolveReplyUnsupportedInetProt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyUnsupportedInetProt.setStatus('current')
mpcStatRxMpoaResolveReplyUnsupportedMacEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyUnsupportedMacEncaps.setStatus('current')
mpcStatRxMpoaResolveReplyUnspecifiedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyUnspecifiedOther.setStatus('current')
mpcStatRxMpoaImpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaImpRequests.setStatus('current')
mpcStatTxMpoaImpReplyAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyAcks.setStatus('current')
mpcStatTxMpoaImpReplyInsufECResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyInsufECResources.setStatus('current')
mpcStatTxMpoaImpReplyInsufSCResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyInsufSCResources.setStatus('current')
mpcStatTxMpoaImpReplyInsufEitherResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyInsufEitherResources.setStatus('current')
mpcStatTxMpoaImpReplyUnsupportedInetProt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyUnsupportedInetProt.setStatus('current')
mpcStatTxMpoaImpReplyUnsupportedMacEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyUnsupportedMacEncaps.setStatus('current')
mpcStatTxMpoaImpReplyUnspecifiedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyUnspecifiedOther.setStatus('current')
mpcStatTxMpoaEgressCachePurgeRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaEgressCachePurgeRequests.setStatus('current')
mpcStatRxMpoaEgressCachePurgeReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaEgressCachePurgeReplies.setStatus('current')
mpcStatRxMpoaKeepAlives = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaKeepAlives.setStatus('current')
mpcStatRxMpoaTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaTriggers.setStatus('current')
mpcStatRxMpoaDataPlanePurges = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaDataPlanePurges.setStatus('current')
mpcStatTxMpoaDataPlanePurges = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaDataPlanePurges.setStatus('current')
mpcStatRxNhrpPurgeRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxNhrpPurgeRequests.setStatus('current')
mpcStatTxNhrpPurgeReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxNhrpPurgeReplies.setStatus('current')
mpcStatRxErrUnrecognizedExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrUnrecognizedExtensions.setStatus('current')
mpcStatRxErrLoopDetecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrLoopDetecteds.setStatus('current')
mpcStatRxErrProtoAddrUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrProtoAddrUnreachables.setStatus('current')
mpcStatRxErrProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrProtoErrors.setStatus('current')
mpcStatRxErrSduSizeExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrSduSizeExceededs.setStatus('current')
mpcStatRxErrInvalidExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrInvalidExtensions.setStatus('current')
mpcStatRxErrInvalidReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrInvalidReplies.setStatus('current')
mpcStatRxErrAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrAuthenticationFailures.setStatus('current')
mpcStatRxErrHopCountExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrHopCountExceededs.setStatus('current')
mpcProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 6), )
if mibBuilder.loadTexts: mpcProtocolTable.setStatus('current')
mpcProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 6, 1), ).setIndexNames((0, "MPOA-MIB", "mpcIndex"), (0, "MPOA-MIB", "mpcFlowDetectProtocol"))
if mibBuilder.loadTexts: mpcProtocolEntry.setStatus('current')
mpcFlowDetectProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 6, 1, 1), InternetworkAddrType())
if mibBuilder.loadTexts: mpcFlowDetectProtocol.setStatus('current')
mpcLECSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcLECSValue.setStatus('current')
mpcProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcProtocolRowStatus.setStatus('current')
mpcMappingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 7), )
if mibBuilder.loadTexts: mpcMappingTable.setStatus('current')
mpcMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 7, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: mpcMappingEntry.setStatus('current')
mpcMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcMappingRowStatus.setStatus('current')
mpcMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 7, 1, 2), MpcIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcMappingIndex.setStatus('current')
mpcMpsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8), )
if mibBuilder.loadTexts: mpcMpsTable.setStatus('current')
mpcMpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8, 1), ).setIndexNames((0, "MPOA-MIB", "mpcMpsIndex"))
if mibBuilder.loadTexts: mpcMpsEntry.setStatus('current')
mpcMpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8, 1, 1), MpsIndex())
if mibBuilder.loadTexts: mpcMpsIndex.setStatus('current')
mpcMpsAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8, 1, 2), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcMpsAtmAddr.setStatus('current')
mpcMpsMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 9), )
if mibBuilder.loadTexts: mpcMpsMacAddressTable.setStatus('obsolete')
mpcMpsMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 9, 1), ).setIndexNames((0, "MPOA-MIB", "mpcMpsIndex"), (0, "MPOA-MIB", "mpcLecIndex"))
if mibBuilder.loadTexts: mpcMpsMacAddressEntry.setStatus('obsolete')
mpcLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 9, 1, 1), LecIndex())
if mibBuilder.loadTexts: mpcLecIndex.setStatus('obsolete')
mpcMpsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcMpsMacAddress.setStatus('obsolete')
mpcIngressCacheTxTotalPackets = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheTxTotalPackets.setStatus('current')
mpcIngressCacheTxTotalOctets = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheTxTotalOctets.setStatus('current')
mpcIngressCacheTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12), )
if mibBuilder.loadTexts: mpcIngressCacheTable.setStatus('current')
mpcIngressCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1), ).setIndexNames((0, "MPOA-MIB", "mpcIngressCacheDestInetworkAddrType"), (0, "MPOA-MIB", "mpcIngressCacheDestAddr"), (0, "MPOA-MIB", "mpcIndex"), (0, "MPOA-MIB", "mpcMpsIndex"))
if mibBuilder.loadTexts: mpcIngressCacheEntry.setStatus('current')
mpcIngressCacheDestInetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 1), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheDestInetworkAddrType.setStatus('current')
mpcIngressCacheDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 2), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheDestAddr.setStatus('current')
mpcIngressCachePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCachePrefixLen.setStatus('current')
mpcIngressCacheDestAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 4), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheDestAtmAddr.setStatus('current')
mpcIngressCacheSrcAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 5), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheSrcAtmAddr.setStatus('current')
mpcIngressCacheEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doesNotExist", 1), ("inactive", 2), ("active", 3), ("negative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheEntryState.setStatus('current')
mpcIngressCacheEgressCacheTagValid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheEgressCacheTagValid.setStatus('current')
mpcIngressCacheEgressCacheTag = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheEgressCacheTag.setStatus('current')
mpcIngressCacheLastNhrpCieCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheLastNhrpCieCode.setStatus('current')
mpcIngressCacheSigErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheSigErrCode.setStatus('current')
mpcIngressCacheRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheRetries.setStatus('current')
mpcIngressCacheTimeUntilNextResolutionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheTimeUntilNextResolutionRequest.setStatus('current')
mpcIngressCacheHoldingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheHoldingTime.setStatus('current')
mpcIngressCacheServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheServiceCategory.setStatus('current')
mpcEgressCacheRxTotalPackets = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheRxTotalPackets.setStatus('current')
mpcEgressCacheRxTotalOctets = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheRxTotalOctets.setStatus('current')
mpcEgressCacheTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15), )
if mibBuilder.loadTexts: mpcEgressCacheTable.setStatus('current')
mpcEgressCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1), ).setIndexNames((0, "MPOA-MIB", "mpcEgressCacheId"), (0, "MPOA-MIB", "mpcIndex"), (0, "MPOA-MIB", "mpcMpsIndex"))
if mibBuilder.loadTexts: mpcEgressCacheEntry.setStatus('current')
mpcEgressCacheId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheId.setStatus('current')
mpcEgressCacheInetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 2), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheInetworkAddrType.setStatus('current')
mpcEgressCacheIDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 3), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheIDestAddr.setStatus('current')
mpcEgressCachePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCachePrefixLen.setStatus('current')
mpcEgressCacheEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doesNotExist", 1), ("inactive", 2), ("active", 3), ("negative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheEntryState.setStatus('current')
mpcEgressCacheEgressCacheTagValid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheEgressCacheTagValid.setStatus('current')
mpcEgressCacheEgressCacheTag = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheEgressCacheTag.setStatus('current')
mpcEgressCacheHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheHoldTime.setStatus('current')
mpcEgressCacheDataLinkHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheDataLinkHeader.setStatus('current')
mpcEgressCacheIngressMpcDataAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 10), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheIngressMpcDataAtmAddr.setStatus('current')
mpcEgressCacheLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 11), LecIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheLecIndex.setStatus('current')
mpcEgressCacheServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheServiceCategory.setStatus('current')
mpcMpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 16))
mpcMpsMultipleMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 16, 1), )
if mibBuilder.loadTexts: mpcMpsMultipleMacAddressTable.setStatus('current')
mpcMpsMultipleMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 16, 1, 1), ).setIndexNames((0, "MPOA-MIB", "mpcMpsIndex"), (0, "MPOA-MIB", "mpcFlowDetectLecIndex"), (0, "MPOA-MIB", "mpcMpsMacAddressIndex"))
if mibBuilder.loadTexts: mpcMpsMultipleMacAddressEntry.setStatus('current')
mpcFlowDetectLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 16, 1, 1, 1), LecIndex())
if mibBuilder.loadTexts: mpcFlowDetectLecIndex.setStatus('current')
mpcMpsMacAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mpcMpsMacAddressIndex.setStatus('current')
mpcMpsFlowDetectMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 16, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcMpsFlowDetectMacAddress.setStatus('current')
mpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3))
mpsNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsNextIndex.setStatus('current')
mpsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2), )
if mibBuilder.loadTexts: mpsConfigTable.setStatus('current')
mpsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1), ).setIndexNames((0, "MPOA-MIB", "mpsIndex"))
if mibBuilder.loadTexts: mpsConfigEntry.setStatus('current')
mpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 1), MpsIndex())
if mibBuilder.loadTexts: mpsIndex.setStatus('current')
mpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsRowStatus.setStatus('current')
mpsConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2))).clone('automatic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsConfigMode.setStatus('current')
mpsCtrlAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 4), AtmConfigAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsCtrlAtmAddr.setStatus('current')
mpsKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsKeepAliveTime.setStatus('current')
mpsKeepAliveLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1000)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsKeepAliveLifeTime.setStatus('current')
mpsInitialRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsInitialRetryTime.setStatus('current')
mpsRetryTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsRetryTimeMaximum.setStatus('current')
mpsGiveupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsGiveupTime.setStatus('current')
mpsDefaultHoldingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsDefaultHoldingTime.setStatus('current')
mpsActualTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3), )
if mibBuilder.loadTexts: mpsActualTable.setStatus('current')
mpsActualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1), )
mpsConfigEntry.registerAugmentions(("MPOA-MIB", "mpsActualEntry"))
mpsActualEntry.setIndexNames(*mpsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: mpsActualEntry.setStatus('current')
mpsActualState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("initialState", 2), ("up", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualState.setStatus('current')
mpsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsDiscontinuityTime.setStatus('current')
mpsActualConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualConfigMode.setStatus('current')
mpsActualKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualKeepAlive.setStatus('current')
mpsActualKeepAliveLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualKeepAliveLifeTime.setStatus('current')
mpsActualInitialRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualInitialRetryTime.setStatus('current')
mpsActualRetryTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualRetryTimeMaximum.setStatus('current')
mpsActualGiveupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300)).clone(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualGiveupTime.setStatus('current')
mpsActualDefaultHoldingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsActualDefaultHoldingTime.setStatus('current')
mpsStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4), )
if mibBuilder.loadTexts: mpsStatisticsTable.setStatus('current')
mpsStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1), )
mpsConfigEntry.registerAugmentions(("MPOA-MIB", "mpsStatisticsEntry"))
mpsStatisticsEntry.setIndexNames(*mpsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: mpsStatisticsEntry.setStatus('current')
mpsStatRxMpoaResolveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaResolveRequests.setStatus('current')
mpsStatTxMpoaResolveReplyAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyAcks.setStatus('current')
mpsStatTxMpoaResolveReplyInsufECResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyInsufECResources.setStatus('current')
mpsStatTxMpoaResolveReplyInsufSCResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyInsufSCResources.setStatus('current')
mpsStatTxMpoaResolveReplyInsufEitherResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyInsufEitherResources.setStatus('current')
mpsStatTxMpoaResolveReplyUnsupportedInetProt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyUnsupportedInetProt.setStatus('current')
mpsStatTxMpoaResolveReplyUnsupportedMacEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyUnsupportedMacEncaps.setStatus('current')
mpsStatTxMpoaResolveReplyUnspecifiedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyUnspecifiedOther.setStatus('current')
mpsStatTxMpoaResolveReplyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaResolveReplyOther.setStatus('current')
mpsStatGiveupTimeExpireds = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatGiveupTimeExpireds.setStatus('current')
mpsStatTxMpoaImpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaImpRequests.setStatus('current')
mpsStatRxMpoaImpReplyAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyAcks.setStatus('current')
mpsStatRxMpoaImpReplyInsufECResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyInsufECResources.setStatus('current')
mpsStatRxMpoaImpReplyInsufSCResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyInsufSCResources.setStatus('current')
mpsStatRxMpoaImpReplyInsufEitherResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyInsufEitherResources.setStatus('current')
mpsStatRxMpoaImpReplyUnsupportedInetProt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyUnsupportedInetProt.setStatus('current')
mpsStatRxMpoaImpReplyUnsupportedMacEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyUnsupportedMacEncaps.setStatus('current')
mpsStatRxMpoaImpReplyUnspecifiedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyUnspecifiedOther.setStatus('current')
mpsStatRxMpoaImpReplyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaImpReplyOther.setStatus('current')
mpsStatRxMpoaEgressCachePurgeRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxMpoaEgressCachePurgeRequests.setStatus('current')
mpsStatTxMpoaEgressCachePurgeReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaEgressCachePurgeReplies.setStatus('current')
mpsStatTxMpoaTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxMpoaTriggers.setStatus('current')
mpsStatTxNhrpResolveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxNhrpResolveRequests.setStatus('current')
mpsStatRxNhrpResolveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxNhrpResolveReplies.setStatus('current')
mpsStatRxNhrpResolveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatRxNhrpResolveRequests.setStatus('current')
mpsStatTxNhrpResolveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsStatTxNhrpResolveReplies.setStatus('current')
mpsProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 5), )
if mibBuilder.loadTexts: mpsProtocolTable.setStatus('current')
mpsProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 5, 1), ).setIndexNames((0, "MPOA-MIB", "mpsIndex"), (0, "MPOA-MIB", "mpsInternetworkLayerProtocol"))
if mibBuilder.loadTexts: mpsProtocolEntry.setStatus('current')
mpsInternetworkLayerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 5, 1, 1), InternetworkAddrType())
if mibBuilder.loadTexts: mpsInternetworkLayerProtocol.setStatus('current')
mpsLECSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsLECSValue.setStatus('current')
mpsProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsProtocolRowStatus.setStatus('current')
mpsMappingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 6), )
if mibBuilder.loadTexts: mpsMappingTable.setStatus('current')
mpsMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 6, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: mpsMappingEntry.setStatus('current')
mpsMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsMappingRowStatus.setStatus('current')
mpsMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 6, 1, 2), MpsIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpsMappingIndex.setStatus('current')
mpsMpcTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 9), )
if mibBuilder.loadTexts: mpsMpcTable.setStatus('current')
mpsMpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 9, 1), ).setIndexNames((0, "MPOA-MIB", "mpsIndex"), (0, "MPOA-MIB", "mpsMpcIndex"))
if mibBuilder.loadTexts: mpsMpcEntry.setStatus('current')
mpsMpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 9, 1, 1), MpcIndex())
if mibBuilder.loadTexts: mpsMpcIndex.setStatus('current')
mpsMpcCtrlAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 9, 1, 2), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsMpcCtrlAtmAddr.setStatus('current')
mpsIngressCacheTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7), )
if mibBuilder.loadTexts: mpsIngressCacheTable.setStatus('current')
mpsIngressCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1), ).setIndexNames((0, "MPOA-MIB", "mpsIngressCacheDestInternetworkAddrType"), (0, "MPOA-MIB", "mpsIngressCacheDestAddr"), (0, "MPOA-MIB", "mpsIndex"), (0, "MPOA-MIB", "mpsMpcIndex"))
if mibBuilder.loadTexts: mpsIngressCacheEntry.setStatus('current')
mpsIngressCacheDestInternetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 1), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheDestInternetworkAddrType.setStatus('current')
mpsIngressCacheDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 2), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheDestAddr.setStatus('current')
mpsIngressCachePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCachePrefixLen.setStatus('current')
mpsIngressCacheEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doesNotExist", 1), ("inactive", 2), ("active", 3), ("negative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheEntryState.setStatus('current')
mpsIngressCacheSrcInternetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 5), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheSrcInternetworkAddrType.setStatus('current')
mpsIngressCacheSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 6), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheSrcAddr.setStatus('current')
mpsIngressCacheSourceMpcCtrlAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 7), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheSourceMpcCtrlAtmAddr.setStatus('current')
mpsIngressCacheResolvedAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 8), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheResolvedAtmAddr.setStatus('current')
mpsIngressCacheHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheHoldTime.setStatus('current')
mpsIngressCacheMpoaRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheMpoaRequestId.setStatus('current')
mpsIngressCacheNhrpRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheNhrpRequestId.setStatus('current')
mpsIngressCacheServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsIngressCacheServiceCategory.setStatus('current')
mpsEgressCacheTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8), )
if mibBuilder.loadTexts: mpsEgressCacheTable.setStatus('current')
mpsEgressCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1), ).setIndexNames((0, "MPOA-MIB", "mpsEgressCacheId"), (0, "MPOA-MIB", "mpsIndex"), (0, "MPOA-MIB", "mpsMpcIndex"))
if mibBuilder.loadTexts: mpsEgressCacheEntry.setStatus('current')
mpsEgressCacheId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheId.setStatus('current')
mpsEgressCacheDestInternetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 2), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheDestInternetworkAddrType.setStatus('current')
mpsEgressCacheDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 3), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheDestAddr.setStatus('current')
mpsEgressCachePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCachePrefixLen.setStatus('current')
mpsEgressCacheHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheHoldTime.setStatus('current')
mpsEgressCacheEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doesNotExist", 1), ("inactive", 2), ("active", 3), ("negative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheEntryState.setStatus('current')
mpsEgressCacheDataLinkHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheDataLinkHeader.setStatus('current')
mpsEgressCacheElanId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheElanId.setStatus('current')
mpsEgressCacheSourceClientAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 9), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheSourceClientAtmAddr.setStatus('current')
mpsEgressCacheNhrpRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheNhrpRequestId.setStatus('current')
mpsEgressCacheMpoaRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheMpoaRequestId.setStatus('current')
mpsEgressCacheServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheServiceCategory.setStatus('current')
mpsEgressCacheNextHopInternetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 13), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheNextHopInternetworkAddrType.setStatus('current')
mpsEgressCacheNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 3, 8, 1, 14), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsEgressCacheNextHopAddr.setStatus('current')
mpoaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2))
mpoaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1))
mpoaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 2))
mpoaMpcMibBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 2, 1)).setObjects(("MPOA-MIB", "mpcConfigGroup"), ("MPOA-MIB", "mpcActualGroup"), ("MPOA-MIB", "mpcDataAtmAddressGroup"), ("MPOA-MIB", "mpcStatisticsGroup"), ("MPOA-MIB", "mpcProtocolGroup"), ("MPOA-MIB", "mpcMpsGroup"), ("MPOA-MIB", "mpcIngressCacheGroup"), ("MPOA-MIB", "mpcEgressCacheGroup"), ("MPOA-MIB", "mpcMpsMultipleMacAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpoaMpcMibBasicCompliance = mpoaMpcMibBasicCompliance.setStatus('current')
mpoaMpcMibAdvancedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 2, 2)).setObjects(("MPOA-MIB", "mpoaDeviceTypeGroup"), ("MPOA-MIB", "mpoaDeviceTypeMpsMacGroup"), ("MPOA-MIB", "mpcConfigGroup"), ("MPOA-MIB", "mpcActualGroup"), ("MPOA-MIB", "mpcDataAtmAddressGroup"), ("MPOA-MIB", "mpcStatisticsGroup"), ("MPOA-MIB", "mpcProtocolGroup"), ("MPOA-MIB", "mpcMpsGroup"), ("MPOA-MIB", "mpcIngressCacheTotalPacketGroup"), ("MPOA-MIB", "mpcIngressCacheGroup"), ("MPOA-MIB", "mpcEgressCacheTotalPacketGroup"), ("MPOA-MIB", "mpcEgressCacheGroup"), ("MPOA-MIB", "mpcMpsMultipleMacAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpoaMpcMibAdvancedCompliance = mpoaMpcMibAdvancedCompliance.setStatus('current')
mpoaMpcMibAdvancedPlusOctetsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 2, 3)).setObjects(("MPOA-MIB", "mpoaDeviceTypeGroup"), ("MPOA-MIB", "mpoaDeviceTypeMpsMacGroup"), ("MPOA-MIB", "mpcConfigGroup"), ("MPOA-MIB", "mpcActualGroup"), ("MPOA-MIB", "mpcDataAtmAddressGroup"), ("MPOA-MIB", "mpcStatisticsGroup"), ("MPOA-MIB", "mpcProtocolGroup"), ("MPOA-MIB", "mpcMpsGroup"), ("MPOA-MIB", "mpcIngressCacheTotalPacketGroup"), ("MPOA-MIB", "mpcIngressCacheTotalOctetGroup"), ("MPOA-MIB", "mpcIngressCacheGroup"), ("MPOA-MIB", "mpcEgressCacheTotalPacketGroup"), ("MPOA-MIB", "mpcEgressCacheTotalOctetGroup"), ("MPOA-MIB", "mpcEgressCacheGroup"), ("MPOA-MIB", "mpcMpsMultipleMacAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpoaMpcMibAdvancedPlusOctetsCompliance = mpoaMpcMibAdvancedPlusOctetsCompliance.setStatus('current')
mpoaMpsMibBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 2, 4)).setObjects(("MPOA-MIB", "mpsConfigGroup"), ("MPOA-MIB", "mpsActualGroup"), ("MPOA-MIB", "mpsStatisticsGroup"), ("MPOA-MIB", "mpsProtocolGroup"), ("MPOA-MIB", "mpsIngressCacheGroup"), ("MPOA-MIB", "mpsEgressCacheGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpoaMpsMibBasicCompliance = mpoaMpsMibBasicCompliance.setStatus('current')
mpoaMpsMibAdvancedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 2, 5)).setObjects(("MPOA-MIB", "mpoaDeviceTypeGroup"), ("MPOA-MIB", "mpoaDeviceTypeMpsMacGroup"), ("MPOA-MIB", "mpsConfigGroup"), ("MPOA-MIB", "mpsActualGroup"), ("MPOA-MIB", "mpsStatisticsGroup"), ("MPOA-MIB", "mpsProtocolGroup"), ("MPOA-MIB", "mpsIngressCacheGroup"), ("MPOA-MIB", "mpsEgressCacheGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpoaMpsMibAdvancedCompliance = mpoaMpsMibAdvancedCompliance.setStatus('current')
mpoaDeviceTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 1)).setObjects(("MPOA-MIB", "deviceTypeLecIndex"), ("MPOA-MIB", "deviceTypeRemoteLecAtmAddress"), ("MPOA-MIB", "deviceTypeType"), ("MPOA-MIB", "deviceTypeMpsAtmAddress"), ("MPOA-MIB", "deviceTypeMpcAtmAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpoaDeviceTypeGroup = mpoaDeviceTypeGroup.setStatus('current')
mpoaDeviceTypeMpsMacGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 2)).setObjects(("MPOA-MIB", "deviceTypeMpsMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpoaDeviceTypeMpsMacGroup = mpoaDeviceTypeMpsMacGroup.setStatus('current')
mpcConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 3)).setObjects(("MPOA-MIB", "mpcNextIndex"), ("MPOA-MIB", "mpcRowStatus"), ("MPOA-MIB", "mpcConfigMode"), ("MPOA-MIB", "mpcCtrlAtmAddr"), ("MPOA-MIB", "mpcSCSetupFrameCount"), ("MPOA-MIB", "mpcSCSetupFrameTime"), ("MPOA-MIB", "mpcInitialRetryTime"), ("MPOA-MIB", "mpcRetryTimeMaximum"), ("MPOA-MIB", "mpcHoldDownTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcConfigGroup = mpcConfigGroup.setStatus('current')
mpcActualGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 4)).setObjects(("MPOA-MIB", "mpcActualState"), ("MPOA-MIB", "mpcDiscontinuityTime"), ("MPOA-MIB", "mpcActualConfigMode"), ("MPOA-MIB", "mpcActualSCSetupFrameCount"), ("MPOA-MIB", "mpcActualSCSetupFrameTime"), ("MPOA-MIB", "mpcActualInitialRetryTime"), ("MPOA-MIB", "mpcActualRetryTimeMaximum"), ("MPOA-MIB", "mpcActualHoldDownTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcActualGroup = mpcActualGroup.setStatus('current')
mpcDataAtmAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 5)).setObjects(("MPOA-MIB", "mpcDataAtmAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcDataAtmAddressGroup = mpcDataAtmAddressGroup.setStatus('current')
mpcStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 6)).setObjects(("MPOA-MIB", "mpcStatTxMpoaResolveRequests"), ("MPOA-MIB", "mpcStatRxMpoaResolveReplyAcks"), ("MPOA-MIB", "mpcStatRxMpoaResolveReplyInsufECResources"), ("MPOA-MIB", "mpcStatRxMpoaResolveReplyInsufSCResources"), ("MPOA-MIB", "mpcStatRxMpoaResolveReplyInsufEitherResources"), ("MPOA-MIB", "mpcStatRxMpoaResolveReplyUnsupportedInetProt"), ("MPOA-MIB", "mpcStatRxMpoaResolveReplyUnsupportedMacEncaps"), ("MPOA-MIB", "mpcStatRxMpoaResolveReplyUnspecifiedOther"), ("MPOA-MIB", "mpcStatRxMpoaImpRequests"), ("MPOA-MIB", "mpcStatTxMpoaImpReplyAcks"), ("MPOA-MIB", "mpcStatTxMpoaImpReplyInsufECResources"), ("MPOA-MIB", "mpcStatTxMpoaImpReplyInsufSCResources"), ("MPOA-MIB", "mpcStatTxMpoaImpReplyInsufEitherResources"), ("MPOA-MIB", "mpcStatTxMpoaImpReplyUnsupportedInetProt"), ("MPOA-MIB", "mpcStatTxMpoaImpReplyUnsupportedMacEncaps"), ("MPOA-MIB", "mpcStatTxMpoaImpReplyUnspecifiedOther"), ("MPOA-MIB", "mpcStatTxMpoaEgressCachePurgeRequests"), ("MPOA-MIB", "mpcStatRxMpoaEgressCachePurgeReplies"), ("MPOA-MIB", "mpcStatRxMpoaKeepAlives"), ("MPOA-MIB", "mpcStatRxMpoaTriggers"), ("MPOA-MIB", "mpcStatRxMpoaDataPlanePurges"), ("MPOA-MIB", "mpcStatTxMpoaDataPlanePurges"), ("MPOA-MIB", "mpcStatRxNhrpPurgeRequests"), ("MPOA-MIB", "mpcStatTxNhrpPurgeReplies"), ("MPOA-MIB", "mpcStatRxErrUnrecognizedExtensions"), ("MPOA-MIB", "mpcStatRxErrLoopDetecteds"), ("MPOA-MIB", "mpcStatRxErrProtoAddrUnreachables"), ("MPOA-MIB", "mpcStatRxErrProtoErrors"), ("MPOA-MIB", "mpcStatRxErrSduSizeExceededs"), ("MPOA-MIB", "mpcStatRxErrInvalidExtensions"), ("MPOA-MIB", "mpcStatRxErrInvalidReplies"), ("MPOA-MIB", "mpcStatRxErrAuthenticationFailures"), ("MPOA-MIB", "mpcStatRxErrHopCountExceededs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcStatisticsGroup = mpcStatisticsGroup.setStatus('current')
mpcProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 7)).setObjects(("MPOA-MIB", "mpcLECSValue"), ("MPOA-MIB", "mpcProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcProtocolGroup = mpcProtocolGroup.setStatus('current')
mpcMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 8)).setObjects(("MPOA-MIB", "mpcMappingRowStatus"), ("MPOA-MIB", "mpcMappingIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcMappingGroup = mpcMappingGroup.setStatus('current')
mpcMpsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 9)).setObjects(("MPOA-MIB", "mpcMpsAtmAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcMpsGroup = mpcMpsGroup.setStatus('current')
mpcMpsMacAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 10)).setObjects(("MPOA-MIB", "mpcMpsMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcMpsMacAddressGroup = mpcMpsMacAddressGroup.setStatus('obsolete')
mpcIngressCacheTotalPacketGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 11)).setObjects(("MPOA-MIB", "mpcIngressCacheTxTotalPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcIngressCacheTotalPacketGroup = mpcIngressCacheTotalPacketGroup.setStatus('current')
mpcIngressCacheTotalOctetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 12)).setObjects(("MPOA-MIB", "mpcIngressCacheTxTotalOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcIngressCacheTotalOctetGroup = mpcIngressCacheTotalOctetGroup.setStatus('current')
mpcIngressCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 13)).setObjects(("MPOA-MIB", "mpcIngressCacheDestInetworkAddrType"), ("MPOA-MIB", "mpcIngressCacheDestAddr"), ("MPOA-MIB", "mpcIngressCachePrefixLen"), ("MPOA-MIB", "mpcIngressCacheDestAtmAddr"), ("MPOA-MIB", "mpcIngressCacheSrcAtmAddr"), ("MPOA-MIB", "mpcIngressCacheEntryState"), ("MPOA-MIB", "mpcIngressCacheEgressCacheTagValid"), ("MPOA-MIB", "mpcIngressCacheEgressCacheTag"), ("MPOA-MIB", "mpcIngressCacheLastNhrpCieCode"), ("MPOA-MIB", "mpcIngressCacheSigErrCode"), ("MPOA-MIB", "mpcIngressCacheRetries"), ("MPOA-MIB", "mpcIngressCacheTimeUntilNextResolutionRequest"), ("MPOA-MIB", "mpcIngressCacheHoldingTime"), ("MPOA-MIB", "mpcIngressCacheServiceCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcIngressCacheGroup = mpcIngressCacheGroup.setStatus('current')
mpcEgressCacheTotalPacketGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 14)).setObjects(("MPOA-MIB", "mpcEgressCacheRxTotalPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcEgressCacheTotalPacketGroup = mpcEgressCacheTotalPacketGroup.setStatus('current')
mpcEgressCacheTotalOctetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 15)).setObjects(("MPOA-MIB", "mpcEgressCacheRxTotalOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcEgressCacheTotalOctetGroup = mpcEgressCacheTotalOctetGroup.setStatus('current')
mpcEgressCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 16)).setObjects(("MPOA-MIB", "mpcEgressCacheId"), ("MPOA-MIB", "mpcEgressCacheInetworkAddrType"), ("MPOA-MIB", "mpcEgressCacheIDestAddr"), ("MPOA-MIB", "mpcEgressCachePrefixLen"), ("MPOA-MIB", "mpcEgressCacheEntryState"), ("MPOA-MIB", "mpcEgressCacheEgressCacheTagValid"), ("MPOA-MIB", "mpcEgressCacheEgressCacheTag"), ("MPOA-MIB", "mpcEgressCacheHoldTime"), ("MPOA-MIB", "mpcEgressCacheDataLinkHeader"), ("MPOA-MIB", "mpcEgressCacheIngressMpcDataAtmAddr"), ("MPOA-MIB", "mpcEgressCacheLecIndex"), ("MPOA-MIB", "mpcEgressCacheServiceCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcEgressCacheGroup = mpcEgressCacheGroup.setStatus('current')
mpsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 17)).setObjects(("MPOA-MIB", "mpsNextIndex"), ("MPOA-MIB", "mpsRowStatus"), ("MPOA-MIB", "mpsConfigMode"), ("MPOA-MIB", "mpsCtrlAtmAddr"), ("MPOA-MIB", "mpsKeepAliveTime"), ("MPOA-MIB", "mpsKeepAliveLifeTime"), ("MPOA-MIB", "mpsInitialRetryTime"), ("MPOA-MIB", "mpsRetryTimeMaximum"), ("MPOA-MIB", "mpsGiveupTime"), ("MPOA-MIB", "mpsDefaultHoldingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsConfigGroup = mpsConfigGroup.setStatus('current')
mpsActualGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 18)).setObjects(("MPOA-MIB", "mpsActualState"), ("MPOA-MIB", "mpsDiscontinuityTime"), ("MPOA-MIB", "mpsActualConfigMode"), ("MPOA-MIB", "mpsActualKeepAlive"), ("MPOA-MIB", "mpsActualKeepAliveLifeTime"), ("MPOA-MIB", "mpsActualInitialRetryTime"), ("MPOA-MIB", "mpsActualRetryTimeMaximum"), ("MPOA-MIB", "mpsActualGiveupTime"), ("MPOA-MIB", "mpsActualDefaultHoldingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsActualGroup = mpsActualGroup.setStatus('current')
mpsStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 19)).setObjects(("MPOA-MIB", "mpsStatRxMpoaResolveRequests"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyAcks"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyInsufECResources"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyInsufSCResources"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyInsufEitherResources"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyUnsupportedInetProt"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyUnsupportedMacEncaps"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyUnspecifiedOther"), ("MPOA-MIB", "mpsStatTxMpoaResolveReplyOther"), ("MPOA-MIB", "mpsStatGiveupTimeExpireds"), ("MPOA-MIB", "mpsStatTxMpoaImpRequests"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyAcks"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyInsufECResources"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyInsufSCResources"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyInsufEitherResources"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyUnsupportedInetProt"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyUnsupportedMacEncaps"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyUnspecifiedOther"), ("MPOA-MIB", "mpsStatRxMpoaImpReplyOther"), ("MPOA-MIB", "mpsStatRxMpoaEgressCachePurgeRequests"), ("MPOA-MIB", "mpsStatTxMpoaEgressCachePurgeReplies"), ("MPOA-MIB", "mpsStatTxMpoaTriggers"), ("MPOA-MIB", "mpsStatTxNhrpResolveRequests"), ("MPOA-MIB", "mpsStatRxNhrpResolveReplies"), ("MPOA-MIB", "mpsStatRxNhrpResolveRequests"), ("MPOA-MIB", "mpsStatTxNhrpResolveReplies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsStatisticsGroup = mpsStatisticsGroup.setStatus('current')
mpsProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 20)).setObjects(("MPOA-MIB", "mpsLECSValue"), ("MPOA-MIB", "mpsProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsProtocolGroup = mpsProtocolGroup.setStatus('current')
mpsMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 21)).setObjects(("MPOA-MIB", "mpsMappingRowStatus"), ("MPOA-MIB", "mpsMappingIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsMappingGroup = mpsMappingGroup.setStatus('current')
mpsMpcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 22)).setObjects(("MPOA-MIB", "mpsMpcCtrlAtmAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsMpcGroup = mpsMpcGroup.setStatus('current')
mpsIngressCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 23)).setObjects(("MPOA-MIB", "mpsIngressCacheDestInternetworkAddrType"), ("MPOA-MIB", "mpsIngressCacheDestAddr"), ("MPOA-MIB", "mpsIngressCachePrefixLen"), ("MPOA-MIB", "mpsIngressCacheEntryState"), ("MPOA-MIB", "mpsIngressCacheSrcInternetworkAddrType"), ("MPOA-MIB", "mpsIngressCacheSrcAddr"), ("MPOA-MIB", "mpsIngressCacheSourceMpcCtrlAtmAddr"), ("MPOA-MIB", "mpsIngressCacheResolvedAtmAddr"), ("MPOA-MIB", "mpsIngressCacheHoldTime"), ("MPOA-MIB", "mpsIngressCacheMpoaRequestId"), ("MPOA-MIB", "mpsIngressCacheNhrpRequestId"), ("MPOA-MIB", "mpsIngressCacheServiceCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsIngressCacheGroup = mpsIngressCacheGroup.setStatus('current')
mpsEgressCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 24)).setObjects(("MPOA-MIB", "mpsEgressCacheId"), ("MPOA-MIB", "mpsEgressCacheDestInternetworkAddrType"), ("MPOA-MIB", "mpsEgressCacheDestAddr"), ("MPOA-MIB", "mpsEgressCachePrefixLen"), ("MPOA-MIB", "mpsEgressCacheHoldTime"), ("MPOA-MIB", "mpsEgressCacheEntryState"), ("MPOA-MIB", "mpsEgressCacheDataLinkHeader"), ("MPOA-MIB", "mpsEgressCacheElanId"), ("MPOA-MIB", "mpsEgressCacheSourceClientAtmAddr"), ("MPOA-MIB", "mpsEgressCacheNhrpRequestId"), ("MPOA-MIB", "mpsEgressCacheMpoaRequestId"), ("MPOA-MIB", "mpsEgressCacheServiceCategory"), ("MPOA-MIB", "mpsEgressCacheNextHopInternetworkAddrType"), ("MPOA-MIB", "mpsEgressCacheNextHopAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsEgressCacheGroup = mpsEgressCacheGroup.setStatus('current')
mpcMpsMultipleMacAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1, 25)).setObjects(("MPOA-MIB", "mpcMpsFlowDetectMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpcMpsMultipleMacAddressGroup = mpcMpsMultipleMacAddressGroup.setStatus('current')
mibBuilder.exportSymbols("MPOA-MIB", mpsProtocolEntry=mpsProtocolEntry, mpsStatRxMpoaEgressCachePurgeRequests=mpsStatRxMpoaEgressCachePurgeRequests, PYSNMP_MODULE_ID=mpoaMIB, mpcIngressCacheRetries=mpcIngressCacheRetries, mpcIngressCachePrefixLen=mpcIngressCachePrefixLen, mpcEgressCacheHoldTime=mpcEgressCacheHoldTime, mpcIngressCacheHoldingTime=mpcIngressCacheHoldingTime, mpoaMpcMibAdvancedPlusOctetsCompliance=mpoaMpcMibAdvancedPlusOctetsCompliance, mpcIngressCacheEgressCacheTagValid=mpcIngressCacheEgressCacheTagValid, mpcEgressCacheTotalOctetGroup=mpcEgressCacheTotalOctetGroup, mpsIngressCacheSrcInternetworkAddrType=mpsIngressCacheSrcInternetworkAddrType, mpsStatisticsEntry=mpsStatisticsEntry, mpsMpcCtrlAtmAddr=mpsMpcCtrlAtmAddr, mpsActualTable=mpsActualTable, atmfMpoa=atmfMpoa, mpcMpsMultipleMacAddressEntry=mpcMpsMultipleMacAddressEntry, LecIndex=LecIndex, mpcStatRxMpoaResolveReplyUnsupportedInetProt=mpcStatRxMpoaResolveReplyUnsupportedInetProt, mpcIngressCacheEgressCacheTag=mpcIngressCacheEgressCacheTag, mpcMpsGroup=mpcMpsGroup, mpsMappingRowStatus=mpsMappingRowStatus, mpcEgressCacheEntryState=mpcEgressCacheEntryState, mpcStatRxErrAuthenticationFailures=mpcStatRxErrAuthenticationFailures, mpcMpsFlowDetectMacAddress=mpcMpsFlowDetectMacAddress, mpsStatRxMpoaImpReplyUnsupportedMacEncaps=mpsStatRxMpoaImpReplyUnsupportedMacEncaps, mpsStatRxMpoaResolveRequests=mpsStatRxMpoaResolveRequests, mpsIndex=mpsIndex, mpsDefaultHoldingTime=mpsDefaultHoldingTime, mpsStatTxMpoaResolveReplyInsufECResources=mpsStatTxMpoaResolveReplyInsufECResources, mpcSCSetupFrameCount=mpcSCSetupFrameCount, mpcStatRxMpoaResolveReplyAcks=mpcStatRxMpoaResolveReplyAcks, mpcMpsTable=mpcMpsTable, mpcIngressCacheGroup=mpcIngressCacheGroup, mpsActualGroup=mpsActualGroup, mpcHoldDownTime=mpcHoldDownTime, mpsStatTxMpoaResolveReplyInsufEitherResources=mpsStatTxMpoaResolveReplyInsufEitherResources, mpcMpsMacAddressEntry=mpcMpsMacAddressEntry, mpcStatRxMpoaImpRequests=mpcStatRxMpoaImpRequests, mpcStatRxMpoaResolveReplyInsufSCResources=mpcStatRxMpoaResolveReplyInsufSCResources, mpcActualRetryTimeMaximum=mpcActualRetryTimeMaximum, mpcStatRxMpoaResolveReplyUnspecifiedOther=mpcStatRxMpoaResolveReplyUnspecifiedOther, mpcIngressCacheServiceCategory=mpcIngressCacheServiceCategory, mpcStatTxMpoaImpReplyUnsupportedMacEncaps=mpcStatTxMpoaImpReplyUnsupportedMacEncaps, mpsLECSValue=mpsLECSValue, mpsConfigGroup=mpsConfigGroup, mpcMpsMacAddressIndex=mpcMpsMacAddressIndex, mpsStatTxNhrpResolveReplies=mpsStatTxNhrpResolveReplies, mpsEgressCacheGroup=mpsEgressCacheGroup, mpcStatTxMpoaImpReplyAcks=mpcStatTxMpoaImpReplyAcks, mpcActualSCSetupFrameCount=mpcActualSCSetupFrameCount, deviceTypeMpsMacAddressEntry=deviceTypeMpsMacAddressEntry, mpcIngressCacheTimeUntilNextResolutionRequest=mpcIngressCacheTimeUntilNextResolutionRequest, mpsStatTxMpoaResolveReplyUnspecifiedOther=mpsStatTxMpoaResolveReplyUnspecifiedOther, mpsProtocolRowStatus=mpsProtocolRowStatus, deviceTypeMpcAtmAddress=deviceTypeMpcAtmAddress, mpcStatisticsEntry=mpcStatisticsEntry, mpsIngressCacheDestInternetworkAddrType=mpsIngressCacheDestInternetworkAddrType, mpcIngressCacheSigErrCode=mpcIngressCacheSigErrCode, mpsIngressCachePrefixLen=mpsIngressCachePrefixLen, mpsIngressCacheHoldTime=mpsIngressCacheHoldTime, mpsEgressCacheSourceClientAtmAddr=mpsEgressCacheSourceClientAtmAddr, mpcMpsIndex=mpcMpsIndex, mpsStatisticsGroup=mpsStatisticsGroup, mpcEgressCacheId=mpcEgressCacheId, mpsEgressCacheNextHopAddr=mpsEgressCacheNextHopAddr, mpcIngressCacheTotalPacketGroup=mpcIngressCacheTotalPacketGroup, mpcStatTxMpoaResolveRequests=mpcStatTxMpoaResolveRequests, mpcDataAtmAddress=mpcDataAtmAddress, mpsEgressCachePrefixLen=mpsEgressCachePrefixLen, mpsActualRetryTimeMaximum=mpsActualRetryTimeMaximum, mpoaMpcMibBasicCompliance=mpoaMpcMibBasicCompliance, mpsStatTxMpoaEgressCachePurgeReplies=mpsStatTxMpoaEgressCachePurgeReplies, mpoaCommonObjects=mpoaCommonObjects, mpcStatTxMpoaImpReplyUnspecifiedOther=mpcStatTxMpoaImpReplyUnspecifiedOther, mpcActualEntry=mpcActualEntry, mpcEgressCacheIDestAddr=mpcEgressCacheIDestAddr, mpcProtocolEntry=mpcProtocolEntry, mpcEgressCacheInetworkAddrType=mpcEgressCacheInetworkAddrType, mpcStatRxErrInvalidExtensions=mpcStatRxErrInvalidExtensions, mpsCtrlAtmAddr=mpsCtrlAtmAddr, mpcIngressCacheDestAtmAddr=mpcIngressCacheDestAtmAddr, mpcConfigTable=mpcConfigTable, mpcCtrlAtmAddr=mpcCtrlAtmAddr, mpsEgressCacheId=mpsEgressCacheId, mpoaMpcMibAdvancedCompliance=mpoaMpcMibAdvancedCompliance, mpcActualSCSetupFrameTime=mpcActualSCSetupFrameTime, mpsStatRxMpoaImpReplyInsufECResources=mpsStatRxMpoaImpReplyInsufECResources, mpcConfigGroup=mpcConfigGroup, mpcStatTxMpoaImpReplyInsufEitherResources=mpcStatTxMpoaImpReplyInsufEitherResources, mpsStatRxMpoaImpReplyOther=mpsStatRxMpoaImpReplyOther, mpsActualInitialRetryTime=mpsActualInitialRetryTime, mpsEgressCacheServiceCategory=mpsEgressCacheServiceCategory, mpsStatTxMpoaTriggers=mpsStatTxMpoaTriggers, mpsActualConfigMode=mpsActualConfigMode, mpcDataAtmAddressGroup=mpcDataAtmAddressGroup, mpsEgressCacheDestInternetworkAddrType=mpsEgressCacheDestInternetworkAddrType, mpsStatTxMpoaResolveReplyAcks=mpsStatTxMpoaResolveReplyAcks, mpcStatRxErrProtoAddrUnreachables=mpcStatRxErrProtoAddrUnreachables, mpsIngressCacheEntry=mpsIngressCacheEntry, mpcStatRxNhrpPurgeRequests=mpcStatRxNhrpPurgeRequests, atmForumNetworkManagement=atmForumNetworkManagement, mpsStatGiveupTimeExpireds=mpsStatGiveupTimeExpireds, mpcObjects=mpcObjects, mpsEgressCacheDestAddr=mpsEgressCacheDestAddr, deviceTypeMpsMacAddressTable=deviceTypeMpsMacAddressTable, mpcEgressCacheDataLinkHeader=mpcEgressCacheDataLinkHeader, deviceTypeEntry=deviceTypeEntry, mpsStatTxMpoaResolveReplyInsufSCResources=mpsStatTxMpoaResolveReplyInsufSCResources, mpsProtocolTable=mpsProtocolTable, mpcRowStatus=mpcRowStatus, mpsProtocolGroup=mpsProtocolGroup, mpcEgressCacheEgressCacheTagValid=mpcEgressCacheEgressCacheTagValid, mpcStatRxErrProtoErrors=mpcStatRxErrProtoErrors, mpsStatRxMpoaImpReplyInsufSCResources=mpsStatRxMpoaImpReplyInsufSCResources, mpcFlowDetectLecIndex=mpcFlowDetectLecIndex, mpcStatRxMpoaKeepAlives=mpcStatRxMpoaKeepAlives, mpcStatRxErrLoopDetecteds=mpcStatRxErrLoopDetecteds, mpcIngressCacheDestInetworkAddrType=mpcIngressCacheDestInetworkAddrType, mpcEgressCacheLecIndex=mpcEgressCacheLecIndex, mpsConfigEntry=mpsConfigEntry, mpcActualState=mpcActualState, AtmConfigAddr=AtmConfigAddr, mpcMappingTable=mpcMappingTable, mpsStatTxMpoaResolveReplyUnsupportedInetProt=mpsStatTxMpoaResolveReplyUnsupportedInetProt, mpsStatTxMpoaImpRequests=mpsStatTxMpoaImpRequests, mpcNextIndex=mpcNextIndex, mpcLecIndex=mpcLecIndex, deviceTypeMpsMacAddress=deviceTypeMpsMacAddress, mpcLECSValue=mpcLECSValue, mpsStatRxMpoaImpReplyInsufEitherResources=mpsStatRxMpoaImpReplyInsufEitherResources, mpsMappingTable=mpsMappingTable, MpsIndex=MpsIndex, mpcMpsMacAddress=mpcMpsMacAddress, mpoaMIBGroups=mpoaMIBGroups, mpcMpsMultipleMacAddressGroup=mpcMpsMultipleMacAddressGroup, mpcActualConfigMode=mpcActualConfigMode, mpcIndex=mpcIndex, mpcStatRxMpoaDataPlanePurges=mpcStatRxMpoaDataPlanePurges, mpcEgressCacheTotalPacketGroup=mpcEgressCacheTotalPacketGroup, mpsConfigMode=mpsConfigMode, mpcEgressCacheServiceCategory=mpcEgressCacheServiceCategory, mpcEgressCacheGroup=mpcEgressCacheGroup, mpsIngressCacheServiceCategory=mpsIngressCacheServiceCategory, mpsEgressCacheEntry=mpsEgressCacheEntry, mpsEgressCacheDataLinkHeader=mpsEgressCacheDataLinkHeader, mpsEgressCacheNextHopInternetworkAddrType=mpsEgressCacheNextHopInternetworkAddrType, mpcStatTxMpoaDataPlanePurges=mpcStatTxMpoaDataPlanePurges, mpsRetryTimeMaximum=mpsRetryTimeMaximum, mpcRetryTimeMaximum=mpcRetryTimeMaximum, mpcIngressCacheTxTotalOctets=mpcIngressCacheTxTotalOctets, mpcIngressCacheEntry=mpcIngressCacheEntry, mpsRowStatus=mpsRowStatus, mpsConfigTable=mpsConfigTable, mpsMpcIndex=mpsMpcIndex, mpcProtocolTable=mpcProtocolTable, mpsActualKeepAliveLifeTime=mpsActualKeepAliveLifeTime, mpsIngressCacheResolvedAtmAddr=mpsIngressCacheResolvedAtmAddr, mpoaMIBConformance=mpoaMIBConformance, mpsActualState=mpsActualState, mpoaMIB=mpoaMIB, InternetworkAddrType=InternetworkAddrType, mpcStatisticsTable=mpcStatisticsTable, mpcStatTxMpoaImpReplyInsufSCResources=mpcStatTxMpoaImpReplyInsufSCResources, mpsMpcEntry=mpsMpcEntry, mpsStatisticsTable=mpsStatisticsTable, mpcEgressCacheTable=mpcEgressCacheTable, mpcDataAtmAddressEntry=mpcDataAtmAddressEntry, mpsMappingEntry=mpsMappingEntry, mpsIngressCacheGroup=mpsIngressCacheGroup, deviceTypeMpsAtmAddress=deviceTypeMpsAtmAddress, mpcIngressCacheSrcAtmAddr=mpcIngressCacheSrcAtmAddr, mpsMappingIndex=mpsMappingIndex, mpcConfigMode=mpcConfigMode, mpcProtocolRowStatus=mpcProtocolRowStatus, mpcStatRxErrUnrecognizedExtensions=mpcStatRxErrUnrecognizedExtensions, mpcIngressCacheEntryState=mpcIngressCacheEntryState, mpcMpsMultipleMacAddressTable=mpcMpsMultipleMacAddressTable, mpsIngressCacheMpoaRequestId=mpsIngressCacheMpoaRequestId, mpoaMIBCompliances=mpoaMIBCompliances, mpcMpsObjects=mpcMpsObjects, mpcActualGroup=mpcActualGroup, mpcSCSetupFrameTime=mpcSCSetupFrameTime, mpcEgressCacheRxTotalPackets=mpcEgressCacheRxTotalPackets, AtmAddr=AtmAddr, mpcEgressCacheIngressMpcDataAtmAddr=mpcEgressCacheIngressMpcDataAtmAddr, atmForum=atmForum, mpsMappingGroup=mpsMappingGroup, mpcStatTxMpoaImpReplyInsufECResources=mpcStatTxMpoaImpReplyInsufECResources, mpcStatRxErrHopCountExceededs=mpcStatRxErrHopCountExceededs, mpsStatRxMpoaImpReplyUnsupportedInetProt=mpsStatRxMpoaImpReplyUnsupportedInetProt, mpcEgressCacheRxTotalOctets=mpcEgressCacheRxTotalOctets, mpsMpcTable=mpsMpcTable, mpsIngressCacheSourceMpcCtrlAtmAddr=mpsIngressCacheSourceMpcCtrlAtmAddr, mpcStatRxErrInvalidReplies=mpcStatRxErrInvalidReplies, mpsNextIndex=mpsNextIndex, mpsActualGiveupTime=mpsActualGiveupTime, mpsEgressCacheNhrpRequestId=mpsEgressCacheNhrpRequestId, mpcActualHoldDownTime=mpcActualHoldDownTime, mpcDiscontinuityTime=mpcDiscontinuityTime, mpcStatRxErrSduSizeExceededs=mpcStatRxErrSduSizeExceededs, mpoaMpsMibBasicCompliance=mpoaMpsMibBasicCompliance, mpcEgressCachePrefixLen=mpcEgressCachePrefixLen, mpsGiveupTime=mpsGiveupTime, mpcIngressCacheTable=mpcIngressCacheTable, mpsActualEntry=mpsActualEntry, mpoaDeviceTypeGroup=mpoaDeviceTypeGroup, mpsInternetworkLayerProtocol=mpsInternetworkLayerProtocol, mpcStatRxMpoaTriggers=mpcStatRxMpoaTriggers, mpcDataAtmAddressRowStatus=mpcDataAtmAddressRowStatus, mpcStatTxMpoaImpReplyUnsupportedInetProt=mpcStatTxMpoaImpReplyUnsupportedInetProt, mpcMappingRowStatus=mpcMappingRowStatus, mpcIngressCacheDestAddr=mpcIngressCacheDestAddr, mpsStatTxMpoaResolveReplyOther=mpsStatTxMpoaResolveReplyOther, mpsEgressCacheEntryState=mpsEgressCacheEntryState, mpcActualInitialRetryTime=mpcActualInitialRetryTime, mpsIngressCacheDestAddr=mpsIngressCacheDestAddr, mpcFlowDetectProtocol=mpcFlowDetectProtocol, mpcMpsEntry=mpcMpsEntry, mpsStatTxNhrpResolveRequests=mpsStatTxNhrpResolveRequests, mpcMappingGroup=mpcMappingGroup, mpsStatRxNhrpResolveReplies=mpsStatRxNhrpResolveReplies, mpcStatisticsGroup=mpcStatisticsGroup, mpsStatRxMpoaImpReplyAcks=mpsStatRxMpoaImpReplyAcks, mpsInitialRetryTime=mpsInitialRetryTime, mpcMappingEntry=mpcMappingEntry, mpsIngressCacheEntryState=mpsIngressCacheEntryState, mpsEgressCacheElanId=mpsEgressCacheElanId, deviceTypeIndex=deviceTypeIndex, mpcIngressCacheTxTotalPackets=mpcIngressCacheTxTotalPackets, mpcStatTxNhrpPurgeReplies=mpcStatTxNhrpPurgeReplies, mpsStatTxMpoaResolveReplyUnsupportedMacEncaps=mpsStatTxMpoaResolveReplyUnsupportedMacEncaps, mpsStatRxNhrpResolveRequests=mpsStatRxNhrpResolveRequests, mpoaDeviceTypeMpsMacGroup=mpoaDeviceTypeMpsMacGroup, mpcStatTxMpoaEgressCachePurgeRequests=mpcStatTxMpoaEgressCachePurgeRequests, mpsIngressCacheNhrpRequestId=mpsIngressCacheNhrpRequestId, mpsObjects=mpsObjects, mpsActualKeepAlive=mpsActualKeepAlive, mpsEgressCacheMpoaRequestId=mpsEgressCacheMpoaRequestId, mpsMpcGroup=mpsMpcGroup, mpoaMIBObjects=mpoaMIBObjects, mpcMappingIndex=mpcMappingIndex, mpcMpsMacAddressGroup=mpcMpsMacAddressGroup, mpcActualTable=mpcActualTable, mpsDiscontinuityTime=mpsDiscontinuityTime, mpcInitialRetryTime=mpcInitialRetryTime, mpsStatRxMpoaImpReplyUnspecifiedOther=mpsStatRxMpoaImpReplyUnspecifiedOther, mpsActualDefaultHoldingTime=mpsActualDefaultHoldingTime, mpcMpsMacAddressTable=mpcMpsMacAddressTable, MpcIndex=MpcIndex, deviceTypeLecIndex=deviceTypeLecIndex, mpcIngressCacheLastNhrpCieCode=mpcIngressCacheLastNhrpCieCode, deviceTypeRemoteLecAtmAddress=deviceTypeRemoteLecAtmAddress, mpsEgressCacheTable=mpsEgressCacheTable, mpcMpsAtmAddr=mpcMpsAtmAddr)
mibBuilder.exportSymbols("MPOA-MIB", InternetworkAddr=InternetworkAddr, mpsKeepAliveLifeTime=mpsKeepAliveLifeTime, mpcStatRxMpoaResolveReplyInsufEitherResources=mpcStatRxMpoaResolveReplyInsufEitherResources, deviceTypeType=deviceTypeType, deviceTypeTable=deviceTypeTable, mpsIngressCacheSrcAddr=mpsIngressCacheSrcAddr, mpcIngressCacheTotalOctetGroup=mpcIngressCacheTotalOctetGroup, mpcDataAtmAddressTable=mpcDataAtmAddressTable, mpoaMpsMibAdvancedCompliance=mpoaMpsMibAdvancedCompliance, mpcStatRxMpoaResolveReplyUnsupportedMacEncaps=mpcStatRxMpoaResolveReplyUnsupportedMacEncaps, mpcEgressCacheEntry=mpcEgressCacheEntry, mpcProtocolGroup=mpcProtocolGroup, mpsEgressCacheHoldTime=mpsEgressCacheHoldTime, mpcEgressCacheEgressCacheTag=mpcEgressCacheEgressCacheTag, mpcStatRxMpoaResolveReplyInsufECResources=mpcStatRxMpoaResolveReplyInsufECResources, mpcStatRxMpoaEgressCachePurgeReplies=mpcStatRxMpoaEgressCachePurgeReplies, mpsIngressCacheTable=mpsIngressCacheTable, mpcConfigEntry=mpcConfigEntry, mpsKeepAliveTime=mpsKeepAliveTime)
