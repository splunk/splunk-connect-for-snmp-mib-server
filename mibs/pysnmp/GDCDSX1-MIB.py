#
# PySNMP MIB module GDCDSX1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCDSX1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, enterprises, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, IpAddress, ModuleIdentity, Gauge32, Unsigned32, Counter32, Counter64, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "IpAddress", "ModuleIdentity", "Gauge32", "Unsigned32", "Counter32", "Counter64", "MibIdentifier", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
gdcDsx1System = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1))
sc5001 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2))
gdcDsx1Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1, 1))
gdcDsx1Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1, 2))
gdcDsx1Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1, 3))
gdcDsx1Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1, 4))
gdcDsx1Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1, 5))
gdcDsx1Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1, 6))
gdcDsx1NetMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 1, 7))
gdcDsx1SystemMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1SystemMIBversion.setStatus('mandatory')
gdcDsx1VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2), )
if mibBuilder.loadTexts: gdcDsx1VersionTable.setStatus('mandatory')
gdcDsx1VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1VersionIndex"))
if mibBuilder.loadTexts: gdcDsx1VersionEntry.setStatus('mandatory')
gdcDsx1VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1VersionIndex.setStatus('mandatory')
gdcDsx1FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1FirmwareRev.setStatus('mandatory')
gdcDsx1ModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ModelNumber.setStatus('mandatory')
gdcDsx1ActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ActiveFirmwareRev.setStatus('mandatory')
gdcDsx1StoredFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1StoredFirmwareRev.setStatus('mandatory')
gdcDsx1BootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1BootRev.setStatus('mandatory')
gdcDsx1StoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1StoredFirmwareStatus.setStatus('mandatory')
gdcDsx1SwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1SwitchActiveFirmware.setStatus('mandatory')
gdcDsx1DownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1DownloadingMode.setStatus('mandatory')
gdcDsx1MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1), )
if mibBuilder.loadTexts: gdcDsx1MaintenanceTable.setStatus('mandatory')
gdcDsx1MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1MaintenanceLineIndex"))
if mibBuilder.loadTexts: gdcDsx1MaintenanceEntry.setStatus('mandatory')
gdcDsx1MaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1MaintenanceLineIndex.setStatus('mandatory')
gdcDsx1SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1SoftReset.setStatus('mandatory')
gdcDsx1ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ConfigMode.setStatus('mandatory')
gdcDsx1FrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1FrontPanel.setStatus('mandatory')
gdcDsx1SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1SysUpTime.setStatus('mandatory')
gdcDsx1DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("factoryDefault", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1DefaultInit.setStatus('mandatory')
gdcDsx1ResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9))).clone(namedValues=NamedValues(("norm", 1), ("reset", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1ResetStats.setStatus('mandatory')
gdcDsx1LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1LedStatus.setStatus('mandatory')
gdcDsx1SetTransmitClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txClkSrc", 1), ("fallBackClkSrc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1SetTransmitClkSrc.setStatus('mandatory')
gdcDsx1CsuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuMode", 1), ("concentratorMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1CsuMode.setStatus('mandatory')
gdcDsx1CircuitIdentifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1CircuitIdentifier1.setStatus('mandatory')
gdcDsx1CircuitIdentifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1CircuitIdentifier2.setStatus('mandatory')
gdcDsx1NetMaintTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 7, 1), )
if mibBuilder.loadTexts: gdcDsx1NetMaintTable.setStatus('mandatory')
gdcDsx1NetMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 7, 1, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1NetMaintLineIndex"))
if mibBuilder.loadTexts: gdcDsx1NetMaintEntry.setStatus('mandatory')
gdcDsx1NetMaintLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1NetMaintLineIndex.setStatus('mandatory')
gdcDsx1NetMaintReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 43))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1NetMaintReceiveLevel.setStatus('mandatory')
gdcDsx1NetMaintAttenSense = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1NetMaintAttenSense.setStatus('mandatory')
gdcDsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1), )
if mibBuilder.loadTexts: gdcDsx1ConfigTable.setStatus('mandatory')
gdcDsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1ConfigIndex"))
if mibBuilder.loadTexts: gdcDsx1ConfigEntry.setStatus('mandatory')
gdcDsx1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ConfigIndex.setStatus('mandatory')
gdcDsx1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("manEsf", 2), ("manD4", 3), ("unframed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1LineType.setStatus('mandatory')
gdcDsx1InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ds1", 2), ("dsx1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1InterfaceType.setStatus('mandatory')
gdcDsx1Preequalization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("preeq130", 2), ("preeq260", 3), ("preeq390", 4), ("preeq530", 5), ("preeq655", 6), ("none", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1Preequalization.setStatus('mandatory')
gdcDsx1AdminLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("man00dB", 2), ("man75dB", 3), ("man150dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1AdminLineBuildout.setStatus('mandatory')
gdcDsx1OperLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProcess", 1), ("tx00dB", 2), ("tx75dB", 3), ("tx150dB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1OperLineBuildout.setStatus('mandatory')
gdcDsx1AdminRcvRange = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("manNorm", 2), ("manExt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1AdminRcvRange.setStatus('mandatory')
gdcDsx1OperRcvRange = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProcess", 1), ("norm", 2), ("ext", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1OperRcvRange.setStatus('mandatory')
gdcDsx1OnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inhibit", 1), ("max15zeros", 2), ("max39zeros", 3), ("restrict8XNplus1", 4), ("min1in8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1OnesDensity.setStatus('mandatory')
gdcDsx1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("station", 2), ("cascade", 3), ("channel", 4), ("composite", 5), ("shelf", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1TransmitClockSource.setStatus('mandatory')
gdcDsx1FallbackClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("composite", 3), ("loopTiming", 4), ("channel", 5), ("cascade", 6), ("localTiming", 7), ("station", 8), ("shelf", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1FallbackClockSource.setStatus('mandatory')
gdcDsx1AISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1AISLoopdown.setStatus('mandatory')
gdcDsx1InbandLoopCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibit", 1), ("payload", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1InbandLoopCfg.setStatus('mandatory')
gdcDsx1Redundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onLine", 1), ("backUp", 2), ("keepAlive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1Redundancy.setStatus('mandatory')
gdcDsx1DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1), )
if mibBuilder.loadTexts: gdcDsx1DiagTable.setStatus('mandatory')
gdcDsx1DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1DiagIndex"))
if mibBuilder.loadTexts: gdcDsx1DiagEntry.setStatus('mandatory')
gdcDsx1DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1DiagIndex.setStatus('mandatory')
gdcDsx1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("other", 1), ("sendProgPattern", 2), ("send2047pattern", 3), ("sendInbandCode", 6), ("sendInbandCodeReset", 7), ("sendNetworkInterfaceCode", 8), ("sendNtworkInterfaceResetcode", 9), ("sendDS0DelayPattern", 10), ("send511PatternWithLT", 11), ("send511PatternWithRT", 12), ("send2047PatternWithLT", 13), ("send2047PatternWithRT", 14), ("sendQRSPatternWithLT", 15), ("sendQRSPatternWithRT", 16), ("sendProgPatternWithLT", 17), ("sendProgPatternWithRT", 18), ("send3in24PatternWithRT", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1SendCode.setStatus('mandatory')
gdcDsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("localtest", 2), ("ds0", 3), ("cascade", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1LoopbackConfig.setStatus('mandatory')
gdcDsx1DS0Diag = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1DS0Diag.setStatus('mandatory')
gdcDsx1TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noLimit", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("testTime30Secs", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1TestDuration.setStatus('mandatory')
gdcDsx1TestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("notInTest", 1), ("testInProgress", 2), ("testCompleted", 4), ("testCompletedNotInTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1TestExecutionStatus.setStatus('mandatory')
gdcDsx1TestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1TestExceptions.setStatus('mandatory')
gdcDsx1TestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1TestResults.setStatus('mandatory')
gdcDsx1ANSIperfTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1), )
if mibBuilder.loadTexts: gdcDsx1ANSIperfTable.setStatus('mandatory')
gdcDsx1ANSIperfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1ANSIperfIndex"), (0, "GDCDSX1-MIB", "gdcDsx1ANSIdirection"), (0, "GDCDSX1-MIB", "gdcDsx1ANSIseconds"))
if mibBuilder.loadTexts: gdcDsx1ANSIperfEntry.setStatus('mandatory')
gdcDsx1ANSIperfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIperfIndex.setStatus('mandatory')
gdcDsx1ANSIdirection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outbound", 1), ("inbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIdirection.setStatus('mandatory')
gdcDsx1ANSIseconds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIseconds.setStatus('mandatory')
gdcDsx1ANSICRCerrorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("noErrors", 1), ("errors1", 2), ("errors2to5", 4), ("errors6to10", 8), ("errors11to100", 16), ("errors101to320", 32), ("errors321orMore", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSICRCerrorEvents.setStatus('mandatory')
gdcDsx1ANSIsevereErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIsevereErrors.setStatus('mandatory')
gdcDsx1ANSIframeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIframeErrors.setStatus('mandatory')
gdcDsx1ANSIcodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIcodeViolations.setStatus('mandatory')
gdcDsx1ANSIcontrolledSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIcontrolledSlips.setStatus('mandatory')
gdcDsx1ANSIactivePayloadLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1ANSIactivePayloadLoops.setStatus('mandatory')
gdcDsx1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 2), )
if mibBuilder.loadTexts: gdcDsx1CurrentTable.setStatus('mandatory')
gdcDsx1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 2, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1CurrentIndex"))
if mibBuilder.loadTexts: gdcDsx1CurrentEntry.setStatus('mandatory')
gdcDsx1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1CurrentIndex.setStatus('mandatory')
gdcDsx1CurrentLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1CurrentLOFCs.setStatus('mandatory')
gdcDsx1CurrenUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1CurrenUserStat.setStatus('mandatory')
gdcDsx1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 3), )
if mibBuilder.loadTexts: gdcDsx1IntervalTable.setStatus('mandatory')
gdcDsx1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 3, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1IntervalIndex"), (0, "GDCDSX1-MIB", "gdcDsx1IntervalNumber"))
if mibBuilder.loadTexts: gdcDsx1IntervalEntry.setStatus('mandatory')
gdcDsx1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1IntervalIndex.setStatus('mandatory')
gdcDsx1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1IntervalNumber.setStatus('mandatory')
gdcDsx1IntervalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1IntervalLOFCs.setStatus('mandatory')
gdcDsx1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 4), )
if mibBuilder.loadTexts: gdcDsx1TotalTable.setStatus('mandatory')
gdcDsx1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 4, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1TotalIndex"))
if mibBuilder.loadTexts: gdcDsx1TotalEntry.setStatus('mandatory')
gdcDsx1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1TotalIndex.setStatus('mandatory')
gdcDsx1TotalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 5, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1TotalLOFCs.setStatus('mandatory')
dsx1AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1))
dsx1NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 1))
dsx1DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 2))
dsx1PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 3))
dsx1NvRamCorrupt = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 4))
dsx1UnitFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 5))
dsx1MbiLock = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 6))
dsx1LocalPwrFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 7))
dsx1TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 8))
dsx1StatusChange = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 9))
dsx1UnsoTest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 10))
dsx1LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 11))
dsx1LossOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 12))
dsx1Ais = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 13))
dsx1ReceivedYellow = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 14))
dsx1UnavailSignalState = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 15))
dsx1ExcessiveZeros = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 16))
dsx1LowAverageDensity = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 17))
dsx1ControlledSlips = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 18))
dsx1BipolarViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 19))
dsx1CrcErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 20))
dsx1FallbackTimingActive = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 2, 1, 21))
gdcDsx1AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 1), )
if mibBuilder.loadTexts: gdcDsx1AlarmConfigTable.setStatus('mandatory')
gdcDsx1AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 1, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1AlarmConfigIndex"), (0, "GDCDSX1-MIB", "gdcDsx1AlarmConfigIdentifier"))
if mibBuilder.loadTexts: gdcDsx1AlarmConfigEntry.setStatus('mandatory')
gdcDsx1AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1AlarmConfigIndex.setStatus('mandatory')
gdcDsx1AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1AlarmConfigIdentifier.setStatus('mandatory')
gdcDsx1AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last1min", 3), ("last1hr", 4), ("infinite", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1AlarmCountWindow.setStatus('mandatory')
gdcDsx1AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("thresGT10", 1), ("thresGT100", 2), ("thresGT1000", 3), ("thresGT10000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcDsx1AlarmCountThreshold.setStatus('mandatory')
gdcDsx1AlarmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 2), )
if mibBuilder.loadTexts: gdcDsx1AlarmStatusTable.setStatus('mandatory')
gdcDsx1AlarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 2, 1), ).setIndexNames((0, "GDCDSX1-MIB", "gdcDsx1AlarmStatusIndex"), (0, "GDCDSX1-MIB", "gdcDsx1AlarmStatusIdentifier"))
if mibBuilder.loadTexts: gdcDsx1AlarmStatusEntry.setStatus('mandatory')
gdcDsx1AlarmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1AlarmStatusIndex.setStatus('mandatory')
gdcDsx1AlarmStatusIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1AlarmStatusIdentifier.setStatus('mandatory')
gdcDsx1AlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1AlarmCount.setStatus('mandatory')
gdcDsx1AlarmFirstOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1AlarmFirstOccurrence.setStatus('mandatory')
gdcDsx1AlarmLastOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 1, 6, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcDsx1AlarmLastOccurrence.setStatus('mandatory')
mibBuilder.exportSymbols("GDCDSX1-MIB", gdcDsx1TestExceptions=gdcDsx1TestExceptions, gdcDsx1LedStatus=gdcDsx1LedStatus, gdcDsx1ANSIseconds=gdcDsx1ANSIseconds, gdcDsx1CurrentTable=gdcDsx1CurrentTable, dsx1BipolarViolations=dsx1BipolarViolations, gdcDsx1AlarmConfigEntry=gdcDsx1AlarmConfigEntry, gdcDsx1AlarmStatusTable=gdcDsx1AlarmStatusTable, gdcDsx1CsuMode=gdcDsx1CsuMode, gdcDsx1AlarmStatusIdentifier=gdcDsx1AlarmStatusIdentifier, gdcDsx1DefaultInit=gdcDsx1DefaultInit, gdcDsx1StoredFirmwareStatus=gdcDsx1StoredFirmwareStatus, gdcDsx1NetMaintLineIndex=gdcDsx1NetMaintLineIndex, gdcDsx1OperRcvRange=gdcDsx1OperRcvRange, gdcDsx1AdminLineBuildout=gdcDsx1AdminLineBuildout, gdcDsx1IntervalLOFCs=gdcDsx1IntervalLOFCs, gdcDsx1System=gdcDsx1System, dsx1NvRamCorrupt=dsx1NvRamCorrupt, gdcDsx1FallbackClockSource=gdcDsx1FallbackClockSource, gdcDsx1ConfigMode=gdcDsx1ConfigMode, gdcDsx1CurrentIndex=gdcDsx1CurrentIndex, gdcDsx1BootRev=gdcDsx1BootRev, gdcDsx1ANSIactivePayloadLoops=gdcDsx1ANSIactivePayloadLoops, gdcDsx1CurrenUserStat=gdcDsx1CurrenUserStat, dsx1UnsoTest=dsx1UnsoTest, gdcDsx1AlarmFirstOccurrence=gdcDsx1AlarmFirstOccurrence, gdcDsx1NetMaintTable=gdcDsx1NetMaintTable, dsx1CrcErrors=dsx1CrcErrors, gdcDsx1DiagIndex=gdcDsx1DiagIndex, dsx1=dsx1, dsx1UnitFailure=dsx1UnitFailure, gdcDsx1AlarmLastOccurrence=gdcDsx1AlarmLastOccurrence, gdcDsx1OperLineBuildout=gdcDsx1OperLineBuildout, gdcDsx1SysUpTime=gdcDsx1SysUpTime, gdcDsx1IntervalNumber=gdcDsx1IntervalNumber, gdcDsx1VersionEntry=gdcDsx1VersionEntry, gdcDsx1DS0Diag=gdcDsx1DS0Diag, dsx1LossOfFrame=dsx1LossOfFrame, dsx1Ais=dsx1Ais, gdcDsx1AlarmConfigIndex=gdcDsx1AlarmConfigIndex, gdcDsx1ResetStats=gdcDsx1ResetStats, gdcDsx1AlarmStatusIndex=gdcDsx1AlarmStatusIndex, gdcDsx1FirmwareRev=gdcDsx1FirmwareRev, gdcDsx1FrontPanel=gdcDsx1FrontPanel, gdcDsx1ANSICRCerrorEvents=gdcDsx1ANSICRCerrorEvents, gdcDsx1AlarmCountWindow=gdcDsx1AlarmCountWindow, gdcDsx1SendCode=gdcDsx1SendCode, gdcDsx1AlarmConfigTable=gdcDsx1AlarmConfigTable, gdcDsx1LoopbackConfig=gdcDsx1LoopbackConfig, gdcDsx1AlarmCountThreshold=gdcDsx1AlarmCountThreshold, dsx1AlarmData=dsx1AlarmData, gdcDsx1ConfigIndex=gdcDsx1ConfigIndex, gdcDsx1AlarmStatusEntry=gdcDsx1AlarmStatusEntry, gdcDsx1DownloadingMode=gdcDsx1DownloadingMode, sc5001=sc5001, gdcDsx1InterfaceType=gdcDsx1InterfaceType, gdcDsx1Alarms=gdcDsx1Alarms, gdcDsx1Maintenance=gdcDsx1Maintenance, dsx1ExcessiveZeros=dsx1ExcessiveZeros, gdcDsx1SystemMIBversion=gdcDsx1SystemMIBversion, gdc=gdc, gdcDsx1TestResults=gdcDsx1TestResults, gdcDsx1CurrentEntry=gdcDsx1CurrentEntry, gdcDsx1MaintenanceTable=gdcDsx1MaintenanceTable, gdcDsx1TotalLOFCs=gdcDsx1TotalLOFCs, gdcDsx1Diagnostics=gdcDsx1Diagnostics, dsx1TimingLoss=dsx1TimingLoss, gdcDsx1InbandLoopCfg=gdcDsx1InbandLoopCfg, gdcDsx1TestDuration=gdcDsx1TestDuration, gdcDsx1ANSIsevereErrors=gdcDsx1ANSIsevereErrors, gdcDsx1IntervalIndex=gdcDsx1IntervalIndex, gdcDsx1IntervalEntry=gdcDsx1IntervalEntry, gdcDsx1Configuration=gdcDsx1Configuration, gdcDsx1CircuitIdentifier2=gdcDsx1CircuitIdentifier2, gdcDsx1AISLoopdown=gdcDsx1AISLoopdown, gdcDsx1VersionIndex=gdcDsx1VersionIndex, gdcDsx1AdminRcvRange=gdcDsx1AdminRcvRange, gdcDsx1TotalTable=gdcDsx1TotalTable, gdcDsx1MaintenanceLineIndex=gdcDsx1MaintenanceLineIndex, gdcDsx1OnesDensity=gdcDsx1OnesDensity, gdcDsx1ANSIcontrolledSlips=gdcDsx1ANSIcontrolledSlips, gdcDsx1AlarmConfigIdentifier=gdcDsx1AlarmConfigIdentifier, gdcDsx1SoftReset=gdcDsx1SoftReset, gdcDsx1NetMaintReceiveLevel=gdcDsx1NetMaintReceiveLevel, gdcDsx1TestExecutionStatus=gdcDsx1TestExecutionStatus, gdcDsx1ConfigTable=gdcDsx1ConfigTable, gdcDsx1IntervalTable=gdcDsx1IntervalTable, dsx1UnavailSignalState=dsx1UnavailSignalState, dsx1PowerUpAlm=dsx1PowerUpAlm, gdcDsx1TransmitClockSource=gdcDsx1TransmitClockSource, gdcDsx1ActiveFirmwareRev=gdcDsx1ActiveFirmwareRev, gdcDsx1ConfigEntry=gdcDsx1ConfigEntry, gdcDsx1NetMaintAttenSense=gdcDsx1NetMaintAttenSense, dsx1LossOfSignal=dsx1LossOfSignal, dsx1LowAverageDensity=dsx1LowAverageDensity, gdcDsx1NetMaintenance=gdcDsx1NetMaintenance, dsx1DiagRxErrAlm=dsx1DiagRxErrAlm, gdcDsx1StoredFirmwareRev=gdcDsx1StoredFirmwareRev, gdcDsx1Preequalization=gdcDsx1Preequalization, gdcDsx1SwitchActiveFirmware=gdcDsx1SwitchActiveFirmware, gdcDsx1TotalEntry=gdcDsx1TotalEntry, gdcDsx1DiagEntry=gdcDsx1DiagEntry, dsx1StatusChange=dsx1StatusChange, gdcDsx1CircuitIdentifier1=gdcDsx1CircuitIdentifier1, dsx1MbiLock=dsx1MbiLock, gdcDsx1Version=gdcDsx1Version, gdcDsx1ModelNumber=gdcDsx1ModelNumber, gdcDsx1ANSIperfEntry=gdcDsx1ANSIperfEntry, gdcDsx1ANSIperfIndex=gdcDsx1ANSIperfIndex, dsx1ReceivedYellow=dsx1ReceivedYellow, dsx1NoResponseAlm=dsx1NoResponseAlm, gdcDsx1TotalIndex=gdcDsx1TotalIndex, gdcDsx1LineType=gdcDsx1LineType, gdcDsx1ANSIdirection=gdcDsx1ANSIdirection, dsx1ControlledSlips=dsx1ControlledSlips, gdcDsx1VersionTable=gdcDsx1VersionTable, gdcDsx1MaintenanceEntry=gdcDsx1MaintenanceEntry, dsx1LocalPwrFail=dsx1LocalPwrFail, gdcDsx1AlarmCount=gdcDsx1AlarmCount, gdcDsx1DiagTable=gdcDsx1DiagTable, gdcDsx1SetTransmitClkSrc=gdcDsx1SetTransmitClkSrc, gdcDsx1ANSIperfTable=gdcDsx1ANSIperfTable, gdcDsx1Redundancy=gdcDsx1Redundancy, dsx1FallbackTimingActive=dsx1FallbackTimingActive, gdcDsx1ANSIcodeViolations=gdcDsx1ANSIcodeViolations, gdcDsx1NetMaintEntry=gdcDsx1NetMaintEntry, gdcDsx1CurrentLOFCs=gdcDsx1CurrentLOFCs, gdcDsx1ANSIframeErrors=gdcDsx1ANSIframeErrors, gdcDsx1Performance=gdcDsx1Performance)
