#
# PySNMP MIB module IPV6-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPV6-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:45:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InetAddressPrefixLength, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressIPv4")
Ipv6Address, Ipv6IfIndex, Ipv6AddressPrefix = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address", "Ipv6IfIndex", "Ipv6AddressPrefix")
switch, = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, iso, mib_2, MibIdentifier, TimeTicks, Counter64, IpAddress, Bits, Integer32, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "iso", "mib-2", "MibIdentifier", "TimeTicks", "Counter64", "IpAddress", "Bits", "Integer32", "Counter32", "Gauge32")
RowStatus, PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "PhysAddress", "TextualConvention", "DisplayString")
ipv6Tunnel = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 27))
if mibBuilder.loadTexts: ipv6Tunnel.setLastUpdated('201108310000Z')
if mibBuilder.loadTexts: ipv6Tunnel.setOrganization('QCI')
agentTunnelIPV6Group = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1))
agentTunnelIPV6Table = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1), )
if mibBuilder.loadTexts: agentTunnelIPV6Table.setStatus('current')
agentTunnelIPV6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1), ).setIndexNames((0, "IPV6-TUNNEL-MIB", "agentTunnelID"))
if mibBuilder.loadTexts: agentTunnelIPV6Entry.setStatus('current')
agentTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentTunnelID.setStatus('current')
agentTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTunnelIfIndex.setStatus('current')
agentTunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("ip6over4", 2), ("ip6to4", 3))).clone('undefined')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTunnelMode.setStatus('current')
agentTunnelLocalIP4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 4), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTunnelLocalIP4Addr.setStatus('current')
agentTunnelRemoteIP4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 5), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTunnelRemoteIP4Addr.setStatus('current')
agentTunnelLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTunnelLocalIfIndex.setStatus('current')
agentTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTunnelStatus.setStatus('current')
agentTunnelIcmpUnreachableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTunnelIcmpUnreachableMode.setStatus('current')
agentTunnelIPV6PrefixTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 2), )
if mibBuilder.loadTexts: agentTunnelIPV6PrefixTable.setStatus('current')
agentTunnelIPV6PrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 2, 1), ).setIndexNames((0, "IPV6-TUNNEL-MIB", "agentTunnelID"), (0, "IPV6-TUNNEL-MIB", "agentTunnelIPV6PrefixPrefix"), (0, "IPV6-TUNNEL-MIB", "agentTunnelIPV6PrefixPrefixLen"))
if mibBuilder.loadTexts: agentTunnelIPV6PrefixEntry.setStatus('current')
agentTunnelIPV6PrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 2, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentTunnelIPV6PrefixPrefix.setStatus('current')
agentTunnelIPV6PrefixPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 2, 1, 2), InetAddressPrefixLength())
if mibBuilder.loadTexts: agentTunnelIPV6PrefixPrefixLen.setStatus('current')
agentTunnelIPV6PrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 27, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTunnelIPV6PrefixStatus.setStatus('current')
mibBuilder.exportSymbols("IPV6-TUNNEL-MIB", agentTunnelIPV6PrefixStatus=agentTunnelIPV6PrefixStatus, agentTunnelIPV6PrefixEntry=agentTunnelIPV6PrefixEntry, PYSNMP_MODULE_ID=ipv6Tunnel, agentTunnelID=agentTunnelID, ipv6Tunnel=ipv6Tunnel, agentTunnelIfIndex=agentTunnelIfIndex, agentTunnelIPV6PrefixTable=agentTunnelIPV6PrefixTable, agentTunnelIPV6PrefixPrefix=agentTunnelIPV6PrefixPrefix, agentTunnelRemoteIP4Addr=agentTunnelRemoteIP4Addr, agentTunnelMode=agentTunnelMode, agentTunnelIPV6Entry=agentTunnelIPV6Entry, agentTunnelLocalIfIndex=agentTunnelLocalIfIndex, agentTunnelIcmpUnreachableMode=agentTunnelIcmpUnreachableMode, agentTunnelIPV6PrefixPrefixLen=agentTunnelIPV6PrefixPrefixLen, agentTunnelLocalIP4Addr=agentTunnelLocalIP4Addr, agentTunnelStatus=agentTunnelStatus, agentTunnelIPV6Group=agentTunnelIPV6Group, agentTunnelIPV6Table=agentTunnelIPV6Table)
