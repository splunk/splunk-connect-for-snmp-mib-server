#
# PySNMP MIB module FOUNDRY-SN-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:24:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
snIp, snPim, snLoopbackIf, snRip, snGblRt, snFsrp, snDvmrp, snVrrp = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snIp", "snPim", "snLoopbackIf", "snRip", "snGblRt", "snFsrp", "snDvmrp", "snVrrp")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, ObjectIdentity, Gauge32, TimeTicks, Counter64, iso, ModuleIdentity, Unsigned32, MibIdentifier, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "ObjectIdentity", "Gauge32", "TimeTicks", "Counter64", "iso", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class RtrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class ClearStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normal", 0), ("clear", 1))

class RowSts(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4))

class PortIndex(Integer32):
    pass

class Action(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("deny", 0), ("permit", 1))

class PhysAddress(OctetString):
    pass

class Metric(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PortMask(Integer32):
    pass

snGblRtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 8, 1))
snGblRtRouteOnly = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 8, 1, 1), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snGblRtRouteOnly.setStatus('mandatory')
snRtIpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1))
snRtClearArpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 1), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearArpCache.setStatus('mandatory')
snRtClearIpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 2), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearIpCache.setStatus('mandatory')
snRtClearIpRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 3), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearIpRoute.setStatus('mandatory')
snRtBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtBootpServer.setStatus('deprecated')
snRtBootpRelayMax = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtBootpRelayMax.setStatus('mandatory')
snRtArpAge = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtArpAge.setStatus('mandatory')
snRtIpIrdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 7), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpIrdpEnable.setStatus('mandatory')
snRtIpLoadShare = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 8), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpLoadShare.setStatus('mandatory')
snRtIpProxyArp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 9), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpProxyArp.setStatus('mandatory')
snRtIpRarp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 10), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarp.setStatus('mandatory')
snRtIpTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTtl.setStatus('mandatory')
snRtIpSetAllPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpSetAllPortConfig.setStatus('mandatory')
snRtIpFwdCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheMaxEntries.setStatus('mandatory')
snRtIpFwdCacheCurEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheCurEntries.setStatus('mandatory')
snRtIpMaxStaticRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpMaxStaticRouteEntries.setStatus('mandatory')
snRtIpDirBcastFwd = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 16), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpDirBcastFwd.setStatus('mandatory')
snRtIpLoadShareNumOfPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpLoadShareNumOfPaths.setStatus('mandatory')
snRtIpLoadShareMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpLoadShareMaxPaths.setStatus('mandatory')
snRtIpLoadShareMinPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpLoadShareMinPaths.setStatus('mandatory')
snRtIpProtocolRouterId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpProtocolRouterId.setStatus('mandatory')
snRtIpSourceRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 21), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpSourceRoute.setStatus('mandatory')
snRtIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2), )
if mibBuilder.loadTexts: snRtIpStaticRouteTable.setStatus('mandatory')
snRtIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpStaticRouteIndex"))
if mibBuilder.loadTexts: snRtIpStaticRouteEntry.setStatus('mandatory')
snRtIpStaticRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpStaticRouteIndex.setStatus('mandatory')
snRtIpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteDest.setStatus('mandatory')
snRtIpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteMask.setStatus('mandatory')
snRtIpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteNextHop.setStatus('mandatory')
snRtIpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteMetric.setStatus('mandatory')
snRtIpStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 6), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteRowStatus.setStatus('mandatory')
snRtIpStaticRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteDistance.setStatus('mandatory')
snRtIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3), )
if mibBuilder.loadTexts: snRtIpFilterTable.setStatus('mandatory')
snRtIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpFilterIndex"))
if mibBuilder.loadTexts: snRtIpFilterEntry.setStatus('mandatory')
snRtIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFilterIndex.setStatus('mandatory')
snRtIpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1), ("qosEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterAction.setStatus('mandatory')
snRtIpFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterProtocol.setStatus('mandatory')
snRtIpFilterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterSourceIp.setStatus('mandatory')
snRtIpFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterSourceMask.setStatus('mandatory')
snRtIpFilterDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterDestIp.setStatus('mandatory')
snRtIpFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterDestMask.setStatus('mandatory')
snRtIpFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("greater", 1), ("equal", 2), ("less", 3), ("notEqual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterOperator.setStatus('mandatory')
snRtIpFilterOperand = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterOperand.setStatus('mandatory')
snRtIpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 10), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterRowStatus.setStatus('mandatory')
snRtIpFilterEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 11), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterEstablished.setStatus('mandatory')
snRtIpFilterQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterQosPriority.setStatus('mandatory')
snRtIpRarpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4), )
if mibBuilder.loadTexts: snRtIpRarpTable.setStatus('mandatory')
snRtIpRarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRarpIndex"))
if mibBuilder.loadTexts: snRtIpRarpEntry.setStatus('mandatory')
snRtIpRarpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRarpIndex.setStatus('mandatory')
snRtIpRarpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarpMac.setStatus('mandatory')
snRtIpRarpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarpIp.setStatus('mandatory')
snRtIpRarpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarpRowStatus.setStatus('mandatory')
snRtStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5), )
if mibBuilder.loadTexts: snRtStaticArpTable.setStatus('mandatory')
snRtStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtStaticArpIndex"))
if mibBuilder.loadTexts: snRtStaticArpEntry.setStatus('mandatory')
snRtStaticArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtStaticArpIndex.setStatus('mandatory')
snRtStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpIp.setStatus('mandatory')
snRtStaticArpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpMac.setStatus('mandatory')
snRtStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 4), PortIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpPort.setStatus('mandatory')
snRtStaticArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpRowStatus.setStatus('mandatory')
snRtIpPortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6), )
if mibBuilder.loadTexts: snRtIpPortAddrTable.setStatus('deprecated')
snRtIpPortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAddrPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAddress"))
if mibBuilder.loadTexts: snRtIpPortAddrEntry.setStatus('deprecated')
snRtIpPortAddrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAddrPortIndex.setStatus('deprecated')
snRtIpPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAddress.setStatus('deprecated')
snRtIpPortSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortSubnetMask.setStatus('deprecated')
snRtIpPortAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortAddrType.setStatus('deprecated')
snRtIpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortRowStatus.setStatus('deprecated')
snRtIpPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7), )
if mibBuilder.loadTexts: snRtIpPortAccessTable.setStatus('deprecated')
snRtIpPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAccessPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAccessDirection"))
if mibBuilder.loadTexts: snRtIpPortAccessEntry.setStatus('deprecated')
snRtIpPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAccessPortIndex.setStatus('deprecated')
snRtIpPortAccessDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAccessDirection.setStatus('deprecated')
snRtIpPortAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortAccessFilters.setStatus('deprecated')
snRtIpPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortAccessRowStatus.setStatus('deprecated')
snRtIpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8), )
if mibBuilder.loadTexts: snRtIpPortConfigTable.setStatus('deprecated')
snRtIpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortConfigPortIndex"))
if mibBuilder.loadTexts: snRtIpPortConfigEntry.setStatus('deprecated')
snRtIpPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortConfigPortIndex.setStatus('deprecated')
snRtIpPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 4470))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortMtu.setStatus('deprecated')
snRtIpPortEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2), ("hdlc", 3), ("ppp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortEncap.setStatus('deprecated')
snRtIpPortMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortMetric.setStatus('deprecated')
snRtIpPortDirBcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 5), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortDirBcastFwd.setStatus('deprecated')
snRtIpPortIfAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18), )
if mibBuilder.loadTexts: snRtIpPortIfAddrTable.setStatus('mandatory')
snRtIpPortIfAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAddrInterfaceIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAddress"))
if mibBuilder.loadTexts: snRtIpPortIfAddrEntry.setStatus('mandatory')
snRtIpPortIfAddrInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAddrInterfaceIndex.setStatus('mandatory')
snRtIpPortIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAddress.setStatus('mandatory')
snRtIpPortIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfSubnetMask.setStatus('mandatory')
snRtIpPortIfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfAddrType.setStatus('mandatory')
snRtIpPortIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfRowStatus.setStatus('mandatory')
snRtIpPortIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19), )
if mibBuilder.loadTexts: snRtIpPortIfAccessTable.setStatus('mandatory')
snRtIpPortIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAccessInterfaceIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAccessDirection"))
if mibBuilder.loadTexts: snRtIpPortIfAccessEntry.setStatus('mandatory')
snRtIpPortIfAccessInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAccessInterfaceIndex.setStatus('mandatory')
snRtIpPortIfAccessDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAccessDirection.setStatus('mandatory')
snRtIpPortIfAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfAccessFilters.setStatus('mandatory')
snRtIpPortIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfAccessRowStatus.setStatus('mandatory')
snRtIpPortIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20), )
if mibBuilder.loadTexts: snRtIpPortIfConfigTable.setStatus('mandatory')
snRtIpPortIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfConfigInterfaceIndex"))
if mibBuilder.loadTexts: snRtIpPortIfConfigEntry.setStatus('mandatory')
snRtIpPortIfConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfConfigInterfaceIndex.setStatus('mandatory')
snRtIpPortIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfMtu.setStatus('mandatory')
snRtIpPortIfEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2), ("hdlc", 3), ("ppp", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfEncap.setStatus('mandatory')
snRtIpPortIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfMetric.setStatus('mandatory')
snRtIpPortIfDirBcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 5), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfDirBcastFwd.setStatus('mandatory')
snRtBcastFwd = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9))
snRtBcastFwdGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 1))
snRtUdpBcastFwdPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2))
snRtUdpHelper = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3))
snRtUdpBcastFwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 1, 1), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpBcastFwdEnable.setStatus('mandatory')
snRtUdpBcastFwdPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1), )
if mibBuilder.loadTexts: snRtUdpBcastFwdPortTable.setStatus('mandatory')
snRtUdpBcastFwdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpBcastFwdPortIndex"))
if mibBuilder.loadTexts: snRtUdpBcastFwdPortEntry.setStatus('mandatory')
snRtUdpBcastFwdPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtUdpBcastFwdPortIndex.setStatus('mandatory')
snRtUdpBcastFwdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpBcastFwdPortNumber.setStatus('mandatory')
snRtUdpBcastFwdPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 3), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpBcastFwdPortRowStatus.setStatus('mandatory')
snRtUdpHelperTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1), )
if mibBuilder.loadTexts: snRtUdpHelperTable.setStatus('mandatory')
snRtUdpHelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpHelperPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtUdpHelperIndex"))
if mibBuilder.loadTexts: snRtUdpHelperEntry.setStatus('mandatory')
snRtUdpHelperPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtUdpHelperPortIndex.setStatus('mandatory')
snRtUdpHelperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtUdpHelperIndex.setStatus('mandatory')
snRtUdpHelperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpHelperAddr.setStatus('mandatory')
snRtUdpHelperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpHelperRowStatus.setStatus('mandatory')
snRtIpTraceRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10))
snRtIpTraceRouteGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1))
snRtIpTraceRouteResult = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2))
snRtIpTraceRouteTargetAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteTargetAddr.setStatus('mandatory')
snRtIpTraceRouteMinTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteMinTtl.setStatus('mandatory')
snRtIpTraceRouteMaxTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteMaxTtl.setStatus('mandatory')
snRtIpTraceRouteTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteTimeOut.setStatus('mandatory')
snRtIpTraceRouteControl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("start", 1), ("abort", 2), ("success", 3), ("failure", 4), ("inProgress", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteControl.setStatus('mandatory')
snRtIpTraceRouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1), )
if mibBuilder.loadTexts: snRtIpTraceRouteResultTable.setStatus('mandatory')
snRtIpTraceRouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpTraceRouteResultIndex"))
if mibBuilder.loadTexts: snRtIpTraceRouteResultEntry.setStatus('mandatory')
snRtIpTraceRouteResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultIndex.setStatus('mandatory')
snRtIpTraceRouteResultAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultAddr.setStatus('mandatory')
snRtIpTraceRouteResultRoundTripTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime1.setStatus('mandatory')
snRtIpTraceRouteResultRoundTripTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime2.setStatus('mandatory')
snRtIpFwdCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11), )
if mibBuilder.loadTexts: snRtIpFwdCacheTable.setStatus('mandatory')
snRtIpFwdCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpFwdCacheIndex"))
if mibBuilder.loadTexts: snRtIpFwdCacheEntry.setStatus('mandatory')
snRtIpFwdCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheIndex.setStatus('mandatory')
snRtIpFwdCacheIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheIp.setStatus('mandatory')
snRtIpFwdCacheMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheMac.setStatus('mandatory')
snRtIpFwdCacheNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheNextHopIp.setStatus('mandatory')
snRtIpFwdCacheOutgoingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheOutgoingPort.setStatus('mandatory')
snRtIpFwdCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheType.setStatus('mandatory')
snRtIpFwdCacheAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("forward", 2), ("forUs", 3), ("waitForArp", 4), ("complexFilter", 5), ("icmpDeny", 6), ("dropPacket", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheAction.setStatus('mandatory')
snRtIpFwdCacheFragCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheFragCheck.setStatus('mandatory')
snRtIpFwdCacheSnapHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheSnapHdr.setStatus('mandatory')
snRtIpFwdCacheVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheVLanId.setStatus('mandatory')
snIpAsPathAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12), )
if mibBuilder.loadTexts: snIpAsPathAccessListTable.setStatus('mandatory')
snIpAsPathAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListIndex"), (0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListSequence"))
if mibBuilder.loadTexts: snIpAsPathAccessListEntry.setStatus('mandatory')
snIpAsPathAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListIndex.setStatus('mandatory')
snIpAsPathAccessListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListSequence.setStatus('mandatory')
snIpAsPathAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListAction.setStatus('mandatory')
snIpAsPathAccessListRegExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListRegExpression.setStatus('mandatory')
snIpAsPathAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListRowStatus.setStatus('mandatory')
snIpCommunityListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13), )
if mibBuilder.loadTexts: snIpCommunityListTable.setStatus('mandatory')
snIpCommunityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListIndex"), (0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListSequence"))
if mibBuilder.loadTexts: snIpCommunityListEntry.setStatus('mandatory')
snIpCommunityListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListIndex.setStatus('mandatory')
snIpCommunityListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListSequence.setStatus('mandatory')
snIpCommunityListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListAction.setStatus('mandatory')
snIpCommunityListCommNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListCommNum.setStatus('mandatory')
snIpCommunityListInternet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListInternet.setStatus('mandatory')
snIpCommunityListNoAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListNoAdvertise.setStatus('mandatory')
snIpCommunityListNoExport = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListNoExport.setStatus('mandatory')
snIpCommunityListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListRowStatus.setStatus('mandatory')
snIpCommunityListLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListLocalAs.setStatus('mandatory')
snIpPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14), )
if mibBuilder.loadTexts: snIpPrefixListTable.setStatus('mandatory')
snIpPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpPrefixListName"), (0, "FOUNDRY-SN-IP-MIB", "snIpPrefixListSequence"))
if mibBuilder.loadTexts: snIpPrefixListEntry.setStatus('mandatory')
snIpPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpPrefixListName.setStatus('mandatory')
snIpPrefixListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpPrefixListSequence.setStatus('mandatory')
snIpPrefixListDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListDesc.setStatus('mandatory')
snIpPrefixListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListAction.setStatus('mandatory')
snIpPrefixListAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListAddr.setStatus('mandatory')
snIpPrefixListMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListMask.setStatus('mandatory')
snIpPrefixListGeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListGeValue.setStatus('mandatory')
snIpPrefixListLeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListLeValue.setStatus('mandatory')
snIpPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListRowStatus.setStatus('mandatory')
snIpAsPathAccessListStringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16), )
if mibBuilder.loadTexts: snIpAsPathAccessListStringTable.setStatus('mandatory')
snIpAsPathAccessListStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListStringName"), (0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListStringSequence"))
if mibBuilder.loadTexts: snIpAsPathAccessListStringEntry.setStatus('mandatory')
snIpAsPathAccessListStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListStringName.setStatus('mandatory')
snIpAsPathAccessListStringSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListStringSequence.setStatus('mandatory')
snIpAsPathAccessListStringAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListStringAction.setStatus('mandatory')
snIpAsPathAccessListStringRegExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListStringRegExpression.setStatus('mandatory')
snIpAsPathAccessListStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListStringRowStatus.setStatus('mandatory')
snIpCommunityListStringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17), )
if mibBuilder.loadTexts: snIpCommunityListStringTable.setStatus('mandatory')
snIpCommunityListStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListStringName"), (0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListStringSequence"))
if mibBuilder.loadTexts: snIpCommunityListStringEntry.setStatus('mandatory')
snIpCommunityListStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListStringName.setStatus('mandatory')
snIpCommunityListStringSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListStringSequence.setStatus('mandatory')
snIpCommunityListStringAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringAction.setStatus('mandatory')
snIpCommunityListStringCommNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringCommNum.setStatus('mandatory')
snIpCommunityListStringInternet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringInternet.setStatus('mandatory')
snIpCommunityListStringNoAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringNoAdvertise.setStatus('mandatory')
snIpCommunityListStringNoExport = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringNoExport.setStatus('mandatory')
snIpCommunityListStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringRowStatus.setStatus('mandatory')
snIpCommunityListStringLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringLocalAs.setStatus('mandatory')
snRtIpRipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1))
snRtIpRipEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 1), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipEnable.setStatus('mandatory')
snRtIpRipUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21845))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipUpdateTime.setStatus('mandatory')
snRtIpRipRedisEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisEnable.setStatus('mandatory')
snRtIpRipRedisDefMetric = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisDefMetric.setStatus('mandatory')
snRtIpRipSetAllPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipSetAllPortConfig.setStatus('mandatory')
snRtIpRipGblFiltList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipGblFiltList.setStatus('mandatory')
snRtIpRipFiltOnAllPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("valid", 1), ("deleteAllInBound", 2), ("deleteAllOutBound", 3), ("addAllInBound", 4), ("addAllOutBound", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipFiltOnAllPort.setStatus('mandatory')
snRtIpRipDistance = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipDistance.setStatus('mandatory')
snRtIpRipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2), )
if mibBuilder.loadTexts: snRtIpRipPortConfigTable.setStatus('deprecated')
snRtIpRipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortConfigPortIndex"))
if mibBuilder.loadTexts: snRtIpRipPortConfigEntry.setStatus('deprecated')
snRtIpRipPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortConfigPortIndex.setStatus('deprecated')
snRtIpRipPortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("v1Only", 1), ("v2Only", 2), ("v1CompatibleV2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortVersion.setStatus('deprecated')
snRtIpRipPortPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortPoisonReverse.setStatus('deprecated')
snRtIpRipPortLearnDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortLearnDefault.setStatus('deprecated')
snRtIpRipRedisTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3), )
if mibBuilder.loadTexts: snRtIpRipRedisTable.setStatus('mandatory')
snRtIpRipRedisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipRedisIndex"))
if mibBuilder.loadTexts: snRtIpRipRedisEntry.setStatus('mandatory')
snRtIpRipRedisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipRedisIndex.setStatus('mandatory')
snRtIpRipRedisAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisAction.setStatus('mandatory')
snRtIpRipRedisProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("all", 2), ("static", 3), ("ospf", 4), ("bgp", 5), ("isis", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisProtocol.setStatus('mandatory')
snRtIpRipRedisIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisIp.setStatus('mandatory')
snRtIpRipRedisMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisMask.setStatus('mandatory')
snRtIpRipRedisMatchMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 6), Metric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisMatchMetric.setStatus('mandatory')
snRtIpRipRedisSetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisSetMetric.setStatus('mandatory')
snRtIpRipRedisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 8), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisRowStatus.setStatus('mandatory')
snRtIpRipRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4), )
if mibBuilder.loadTexts: snRtIpRipRouteFilterTable.setStatus('mandatory')
snRtIpRipRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipRouteFilterId"))
if mibBuilder.loadTexts: snRtIpRipRouteFilterEntry.setStatus('mandatory')
snRtIpRipRouteFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipRouteFilterId.setStatus('mandatory')
snRtIpRipRouteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterAction.setStatus('mandatory')
snRtIpRipRouteFilterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterIpAddr.setStatus('mandatory')
snRtIpRipRouteFilterSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterSubnetMask.setStatus('mandatory')
snRtIpRipRouteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterRowStatus.setStatus('mandatory')
snRtIpRipNbrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5), )
if mibBuilder.loadTexts: snRtIpRipNbrFilterTable.setStatus('mandatory')
snRtIpRipNbrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipNbrFilterId"))
if mibBuilder.loadTexts: snRtIpRipNbrFilterEntry.setStatus('mandatory')
snRtIpRipNbrFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipNbrFilterId.setStatus('mandatory')
snRtIpRipNbrFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipNbrFilterAction.setStatus('mandatory')
snRtIpRipNbrFilterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipNbrFilterSourceIp.setStatus('mandatory')
snRtIpRipNbrFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipNbrFilterRowStatus.setStatus('mandatory')
snRtIpRipPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6), )
if mibBuilder.loadTexts: snRtIpRipPortAccessTable.setStatus('deprecated')
snRtIpRipPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortAccessPort"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortAccessDir"))
if mibBuilder.loadTexts: snRtIpRipPortAccessEntry.setStatus('deprecated')
snRtIpRipPortAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortAccessPort.setStatus('deprecated')
snRtIpRipPortAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortAccessDir.setStatus('deprecated')
snRtIpRipPortAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortAccessFilterList.setStatus('deprecated')
snRtIpRipPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortAccessRowStatus.setStatus('deprecated')
snRtIpRipPortIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7), )
if mibBuilder.loadTexts: snRtIpRipPortIfConfigTable.setStatus('mandatory')
snRtIpRipPortIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfConfigInterfaceIndex"))
if mibBuilder.loadTexts: snRtIpRipPortIfConfigEntry.setStatus('mandatory')
snRtIpRipPortIfConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortIfConfigInterfaceIndex.setStatus('mandatory')
snRtIpRipPortIfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("v1Only", 1), ("v2Only", 2), ("v1CompatibleV2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfVersion.setStatus('mandatory')
snRtIpRipPortIfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfPoisonReverse.setStatus('mandatory')
snRtIpRipPortIfLearnDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfLearnDefault.setStatus('mandatory')
snRtIpRipPortIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8), )
if mibBuilder.loadTexts: snRtIpRipPortIfAccessTable.setStatus('mandatory')
snRtIpRipPortIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfAccessPort"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfAccessDir"))
if mibBuilder.loadTexts: snRtIpRipPortIfAccessEntry.setStatus('mandatory')
snRtIpRipPortIfAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessPort.setStatus('mandatory')
snRtIpRipPortIfAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessDir.setStatus('mandatory')
snRtIpRipPortIfAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessFilterList.setStatus('mandatory')
snRtIpRipPortIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessRowStatus.setStatus('mandatory')
snDvmrpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1))
snDvmrpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVersion.setStatus('mandatory')
snDvmrpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 2), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpEnable.setStatus('mandatory')
snDvmrpGenerationId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpGenerationId.setStatus('mandatory')
snDvmrpProbeInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpProbeInterval.setStatus('mandatory')
snDvmrpReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpReportInterval.setStatus('mandatory')
snDvmrpTriggerInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpTriggerInterval.setStatus('mandatory')
snDvmrpNeighborRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpNeighborRouterTimeout.setStatus('mandatory')
snDvmrpRouteExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 4000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpRouteExpireTime.setStatus('mandatory')
snDvmrpRouteDiscardTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 8000)).clone(340)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpRouteDiscardTime.setStatus('mandatory')
snDvmrpPruneAge = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpPruneAge.setStatus('mandatory')
snDvmrpGraftRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpGraftRetransmitTime.setStatus('mandatory')
snDvmrpDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpDefaultRoute.setStatus('mandatory')
snDvmrpVInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13), )
if mibBuilder.loadTexts: snDvmrpVInterfaceTable.setStatus('mandatory')
snDvmrpVInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpVInterfaceVifIndex"))
if mibBuilder.loadTexts: snDvmrpVInterfaceEntry.setStatus('mandatory')
snDvmrpVInterfaceVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVInterfaceVifIndex.setStatus('mandatory')
snDvmrpVInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tunnel", 1), ("querier", 2), ("subnet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceType.setStatus('mandatory')
snDvmrpVInterfaceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVInterfaceOperState.setStatus('mandatory')
snDvmrpVInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceLocalAddress.setStatus('mandatory')
snDvmrpVInterfaceRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceRemoteAddress.setStatus('mandatory')
snDvmrpVInterfaceRemoteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVInterfaceRemoteSubnetMask.setStatus('mandatory')
snDvmrpVInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceMetric.setStatus('mandatory')
snDvmrpVInterfaceTtlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceTtlThreshold.setStatus('mandatory')
snDvmrpVInterfaceAdvertiseLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 9), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceAdvertiseLocal.setStatus('mandatory')
snDvmrpVInterfaceEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 10), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceEncapsulation.setStatus('mandatory')
snDvmrpVInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceStatus.setStatus('mandatory')
snDvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14), )
if mibBuilder.loadTexts: snDvmrpNeighborTable.setStatus('mandatory')
snDvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpNeighborEntryIndex"))
if mibBuilder.loadTexts: snDvmrpNeighborEntry.setStatus('mandatory')
snDvmrpNeighborEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborEntryIndex.setStatus('mandatory')
snDvmrpNeighborVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborVifIndex.setStatus('mandatory')
snDvmrpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborAddress.setStatus('mandatory')
snDvmrpNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborUpTime.setStatus('mandatory')
snDvmrpNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborExpiryTime.setStatus('mandatory')
snDvmrpNeighborGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborGenerationId.setStatus('mandatory')
snDvmrpNeighborMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborMajorVersion.setStatus('mandatory')
snDvmrpNeighborMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborMinorVersion.setStatus('mandatory')
snDvmrpNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborCapabilities.setStatus('mandatory')
snDvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15), )
if mibBuilder.loadTexts: snDvmrpRouteTable.setStatus('mandatory')
snDvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteEntryIndex"))
if mibBuilder.loadTexts: snDvmrpRouteEntry.setStatus('mandatory')
snDvmrpRouteEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteEntryIndex.setStatus('mandatory')
snDvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteSource.setStatus('mandatory')
snDvmrpRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteSourceMask.setStatus('mandatory')
snDvmrpRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteUpstreamNeighbor.setStatus('mandatory')
snDvmrpRouteVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteVifIndex.setStatus('mandatory')
snDvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteMetric.setStatus('mandatory')
snDvmrpRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteExpiryTime.setStatus('mandatory')
snDvmrpRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16), )
if mibBuilder.loadTexts: snDvmrpRouteNextHopTable.setStatus('mandatory')
snDvmrpRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopSource"), (0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopSourceMask"), (0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopVifIndex"))
if mibBuilder.loadTexts: snDvmrpRouteNextHopEntry.setStatus('mandatory')
snDvmrpRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopSource.setStatus('mandatory')
snDvmrpRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopSourceMask.setStatus('mandatory')
snDvmrpRouteNextHopVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopVifIndex.setStatus('mandatory')
snDvmrpRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leaf", 1), ("branch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopType.setStatus('mandatory')
snDvmrpVIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17), )
if mibBuilder.loadTexts: snDvmrpVIfStatTable.setStatus('mandatory')
snDvmrpVIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpVIfStatVifIndex"))
if mibBuilder.loadTexts: snDvmrpVIfStatEntry.setStatus('mandatory')
snDvmrpVIfStatVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatVifIndex.setStatus('mandatory')
snDvmrpVIfStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInPkts.setStatus('mandatory')
snDvmrpVIfStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutPkts.setStatus('mandatory')
snDvmrpVIfStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInOctets.setStatus('mandatory')
snDvmrpVIfStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutOctets.setStatus('mandatory')
snDvmrpVIfStatInProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInProbePkts.setStatus('mandatory')
snDvmrpVIfStatOutProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutProbePkts.setStatus('mandatory')
snDvmrpVIfStatDiscardProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardProbePkts.setStatus('mandatory')
snDvmrpVIfStatInRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInRtUpdatePkts.setStatus('mandatory')
snDvmrpVIfStatOutRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutRtUpdatePkts.setStatus('mandatory')
snDvmrpVIfStatDiscardRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardRtUpdatePkts.setStatus('mandatory')
snDvmrpVIfStatInGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInGraftPkts.setStatus('mandatory')
snDvmrpVIfStatOutGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutGraftPkts.setStatus('mandatory')
snDvmrpVIfStatDiscardGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardGraftPkts.setStatus('mandatory')
snDvmrpVIfStatInGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInGraftAckPkts.setStatus('mandatory')
snDvmrpVIfStatOutGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutGraftAckPkts.setStatus('mandatory')
snDvmrpVIfStatDiscardGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardGraftAckPkts.setStatus('mandatory')
snDvmrpVIfStatInPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInPrunePkts.setStatus('mandatory')
snDvmrpVIfStatOutPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutPrunePkts.setStatus('mandatory')
snDvmrpVIfStatDiscardPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardPrunePkts.setStatus('mandatory')
snFsrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1))
snFsrpIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2))
snFsrpGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpGroupOperMode.setStatus('mandatory')
snFsrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfStateChangeTrap.setStatus('mandatory')
snFsrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1), )
if mibBuilder.loadTexts: snFsrpIfTable.setStatus('mandatory')
snFsrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snFsrpIfPort"), (0, "FOUNDRY-SN-IP-MIB", "snFsrpIfIpAddress"))
if mibBuilder.loadTexts: snFsrpIfEntry.setStatus('mandatory')
snFsrpIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFsrpIfPort.setStatus('mandatory')
snFsrpIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFsrpIfIpAddress.setStatus('mandatory')
snFsrpIfVirRtrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfVirRtrIpAddr.setStatus('mandatory')
snFsrpIfOtherRtrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfOtherRtrIpAddr.setStatus('mandatory')
snFsrpIfPreferLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfPreferLevel.setStatus('mandatory')
snFsrpIfTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfTrackPortMask.setStatus('deprecated')
snFsrpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfRowStatus.setStatus('mandatory')
snFsrpIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("negotiating", 1), ("standby", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFsrpIfState.setStatus('mandatory')
snFsrpIfKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfKeepAliveTime.setStatus('mandatory')
snFsrpIfRouterDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfRouterDeadTime.setStatus('mandatory')
snFsrpIfChassisTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfChassisTrackPortMask.setStatus('deprecated')
snFsrpIfTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfTrackPortList.setStatus('mandatory')
snPimMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1))
snPimSMMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2))
snPimEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 1), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimEnable.setStatus('mandatory')
snPimNeighborRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimNeighborRouterTimeout.setStatus('mandatory')
snPimHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimHelloTime.setStatus('mandatory')
snPimPruneTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimPruneTime.setStatus('mandatory')
snPimGraftRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimGraftRetransmitTime.setStatus('mandatory')
snPimInactivityTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimInactivityTime.setStatus('mandatory')
snPimVInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7), )
if mibBuilder.loadTexts: snPimVInterfaceTable.setStatus('mandatory')
snPimVInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimVInterfaceVifIndex"))
if mibBuilder.loadTexts: snPimVInterfaceEntry.setStatus('mandatory')
snPimVInterfaceVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVInterfaceVifIndex.setStatus('mandatory')
snPimVInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("subnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceType.setStatus('mandatory')
snPimVInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceLocalAddress.setStatus('mandatory')
snPimVInterfaceLocalSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVInterfaceLocalSubnetMask.setStatus('mandatory')
snPimVInterfaceRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceRemoteAddress.setStatus('mandatory')
snPimVInterfaceDR = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVInterfaceDR.setStatus('mandatory')
snPimVInterfaceTtlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceTtlThreshold.setStatus('mandatory')
snPimVInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceStatus.setStatus('mandatory')
snPimVInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2))).clone('dense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceMode.setStatus('mandatory')
snPimNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8), )
if mibBuilder.loadTexts: snPimNeighborTable.setStatus('mandatory')
snPimNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimNeighborEntryIndex"))
if mibBuilder.loadTexts: snPimNeighborEntry.setStatus('mandatory')
snPimNeighborEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborEntryIndex.setStatus('mandatory')
snPimNeighborVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborVifIndex.setStatus('mandatory')
snPimNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborAddress.setStatus('mandatory')
snPimNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborUpTime.setStatus('mandatory')
snPimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborExpiryTime.setStatus('mandatory')
snPimVIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9), )
if mibBuilder.loadTexts: snPimVIfStatTable.setStatus('mandatory')
snPimVIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimVIfStatVifIndex"))
if mibBuilder.loadTexts: snPimVIfStatEntry.setStatus('mandatory')
snPimVIfStatVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatVifIndex.setStatus('mandatory')
snPimVIfStatInJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInJoinPkts.setStatus('mandatory')
snPimVIfStatOutJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutJoinPkts.setStatus('mandatory')
snPimVIfStatDiscardJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardJoinPkts.setStatus('mandatory')
snPimVIfStatInPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInPrunePkts.setStatus('mandatory')
snPimVIfStatOutPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutPrunePkts.setStatus('mandatory')
snPimVIfStatDiscardPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardPrunePkts.setStatus('mandatory')
snPimVIfStatInAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInAssertPkts.setStatus('mandatory')
snPimVIfStatOutAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutAssertPkts.setStatus('mandatory')
snPimVIfStatDiscardAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardAssertPkts.setStatus('mandatory')
snPimVIfStatInHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInHelloPkts.setStatus('mandatory')
snPimVIfStatOutHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutHelloPkts.setStatus('mandatory')
snPimVIfStatDiscardHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardHelloPkts.setStatus('mandatory')
snPimVIfStatInGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInGraftPkts.setStatus('mandatory')
snPimVIfStatOutGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutGraftPkts.setStatus('mandatory')
snPimVIfStatDiscardGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardGraftPkts.setStatus('mandatory')
snPimVIfStatInGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInGraftAckPkts.setStatus('mandatory')
snPimVIfStatOutGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutGraftAckPkts.setStatus('mandatory')
snPimVIfStatDiscardGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardGraftAckPkts.setStatus('mandatory')
snPimJoinPruneInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimJoinPruneInterval.setStatus('mandatory')
snPimCandidateBSRTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2), )
if mibBuilder.loadTexts: snPimCandidateBSRTable.setStatus('mandatory')
snPimCandidateBSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimCandidateBSRPortID"))
if mibBuilder.loadTexts: snPimCandidateBSREntry.setStatus('mandatory')
snPimCandidateBSRPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateBSRPortID.setStatus('mandatory')
snPimCandidateBSRIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimCandidateBSRIPAddress.setStatus('mandatory')
snPimCandidateBSRHashMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateBSRHashMaskLen.setStatus('mandatory')
snPimCandidateBSRPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateBSRPreference.setStatus('mandatory')
snPimRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3), )
if mibBuilder.loadTexts: snPimRPSetTable.setStatus('mandatory')
snPimRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimRPSetGroupAddress"), (0, "FOUNDRY-SN-IP-MIB", "snPimRPSetMask"), (0, "FOUNDRY-SN-IP-MIB", "snPimRPSetIPAddress"))
if mibBuilder.loadTexts: snPimRPSetEntry.setStatus('mandatory')
snPimRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetGroupAddress.setStatus('mandatory')
snPimRPSetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetMask.setStatus('mandatory')
snPimRPSetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetIPAddress.setStatus('mandatory')
snPimRPSetHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetHoldTime.setStatus('mandatory')
snPimCandidateRPTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4), )
if mibBuilder.loadTexts: snPimCandidateRPTable.setStatus('mandatory')
snPimCandidateRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimCandidateRPGroupAddress"), (0, "FOUNDRY-SN-IP-MIB", "snPimCandidateRPMask"))
if mibBuilder.loadTexts: snPimCandidateRPEntry.setStatus('mandatory')
snPimCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimCandidateRPGroupAddress.setStatus('mandatory')
snPimCandidateRPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimCandidateRPMask.setStatus('mandatory')
snPimCandidateRPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateRPIPAddress.setStatus('mandatory')
snPimCandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSuch", 0), ("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateRPRowStatus.setStatus('mandatory')
snVrrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1))
snVrrpIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2))
snVrrpVirRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3))
snVrrpGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpGroupOperMode.setStatus('mandatory')
snVrrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfStateChangeTrap.setStatus('mandatory')
snVrrpIfMaxNumVridPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerIntf.setStatus('mandatory')
snVrrpIfMaxNumVridPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerSystem.setStatus('mandatory')
snVrrpClearVrrpStat = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpClearVrrpStat.setStatus('mandatory')
snVrrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1), )
if mibBuilder.loadTexts: snVrrpIfTable.setStatus('mandatory')
snVrrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snVrrpIfPort"))
if mibBuilder.loadTexts: snVrrpIfEntry.setStatus('mandatory')
snVrrpIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfPort.setStatus('mandatory')
snVrrpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthType.setStatus('mandatory')
snVrrpIfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthPassword.setStatus('mandatory')
snVrrpIfRxHeaderErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxHeaderErrCnts.setStatus('mandatory')
snVrrpIfRxAuthTypeErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthTypeErrCnts.setStatus('mandatory')
snVrrpIfRxAuthPwdMismatchErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthPwdMismatchErrCnts.setStatus('mandatory')
snVrrpIfRxVridErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxVridErrCnts.setStatus('mandatory')
snVrrpVirRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1), )
if mibBuilder.loadTexts: snVrrpVirRtrTable.setStatus('mandatory')
snVrrpVirRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snVrrpVirRtrPort"), (0, "FOUNDRY-SN-IP-MIB", "snVrrpVirRtrId"))
if mibBuilder.loadTexts: snVrrpVirRtrEntry.setStatus('mandatory')
snVrrpVirRtrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrPort.setStatus('mandatory')
snVrrpVirRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrId.setStatus('mandatory')
snVrrpVirRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrOwnership.setStatus('mandatory')
snVrrpVirRtrCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrCfgPriority.setStatus('mandatory')
snVrrpVirRtrTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPriority.setStatus('mandatory')
snVrrpVirRtrCurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrPriority.setStatus('mandatory')
snVrrpVirRtrHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrHelloInt.setStatus('mandatory')
snVrrpVirRtrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrDeadInt.setStatus('mandatory')
snVrrpVirRtrPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrPreemptMode.setStatus('mandatory')
snVrrpVirRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrState.setStatus('mandatory')
snVrrpVirRtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrActivate.setStatus('mandatory')
snVrrpVirRtrIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrIpAddrMask.setStatus('mandatory')
snVrrpVirRtrTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortMask.setStatus('deprecated')
snVrrpVirRtrTrackVifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifMask.setStatus('deprecated')
snVrrpVirRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrRowStatus.setStatus('mandatory')
snVrrpVirRtrRxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxArpPktDropCnts.setStatus('mandatory')
snVrrpVirRtrRxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpPktDropCnts.setStatus('mandatory')
snVrrpVirRtrRxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPortMismatchCnts.setStatus('mandatory')
snVrrpVirRtrRxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxNumOfIpMismatchCnts.setStatus('mandatory')
snVrrpVirRtrRxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpMismatchCnts.setStatus('mandatory')
snVrrpVirRtrRxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHelloIntMismatchCnts.setStatus('mandatory')
snVrrpVirRtrRxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPriorityZeroFromMasterCnts.setStatus('mandatory')
snVrrpVirRtrRxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHigherPriorityCnts.setStatus('mandatory')
snVrrpVirRtrTransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToMasterStateCnts.setStatus('mandatory')
snVrrpVirRtrTransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToBackupStateCnts.setStatus('mandatory')
snVrrpVirRtrCurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrDeadInt.setStatus('mandatory')
snVrrpVirRtrTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortList.setStatus('mandatory')
snVrrpVirRtrTrackVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifPortList.setStatus('mandatory')
snLoopbackIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1), )
if mibBuilder.loadTexts: snLoopbackIntfConfigTable.setStatus('mandatory')
snLoopbackIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snLoopbackIntfConfigPortIndex"))
if mibBuilder.loadTexts: snLoopbackIntfConfigEntry.setStatus('mandatory')
snLoopbackIntfConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLoopbackIntfConfigPortIndex.setStatus('mandatory')
snLoopbackIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLoopbackIntfMode.setStatus('mandatory')
snLoopbackIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLoopbackIntfRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("FOUNDRY-SN-IP-MIB", snDvmrpVIfStatInProbePkts=snDvmrpVIfStatInProbePkts, snRtIpRipPortAccessPort=snRtIpRipPortAccessPort, snRtStaticArpPort=snRtStaticArpPort, snRtIpTraceRouteResultAddr=snRtIpTraceRouteResultAddr, snVrrpVirRtrDeadInt=snVrrpVirRtrDeadInt, snDvmrpRouteEntry=snDvmrpRouteEntry, snFsrpIfChassisTrackPortMask=snFsrpIfChassisTrackPortMask, snVrrpIfRxVridErrCnts=snVrrpIfRxVridErrCnts, snRtIpPortMetric=snRtIpPortMetric, snLoopbackIntfRowStatus=snLoopbackIntfRowStatus, snDvmrpRouteDiscardTime=snDvmrpRouteDiscardTime, snPimCandidateRPEntry=snPimCandidateRPEntry, snRtIpFilterEstablished=snRtIpFilterEstablished, snRtIpTraceRouteResultIndex=snRtIpTraceRouteResultIndex, snRtIpRipRedisDefMetric=snRtIpRipRedisDefMetric, snIpCommunityListStringRowStatus=snIpCommunityListStringRowStatus, snIpAsPathAccessListStringRowStatus=snIpAsPathAccessListStringRowStatus, snRtIpFwdCacheType=snRtIpFwdCacheType, snPimVIfStatInPrunePkts=snPimVIfStatInPrunePkts, snVrrpVirRtrRxIpMismatchCnts=snVrrpVirRtrRxIpMismatchCnts, snPimEnable=snPimEnable, snIpPrefixListLeValue=snIpPrefixListLeValue, snVrrpVirRtrTrackVifPortList=snVrrpVirRtrTrackVifPortList, snPimVIfStatDiscardJoinPkts=snPimVIfStatDiscardJoinPkts, snPimVInterfaceLocalSubnetMask=snPimVInterfaceLocalSubnetMask, snRtIpRipRedisMask=snRtIpRipRedisMask, snRtIpFwdCacheCurEntries=snRtIpFwdCacheCurEntries, snRtIpRipPortAccessRowStatus=snRtIpRipPortAccessRowStatus, snRtIpRipPortIfConfigInterfaceIndex=snRtIpRipPortIfConfigInterfaceIndex, snIpPrefixListTable=snIpPrefixListTable, snIpCommunityListStringEntry=snIpCommunityListStringEntry, snFsrpIfState=snFsrpIfState, snIpAsPathAccessListStringName=snIpAsPathAccessListStringName, snRtIpRipPortVersion=snRtIpRipPortVersion, snPimHelloTime=snPimHelloTime, snRtIpRipRouteFilterIpAddr=snRtIpRipRouteFilterIpAddr, snDvmrpVInterfaceMetric=snDvmrpVInterfaceMetric, snRtIpRarpMac=snRtIpRarpMac, snRtIpStaticRouteIndex=snRtIpStaticRouteIndex, snRtIpStaticRouteDest=snRtIpStaticRouteDest, snDvmrpRouteNextHopTable=snDvmrpRouteNextHopTable, snRtIpRipRedisEntry=snRtIpRipRedisEntry, snVrrpVirRtrRxPortMismatchCnts=snVrrpVirRtrRxPortMismatchCnts, snFsrpGlobal=snFsrpGlobal, snPimVIfStatTable=snPimVIfStatTable, snRtStaticArpEntry=snRtStaticArpEntry, snIpCommunityListIndex=snIpCommunityListIndex, snRtIpPortIfMetric=snRtIpPortIfMetric, snPimVInterfaceMode=snPimVInterfaceMode, snRtIpPortIfDirBcastFwd=snRtIpPortIfDirBcastFwd, snPimVInterfaceTable=snPimVInterfaceTable, snRtIpSetAllPortConfig=snRtIpSetAllPortConfig, snRtIpPortIfAddrEntry=snRtIpPortIfAddrEntry, snRtIpRipPortIfAccessPort=snRtIpRipPortIfAccessPort, snDvmrpGraftRetransmitTime=snDvmrpGraftRetransmitTime, snPimNeighborTable=snPimNeighborTable, snPimVIfStatOutGraftAckPkts=snPimVIfStatOutGraftAckPkts, snRtIpPortAccessEntry=snRtIpPortAccessEntry, snRtIpMaxStaticRouteEntries=snRtIpMaxStaticRouteEntries, snDvmrpVInterfaceAdvertiseLocal=snDvmrpVInterfaceAdvertiseLocal, Metric=Metric, snVrrpVirRtrCurrDeadInt=snVrrpVirRtrCurrDeadInt, snRtIpPortIfAddress=snRtIpPortIfAddress, snVrrpVirRtrId=snVrrpVirRtrId, snDvmrpEnable=snDvmrpEnable, snFsrpIfTrackPortList=snFsrpIfTrackPortList, snDvmrpRouteTable=snDvmrpRouteTable, snDvmrpVIfStatDiscardGraftAckPkts=snDvmrpVIfStatDiscardGraftAckPkts, snGblRtRouteOnly=snGblRtRouteOnly, snRtIpRipPortConfigPortIndex=snRtIpRipPortConfigPortIndex, snVrrpGlobal=snVrrpGlobal, snRtClearIpCache=snRtClearIpCache, snVrrpVirRtrIpAddrMask=snVrrpVirRtrIpAddrMask, snRtUdpBcastFwdPortEntry=snRtUdpBcastFwdPortEntry, snDvmrpNeighborMajorVersion=snDvmrpNeighborMajorVersion, snVrrpClearVrrpStat=snVrrpClearVrrpStat, snRtIpTraceRouteResultEntry=snRtIpTraceRouteResultEntry, snRtUdpHelperEntry=snRtUdpHelperEntry, snIpAsPathAccessListStringSequence=snIpAsPathAccessListStringSequence, snPimVIfStatOutGraftPkts=snPimVIfStatOutGraftPkts, snRtIpRipPortIfAccessTable=snRtIpRipPortIfAccessTable, snDvmrpVInterfaceVifIndex=snDvmrpVInterfaceVifIndex, snPimVInterfaceRemoteAddress=snPimVInterfaceRemoteAddress, snPimVIfStatOutHelloPkts=snPimVIfStatOutHelloPkts, snDvmrpVIfStatDiscardProbePkts=snDvmrpVIfStatDiscardProbePkts, snPimVInterfaceType=snPimVInterfaceType, snRtIpRipPortAccessFilterList=snRtIpRipPortAccessFilterList, snRtIpTraceRouteGeneral=snRtIpTraceRouteGeneral, snDvmrpVInterfaceOperState=snDvmrpVInterfaceOperState, snRtIpRipRedisAction=snRtIpRipRedisAction, snDvmrpRouteSource=snDvmrpRouteSource, snPimSMMIBObjects=snPimSMMIBObjects, snVrrpGroupOperMode=snVrrpGroupOperMode, snDvmrpRouteNextHopSource=snDvmrpRouteNextHopSource, snRtIpRarpEntry=snRtIpRarpEntry, snPimVIfStatVifIndex=snPimVIfStatVifIndex, snVrrpVirRtrTransToBackupStateCnts=snVrrpVirRtrTransToBackupStateCnts, snRtIpRipRedisIp=snRtIpRipRedisIp, snRtIpRarpRowStatus=snRtIpRarpRowStatus, snVrrpVirRtrTable=snVrrpVirRtrTable, snRtIpFilterSourceMask=snRtIpFilterSourceMask, snRtIpFwdCacheEntry=snRtIpFwdCacheEntry, snIpAsPathAccessListEntry=snIpAsPathAccessListEntry, snDvmrpNeighborGenerationId=snDvmrpNeighborGenerationId, snRtUdpHelperIndex=snRtUdpHelperIndex, snDvmrpVIfStatVifIndex=snDvmrpVIfStatVifIndex, snIpCommunityListInternet=snIpCommunityListInternet, snVrrpVirRtrTrackPriority=snVrrpVirRtrTrackPriority, snDvmrpRouteEntryIndex=snDvmrpRouteEntryIndex, snPimVIfStatDiscardGraftAckPkts=snPimVIfStatDiscardGraftAckPkts, snVrrpVirRtrHelloInt=snVrrpVirRtrHelloInt, snDvmrpNeighborRouterTimeout=snDvmrpNeighborRouterTimeout, snVrrpVirRtrTrackPortMask=snVrrpVirRtrTrackPortMask, snRtIpTtl=snRtIpTtl, snRtIpLoadShareMinPaths=snRtIpLoadShareMinPaths, snRtIpFilterSourceIp=snRtIpFilterSourceIp, snDvmrpVInterfaceLocalAddress=snDvmrpVInterfaceLocalAddress, PortMask=PortMask, snRtIpPortIfAddrTable=snRtIpPortIfAddrTable, snVrrpVirRtrPreemptMode=snVrrpVirRtrPreemptMode, snPimVInterfaceLocalAddress=snPimVInterfaceLocalAddress, snVrrpVirRtrRxPriorityZeroFromMasterCnts=snVrrpVirRtrRxPriorityZeroFromMasterCnts, snIpCommunityListStringNoAdvertise=snIpCommunityListStringNoAdvertise, snRtIpRipPortLearnDefault=snRtIpRipPortLearnDefault, snIpAsPathAccessListStringAction=snIpAsPathAccessListStringAction, snPimRPSetTable=snPimRPSetTable, snRtBootpRelayMax=snRtBootpRelayMax, snDvmrpVIfStatInPkts=snDvmrpVIfStatInPkts, snRtIpRipPortAccessDir=snRtIpRipPortAccessDir, snDvmrpVInterfaceRemoteAddress=snDvmrpVInterfaceRemoteAddress, snDvmrpMIBObjects=snDvmrpMIBObjects, snRtIpPortIfSubnetMask=snRtIpPortIfSubnetMask, snDvmrpGenerationId=snDvmrpGenerationId, snRtBcastFwd=snRtBcastFwd, snDvmrpVIfStatEntry=snDvmrpVIfStatEntry, snRtArpAge=snRtArpAge, snRtIpFilterDestMask=snRtIpFilterDestMask, snRtIpRipGeneral=snRtIpRipGeneral, snVrrpIfMaxNumVridPerIntf=snVrrpIfMaxNumVridPerIntf, snRtIpPortAccessRowStatus=snRtIpPortAccessRowStatus, snRtIpStaticRouteMask=snRtIpStaticRouteMask, snRtIpPortConfigPortIndex=snRtIpPortConfigPortIndex, snRtIpRipPortIfVersion=snRtIpRipPortIfVersion, snVrrpVirRtrRxIpPktDropCnts=snVrrpVirRtrRxIpPktDropCnts, snDvmrpNeighborEntry=snDvmrpNeighborEntry, snRtIpFwdCacheTable=snRtIpFwdCacheTable, snIpCommunityListStringLocalAs=snIpCommunityListStringLocalAs, snRtIpFwdCacheNextHopIp=snRtIpFwdCacheNextHopIp, snVrrpVirRtrCfgPriority=snVrrpVirRtrCfgPriority, snFsrpIfRouterDeadTime=snFsrpIfRouterDeadTime, snDvmrpDefaultRoute=snDvmrpDefaultRoute, snPimNeighborEntry=snPimNeighborEntry, snVrrpVirRtrEntry=snVrrpVirRtrEntry, snPimCandidateBSRTable=snPimCandidateBSRTable, snRtUdpHelperTable=snRtUdpHelperTable, snRtIpRipNbrFilterSourceIp=snRtIpRipNbrFilterSourceIp, snRtIpRipPortIfAccessDir=snRtIpRipPortIfAccessDir, snDvmrpVIfStatInGraftAckPkts=snDvmrpVIfStatInGraftAckPkts, snDvmrpVInterfaceStatus=snDvmrpVInterfaceStatus, snRtUdpBcastFwdPortRowStatus=snRtUdpBcastFwdPortRowStatus, snIpCommunityListSequence=snIpCommunityListSequence, snRtIpLoadShareNumOfPaths=snRtIpLoadShareNumOfPaths, snPimVIfStatInGraftPkts=snPimVIfStatInGraftPkts, snDvmrpRouteVifIndex=snDvmrpRouteVifIndex, snVrrpVirRtrOwnership=snVrrpVirRtrOwnership, snIpCommunityListStringSequence=snIpCommunityListStringSequence, snPimVInterfaceVifIndex=snPimVInterfaceVifIndex, snDvmrpVInterfaceEntry=snDvmrpVInterfaceEntry, snDvmrpVIfStatOutPrunePkts=snDvmrpVIfStatOutPrunePkts, snPimCandidateBSRIPAddress=snPimCandidateBSRIPAddress, snIpAsPathAccessListSequence=snIpAsPathAccessListSequence, snDvmrpRouteMetric=snDvmrpRouteMetric, Action=Action, snRtIpFilterTable=snRtIpFilterTable, snPimVIfStatInAssertPkts=snPimVIfStatInAssertPkts, snRtIpTraceRouteControl=snRtIpTraceRouteControl, snVrrpIfRxAuthPwdMismatchErrCnts=snVrrpIfRxAuthPwdMismatchErrCnts, snRtIpFilterAction=snRtIpFilterAction, snRtIpFwdCacheAction=snRtIpFwdCacheAction, snRtIpPortConfigEntry=snRtIpPortConfigEntry, snPimNeighborAddress=snPimNeighborAddress, snRtIpTraceRouteTimeOut=snRtIpTraceRouteTimeOut, snRtIpFwdCacheSnapHdr=snRtIpFwdCacheSnapHdr, snIpCommunityListStringAction=snIpCommunityListStringAction, snDvmrpVIfStatDiscardRtUpdatePkts=snDvmrpVIfStatDiscardRtUpdatePkts, snIpAsPathAccessListAction=snIpAsPathAccessListAction, snPimCandidateRPIPAddress=snPimCandidateRPIPAddress, snRtBootpServer=snRtBootpServer, snRtIpFwdCacheOutgoingPort=snRtIpFwdCacheOutgoingPort, snFsrpIntf=snFsrpIntf, snIpCommunityListRowStatus=snIpCommunityListRowStatus, snVrrpVirRtrRxHelloIntMismatchCnts=snVrrpVirRtrRxHelloIntMismatchCnts, snVrrpVirRtrActivate=snVrrpVirRtrActivate, snFsrpIfRowStatus=snFsrpIfRowStatus, snRtIpRipPortIfConfigEntry=snRtIpRipPortIfConfigEntry, snPimCandidateRPTable=snPimCandidateRPTable, RowSts=RowSts, snPimVIfStatOutAssertPkts=snPimVIfStatOutAssertPkts, snIpCommunityListCommNum=snIpCommunityListCommNum, snFsrpIfOtherRtrIpAddr=snFsrpIfOtherRtrIpAddr, snRtIpFilterDestIp=snRtIpFilterDestIp, snPimVIfStatDiscardHelloPkts=snPimVIfStatDiscardHelloPkts, snVrrpVirRtrRxHigherPriorityCnts=snVrrpVirRtrRxHigherPriorityCnts, snIpAsPathAccessListRegExpression=snIpAsPathAccessListRegExpression, snRtIpLoadShareMaxPaths=snRtIpLoadShareMaxPaths, snRtIpRipNbrFilterId=snRtIpRipNbrFilterId, snRtIpRarp=snRtIpRarp, snRtIpFwdCacheMac=snRtIpFwdCacheMac, snPimNeighborUpTime=snPimNeighborUpTime, snRtStaticArpRowStatus=snRtStaticArpRowStatus, snDvmrpRouteNextHopEntry=snDvmrpRouteNextHopEntry, snVrrpVirRtrCurrPriority=snVrrpVirRtrCurrPriority, snDvmrpVInterfaceTtlThreshold=snDvmrpVInterfaceTtlThreshold, snRtIpRipRouteFilterAction=snRtIpRipRouteFilterAction, snPimVInterfaceStatus=snPimVInterfaceStatus, PhysAddress=PhysAddress, snVrrpVirRtrPort=snVrrpVirRtrPort, snRtIpFilterProtocol=snRtIpFilterProtocol, snRtIpRipPortIfAccessRowStatus=snRtIpRipPortIfAccessRowStatus, snDvmrpVIfStatOutOctets=snDvmrpVIfStatOutOctets, snPimRPSetHoldTime=snPimRPSetHoldTime, snRtIpRipNbrFilterAction=snRtIpRipNbrFilterAction, snIpPrefixListAction=snIpPrefixListAction, snRtIpRipRouteFilterRowStatus=snRtIpRipRouteFilterRowStatus, snRtIpStaticRouteTable=snRtIpStaticRouteTable, snPimCandidateBSRPortID=snPimCandidateBSRPortID, snIpAsPathAccessListRowStatus=snIpAsPathAccessListRowStatus, snIpAsPathAccessListStringTable=snIpAsPathAccessListStringTable, snRtIpFilterOperator=snRtIpFilterOperator, snFsrpIfIpAddress=snFsrpIfIpAddress, snRtIpPortAddrTable=snRtIpPortAddrTable, snRtUdpBcastFwdEnable=snRtUdpBcastFwdEnable, PortIndex=PortIndex, snRtIpPortIfAddrType=snRtIpPortIfAddrType, snRtIpPortEncap=snRtIpPortEncap, snPimVIfStatOutJoinPkts=snPimVIfStatOutJoinPkts, snIpCommunityListTable=snIpCommunityListTable, snRtClearIpRoute=snRtClearIpRoute, snFsrpIfPort=snFsrpIfPort, snRtIpFilterOperand=snRtIpFilterOperand, snRtIpPortAccessDirection=snRtIpPortAccessDirection, snDvmrpVIfStatOutGraftPkts=snDvmrpVIfStatOutGraftPkts, snPimRPSetGroupAddress=snPimRPSetGroupAddress, snRtIpRipRouteFilterEntry=snRtIpRipRouteFilterEntry, snRtIpSourceRoute=snRtIpSourceRoute, snDvmrpNeighborExpiryTime=snDvmrpNeighborExpiryTime, snVrrpIfTable=snVrrpIfTable, snDvmrpNeighborTable=snDvmrpNeighborTable, snRtIpTraceRouteResult=snRtIpTraceRouteResult, snDvmrpVIfStatOutGraftAckPkts=snDvmrpVIfStatOutGraftAckPkts, snRtIpPortDirBcastFwd=snRtIpPortDirBcastFwd, snPimVIfStatDiscardPrunePkts=snPimVIfStatDiscardPrunePkts, snRtIpRipPortAccessTable=snRtIpRipPortAccessTable, snPimCandidateRPMask=snPimCandidateRPMask)
mibBuilder.exportSymbols("FOUNDRY-SN-IP-MIB", snVrrpVirRtrState=snVrrpVirRtrState, snVrrpVirRtrTrackPortList=snVrrpVirRtrTrackPortList, snRtIpPortRowStatus=snRtIpPortRowStatus, snVrrpIfEntry=snVrrpIfEntry, snFsrpIfStateChangeTrap=snFsrpIfStateChangeTrap, snLoopbackIntfConfigPortIndex=snLoopbackIntfConfigPortIndex, snRtIpTraceRouteMinTtl=snRtIpTraceRouteMinTtl, snGblRtGeneral=snGblRtGeneral, snDvmrpVIfStatTable=snDvmrpVIfStatTable, snRtIpRipRouteFilterId=snRtIpRipRouteFilterId, snDvmrpVIfStatOutProbePkts=snDvmrpVIfStatOutProbePkts, snRtIpLoadShare=snRtIpLoadShare, snDvmrpVIfStatOutRtUpdatePkts=snDvmrpVIfStatOutRtUpdatePkts, snVrrpVirRtrRxArpPktDropCnts=snVrrpVirRtrRxArpPktDropCnts, snDvmrpRouteExpiryTime=snDvmrpRouteExpiryTime, snPimCandidateBSRPreference=snPimCandidateBSRPreference, snVrrpIfMaxNumVridPerSystem=snVrrpIfMaxNumVridPerSystem, snRtIpFwdCacheIp=snRtIpFwdCacheIp, snRtIpTraceRouteResultRoundTripTime2=snRtIpTraceRouteResultRoundTripTime2, snRtIpPortIfAccessFilters=snRtIpPortIfAccessFilters, snRtIpFwdCacheVLanId=snRtIpFwdCacheVLanId, snRtUdpBcastFwdPortTable=snRtUdpBcastFwdPortTable, snRtUdpHelper=snRtUdpHelper, snRtIpRipSetAllPortConfig=snRtIpRipSetAllPortConfig, snRtIpFilterRowStatus=snRtIpFilterRowStatus, snDvmrpVIfStatInRtUpdatePkts=snDvmrpVIfStatInRtUpdatePkts, snRtIpProxyArp=snRtIpProxyArp, snRtIpRipGblFiltList=snRtIpRipGblFiltList, snPimInactivityTime=snPimInactivityTime, snPimVIfStatInGraftAckPkts=snPimVIfStatInGraftAckPkts, snRtIpPortIfMtu=snRtIpPortIfMtu, snDvmrpNeighborAddress=snDvmrpNeighborAddress, DisplayString=DisplayString, snRtIpStaticRouteNextHop=snRtIpStaticRouteNextHop, snRtUdpBcastFwdPortIndex=snRtUdpBcastFwdPortIndex, snVrrpIfPort=snVrrpIfPort, snRtIpRipPortConfigTable=snRtIpRipPortConfigTable, snRtIpPortIfAccessTable=snRtIpPortIfAccessTable, snIpPrefixListName=snIpPrefixListName, snRtIpRarpIndex=snRtIpRarpIndex, snIpCommunityListStringTable=snIpCommunityListStringTable, snRtIpStaticRouteMetric=snRtIpStaticRouteMetric, snFsrpGroupOperMode=snFsrpGroupOperMode, snDvmrpPruneAge=snDvmrpPruneAge, snIpPrefixListSequence=snIpPrefixListSequence, snIpPrefixListEntry=snIpPrefixListEntry, snRtIpRipUpdateTime=snRtIpRipUpdateTime, snPimJoinPruneInterval=snPimJoinPruneInterval, snRtIpTraceRouteResultTable=snRtIpTraceRouteResultTable, snRtIpPortIfConfigEntry=snRtIpPortIfConfigEntry, snPimCandidateBSRHashMaskLen=snPimCandidateBSRHashMaskLen, snRtIpPortIfAccessInterfaceIndex=snRtIpPortIfAccessInterfaceIndex, snRtIpRipRouteFilterSubnetMask=snRtIpRipRouteFilterSubnetMask, snFsrpIfTable=snFsrpIfTable, snRtIpRipNbrFilterEntry=snRtIpRipNbrFilterEntry, snVrrpIfRxAuthTypeErrCnts=snVrrpIfRxAuthTypeErrCnts, snVrrpIfAuthType=snVrrpIfAuthType, snDvmrpRouteNextHopType=snDvmrpRouteNextHopType, snDvmrpNeighborVifIndex=snDvmrpNeighborVifIndex, snRtIpFwdCacheIndex=snRtIpFwdCacheIndex, snRtUdpBcastFwdPort=snRtUdpBcastFwdPort, snDvmrpVersion=snDvmrpVersion, snFsrpIfTrackPortMask=snFsrpIfTrackPortMask, snPimCandidateBSREntry=snPimCandidateBSREntry, snRtIpRipRedisProtocol=snRtIpRipRedisProtocol, snPimNeighborEntryIndex=snPimNeighborEntryIndex, ClearStatus=ClearStatus, snDvmrpNeighborMinorVersion=snDvmrpNeighborMinorVersion, snDvmrpVInterfaceRemoteSubnetMask=snDvmrpVInterfaceRemoteSubnetMask, snPimNeighborVifIndex=snPimNeighborVifIndex, snRtIpRarpIp=snRtIpRarpIp, snRtIpRipRedisEnable=snRtIpRipRedisEnable, snPimVIfStatOutPrunePkts=snPimVIfStatOutPrunePkts, snRtIpRipNbrFilterTable=snRtIpRipNbrFilterTable, snIpCommunityListStringName=snIpCommunityListStringName, snFsrpIfPreferLevel=snFsrpIfPreferLevel, snRtIpPortSubnetMask=snRtIpPortSubnetMask, RtrStatus=RtrStatus, snFsrpIfVirRtrIpAddr=snFsrpIfVirRtrIpAddr, snIpPrefixListRowStatus=snIpPrefixListRowStatus, snVrrpIfStateChangeTrap=snVrrpIfStateChangeTrap, snPimRPSetMask=snPimRPSetMask, snLoopbackIntfConfigEntry=snLoopbackIntfConfigEntry, snPimNeighborRouterTimeout=snPimNeighborRouterTimeout, snRtIpRipPortConfigEntry=snRtIpRipPortConfigEntry, snIpAsPathAccessListIndex=snIpAsPathAccessListIndex, snPimRPSetEntry=snPimRPSetEntry, snRtIpRipPortIfAccessFilterList=snRtIpRipPortIfAccessFilterList, snRtIpPortAddress=snRtIpPortAddress, snRtIpPortAddrType=snRtIpPortAddrType, snRtIpRipEnable=snRtIpRipEnable, snDvmrpVInterfaceEncapsulation=snDvmrpVInterfaceEncapsulation, snPimVIfStatDiscardGraftPkts=snPimVIfStatDiscardGraftPkts, snRtUdpHelperAddr=snRtUdpHelperAddr, snPimGraftRetransmitTime=snPimGraftRetransmitTime, snRtIpRipRouteFilterTable=snRtIpRipRouteFilterTable, snDvmrpVInterfaceType=snDvmrpVInterfaceType, snRtIpRipPortIfLearnDefault=snRtIpRipPortIfLearnDefault, snRtIpRipPortIfConfigTable=snRtIpRipPortIfConfigTable, snIpPrefixListGeValue=snIpPrefixListGeValue, snRtUdpHelperPortIndex=snRtUdpHelperPortIndex, snDvmrpRouteNextHopSourceMask=snDvmrpRouteNextHopSourceMask, snRtIpTraceRoute=snRtIpTraceRoute, snIpPrefixListMask=snIpPrefixListMask, snLoopbackIntfMode=snLoopbackIntfMode, snVrrpVirRtrRowStatus=snVrrpVirRtrRowStatus, snRtClearArpCache=snRtClearArpCache, snPimVInterfaceEntry=snPimVInterfaceEntry, snVrrpIfRxHeaderErrCnts=snVrrpIfRxHeaderErrCnts, snPimPruneTime=snPimPruneTime, snDvmrpVIfStatDiscardGraftPkts=snDvmrpVIfStatDiscardGraftPkts, snRtStaticArpMac=snRtStaticArpMac, snPimVInterfaceTtlThreshold=snPimVInterfaceTtlThreshold, snRtIpRipPortAccessEntry=snRtIpRipPortAccessEntry, snIpCommunityListEntry=snIpCommunityListEntry, snVrrpVirRtrRxNumOfIpMismatchCnts=snVrrpVirRtrRxNumOfIpMismatchCnts, snPimVIfStatInJoinPkts=snPimVIfStatInJoinPkts, snDvmrpVIfStatOutPkts=snDvmrpVIfStatOutPkts, snPimVIfStatInHelloPkts=snPimVIfStatInHelloPkts, snRtIpIrdpEnable=snRtIpIrdpEnable, snRtIpPortIfRowStatus=snRtIpPortIfRowStatus, snRtIpPortIfAccessRowStatus=snRtIpPortIfAccessRowStatus, snRtIpProtocolRouterId=snRtIpProtocolRouterId, snRtIpRipRedisRowStatus=snRtIpRipRedisRowStatus, snIpCommunityListStringCommNum=snIpCommunityListStringCommNum, snRtIpFwdCacheFragCheck=snRtIpFwdCacheFragCheck, snDvmrpVIfStatInOctets=snDvmrpVIfStatInOctets, snRtIpFwdCacheMaxEntries=snRtIpFwdCacheMaxEntries, snIpPrefixListDesc=snIpPrefixListDesc, snRtIpStaticRouteDistance=snRtIpStaticRouteDistance, snPimNeighborExpiryTime=snPimNeighborExpiryTime, snRtIpTraceRouteMaxTtl=snRtIpTraceRouteMaxTtl, snIpAsPathAccessListStringEntry=snIpAsPathAccessListStringEntry, snDvmrpVIfStatInPrunePkts=snDvmrpVIfStatInPrunePkts, snRtIpRarpTable=snRtIpRarpTable, snVrrpVirRtrTrackVifMask=snVrrpVirRtrTrackVifMask, snRtUdpBcastFwdPortNumber=snRtUdpBcastFwdPortNumber, snRtIpFilterIndex=snRtIpFilterIndex, snIpCommunityListAction=snIpCommunityListAction, snIpPrefixListAddr=snIpPrefixListAddr, snDvmrpTriggerInterval=snDvmrpTriggerInterval, snDvmrpReportInterval=snDvmrpReportInterval, snRtIpRipFiltOnAllPort=snRtIpRipFiltOnAllPort, snRtIpPortAddrPortIndex=snRtIpPortAddrPortIndex, snPimVIfStatDiscardAssertPkts=snPimVIfStatDiscardAssertPkts, snRtIpGeneral=snRtIpGeneral, snDvmrpVIfStatDiscardPrunePkts=snDvmrpVIfStatDiscardPrunePkts, snRtIpStaticRouteEntry=snRtIpStaticRouteEntry, snRtBcastFwdGeneral=snRtBcastFwdGeneral, snRtIpTraceRouteTargetAddr=snRtIpTraceRouteTargetAddr, snRtStaticArpIndex=snRtStaticArpIndex, snRtIpPortConfigTable=snRtIpPortConfigTable, snRtIpRipPortIfPoisonReverse=snRtIpRipPortIfPoisonReverse, snDvmrpNeighborCapabilities=snDvmrpNeighborCapabilities, snFsrpIfKeepAliveTime=snFsrpIfKeepAliveTime, snFsrpIfEntry=snFsrpIfEntry, snRtIpFilterEntry=snRtIpFilterEntry, snDvmrpVIfStatInGraftPkts=snDvmrpVIfStatInGraftPkts, snRtIpPortAccessFilters=snRtIpPortAccessFilters, snDvmrpProbeInterval=snDvmrpProbeInterval, snRtIpRipPortPoisonReverse=snRtIpRipPortPoisonReverse, snRtIpRipNbrFilterRowStatus=snRtIpRipNbrFilterRowStatus, snRtIpRipPortIfAccessEntry=snRtIpRipPortIfAccessEntry, snDvmrpNeighborUpTime=snDvmrpNeighborUpTime, snIpAsPathAccessListStringRegExpression=snIpAsPathAccessListStringRegExpression, snRtIpPortIfConfigTable=snRtIpPortIfConfigTable, snRtIpPortIfConfigInterfaceIndex=snRtIpPortIfConfigInterfaceIndex, snDvmrpNeighborEntryIndex=snDvmrpNeighborEntryIndex, snRtIpPortIfAccessEntry=snRtIpPortIfAccessEntry, snRtIpPortAccessTable=snRtIpPortAccessTable, snVrrpVirRtrTransToMasterStateCnts=snVrrpVirRtrTransToMasterStateCnts, snDvmrpVInterfaceTable=snDvmrpVInterfaceTable, snIpCommunityListLocalAs=snIpCommunityListLocalAs, snRtIpDirBcastFwd=snRtIpDirBcastFwd, snRtIpPortMtu=snRtIpPortMtu, snPimCandidateRPRowStatus=snPimCandidateRPRowStatus, snRtIpRipRedisMatchMetric=snRtIpRipRedisMatchMetric, snIpCommunityListNoAdvertise=snIpCommunityListNoAdvertise, snRtIpPortIfEncap=snRtIpPortIfEncap, snRtIpPortIfAddrInterfaceIndex=snRtIpPortIfAddrInterfaceIndex, snIpCommunityListStringNoExport=snIpCommunityListStringNoExport, snRtStaticArpTable=snRtStaticArpTable, snPimVIfStatEntry=snPimVIfStatEntry, snRtIpTraceRouteResultRoundTripTime1=snRtIpTraceRouteResultRoundTripTime1, snRtIpFilterQosPriority=snRtIpFilterQosPriority, snVrrpIfAuthPassword=snVrrpIfAuthPassword, snPimMIBObjects=snPimMIBObjects, snPimCandidateRPGroupAddress=snPimCandidateRPGroupAddress, snRtStaticArpIp=snRtStaticArpIp, snPimRPSetIPAddress=snPimRPSetIPAddress, snRtUdpHelperRowStatus=snRtUdpHelperRowStatus, snIpCommunityListNoExport=snIpCommunityListNoExport, snRtIpRipRedisTable=snRtIpRipRedisTable, snRtIpRipRedisSetMetric=snRtIpRipRedisSetMetric, snDvmrpRouteSourceMask=snDvmrpRouteSourceMask, snIpAsPathAccessListTable=snIpAsPathAccessListTable, snPimVInterfaceDR=snPimVInterfaceDR, snRtIpPortIfAccessDirection=snRtIpPortIfAccessDirection, snRtIpRipRedisIndex=snRtIpRipRedisIndex, snRtIpPortAccessPortIndex=snRtIpPortAccessPortIndex, snIpCommunityListStringInternet=snIpCommunityListStringInternet, snDvmrpRouteExpireTime=snDvmrpRouteExpireTime, snRtIpRipDistance=snRtIpRipDistance, snLoopbackIntfConfigTable=snLoopbackIntfConfigTable, snVrrpVirRtr=snVrrpVirRtr, snRtIpStaticRouteRowStatus=snRtIpStaticRouteRowStatus, snDvmrpRouteNextHopVifIndex=snDvmrpRouteNextHopVifIndex, snVrrpIntf=snVrrpIntf, snDvmrpRouteUpstreamNeighbor=snDvmrpRouteUpstreamNeighbor, snRtIpPortAddrEntry=snRtIpPortAddrEntry)
