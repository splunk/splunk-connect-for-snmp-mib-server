#
# PySNMP MIB module RBN-MEMORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-MEMORY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:44:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnKBytes, = mibBuilder.importSymbols("RBN-TC", "RbnKBytes")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Counter32, ObjectIdentity, Integer32, Unsigned32, iso, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, NotificationType, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "ObjectIdentity", "Integer32", "Unsigned32", "iso", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "NotificationType", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rbnMemoryMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 16))
rbnMemoryMib.setRevisions(('2004-03-05 17:00', '2002-06-26 00:00', '2002-01-03 17:00',))
if mibBuilder.loadTexts: rbnMemoryMib.setLastUpdated('200403051700Z')
if mibBuilder.loadTexts: rbnMemoryMib.setOrganization('Redback Networks, Inc.')
rbnMemoryMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 0))
rbnMemoryMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1))
rbnMemoryMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2))
rbnSmsMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1), )
if mibBuilder.loadTexts: rbnSmsMemoryTable.setStatus('obsolete')
rbnSmsMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1), ).setIndexNames((0, "RBN-MEMORY-MIB", "rbnSmsMemoryIndex"))
if mibBuilder.loadTexts: rbnSmsMemoryEntry.setStatus('obsolete')
rbnSmsMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnSmsMemoryIndex.setStatus('obsolete')
rbnSmsMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryModule.setStatus('obsolete')
rbnSmsMemoryFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryFreeBytes.setStatus('obsolete')
rbnSmsMemoryBytesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryBytesInUse.setStatus('obsolete')
rbnSmsMemoryBlocksInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryBlocksInUse.setStatus('obsolete')
rbnSmsMemoryCumulBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryCumulBlocks.setStatus('obsolete')
rbnMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2), )
if mibBuilder.loadTexts: rbnMemoryTable.setStatus('current')
rbnMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1), ).setIndexNames((0, "RBN-MEMORY-MIB", "rbnMemoryIndex"))
if mibBuilder.loadTexts: rbnMemoryEntry.setStatus('current')
rbnMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnMemoryIndex.setStatus('current')
rbnMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryModule.setStatus('current')
rbnMemoryFreeKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 3), RbnKBytes()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryFreeKBytes.setStatus('current')
rbnMemoryKBytesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 4), RbnKBytes()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryKBytesInUse.setStatus('current')
rbnMemoryBlocksInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryBlocksInUse.setStatus('current')
rbnMemoryCumulBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryCumulBlocks.setStatus('current')
rbnSmsMemoryCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 1))
rbnSmsMemoryGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 2))
rbnMemoryCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 3))
rbnMemoryGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 4))
rbnMemoryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 3, 1)).setObjects(("RBN-MEMORY-MIB", "rbnMemoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMemoryCompliance = rbnMemoryCompliance.setStatus('current')
rbnMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 4, 1)).setObjects(("RBN-MEMORY-MIB", "rbnMemoryModule"), ("RBN-MEMORY-MIB", "rbnMemoryFreeKBytes"), ("RBN-MEMORY-MIB", "rbnMemoryKBytesInUse"), ("RBN-MEMORY-MIB", "rbnMemoryBlocksInUse"), ("RBN-MEMORY-MIB", "rbnMemoryCumulBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMemoryGroup = rbnMemoryGroup.setStatus('current')
rbnSmsMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 2, 1)).setObjects(("RBN-MEMORY-MIB", "rbnSmsMemoryModule"), ("RBN-MEMORY-MIB", "rbnSmsMemoryFreeBytes"), ("RBN-MEMORY-MIB", "rbnSmsMemoryBytesInUse"), ("RBN-MEMORY-MIB", "rbnSmsMemoryBlocksInUse"), ("RBN-MEMORY-MIB", "rbnSmsMemoryCumulBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSmsMemoryGroup = rbnSmsMemoryGroup.setStatus('obsolete')
rbnSmsMemoryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 1, 1)).setObjects(("RBN-MEMORY-MIB", "rbnSmsMemoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSmsMemoryCompliance = rbnSmsMemoryCompliance.setStatus('obsolete')
mibBuilder.exportSymbols("RBN-MEMORY-MIB", rbnMemoryEntry=rbnMemoryEntry, rbnMemoryModule=rbnMemoryModule, rbnMemoryGroups=rbnMemoryGroups, rbnMemoryMib=rbnMemoryMib, rbnSmsMemoryCumulBlocks=rbnSmsMemoryCumulBlocks, rbnMemoryMIBConformance=rbnMemoryMIBConformance, rbnSmsMemoryBytesInUse=rbnSmsMemoryBytesInUse, rbnSmsMemoryEntry=rbnSmsMemoryEntry, rbnSmsMemoryFreeBytes=rbnSmsMemoryFreeBytes, rbnSmsMemoryBlocksInUse=rbnSmsMemoryBlocksInUse, rbnSmsMemoryIndex=rbnSmsMemoryIndex, rbnMemoryCumulBlocks=rbnMemoryCumulBlocks, rbnMemoryMIBNotifications=rbnMemoryMIBNotifications, rbnMemoryCompliances=rbnMemoryCompliances, rbnMemoryIndex=rbnMemoryIndex, rbnMemoryMIBObjects=rbnMemoryMIBObjects, rbnMemoryBlocksInUse=rbnMemoryBlocksInUse, rbnSmsMemoryCompliances=rbnSmsMemoryCompliances, rbnMemoryFreeKBytes=rbnMemoryFreeKBytes, rbnSmsMemoryCompliance=rbnSmsMemoryCompliance, rbnMemoryGroup=rbnMemoryGroup, rbnSmsMemoryGroup=rbnSmsMemoryGroup, rbnMemoryCompliance=rbnMemoryCompliance, rbnSmsMemoryModule=rbnSmsMemoryModule, rbnSmsMemoryGroups=rbnSmsMemoryGroups, PYSNMP_MODULE_ID=rbnMemoryMib, rbnMemoryTable=rbnMemoryTable, rbnMemoryKBytesInUse=rbnMemoryKBytesInUse, rbnSmsMemoryTable=rbnSmsMemoryTable)
