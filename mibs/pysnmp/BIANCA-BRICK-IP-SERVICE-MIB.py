#
# PySNMP MIB module BIANCA-BRICK-IP-SERVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-IP-SERVICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibIdentifier, Unsigned32, iso, TimeTicks, Counter64, Integer32, NotificationType, Gauge32, IpAddress, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "Unsigned32", "iso", "TimeTicks", "Counter64", "Integer32", "NotificationType", "Gauge32", "IpAddress", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
biboipsrv = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 14))
localTcpAllowTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1), )
if mibBuilder.loadTexts: localTcpAllowTable.setStatus('mandatory')
localTcpAllowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-SERVICE-MIB", "localTcpAllowAddr"), (0, "BIANCA-BRICK-IP-SERVICE-MIB", "Service"))
if mibBuilder.loadTexts: localTcpAllowEntry.setStatus('mandatory')
localTcpAllowAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowAddrMode.setStatus('mandatory')
localTcpAllowAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowAddr.setStatus('mandatory')
localTcpAllowMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowMask.setStatus('mandatory')
localTcpAllowIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowIfMode.setStatus('mandatory')
localTcpAllowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowIfIndex.setStatus('mandatory')
localTcpAllowService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("telnet", 1), ("trace", 2), ("snmp", 3), ("capi", 4), ("tapi", 5), ("rfc1086", 6), ("http", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowService.setStatus('mandatory')
localUdpAllowTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2), )
if mibBuilder.loadTexts: localUdpAllowTable.setStatus('mandatory')
localUdpAllowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-SERVICE-MIB", "localUdpAllowAddr"), (0, "BIANCA-BRICK-IP-SERVICE-MIB", "Service"))
if mibBuilder.loadTexts: localUdpAllowEntry.setStatus('mandatory')
localUdpAllowAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowAddrMode.setStatus('mandatory')
localUdpAllowAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowAddr.setStatus('mandatory')
localUdpAllowMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowMask.setStatus('mandatory')
localUdpAllowIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowIfMode.setStatus('mandatory')
localUdpAllowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowIfIndex.setStatus('mandatory')
localUdpAllowService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("snmp", 1), ("rip", 2), ("bootps", 3), ("dns", 4), ("nbns", 5), ("statmon", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowService.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-IP-SERVICE-MIB", localTcpAllowMask=localTcpAllowMask, internet=internet, biboipsrv=biboipsrv, localUdpAllowAddr=localUdpAllowAddr, private=private, dod=dod, localTcpAllowIfIndex=localTcpAllowIfIndex, enterprises=enterprises, localTcpAllowIfMode=localTcpAllowIfMode, org=org, bibo=bibo, localUdpAllowIfMode=localUdpAllowIfMode, localTcpAllowAddr=localTcpAllowAddr, localUdpAllowMask=localUdpAllowMask, localTcpAllowService=localTcpAllowService, localTcpAllowAddrMode=localTcpAllowAddrMode, localUdpAllowIfIndex=localUdpAllowIfIndex, localUdpAllowEntry=localUdpAllowEntry, bintec=bintec, localUdpAllowService=localUdpAllowService, biboip=biboip, localUdpAllowAddrMode=localUdpAllowAddrMode, localTcpAllowEntry=localTcpAllowEntry, localTcpAllowTable=localTcpAllowTable, localUdpAllowTable=localUdpAllowTable)
