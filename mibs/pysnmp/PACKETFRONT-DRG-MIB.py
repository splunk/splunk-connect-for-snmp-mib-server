#
# PySNMP MIB module PACKETFRONT-DRG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETFRONT-DRG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:27:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
pfMgmt, = mibBuilder.importSymbols("PACKETFRONT-SMI", "pfMgmt")
PortList, = mibBuilder.importSymbols("PACKETFRONT-TC", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, ModuleIdentity, Counter32, iso, Counter64, Unsigned32, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "ModuleIdentity", "Counter32", "iso", "Counter64", "Unsigned32", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Integer32", "Gauge32")
RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
pfDrgMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 3))
pfDrgMib.setRevisions(('2009-03-23 15:38', '2008-04-11 00:00',))
if mibBuilder.loadTexts: pfDrgMib.setLastUpdated('200903231538Z')
if mibBuilder.loadTexts: pfDrgMib.setOrganization('PacketFront Systems AB')
drgNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0))
drgConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1))
drgConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2))
productInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1))
productName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
productSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNo.setStatus('current')
productProductionWeek = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productProductionWeek.setStatus('current')
productSwImageRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSwImageRev.setStatus('current')
productFwImageRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFwImageRev.setStatus('current')
productDefaultRevision = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productDefaultRevision.setStatus('current')
productOpDefRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productOpDefRev.setStatus('current')
productHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHardwareRev.setStatus('current')
productPlatform = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPlatform.setStatus('current')
productHardwarePCBARevision = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHardwarePCBARevision.setStatus('current')
productFunctionIdentity = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFunctionIdentity.setStatus('current')
productMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMacAddress.setStatus('current')
productIdentity = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIdentity.setStatus('current')
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2))
systemConfigRestartControl = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("restartNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigRestartControl.setStatus('current')
systemConfigRestartControlNotify = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("silent", 1), ("notifying", 2))).clone('notifying')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigRestartControlNotify.setStatus('current')
systemConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("changed", 2), ("notChanged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigSave.setStatus('current')
systemConfigFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("factoryReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigFactoryReset.setStatus('current')
systemConfigSaveNotify = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("silent", 1), ("always", 2), ("onlyErrors", 3))).clone('always')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigSaveNotify.setStatus('current')
downloadConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3))
downloadServer = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadServer.setStatus('current')
downloadFile = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadFile.setStatus('current')
downloadAction = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notDownloading", 1), ("startDownload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadAction.setStatus('current')
downloadMethod = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("http", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadMethod.setStatus('current')
downloadRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadRetryCount.setStatus('current')
downloadResultCode = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("inProgress", 1), ("success", 2), ("failureHostNotFound", 3), ("failureFileNotFound", 4), ("failureFileIncorrectSize", 5), ("failureFileVerifyFailure", 6), ("failureFileIncompatible", 7), ("failureUnknownError", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: downloadResultCode.setStatus('current')
downloadResultNotify = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("silent", 1), ("always", 2), ("onError", 3))).clone('always')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadResultNotify.setStatus('current')
hostConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4))
hostIfMax = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfMax.setStatus('current')
hostIfDefined = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfDefined.setStatus('current')
hostIfTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3), )
if mibBuilder.loadTexts: hostIfTable.setStatus('current')
hostIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "hostIfIndex"))
if mibBuilder.loadTexts: hostIfEntry.setStatus('current')
hostIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfIndex.setStatus('current')
hostIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2), ("pppoe", 3), ("pppoeFixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfMode.setStatus('current')
hostIfHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfHostName.setStatus('current')
hostIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostIfAddress.setStatus('current')
hostIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfSubnetMask.setStatus('current')
hostIfDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDefaultRouter.setStatus('current')
hostIfDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDomainName.setStatus('current')
hostIfDnsServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDnsServer1.setStatus('current')
hostIfDnsServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDnsServer2.setStatus('current')
hostIfDhcpClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDhcpClientID.setStatus('current')
hostIfDhcpVendorClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDhcpVendorClassID.setStatus('current')
hostIfDiffservCodePoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDiffservCodePoint.setStatus('current')
hostIfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfVlan.setStatus('current')
hostIfVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfVlanPriority.setStatus('current')
hostIfSecurePing = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfSecurePing.setStatus('current')
snmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7))
snmpTrapDestHostsMax = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestHostsMax.setStatus('current')
snmpTrapDestHostsDefined = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestHostsDefined.setStatus('current')
snmpTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3), )
if mibBuilder.loadTexts: snmpTrapDestinationTable.setStatus('current')
snmpTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "snmpTrapDestIndex"), (0, "PACKETFRONT-DRG-MIB", "snmpTrapDestName"))
if mibBuilder.loadTexts: snmpTrapDestinationEntry.setStatus('current')
snmpTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestIndex.setStatus('current')
snmpTrapDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestName.setStatus('current')
snmpTrapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestAddress.setStatus('current')
snmpTrapDestTagList = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestTagList.setStatus('current')
snmpTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestRowStatus.setStatus('current')
snmpReadCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunityName.setStatus('current')
snmpWriteCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWriteCommunityName.setStatus('current')
snmpTrapCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunityName.setStatus('current')
snmpDiffservCodePoint = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDiffservCodePoint.setStatus('current')
snmpAtomicSet = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("stage", 2), ("apply", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAtomicSet.setStatus('current')
vlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8))
vlanBase = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1))
vlanTp = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2))
vlanStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3))
vlanVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVersionNumber.setStatus('current')
vlanMaxVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxVlanId.setStatus('current')
vlanMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxSupportedVlans.setStatus('current')
vlanNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNumVlans.setStatus('current')
vlanFdbTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1), )
if mibBuilder.loadTexts: vlanFdbTable.setStatus('current')
vlanFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "vlanFdbId"))
if mibBuilder.loadTexts: vlanFdbEntry.setStatus('current')
vlanFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanFdbId.setStatus('current')
vlanFdbDynamicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFdbDynamicCount.setStatus('current')
vlanTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2), )
if mibBuilder.loadTexts: vlanTpFdbTable.setStatus('current')
vlanTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "vlanFdbId"), (0, "PACKETFRONT-DRG-MIB", "vlanTpFdbAddress"))
if mibBuilder.loadTexts: vlanTpFdbEntry.setStatus('current')
vlanTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanTpFdbAddress.setStatus('current')
vlanTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTpFdbPort.setStatus('current')
vlanTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTpFdbStatus.setStatus('current')
vlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1), )
if mibBuilder.loadTexts: vlanStaticTable.setStatus('current')
vlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "vlanStaticIndex"))
if mibBuilder.loadTexts: vlanStaticEntry.setStatus('current')
vlanStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticIndex.setStatus('current')
vlanStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticName.setStatus('current')
vlanStaticVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticVlanId.setStatus('current')
vlanStaticPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticPriority.setStatus('current')
vlanStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticEgressPorts.setStatus('current')
vlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticUntaggedPorts.setStatus('current')
vlanStaticUnmodifiedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticUnmodifiedPorts.setStatus('current')
vlanStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticRowStatus.setStatus('current')
notifyRestart = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0, 1)).setObjects(("PACKETFRONT-DRG-MIB", "productMacAddress"), ("PACKETFRONT-DRG-MIB", "productIdentity"), ("PACKETFRONT-DRG-MIB", "productSwImageRev"), ("PACKETFRONT-DRG-MIB", "productHardwareRev"), ("PACKETFRONT-DRG-MIB", "productOpDefRev"), ("PACKETFRONT-DRG-MIB", "productFunctionIdentity"))
if mibBuilder.loadTexts: notifyRestart.setStatus('current')
notifyDownloadResult = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0, 2)).setObjects(("PACKETFRONT-DRG-MIB", "productMacAddress"), ("PACKETFRONT-DRG-MIB", "productIdentity"), ("PACKETFRONT-DRG-MIB", "downloadResultCode"))
if mibBuilder.loadTexts: notifyDownloadResult.setStatus('current')
notifyConfigSaveResult = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0, 3)).setObjects(("PACKETFRONT-DRG-MIB", "productMacAddress"), ("PACKETFRONT-DRG-MIB", "productIdentity"), ("PACKETFRONT-DRG-MIB", "downloadResultCode"))
if mibBuilder.loadTexts: notifyConfigSaveResult.setStatus('current')
drgGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2, 1))
drgCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2, 2))
drgCompatibility = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2, 3))
mibBuilder.exportSymbols("PACKETFRONT-DRG-MIB", hostIfVlanPriority=hostIfVlanPriority, vlanTpFdbTable=vlanTpFdbTable, hostIfDnsServer2=hostIfDnsServer2, productHardwarePCBARevision=productHardwarePCBARevision, systemConfigSaveNotify=systemConfigSaveNotify, systemConfigRestartControl=systemConfigRestartControl, vlanTpFdbEntry=vlanTpFdbEntry, snmpConfig=snmpConfig, drgGroups=drgGroups, snmpTrapDestHostsDefined=snmpTrapDestHostsDefined, vlanTpFdbAddress=vlanTpFdbAddress, notifyRestart=notifyRestart, drgCompliance=drgCompliance, snmpDiffservCodePoint=snmpDiffservCodePoint, hostIfMode=hostIfMode, vlanMaxVlanId=vlanMaxVlanId, productName=productName, snmpTrapDestAddress=snmpTrapDestAddress, downloadServer=downloadServer, downloadResultCode=downloadResultCode, hostConfig=hostConfig, vlanStaticTable=vlanStaticTable, snmpReadCommunityName=snmpReadCommunityName, snmpTrapDestTagList=snmpTrapDestTagList, systemConfigFactoryReset=systemConfigFactoryReset, hostIfMax=hostIfMax, downloadConfig=downloadConfig, hostIfAddress=hostIfAddress, vlanBase=vlanBase, productIdentity=productIdentity, vlanTpFdbPort=vlanTpFdbPort, vlanStaticVlanId=vlanStaticVlanId, snmpTrapDestHostsMax=snmpTrapDestHostsMax, downloadResultNotify=downloadResultNotify, productInfo=productInfo, downloadFile=downloadFile, notifyDownloadResult=notifyDownloadResult, vlanStaticIndex=vlanStaticIndex, productSerialNo=productSerialNo, downloadMethod=downloadMethod, drgNotification=drgNotification, hostIfIndex=hostIfIndex, snmpTrapDestName=snmpTrapDestName, productMacAddress=productMacAddress, notifyConfigSaveResult=notifyConfigSaveResult, vlanMaxSupportedVlans=vlanMaxSupportedVlans, productFunctionIdentity=productFunctionIdentity, productFwImageRev=productFwImageRev, downloadRetryCount=downloadRetryCount, snmpTrapDestIndex=snmpTrapDestIndex, vlanStaticUntaggedPorts=vlanStaticUntaggedPorts, vlanFdbId=vlanFdbId, vlanStaticName=vlanStaticName, drgConfig=drgConfig, hostIfDiffservCodePoint=hostIfDiffservCodePoint, vlanConfig=vlanConfig, snmpTrapDestRowStatus=snmpTrapDestRowStatus, vlanStaticUnmodifiedPorts=vlanStaticUnmodifiedPorts, hostIfDhcpVendorClassID=hostIfDhcpVendorClassID, productSwImageRev=productSwImageRev, hostIfSecurePing=hostIfSecurePing, vlanStaticEgressPorts=vlanStaticEgressPorts, vlanTp=vlanTp, vlanStatic=vlanStatic, vlanFdbEntry=vlanFdbEntry, productDefaultRevision=productDefaultRevision, hostIfDhcpClientID=hostIfDhcpClientID, vlanTpFdbStatus=vlanTpFdbStatus, PYSNMP_MODULE_ID=pfDrgMib, vlanNumVlans=vlanNumVlans, vlanStaticPriority=vlanStaticPriority, vlanStaticRowStatus=vlanStaticRowStatus, systemConfig=systemConfig, hostIfDomainName=hostIfDomainName, pfDrgMib=pfDrgMib, productHardwareRev=productHardwareRev, vlanStaticEntry=vlanStaticEntry, hostIfVlan=hostIfVlan, productPlatform=productPlatform, systemConfigRestartControlNotify=systemConfigRestartControlNotify, snmpTrapCommunityName=snmpTrapCommunityName, hostIfDefined=hostIfDefined, vlanFdbDynamicCount=vlanFdbDynamicCount, vlanVersionNumber=vlanVersionNumber, vlanFdbTable=vlanFdbTable, snmpTrapDestinationTable=snmpTrapDestinationTable, snmpWriteCommunityName=snmpWriteCommunityName, systemConfigSave=systemConfigSave, hostIfDnsServer1=hostIfDnsServer1, downloadAction=downloadAction, drgCompatibility=drgCompatibility, hostIfEntry=hostIfEntry, drgConformance=drgConformance, hostIfTable=hostIfTable, hostIfSubnetMask=hostIfSubnetMask, hostIfDefaultRouter=hostIfDefaultRouter, productProductionWeek=productProductionWeek, hostIfHostName=hostIfHostName, productOpDefRev=productOpDefRev, snmpTrapDestinationEntry=snmpTrapDestinationEntry, snmpAtomicSet=snmpAtomicSet)
