#
# PySNMP MIB module CISCO-IETF-PW-ENET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-PW-ENET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:43:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
cpwVcIndex, = mibBuilder.importSymbols("CISCO-IETF-PW-MIB", "cpwVcIndex")
CpwVcVlanCfg, = mibBuilder.importSymbols("CISCO-IETF-PW-TC-MIB", "CpwVcVlanCfg")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, IpAddress, NotificationType, ModuleIdentity, Unsigned32, iso, Integer32, experimental, Counter32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "NotificationType", "ModuleIdentity", "Unsigned32", "iso", "Integer32", "experimental", "Counter32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ObjectIdentity")
TextualConvention, DisplayString, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "StorageType", "RowStatus")
cpwVcEnetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 108))
cpwVcEnetMIB.setRevisions(('2002-09-22 12:00', '2002-08-20 12:00', '2002-02-03 12:00',))
if mibBuilder.loadTexts: cpwVcEnetMIB.setLastUpdated('200209221200Z')
if mibBuilder.loadTexts: cpwVcEnetMIB.setOrganization('IETF PWE3 Working group')
cpwVcEnetNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 0))
cpwVcEnetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 1))
cpwVcEnetConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 2))
cpwVcEnetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1), )
if mibBuilder.loadTexts: cpwVcEnetTable.setStatus('current')
cpwVcEnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"), (0, "CISCO-IETF-PW-ENET-MIB", "cpwVcEnetPwVlan"))
if mibBuilder.loadTexts: cpwVcEnetEntry.setStatus('current')
cpwVcEnetPwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 1), CpwVcVlanCfg())
if mibBuilder.loadTexts: cpwVcEnetPwVlan.setStatus('current')
cpwVcEnetVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("portBased", 1), ("noChange", 2), ("changeVlan", 3), ("addVlan", 4), ("removeVlan", 5))).clone('noChange')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetVlanMode.setStatus('current')
cpwVcEnetPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 3), CpwVcVlanCfg().clone(4097)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetPortVlan.setStatus('current')
cpwVcEnetVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetVcIfIndex.setStatus('current')
cpwVcEnetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetPortIfIndex.setStatus('current')
cpwVcEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetRowStatus.setStatus('current')
cpwVcEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetStorageType.setStatus('current')
cpwVcEnetMplsPriMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2), )
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingTable.setStatus('current')
cpwVcEnetMplsPriMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"))
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingTableEntry.setStatus('current')
cpwVcEnetMplsPriMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("pri000", 0), ("pri001", 1), ("pri010", 2), ("pri011", 3), ("pri100", 4), ("pri101", 5), ("pri110", 6), ("pri111", 7), ("untagged", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetMplsPriMapping.setStatus('current')
cpwVcEnetMplsPriMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingRowStatus.setStatus('current')
cpwVcEnetMplsPriMappingStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingStorageType.setStatus('current')
cpwVcEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3), )
if mibBuilder.loadTexts: cpwVcEnetStatsTable.setStatus('current')
cpwVcEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"))
if mibBuilder.loadTexts: cpwVcEnetStatsEntry.setStatus('current')
cpwVcEnetStatsIllegalVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwVcEnetStatsIllegalVlan.setStatus('current')
cpwVcEnetStatsIllegalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwVcEnetStatsIllegalLength.setStatus('current')
cpwVcEnetGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1))
cpwVcEnetCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 2))
cpwVcEnetModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 2, 1)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetGroup"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcStatsGroup"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcEnetModuleCompliance = cpwVcEnetModuleCompliance.setStatus('current')
cpwVcEnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1, 1)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetVlanMode"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetPortVlan"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetPortIfIndex"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetVcIfIndex"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetRowStatus"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcEnetGroup = cpwVcEnetGroup.setStatus('current')
cpwVcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1, 2)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetStatsIllegalVlan"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetStatsIllegalLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcStatsGroup = cpwVcStatsGroup.setStatus('current')
cpwVcEnetMplsPriGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1, 3)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriMapping"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriMappingRowStatus"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriMappingStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcEnetMplsPriGroup = cpwVcEnetMplsPriGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-IETF-PW-ENET-MIB", cpwVcEnetStatsIllegalLength=cpwVcEnetStatsIllegalLength, cpwVcEnetMplsPriMappingTableEntry=cpwVcEnetMplsPriMappingTableEntry, cpwVcEnetPortVlan=cpwVcEnetPortVlan, cpwVcEnetGroups=cpwVcEnetGroups, cpwVcEnetMIB=cpwVcEnetMIB, cpwVcEnetObjects=cpwVcEnetObjects, cpwVcEnetStatsTable=cpwVcEnetStatsTable, cpwVcEnetStorageType=cpwVcEnetStorageType, cpwVcEnetNotifications=cpwVcEnetNotifications, cpwVcEnetVlanMode=cpwVcEnetVlanMode, cpwVcEnetPwVlan=cpwVcEnetPwVlan, cpwVcEnetMplsPriMapping=cpwVcEnetMplsPriMapping, cpwVcEnetMplsPriMappingTable=cpwVcEnetMplsPriMappingTable, cpwVcEnetGroup=cpwVcEnetGroup, cpwVcStatsGroup=cpwVcStatsGroup, cpwVcEnetConformance=cpwVcEnetConformance, cpwVcEnetMplsPriGroup=cpwVcEnetMplsPriGroup, PYSNMP_MODULE_ID=cpwVcEnetMIB, cpwVcEnetModuleCompliance=cpwVcEnetModuleCompliance, cpwVcEnetMplsPriMappingStorageType=cpwVcEnetMplsPriMappingStorageType, cpwVcEnetRowStatus=cpwVcEnetRowStatus, cpwVcEnetEntry=cpwVcEnetEntry, cpwVcEnetPortIfIndex=cpwVcEnetPortIfIndex, cpwVcEnetTable=cpwVcEnetTable, cpwVcEnetMplsPriMappingRowStatus=cpwVcEnetMplsPriMappingRowStatus, cpwVcEnetStatsEntry=cpwVcEnetStatsEntry, cpwVcEnetStatsIllegalVlan=cpwVcEnetStatsIllegalVlan, cpwVcEnetVcIfIndex=cpwVcEnetVcIfIndex, cpwVcEnetCompliances=cpwVcEnetCompliances)
