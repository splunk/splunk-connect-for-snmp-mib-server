#
# PySNMP MIB module MIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MIP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:50:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, experimental, ModuleIdentity, mib_2, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, NotificationType, Counter32, iso, IpAddress, Counter64, ObjectIdentity, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "experimental", "ModuleIdentity", "mib-2", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "NotificationType", "Counter32", "iso", "IpAddress", "Counter64", "ObjectIdentity", "TimeTicks", "Integer32")
TruthValue, TimeStamp, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "TextualConvention", "DisplayString", "RowStatus")
mipMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 44))
if mibBuilder.loadTexts: mipMIB.setLastUpdated('9606040000Z')
if mibBuilder.loadTexts: mipMIB.setOrganization('IETF Mobile IP Working Group')
mipMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1))
mipSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 1))
mipSecurity = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 2))
mipMN = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3))
mipMA = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 4))
mipFA = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5))
mipHA = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 6))
mnSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 1))
mnDiscovery = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 2))
mnRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 3))
maAdvertisement = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 4, 2))
faSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5, 1))
faAdvertisement = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5, 2))
faRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5, 3))
haRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 6, 3))
class RegistrationFlags(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("vjCompression", 0), ("gre", 1), ("minEnc", 2), ("decapsulationbyMN", 3), ("broadcastDatagram", 4), ("simultaneousBindings", 5))

mipEntities = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 1, 1), Bits().clone(namedValues=NamedValues(("mobileNode", 0), ("foreignAgent", 1), ("homeAgent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipEntities.setStatus('current')
mipEnable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mipEnable.setStatus('current')
mipEncapsulationSupported = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 1, 3), Bits().clone(namedValues=NamedValues(("ipInIp", 0), ("gre", 1), ("minEnc", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipEncapsulationSupported.setStatus('current')
mipSecAssocTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 2, 1), )
if mibBuilder.loadTexts: mipSecAssocTable.setStatus('current')
mipSecAssocEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1), ).setIndexNames((0, "MIP-MIB", "mipSecPeerAddress"), (0, "MIP-MIB", "mipSecSPI"))
if mibBuilder.loadTexts: mipSecAssocEntry.setStatus('current')
mipSecPeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: mipSecPeerAddress.setStatus('current')
mipSecSPI = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: mipSecSPI.setStatus('current')
mipSecAlgorithmType = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("md5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mipSecAlgorithmType.setStatus('current')
mipSecAlgorithmMode = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("prefixSuffix", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mipSecAlgorithmMode.setStatus('current')
mipSecKey = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mipSecKey.setStatus('current')
mipSecReplayMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("timestamps", 2), ("nonces", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mipSecReplayMethod.setStatus('current')
mipSecTotalViolations = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecTotalViolations.setStatus('current')
mipSecViolationTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 2, 3), )
if mibBuilder.loadTexts: mipSecViolationTable.setStatus('current')
mipSecViolationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1), ).setIndexNames((0, "MIP-MIB", "mipSecViolatorAddress"))
if mibBuilder.loadTexts: mipSecViolationEntry.setStatus('current')
mipSecViolatorAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecViolatorAddress.setStatus('current')
mipSecViolationCounter = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecViolationCounter.setStatus('current')
mipSecRecentViolationSPI = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecRecentViolationSPI.setStatus('current')
mipSecRecentViolationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecRecentViolationTime.setStatus('current')
mipSecRecentViolationIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecRecentViolationIDLow.setStatus('current')
mipSecRecentViolationIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecRecentViolationIDHigh.setStatus('current')
mipSecRecentViolationReason = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noMobilitySecurityAssociation", 1), ("badAuthenticator", 2), ("badIdentifier", 3), ("badSPI", 4), ("missingSecurityExtension", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSecRecentViolationReason.setStatus('current')
mnState = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("home", 1), ("registered", 2), ("pending", 3), ("isolated", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnState.setStatus('current')
mnHomeAddress = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnHomeAddress.setStatus('current')
mnHATable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3), )
if mibBuilder.loadTexts: mnHATable.setStatus('current')
mnHAEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1), ).setIndexNames((0, "MIP-MIB", "mnHAAddress"))
if mibBuilder.loadTexts: mnHAEntry.setStatus('current')
mnHAAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: mnHAAddress.setStatus('current')
mnCurrentHA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnCurrentHA.setStatus('current')
mnHAStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mnHAStatus.setStatus('current')
mnFATable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1), )
if mibBuilder.loadTexts: mnFATable.setStatus('current')
mnFAEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1, 1), ).setIndexNames((0, "MIP-MIB", "mnFAAddress"), (0, "MIP-MIB", "mnCOA"))
if mibBuilder.loadTexts: mnFAEntry.setStatus('current')
mnFAAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnFAAddress.setStatus('current')
mnCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnCOA.setStatus('current')
mnRecentAdvReceived = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2))
mnAdvSourceAddress = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvSourceAddress.setStatus('current')
mnAdvSequence = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvSequence.setStatus('current')
mnAdvFlags = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 3), Bits().clone(namedValues=NamedValues(("vjCompression", 0), ("gre", 1), ("minEnc", 2), ("foreignAgent", 3), ("homeAgent", 4), ("busy", 5), ("regRequired", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvFlags.setStatus('current')
mnAdvMaxRegLifetime = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvMaxRegLifetime.setStatus('current')
mnAdvMaxAdvLifetime = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvMaxAdvLifetime.setStatus('current')
mnAdvTimeReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvTimeReceived.setStatus('current')
mnSolicitationsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnSolicitationsSent.setStatus('current')
mnAdvertisementsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvertisementsReceived.setStatus('current')
mnAdvsDroppedInvalidExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvsDroppedInvalidExtension.setStatus('current')
mnAdvsIgnoredUnknownExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAdvsIgnoredUnknownExtension.setStatus('current')
mnMoveFromHAToFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnMoveFromHAToFA.setStatus('current')
mnMoveFromFAToFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnMoveFromFAToFA.setStatus('current')
mnMoveFromFAToHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnMoveFromFAToHA.setStatus('current')
mnGratuitousARPsSend = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnGratuitousARPsSend.setStatus('current')
mnAgentRebootsDectected = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnAgentRebootsDectected.setStatus('current')
mnRegistrationTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1), )
if mibBuilder.loadTexts: mnRegistrationTable.setStatus('current')
mnRegistrationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1), ).setIndexNames((0, "MIP-MIB", "mnRegAgentAddress"), (0, "MIP-MIB", "mnRegCOA"))
if mibBuilder.loadTexts: mnRegistrationEntry.setStatus('current')
mnRegAgentAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegAgentAddress.setStatus('current')
mnRegCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegCOA.setStatus('current')
mnRegFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 3), RegistrationFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegFlags.setStatus('current')
mnRegIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegIDLow.setStatus('current')
mnRegIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegIDHigh.setStatus('current')
mnRegTimeRequested = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegTimeRequested.setStatus('current')
mnRegTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 7), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegTimeRemaining.setStatus('current')
mnRegTimeSent = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegTimeSent.setStatus('current')
mnRegIsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegIsAccepted.setStatus('current')
mnCOAIsLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnCOAIsLocal.setStatus('current')
mnRegRequestsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegRequestsSent.setStatus('current')
mnDeRegRequestsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnDeRegRequestsSent.setStatus('current')
mnRegRepliesRecieved = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegRepliesRecieved.setStatus('current')
mnDeRegRepliesRecieved = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnDeRegRepliesRecieved.setStatus('current')
mnRepliesInvalidHomeAddress = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesInvalidHomeAddress.setStatus('current')
mnRepliesUnknownHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesUnknownHA.setStatus('current')
mnRepliesUnknownFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesUnknownFA.setStatus('current')
mnRepliesInvalidID = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesInvalidID.setStatus('current')
mnRepliesDroppedInvalidExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesDroppedInvalidExtension.setStatus('current')
mnRepliesIgnoredUnknownExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesIgnoredUnknownExtension.setStatus('current')
mnRepliesHAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesHAAuthenticationFailure.setStatus('current')
mnRepliesFAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRepliesFAAuthenticationFailure.setStatus('current')
mnRegRequestsAccepted = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegRequestsAccepted.setStatus('current')
mnRegRequestsDeniedByHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegRequestsDeniedByHA.setStatus('current')
mnRegRequestsDeniedByFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegRequestsDeniedByFA.setStatus('current')
mnRegRequestsDeniedByHADueToID = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegRequestsDeniedByHADueToID.setStatus('current')
mnRegRequestsWithDirectedBroadcast = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnRegRequestsWithDirectedBroadcast.setStatus('current')
maAdvConfigTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1), )
if mibBuilder.loadTexts: maAdvConfigTable.setStatus('current')
maAdvConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1), ).setIndexNames((0, "MIP-MIB", "maInterfaceAddress"))
if mibBuilder.loadTexts: maAdvConfigEntry.setStatus('current')
maInterfaceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: maInterfaceAddress.setStatus('current')
maAdvMaxRegLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvMaxRegLifetime.setStatus('current')
maAdvPrefixLengthInclusion = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvPrefixLengthInclusion.setStatus('current')
maAdvAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvAddress.setStatus('current')
maAdvMaxInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvMaxInterval.setStatus('current')
maAdvMinInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvMinInterval.setStatus('current')
maAdvMaxAdvLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvMaxAdvLifetime.setStatus('current')
maAdvResponseSolicitationOnly = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvResponseSolicitationOnly.setStatus('current')
maAdvStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: maAdvStatus.setStatus('current')
maAdvertisementsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maAdvertisementsSent.setStatus('current')
maAdvsSentForSolicitation = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maAdvsSentForSolicitation.setStatus('current')
maSolicitationsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maSolicitationsReceived.setStatus('current')
faCOATable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1), )
if mibBuilder.loadTexts: faCOATable.setStatus('current')
faCOAEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1, 1), ).setIndexNames((0, "MIP-MIB", "faSupportedCOA"))
if mibBuilder.loadTexts: faCOAEntry.setStatus('current')
faSupportedCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: faSupportedCOA.setStatus('current')
faCOAStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: faCOAStatus.setStatus('current')
faIsBusy = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faIsBusy.setStatus('current')
faRegistrationRequired = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faRegistrationRequired.setStatus('current')
faVisitorTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1), )
if mibBuilder.loadTexts: faVisitorTable.setStatus('current')
faVisitorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1), ).setIndexNames((0, "MIP-MIB", "faVisitorIPAddress"))
if mibBuilder.loadTexts: faVisitorEntry.setStatus('current')
faVisitorIPAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorIPAddress.setStatus('current')
faVisitorHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorHomeAddress.setStatus('current')
faVisitorHomeAgentAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorHomeAgentAddress.setStatus('current')
faVisitorTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorTimeGranted.setStatus('current')
faVisitorTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 5), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorTimeRemaining.setStatus('current')
faVisitorRegFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 6), RegistrationFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorRegFlags.setStatus('current')
faVisitorRegIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorRegIDLow.setStatus('current')
faVisitorRegIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorRegIDHigh.setStatus('current')
faVisitorRegIsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVisitorRegIsAccepted.setStatus('current')
faRegRequestsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faRegRequestsReceived.setStatus('current')
faRegRequestsRelayed = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faRegRequestsRelayed.setStatus('current')
faReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faReasonUnspecified.setStatus('current')
faAdmProhibited = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faAdmProhibited.setStatus('current')
faInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faInsufficientResource.setStatus('current')
faMNAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faMNAuthenticationFailure.setStatus('current')
faRegLifetimeTooLong = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faRegLifetimeTooLong.setStatus('current')
faPoorlyFormedRequests = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faPoorlyFormedRequests.setStatus('current')
faEncapsulationUnavailable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faEncapsulationUnavailable.setStatus('current')
faVJCompressionUnavailable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faVJCompressionUnavailable.setStatus('current')
faHAUnreachable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faHAUnreachable.setStatus('current')
faRegRepliesRecieved = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faRegRepliesRecieved.setStatus('current')
faRegRepliesRelayed = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faRegRepliesRelayed.setStatus('current')
faHAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faHAAuthenticationFailure.setStatus('current')
faPoorlyFormedReplies = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faPoorlyFormedReplies.setStatus('current')
haMobilityBindingTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1), )
if mibBuilder.loadTexts: haMobilityBindingTable.setStatus('current')
haMobilityBindingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1), ).setIndexNames((0, "MIP-MIB", "haMobilityBindingMN"), (0, "MIP-MIB", "haMobilityBindingCOA"))
if mibBuilder.loadTexts: haMobilityBindingEntry.setStatus('current')
haMobilityBindingMN = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingMN.setStatus('current')
haMobilityBindingCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingCOA.setStatus('current')
haMobilityBindingSourceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingSourceAddress.setStatus('current')
haMobilityBindingRegFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 4), RegistrationFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingRegFlags.setStatus('current')
haMobilityBindingRegIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingRegIDLow.setStatus('current')
haMobilityBindingRegIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingRegIDHigh.setStatus('current')
haMobilityBindingTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingTimeGranted.setStatus('current')
haMobilityBindingTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 8), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: haMobilityBindingTimeRemaining.setStatus('current')
haCounterTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2), )
if mibBuilder.loadTexts: haCounterTable.setStatus('current')
haCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1), ).setIndexNames((0, "MIP-MIB", "haMobilityBindingMN"))
if mibBuilder.loadTexts: haCounterEntry.setStatus('current')
haServiceRequestsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haServiceRequestsAccepted.setStatus('current')
haServiceRequestsDenied = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haServiceRequestsDenied.setStatus('current')
haOverallServiceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 4), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: haOverallServiceTime.setStatus('current')
haRecentServiceAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haRecentServiceAcceptedTime.setStatus('current')
haRecentServiceDeniedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haRecentServiceDeniedTime.setStatus('current')
haRecentServiceDeniedCode = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 129, 130, 131, 132, 133, 134, 135, 136))).clone(namedValues=NamedValues(("reasonUnspecified", 128), ("admProhibited", 129), ("insufficientResource", 130), ("mnAuthenticationFailure", 131), ("faAuthenticationFailure", 132), ("idMismatch", 133), ("poorlyFormedRequest", 134), ("tooManyBindings", 135), ("unknownHA", 136)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haRecentServiceDeniedCode.setStatus('current')
haRegistrationAccepted = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haRegistrationAccepted.setStatus('current')
haMultiBindingUnsupported = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMultiBindingUnsupported.setStatus('current')
haReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haReasonUnspecified.setStatus('current')
haAdmProhibited = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haAdmProhibited.setStatus('current')
haInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haInsufficientResource.setStatus('current')
haMNAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haMNAuthenticationFailure.setStatus('current')
haFAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haFAAuthenticationFailure.setStatus('current')
haIDMismatch = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIDMismatch.setStatus('current')
haPoorlyFormedRequest = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPoorlyFormedRequest.setStatus('current')
haTooManyBindings = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTooManyBindings.setStatus('current')
haUnknownHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haUnknownHA.setStatus('current')
haGratuitiousARPsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haGratuitiousARPsSent.setStatus('current')
haProxyARPsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProxyARPsSent.setStatus('current')
haRegRequestsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haRegRequestsReceived.setStatus('current')
haDeRegRequestsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haDeRegRequestsReceived.setStatus('current')
haRegRepliesSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haRegRepliesSent.setStatus('current')
haDeRegRepliesSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haDeRegRepliesSent.setStatus('current')
mipMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 2))
mipMIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 2, 0))
mipAuthFailure = NotificationType((1, 3, 6, 1, 2, 1, 44, 2, 0, 1)).setObjects(("MIP-MIB", "mipSecViolatorAddress"), ("MIP-MIB", "mipSecRecentViolationSPI"), ("MIP-MIB", "mipSecRecentViolationIDLow"), ("MIP-MIB", "mipSecRecentViolationIDHigh"), ("MIP-MIB", "mipSecRecentViolationReason"))
if mibBuilder.loadTexts: mipAuthFailure.setStatus('current')
mipMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 3))
mipGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 3, 1))
mipCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 3, 2))
mipCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 44, 3, 2, 1)).setObjects(("MIP-MIB", "mipSystemGroup"), ("MIP-MIB", "mipSecAssociationGroup"), ("MIP-MIB", "mipSecViolationGroup"), ("MIP-MIB", "mnSystemGroup"), ("MIP-MIB", "mnDiscoveryGroup"), ("MIP-MIB", "mnRegistrationGroup"), ("MIP-MIB", "maAdvertisementGroup"), ("MIP-MIB", "faSystemGroup"), ("MIP-MIB", "faAdvertisementGroup"), ("MIP-MIB", "faRegistrationGroup"), ("MIP-MIB", "haRegistrationGroup"), ("MIP-MIB", "haRegNodeCountersGroup"), ("MIP-MIB", "mipSecNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mipCompliance = mipCompliance.setStatus('current')
mipSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 1)).setObjects(("MIP-MIB", "mipEntities"), ("MIP-MIB", "mipEnable"), ("MIP-MIB", "mipEncapsulationSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mipSystemGroup = mipSystemGroup.setStatus('current')
mipSecAssociationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 2)).setObjects(("MIP-MIB", "mipSecAlgorithmType"), ("MIP-MIB", "mipSecAlgorithmMode"), ("MIP-MIB", "mipSecKey"), ("MIP-MIB", "mipSecReplayMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mipSecAssociationGroup = mipSecAssociationGroup.setStatus('current')
mipSecViolationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 3)).setObjects(("MIP-MIB", "mipSecTotalViolations"), ("MIP-MIB", "mipSecViolationCounter"), ("MIP-MIB", "mipSecRecentViolationSPI"), ("MIP-MIB", "mipSecRecentViolationTime"), ("MIP-MIB", "mipSecRecentViolationIDLow"), ("MIP-MIB", "mipSecRecentViolationIDHigh"), ("MIP-MIB", "mipSecRecentViolationReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mipSecViolationGroup = mipSecViolationGroup.setStatus('current')
mnSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 4)).setObjects(("MIP-MIB", "mnState"), ("MIP-MIB", "mnCurrentHA"), ("MIP-MIB", "mnHomeAddress"), ("MIP-MIB", "mnHAStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mnSystemGroup = mnSystemGroup.setStatus('current')
mnDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 5)).setObjects(("MIP-MIB", "mnFAAddress"), ("MIP-MIB", "mnCOA"), ("MIP-MIB", "mnAdvSourceAddress"), ("MIP-MIB", "mnAdvSequence"), ("MIP-MIB", "mnAdvFlags"), ("MIP-MIB", "mnAdvMaxRegLifetime"), ("MIP-MIB", "mnAdvMaxAdvLifetime"), ("MIP-MIB", "mnAdvTimeReceived"), ("MIP-MIB", "mnSolicitationsSent"), ("MIP-MIB", "mnAdvertisementsReceived"), ("MIP-MIB", "mnAdvsDroppedInvalidExtension"), ("MIP-MIB", "mnAdvsIgnoredUnknownExtension"), ("MIP-MIB", "mnMoveFromHAToFA"), ("MIP-MIB", "mnMoveFromFAToFA"), ("MIP-MIB", "mnMoveFromFAToHA"), ("MIP-MIB", "mnGratuitousARPsSend"), ("MIP-MIB", "mnAgentRebootsDectected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mnDiscoveryGroup = mnDiscoveryGroup.setStatus('current')
mnRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 6)).setObjects(("MIP-MIB", "mnRegAgentAddress"), ("MIP-MIB", "mnRegCOA"), ("MIP-MIB", "mnRegFlags"), ("MIP-MIB", "mnRegIDLow"), ("MIP-MIB", "mnRegIDHigh"), ("MIP-MIB", "mnRegTimeRequested"), ("MIP-MIB", "mnRegTimeRemaining"), ("MIP-MIB", "mnRegTimeSent"), ("MIP-MIB", "mnRegIsAccepted"), ("MIP-MIB", "mnCOAIsLocal"), ("MIP-MIB", "mnRegRequestsSent"), ("MIP-MIB", "mnRegRepliesRecieved"), ("MIP-MIB", "mnDeRegRequestsSent"), ("MIP-MIB", "mnDeRegRepliesRecieved"), ("MIP-MIB", "mnRepliesInvalidHomeAddress"), ("MIP-MIB", "mnRepliesUnknownHA"), ("MIP-MIB", "mnRepliesUnknownFA"), ("MIP-MIB", "mnRepliesInvalidID"), ("MIP-MIB", "mnRepliesDroppedInvalidExtension"), ("MIP-MIB", "mnRepliesIgnoredUnknownExtension"), ("MIP-MIB", "mnRepliesHAAuthenticationFailure"), ("MIP-MIB", "mnRepliesFAAuthenticationFailure"), ("MIP-MIB", "mnRegRequestsAccepted"), ("MIP-MIB", "mnRegRequestsDeniedByHA"), ("MIP-MIB", "mnRegRequestsDeniedByFA"), ("MIP-MIB", "mnRegRequestsDeniedByHADueToID"), ("MIP-MIB", "mnRegRequestsWithDirectedBroadcast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mnRegistrationGroup = mnRegistrationGroup.setStatus('current')
maAdvertisementGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 7)).setObjects(("MIP-MIB", "maAdvMaxRegLifetime"), ("MIP-MIB", "maAdvPrefixLengthInclusion"), ("MIP-MIB", "maAdvAddress"), ("MIP-MIB", "maAdvMaxInterval"), ("MIP-MIB", "maAdvMinInterval"), ("MIP-MIB", "maAdvMaxAdvLifetime"), ("MIP-MIB", "maAdvResponseSolicitationOnly"), ("MIP-MIB", "maAdvStatus"), ("MIP-MIB", "maAdvertisementsSent"), ("MIP-MIB", "maAdvsSentForSolicitation"), ("MIP-MIB", "maSolicitationsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    maAdvertisementGroup = maAdvertisementGroup.setStatus('current')
faSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 8)).setObjects(("MIP-MIB", "faCOAStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    faSystemGroup = faSystemGroup.setStatus('current')
faAdvertisementGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 9)).setObjects(("MIP-MIB", "faIsBusy"), ("MIP-MIB", "faRegistrationRequired"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    faAdvertisementGroup = faAdvertisementGroup.setStatus('current')
faRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 10)).setObjects(("MIP-MIB", "faVisitorIPAddress"), ("MIP-MIB", "faVisitorHomeAddress"), ("MIP-MIB", "faVisitorHomeAgentAddress"), ("MIP-MIB", "faVisitorTimeGranted"), ("MIP-MIB", "faVisitorTimeRemaining"), ("MIP-MIB", "faVisitorRegFlags"), ("MIP-MIB", "faVisitorRegIDLow"), ("MIP-MIB", "faVisitorRegIDHigh"), ("MIP-MIB", "faVisitorRegIsAccepted"), ("MIP-MIB", "faRegRequestsReceived"), ("MIP-MIB", "faRegRequestsRelayed"), ("MIP-MIB", "faReasonUnspecified"), ("MIP-MIB", "faAdmProhibited"), ("MIP-MIB", "faInsufficientResource"), ("MIP-MIB", "faMNAuthenticationFailure"), ("MIP-MIB", "faRegLifetimeTooLong"), ("MIP-MIB", "faPoorlyFormedRequests"), ("MIP-MIB", "faEncapsulationUnavailable"), ("MIP-MIB", "faVJCompressionUnavailable"), ("MIP-MIB", "faHAUnreachable"), ("MIP-MIB", "faRegRepliesRecieved"), ("MIP-MIB", "faRegRepliesRelayed"), ("MIP-MIB", "faHAAuthenticationFailure"), ("MIP-MIB", "faPoorlyFormedReplies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    faRegistrationGroup = faRegistrationGroup.setStatus('current')
haRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 11)).setObjects(("MIP-MIB", "haMobilityBindingMN"), ("MIP-MIB", "haMobilityBindingCOA"), ("MIP-MIB", "haMobilityBindingSourceAddress"), ("MIP-MIB", "haMobilityBindingRegFlags"), ("MIP-MIB", "haMobilityBindingRegIDLow"), ("MIP-MIB", "haMobilityBindingRegIDHigh"), ("MIP-MIB", "haMobilityBindingTimeGranted"), ("MIP-MIB", "haMobilityBindingTimeRemaining"), ("MIP-MIB", "haRegistrationAccepted"), ("MIP-MIB", "haMultiBindingUnsupported"), ("MIP-MIB", "haReasonUnspecified"), ("MIP-MIB", "haAdmProhibited"), ("MIP-MIB", "haInsufficientResource"), ("MIP-MIB", "haMNAuthenticationFailure"), ("MIP-MIB", "haFAAuthenticationFailure"), ("MIP-MIB", "haIDMismatch"), ("MIP-MIB", "haPoorlyFormedRequest"), ("MIP-MIB", "haTooManyBindings"), ("MIP-MIB", "haUnknownHA"), ("MIP-MIB", "haGratuitiousARPsSent"), ("MIP-MIB", "haProxyARPsSent"), ("MIP-MIB", "haRegRequestsReceived"), ("MIP-MIB", "haDeRegRequestsReceived"), ("MIP-MIB", "haRegRepliesSent"), ("MIP-MIB", "haDeRegRepliesSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    haRegistrationGroup = haRegistrationGroup.setStatus('current')
haRegNodeCountersGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 12)).setObjects(("MIP-MIB", "haServiceRequestsAccepted"), ("MIP-MIB", "haServiceRequestsDenied"), ("MIP-MIB", "haOverallServiceTime"), ("MIP-MIB", "haRecentServiceAcceptedTime"), ("MIP-MIB", "haRecentServiceDeniedTime"), ("MIP-MIB", "haRecentServiceDeniedCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    haRegNodeCountersGroup = haRegNodeCountersGroup.setStatus('current')
mipSecNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 13)).setObjects(("MIP-MIB", "mipAuthFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mipSecNotificationsGroup = mipSecNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("MIP-MIB", maAdvMinInterval=maAdvMinInterval, mnRegRepliesRecieved=mnRegRepliesRecieved, haMobilityBindingCOA=haMobilityBindingCOA, faSupportedCOA=faSupportedCOA, haRecentServiceAcceptedTime=haRecentServiceAcceptedTime, faVisitorEntry=faVisitorEntry, mnCurrentHA=mnCurrentHA, mnFAAddress=mnFAAddress, maAdvsSentForSolicitation=maAdvsSentForSolicitation, mnDeRegRequestsSent=mnDeRegRequestsSent, haInsufficientResource=haInsufficientResource, mnSolicitationsSent=mnSolicitationsSent, mnAdvsDroppedInvalidExtension=mnAdvsDroppedInvalidExtension, faRegRepliesRelayed=faRegRepliesRelayed, faVisitorRegIsAccepted=faVisitorRegIsAccepted, mipHA=mipHA, maAdvertisementsSent=maAdvertisementsSent, mipSecRecentViolationTime=mipSecRecentViolationTime, faRegRequestsReceived=faRegRequestsReceived, haCounterEntry=haCounterEntry, maAdvPrefixLengthInclusion=maAdvPrefixLengthInclusion, mnRegistrationGroup=mnRegistrationGroup, mnRegRequestsDeniedByHADueToID=mnRegRequestsDeniedByHADueToID, mipGroups=mipGroups, mnRegRequestsDeniedByHA=mnRegRequestsDeniedByHA, faVisitorTable=faVisitorTable, haRegRequestsReceived=haRegRequestsReceived, mnRegRequestsDeniedByFA=mnRegRequestsDeniedByFA, mnRepliesUnknownFA=mnRepliesUnknownFA, haMobilityBindingTimeGranted=haMobilityBindingTimeGranted, maAdvResponseSolicitationOnly=maAdvResponseSolicitationOnly, faCOAStatus=faCOAStatus, haServiceRequestsDenied=haServiceRequestsDenied, mipSecRecentViolationReason=mipSecRecentViolationReason, faIsBusy=faIsBusy, faVisitorRegFlags=faVisitorRegFlags, faVisitorRegIDLow=faVisitorRegIDLow, haMobilityBindingRegIDLow=haMobilityBindingRegIDLow, mnRepliesDroppedInvalidExtension=mnRepliesDroppedInvalidExtension, mipCompliances=mipCompliances, mipMIB=mipMIB, mnRepliesUnknownHA=mnRepliesUnknownHA, haRegistration=haRegistration, mnCOAIsLocal=mnCOAIsLocal, mipEncapsulationSupported=mipEncapsulationSupported, maInterfaceAddress=maInterfaceAddress, maSolicitationsReceived=maSolicitationsReceived, mnAdvSequence=mnAdvSequence, mipSecKey=mipSecKey, maAdvAddress=maAdvAddress, faPoorlyFormedReplies=faPoorlyFormedReplies, mipSecAssocTable=mipSecAssocTable, haMobilityBindingMN=haMobilityBindingMN, mnFATable=mnFATable, mnRegIDLow=mnRegIDLow, faVisitorHomeAgentAddress=faVisitorHomeAgentAddress, faMNAuthenticationFailure=faMNAuthenticationFailure, haRecentServiceDeniedTime=haRecentServiceDeniedTime, mipSystem=mipSystem, mnAdvertisementsReceived=mnAdvertisementsReceived, maAdvMaxAdvLifetime=maAdvMaxAdvLifetime, faAdvertisement=faAdvertisement, haReasonUnspecified=haReasonUnspecified, faCOATable=faCOATable, maAdvMaxRegLifetime=maAdvMaxRegLifetime, mnRegistration=mnRegistration, mipSecRecentViolationSPI=mipSecRecentViolationSPI, mnAdvFlags=mnAdvFlags, mnRegCOA=mnRegCOA, faVisitorTimeGranted=faVisitorTimeGranted, faVJCompressionUnavailable=faVJCompressionUnavailable, mipEnable=mipEnable, mnRepliesInvalidID=mnRepliesInvalidID, mnSystem=mnSystem, faEncapsulationUnavailable=faEncapsulationUnavailable, RegistrationFlags=RegistrationFlags, mnRegRequestsAccepted=mnRegRequestsAccepted, mipSecTotalViolations=mipSecTotalViolations, mipSecPeerAddress=mipSecPeerAddress, mnFAEntry=mnFAEntry, mnDeRegRepliesRecieved=mnDeRegRepliesRecieved, mipSecAlgorithmType=mipSecAlgorithmType, mnRepliesFAAuthenticationFailure=mnRepliesFAAuthenticationFailure, haTooManyBindings=haTooManyBindings, faRegistrationGroup=faRegistrationGroup, haRegistrationGroup=haRegistrationGroup, maAdvConfigTable=maAdvConfigTable, haDeRegRepliesSent=haDeRegRepliesSent, PYSNMP_MODULE_ID=mipMIB, maAdvertisement=maAdvertisement, mnAdvMaxRegLifetime=mnAdvMaxRegLifetime, haOverallServiceTime=haOverallServiceTime, faRegRepliesRecieved=faRegRepliesRecieved, mipSecViolationGroup=mipSecViolationGroup, faHAAuthenticationFailure=faHAAuthenticationFailure, faVisitorTimeRemaining=faVisitorTimeRemaining, haMNAuthenticationFailure=haMNAuthenticationFailure, mipSecRecentViolationIDLow=mipSecRecentViolationIDLow, mnAgentRebootsDectected=mnAgentRebootsDectected, mnRepliesHAAuthenticationFailure=mnRepliesHAAuthenticationFailure, faInsufficientResource=faInsufficientResource, haIDMismatch=haIDMismatch, mipSecViolationCounter=mipSecViolationCounter, mipSecViolationTable=mipSecViolationTable, faAdvertisementGroup=faAdvertisementGroup, mnDiscovery=mnDiscovery, mnRegRequestsWithDirectedBroadcast=mnRegRequestsWithDirectedBroadcast, haCounterTable=haCounterTable, faCOAEntry=faCOAEntry, mipMIBObjects=mipMIBObjects, mnRegTimeRequested=mnRegTimeRequested, mnGratuitousARPsSend=mnGratuitousARPsSend, haMultiBindingUnsupported=haMultiBindingUnsupported, faReasonUnspecified=faReasonUnspecified, faRegLifetimeTooLong=faRegLifetimeTooLong, mipSecNotificationsGroup=mipSecNotificationsGroup, mnRegistrationEntry=mnRegistrationEntry, mipEntities=mipEntities, mipAuthFailure=mipAuthFailure, haMobilityBindingEntry=haMobilityBindingEntry, maAdvStatus=maAdvStatus, faSystemGroup=faSystemGroup, mnRepliesIgnoredUnknownExtension=mnRepliesIgnoredUnknownExtension, faRegRequestsRelayed=faRegRequestsRelayed, faAdmProhibited=faAdmProhibited, mnRepliesInvalidHomeAddress=mnRepliesInvalidHomeAddress, haProxyARPsSent=haProxyARPsSent, faPoorlyFormedRequests=faPoorlyFormedRequests, mnRegIsAccepted=mnRegIsAccepted, mnHATable=mnHATable, mnRegistrationTable=mnRegistrationTable, mnRegAgentAddress=mnRegAgentAddress, maAdvConfigEntry=maAdvConfigEntry, mipSystemGroup=mipSystemGroup, mnRegRequestsSent=mnRegRequestsSent, haRegistrationAccepted=haRegistrationAccepted, haUnknownHA=haUnknownHA, haMobilityBindingTable=haMobilityBindingTable, mnRecentAdvReceived=mnRecentAdvReceived, mipSecViolatorAddress=mipSecViolatorAddress, maAdvMaxInterval=maAdvMaxInterval, haGratuitiousARPsSent=haGratuitiousARPsSent, mnHomeAddress=mnHomeAddress, mipSecSPI=mipSecSPI, mnMoveFromFAToHA=mnMoveFromFAToHA, haFAAuthenticationFailure=haFAAuthenticationFailure, haDeRegRequestsReceived=haDeRegRequestsReceived, mipSecAssocEntry=mipSecAssocEntry, mnHAAddress=mnHAAddress, mipMIBNotificationPrefix=mipMIBNotificationPrefix, mnRegIDHigh=mnRegIDHigh, faVisitorIPAddress=faVisitorIPAddress, faVisitorHomeAddress=faVisitorHomeAddress, haRegNodeCountersGroup=haRegNodeCountersGroup, haServiceRequestsAccepted=haServiceRequestsAccepted, faRegistration=faRegistration, mipSecRecentViolationIDHigh=mipSecRecentViolationIDHigh, faSystem=faSystem, mnMoveFromHAToFA=mnMoveFromHAToFA, haMobilityBindingSourceAddress=haMobilityBindingSourceAddress, mnAdvTimeReceived=mnAdvTimeReceived, mnState=mnState, haMobilityBindingRegIDHigh=haMobilityBindingRegIDHigh, mipSecViolationEntry=mipSecViolationEntry, mnDiscoveryGroup=mnDiscoveryGroup, maAdvertisementGroup=maAdvertisementGroup, haAdmProhibited=haAdmProhibited, mnMoveFromFAToFA=mnMoveFromFAToFA, mnRegTimeSent=mnRegTimeSent, mipMA=mipMA, mipMIBNotifications=mipMIBNotifications, haRecentServiceDeniedCode=haRecentServiceDeniedCode, mnHAEntry=mnHAEntry, haMobilityBindingTimeRemaining=haMobilityBindingTimeRemaining, haPoorlyFormedRequest=haPoorlyFormedRequest, mnAdvsIgnoredUnknownExtension=mnAdvsIgnoredUnknownExtension, mnSystemGroup=mnSystemGroup, mnAdvMaxAdvLifetime=mnAdvMaxAdvLifetime, faVisitorRegIDHigh=faVisitorRegIDHigh, mnHAStatus=mnHAStatus, mnCOA=mnCOA, faRegistrationRequired=faRegistrationRequired, haRegRepliesSent=haRegRepliesSent, mipCompliance=mipCompliance, mnRegTimeRemaining=mnRegTimeRemaining, faHAUnreachable=faHAUnreachable, mipMN=mipMN, mnRegFlags=mnRegFlags, mipSecurity=mipSecurity, mipSecAlgorithmMode=mipSecAlgorithmMode, haMobilityBindingRegFlags=haMobilityBindingRegFlags, mipSecReplayMethod=mipSecReplayMethod, mipSecAssociationGroup=mipSecAssociationGroup, mipFA=mipFA, mnAdvSourceAddress=mnAdvSourceAddress, mipMIBConformance=mipMIBConformance)
