#
# PySNMP MIB module ZYXEL-MES2110-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-MES2110-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:44:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, Counter64, IpAddress, Counter32, Bits, iso, ObjectIdentity, Gauge32, MibIdentifier, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Counter64", "IpAddress", "Counter32", "Bits", "iso", "ObjectIdentity", "Gauge32", "MibIdentifier", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
accessSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5))
esSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8))
mes2110_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110))
mes2110_SystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1))
mes2110_Mgt = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2))
mes2110_Port = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3))
mes2110_Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4))
mes2110_SystemContact = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mes2110_SystemContact.setStatus('mandatory')
mes2110_SystemName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mes2110_SystemName.setStatus('mandatory')
mes2110_SystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mes2110_SystemLocation.setStatus('mandatory')
mes2110_MgtSnmpVer = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtSnmpVer.setStatus('mandatory')
mes2110_MgtModPN = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModPN.setStatus('mandatory')
mes2110_MgtModSN = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModSN.setStatus('mandatory')
mes2110_MgtModManuDate = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModManuDate.setStatus('mandatory')
mes2110_MgtModRev = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModRev.setStatus('mandatory')
mes2110_MgtModDesc = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModDesc.setStatus('mandatory')
communityStringRO = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStringRO.setStatus('mandatory')
communityStringRW = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStringRW.setStatus('mandatory')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGateway.setStatus('mandatory')
interfaceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpAddress.setStatus('mandatory')
interfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceSubnetMask.setStatus('mandatory')
mgtStp = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtStp.setStatus('mandatory')
trapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13), )
if mibBuilder.loadTexts: trapManagerTable.setStatus('mandatory')
trapManagerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1), ).setIndexNames((0, "ZYXEL-MES2110-MIB", "trapManagerIndex"))
if mibBuilder.loadTexts: trapManagerTableEntry.setStatus('mandatory')
trapManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapManagerIndex.setStatus('mandatory')
trapManagerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerIpAddress.setStatus('mandatory')
trapManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerName.setStatus('mandatory')
trapManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerStatus.setStatus('mandatory')
mes2110_PortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1), )
if mibBuilder.loadTexts: mes2110_PortTable.setStatus('mandatory')
mes2110_PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1), ).setIndexNames((0, "ZYXEL-MES2110-MIB", "portIndex"))
if mibBuilder.loadTexts: mes2110_PortEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('mandatory')
portAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("disable", 1), ("enable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminStatus.setStatus('mandatory')
portLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkStatus.setStatus('mandatory')
portSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed-10M", 1), ("speed-100M", 2), ("speed-1000M", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedMode.setStatus('mandatory')
portDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDuplexMode.setStatus('mandatory')
portAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAuto.setStatus('mandatory')
portFfc = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFfc.setStatus('mandatory')
almColdStart = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,1))
almWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,2))
almLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,3))
almLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,4))
almConfChange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,5))
mibBuilder.exportSymbols("ZYXEL-MES2110-MIB", mes2110_SystemInfo=mes2110_SystemInfo, trapManagerTableEntry=trapManagerTableEntry, mes2110_MIB=mes2110_MIB, mes2110_MgtModRev=mes2110_MgtModRev, mes2110_Port=mes2110_Port, trapManagerStatus=trapManagerStatus, trapManagerIndex=trapManagerIndex, mes2110_MgtModDesc=mes2110_MgtModDesc, mgtStp=mgtStp, trapManagerName=trapManagerName, defaultGateway=defaultGateway, almConfChange=almConfChange, mes2110_SystemContact=mes2110_SystemContact, portAuto=portAuto, mes2110_PortTable=mes2110_PortTable, portFfc=portFfc, interfaceSubnetMask=interfaceSubnetMask, mes2110_MgtModPN=mes2110_MgtModPN, accessSwitch=accessSwitch, mes2110_SystemName=mes2110_SystemName, communityStringRO=communityStringRO, communityStringRW=communityStringRW, almLinkUp=almLinkUp, almWarmStart=almWarmStart, portAdminStatus=portAdminStatus, almColdStart=almColdStart, mes2110_Mgt=mes2110_Mgt, portName=portName, mes2110_Traps=mes2110_Traps, esSeries=esSeries, trapManagerIpAddress=trapManagerIpAddress, trapManagerTable=trapManagerTable, interfaceIpAddress=interfaceIpAddress, mes2110_MgtSnmpVer=mes2110_MgtSnmpVer, mes2110_MgtModManuDate=mes2110_MgtModManuDate, mes2110_SystemLocation=mes2110_SystemLocation, products=products, portDuplexMode=portDuplexMode, portLinkStatus=portLinkStatus, portSpeedMode=portSpeedMode, mes2110_PortEntry=mes2110_PortEntry, portIndex=portIndex, almLinkDown=almLinkDown, zyxel=zyxel, mes2110_MgtModSN=mes2110_MgtModSN)
