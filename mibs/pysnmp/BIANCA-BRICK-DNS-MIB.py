#
# PySNMP MIB module BIANCA-BRICK-DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-DNS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Integer32, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, Unsigned32, MibIdentifier, Counter64, IpAddress, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Integer32", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "Unsigned32", "MibIdentifier", "Counter64", "IpAddress", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
ipDns = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 20))
ipDnsDhcpAssign = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("self", 2), ("global", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsDhcpAssign.setStatus('mandatory')
ipDnsIpcpAssign = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("self", 2), ("global", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsIpcpAssign.setStatus('mandatory')
ipDnsUsePosCache = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsUsePosCache.setStatus('mandatory')
ipDnsUseNegCache = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsUseNegCache.setStatus('mandatory')
ipDnsMaxCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsMaxCacheSize.setStatus('mandatory')
ipDnsPositiveTtl = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsPositiveTtl.setStatus('mandatory')
ipDnsNegativeTtl = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsNegativeTtl.setStatus('mandatory')
ipDnsDefaultIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsDefaultIfIndex.setStatus('mandatory')
ipDnsNumReceives = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumReceives.setStatus('mandatory')
ipDnsNumInvalids = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumInvalids.setStatus('mandatory')
ipDnsNumRequests = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumRequests.setStatus('mandatory')
ipDnsNumCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumCacheHits.setStatus('mandatory')
ipDnsNumForwards = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumForwards.setStatus('mandatory')
ipDnsNumOks = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumOks.setStatus('mandatory')
ipDnsNumFails = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumFails.setStatus('mandatory')
ipDnsDynamicGlobals = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsDynamicGlobals.setStatus('mandatory')
ipDnsTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16), )
if mibBuilder.loadTexts: ipDnsTable.setStatus('mandatory')
ipDnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1), ).setIndexNames((0, "BIANCA-BRICK-DNS-MIB", "ipDnsEntName"))
if mibBuilder.loadTexts: ipDnsEntry.setStatus('mandatory')
ipDnsEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntName.setStatus('mandatory')
ipDnsEntIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntIpaddr.setStatus('mandatory')
ipDnsEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntIfIndex.setStatus('mandatory')
ipDnsEntResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("negative", 2), ("positive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntResponse.setStatus('mandatory')
ipDnsEntStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntStatic.setStatus('mandatory')
ipDnsEntTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntTtl.setStatus('mandatory')
ipDnsEntLru = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntLru.setStatus('mandatory')
ipDnsEntHash = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsEntHash.setStatus('mandatory')
ipDnsEntRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntRefCount.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-DNS-MIB", ipDnsEntIpaddr=ipDnsEntIpaddr, ipDnsDynamicGlobals=ipDnsDynamicGlobals, ipDnsNumOks=ipDnsNumOks, ipDnsPositiveTtl=ipDnsPositiveTtl, biboip=biboip, ipDnsDefaultIfIndex=ipDnsDefaultIfIndex, private=private, ipDnsNumReceives=ipDnsNumReceives, ipDnsNegativeTtl=ipDnsNegativeTtl, internet=internet, ipDnsMaxCacheSize=ipDnsMaxCacheSize, ipDnsEntIfIndex=ipDnsEntIfIndex, ipDnsEntry=ipDnsEntry, enterprises=enterprises, ipDnsEntResponse=ipDnsEntResponse, ipDnsTable=ipDnsTable, ipDnsNumInvalids=ipDnsNumInvalids, ipDnsIpcpAssign=ipDnsIpcpAssign, ipDnsUseNegCache=ipDnsUseNegCache, ipDnsEntRefCount=ipDnsEntRefCount, bibo=bibo, ipDnsEntTtl=ipDnsEntTtl, ipDnsEntLru=ipDnsEntLru, ipDns=ipDns, ipDnsEntHash=ipDnsEntHash, ipDnsNumRequests=ipDnsNumRequests, ipDnsDhcpAssign=ipDnsDhcpAssign, ipDnsNumForwards=ipDnsNumForwards, org=org, ipDnsUsePosCache=ipDnsUsePosCache, bintec=bintec, ipDnsNumFails=ipDnsNumFails, dod=dod, ipDnsEntName=ipDnsEntName, ipDnsNumCacheHits=ipDnsNumCacheHits, ipDnsEntStatic=ipDnsEntStatic)
