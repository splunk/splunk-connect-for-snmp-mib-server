#
# PySNMP MIB module HPN-ICF-EVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-EVC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:26:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, NotificationType, Integer32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Unsigned32, Bits, Gauge32, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "NotificationType", "Integer32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Unsigned32", "Bits", "Gauge32", "Counter32", "ObjectIdentity")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
hpnicfEvc = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106))
hpnicfEvc.setRevisions(('2009-08-08 10:00',))
if mibBuilder.loadTexts: hpnicfEvc.setLastUpdated('200908081000Z')
if mibBuilder.loadTexts: hpnicfEvc.setOrganization('')
hpnicfEvcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1))
hpnicfEvcScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 1))
hpnicfEvcSrvInstEncapCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 1, 1), Bits().clone(namedValues=NamedValues(("encapDefault", 0), ("encapUntagged", 1), ("encapTagged", 2), ("encapSvlanId", 3), ("encapSvlanIdList", 4), ("encapSvlanIdOnlyTagged", 5), ("encapSvlanIdCvlanId", 6), ("encapSvlanIdCvlanIdList", 7), ("encapCvlanId", 8), ("encapCvlanIdList", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEncapCapabilities.setStatus('current')
hpnicfEvcPortMaxSrvInstNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcPortMaxSrvInstNum.setStatus('current')
hpnicfEvcSrvInstTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2), )
if mibBuilder.loadTexts: hpnicfEvcSrvInstTable.setStatus('current')
hpnicfEvcSrvInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EVC-MIB", "hpnicfEvcSrvInstId"))
if mibBuilder.loadTexts: hpnicfEvcSrvInstEntry.setStatus('current')
hpnicfEvcSrvInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfEvcSrvInstId.setStatus('current')
hpnicfEvcSrvInstEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("default", 1), ("untagged", 2), ("tagged", 3), ("svlanIdList", 4), ("svlanIdListOnlyTagged", 5), ("svlanIdCvlanId", 6), ("svlanIdCvlanIdList", 7), ("svlanIdCvlanIdAll", 8), ("cvlanIdList", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEncap.setStatus('current')
hpnicfEvcSrvInstSvlanIdListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstSvlanIdListLow.setStatus('current')
hpnicfEvcSrvInstSvlanIdListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstSvlanIdListHigh.setStatus('current')
hpnicfEvcSrvInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstRowStatus.setStatus('current')
hpnicfEvcSrvInstEnableInStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEnableInStat.setStatus('current')
hpnicfEvcSrvInstEnableOutStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEnableOutStat.setStatus('current')
hpnicfEvcSrvInstCvlanIdListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstCvlanIdListLow.setStatus('current')
hpnicfEvcSrvInstCvlanIdListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstCvlanIdListHigh.setStatus('current')
hpnicfEvcSrvInstCarTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3), )
if mibBuilder.loadTexts: hpnicfEvcSrvInstCarTable.setStatus('current')
hpnicfEvcSrvInstCarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EVC-MIB", "hpnicfEvcSrvInstId"))
if mibBuilder.loadTexts: hpnicfEvcSrvInstCarEntry.setStatus('current')
hpnicfEvcSrvInstInCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEvcSrvInstInCarIndex.setStatus('current')
hpnicfEvcSrvInstOutCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutCarIndex.setStatus('current')
hpnicfEvcSrvInstStatInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4), )
if mibBuilder.loadTexts: hpnicfEvcSrvInstStatInfoTable.setStatus('current')
hpnicfEvcSrvInstStatInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EVC-MIB", "hpnicfEvcSrvInstId"))
if mibBuilder.loadTexts: hpnicfEvcSrvInstStatInfoEntry.setStatus('current')
hpnicfEvcSrvInstInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstInPackets.setStatus('current')
hpnicfEvcSrvInstInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstInBytes.setStatus('current')
hpnicfEvcSrvInstOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutPackets.setStatus('current')
hpnicfEvcSrvInstOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutBytes.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-EVC-MIB", hpnicfEvcSrvInstEncap=hpnicfEvcSrvInstEncap, hpnicfEvcSrvInstStatInfoEntry=hpnicfEvcSrvInstStatInfoEntry, hpnicfEvcSrvInstEnableOutStat=hpnicfEvcSrvInstEnableOutStat, hpnicfEvcPortMaxSrvInstNum=hpnicfEvcPortMaxSrvInstNum, hpnicfEvcSrvInstRowStatus=hpnicfEvcSrvInstRowStatus, hpnicfEvcSrvInstEncapCapabilities=hpnicfEvcSrvInstEncapCapabilities, hpnicfEvcSrvInstCarEntry=hpnicfEvcSrvInstCarEntry, hpnicfEvcScalarGroup=hpnicfEvcScalarGroup, hpnicfEvcSrvInstInCarIndex=hpnicfEvcSrvInstInCarIndex, hpnicfEvcSrvInstInBytes=hpnicfEvcSrvInstInBytes, hpnicfEvcSrvInstCvlanIdListHigh=hpnicfEvcSrvInstCvlanIdListHigh, hpnicfEvcSrvInstOutCarIndex=hpnicfEvcSrvInstOutCarIndex, hpnicfEvcSrvInstCvlanIdListLow=hpnicfEvcSrvInstCvlanIdListLow, hpnicfEvc=hpnicfEvc, hpnicfEvcSrvInstEntry=hpnicfEvcSrvInstEntry, hpnicfEvcSrvInstInPackets=hpnicfEvcSrvInstInPackets, hpnicfEvcSrvInstTable=hpnicfEvcSrvInstTable, hpnicfEvcSrvInstId=hpnicfEvcSrvInstId, hpnicfEvcSrvInstSvlanIdListHigh=hpnicfEvcSrvInstSvlanIdListHigh, hpnicfEvcSrvInstEnableInStat=hpnicfEvcSrvInstEnableInStat, hpnicfEvcSrvInstOutBytes=hpnicfEvcSrvInstOutBytes, PYSNMP_MODULE_ID=hpnicfEvc, hpnicfEvcObjects=hpnicfEvcObjects, hpnicfEvcSrvInstSvlanIdListLow=hpnicfEvcSrvInstSvlanIdListLow, hpnicfEvcSrvInstCarTable=hpnicfEvcSrvInstCarTable, hpnicfEvcSrvInstOutPackets=hpnicfEvcSrvInstOutPackets, hpnicfEvcSrvInstStatInfoTable=hpnicfEvcSrvInstStatInfoTable)
