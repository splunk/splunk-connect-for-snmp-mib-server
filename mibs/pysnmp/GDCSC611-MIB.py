#
# PySNMP MIB module GDCSC611-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCSC611-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, Unsigned32, enterprises, Integer32, MibIdentifier, TimeTicks, ObjectIdentity, ModuleIdentity, iso, NotificationType, Counter32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Unsigned32", "enterprises", "Integer32", "MibIdentifier", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "iso", "NotificationType", "Counter32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
bql2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12))
bql611 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 2))
bql621 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 3))
bql611MIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 12, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611MIBVersion.setStatus('mandatory')
bql611WhatAreYouTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 2), )
if mibBuilder.loadTexts: bql611WhatAreYouTable.setStatus('mandatory')
bql611WhatAreYouEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 2, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611WhatAreYouIndex"))
if mibBuilder.loadTexts: bql611WhatAreYouEntry.setStatus('mandatory')
bql611WhatAreYouIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611WhatAreYouIndex.setStatus('mandatory')
bql611BaseCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7))).clone(namedValues=NamedValues(("sc611", 5), ("dc621", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611BaseCardType.setStatus('mandatory')
bql611OptionCard = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611OptionCard.setStatus('mandatory')
bql611DTECardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7))).clone(namedValues=NamedValues(("eia530", 1), ("x21", 2), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611DTECardType.setStatus('mandatory')
bql611CodeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611CodeRev.setStatus('mandatory')
bql611AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611AlarmStatus.setStatus('mandatory')
bql611ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 3), )
if mibBuilder.loadTexts: bql611ConfigTable.setStatus('mandatory')
bql611ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611ConfigIndex"))
if mibBuilder.loadTexts: bql611ConfigEntry.setStatus('mandatory')
bql611ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611ConfigIndex.setStatus('mandatory')
bql611DteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 9, 10))).clone(namedValues=NamedValues(("kBps2Dot4", 1), ("kBps4Dot8", 2), ("kBps9Dot6", 3), ("kBps19Dot2", 4), ("kBps48", 6), ("kBps64", 9), ("kBps128", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611DteRate.setStatus('mandatory')
bql611RateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x50Div3", 1), ("x50Div2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611RateAdaption.setStatus('mandatory')
bql611DteOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("async", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611DteOperation.setStatus('mandatory')
bql611TxClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611TxClkSource.setStatus('mandatory')
bql611WordLength = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bitWord8", 1), ("bitWord9", 2), ("bitWord10", 3), ("bitWord11", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611WordLength.setStatus('mandatory')
bql611OverSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onePercent", 1), ("twoPointThreePercent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611OverSpeed.setStatus('mandatory')
bql611RTS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611RTS.setStatus('mandatory')
bql611RTSCTSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611RTSCTSDelay.setStatus('mandatory')
bql611DCD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inBandRTS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611DCD.setStatus('mandatory')
bql611RDL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611RDL.setStatus('mandatory')
bql611RDLMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v54", 1), ("eocorpn127", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611RDLMethod.setStatus('mandatory')
bql611RDLTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("minutes10", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611RDLTimeout.setStatus('mandatory')
bql611TestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pattern2047", 1), ("pattern511", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611TestPattern.setStatus('mandatory')
bql611DiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 4), )
if mibBuilder.loadTexts: bql611DiagnosticTable.setStatus('mandatory')
bql611DiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 4, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611DiagnosticIndex"))
if mibBuilder.loadTexts: bql611DiagnosticEntry.setStatus('mandatory')
bql611DiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611DiagnosticIndex.setStatus('mandatory')
bql611DiagnosticTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611DiagnosticTest.setStatus('mandatory')
bql611DiagnosticActive = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611DiagnosticActive.setStatus('mandatory')
bql611DiagnosticResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611DiagnosticResults.setStatus('mandatory')
bql611DiagnosticResetErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611DiagnosticResetErrorCount.setStatus('mandatory')
bql611Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9))
bql611AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1))
bql611NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 1))
bql611DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 2))
bql611PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 3))
bql611OutofSyncAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 4))
bql611TxClkOutOfToleranceAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 5))
bql611ExtClkAbsentAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 6))
bql611SealingCurrentNoContinuityAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 7))
bql611DtrNotPresentAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 8))
bql611MajorAlarmBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 9))
bql611MinorAlarmBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 9, 1, 10))
bql621Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11))
bql621AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11, 1))
bql621NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11, 1, 1))
bql621DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11, 1, 2))
bql621PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11, 1, 3))
bql621DtrNotPresentAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11, 1, 4))
bql621MajorAlarmBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11, 1, 5))
bql621MinorAlarmBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 11, 1, 6))
bql611AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 9, 2), )
if mibBuilder.loadTexts: bql611AlarmConfigTable.setStatus('mandatory')
bql611AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 9, 2, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611AlarmConfigIndex"), (0, "GDCSC611-MIB", "bql611AlarmConfigIdentifier"))
if mibBuilder.loadTexts: bql611AlarmConfigEntry.setStatus('mandatory')
bql611AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 9, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611AlarmConfigIndex.setStatus('mandatory')
bql611AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 9, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611AlarmConfigIdentifier.setStatus('mandatory')
bql611AlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("thres10E03", 1), ("thres10E04", 2), ("thres10E05", 3), ("thres10E06", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611AlarmThreshold.setStatus('mandatory')
bql611ControlTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 5), )
if mibBuilder.loadTexts: bql611ControlTable.setStatus('mandatory')
bql611ControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 5, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611ControlIndex"))
if mibBuilder.loadTexts: bql611ControlEntry.setStatus('mandatory')
bql611ControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611ControlIndex.setStatus('mandatory')
bql611SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611SoftReset.setStatus('mandatory')
bql611EraseConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611EraseConfig.setStatus('mandatory')
bql611FrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611FrontPanel.setStatus('mandatory')
bql611LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611LEDStatus.setStatus('mandatory')
bql621LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql621LEDStatus.setStatus('mandatory')
bql611CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 6), )
if mibBuilder.loadTexts: bql611CurrentTable.setStatus('mandatory')
bql611CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 6, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611CurrentIndex"))
if mibBuilder.loadTexts: bql611CurrentEntry.setStatus('mandatory')
bql611CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611CurrentIndex.setStatus('mandatory')
bql611CurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611CurrentStats.setStatus('mandatory')
bql611IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 8), )
if mibBuilder.loadTexts: bql611IntervalTable.setStatus('mandatory')
bql611IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 8, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611IntervalIndex"), (0, "GDCSC611-MIB", "bql611IntervalNumber"))
if mibBuilder.loadTexts: bql611IntervalEntry.setStatus('mandatory')
bql611IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611IntervalIndex.setStatus('mandatory')
bql611IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611IntervalNumber.setStatus('mandatory')
bql611IntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611IntervalStats.setStatus('mandatory')
bql611TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 9), )
if mibBuilder.loadTexts: bql611TotalTable.setStatus('mandatory')
bql611TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 9, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611TotalIndex"))
if mibBuilder.loadTexts: bql611TotalEntry.setStatus('mandatory')
bql611TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611TotalIndex.setStatus('mandatory')
bql611TotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611TotalStats.setStatus('mandatory')
bql611IntervalMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 2, 10), )
if mibBuilder.loadTexts: bql611IntervalMaintenanceTable.setStatus('mandatory')
bql611IntervalMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 2, 10, 1), ).setIndexNames((0, "GDCSC611-MIB", "bql611IntervalMaintenanceIndex"))
if mibBuilder.loadTexts: bql611IntervalMaintenanceEntry.setStatus('mandatory')
bql611IntervalMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611IntervalMaintenanceIndex.setStatus('mandatory')
bql611ResetIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611ResetIntervals.setStatus('mandatory')
bql611NumberofValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql611NumberofValidIntervals.setStatus('mandatory')
bql611ResetMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611ResetMajorAlarm.setStatus('mandatory')
bql611ResetMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql611ResetMinorAlarm.setStatus('mandatory')
mibBuilder.exportSymbols("GDCSC611-MIB", bql611DteRate=bql611DteRate, bql611IntervalNumber=bql611IntervalNumber, bql611IntervalEntry=bql611IntervalEntry, bql611FrontPanel=bql611FrontPanel, bql611WordLength=bql611WordLength, bql611LEDStatus=bql611LEDStatus, bql611PowerUpAlm=bql611PowerUpAlm, bql611NoResponseAlm=bql611NoResponseAlm, bql611TotalEntry=bql611TotalEntry, bql611IntervalTable=bql611IntervalTable, bql611AlarmConfigEntry=bql611AlarmConfigEntry, bql611DteOperation=bql611DteOperation, bql611ResetIntervals=bql611ResetIntervals, bql611ControlTable=bql611ControlTable, bql611ConfigTable=bql611ConfigTable, bql621DiagRxErrAlm=bql621DiagRxErrAlm, bql611DiagnosticResults=bql611DiagnosticResults, bql611AlarmConfigIdentifier=bql611AlarmConfigIdentifier, bql611DiagnosticActive=bql611DiagnosticActive, bql611WhatAreYouIndex=bql611WhatAreYouIndex, bql611RDLMethod=bql611RDLMethod, bql611TestPattern=bql611TestPattern, bql611DiagnosticEntry=bql611DiagnosticEntry, bql611DCD=bql611DCD, bql611RDLTimeout=bql611RDLTimeout, gdc=gdc, bql611RTS=bql611RTS, bql611WhatAreYouTable=bql611WhatAreYouTable, bql611AlarmConfigIndex=bql611AlarmConfigIndex, bql611AlarmData=bql611AlarmData, bql611OptionCard=bql611OptionCard, bql611SoftReset=bql611SoftReset, bql611ResetMajorAlarm=bql611ResetMajorAlarm, bql611OverSpeed=bql611OverSpeed, bql611ControlIndex=bql611ControlIndex, bql621=bql621, bql611TxClkOutOfToleranceAlm=bql611TxClkOutOfToleranceAlm, bql611ExtClkAbsentAlm=bql611ExtClkAbsentAlm, bql621LEDStatus=bql621LEDStatus, bql611ResetMinorAlarm=bql611ResetMinorAlarm, bql611RDL=bql611RDL, bql611ConfigEntry=bql611ConfigEntry, bql611IntervalIndex=bql611IntervalIndex, bql611TotalIndex=bql611TotalIndex, bql611OutofSyncAlm=bql611OutofSyncAlm, bql611TxClkSource=bql611TxClkSource, bql611WhatAreYouEntry=bql611WhatAreYouEntry, bql611=bql611, bql611DiagnosticIndex=bql611DiagnosticIndex, bql611Alarm=bql611Alarm, bql611CurrentEntry=bql611CurrentEntry, bql611TotalStats=bql611TotalStats, bql611EraseConfig=bql611EraseConfig, bql611RateAdaption=bql611RateAdaption, bql621NoResponseAlm=bql621NoResponseAlm, bql611TotalTable=bql611TotalTable, bql611MIBVersion=bql611MIBVersion, bql611CodeRev=bql611CodeRev, bql611AlarmThreshold=bql611AlarmThreshold, bql621Alarm=bql621Alarm, bql611SealingCurrentNoContinuityAlm=bql611SealingCurrentNoContinuityAlm, bql611ConfigIndex=bql611ConfigIndex, bql611IntervalMaintenanceIndex=bql611IntervalMaintenanceIndex, bql2=bql2, bql611AlarmConfigTable=bql611AlarmConfigTable, bql611IntervalStats=bql611IntervalStats, bql611CurrentTable=bql611CurrentTable, bql621MajorAlarmBERAlm=bql621MajorAlarmBERAlm, bql621MinorAlarmBERAlm=bql621MinorAlarmBERAlm, bql611MajorAlarmBERAlm=bql611MajorAlarmBERAlm, bql611RTSCTSDelay=bql611RTSCTSDelay, bql611DiagnosticResetErrorCount=bql611DiagnosticResetErrorCount, bql611DiagnosticTest=bql611DiagnosticTest, bql611BaseCardType=bql611BaseCardType, bql611MinorAlarmBERAlm=bql611MinorAlarmBERAlm, bql611DiagnosticTable=bql611DiagnosticTable, bql611CurrentStats=bql611CurrentStats, bql621AlarmData=bql621AlarmData, bql621PowerUpAlm=bql621PowerUpAlm, bql611IntervalMaintenanceEntry=bql611IntervalMaintenanceEntry, bql611NumberofValidIntervals=bql611NumberofValidIntervals, bql611DiagRxErrAlm=bql611DiagRxErrAlm, bql611AlarmStatus=bql611AlarmStatus, bql611DTECardType=bql611DTECardType, bql611IntervalMaintenanceTable=bql611IntervalMaintenanceTable, bql621DtrNotPresentAlm=bql621DtrNotPresentAlm, bql611DtrNotPresentAlm=bql611DtrNotPresentAlm, bql611CurrentIndex=bql611CurrentIndex, bql611ControlEntry=bql611ControlEntry)
