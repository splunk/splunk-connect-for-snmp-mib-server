#
# PySNMP MIB module CISCO-FC-ROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FC-ROUTE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:40:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcAddressId, VsanIndex = mibBuilder.importSymbols("CISCO-ST-TC", "FcAddressId", "VsanIndex")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, NotificationType, IpAddress, iso, Counter32, ObjectIdentity, Integer32, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "IpAddress", "iso", "Counter32", "ObjectIdentity", "Integer32", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Bits", "TimeTicks")
TruthValue, TestAndIncr, DisplayString, TimeStamp, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TestAndIncr", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention")
ciscoFcRouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 284))
ciscoFcRouteMIB.setRevisions(('2003-09-04 00:00', '2002-11-01 00:00', '2002-10-02 00:00',))
if mibBuilder.loadTexts: ciscoFcRouteMIB.setLastUpdated('200309040000Z')
if mibBuilder.loadTexts: ciscoFcRouteMIB.setOrganization('Cisco Systems Inc. ')
ciscoFcRouteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 1))
fcRouteMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 2))
fcRouteConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1))
fcRouteStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2))
fcRouteNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 3))
fcRouteNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 3, 0))
fcRouteLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRouteLastChangeTime.setStatus('current')
fcRoutePreference = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRoutePreference.setStatus('current')
fcRouteVerifyAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("verify", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRouteVerifyAction.setStatus('current')
fcRouteVerifyType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pss", 1), ("fibShadow", 2), ("fibHardware", 3))).clone('fibHardware')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRouteVerifyType.setStatus('current')
fcRouteVerifyModule = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 5), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRouteVerifyModule.setStatus('current')
fcRouteVerifyVsanID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 6), VsanIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRouteVerifyVsanID.setStatus('current')
fcRouteVerifyRouteType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2), ("label", 3))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRouteVerifyRouteType.setStatus('current')
fcRouteVerifyResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRouteVerifyResult.setStatus('current')
fcRouteVerifyLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 9), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRouteVerifyLock.setStatus('current')
fcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10), )
if mibBuilder.loadTexts: fcRouteTable.setStatus('current')
fcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FC-ROUTE-MIB", "fcRouteDestAddrId"), (0, "CISCO-FC-ROUTE-MIB", "fcRouteDestMask"), (0, "CISCO-FC-ROUTE-MIB", "fcRouteProto"), (0, "CISCO-FC-ROUTE-MIB", "fcRouteInterface"))
if mibBuilder.loadTexts: fcRouteEntry.setStatus('current')
fcRouteDestAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 1), FcAddressId())
if mibBuilder.loadTexts: fcRouteDestAddrId.setStatus('current')
fcRouteDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 2), FcAddressId())
if mibBuilder.loadTexts: fcRouteDestMask.setStatus('current')
fcRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("fspf", 4), ("mpls", 5), ("multicast", 6))))
if mibBuilder.loadTexts: fcRouteProto.setStatus('current')
fcRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: fcRouteInterface.setStatus('current')
fcRouteDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 239))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteDomainId.setStatus('current')
fcRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteMetric.setStatus('current')
fcRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteType.setStatus('current')
fcRoutePermanent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRoutePermanent.setStatus('current')
fcRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 1, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteRowStatus.setStatus('current')
fcRouteFlowStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1), )
if mibBuilder.loadTexts: fcRouteFlowStatTable.setStatus('current')
fcRouteFlowStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FC-ROUTE-MIB", "fcRouteFlowIndex"))
if mibBuilder.loadTexts: fcRouteFlowStatEntry.setStatus('current')
fcRouteFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: fcRouteFlowIndex.setStatus('current')
fcRouteFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("vsanId", 0), ("destId", 1), ("srcId", 2), ("port", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteFlowType.setStatus('current')
fcRouteFlowVsanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 3), VsanIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteFlowVsanId.setStatus('current')
fcRouteFlowDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 4), FcAddressId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteFlowDestId.setStatus('current')
fcRouteFlowSrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 5), FcAddressId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteFlowSrcId.setStatus('current')
fcRouteFlowMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 6), FcAddressId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteFlowMask.setStatus('current')
fcRouteFlowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 7), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteFlowPort.setStatus('current')
fcRouteFlowFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRouteFlowFrames.setStatus('current')
fcRouteFlowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRouteFlowBytes.setStatus('current')
fcRouteFlowCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRouteFlowCreationTime.setStatus('current')
fcRouteFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 284, 1, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRouteFlowRowStatus.setStatus('current')
fcRouteMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 2, 1))
fcRouteMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 284, 2, 2))
fcRouteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 284, 2, 1, 1)).setObjects(("CISCO-FC-ROUTE-MIB", "fcRouteGroup"), ("CISCO-FC-ROUTE-MIB", "fcRouteTableGroup"), ("CISCO-FC-ROUTE-MIB", "fcRouteStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcRouteMIBCompliance = fcRouteMIBCompliance.setStatus('deprecated')
fcRouteMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 284, 2, 1, 2)).setObjects(("CISCO-FC-ROUTE-MIB", "fcRouteGroup"), ("CISCO-FC-ROUTE-MIB", "fcRouteTableGroup"), ("CISCO-FC-ROUTE-MIB", "fcRouteStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcRouteMIBCompliance1 = fcRouteMIBCompliance1.setStatus('current')
fcRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 284, 2, 2, 1)).setObjects(("CISCO-FC-ROUTE-MIB", "fcRouteLastChangeTime"), ("CISCO-FC-ROUTE-MIB", "fcRoutePreference"), ("CISCO-FC-ROUTE-MIB", "fcRouteVerifyAction"), ("CISCO-FC-ROUTE-MIB", "fcRouteVerifyType"), ("CISCO-FC-ROUTE-MIB", "fcRouteVerifyModule"), ("CISCO-FC-ROUTE-MIB", "fcRouteVerifyVsanID"), ("CISCO-FC-ROUTE-MIB", "fcRouteVerifyRouteType"), ("CISCO-FC-ROUTE-MIB", "fcRouteVerifyResult"), ("CISCO-FC-ROUTE-MIB", "fcRouteVerifyLock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcRouteGroup = fcRouteGroup.setStatus('current')
fcRouteTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 284, 2, 2, 2)).setObjects(("CISCO-FC-ROUTE-MIB", "fcRouteDomainId"), ("CISCO-FC-ROUTE-MIB", "fcRouteMetric"), ("CISCO-FC-ROUTE-MIB", "fcRouteType"), ("CISCO-FC-ROUTE-MIB", "fcRoutePermanent"), ("CISCO-FC-ROUTE-MIB", "fcRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcRouteTableGroup = fcRouteTableGroup.setStatus('current')
fcRouteStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 284, 2, 2, 3)).setObjects(("CISCO-FC-ROUTE-MIB", "fcRouteFlowType"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowVsanId"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowDestId"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowSrcId"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowMask"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowPort"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowFrames"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowBytes"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowCreationTime"), ("CISCO-FC-ROUTE-MIB", "fcRouteFlowRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcRouteStatGroup = fcRouteStatGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-FC-ROUTE-MIB", fcRouteFlowVsanId=fcRouteFlowVsanId, fcRouteVerifyModule=fcRouteVerifyModule, fcRouteDomainId=fcRouteDomainId, fcRouteFlowIndex=fcRouteFlowIndex, fcRouteFlowBytes=fcRouteFlowBytes, fcRouteProto=fcRouteProto, ciscoFcRouteMIBObjects=ciscoFcRouteMIBObjects, fcRouteMIBGroups=fcRouteMIBGroups, fcRouteMIBConformance=fcRouteMIBConformance, fcRouteVerifyResult=fcRouteVerifyResult, fcRouteNotification=fcRouteNotification, fcRouteLastChangeTime=fcRouteLastChangeTime, fcRouteNotifications=fcRouteNotifications, fcRouteMIBCompliance1=fcRouteMIBCompliance1, fcRouteTableGroup=fcRouteTableGroup, fcRouteConfig=fcRouteConfig, fcRouteDestMask=fcRouteDestMask, fcRouteMIBCompliance=fcRouteMIBCompliance, fcRouteFlowMask=fcRouteFlowMask, fcRouteFlowPort=fcRouteFlowPort, fcRouteVerifyAction=fcRouteVerifyAction, fcRoutePreference=fcRoutePreference, fcRouteMIBCompliances=fcRouteMIBCompliances, fcRouteFlowRowStatus=fcRouteFlowRowStatus, fcRouteFlowDestId=fcRouteFlowDestId, fcRouteFlowSrcId=fcRouteFlowSrcId, fcRouteVerifyType=fcRouteVerifyType, fcRouteDestAddrId=fcRouteDestAddrId, fcRouteFlowFrames=fcRouteFlowFrames, fcRouteFlowCreationTime=fcRouteFlowCreationTime, PYSNMP_MODULE_ID=ciscoFcRouteMIB, fcRouteVerifyLock=fcRouteVerifyLock, fcRouteVerifyRouteType=fcRouteVerifyRouteType, fcRouteStatistics=fcRouteStatistics, fcRouteRowStatus=fcRouteRowStatus, fcRouteTable=fcRouteTable, fcRouteStatGroup=fcRouteStatGroup, fcRouteFlowStatTable=fcRouteFlowStatTable, fcRouteType=fcRouteType, fcRouteVerifyVsanID=fcRouteVerifyVsanID, ciscoFcRouteMIB=ciscoFcRouteMIB, fcRouteEntry=fcRouteEntry, fcRouteMetric=fcRouteMetric, fcRoutePermanent=fcRoutePermanent, fcRouteFlowStatEntry=fcRouteFlowStatEntry, fcRouteFlowType=fcRouteFlowType, fcRouteInterface=fcRouteInterface, fcRouteGroup=fcRouteGroup)
