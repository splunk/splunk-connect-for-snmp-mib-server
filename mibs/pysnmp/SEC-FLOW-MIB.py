#
# PySNMP MIB module SEC-FLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SEC-FLOW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
nbSwitchG1, = mibBuilder.importSymbols("NBASE-G1-MIB", "nbSwitchG1")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Gauge32, Integer32, ObjectIdentity, Bits, Counter32, MibIdentifier, NotificationType, IpAddress, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Gauge32", "Integer32", "ObjectIdentity", "Bits", "Counter32", "MibIdentifier", "NotificationType", "IpAddress", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbsAccelerouter = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 10))
nbsArSecFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8))
nbsArSecFlowTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1), )
if mibBuilder.loadTexts: nbsArSecFlowTable.setStatus('mandatory')
nbsArSecFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1), ).setIndexNames((0, "SEC-FLOW-MIB", "nbsArSecFlowIndex"))
if mibBuilder.loadTexts: nbsArSecFlowEntry.setStatus('mandatory')
nbsArSecFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowIndex.setStatus('mandatory')
nbsArSecFlowValid = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowValid.setStatus('mandatory')
nbsArSecFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowState.setStatus('mandatory')
nbsArSecFlowLastUsedTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowLastUsedTimestamp.setStatus('mandatory')
nbsArSecFlowServTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowServTypes.setStatus('mandatory')
nbsArSecFlowServId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowServId.setStatus('mandatory')
nbsArFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowID.setStatus('mandatory')
nbsArFlowQoSSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowQoSSpec.setStatus('mandatory')
nbsArSecFlowNumOfServices = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowNumOfServices.setStatus('mandatory')
nbsArSecFlowDriverData = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowDriverData.setStatus('mandatory')
nbsArSecFlowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowActions.setStatus('mandatory')
nbsArSecFlowCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowCounters.setStatus('mandatory')
nbsArSecFlowAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3), ("modify", 4), ("activate", 5), ("deactivate", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowAdminStatus.setStatus('mandatory')
nbsArFlowServiceSpecTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2), )
if mibBuilder.loadTexts: nbsArFlowServiceSpecTable.setStatus('mandatory')
nbsArFlowServiceSpecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1), ).setIndexNames((0, "SEC-FLOW-MIB", "nbsArFlowServiceFlowIndex"), (0, "SEC-FLOW-MIB", "nbsArFlowServiceSpecsServiceId"))
if mibBuilder.loadTexts: nbsArFlowServiceSpecEntry.setStatus('mandatory')
nbsArFlowServiceFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceFlowIndex.setStatus('mandatory')
nbsArFlowServiceSpecsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceSpecsServiceId.setStatus('mandatory')
nbsArFlowServiceSpecsServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceSpecsServiceType.setStatus('mandatory')
nbsArFlowServiceSpecsServiceFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceSpecsServiceFlowIndex.setStatus('mandatory')
nbsArFlowServiceSpecsFlowIDExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceSpecsFlowIDExtension.setStatus('mandatory')
nbsArFlowServiceSpecsFlowModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceSpecsFlowModifier.setStatus('mandatory')
nbsArFlowServiceSpecsFlowSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceSpecsFlowSpec.setStatus('mandatory')
nbsArFlowServiceSpecsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3), ("modify", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServiceSpecsAdminStatus.setStatus('mandatory')
nbsArFlowServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 3), )
if mibBuilder.loadTexts: nbsArFlowServicePortTable.setStatus('mandatory')
nbsArFlowServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 3, 1), ).setIndexNames((0, "SEC-FLOW-MIB", "nbsArFlowServicePortNumber"))
if mibBuilder.loadTexts: nbsArFlowServicePortEntry.setStatus('mandatory')
nbsArFlowServicePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServicePortNumber.setStatus('mandatory')
nbsArFlowServicePortData = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServicePortData.setStatus('mandatory')
nbsArFlowServicePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3), ("modify", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArFlowServicePortAdminStatus.setStatus('mandatory')
nbsArSecFlowFwdStatus = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 10, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsArSecFlowFwdStatus.setStatus('mandatory')
mibBuilder.exportSymbols("SEC-FLOW-MIB", nbsArSecFlowIndex=nbsArSecFlowIndex, nbsArSecFlowActions=nbsArSecFlowActions, nbsArSecFlowServId=nbsArSecFlowServId, nbsArSecFlowTable=nbsArSecFlowTable, nbsArSecFlowFwdStatus=nbsArSecFlowFwdStatus, nbsArSecFlow=nbsArSecFlow, nbsArFlowServiceSpecTable=nbsArFlowServiceSpecTable, nbsArFlowID=nbsArFlowID, nbsArSecFlowValid=nbsArSecFlowValid, nbsArFlowServiceSpecsServiceFlowIndex=nbsArFlowServiceSpecsServiceFlowIndex, nbsArFlowServicePortNumber=nbsArFlowServicePortNumber, nbsArFlowServiceSpecsFlowSpec=nbsArFlowServiceSpecsFlowSpec, nbsAccelerouter=nbsAccelerouter, nbsArSecFlowEntry=nbsArSecFlowEntry, nbsArFlowServiceSpecsFlowModifier=nbsArFlowServiceSpecsFlowModifier, nbsArSecFlowDriverData=nbsArSecFlowDriverData, nbsArSecFlowNumOfServices=nbsArSecFlowNumOfServices, MacAddress=MacAddress, nbsArFlowServicePortTable=nbsArFlowServicePortTable, nbsArFlowServiceSpecsFlowIDExtension=nbsArFlowServiceSpecsFlowIDExtension, nbsArFlowServicePortAdminStatus=nbsArFlowServicePortAdminStatus, nbsArSecFlowServTypes=nbsArSecFlowServTypes, nbsArSecFlowCounters=nbsArSecFlowCounters, nbsArFlowServiceSpecEntry=nbsArFlowServiceSpecEntry, nbsArFlowServicePortData=nbsArFlowServicePortData, nbsArFlowServiceSpecsAdminStatus=nbsArFlowServiceSpecsAdminStatus, nbsArSecFlowState=nbsArSecFlowState, nbsArFlowQoSSpec=nbsArFlowQoSSpec, nbsArSecFlowAdminStatus=nbsArSecFlowAdminStatus, nbSwitchG1Il=nbSwitchG1Il, nbsArFlowServiceSpecsServiceType=nbsArFlowServiceSpecsServiceType, nbsArFlowServicePortEntry=nbsArFlowServicePortEntry, nbsArSecFlowLastUsedTimestamp=nbsArSecFlowLastUsedTimestamp, nbsArFlowServiceFlowIndex=nbsArFlowServiceFlowIndex, nbsArFlowServiceSpecsServiceId=nbsArFlowServiceSpecsServiceId)
