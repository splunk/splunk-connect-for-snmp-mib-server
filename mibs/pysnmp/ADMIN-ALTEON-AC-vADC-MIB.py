#
# PySNMP MIB module ADMIN-ALTEON-AC-vADC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADMIN-ALTEON-AC-vADC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
virt_admin, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "virt-admin")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, Unsigned32, Gauge32, Integer32, NotificationType, MibIdentifier, iso, Counter32, ModuleIdentity, TimeTicks, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Unsigned32", "Gauge32", "Integer32", "NotificationType", "MibIdentifier", "iso", "Counter32", "ModuleIdentity", "TimeTicks", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
adminvADC = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1))
adminvADC.setRevisions(('2010-06-17 00:00',))
if mibBuilder.loadTexts: adminvADC.setLastUpdated('201006170000Z')
if mibBuilder.loadTexts: adminvADC.setOrganization('Radware Ltd.')
adminvADCConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1))
adminvADCInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2))
adminvADCBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3))
adminvADCStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4))
vADCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1))
vADCInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1))
vADCBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1))
vADCStat = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1))
vADCMaxVADCId = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMaxVADCId.setStatus('current')
vADCMaxCU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMaxCU.setStatus('current')
vADCCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3), )
if mibBuilder.loadTexts: vADCCurCfgTable.setStatus('current')
vADCCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgVADCId"))
if mibBuilder.loadTexts: vADCCurCfgTableEntry.setStatus('current')
vADCCurCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgVADCId.setStatus('current')
vADCCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgVlanId.setStatus('current')
vADCCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgName.setStatus('current')
vADCCurCfgCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgCU.setStatus('current')
vADCCurCfgLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgLimit.setStatus('current')
vADCCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgState.setStatus('current')
vADCCurCfgFeatGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatGlobal.setStatus('current')
vADCCurCfgFeatBWM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatBWM.setStatus('current')
vADCCurCfgFeatITM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatITM.setStatus('current')
vADCCurCfgFeatADOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatADOS.setStatus('current')
vADCCurCfgFeatLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatLLB.setStatus('current')
vADCCurCfgSslLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSslLimit.setStatus('current')
vADCCurCfgCompLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgCompLimit.setStatus('current')
vADCCurResetImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurResetImageVersion.setStatus('current')
vADCCurSyncPeerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurSyncPeerSwitch.setStatus('current')
vADCNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4), )
if mibBuilder.loadTexts: vADCNewCfgTable.setStatus('current')
vADCNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgVADCId"))
if mibBuilder.loadTexts: vADCNewCfgTableEntry.setStatus('current')
vADCNewCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgVADCId.setStatus('current')
vADCNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgVlanId.setStatus('current')
vADCNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgAddVlan.setStatus('current')
vADCNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgRemoveVlan.setStatus('current')
vADCNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgName.setStatus('current')
vADCNewCfgCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgCU.setStatus('current')
vADCNewCfgLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgLimit.setStatus('current')
vADCNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgState.setStatus('current')
vADCNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgDelete.setStatus('current')
vADCNewCfgFeatGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatGlobal.setStatus('current')
vADCNewCfgFeatBWM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatBWM.setStatus('current')
vADCNewCfgFeatITM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatITM.setStatus('current')
vADCNewCfgFeatADOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatADOS.setStatus('current')
vADCNewCfgFeatLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatLLB.setStatus('current')
vADCNewCfgSslLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSslLimit.setStatus('current')
vADCNewCfgCompLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgCompLimit.setStatus('current')
vADCNewResetImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCNewResetImageVersion.setStatus('current')
vADCNewSyncPeerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCNewSyncPeerSwitch.setStatus('current')
vADCCurCfgSysTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5), )
if mibBuilder.loadTexts: vADCCurCfgSysTable.setStatus('current')
vADCCurCfgSysTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgSysVADCId"))
if mibBuilder.loadTexts: vADCCurCfgSysTableEntry.setStatus('current')
vADCCurCfgSysMmgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtAddr.setStatus('current')
vADCCurCfgSysMmgmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtMask.setStatus('current')
vADCCurCfgSysMmgmtGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtGw.setStatus('current')
vADCCurCfgSysMmgmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtState.setStatus('current')
vADCCurCfgSysPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerAddr.setStatus('current')
vADCCurCfgSysPeerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerMask.setStatus('current')
vADCCurCfgSysPeerGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerGw.setStatus('current')
vADCCurCfgSysHttpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysHttpsState.setStatus('current')
vADCCurCfgSysSshState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSshState.setStatus('current')
vADCCurCfgSysHttpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysHttpState.setStatus('current')
vADCCurCfgSysSnmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSnmpState.setStatus('current')
vADCCurCfgSysSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSyslogState.setStatus('current')
vADCCurCfgSysRadiusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysRadiusState.setStatus('current')
vADCCurCfgSysTacacsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysTacacsState.setStatus('current')
vADCCurCfgSysIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysIdleState.setStatus('current')
vADCCurCfgSysSmtpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSmtpState.setStatus('current')
vADCCurCfgSyslogDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSyslogDelegation.setStatus('current')
vADCCurCfgRadiusDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgRadiusDelegation.setStatus('current')
vADCCurCfgTacacsDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgTacacsDelegation.setStatus('current')
vADCCurCfgSmtpDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSmtpDelegation.setStatus('current')
vADCCurCfgSysMmgmtIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6Addr.setStatus('current')
vADCCurCfgSysMmgmtIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6PrefixLen.setStatus('current')
vADCCurCfgSysMmgmtIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6Gateway.setStatus('current')
vADCCurCfgSysPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6Addr.setStatus('current')
vADCCurCfgSysPeerIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6PrefixLen.setStatus('current')
vADCCurCfgSysPeerIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6Gateway.setStatus('current')
vADCCurCfgSysTnetState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysTnetState.setStatus('current')
vADCCurCfgSysHaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysHaId.setStatus('current')
vADCCurCfgSysPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerId.setStatus('current')
vADCCurCfgSysVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysVADCId.setStatus('current')
vADCCurCfgIdleDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgIdleDelegation.setStatus('current')
vADCCurCfgSysMmgmtDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtDelegation.setStatus('current')
vADCCurCfgSysPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerName.setStatus('current')
vADCNewCfgSysTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6), )
if mibBuilder.loadTexts: vADCNewCfgSysTable.setStatus('current')
vADCNewCfgSysTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgSysVADCId"))
if mibBuilder.loadTexts: vADCNewCfgSysTableEntry.setStatus('current')
vADCNewCfgSysMmgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtAddr.setStatus('current')
vADCNewCfgSysMmgmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtMask.setStatus('current')
vADCNewCfgSysMmgmtGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtGw.setStatus('current')
vADCNewCfgSysMmgmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtState.setStatus('current')
vADCNewCfgSysPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerAddr.setStatus('current')
vADCNewCfgSysPeerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerMask.setStatus('current')
vADCNewCfgSysPeerGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerGw.setStatus('current')
vADCNewCfgSysHttpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysHttpsState.setStatus('current')
vADCNewCfgSysSshState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSshState.setStatus('current')
vADCNewCfgSysHttpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysHttpState.setStatus('current')
vADCNewCfgSysSnmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSnmpState.setStatus('current')
vADCNewCfgSysSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSyslogState.setStatus('current')
vADCNewCfgSysRadiusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysRadiusState.setStatus('current')
vADCNewCfgSysTacacsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysTacacsState.setStatus('current')
vADCNewCfgSysIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysIdleState.setStatus('current')
vADCNewCfgSysSmtpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSmtpState.setStatus('current')
vADCNewCfgSyslogDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSyslogDelegation.setStatus('current')
vADCNewCfgRadiusDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgRadiusDelegation.setStatus('current')
vADCNewCfgTacacsDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgTacacsDelegation.setStatus('current')
vADCNewCfgSmtpDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSmtpDelegation.setStatus('current')
vADCNewCfgSysMmgmtIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6Addr.setStatus('current')
vADCNewCfgSysMmgmtIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6PrefixLen.setStatus('current')
vADCNewCfgSysMmgmtIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6Gateway.setStatus('current')
vADCNewCfgSysPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6Addr.setStatus('current')
vADCNewCfgSysPeerIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6PrefixLen.setStatus('current')
vADCNewCfgSysPeerIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6Gateway.setStatus('current')
vADCNewCfgSysTnetState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysTnetState.setStatus('current')
vADCNewCfgSysHaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysHaId.setStatus('current')
vADCNewCfgSysPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerId.setStatus('current')
vADCNewCfgSysVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgSysVADCId.setStatus('current')
vADCNewCfgIdleDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgIdleDelegation.setStatus('current')
vADCNewCfgSysMmgmtDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtDelegation.setStatus('current')
vADCNewCfgSysPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerName.setStatus('current')
vADCCurCfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7), )
if mibBuilder.loadTexts: vADCCurCfgNetTable.setStatus('current')
vADCCurCfgNetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgNetVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgNetId"))
if mibBuilder.loadTexts: vADCCurCfgNetTableEntry.setStatus('current')
vADCCurCfgNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetId.setStatus('current')
vADCCurCfgNetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetVlanId.setStatus('current')
vADCCurCfgNetIPver = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("ipv4", 4), ("ipv6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPver.setStatus('current')
vADCCurCfgNetIPBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPBegin.setStatus('current')
vADCCurCfgNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetMask.setStatus('current')
vADCCurCfgNetIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPEnd.setStatus('current')
vADCCurCfgNetIPv6Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPv6Begin.setStatus('current')
vADCCurCfgNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetPrefix.setStatus('current')
vADCCurCfgNetIPv6End = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPv6End.setStatus('current')
vADCCurCfgNetVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetVADCId.setStatus('current')
vADCNewCfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8), )
if mibBuilder.loadTexts: vADCNewCfgNetTable.setStatus('current')
vADCNewCfgNetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgNetVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgNetId"))
if mibBuilder.loadTexts: vADCNewCfgNetTableEntry.setStatus('current')
vADCNewCfgNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgNetId.setStatus('current')
vADCNewCfgNetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetVlanId.setStatus('current')
vADCNewCfgNetIPver = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("ipv4", 4), ("ipv6", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPver.setStatus('current')
vADCNewCfgNetIPBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPBegin.setStatus('current')
vADCNewCfgNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetMask.setStatus('current')
vADCNewCfgNetIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPEnd.setStatus('current')
vADCNewCfgNetRemId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetRemId.setStatus('current')
vADCNewCfgNetIPv6Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPv6Begin.setStatus('current')
vADCNewCfgNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetPrefix.setStatus('current')
vADCNewCfgNetIPv6End = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPv6End.setStatus('current')
vADCNewCfgNetVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgNetVADCId.setStatus('current')
vADCAccessUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9))
vADCAccessUid = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1))
vADCUserCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1), )
if mibBuilder.loadTexts: vADCUserCurCfgTable.setStatus('current')
vADCUserCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserCurCfgVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserCurCfgUId"))
if mibBuilder.loadTexts: vADCUserCurCfgTableEntry.setStatus('current')
vADCUserCurCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgVADCId.setStatus('current')
vADCUserCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgUId.setStatus('current')
vADCUserCurCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("user", 0), ("l3Oper", 1), ("slboper", 2), ("slbview", 3), ("crtadmin", 4), ("l4oper", 5), ("oper", 6), ("l3admin", 7), ("slbadmin", 8), ("l4admin", 9), ("admin", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCos.setStatus('current')
vADCUserCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgName.setStatus('current')
vADCUserCurCfgAdminPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgAdminPswd.setStatus('current')
vADCUserCurCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgPswd.setStatus('current')
vADCUserCurCfgConfPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgConfPswd.setStatus('current')
vADCUserCurCfgBackdoor = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgBackdoor.setStatus('current')
vADCUserCurCfgCrtMng = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgCrtMng.setStatus('current')
vADCUserCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgState.setStatus('current')
vADCUserNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2), )
if mibBuilder.loadTexts: vADCUserNewCfgTable.setStatus('current')
vADCUserNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserNewCfgVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserNewCfgUId"))
if mibBuilder.loadTexts: vADCUserNewCfgTableEntry.setStatus('current')
vADCUserNewCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgVADCId.setStatus('current')
vADCUserNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgUId.setStatus('current')
vADCUserNewCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("user", 0), ("l3oper", 1), ("slboper", 2), ("slbview", 3), ("crtadmin", 4), ("l4oper", 5), ("oper", 6), ("l3admin", 7), ("slbadmin", 8), ("l4admin", 9), ("admin", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCos.setStatus('current')
vADCUserNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgName.setStatus('current')
vADCUserNewCfgAdminPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgAdminPswd.setStatus('current')
vADCUserNewCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgPswd.setStatus('current')
vADCUserNewCfgConfPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgConfPswd.setStatus('current')
vADCUserNewCfgBackdoor = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgBackdoor.setStatus('current')
vADCUserNewCfgCrtMng = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgCrtMng.setStatus('current')
vADCUserNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgState.setStatus('current')
vADCUserNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCUserNewCfgDelete.setStatus('current')
vADCUsersPswdTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2), )
if mibBuilder.loadTexts: vADCUsersPswdTable.setStatus('current')
vADCUsersPswdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUsersVADCId"))
if mibBuilder.loadTexts: vADCUsersPswdTableEntry.setStatus('current')
vADCUsersVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUsersVADCId.setStatus('current')
vADCAccessUsrPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessUsrPasswd.setStatus('current')
vADCAccessSlbOperPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessSlbOperPasswd.setStatus('current')
vADCAccessL4OperPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessL4OperPasswd.setStatus('current')
vADCAccessOperPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessOperPasswd.setStatus('current')
vADCAccessSlbAdminPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessSlbAdminPasswd.setStatus('current')
vADCAccessL4AdminPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessL4AdminPasswd.setStatus('current')
vADCAccessAdminPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessAdminPasswd.setStatus('current')
vADCAccessAdminNewPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessAdminNewPasswd.setStatus('current')
vADCAccessAdminConfNewPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessAdminConfNewPasswd.setStatus('current')
vADCInfoAvailableCU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoAvailableCU.setStatus('current')
vADCInfoAvailableThruput = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoAvailableThruput.setStatus('current')
vADCInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3), )
if mibBuilder.loadTexts: vADCInfoTable.setStatus('current')
vADCInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCInfoId"))
if mibBuilder.loadTexts: vADCInfoTableEntry.setStatus('current')
vADCInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoId.setStatus('current')
vADCInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoName.setStatus('current')
vADCInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("init", 1), ("running", 2), ("down", 3), ("stopping", 4), ("restarting", 5), ("querying", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoStatus.setStatus('current')
vADCInfoVRRPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3), ("holdoff", 4), ("off", 5), ("active", 6), ("standby", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoVRRPStatus.setStatus('current')
vADCInfoCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoCU.setStatus('current')
vADCInfoThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoThroughput.setStatus('current')
vADCInfoLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoLimit.setStatus('current')
vADCInfoSPcpu = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoSPcpu.setStatus('current')
vADCInfoMPcpu = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoMPcpu.setStatus('current')
vADCInfoCUMbit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoCUMbit.setStatus('current')
vADCInfoUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoUpTime.setStatus('current')
vADCInfoConfigChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoConfigChangeTime.setStatus('current')
vADCBootTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1), )
if mibBuilder.loadTexts: vADCBootTable.setStatus('current')
vADCBootTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCBootVADCId"))
if mibBuilder.loadTexts: vADCBootTableEntry.setStatus('current')
vADCBootVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCBootVADCId.setStatus('current')
vADCBootAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCBootAction.setStatus('current')
vADCStatsAccelResourceTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1), )
if mibBuilder.loadTexts: vADCStatsAccelResourceTable.setStatus('current')
vADCStatsAccelResourceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCIndex"))
if mibBuilder.loadTexts: vADCStatsAccelResourceTableEntry.setStatus('current')
vADCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCIndex.setStatus('current')
vADCName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCName.setStatus('current')
vADCStatsCompLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsCompLimit.setStatus('current')
vADCStatsCompUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsCompUtil.setStatus('current')
vADCStatsSSLLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsSSLLimit.setStatus('current')
vADCStatsSSLUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsSSLUtil.setStatus('current')
vADCMemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2), )
if mibBuilder.loadTexts: vADCMemStatsTable.setStatus('current')
vADCMemStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCMemStatsIndex"))
if mibBuilder.loadTexts: vADCMemStatsTableEntry.setStatus('current')
vADCMemStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsIndex.setStatus('current')
vADCMemStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsName.setStatus('current')
vADCMemStatsCurrentMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsCurrentMemory.setStatus('current')
vADCMemStatsHiWaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsHiWaterMark.setStatus('current')
mibBuilder.exportSymbols("ADMIN-ALTEON-AC-vADC-MIB", vADCCurCfgSysTacacsState=vADCCurCfgSysTacacsState, vADCNewResetImageVersion=vADCNewResetImageVersion, vADCUserCurCfgTable=vADCUserCurCfgTable, vADCNewCfgNetRemId=vADCNewCfgNetRemId, vADCStatsSSLLimit=vADCStatsSSLLimit, vADCNewCfgSysMmgmtAddr=vADCNewCfgSysMmgmtAddr, vADCMaxVADCId=vADCMaxVADCId, vADCUserCurCfgState=vADCUserCurCfgState, vADCMemStatsName=vADCMemStatsName, vADCUserCurCfgTableEntry=vADCUserCurCfgTableEntry, vADCCurCfgNetTable=vADCCurCfgNetTable, vADCUserCurCfgBackdoor=vADCUserCurCfgBackdoor, vADCAccessAdminConfNewPasswd=vADCAccessAdminConfNewPasswd, vADCNewCfgSysTacacsState=vADCNewCfgSysTacacsState, vADCCurCfgNetId=vADCCurCfgNetId, vADCCurCfgSysHttpState=vADCCurCfgSysHttpState, vADCNewCfgSysSyslogState=vADCNewCfgSysSyslogState, vADCNewCfgSysPeerIpv6PrefixLen=vADCNewCfgSysPeerIpv6PrefixLen, vADCNewCfgSysSshState=vADCNewCfgSysSshState, vADCNewCfgSysHaId=vADCNewCfgSysHaId, vADCAccessSlbOperPasswd=vADCAccessSlbOperPasswd, vADCCurCfgName=vADCCurCfgName, vADCCurCfgFeatLLB=vADCCurCfgFeatLLB, vADCNewCfgSysTable=vADCNewCfgSysTable, vADCNewCfgRadiusDelegation=vADCNewCfgRadiusDelegation, vADCNewCfgDelete=vADCNewCfgDelete, vADCNewCfgNetIPBegin=vADCNewCfgNetIPBegin, vADCInfoCUMbit=vADCInfoCUMbit, vADCNewCfgSysPeerName=vADCNewCfgSysPeerName, vADCNewCfgNetIPver=vADCNewCfgNetIPver, vADCCurCfgSslLimit=vADCCurCfgSslLimit, vADCNewCfgVADCId=vADCNewCfgVADCId, vADCNewCfgSysPeerMask=vADCNewCfgSysPeerMask, vADCNewCfgNetVADCId=vADCNewCfgNetVADCId, vADCCurCfgSysSmtpState=vADCCurCfgSysSmtpState, vADCCurCfgNetIPver=vADCCurCfgNetIPver, vADCCurCfgSysSyslogState=vADCCurCfgSysSyslogState, vADCInfoLimit=vADCInfoLimit, vADCNewCfgSysMmgmtIpv6Addr=vADCNewCfgSysMmgmtIpv6Addr, vADCCurCfgSysMmgmtDelegation=vADCCurCfgSysMmgmtDelegation, vADCCurCfgNetIPBegin=vADCCurCfgNetIPBegin, vADCCurCfgSysHttpsState=vADCCurCfgSysHttpsState, vADCCurCfgFeatGlobal=vADCCurCfgFeatGlobal, vADCBootVADCId=vADCBootVADCId, vADCNewCfgSyslogDelegation=vADCNewCfgSyslogDelegation, vADCNewCfgSysMmgmtState=vADCNewCfgSysMmgmtState, vADCInfoId=vADCInfoId, vADCBootAction=vADCBootAction, vADCInfoUpTime=vADCInfoUpTime, vADCCurCfgSysPeerIpv6PrefixLen=vADCCurCfgSysPeerIpv6PrefixLen, vADCNewCfgState=vADCNewCfgState, vADCInfoConfigChangeTime=vADCInfoConfigChangeTime, vADCUserNewCfgCrtMng=vADCUserNewCfgCrtMng, vADCCurCfgSyslogDelegation=vADCCurCfgSyslogDelegation, vADCUserNewCfgConfPswd=vADCUserNewCfgConfPswd, vADCNewCfgCompLimit=vADCNewCfgCompLimit, vADCCurCfgSysVADCId=vADCCurCfgSysVADCId, vADCNewCfgTacacsDelegation=vADCNewCfgTacacsDelegation, vADCUserNewCfgState=vADCUserNewCfgState, vADCNewCfgFeatBWM=vADCNewCfgFeatBWM, vADCCurCfgSysMmgmtState=vADCCurCfgSysMmgmtState, vADCCurCfgSysPeerId=vADCCurCfgSysPeerId, vADCNewCfgSysMmgmtMask=vADCNewCfgSysMmgmtMask, vADCNewCfgSysPeerGw=vADCNewCfgSysPeerGw, vADCCurCfgNetTableEntry=vADCCurCfgNetTableEntry, vADCUserCurCfgVADCId=vADCUserCurCfgVADCId, vADCMemStatsTableEntry=vADCMemStatsTableEntry, vADCMemStatsHiWaterMark=vADCMemStatsHiWaterMark, vADCNewCfgSysTableEntry=vADCNewCfgSysTableEntry, vADCUserNewCfgVADCId=vADCUserNewCfgVADCId, vADCCurCfgNetIPv6End=vADCCurCfgNetIPv6End, vADCCurCfgSysMmgmtIpv6Addr=vADCCurCfgSysMmgmtIpv6Addr, vADCMemStatsCurrentMemory=vADCMemStatsCurrentMemory, vADCNewCfgNetIPEnd=vADCNewCfgNetIPEnd, vADCCurCfgSysSnmpState=vADCCurCfgSysSnmpState, vADCCurCfgVlanId=vADCCurCfgVlanId, vADCNewCfgLimit=vADCNewCfgLimit, vADCBootTableEntry=vADCBootTableEntry, vADCAccessL4OperPasswd=vADCAccessL4OperPasswd, vADCNewCfgSmtpDelegation=vADCNewCfgSmtpDelegation, vADCNewCfgFeatLLB=vADCNewCfgFeatLLB, vADCConfig=vADCConfig, vADCInfoTableEntry=vADCInfoTableEntry, vADCNewCfgSysRadiusState=vADCNewCfgSysRadiusState, vADCCurCfgCompLimit=vADCCurCfgCompLimit, vADCNewCfgSysPeerAddr=vADCNewCfgSysPeerAddr, vADCInfoName=vADCInfoName, vADCInfoMPcpu=vADCInfoMPcpu, vADCUserCurCfgCrtMng=vADCUserCurCfgCrtMng, adminvADCStats=adminvADCStats, adminvADCBoot=adminvADCBoot, vADCCurSyncPeerSwitch=vADCCurSyncPeerSwitch, vADCInfo=vADCInfo, vADCStatsCompLimit=vADCStatsCompLimit, vADCAccessAdminPasswd=vADCAccessAdminPasswd, vADCNewCfgSysHttpState=vADCNewCfgSysHttpState, adminvADC=adminvADC, vADCNewCfgIdleDelegation=vADCNewCfgIdleDelegation, vADCNewCfgSysMmgmtIpv6PrefixLen=vADCNewCfgSysMmgmtIpv6PrefixLen, vADCCurCfgSysPeerIpv6Gateway=vADCCurCfgSysPeerIpv6Gateway, vADCCurCfgTableEntry=vADCCurCfgTableEntry, vADCNewCfgSysPeerIpv6Gateway=vADCNewCfgSysPeerIpv6Gateway, vADCNewCfgTableEntry=vADCNewCfgTableEntry, vADCCurCfgNetVADCId=vADCCurCfgNetVADCId, vADCCurCfgSysPeerGw=vADCCurCfgSysPeerGw, vADCNewCfgNetVlanId=vADCNewCfgNetVlanId, vADCCurCfgIdleDelegation=vADCCurCfgIdleDelegation, vADCNewCfgSysTnetState=vADCNewCfgSysTnetState, vADCStat=vADCStat, vADCNewCfgNetTableEntry=vADCNewCfgNetTableEntry, vADCBootTable=vADCBootTable, vADCCurCfgSysMmgmtIpv6Gateway=vADCCurCfgSysMmgmtIpv6Gateway, vADCUserNewCfgTableEntry=vADCUserNewCfgTableEntry, vADCBoot=vADCBoot, vADCCurCfgCU=vADCCurCfgCU, vADCNewCfgSysPeerIpv6Addr=vADCNewCfgSysPeerIpv6Addr, vADCUserCurCos=vADCUserCurCos, vADCUserNewCfgBackdoor=vADCUserNewCfgBackdoor, vADCUserNewCfgDelete=vADCUserNewCfgDelete, vADCCurCfgTable=vADCCurCfgTable, vADCUserNewCfgTable=vADCUserNewCfgTable, vADCCurCfgSysPeerAddr=vADCCurCfgSysPeerAddr, vADCStatsAccelResourceTableEntry=vADCStatsAccelResourceTableEntry, vADCCurCfgSysIdleState=vADCCurCfgSysIdleState, vADCCurCfgSysMmgmtMask=vADCCurCfgSysMmgmtMask, vADCCurCfgSysMmgmtGw=vADCCurCfgSysMmgmtGw, vADCCurCfgFeatITM=vADCCurCfgFeatITM, vADCNewCfgTable=vADCNewCfgTable, vADCCurCfgSysPeerMask=vADCCurCfgSysPeerMask, vADCNewCfgSysSnmpState=vADCNewCfgSysSnmpState, vADCNewCfgNetIPv6End=vADCNewCfgNetIPv6End, vADCAccessUser=vADCAccessUser, vADCInfoStatus=vADCInfoStatus, vADCAccessUid=vADCAccessUid, vADCInfoThroughput=vADCInfoThroughput, vADCMemStatsIndex=vADCMemStatsIndex, vADCUserNewCfgAdminPswd=vADCUserNewCfgAdminPswd, vADCCurCfgVADCId=vADCCurCfgVADCId, vADCCurCfgSysPeerName=vADCCurCfgSysPeerName, adminvADCInfo=adminvADCInfo, vADCCurCfgNetIPEnd=vADCCurCfgNetIPEnd, vADCCurCfgSysRadiusState=vADCCurCfgSysRadiusState, adminvADCConfigs=adminvADCConfigs, vADCInfoTable=vADCInfoTable, vADCIndex=vADCIndex, vADCInfoAvailableCU=vADCInfoAvailableCU, vADCNewCfgAddVlan=vADCNewCfgAddVlan, vADCNewCfgCU=vADCNewCfgCU, vADCNewCfgSysSmtpState=vADCNewCfgSysSmtpState, vADCUserCurCfgPswd=vADCUserCurCfgPswd, vADCCurCfgSysSshState=vADCCurCfgSysSshState, vADCCurCfgFeatBWM=vADCCurCfgFeatBWM, vADCNewCfgSysMmgmtIpv6Gateway=vADCNewCfgSysMmgmtIpv6Gateway, vADCCurCfgNetVlanId=vADCCurCfgNetVlanId, vADCNewCfgVlanId=vADCNewCfgVlanId, vADCCurCfgState=vADCCurCfgState, vADCUsersVADCId=vADCUsersVADCId, vADCStatsCompUtil=vADCStatsCompUtil, vADCUserNewCos=vADCUserNewCos, vADCUserCurCfgName=vADCUserCurCfgName, vADCNewCfgRemoveVlan=vADCNewCfgRemoveVlan, vADCCurCfgSysMmgmtAddr=vADCCurCfgSysMmgmtAddr, vADCNewSyncPeerSwitch=vADCNewSyncPeerSwitch, vADCAccessUsrPasswd=vADCAccessUsrPasswd, vADCCurCfgSysTable=vADCCurCfgSysTable, vADCNewCfgNetId=vADCNewCfgNetId, vADCCurCfgSysTnetState=vADCCurCfgSysTnetState, vADCUserNewCfgName=vADCUserNewCfgName, vADCAccessAdminNewPasswd=vADCAccessAdminNewPasswd, vADCUserNewCfgUId=vADCUserNewCfgUId, vADCUsersPswdTable=vADCUsersPswdTable, vADCNewCfgNetMask=vADCNewCfgNetMask, vADCInfoVRRPStatus=vADCInfoVRRPStatus, vADCCurCfgNetPrefix=vADCCurCfgNetPrefix, vADCNewCfgSysHttpsState=vADCNewCfgSysHttpsState, PYSNMP_MODULE_ID=adminvADC, vADCCurCfgNetIPv6Begin=vADCCurCfgNetIPv6Begin, vADCCurCfgSysTableEntry=vADCCurCfgSysTableEntry, vADCUsersPswdTableEntry=vADCUsersPswdTableEntry, vADCMaxCU=vADCMaxCU, vADCCurResetImageVersion=vADCCurResetImageVersion, vADCNewCfgFeatITM=vADCNewCfgFeatITM, vADCNewCfgSysVADCId=vADCNewCfgSysVADCId, vADCCurCfgLimit=vADCCurCfgLimit, vADCCurCfgSmtpDelegation=vADCCurCfgSmtpDelegation, vADCUserCurCfgConfPswd=vADCUserCurCfgConfPswd, vADCCurCfgFeatADOS=vADCCurCfgFeatADOS, vADCInfoCU=vADCInfoCU, vADCUserNewCfgPswd=vADCUserNewCfgPswd, vADCNewCfgName=vADCNewCfgName, vADCNewCfgSysMmgmtGw=vADCNewCfgSysMmgmtGw, vADCNewCfgFeatGlobal=vADCNewCfgFeatGlobal, vADCCurCfgTacacsDelegation=vADCCurCfgTacacsDelegation, vADCCurCfgSysMmgmtIpv6PrefixLen=vADCCurCfgSysMmgmtIpv6PrefixLen, vADCNewCfgSysMmgmtDelegation=vADCNewCfgSysMmgmtDelegation, vADCCurCfgSysHaId=vADCCurCfgSysHaId, vADCUserCurCfgAdminPswd=vADCUserCurCfgAdminPswd, vADCAccessSlbAdminPasswd=vADCAccessSlbAdminPasswd, vADCCurCfgNetMask=vADCCurCfgNetMask, vADCStatsAccelResourceTable=vADCStatsAccelResourceTable, vADCInfoSPcpu=vADCInfoSPcpu, vADCNewCfgNetTable=vADCNewCfgNetTable, vADCCurCfgSysPeerIpv6Addr=vADCCurCfgSysPeerIpv6Addr, vADCUserCurCfgUId=vADCUserCurCfgUId, vADCName=vADCName, vADCNewCfgFeatADOS=vADCNewCfgFeatADOS, vADCNewCfgNetPrefix=vADCNewCfgNetPrefix, vADCNewCfgSysIdleState=vADCNewCfgSysIdleState, vADCInfoAvailableThruput=vADCInfoAvailableThruput, vADCMemStatsTable=vADCMemStatsTable, vADCStatsSSLUtil=vADCStatsSSLUtil, vADCNewCfgSysPeerId=vADCNewCfgSysPeerId, vADCCurCfgRadiusDelegation=vADCCurCfgRadiusDelegation, vADCNewCfgNetIPv6Begin=vADCNewCfgNetIPv6Begin, vADCAccessL4AdminPasswd=vADCAccessL4AdminPasswd, vADCAccessOperPasswd=vADCAccessOperPasswd, vADCNewCfgSslLimit=vADCNewCfgSslLimit)
