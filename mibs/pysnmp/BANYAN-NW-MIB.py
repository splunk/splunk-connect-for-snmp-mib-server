#
# PySNMP MIB module BANYAN-NW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BANYAN-NW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, MibIdentifier, NotificationType, Bits, iso, enterprises, Integer32, Counter64, ObjectIdentity, Counter32, Unsigned32, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "MibIdentifier", "NotificationType", "Bits", "iso", "enterprises", "Integer32", "Counter64", "ObjectIdentity", "Counter32", "Unsigned32", "ModuleIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
banyan = MibIdentifier((1, 3, 6, 1, 4, 1, 130))
others = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 2))
netware = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 2, 1))
nwmib1 = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 2, 1, 1))
nwfsinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1))
nwperipherals = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2))
nwinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3))
nwprotocols = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4))
nwName = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwName.setStatus('mandatory')
nwCompany = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwCompany.setStatus('mandatory')
nwRev = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRev.setStatus('mandatory')
nwRevDate = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRevDate.setStatus('mandatory')
nwCopyRight = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwCopyRight.setStatus('mandatory')
nwConnsSupp = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnsSupp.setStatus('mandatory')
nwConnsInUse = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnsInUse.setStatus('mandatory')
nwPeakConnectionsUsed = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPeakConnectionsUsed.setStatus('mandatory')
nwMaxVolsSupp = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMaxVolsSupp.setStatus('mandatory')
nwRevArray = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRevArray.setStatus('mandatory')
nwVolNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolNumber.setStatus('mandatory')
nwVolTable = MibTable((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: nwVolTable.setStatus('mandatory')
nwVolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "BANYAN-NW-MIB", "nwVolIndex"))
if mibBuilder.loadTexts: nwVolEntry.setStatus('mandatory')
nwVolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolIndex.setStatus('mandatory')
nwVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolName.setStatus('mandatory')
nwVolDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolDrive.setStatus('mandatory')
nwVolSectorsPerBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolSectorsPerBlk.setStatus('mandatory')
nwVolStartBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolStartBlk.setStatus('mandatory')
nwVolTotalBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolTotalBlks.setStatus('mandatory')
nwVolAvailBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolAvailBlks.setStatus('mandatory')
nwVolTotalDirSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolTotalDirSlots.setStatus('mandatory')
nwVolAvailDirSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolAvailDirSlots.setStatus('mandatory')
nwVolMaxDirSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolMaxDirSlots.setStatus('mandatory')
nwVolHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolHashing.setStatus('mandatory')
nwVolRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolRemovable.setStatus('mandatory')
nwVolMounted = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolMounted.setStatus('mandatory')
nwVolPurgeBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolPurgeBlks.setStatus('mandatory')
nwVolNotPurgeBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolNotPurgeBlks.setStatus('mandatory')
nwIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfNumber.setStatus('mandatory')
nwIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: nwIfCfgTable.setStatus('mandatory')
nwIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "BANYAN-NW-MIB", "nwIfCfgBoardNo"))
if mibBuilder.loadTexts: nwIfCfgEntry.setStatus('mandatory')
nwIfCfgSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgSignature.setStatus('mandatory')
nwIfCfgMajVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMajVer.setStatus('mandatory')
nwIfCfgMinVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMinVer.setStatus('mandatory')
nwIfCfgNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgNodeAddress.setStatus('mandatory')
nwIfCfgModeFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgModeFlags.setStatus('mandatory')
nwIfCfgBoardNo = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgBoardNo.setStatus('mandatory')
nwIfCfgBoardInst = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgBoardInst.setStatus('mandatory')
nwIfCfgMaxDataSz = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMaxDataSz.setStatus('mandatory')
nwIfCfgMaxRcvSz = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMaxRcvSz.setStatus('mandatory')
nwIfCfgRcvSz = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgRcvSz.setStatus('mandatory')
nwIfCfgCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgCardName.setStatus('mandatory')
nwIfCfgShortName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgShortName.setStatus('mandatory')
nwIfCfgMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMediaType.setStatus('mandatory')
nwIfCfgCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgCardId.setStatus('mandatory')
nwIfCfgMediaId = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMediaId.setStatus('mandatory')
nwIfCfgTransportTM = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgTransportTM.setStatus('mandatory')
nwIfCfgMlidMajVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMlidMajVer.setStatus('mandatory')
nwIfCfgMlidMinVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMlidMinVer.setStatus('mandatory')
nwIfCfgFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgFlags.setStatus('mandatory')
nwIfCfgSendRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgSendRetries.setStatus('mandatory')
nwIfCfgShareFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgShareFlags.setStatus('mandatory')
nwIfCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgSlot.setStatus('mandatory')
nwIfCfgIoAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgIoAddr1.setStatus('mandatory')
nwIfCfgIoRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgIoRange1.setStatus('mandatory')
nwIfCfgIoAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgIoAddr2.setStatus('mandatory')
nwIfCfgIoRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgIoRange2.setStatus('mandatory')
nwIfCfgMemAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMemAddr1.setStatus('mandatory')
nwIfCfgMemSize1 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMemSize1.setStatus('mandatory')
nwIfCfgMemAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMemAddr2.setStatus('mandatory')
nwIfCfgMemSize2 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgMemSize2.setStatus('mandatory')
nwIfCfgInt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgInt1.setStatus('mandatory')
nwIfCfgInt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgInt2.setStatus('mandatory')
nwIfCfgDma1 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgDma1.setStatus('mandatory')
nwIfCfgDma2 = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCfgDma2.setStatus('mandatory')
nwIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: nwIfStatsTable.setStatus('mandatory')
nwIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "BANYAN-NW-MIB", "nwIfStatsBoardNo"))
if mibBuilder.loadTexts: nwIfStatsEntry.setStatus('mandatory')
nwIfStatsMajVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsMajVer.setStatus('mandatory')
nwIfStatsMinVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsMinVer.setStatus('mandatory')
nwIfStatsValidMask = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsValidMask.setStatus('mandatory')
nwIfStatsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsTotalTxPkts.setStatus('mandatory')
nwIfStatsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsTotalRxPkts.setStatus('mandatory')
nwIfStatsNoAvailEcbs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsNoAvailEcbs.setStatus('mandatory')
nwIfStatsTxTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsTxTooBigs.setStatus('mandatory')
nwIfStatsTxTooSmalls = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsTxTooSmalls.setStatus('mandatory')
nwIfStatsRxOverFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsRxOverFlows.setStatus('mandatory')
nwIfStatsRxTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsRxTooBigs.setStatus('mandatory')
nwIfStatsRxTooSmalls = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsRxTooSmalls.setStatus('mandatory')
nwIfStatsTxMiscErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsTxMiscErrs.setStatus('mandatory')
nwIfStatsRxMiscErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsRxMiscErrs.setStatus('mandatory')
nwIfStatsTxRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsTxRetrys.setStatus('mandatory')
nwIfStatsRxChkSumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsRxChkSumErrs.setStatus('mandatory')
nwIfStatsRxMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsRxMismatchs.setStatus('mandatory')
nwIfStatsBoardNo = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsBoardNo.setStatus('mandatory')
nwIfStatsCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfStatsCustom.setStatus('mandatory')
nwIfCustomStatsTable = MibTable((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 4), )
if mibBuilder.loadTexts: nwIfCustomStatsTable.setStatus('mandatory')
nwIfCustomStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 4, 1), ).setIndexNames((0, "BANYAN-NW-MIB", "nwIfCustomStatsBoardNo"), (0, "BANYAN-NW-MIB", "nwIfCustomStatsIndex"))
if mibBuilder.loadTexts: nwIfCustomStatsEntry.setStatus('mandatory')
nwIfCustomStatsBoardNo = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCustomStatsBoardNo.setStatus('mandatory')
nwIfCustomStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCustomStatsIndex.setStatus('mandatory')
nwIfCustomStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCustomStatsDescr.setStatus('mandatory')
nwIfCustomStatsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIfCustomStatsValue.setStatus('mandatory')
nwProtNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtNumber.setStatus('mandatory')
nwProtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: nwProtCfgTable.setStatus('mandatory')
nwProtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "BANYAN-NW-MIB", "nwProtCfgProtNo"))
if mibBuilder.loadTexts: nwProtCfgEntry.setStatus('mandatory')
nwProtCfgProtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCfgProtNo.setStatus('mandatory')
nwProtCfgMajVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCfgMajVer.setStatus('mandatory')
nwProtCfgMinVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCfgMinVer.setStatus('mandatory')
nwProtCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCfgName.setStatus('mandatory')
nwProtCfgRegName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCfgRegName.setStatus('mandatory')
nwProtCfgStkMajVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCfgStkMajVer.setStatus('mandatory')
nwProtCfgStkMinVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCfgStkMinVer.setStatus('mandatory')
nwProtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3), )
if mibBuilder.loadTexts: nwProtStatsTable.setStatus('mandatory')
nwProtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1), ).setIndexNames((0, "BANYAN-NW-MIB", "nwProtStatsProtNo"))
if mibBuilder.loadTexts: nwProtStatsEntry.setStatus('mandatory')
nwProtStatsProtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsProtNo.setStatus('mandatory')
nwProtStatsMajVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsMajVer.setStatus('mandatory')
nwProtStatsMinVer = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsMinVer.setStatus('mandatory')
nwProtStatsValidMask = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsValidMask.setStatus('mandatory')
nwProtStatsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsTotalTxPkts.setStatus('mandatory')
nwProtStatsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsTotalRxPkts.setStatus('mandatory')
nwProtStatsIgnoredRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsIgnoredRxPkts.setStatus('mandatory')
nwProtStatsCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtStatsCustom.setStatus('mandatory')
nwProtCustomStatsTable = MibTable((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 4), )
if mibBuilder.loadTexts: nwProtCustomStatsTable.setStatus('mandatory')
nwProtCustomStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 4, 1), ).setIndexNames((0, "BANYAN-NW-MIB", "nwProtCustomStatsProtNo"), (0, "BANYAN-NW-MIB", "nwProtCustomStatsIndex"))
if mibBuilder.loadTexts: nwProtCustomStatsEntry.setStatus('mandatory')
nwProtCustomStatsProtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCustomStatsProtNo.setStatus('mandatory')
nwProtCustomStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCustomStatsIndex.setStatus('mandatory')
nwProtCustomStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCustomStatsDescr.setStatus('mandatory')
nwProtCustomStatsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 2, 1, 1, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwProtCustomStatsValue.setStatus('mandatory')
mibBuilder.exportSymbols("BANYAN-NW-MIB", nwProtCfgMajVer=nwProtCfgMajVer, nwProtCfgStkMinVer=nwProtCfgStkMinVer, nwIfCfgSignature=nwIfCfgSignature, nwVolNumber=nwVolNumber, nwVolDrive=nwVolDrive, nwIfCfgMemSize1=nwIfCfgMemSize1, others=others, nwIfStatsTxMiscErrs=nwIfStatsTxMiscErrs, nwVolNotPurgeBlks=nwVolNotPurgeBlks, nwVolEntry=nwVolEntry, nwVolIndex=nwVolIndex, nwIfStatsRxChkSumErrs=nwIfStatsRxChkSumErrs, banyan=banyan, nwIfCfgDma1=nwIfCfgDma1, nwIfCfgTransportTM=nwIfCfgTransportTM, nwIfCfgMaxDataSz=nwIfCfgMaxDataSz, nwIfCfgMajVer=nwIfCfgMajVer, nwProtCfgName=nwProtCfgName, nwIfStatsMajVer=nwIfStatsMajVer, nwIfCfgTable=nwIfCfgTable, nwPeakConnectionsUsed=nwPeakConnectionsUsed, nwIfCfgMaxRcvSz=nwIfCfgMaxRcvSz, nwRevDate=nwRevDate, nwProtCfgProtNo=nwProtCfgProtNo, nwVolStartBlk=nwVolStartBlk, nwIfCfgModeFlags=nwIfCfgModeFlags, nwIfCfgInt2=nwIfCfgInt2, nwIfCustomStatsIndex=nwIfCustomStatsIndex, nwVolPurgeBlks=nwVolPurgeBlks, nwIfCfgInt1=nwIfCfgInt1, nwProtStatsMinVer=nwProtStatsMinVer, nwIfStatsRxOverFlows=nwIfStatsRxOverFlows, nwIfCfgDma2=nwIfCfgDma2, nwIfStatsValidMask=nwIfStatsValidMask, nwVolAvailBlks=nwVolAvailBlks, nwIfCfgIoAddr2=nwIfCfgIoAddr2, nwIfStatsTotalRxPkts=nwIfStatsTotalRxPkts, nwIfCustomStatsEntry=nwIfCustomStatsEntry, nwCompany=nwCompany, nwCopyRight=nwCopyRight, nwIfStatsRxTooSmalls=nwIfStatsRxTooSmalls, nwProtCustomStatsProtNo=nwProtCustomStatsProtNo, nwProtCustomStatsEntry=nwProtCustomStatsEntry, nwIfCfgBoardNo=nwIfCfgBoardNo, nwProtStatsValidMask=nwProtStatsValidMask, nwIfCfgMlidMajVer=nwIfCfgMlidMajVer, nwVolMaxDirSlots=nwVolMaxDirSlots, nwProtNumber=nwProtNumber, nwIfStatsTotalTxPkts=nwIfStatsTotalTxPkts, nwIfCfgBoardInst=nwIfCfgBoardInst, nwIfStatsNoAvailEcbs=nwIfStatsNoAvailEcbs, nwIfCfgShareFlags=nwIfCfgShareFlags, nwVolRemovable=nwVolRemovable, nwIfCfgNodeAddress=nwIfCfgNodeAddress, nwConnsSupp=nwConnsSupp, nwRev=nwRev, nwVolAvailDirSlots=nwVolAvailDirSlots, nwProtStatsMajVer=nwProtStatsMajVer, nwConnsInUse=nwConnsInUse, nwIfStatsRxMismatchs=nwIfStatsRxMismatchs, nwIfCfgRcvSz=nwIfCfgRcvSz, nwProtStatsCustom=nwProtStatsCustom, nwIfStatsTxTooSmalls=nwIfStatsTxTooSmalls, nwProtCfgEntry=nwProtCfgEntry, nwIfStatsTable=nwIfStatsTable, nwProtCustomStatsDescr=nwProtCustomStatsDescr, nwName=nwName, nwIfStatsTxRetrys=nwIfStatsTxRetrys, nwIfNumber=nwIfNumber, nwIfCustomStatsBoardNo=nwIfCustomStatsBoardNo, nwProtStatsTotalTxPkts=nwProtStatsTotalTxPkts, nwVolTotalDirSlots=nwVolTotalDirSlots, nwIfCustomStatsValue=nwIfCustomStatsValue, nwIfCfgMemSize2=nwIfCfgMemSize2, nwIfCfgFlags=nwIfCfgFlags, nwProtCfgTable=nwProtCfgTable, nwProtCfgRegName=nwProtCfgRegName, nwProtStatsProtNo=nwProtStatsProtNo, nwIfCfgShortName=nwIfCfgShortName, nwProtCfgStkMajVer=nwProtCfgStkMajVer, nwVolTable=nwVolTable, nwIfCfgCardName=nwIfCfgCardName, nwinterfaces=nwinterfaces, nwProtStatsTable=nwProtStatsTable, nwProtStatsEntry=nwProtStatsEntry, nwProtCustomStatsValue=nwProtCustomStatsValue, nwIfCfgMediaId=nwIfCfgMediaId, nwIfStatsRxTooBigs=nwIfStatsRxTooBigs, nwIfCfgMinVer=nwIfCfgMinVer, nwIfCfgMemAddr1=nwIfCfgMemAddr1, nwMaxVolsSupp=nwMaxVolsSupp, nwIfStatsEntry=nwIfStatsEntry, nwIfCfgMediaType=nwIfCfgMediaType, netware=netware, nwIfCfgMemAddr2=nwIfCfgMemAddr2, nwIfStatsRxMiscErrs=nwIfStatsRxMiscErrs, nwProtStatsIgnoredRxPkts=nwProtStatsIgnoredRxPkts, nwfsinfo=nwfsinfo, nwRevArray=nwRevArray, nwIfCfgMlidMinVer=nwIfCfgMlidMinVer, nwVolMounted=nwVolMounted, nwProtCustomStatsIndex=nwProtCustomStatsIndex, nwProtCustomStatsTable=nwProtCustomStatsTable, nwIfCfgSendRetries=nwIfCfgSendRetries, nwIfCfgSlot=nwIfCfgSlot, nwVolSectorsPerBlk=nwVolSectorsPerBlk, nwVolHashing=nwVolHashing, nwIfCfgIoRange2=nwIfCfgIoRange2, nwProtStatsTotalRxPkts=nwProtStatsTotalRxPkts, nwIfCustomStatsDescr=nwIfCustomStatsDescr, nwmib1=nwmib1, nwIfStatsMinVer=nwIfStatsMinVer, nwProtCfgMinVer=nwProtCfgMinVer, nwIfCfgCardId=nwIfCfgCardId, nwVolName=nwVolName, nwIfCustomStatsTable=nwIfCustomStatsTable, nwIfStatsBoardNo=nwIfStatsBoardNo, nwIfStatsCustom=nwIfStatsCustom, nwprotocols=nwprotocols, nwVolTotalBlks=nwVolTotalBlks, nwIfCfgIoAddr1=nwIfCfgIoAddr1, nwIfCfgIoRange1=nwIfCfgIoRange1, nwperipherals=nwperipherals, nwIfCfgEntry=nwIfCfgEntry, nwIfStatsTxTooBigs=nwIfStatsTxTooBigs)
