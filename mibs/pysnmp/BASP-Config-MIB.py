#
# PySNMP MIB module BASP-Config-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BASP-Config-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Bits, TimeTicks, NotificationType, ModuleIdentity, enterprises, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, MibIdentifier, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Bits", "TimeTicks", "NotificationType", "ModuleIdentity", "enterprises", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "MibIdentifier", "Integer32", "Gauge32")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
broadcom = MibIdentifier((1, 3, 6, 1, 4, 1, 4413))
enet = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1))
basp = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2))
baspConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1))
baspTeam = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1))
baspPhyAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2))
baspVirAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3))
btTeamNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btTeamNumber.setStatus('mandatory')
btTeamTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: btTeamTable.setStatus('mandatory')
btTeamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1), ).setIndexNames((0, "BASP-Config-MIB", "btTeamIndex"))
if mibBuilder.loadTexts: btTeamEntry.setStatus('mandatory')
btTeamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btTeamIndex.setStatus('mandatory')
btTeamName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btTeamName.setStatus('mandatory')
btTeamType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 102, 104))).clone(namedValues=NamedValues(("team-SLB", 100), ("team-FEC-GEC", 101), ("team-802-3-AD", 102), ("team-SLB-AFD", 104)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btTeamType.setStatus('mandatory')
btTeamMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btTeamMacAddress.setStatus('mandatory')
btPhyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btPhyNumber.setStatus('mandatory')
btVirNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btVirNumber.setStatus('mandatory')
btMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primaryMode", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btMode.setStatus('mandatory')
btLiveLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLiveLinkEnable.setStatus('mandatory')
btLinkPacketFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLinkPacketFrequency.setStatus('mandatory')
btLinkMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLinkMaxRetry.setStatus('mandatory')
btLinkRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLinkRetryFrequency.setStatus('mandatory')
btLinkTargetIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLinkTargetIpAddress1.setStatus('mandatory')
btLinkTargetIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLinkTargetIpAddress2.setStatus('mandatory')
btLinkTargetIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLinkTargetIpAddress3.setStatus('mandatory')
btLinkTargetIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 1, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btLinkTargetIpAddress4.setStatus('mandatory')
btPhyAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btPhyAdapterNumber.setStatus('mandatory')
btPhyAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: btPhyAdapterTable.setStatus('mandatory')
btPhyAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "BASP-Config-MIB", "btpTeamIndex"), (0, "BASP-Config-MIB", "btpAdapterIndex"))
if mibBuilder.loadTexts: btPhyAdapterEntry.setStatus('mandatory')
btpTeamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btpTeamIndex.setStatus('mandatory')
btpAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btpAdapterIndex.setStatus('mandatory')
btpAdapterDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btpAdapterDesc.setStatus('mandatory')
btpMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("load-balance", 100), ("standby", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btpMemberType.setStatus('mandatory')
btpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btpMacAddress.setStatus('mandatory')
btpMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("link-up-not-join-traffic", 2), ("disable-not-join-traffic", 3), ("join-traffic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btpMemberState.setStatus('mandatory')
btpLiveLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 2, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btpLiveLinkIp.setStatus('mandatory')
btVirAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btVirAdapterNumber.setStatus('mandatory')
btVirAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: btVirAdapterTable.setStatus('mandatory')
btVirAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "BASP-Config-MIB", "btvTeamIndex"), (0, "BASP-Config-MIB", "btvAdapterIndex"))
if mibBuilder.loadTexts: btVirAdapterEntry.setStatus('mandatory')
btvTeamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btvTeamIndex.setStatus('mandatory')
btvAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btvAdapterIndex.setStatus('mandatory')
btvAdapterDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btvAdapterDesc.setStatus('mandatory')
btvVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btvVlanId.setStatus('mandatory')
btvLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link-up", 1), ("link-fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btvLinkStatus.setStatus('mandatory')
btvIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btvIPAddress.setStatus('mandatory')
btvSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btvSubnetMask.setStatus('mandatory')
btvPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btvPhysAddress.setStatus('mandatory')
btvLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btvLineSpeed.setStatus('mandatory')
mibBuilder.exportSymbols("BASP-Config-MIB", btvLinkStatus=btvLinkStatus, btVirAdapterTable=btVirAdapterTable, btpMemberState=btpMemberState, btvPhysAddress=btvPhysAddress, enet=enet, btLinkTargetIpAddress1=btLinkTargetIpAddress1, btTeamIndex=btTeamIndex, btLinkTargetIpAddress2=btLinkTargetIpAddress2, btLinkRetryFrequency=btLinkRetryFrequency, btvAdapterDesc=btvAdapterDesc, broadcom=broadcom, btVirNumber=btVirNumber, btLinkTargetIpAddress4=btLinkTargetIpAddress4, btLinkMaxRetry=btLinkMaxRetry, btVirAdapterEntry=btVirAdapterEntry, btTeamMacAddress=btTeamMacAddress, btvSubnetMask=btvSubnetMask, btTeamName=btTeamName, baspTeam=baspTeam, btPhyAdapterNumber=btPhyAdapterNumber, btTeamTable=btTeamTable, btvVlanId=btvVlanId, btLinkPacketFrequency=btLinkPacketFrequency, btpAdapterDesc=btpAdapterDesc, baspPhyAdapter=baspPhyAdapter, baspConfig=baspConfig, btMode=btMode, btvIPAddress=btvIPAddress, btPhyAdapterTable=btPhyAdapterTable, btLiveLinkEnable=btLiveLinkEnable, baspVirAdapter=baspVirAdapter, btLinkTargetIpAddress3=btLinkTargetIpAddress3, btvTeamIndex=btvTeamIndex, basp=basp, btVirAdapterNumber=btVirAdapterNumber, btpMacAddress=btpMacAddress, btTeamNumber=btTeamNumber, btpTeamIndex=btpTeamIndex, btvAdapterIndex=btvAdapterIndex, btpLiveLinkIp=btpLiveLinkIp, btpAdapterIndex=btpAdapterIndex, btPhyNumber=btPhyNumber, btvLineSpeed=btvLineSpeed, btTeamEntry=btTeamEntry, btTeamType=btTeamType, btPhyAdapterEntry=btPhyAdapterEntry, btpMemberType=btpMemberType)
