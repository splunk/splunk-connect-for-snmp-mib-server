#
# PySNMP MIB module IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:02:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressPrefixLength, InetZoneIndex, InetAddress, InetAddressType, InetVersion = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetZoneIndex", "InetAddress", "InetAddressType", "InetVersion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, IpAddress, ModuleIdentity, zeroDotZero, Bits, Unsigned32, iso, NotificationType, Gauge32, ObjectIdentity, MibIdentifier, TimeTicks, Counter64, Integer32, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "ModuleIdentity", "zeroDotZero", "Bits", "Unsigned32", "iso", "NotificationType", "Gauge32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter64", "Integer32", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
StorageType, RowPointer, DisplayString, RowStatus, TestAndIncr, TextualConvention, PhysAddress, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowPointer", "DisplayString", "RowStatus", "TestAndIncr", "TextualConvention", "PhysAddress", "TimeStamp", "TruthValue")
ipMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 48))
ipMIB.setRevisions(('2006-02-02 00:00', '1994-11-01 00:00', '1991-03-31 00:00',))
if mibBuilder.loadTexts: ipMIB.setLastUpdated('200602020000Z')
if mibBuilder.loadTexts: ipMIB.setOrganization('IETF IPv6 MIB Revision Team')
class IpAddressOriginTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("manual", 2), ("dhcp", 4), ("linklayer", 5), ("random", 6))

class IpAddressStatusTC(TextualConvention, Integer32):
    reference = 'RFC 2462'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("preferred", 1), ("deprecated", 2), ("invalid", 3), ("inaccessible", 4), ("unknown", 5), ("tentative", 6), ("duplicate", 7), ("optimistic", 8))

class IpAddressPrefixOriginTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("manual", 2), ("wellknown", 3), ("dhcp", 4), ("routeradv", 5))

class Ipv6AddressIfIdentifierTC(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
ipForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notForwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwarding.setStatus('current')
ipDefaultTTL = MibScalar((1, 3, 6, 1, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultTTL.setStatus('current')
ipReasmTimeout = MibScalar((1, 3, 6, 1, 2, 1, 4, 13), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmTimeout.setStatus('current')
ipv6IpForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notForwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6IpForwarding.setStatus('current')
ipv6IpDefaultHopLimit = MibScalar((1, 3, 6, 1, 2, 1, 4, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6IpDefaultHopLimit.setStatus('current')
ipv4InterfaceTableLastChange = MibScalar((1, 3, 6, 1, 2, 1, 4, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4InterfaceTableLastChange.setStatus('current')
ipv4InterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 4, 28), )
if mibBuilder.loadTexts: ipv4InterfaceTable.setStatus('current')
ipv4InterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 28, 1), ).setIndexNames((0, "IP-MIB", "ipv4InterfaceIfIndex"))
if mibBuilder.loadTexts: ipv4InterfaceEntry.setStatus('current')
ipv4InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipv4InterfaceIfIndex.setStatus('current')
ipv4InterfaceReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4InterfaceReasmMaxSize.setStatus('current')
ipv4InterfaceEnableStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4InterfaceEnableStatus.setStatus('current')
ipv4InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 4), Unsigned32().clone(1000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4InterfaceRetransmitTime.setStatus('current')
ipv6InterfaceTableLastChange = MibScalar((1, 3, 6, 1, 2, 1, 4, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InterfaceTableLastChange.setStatus('current')
ipv6InterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 4, 30), )
if mibBuilder.loadTexts: ipv6InterfaceTable.setStatus('current')
ipv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 30, 1), ).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"))
if mibBuilder.loadTexts: ipv6InterfaceEntry.setStatus('current')
ipv6InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipv6InterfaceIfIndex.setStatus('current')
ipv6InterfaceReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1500, 65535))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InterfaceReasmMaxSize.setStatus('current')
ipv6InterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 3), Ipv6AddressIfIdentifierTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InterfaceIdentifier.setStatus('current')
ipv6InterfaceEnableStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6InterfaceEnableStatus.setStatus('current')
ipv6InterfaceReachableTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InterfaceReachableTime.setStatus('current')
ipv6InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InterfaceRetransmitTime.setStatus('current')
ipv6InterfaceForwarding = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notForwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6InterfaceForwarding.setStatus('current')
ipTrafficStats = MibIdentifier((1, 3, 6, 1, 2, 1, 4, 31))
ipSystemStatsTable = MibTable((1, 3, 6, 1, 2, 1, 4, 31, 1), )
if mibBuilder.loadTexts: ipSystemStatsTable.setStatus('current')
ipSystemStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 31, 1, 1), ).setIndexNames((0, "IP-MIB", "ipSystemStatsIPVersion"))
if mibBuilder.loadTexts: ipSystemStatsEntry.setStatus('current')
ipSystemStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 1), InetVersion())
if mibBuilder.loadTexts: ipSystemStatsIPVersion.setStatus('current')
ipSystemStatsInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInReceives.setStatus('current')
ipSystemStatsHCInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCInReceives.setStatus('current')
ipSystemStatsInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInOctets.setStatus('current')
ipSystemStatsHCInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCInOctets.setStatus('current')
ipSystemStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInHdrErrors.setStatus('current')
ipSystemStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInNoRoutes.setStatus('current')
ipSystemStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInAddrErrors.setStatus('current')
ipSystemStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInUnknownProtos.setStatus('current')
ipSystemStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInTruncatedPkts.setStatus('current')
ipSystemStatsInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInForwDatagrams.setStatus('current')
ipSystemStatsHCInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCInForwDatagrams.setStatus('current')
ipSystemStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsReasmReqds.setStatus('current')
ipSystemStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsReasmOKs.setStatus('current')
ipSystemStatsReasmFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsReasmFails.setStatus('current')
ipSystemStatsInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInDiscards.setStatus('current')
ipSystemStatsInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInDelivers.setStatus('current')
ipSystemStatsHCInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCInDelivers.setStatus('current')
ipSystemStatsOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutRequests.setStatus('current')
ipSystemStatsHCOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCOutRequests.setStatus('current')
ipSystemStatsOutNoRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutNoRoutes.setStatus('current')
ipSystemStatsOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutForwDatagrams.setStatus('current')
ipSystemStatsHCOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCOutForwDatagrams.setStatus('current')
ipSystemStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutDiscards.setStatus('current')
ipSystemStatsOutFragReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutFragReqds.setStatus('current')
ipSystemStatsOutFragOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutFragOKs.setStatus('current')
ipSystemStatsOutFragFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutFragFails.setStatus('current')
ipSystemStatsOutFragCreates = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutFragCreates.setStatus('current')
ipSystemStatsOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutTransmits.setStatus('current')
ipSystemStatsHCOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCOutTransmits.setStatus('current')
ipSystemStatsOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutOctets.setStatus('current')
ipSystemStatsHCOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCOutOctets.setStatus('current')
ipSystemStatsInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInMcastPkts.setStatus('current')
ipSystemStatsHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCInMcastPkts.setStatus('current')
ipSystemStatsInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInMcastOctets.setStatus('current')
ipSystemStatsHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCInMcastOctets.setStatus('current')
ipSystemStatsOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutMcastPkts.setStatus('current')
ipSystemStatsHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCOutMcastPkts.setStatus('current')
ipSystemStatsOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutMcastOctets.setStatus('current')
ipSystemStatsHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCOutMcastOctets.setStatus('current')
ipSystemStatsInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsInBcastPkts.setStatus('current')
ipSystemStatsHCInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCInBcastPkts.setStatus('current')
ipSystemStatsOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsOutBcastPkts.setStatus('current')
ipSystemStatsHCOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsHCOutBcastPkts.setStatus('current')
ipSystemStatsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 46), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsDiscontinuityTime.setStatus('current')
ipSystemStatsRefreshRate = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 47), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSystemStatsRefreshRate.setStatus('current')
ipIfStatsTableLastChange = MibScalar((1, 3, 6, 1, 2, 1, 4, 31, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsTableLastChange.setStatus('current')
ipIfStatsTable = MibTable((1, 3, 6, 1, 2, 1, 4, 31, 3), )
if mibBuilder.loadTexts: ipIfStatsTable.setStatus('current')
ipIfStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 31, 3, 1), ).setIndexNames((0, "IP-MIB", "ipIfStatsIPVersion"), (0, "IP-MIB", "ipIfStatsIfIndex"))
if mibBuilder.loadTexts: ipIfStatsEntry.setStatus('current')
ipIfStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 1), InetVersion())
if mibBuilder.loadTexts: ipIfStatsIPVersion.setStatus('current')
ipIfStatsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ipIfStatsIfIndex.setStatus('current')
ipIfStatsInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInReceives.setStatus('current')
ipIfStatsHCInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCInReceives.setStatus('current')
ipIfStatsInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInOctets.setStatus('current')
ipIfStatsHCInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCInOctets.setStatus('current')
ipIfStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInHdrErrors.setStatus('current')
ipIfStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInNoRoutes.setStatus('current')
ipIfStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInAddrErrors.setStatus('current')
ipIfStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInUnknownProtos.setStatus('current')
ipIfStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInTruncatedPkts.setStatus('current')
ipIfStatsInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInForwDatagrams.setStatus('current')
ipIfStatsHCInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCInForwDatagrams.setStatus('current')
ipIfStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsReasmReqds.setStatus('current')
ipIfStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsReasmOKs.setStatus('current')
ipIfStatsReasmFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsReasmFails.setStatus('current')
ipIfStatsInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInDiscards.setStatus('current')
ipIfStatsInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInDelivers.setStatus('current')
ipIfStatsHCInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCInDelivers.setStatus('current')
ipIfStatsOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutRequests.setStatus('current')
ipIfStatsHCOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCOutRequests.setStatus('current')
ipIfStatsOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutForwDatagrams.setStatus('current')
ipIfStatsHCOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCOutForwDatagrams.setStatus('current')
ipIfStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutDiscards.setStatus('current')
ipIfStatsOutFragReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutFragReqds.setStatus('current')
ipIfStatsOutFragOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutFragOKs.setStatus('current')
ipIfStatsOutFragFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutFragFails.setStatus('current')
ipIfStatsOutFragCreates = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutFragCreates.setStatus('current')
ipIfStatsOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutTransmits.setStatus('current')
ipIfStatsHCOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCOutTransmits.setStatus('current')
ipIfStatsOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutOctets.setStatus('current')
ipIfStatsHCOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCOutOctets.setStatus('current')
ipIfStatsInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInMcastPkts.setStatus('current')
ipIfStatsHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCInMcastPkts.setStatus('current')
ipIfStatsInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInMcastOctets.setStatus('current')
ipIfStatsHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCInMcastOctets.setStatus('current')
ipIfStatsOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutMcastPkts.setStatus('current')
ipIfStatsHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCOutMcastPkts.setStatus('current')
ipIfStatsOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutMcastOctets.setStatus('current')
ipIfStatsHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCOutMcastOctets.setStatus('current')
ipIfStatsInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsInBcastPkts.setStatus('current')
ipIfStatsHCInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCInBcastPkts.setStatus('current')
ipIfStatsOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsOutBcastPkts.setStatus('current')
ipIfStatsHCOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsHCOutBcastPkts.setStatus('current')
ipIfStatsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 46), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsDiscontinuityTime.setStatus('current')
ipIfStatsRefreshRate = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 47), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfStatsRefreshRate.setStatus('current')
ipAddressPrefixTable = MibTable((1, 3, 6, 1, 2, 1, 4, 32), )
if mibBuilder.loadTexts: ipAddressPrefixTable.setStatus('current')
ipAddressPrefixEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 32, 1), ).setIndexNames((0, "IP-MIB", "ipAddressPrefixIfIndex"), (0, "IP-MIB", "ipAddressPrefixType"), (0, "IP-MIB", "ipAddressPrefixPrefix"), (0, "IP-MIB", "ipAddressPrefixLength"))
if mibBuilder.loadTexts: ipAddressPrefixEntry.setStatus('current')
ipAddressPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipAddressPrefixIfIndex.setStatus('current')
ipAddressPrefixType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ipAddressPrefixType.setStatus('current')
ipAddressPrefixPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 3), InetAddress())
if mibBuilder.loadTexts: ipAddressPrefixPrefix.setStatus('current')
ipAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: ipAddressPrefixLength.setStatus('current')
ipAddressPrefixOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 5), IpAddressPrefixOriginTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressPrefixOrigin.setStatus('current')
ipAddressPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressPrefixOnLinkFlag.setStatus('current')
ipAddressPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressPrefixAutonomousFlag.setStatus('current')
ipAddressPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressPrefixAdvPreferredLifetime.setStatus('current')
ipAddressPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressPrefixAdvValidLifetime.setStatus('current')
ipAddressSpinLock = MibScalar((1, 3, 6, 1, 2, 1, 4, 33), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressSpinLock.setStatus('current')
ipAddressTable = MibTable((1, 3, 6, 1, 2, 1, 4, 34), )
if mibBuilder.loadTexts: ipAddressTable.setStatus('current')
ipAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 34, 1), ).setIndexNames((0, "IP-MIB", "ipAddressAddrType"), (0, "IP-MIB", "ipAddressAddr"))
if mibBuilder.loadTexts: ipAddressEntry.setStatus('current')
ipAddressAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipAddressAddrType.setStatus('current')
ipAddressAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipAddressAddr.setStatus('current')
ipAddressIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressIfIndex.setStatus('current')
ipAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("broadcast", 3))).clone('unicast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressType.setStatus('current')
ipAddressPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 5), RowPointer().clone((0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressPrefix.setStatus('current')
ipAddressOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 6), IpAddressOriginTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressOrigin.setStatus('current')
ipAddressStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 7), IpAddressStatusTC().clone('preferred')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressStatus.setStatus('current')
ipAddressCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressCreated.setStatus('current')
ipAddressLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressLastChanged.setStatus('current')
ipAddressRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressRowStatus.setStatus('current')
ipAddressStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 11), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressStorageType.setStatus('current')
ipNetToPhysicalTable = MibTable((1, 3, 6, 1, 2, 1, 4, 35), )
if mibBuilder.loadTexts: ipNetToPhysicalTable.setStatus('current')
ipNetToPhysicalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 35, 1), ).setIndexNames((0, "IP-MIB", "ipNetToPhysicalIfIndex"), (0, "IP-MIB", "ipNetToPhysicalNetAddressType"), (0, "IP-MIB", "ipNetToPhysicalNetAddress"))
if mibBuilder.loadTexts: ipNetToPhysicalEntry.setStatus('current')
ipNetToPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipNetToPhysicalIfIndex.setStatus('current')
ipNetToPhysicalNetAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ipNetToPhysicalNetAddressType.setStatus('current')
ipNetToPhysicalNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 3), InetAddress())
if mibBuilder.loadTexts: ipNetToPhysicalNetAddress.setStatus('current')
ipNetToPhysicalPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 4), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToPhysicalPhysAddress.setStatus('current')
ipNetToPhysicalLastUpdated = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetToPhysicalLastUpdated.setStatus('current')
ipNetToPhysicalType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ("local", 5))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToPhysicalType.setStatus('current')
ipNetToPhysicalState = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6), ("incomplete", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetToPhysicalState.setStatus('current')
ipNetToPhysicalRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToPhysicalRowStatus.setStatus('current')
ipv6ScopeZoneIndexTable = MibTable((1, 3, 6, 1, 2, 1, 4, 36), )
if mibBuilder.loadTexts: ipv6ScopeZoneIndexTable.setStatus('current')
ipv6ScopeZoneIndexEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 36, 1), ).setIndexNames((0, "IP-MIB", "ipv6ScopeZoneIndexIfIndex"))
if mibBuilder.loadTexts: ipv6ScopeZoneIndexEntry.setStatus('current')
ipv6ScopeZoneIndexIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipv6ScopeZoneIndexIfIndex.setStatus('current')
ipv6ScopeZoneIndexLinkLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 2), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexLinkLocal.setStatus('current')
ipv6ScopeZoneIndex3 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 3), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndex3.setStatus('current')
ipv6ScopeZoneIndexAdminLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 4), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexAdminLocal.setStatus('current')
ipv6ScopeZoneIndexSiteLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 5), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexSiteLocal.setStatus('current')
ipv6ScopeZoneIndex6 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 6), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndex6.setStatus('current')
ipv6ScopeZoneIndex7 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 7), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndex7.setStatus('current')
ipv6ScopeZoneIndexOrganizationLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 8), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexOrganizationLocal.setStatus('current')
ipv6ScopeZoneIndex9 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 9), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndex9.setStatus('current')
ipv6ScopeZoneIndexA = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 10), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexA.setStatus('current')
ipv6ScopeZoneIndexB = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 11), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexB.setStatus('current')
ipv6ScopeZoneIndexC = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 12), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexC.setStatus('current')
ipv6ScopeZoneIndexD = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 13), InetZoneIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ScopeZoneIndexD.setStatus('current')
ipDefaultRouterTable = MibTable((1, 3, 6, 1, 2, 1, 4, 37), )
if mibBuilder.loadTexts: ipDefaultRouterTable.setStatus('current')
ipDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 37, 1), ).setIndexNames((0, "IP-MIB", "ipDefaultRouterAddressType"), (0, "IP-MIB", "ipDefaultRouterAddress"), (0, "IP-MIB", "ipDefaultRouterIfIndex"))
if mibBuilder.loadTexts: ipDefaultRouterEntry.setStatus('current')
ipDefaultRouterAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipDefaultRouterAddressType.setStatus('current')
ipDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipDefaultRouterAddress.setStatus('current')
ipDefaultRouterIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: ipDefaultRouterIfIndex.setStatus('current')
ipDefaultRouterLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDefaultRouterLifetime.setStatus('current')
ipDefaultRouterPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1, 0, 1))).clone(namedValues=NamedValues(("reserved", -2), ("low", -1), ("medium", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDefaultRouterPreference.setStatus('current')
ipv6RouterAdvertSpinLock = MibScalar((1, 3, 6, 1, 2, 1, 4, 38), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6RouterAdvertSpinLock.setStatus('current')
ipv6RouterAdvertTable = MibTable((1, 3, 6, 1, 2, 1, 4, 39), )
if mibBuilder.loadTexts: ipv6RouterAdvertTable.setStatus('current')
ipv6RouterAdvertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 39, 1), ).setIndexNames((0, "IP-MIB", "ipv6RouterAdvertIfIndex"))
if mibBuilder.loadTexts: ipv6RouterAdvertEntry.setStatus('current')
ipv6RouterAdvertIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipv6RouterAdvertIfIndex.setStatus('current')
ipv6RouterAdvertSendAdverts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertSendAdverts.setStatus('current')
ipv6RouterAdvertMaxInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertMaxInterval.setStatus('current')
ipv6RouterAdvertMinInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertMinInterval.setStatus('current')
ipv6RouterAdvertManagedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertManagedFlag.setStatus('current')
ipv6RouterAdvertOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertOtherConfigFlag.setStatus('current')
ipv6RouterAdvertLinkMTU = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertLinkMTU.setStatus('current')
ipv6RouterAdvertReachableTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertReachableTime.setStatus('current')
ipv6RouterAdvertRetransmitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertRetransmitTime.setStatus('current')
ipv6RouterAdvertCurHopLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertCurHopLimit.setStatus('current')
ipv6RouterAdvertDefaultLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 9000), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertDefaultLifetime.setStatus('current')
ipv6RouterAdvertRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6RouterAdvertRowStatus.setStatus('current')
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
icmpStatsTable = MibTable((1, 3, 6, 1, 2, 1, 5, 29), )
if mibBuilder.loadTexts: icmpStatsTable.setStatus('current')
icmpStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5, 29, 1), ).setIndexNames((0, "IP-MIB", "icmpStatsIPVersion"))
if mibBuilder.loadTexts: icmpStatsEntry.setStatus('current')
icmpStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 1), InetVersion())
if mibBuilder.loadTexts: icmpStatsIPVersion.setStatus('current')
icmpStatsInMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInMsgs.setStatus('current')
icmpStatsInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInErrors.setStatus('current')
icmpStatsOutMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutMsgs.setStatus('current')
icmpStatsOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutErrors.setStatus('current')
icmpMsgStatsTable = MibTable((1, 3, 6, 1, 2, 1, 5, 30), )
if mibBuilder.loadTexts: icmpMsgStatsTable.setStatus('current')
icmpMsgStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5, 30, 1), ).setIndexNames((0, "IP-MIB", "icmpMsgStatsIPVersion"), (0, "IP-MIB", "icmpMsgStatsType"))
if mibBuilder.loadTexts: icmpMsgStatsEntry.setStatus('current')
icmpMsgStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 1), InetVersion())
if mibBuilder.loadTexts: icmpMsgStatsIPVersion.setStatus('current')
icmpMsgStatsType = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: icmpMsgStatsType.setStatus('current')
icmpMsgStatsInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpMsgStatsInPkts.setStatus('current')
icmpMsgStatsOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpMsgStatsOutPkts.setStatus('current')
ipMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 48, 2))
ipMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 48, 2, 1))
ipMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 48, 2, 2))
ipMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 48, 2, 1, 2)).setObjects(("IP-MIB", "ipSystemStatsGroup"), ("IP-MIB", "ipAddressGroup"), ("IP-MIB", "ipNetToPhysicalGroup"), ("IP-MIB", "ipDefaultRouterGroup"), ("IP-MIB", "icmpStatsGroup"), ("IP-MIB", "ipSystemStatsHCOctetGroup"), ("IP-MIB", "ipSystemStatsHCPacketGroup"), ("IP-MIB", "ipIfStatsGroup"), ("IP-MIB", "ipIfStatsHCOctetGroup"), ("IP-MIB", "ipIfStatsHCPacketGroup"), ("IP-MIB", "ipv4GeneralGroup"), ("IP-MIB", "ipv4IfGroup"), ("IP-MIB", "ipv4SystemStatsGroup"), ("IP-MIB", "ipv4SystemStatsHCPacketGroup"), ("IP-MIB", "ipv4IfStatsGroup"), ("IP-MIB", "ipv4IfStatsHCPacketGroup"), ("IP-MIB", "ipv6GeneralGroup2"), ("IP-MIB", "ipv6IfGroup"), ("IP-MIB", "ipAddressPrefixGroup"), ("IP-MIB", "ipv6ScopeGroup"), ("IP-MIB", "ipv6RouterAdvertGroup"), ("IP-MIB", "ipLastChangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMIBCompliance2 = ipMIBCompliance2.setStatus('current')
ipv4GeneralGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 3)).setObjects(("IP-MIB", "ipForwarding"), ("IP-MIB", "ipDefaultTTL"), ("IP-MIB", "ipReasmTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv4GeneralGroup = ipv4GeneralGroup.setStatus('current')
ipv4IfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 4)).setObjects(("IP-MIB", "ipv4InterfaceReasmMaxSize"), ("IP-MIB", "ipv4InterfaceEnableStatus"), ("IP-MIB", "ipv4InterfaceRetransmitTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv4IfGroup = ipv4IfGroup.setStatus('current')
ipv6GeneralGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 5)).setObjects(("IP-MIB", "ipv6IpForwarding"), ("IP-MIB", "ipv6IpDefaultHopLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv6GeneralGroup2 = ipv6GeneralGroup2.setStatus('current')
ipv6IfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 6)).setObjects(("IP-MIB", "ipv6InterfaceReasmMaxSize"), ("IP-MIB", "ipv6InterfaceIdentifier"), ("IP-MIB", "ipv6InterfaceEnableStatus"), ("IP-MIB", "ipv6InterfaceReachableTime"), ("IP-MIB", "ipv6InterfaceRetransmitTime"), ("IP-MIB", "ipv6InterfaceForwarding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv6IfGroup = ipv6IfGroup.setStatus('current')
ipLastChangeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 7)).setObjects(("IP-MIB", "ipv4InterfaceTableLastChange"), ("IP-MIB", "ipv6InterfaceTableLastChange"), ("IP-MIB", "ipIfStatsTableLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipLastChangeGroup = ipLastChangeGroup.setStatus('current')
ipSystemStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 8)).setObjects(("IP-MIB", "ipSystemStatsInReceives"), ("IP-MIB", "ipSystemStatsInOctets"), ("IP-MIB", "ipSystemStatsInHdrErrors"), ("IP-MIB", "ipSystemStatsInNoRoutes"), ("IP-MIB", "ipSystemStatsInAddrErrors"), ("IP-MIB", "ipSystemStatsInUnknownProtos"), ("IP-MIB", "ipSystemStatsInTruncatedPkts"), ("IP-MIB", "ipSystemStatsInForwDatagrams"), ("IP-MIB", "ipSystemStatsReasmReqds"), ("IP-MIB", "ipSystemStatsReasmOKs"), ("IP-MIB", "ipSystemStatsReasmFails"), ("IP-MIB", "ipSystemStatsInDiscards"), ("IP-MIB", "ipSystemStatsInDelivers"), ("IP-MIB", "ipSystemStatsOutRequests"), ("IP-MIB", "ipSystemStatsOutNoRoutes"), ("IP-MIB", "ipSystemStatsOutForwDatagrams"), ("IP-MIB", "ipSystemStatsOutDiscards"), ("IP-MIB", "ipSystemStatsOutFragReqds"), ("IP-MIB", "ipSystemStatsOutFragOKs"), ("IP-MIB", "ipSystemStatsOutFragFails"), ("IP-MIB", "ipSystemStatsOutFragCreates"), ("IP-MIB", "ipSystemStatsOutTransmits"), ("IP-MIB", "ipSystemStatsOutOctets"), ("IP-MIB", "ipSystemStatsInMcastPkts"), ("IP-MIB", "ipSystemStatsInMcastOctets"), ("IP-MIB", "ipSystemStatsOutMcastPkts"), ("IP-MIB", "ipSystemStatsOutMcastOctets"), ("IP-MIB", "ipSystemStatsDiscontinuityTime"), ("IP-MIB", "ipSystemStatsRefreshRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipSystemStatsGroup = ipSystemStatsGroup.setStatus('current')
ipv4SystemStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 9)).setObjects(("IP-MIB", "ipSystemStatsInBcastPkts"), ("IP-MIB", "ipSystemStatsOutBcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv4SystemStatsGroup = ipv4SystemStatsGroup.setStatus('current')
ipSystemStatsHCOctetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 10)).setObjects(("IP-MIB", "ipSystemStatsHCInOctets"), ("IP-MIB", "ipSystemStatsHCOutOctets"), ("IP-MIB", "ipSystemStatsHCInMcastOctets"), ("IP-MIB", "ipSystemStatsHCOutMcastOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipSystemStatsHCOctetGroup = ipSystemStatsHCOctetGroup.setStatus('current')
ipSystemStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 11)).setObjects(("IP-MIB", "ipSystemStatsHCInReceives"), ("IP-MIB", "ipSystemStatsHCInForwDatagrams"), ("IP-MIB", "ipSystemStatsHCInDelivers"), ("IP-MIB", "ipSystemStatsHCOutRequests"), ("IP-MIB", "ipSystemStatsHCOutForwDatagrams"), ("IP-MIB", "ipSystemStatsHCOutTransmits"), ("IP-MIB", "ipSystemStatsHCInMcastPkts"), ("IP-MIB", "ipSystemStatsHCOutMcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipSystemStatsHCPacketGroup = ipSystemStatsHCPacketGroup.setStatus('current')
ipv4SystemStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 12)).setObjects(("IP-MIB", "ipSystemStatsHCInBcastPkts"), ("IP-MIB", "ipSystemStatsHCOutBcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv4SystemStatsHCPacketGroup = ipv4SystemStatsHCPacketGroup.setStatus('current')
ipIfStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 13)).setObjects(("IP-MIB", "ipIfStatsInReceives"), ("IP-MIB", "ipIfStatsInOctets"), ("IP-MIB", "ipIfStatsInHdrErrors"), ("IP-MIB", "ipIfStatsInNoRoutes"), ("IP-MIB", "ipIfStatsInAddrErrors"), ("IP-MIB", "ipIfStatsInUnknownProtos"), ("IP-MIB", "ipIfStatsInTruncatedPkts"), ("IP-MIB", "ipIfStatsInForwDatagrams"), ("IP-MIB", "ipIfStatsReasmReqds"), ("IP-MIB", "ipIfStatsReasmOKs"), ("IP-MIB", "ipIfStatsReasmFails"), ("IP-MIB", "ipIfStatsInDiscards"), ("IP-MIB", "ipIfStatsInDelivers"), ("IP-MIB", "ipIfStatsOutRequests"), ("IP-MIB", "ipIfStatsOutForwDatagrams"), ("IP-MIB", "ipIfStatsOutDiscards"), ("IP-MIB", "ipIfStatsOutFragReqds"), ("IP-MIB", "ipIfStatsOutFragOKs"), ("IP-MIB", "ipIfStatsOutFragFails"), ("IP-MIB", "ipIfStatsOutFragCreates"), ("IP-MIB", "ipIfStatsOutTransmits"), ("IP-MIB", "ipIfStatsOutOctets"), ("IP-MIB", "ipIfStatsInMcastPkts"), ("IP-MIB", "ipIfStatsInMcastOctets"), ("IP-MIB", "ipIfStatsOutMcastPkts"), ("IP-MIB", "ipIfStatsOutMcastOctets"), ("IP-MIB", "ipIfStatsDiscontinuityTime"), ("IP-MIB", "ipIfStatsRefreshRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipIfStatsGroup = ipIfStatsGroup.setStatus('current')
ipv4IfStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 14)).setObjects(("IP-MIB", "ipIfStatsInBcastPkts"), ("IP-MIB", "ipIfStatsOutBcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv4IfStatsGroup = ipv4IfStatsGroup.setStatus('current')
ipIfStatsHCOctetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 15)).setObjects(("IP-MIB", "ipIfStatsHCInOctets"), ("IP-MIB", "ipIfStatsHCOutOctets"), ("IP-MIB", "ipIfStatsHCInMcastOctets"), ("IP-MIB", "ipIfStatsHCOutMcastOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipIfStatsHCOctetGroup = ipIfStatsHCOctetGroup.setStatus('current')
ipIfStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 16)).setObjects(("IP-MIB", "ipIfStatsHCInReceives"), ("IP-MIB", "ipIfStatsHCInForwDatagrams"), ("IP-MIB", "ipIfStatsHCInDelivers"), ("IP-MIB", "ipIfStatsHCOutRequests"), ("IP-MIB", "ipIfStatsHCOutForwDatagrams"), ("IP-MIB", "ipIfStatsHCOutTransmits"), ("IP-MIB", "ipIfStatsHCInMcastPkts"), ("IP-MIB", "ipIfStatsHCOutMcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipIfStatsHCPacketGroup = ipIfStatsHCPacketGroup.setStatus('current')
ipv4IfStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 17)).setObjects(("IP-MIB", "ipIfStatsHCInBcastPkts"), ("IP-MIB", "ipIfStatsHCOutBcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv4IfStatsHCPacketGroup = ipv4IfStatsHCPacketGroup.setStatus('current')
ipAddressPrefixGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 18)).setObjects(("IP-MIB", "ipAddressPrefixOrigin"), ("IP-MIB", "ipAddressPrefixOnLinkFlag"), ("IP-MIB", "ipAddressPrefixAutonomousFlag"), ("IP-MIB", "ipAddressPrefixAdvPreferredLifetime"), ("IP-MIB", "ipAddressPrefixAdvValidLifetime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipAddressPrefixGroup = ipAddressPrefixGroup.setStatus('current')
ipAddressGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 19)).setObjects(("IP-MIB", "ipAddressSpinLock"), ("IP-MIB", "ipAddressIfIndex"), ("IP-MIB", "ipAddressType"), ("IP-MIB", "ipAddressPrefix"), ("IP-MIB", "ipAddressOrigin"), ("IP-MIB", "ipAddressStatus"), ("IP-MIB", "ipAddressCreated"), ("IP-MIB", "ipAddressLastChanged"), ("IP-MIB", "ipAddressRowStatus"), ("IP-MIB", "ipAddressStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipAddressGroup = ipAddressGroup.setStatus('current')
ipNetToPhysicalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 20)).setObjects(("IP-MIB", "ipNetToPhysicalPhysAddress"), ("IP-MIB", "ipNetToPhysicalLastUpdated"), ("IP-MIB", "ipNetToPhysicalType"), ("IP-MIB", "ipNetToPhysicalState"), ("IP-MIB", "ipNetToPhysicalRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipNetToPhysicalGroup = ipNetToPhysicalGroup.setStatus('current')
ipv6ScopeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 21)).setObjects(("IP-MIB", "ipv6ScopeZoneIndexLinkLocal"), ("IP-MIB", "ipv6ScopeZoneIndex3"), ("IP-MIB", "ipv6ScopeZoneIndexAdminLocal"), ("IP-MIB", "ipv6ScopeZoneIndexSiteLocal"), ("IP-MIB", "ipv6ScopeZoneIndex6"), ("IP-MIB", "ipv6ScopeZoneIndex7"), ("IP-MIB", "ipv6ScopeZoneIndexOrganizationLocal"), ("IP-MIB", "ipv6ScopeZoneIndex9"), ("IP-MIB", "ipv6ScopeZoneIndexA"), ("IP-MIB", "ipv6ScopeZoneIndexB"), ("IP-MIB", "ipv6ScopeZoneIndexC"), ("IP-MIB", "ipv6ScopeZoneIndexD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv6ScopeGroup = ipv6ScopeGroup.setStatus('current')
ipDefaultRouterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 22)).setObjects(("IP-MIB", "ipDefaultRouterLifetime"), ("IP-MIB", "ipDefaultRouterPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipDefaultRouterGroup = ipDefaultRouterGroup.setStatus('current')
ipv6RouterAdvertGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 23)).setObjects(("IP-MIB", "ipv6RouterAdvertSpinLock"), ("IP-MIB", "ipv6RouterAdvertSendAdverts"), ("IP-MIB", "ipv6RouterAdvertMaxInterval"), ("IP-MIB", "ipv6RouterAdvertMinInterval"), ("IP-MIB", "ipv6RouterAdvertManagedFlag"), ("IP-MIB", "ipv6RouterAdvertOtherConfigFlag"), ("IP-MIB", "ipv6RouterAdvertLinkMTU"), ("IP-MIB", "ipv6RouterAdvertReachableTime"), ("IP-MIB", "ipv6RouterAdvertRetransmitTime"), ("IP-MIB", "ipv6RouterAdvertCurHopLimit"), ("IP-MIB", "ipv6RouterAdvertDefaultLifetime"), ("IP-MIB", "ipv6RouterAdvertRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv6RouterAdvertGroup = ipv6RouterAdvertGroup.setStatus('current')
icmpStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 24)).setObjects(("IP-MIB", "icmpStatsInMsgs"), ("IP-MIB", "icmpStatsInErrors"), ("IP-MIB", "icmpStatsOutMsgs"), ("IP-MIB", "icmpStatsOutErrors"), ("IP-MIB", "icmpMsgStatsInPkts"), ("IP-MIB", "icmpMsgStatsOutPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icmpStatsGroup = icmpStatsGroup.setStatus('current')
ipInReceives = MibScalar((1, 3, 6, 1, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInReceives.setStatus('deprecated')
ipInHdrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInHdrErrors.setStatus('deprecated')
ipInAddrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInAddrErrors.setStatus('deprecated')
ipForwDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwDatagrams.setStatus('deprecated')
ipInUnknownProtos = MibScalar((1, 3, 6, 1, 2, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInUnknownProtos.setStatus('deprecated')
ipInDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDiscards.setStatus('deprecated')
ipInDelivers = MibScalar((1, 3, 6, 1, 2, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDelivers.setStatus('deprecated')
ipOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRequests.setStatus('deprecated')
ipOutDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutDiscards.setStatus('deprecated')
ipOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutNoRoutes.setStatus('deprecated')
ipReasmReqds = MibScalar((1, 3, 6, 1, 2, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmReqds.setStatus('deprecated')
ipReasmOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmOKs.setStatus('deprecated')
ipReasmFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmFails.setStatus('deprecated')
ipFragOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragOKs.setStatus('deprecated')
ipFragFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragFails.setStatus('deprecated')
ipFragCreates = MibScalar((1, 3, 6, 1, 2, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragCreates.setStatus('deprecated')
ipRoutingDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoutingDiscards.setStatus('deprecated')
ipAddrTable = MibTable((1, 3, 6, 1, 2, 1, 4, 20), )
if mibBuilder.loadTexts: ipAddrTable.setStatus('deprecated')
ipAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 20, 1), ).setIndexNames((0, "IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: ipAddrEntry.setStatus('deprecated')
ipAdEntAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntAddr.setStatus('deprecated')
ipAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntIfIndex.setStatus('deprecated')
ipAdEntNetMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntNetMask.setStatus('deprecated')
ipAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntBcastAddr.setStatus('deprecated')
ipAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntReasmMaxSize.setStatus('deprecated')
ipNetToMediaTable = MibTable((1, 3, 6, 1, 2, 1, 4, 22), )
if mibBuilder.loadTexts: ipNetToMediaTable.setStatus('deprecated')
ipNetToMediaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 22, 1), ).setIndexNames((0, "IP-MIB", "ipNetToMediaIfIndex"), (0, "IP-MIB", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: ipNetToMediaEntry.setStatus('deprecated')
ipNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToMediaIfIndex.setStatus('deprecated')
ipNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 2), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToMediaPhysAddress.setStatus('deprecated')
ipNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToMediaNetAddress.setStatus('deprecated')
ipNetToMediaType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToMediaType.setStatus('deprecated')
icmpInMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInMsgs.setStatus('deprecated')
icmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInErrors.setStatus('deprecated')
icmpInDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInDestUnreachs.setStatus('deprecated')
icmpInTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimeExcds.setStatus('deprecated')
icmpInParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInParmProbs.setStatus('deprecated')
icmpInSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInSrcQuenchs.setStatus('deprecated')
icmpInRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInRedirects.setStatus('deprecated')
icmpInEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchos.setStatus('deprecated')
icmpInEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchoReps.setStatus('deprecated')
icmpInTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestamps.setStatus('deprecated')
icmpInTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestampReps.setStatus('deprecated')
icmpInAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMasks.setStatus('deprecated')
icmpInAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMaskReps.setStatus('deprecated')
icmpOutMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutMsgs.setStatus('deprecated')
icmpOutErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutErrors.setStatus('deprecated')
icmpOutDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutDestUnreachs.setStatus('deprecated')
icmpOutTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimeExcds.setStatus('deprecated')
icmpOutParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutParmProbs.setStatus('deprecated')
icmpOutSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutSrcQuenchs.setStatus('deprecated')
icmpOutRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutRedirects.setStatus('deprecated')
icmpOutEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchos.setStatus('deprecated')
icmpOutEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchoReps.setStatus('deprecated')
icmpOutTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestamps.setStatus('deprecated')
icmpOutTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestampReps.setStatus('deprecated')
icmpOutAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMasks.setStatus('deprecated')
icmpOutAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMaskReps.setStatus('deprecated')
ipMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 48, 2, 1, 1)).setObjects(("IP-MIB", "ipGroup"), ("IP-MIB", "icmpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMIBCompliance = ipMIBCompliance.setStatus('deprecated')
ipGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 1)).setObjects(("IP-MIB", "ipForwarding"), ("IP-MIB", "ipDefaultTTL"), ("IP-MIB", "ipInReceives"), ("IP-MIB", "ipInHdrErrors"), ("IP-MIB", "ipInAddrErrors"), ("IP-MIB", "ipForwDatagrams"), ("IP-MIB", "ipInUnknownProtos"), ("IP-MIB", "ipInDiscards"), ("IP-MIB", "ipInDelivers"), ("IP-MIB", "ipOutRequests"), ("IP-MIB", "ipOutDiscards"), ("IP-MIB", "ipOutNoRoutes"), ("IP-MIB", "ipReasmTimeout"), ("IP-MIB", "ipReasmReqds"), ("IP-MIB", "ipReasmOKs"), ("IP-MIB", "ipReasmFails"), ("IP-MIB", "ipFragOKs"), ("IP-MIB", "ipFragFails"), ("IP-MIB", "ipFragCreates"), ("IP-MIB", "ipAdEntAddr"), ("IP-MIB", "ipAdEntIfIndex"), ("IP-MIB", "ipAdEntNetMask"), ("IP-MIB", "ipAdEntBcastAddr"), ("IP-MIB", "ipAdEntReasmMaxSize"), ("IP-MIB", "ipNetToMediaIfIndex"), ("IP-MIB", "ipNetToMediaPhysAddress"), ("IP-MIB", "ipNetToMediaNetAddress"), ("IP-MIB", "ipNetToMediaType"), ("IP-MIB", "ipRoutingDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipGroup = ipGroup.setStatus('deprecated')
icmpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 2)).setObjects(("IP-MIB", "icmpInMsgs"), ("IP-MIB", "icmpInErrors"), ("IP-MIB", "icmpInDestUnreachs"), ("IP-MIB", "icmpInTimeExcds"), ("IP-MIB", "icmpInParmProbs"), ("IP-MIB", "icmpInSrcQuenchs"), ("IP-MIB", "icmpInRedirects"), ("IP-MIB", "icmpInEchos"), ("IP-MIB", "icmpInEchoReps"), ("IP-MIB", "icmpInTimestamps"), ("IP-MIB", "icmpInTimestampReps"), ("IP-MIB", "icmpInAddrMasks"), ("IP-MIB", "icmpInAddrMaskReps"), ("IP-MIB", "icmpOutMsgs"), ("IP-MIB", "icmpOutErrors"), ("IP-MIB", "icmpOutDestUnreachs"), ("IP-MIB", "icmpOutTimeExcds"), ("IP-MIB", "icmpOutParmProbs"), ("IP-MIB", "icmpOutSrcQuenchs"), ("IP-MIB", "icmpOutRedirects"), ("IP-MIB", "icmpOutEchos"), ("IP-MIB", "icmpOutEchoReps"), ("IP-MIB", "icmpOutTimestamps"), ("IP-MIB", "icmpOutTimestampReps"), ("IP-MIB", "icmpOutAddrMasks"), ("IP-MIB", "icmpOutAddrMaskReps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icmpGroup = icmpGroup.setStatus('deprecated')
mibBuilder.exportSymbols("IP-MIB", ipv6InterfaceReachableTime=ipv6InterfaceReachableTime, ipSystemStatsInAddrErrors=ipSystemStatsInAddrErrors, ipAddressEntry=ipAddressEntry, icmpOutAddrMasks=icmpOutAddrMasks, ipSystemStatsOutFragFails=ipSystemStatsOutFragFails, ipIfStatsInBcastPkts=ipIfStatsInBcastPkts, icmpStatsOutErrors=icmpStatsOutErrors, ipSystemStatsInDelivers=ipSystemStatsInDelivers, ipAddressPrefix=ipAddressPrefix, ipIfStatsInOctets=ipIfStatsInOctets, ipSystemStatsInForwDatagrams=ipSystemStatsInForwDatagrams, ipIfStatsInDelivers=ipIfStatsInDelivers, ipIfStatsTable=ipIfStatsTable, ipIfStatsEntry=ipIfStatsEntry, ipIfStatsInAddrErrors=ipIfStatsInAddrErrors, ipIfStatsOutOctets=ipIfStatsOutOctets, ipNetToPhysicalTable=ipNetToPhysicalTable, ipIfStatsIfIndex=ipIfStatsIfIndex, ipIfStatsOutFragCreates=ipIfStatsOutFragCreates, ipv6RouterAdvertCurHopLimit=ipv6RouterAdvertCurHopLimit, ipv6ScopeZoneIndexTable=ipv6ScopeZoneIndexTable, ipv6ScopeZoneIndexLinkLocal=ipv6ScopeZoneIndexLinkLocal, ipv6RouterAdvertMinInterval=ipv6RouterAdvertMinInterval, ipSystemStatsHCOutForwDatagrams=ipSystemStatsHCOutForwDatagrams, ipv6ScopeZoneIndex3=ipv6ScopeZoneIndex3, ipIfStatsHCOctetGroup=ipIfStatsHCOctetGroup, icmpInRedirects=icmpInRedirects, ipv6InterfaceIdentifier=ipv6InterfaceIdentifier, ipv6ScopeZoneIndexC=ipv6ScopeZoneIndexC, ipSystemStatsReasmFails=ipSystemStatsReasmFails, ipIfStatsOutTransmits=ipIfStatsOutTransmits, ipAddrEntry=ipAddrEntry, ipAdEntBcastAddr=ipAdEntBcastAddr, ipv4InterfaceTable=ipv4InterfaceTable, IpAddressStatusTC=IpAddressStatusTC, ipNetToPhysicalLastUpdated=ipNetToPhysicalLastUpdated, ipDefaultRouterTable=ipDefaultRouterTable, ipFragOKs=ipFragOKs, ipSystemStatsOutOctets=ipSystemStatsOutOctets, ipIfStatsInReceives=ipIfStatsInReceives, ipv4SystemStatsHCPacketGroup=ipv4SystemStatsHCPacketGroup, IpAddressOriginTC=IpAddressOriginTC, ipNetToPhysicalType=ipNetToPhysicalType, icmpInAddrMaskReps=icmpInAddrMaskReps, ipv6InterfaceReasmMaxSize=ipv6InterfaceReasmMaxSize, icmpInEchoReps=icmpInEchoReps, icmpMsgStatsIPVersion=icmpMsgStatsIPVersion, ipAddressAddrType=ipAddressAddrType, ipAddressStatus=ipAddressStatus, ipNetToPhysicalRowStatus=ipNetToPhysicalRowStatus, icmpInTimeExcds=icmpInTimeExcds, ipAddressType=ipAddressType, ipAddressPrefixIfIndex=ipAddressPrefixIfIndex, ipv6ScopeZoneIndexAdminLocal=ipv6ScopeZoneIndexAdminLocal, icmpOutEchoReps=icmpOutEchoReps, ipv6InterfaceForwarding=ipv6InterfaceForwarding, ipNetToPhysicalEntry=ipNetToPhysicalEntry, ipv6RouterAdvertOtherConfigFlag=ipv6RouterAdvertOtherConfigFlag, ipAddressPrefixGroup=ipAddressPrefixGroup, ipAddressLastChanged=ipAddressLastChanged, ipv6ScopeZoneIndexSiteLocal=ipv6ScopeZoneIndexSiteLocal, ipNetToMediaEntry=ipNetToMediaEntry, ipAddressRowStatus=ipAddressRowStatus, icmpOutTimeExcds=icmpOutTimeExcds, ipDefaultRouterAddress=ipDefaultRouterAddress, ipv6RouterAdvertIfIndex=ipv6RouterAdvertIfIndex, ip=ip, ipMIBGroups=ipMIBGroups, ipv6InterfaceEnableStatus=ipv6InterfaceEnableStatus, ipSystemStatsHCOutMcastPkts=ipSystemStatsHCOutMcastPkts, icmpMsgStatsOutPkts=icmpMsgStatsOutPkts, ipInUnknownProtos=ipInUnknownProtos, icmpStatsInMsgs=icmpStatsInMsgs, icmpOutDestUnreachs=icmpOutDestUnreachs, icmpMsgStatsInPkts=icmpMsgStatsInPkts, ipSystemStatsHCOutMcastOctets=ipSystemStatsHCOutMcastOctets, ipv6IpForwarding=ipv6IpForwarding, ipIfStatsHCInDelivers=ipIfStatsHCInDelivers, ipSystemStatsReasmReqds=ipSystemStatsReasmReqds, ipv6RouterAdvertRetransmitTime=ipv6RouterAdvertRetransmitTime, ipOutDiscards=ipOutDiscards, ipAddressIfIndex=ipAddressIfIndex, ipIfStatsHCOutTransmits=ipIfStatsHCOutTransmits, ipv6RouterAdvertLinkMTU=ipv6RouterAdvertLinkMTU, ipv6RouterAdvertManagedFlag=ipv6RouterAdvertManagedFlag, ipSystemStatsHCInDelivers=ipSystemStatsHCInDelivers, IpAddressPrefixOriginTC=IpAddressPrefixOriginTC, ipSystemStatsOutNoRoutes=ipSystemStatsOutNoRoutes, ipSystemStatsHCOutOctets=ipSystemStatsHCOutOctets, ipIfStatsHCInForwDatagrams=ipIfStatsHCInForwDatagrams, ipIfStatsHCOutOctets=ipIfStatsHCOutOctets, ipAddressPrefixLength=ipAddressPrefixLength, ipSystemStatsHCInMcastPkts=ipSystemStatsHCInMcastPkts, ipSystemStatsHCInMcastOctets=ipSystemStatsHCInMcastOctets, ipv6RouterAdvertSpinLock=ipv6RouterAdvertSpinLock, ipv6ScopeZoneIndex9=ipv6ScopeZoneIndex9, ipTrafficStats=ipTrafficStats, ipv6RouterAdvertGroup=ipv6RouterAdvertGroup, icmpInTimestampReps=icmpInTimestampReps, ipAddressPrefixPrefix=ipAddressPrefixPrefix, ipIfStatsOutFragFails=ipIfStatsOutFragFails, ipIfStatsHCOutMcastPkts=ipIfStatsHCOutMcastPkts, ipInDelivers=ipInDelivers, ipv6ScopeZoneIndexB=ipv6ScopeZoneIndexB, icmpStatsTable=icmpStatsTable, ipSystemStatsGroup=ipSystemStatsGroup, ipSystemStatsHCOctetGroup=ipSystemStatsHCOctetGroup, icmpInParmProbs=icmpInParmProbs, ipv6ScopeZoneIndexIfIndex=ipv6ScopeZoneIndexIfIndex, ipIfStatsOutForwDatagrams=ipIfStatsOutForwDatagrams, ipSystemStatsInNoRoutes=ipSystemStatsInNoRoutes, ipIfStatsHCOutBcastPkts=ipIfStatsHCOutBcastPkts, ipv4SystemStatsGroup=ipv4SystemStatsGroup, ipv4IfStatsGroup=ipv4IfStatsGroup, ipInDiscards=ipInDiscards, icmpInMsgs=icmpInMsgs, ipv6InterfaceTableLastChange=ipv6InterfaceTableLastChange, ipIfStatsDiscontinuityTime=ipIfStatsDiscontinuityTime, ipOutRequests=ipOutRequests, ipv4InterfaceIfIndex=ipv4InterfaceIfIndex, ipAddressPrefixOnLinkFlag=ipAddressPrefixOnLinkFlag, ipv6ScopeZoneIndexOrganizationLocal=ipv6ScopeZoneIndexOrganizationLocal, ipIfStatsOutMcastOctets=ipIfStatsOutMcastOctets, icmpStatsOutMsgs=icmpStatsOutMsgs, ipSystemStatsOutBcastPkts=ipSystemStatsOutBcastPkts, Ipv6AddressIfIdentifierTC=Ipv6AddressIfIdentifierTC, ipSystemStatsHCInReceives=ipSystemStatsHCInReceives, ipDefaultRouterAddressType=ipDefaultRouterAddressType, ipIfStatsInMcastPkts=ipIfStatsInMcastPkts, ipAddressPrefixOrigin=ipAddressPrefixOrigin, ipIfStatsInDiscards=ipIfStatsInDiscards, ipAddressSpinLock=ipAddressSpinLock, ipSystemStatsOutDiscards=ipSystemStatsOutDiscards, ipIfStatsHCOutMcastOctets=ipIfStatsHCOutMcastOctets, ipv6ScopeGroup=ipv6ScopeGroup, icmpInDestUnreachs=icmpInDestUnreachs, icmpOutErrors=icmpOutErrors, ipSystemStatsOutFragCreates=ipSystemStatsOutFragCreates, ipForwDatagrams=ipForwDatagrams, ipIfStatsInNoRoutes=ipIfStatsInNoRoutes, ipIfStatsHCInMcastOctets=ipIfStatsHCInMcastOctets, icmpOutRedirects=icmpOutRedirects, ipSystemStatsHCInOctets=ipSystemStatsHCInOctets, ipSystemStatsOutTransmits=ipSystemStatsOutTransmits, ipv6RouterAdvertDefaultLifetime=ipv6RouterAdvertDefaultLifetime, ipSystemStatsInOctets=ipSystemStatsInOctets, ipNetToPhysicalIfIndex=ipNetToPhysicalIfIndex, ipNetToPhysicalNetAddressType=ipNetToPhysicalNetAddressType, icmp=icmp, ipMIBCompliance2=ipMIBCompliance2, ipMIB=ipMIB, ipDefaultRouterGroup=ipDefaultRouterGroup, ipv6InterfaceEntry=ipv6InterfaceEntry, icmpGroup=icmpGroup, ipAddressPrefixEntry=ipAddressPrefixEntry, ipNetToPhysicalPhysAddress=ipNetToPhysicalPhysAddress, ipAddressPrefixTable=ipAddressPrefixTable, ipSystemStatsInTruncatedPkts=ipSystemStatsInTruncatedPkts, ipv6IfGroup=ipv6IfGroup, ipOutNoRoutes=ipOutNoRoutes, ipSystemStatsInReceives=ipSystemStatsInReceives, ipv6RouterAdvertEntry=ipv6RouterAdvertEntry, ipNetToMediaType=ipNetToMediaType, ipIfStatsIPVersion=ipIfStatsIPVersion, ipInReceives=ipInReceives, ipIfStatsInTruncatedPkts=ipIfStatsInTruncatedPkts, ipDefaultRouterIfIndex=ipDefaultRouterIfIndex, ipIfStatsOutMcastPkts=ipIfStatsOutMcastPkts, ipIfStatsHCInMcastPkts=ipIfStatsHCInMcastPkts, ipFragCreates=ipFragCreates, ipInAddrErrors=ipInAddrErrors, ipIfStatsOutDiscards=ipIfStatsOutDiscards, ipSystemStatsInUnknownProtos=ipSystemStatsInUnknownProtos, ipAddressTable=ipAddressTable, icmpOutTimestamps=icmpOutTimestamps, ipSystemStatsHCInBcastPkts=ipSystemStatsHCInBcastPkts, ipIfStatsHCInOctets=ipIfStatsHCInOctets, ipIfStatsOutFragReqds=ipIfStatsOutFragReqds, ipSystemStatsHCOutTransmits=ipSystemStatsHCOutTransmits, ipAddrTable=ipAddrTable, ipv6ScopeZoneIndex6=ipv6ScopeZoneIndex6, ipSystemStatsInMcastPkts=ipSystemStatsInMcastPkts, ipRoutingDiscards=ipRoutingDiscards, ipIfStatsInHdrErrors=ipIfStatsInHdrErrors, ipAdEntAddr=ipAdEntAddr, ipSystemStatsHCInForwDatagrams=ipSystemStatsHCInForwDatagrams, ipIfStatsInUnknownProtos=ipIfStatsInUnknownProtos, ipIfStatsReasmFails=ipIfStatsReasmFails, ipSystemStatsInMcastOctets=ipSystemStatsInMcastOctets, ipIfStatsInMcastOctets=ipIfStatsInMcastOctets, ipIfStatsHCInReceives=ipIfStatsHCInReceives, ipv4IfStatsHCPacketGroup=ipv4IfStatsHCPacketGroup, ipReasmOKs=ipReasmOKs, ipGroup=ipGroup, ipAddressAddr=ipAddressAddr, ipv6InterfaceTable=ipv6InterfaceTable, ipSystemStatsOutRequests=ipSystemStatsOutRequests, ipv6ScopeZoneIndexEntry=ipv6ScopeZoneIndexEntry, ipNetToMediaPhysAddress=ipNetToMediaPhysAddress, ipSystemStatsHCOutBcastPkts=ipSystemStatsHCOutBcastPkts, ipIfStatsTableLastChange=ipIfStatsTableLastChange, icmpInEchos=icmpInEchos, ipNetToPhysicalState=ipNetToPhysicalState, icmpStatsIPVersion=icmpStatsIPVersion, icmpOutMsgs=icmpOutMsgs, ipv6ScopeZoneIndexD=ipv6ScopeZoneIndexD, icmpOutSrcQuenchs=icmpOutSrcQuenchs, ipSystemStatsOutForwDatagrams=ipSystemStatsOutForwDatagrams, ipNetToPhysicalGroup=ipNetToPhysicalGroup, ipAdEntIfIndex=ipAdEntIfIndex, ipSystemStatsHCOutRequests=ipSystemStatsHCOutRequests, ipSystemStatsTable=ipSystemStatsTable, ipAddressPrefixAutonomousFlag=ipAddressPrefixAutonomousFlag, ipSystemStatsRefreshRate=ipSystemStatsRefreshRate, icmpStatsEntry=icmpStatsEntry, ipIfStatsGroup=ipIfStatsGroup, ipAdEntNetMask=ipAdEntNetMask, ipSystemStatsInHdrErrors=ipSystemStatsInHdrErrors, icmpMsgStatsTable=icmpMsgStatsTable, ipMIBCompliance=ipMIBCompliance, ipAddressOrigin=ipAddressOrigin, ipSystemStatsDiscontinuityTime=ipSystemStatsDiscontinuityTime, icmpInErrors=icmpInErrors, ipDefaultRouterLifetime=ipDefaultRouterLifetime, ipIfStatsReasmOKs=ipIfStatsReasmOKs, icmpInSrcQuenchs=icmpInSrcQuenchs, ipNetToMediaNetAddress=ipNetToMediaNetAddress, ipDefaultRouterEntry=ipDefaultRouterEntry, ipv4GeneralGroup=ipv4GeneralGroup, icmpOutAddrMaskReps=icmpOutAddrMaskReps, ipMIBConformance=ipMIBConformance, ipSystemStatsInDiscards=ipSystemStatsInDiscards, icmpInTimestamps=icmpInTimestamps, ipIfStatsInForwDatagrams=ipIfStatsInForwDatagrams, ipv6GeneralGroup2=ipv6GeneralGroup2, ipForwarding=ipForwarding, ipv6ScopeZoneIndexA=ipv6ScopeZoneIndexA, icmpInAddrMasks=icmpInAddrMasks, ipv6InterfaceIfIndex=ipv6InterfaceIfIndex, ipNetToMediaTable=ipNetToMediaTable, ipAdEntReasmMaxSize=ipAdEntReasmMaxSize, ipLastChangeGroup=ipLastChangeGroup, ipReasmFails=ipReasmFails, ipNetToPhysicalNetAddress=ipNetToPhysicalNetAddress, ipSystemStatsReasmOKs=ipSystemStatsReasmOKs, ipIfStatsHCOutForwDatagrams=ipIfStatsHCOutForwDatagrams, ipSystemStatsOutFragOKs=ipSystemStatsOutFragOKs, ipAddressPrefixAdvPreferredLifetime=ipAddressPrefixAdvPreferredLifetime, icmpStatsGroup=icmpStatsGroup, ipSystemStatsOutMcastPkts=ipSystemStatsOutMcastPkts, ipv6ScopeZoneIndex7=ipv6ScopeZoneIndex7, ipIfStatsOutBcastPkts=ipIfStatsOutBcastPkts, ipv6IpDefaultHopLimit=ipv6IpDefaultHopLimit, ipv4IfGroup=ipv4IfGroup)
mibBuilder.exportSymbols("IP-MIB", ipv4InterfaceTableLastChange=ipv4InterfaceTableLastChange, ipSystemStatsHCPacketGroup=ipSystemStatsHCPacketGroup, ipIfStatsReasmReqds=ipIfStatsReasmReqds, icmpOutTimestampReps=icmpOutTimestampReps, ipIfStatsHCPacketGroup=ipIfStatsHCPacketGroup, ipv6RouterAdvertSendAdverts=ipv6RouterAdvertSendAdverts, ipAddressPrefixAdvValidLifetime=ipAddressPrefixAdvValidLifetime, ipv4InterfaceEnableStatus=ipv4InterfaceEnableStatus, ipFragFails=ipFragFails, ipAddressPrefixType=ipAddressPrefixType, ipSystemStatsOutFragReqds=ipSystemStatsOutFragReqds, PYSNMP_MODULE_ID=ipMIB, ipv4InterfaceRetransmitTime=ipv4InterfaceRetransmitTime, ipSystemStatsOutMcastOctets=ipSystemStatsOutMcastOctets, ipDefaultTTL=ipDefaultTTL, ipv4InterfaceReasmMaxSize=ipv4InterfaceReasmMaxSize, ipDefaultRouterPreference=ipDefaultRouterPreference, ipSystemStatsInBcastPkts=ipSystemStatsInBcastPkts, icmpStatsInErrors=icmpStatsInErrors, ipIfStatsRefreshRate=ipIfStatsRefreshRate, ipAddressCreated=ipAddressCreated, ipv6RouterAdvertMaxInterval=ipv6RouterAdvertMaxInterval, ipReasmTimeout=ipReasmTimeout, icmpOutParmProbs=icmpOutParmProbs, ipv6InterfaceRetransmitTime=ipv6InterfaceRetransmitTime, ipAddressStorageType=ipAddressStorageType, ipv4InterfaceEntry=ipv4InterfaceEntry, ipReasmReqds=ipReasmReqds, ipv6RouterAdvertReachableTime=ipv6RouterAdvertReachableTime, icmpMsgStatsType=icmpMsgStatsType, ipNetToMediaIfIndex=ipNetToMediaIfIndex, icmpOutEchos=icmpOutEchos, ipSystemStatsEntry=ipSystemStatsEntry, ipIfStatsOutRequests=ipIfStatsOutRequests, ipAddressGroup=ipAddressGroup, ipInHdrErrors=ipInHdrErrors, ipIfStatsHCOutRequests=ipIfStatsHCOutRequests, ipSystemStatsIPVersion=ipSystemStatsIPVersion, ipv6RouterAdvertRowStatus=ipv6RouterAdvertRowStatus, ipIfStatsOutFragOKs=ipIfStatsOutFragOKs, icmpMsgStatsEntry=icmpMsgStatsEntry, ipMIBCompliances=ipMIBCompliances, ipv6RouterAdvertTable=ipv6RouterAdvertTable, ipIfStatsHCInBcastPkts=ipIfStatsHCInBcastPkts)
