#
# PySNMP MIB module BCST-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BCST-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, ModuleIdentity, enterprises, Integer32, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, MibIdentifier, Counter64, IpAddress, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "ModuleIdentity", "enterprises", "Integer32", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "MibIdentifier", "Counter64", "IpAddress", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
class DisplayString(OctetString):
    pass

cdx6500GCTSVCBroadcastTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10), )
if mibBuilder.loadTexts: cdx6500GCTSVCBroadcastTable.setStatus('mandatory')
cdx6500bcstSBCOcfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1), ).setIndexNames((0, "BCST-OPT-MIB", "cdx6500bcstSBCOnum"))
if mibBuilder.loadTexts: cdx6500bcstSBCOcfgEntry.setStatus('mandatory')
cdx6500bcstSBCOnum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOnum.setStatus('mandatory')
cdx6500bcstSBCOnet = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOnet.setStatus('mandatory')
cdx6500bcstSBCOcalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOcalledAddr.setStatus('mandatory')
cdx6500bcstSBCOcallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOcallingAddr.setStatus('mandatory')
cdx6500bcstSBCOfacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOfacilities.setStatus('mandatory')
cdx6500bcstSBCOuserData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOuserData.setStatus('mandatory')
cdx6500bcstSBCOdirection = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("called", 2), ("calling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOdirection.setStatus('mandatory')
cdx6500bcstSBCOdestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("bctp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstSBCOdestination.setStatus('mandatory')
cdx6500GCTPVCBroadcastOutTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 11), )
if mibBuilder.loadTexts: cdx6500GCTPVCBroadcastOutTable.setStatus('mandatory')
cdx6500bcstPBCOcfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 11, 1), ).setIndexNames((0, "BCST-OPT-MIB", "cdx6500bcstPBCOnum"))
if mibBuilder.loadTexts: cdx6500bcstPBCOcfgEntry.setStatus('mandatory')
cdx6500bcstPBCOnum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstPBCOnum.setStatus('mandatory')
cdx6500bcstPBCOnet = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstPBCOnet.setStatus('mandatory')
cdx6500bcstPBCOconnection = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstPBCOconnection.setStatus('mandatory')
cdx6500bcstPBCOdestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bcstPBCOdestination.setStatus('mandatory')
mibBuilder.exportSymbols("BCST-OPT-MIB", cdx6500GCTSVCBroadcastTable=cdx6500GCTSVCBroadcastTable, cdx6500bcstSBCOdirection=cdx6500bcstSBCOdirection, codex=codex, cdx6500bcstSBCOuserData=cdx6500bcstSBCOuserData, cdx6500bcstSBCOdestination=cdx6500bcstSBCOdestination, cdx6500bcstSBCOnum=cdx6500bcstSBCOnum, cdx6500bcstPBCOnum=cdx6500bcstPBCOnum, cdx6500GCTPVCBroadcastOutTable=cdx6500GCTPVCBroadcastOutTable, cdx6500bcstSBCOnet=cdx6500bcstSBCOnet, cdx6500bcstPBCOdestination=cdx6500bcstPBCOdestination, cdxProductSpecific=cdxProductSpecific, cdx6500bcstSBCOcalledAddr=cdx6500bcstSBCOcalledAddr, cdx6500bcstSBCOcfgEntry=cdx6500bcstSBCOcfgEntry, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, DisplayString=DisplayString, cdx6500Configuration=cdx6500Configuration, cdx6500bcstPBCOconnection=cdx6500bcstPBCOconnection, cdx6500=cdx6500, cdx6500bcstPBCOcfgEntry=cdx6500bcstPBCOcfgEntry, cdx6500bcstPBCOnet=cdx6500bcstPBCOnet, cdx6500bcstSBCOfacilities=cdx6500bcstSBCOfacilities, cdx6500bcstSBCOcallingAddr=cdx6500bcstSBCOcallingAddr)
