#
# PySNMP MIB module BIANCA-BRICK-X25PAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-X25PAD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Integer32, Gauge32, MibIdentifier, Counter32, IpAddress, NotificationType, TimeTicks, Unsigned32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Integer32", "Gauge32", "MibIdentifier", "Counter32", "IpAddress", "NotificationType", "TimeTicks", "Unsigned32", "Bits", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
x25 = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 6))
class HexValue(Integer32):
    pass

class Date(Integer32):
    pass

x25PadProfileTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 6, 8), )
if mibBuilder.loadTexts: x25PadProfileTable.setStatus('mandatory')
x25PadProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1), ).setIndexNames((0, "BIANCA-BRICK-X25PAD-MIB", "x25PadProNumber"))
if mibBuilder.loadTexts: x25PadProfileEntry.setStatus('mandatory')
x25PadProNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProNumber.setStatus('mandatory')
x25PadProState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProState.setStatus('mandatory')
x25PadProAutoCallDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProAutoCallDstAddr.setStatus('mandatory')
x25PadProEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEscape.setStatus('mandatory')
x25PadProEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("no-echo", 256), ("echo", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEcho.setStatus('mandatory')
x25PadProForwardChar = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProForwardChar.setStatus('mandatory')
x25PadProIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProIdleTimer.setStatus('mandatory')
x25PadProDevControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1, 2))).clone(namedValues=NamedValues(("no-use", 256), ("use-only-data-transfer", 1), ("use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProDevControl.setStatus('mandatory')
x25PadProSigControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProSigControl.setStatus('mandatory')
x25PadProBrkControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProBrkControl.setStatus('mandatory')
x25PadProDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("normal-data-delivery", 256), ("discard-output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProDiscard.setStatus('mandatory')
x25PadProCRPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProCRPadding.setStatus('mandatory')
x25PadProLineFold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLineFold.setStatus('mandatory')
x25PadProFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("no-use-DC1-DC3", 256), ("use-DC1-DC3", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProFlowControl.setStatus('mandatory')
x25PadProLFInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLFInsert.setStatus('mandatory')
x25PadProLFPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLFPadding.setStatus('mandatory')
x25PadProEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("no-editing-user-data", 256), ("editing-user-data", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEdit.setStatus('mandatory')
x25PadProCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProCharDel.setStatus('mandatory')
x25PadProLineDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLineDel.setStatus('mandatory')
x25PadProLineDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLineDisp.setStatus('mandatory')
x25PadProSigEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProSigEdit.setStatus('mandatory')
x25PadProEchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEchoMask.setStatus('mandatory')
x25PadProParity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 256), ("parity-checking", 1), ("parity-generation", 2), ("parity-checking-generation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProParity.setStatus('mandatory')
x25PadProPageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProPageWait.setStatus('mandatory')
x25PadProXCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXCharDel.setStatus('mandatory')
x25PadProXLineDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXLineDel.setStatus('mandatory')
x25PadProXLineDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXLineDisp.setStatus('mandatory')
x25PadProXForwardChar1 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXForwardChar1.setStatus('mandatory')
x25PadProXForwardChar2 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXForwardChar2.setStatus('mandatory')
x25PadProXParity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 256), ("parity-checking-generation", 1), ("parity-generation", 2), ("parity-checking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXParity.setStatus('mandatory')
x25PadProXDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXDelay.setStatus('mandatory')
x25PadProXLFInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXLFInsert.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-X25PAD-MIB", HexValue=HexValue, x25PadProCharDel=x25PadProCharDel, x25PadProPageWait=x25PadProPageWait, x25PadProfileTable=x25PadProfileTable, x25PadProXCharDel=x25PadProXCharDel, x25PadProLFPadding=x25PadProLFPadding, x25PadProXLineDisp=x25PadProXLineDisp, x25PadProSigControl=x25PadProSigControl, x25PadProFlowControl=x25PadProFlowControl, x25PadProParity=x25PadProParity, x25PadProfileEntry=x25PadProfileEntry, x25PadProEchoMask=x25PadProEchoMask, enterprises=enterprises, x25PadProDiscard=x25PadProDiscard, x25PadProSigEdit=x25PadProSigEdit, x25PadProBrkControl=x25PadProBrkControl, x25PadProEdit=x25PadProEdit, x25PadProXForwardChar2=x25PadProXForwardChar2, x25PadProXLFInsert=x25PadProXLFInsert, x25PadProCRPadding=x25PadProCRPadding, x25PadProXParity=x25PadProXParity, bibo=bibo, x25PadProIdleTimer=x25PadProIdleTimer, x25PadProNumber=x25PadProNumber, x25PadProXDelay=x25PadProXDelay, Date=Date, private=private, x25PadProLineDel=x25PadProLineDel, dod=dod, x25PadProLineDisp=x25PadProLineDisp, internet=internet, bintec=bintec, x25PadProAutoCallDstAddr=x25PadProAutoCallDstAddr, x25PadProEcho=x25PadProEcho, x25PadProLFInsert=x25PadProLFInsert, x25PadProXLineDel=x25PadProXLineDel, org=org, x25PadProEscape=x25PadProEscape, x25PadProForwardChar=x25PadProForwardChar, x25PadProDevControl=x25PadProDevControl, x25PadProXForwardChar1=x25PadProXForwardChar1, x25PadProLineFold=x25PadProLineFold, x25PadProState=x25PadProState, x25=x25)
