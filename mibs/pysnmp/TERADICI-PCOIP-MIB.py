#
# PySNMP MIB module TERADICI-PCOIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERADICI-PCOIP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ObjectIdentity, IpAddress, Counter32, Unsigned32, Gauge32, NotificationType, TimeTicks, Counter64, Bits, enterprises, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "IpAddress", "Counter32", "Unsigned32", "Gauge32", "NotificationType", "TimeTicks", "Counter64", "Bits", "enterprises", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
teraMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 25071))
teraMibModule.setRevisions(('2008-01-28 10:00',))
if mibBuilder.loadTexts: teraMibModule.setLastUpdated('200801281000Z')
if mibBuilder.loadTexts: teraMibModule.setOrganization('Teradici Corporation')
teraProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1))
teraPcoip = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 1))
teraPcoipStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1))
teraImagingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2))
pcoipStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1), )
if mibBuilder.loadTexts: pcoipStatisticsTable.setStatus('current')
pcoipStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1), ).setIndexNames((0, "TERADICI-PCOIP-MIB", "pcoipStatisticsIndex"))
if mibBuilder.loadTexts: pcoipStatisticsEntry.setStatus('current')
pcoipStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsIndex.setStatus('current')
pcoipStatisticsSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsSessionNumber.setStatus('current')
pcoipStatisticsPcoipPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsPcoipPacketsTransmitted.setStatus('current')
pcoipStatisticsPcoipBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsPcoipBytesTransmitted.setStatus('current')
pcoipStatisticsPcoipPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsPcoipPacketsReceived.setStatus('current')
pcoipStatisticsPcoipBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsPcoipBytesReceived.setStatus('current')
pcoipStatisticsPcoipLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsPcoipLostPackets.setStatus('current')
pcoipStatisticsPcoipLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipStatisticsPcoipLatency.setStatus('current')
imagingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1), )
if mibBuilder.loadTexts: imagingStatisticsTable.setStatus('current')
imagingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1), ).setIndexNames((0, "TERADICI-PCOIP-MIB", "imagingStatisticsIndex"))
if mibBuilder.loadTexts: imagingStatisticsEntry.setStatus('current')
imagingStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsIndex.setStatus('current')
imagingStatisticsSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsSessionNumber.setStatus('current')
imagingStatisticsSessionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inActive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsSessionActive.setStatus('current')
imagingStatisticsDisplayActive = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inActive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsDisplayActive.setStatus('current')
imagingStatisticsDisplayWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsDisplayWidth.setStatus('current')
imagingStatisticsDisplayHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsDisplayHeight.setStatus('current')
imagingStatisticsDisplayRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsDisplayRefreshRate.setStatus('current')
imagingStatisticsFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imagingStatisticsFrameCount.setStatus('current')
mibBuilder.exportSymbols("TERADICI-PCOIP-MIB", imagingStatisticsEntry=imagingStatisticsEntry, imagingStatisticsDisplayHeight=imagingStatisticsDisplayHeight, pcoipStatisticsTable=pcoipStatisticsTable, teraPcoipStatistics=teraPcoipStatistics, teraMibModule=teraMibModule, imagingStatisticsFrameCount=imagingStatisticsFrameCount, imagingStatisticsIndex=imagingStatisticsIndex, imagingStatisticsSessionActive=imagingStatisticsSessionActive, pcoipStatisticsPcoipBytesTransmitted=pcoipStatisticsPcoipBytesTransmitted, pcoipStatisticsPcoipBytesReceived=pcoipStatisticsPcoipBytesReceived, teraPcoip=teraPcoip, pcoipStatisticsPcoipLostPackets=pcoipStatisticsPcoipLostPackets, pcoipStatisticsSessionNumber=pcoipStatisticsSessionNumber, pcoipStatisticsEntry=pcoipStatisticsEntry, imagingStatisticsDisplayActive=imagingStatisticsDisplayActive, pcoipStatisticsPcoipPacketsReceived=pcoipStatisticsPcoipPacketsReceived, imagingStatisticsDisplayRefreshRate=imagingStatisticsDisplayRefreshRate, PYSNMP_MODULE_ID=teraMibModule, pcoipStatisticsPcoipPacketsTransmitted=pcoipStatisticsPcoipPacketsTransmitted, pcoipStatisticsPcoipLatency=pcoipStatisticsPcoipLatency, teraProducts=teraProducts, imagingStatisticsTable=imagingStatisticsTable, imagingStatisticsDisplayWidth=imagingStatisticsDisplayWidth, teraImagingStatistics=teraImagingStatistics, imagingStatisticsSessionNumber=imagingStatisticsSessionNumber, pcoipStatisticsIndex=pcoipStatisticsIndex)
