#
# PySNMP MIB module Nortel-Magellan-Passport-X25DteMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-X25DteMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
Counter32, InterfaceIndex, Integer32, RowStatus, Unsigned32, Gauge32, StorageType, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Counter32", "InterfaceIndex", "Integer32", "RowStatus", "Unsigned32", "Gauge32", "StorageType", "DisplayString")
NonReplicated, Link, DigitString, HexString, AsciiString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "Link", "DigitString", "HexString", "AsciiString")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, Counter32, iso, Integer32, Bits, ModuleIdentity, IpAddress, Unsigned32, ObjectIdentity, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Counter32", "iso", "Integer32", "Bits", "ModuleIdentity", "IpAddress", "Unsigned32", "ObjectIdentity", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
x25DteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48))
x25Dte = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90))
x25DteRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1), )
if mibBuilder.loadTexts: x25DteRowStatusTable.setStatus('mandatory')
x25DteRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteRowStatusEntry.setStatus('mandatory')
x25DteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRowStatus.setStatus('mandatory')
x25DteComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteComponentName.setStatus('mandatory')
x25DteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteStorageType.setStatus('mandatory')
x25DteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: x25DteIndex.setStatus('mandatory')
x25DteCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 20), )
if mibBuilder.loadTexts: x25DteCidDataTable.setStatus('mandatory')
x25DteCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteCidDataEntry.setStatus('mandatory')
x25DteCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCustomerIdentifier.setStatus('mandatory')
x25DteIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21), )
if mibBuilder.loadTexts: x25DteIfTable.setStatus('mandatory')
x25DteIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteIfEntry.setStatus('mandatory')
x25DteInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInterfaceMode.setStatus('mandatory')
x25DteMaxActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteMaxActiveChannels.setStatus('mandatory')
x25DteNumberOfPLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteNumberOfPLcn.setStatus('mandatory')
x25DtePacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePacketSequencing.setStatus('mandatory')
x25DteT20RestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT20RestartTimer.setStatus('mandatory')
x25DteT21CallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(180000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT21CallTimer.setStatus('mandatory')
x25DteT22ResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT22ResetTimer.setStatus('mandatory')
x25DteT23ClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT23ClearTimer.setStatus('mandatory')
x25DteLcnCTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22), )
if mibBuilder.loadTexts: x25DteLcnCTable.setStatus('mandatory')
x25DteLcnCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteLcnCEntry.setStatus('mandatory')
x25DteLowestILChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLowestILChannelNumber.setStatus('mandatory')
x25DteHighestILChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteHighestILChannelNumber.setStatus('mandatory')
x25DteLowestTLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLowestTLChannelNumber.setStatus('mandatory')
x25DteHighestTLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteHighestTLChannelNumber.setStatus('mandatory')
x25DteLowestOLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLowestOLChannelNumber.setStatus('mandatory')
x25DteHighestOLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteHighestOLChannelNumber.setStatus('mandatory')
x25DteDcpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23), )
if mibBuilder.loadTexts: x25DteDcpTable.setStatus('mandatory')
x25DteDcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteDcpEntry.setStatus('mandatory')
x25DteInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteInPacketSize.setStatus('mandatory')
x25DteOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteOutPacketSize.setStatus('mandatory')
x25DteInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteInWindowSize.setStatus('mandatory')
x25DteOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteOutWindowSize.setStatus('mandatory')
x25DteAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("accept", 2), ("refuse", 3), ("neverAccept", 4))).clone('refuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteAcceptReverseCharging.setStatus('mandatory')
x25DteProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteProposeReverseCharging.setStatus('mandatory')
x25DteOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteOutThroughputClassSize.setStatus('mandatory')
x25DteInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteInThroughputClassSize.setStatus('mandatory')
x25DteCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCugIndex.setStatus('mandatory')
x25DteCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCugoaIndex.setStatus('mandatory')
x25DteChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteChargingInformation.setStatus('mandatory')
x25DteRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 14), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRpoa.setStatus('mandatory')
x25DteTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteTrnstDlySlctnAInd.setStatus('mandatory')
x25DteCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCallingNetworkFax.setStatus('mandatory')
x25DteCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCalledNetworkFax.setStatus('mandatory')
x25DteCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 26), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteCallUserData.setStatus('mandatory')
x25DteIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24), )
if mibBuilder.loadTexts: x25DteIfEntryTable.setStatus('mandatory')
x25DteIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteIfEntryEntry.setStatus('mandatory')
x25DteIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteIfAdminStatus.setStatus('mandatory')
x25DteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteIfIndex.setStatus('mandatory')
x25DteStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25), )
if mibBuilder.loadTexts: x25DteStateTable.setStatus('mandatory')
x25DteStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteStateEntry.setStatus('mandatory')
x25DteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteAdminState.setStatus('mandatory')
x25DteOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOperationalState.setStatus('mandatory')
x25DteUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteUsageState.setStatus('mandatory')
x25DteOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 26), )
if mibBuilder.loadTexts: x25DteOperStatusTable.setStatus('mandatory')
x25DteOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 26, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteOperStatusEntry.setStatus('mandatory')
x25DteSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteSnmpOperStatus.setStatus('mandatory')
x25DteOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 27), )
if mibBuilder.loadTexts: x25DteOpTable.setStatus('mandatory')
x25DteOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 27, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteOpEntry.setStatus('mandatory')
x25DteInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notReady", 0), ("localRestarting", 1), ("remoteRestarting", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInterfaceState.setStatus('mandatory')
x25DteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28), )
if mibBuilder.loadTexts: x25DteStatsTable.setStatus('mandatory')
x25DteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteStatsEntry.setStatus('mandatory')
x25DteInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInCalls.setStatus('mandatory')
x25DteInCallRefusals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInCallRefusals.setStatus('mandatory')
x25DteInPrvdrInitiatedClrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInPrvdrInitiatedClrs.setStatus('mandatory')
x25DteInRmtInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInRmtInitiatedRsts.setStatus('mandatory')
x25DteInPrvdrInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInPrvdrInitiatedRsts.setStatus('mandatory')
x25DteInRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInRestarts.setStatus('mandatory')
x25DteInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInDataPackets.setStatus('mandatory')
x25DteInPktsAcusdOfPrtclErr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInPktsAcusdOfPrtclErr.setStatus('mandatory')
x25DteInInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInInterruptPackets.setStatus('mandatory')
x25DteOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutCallAttempts.setStatus('mandatory')
x25DteOutCallFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutCallFailures.setStatus('mandatory')
x25DteOutInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutInterruptPackets.setStatus('mandatory')
x25DteOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutDataPackets.setStatus('mandatory')
x25DteOutActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutActiveChannels.setStatus('mandatory')
x25DteInActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInActiveChannels.setStatus('mandatory')
x25DteTwowayActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteTwowayActiveChannels.setStatus('mandatory')
x25DteT20RestartTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT20RestartTimeouts.setStatus('mandatory')
x25DteT21CallTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT21CallTimeouts.setStatus('mandatory')
x25DteT22ResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT22ResetTimeouts.setStatus('mandatory')
x25DteT23ClearTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT23ClearTimeouts.setStatus('mandatory')
x25DtePeer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2))
x25DtePeerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1), )
if mibBuilder.loadTexts: x25DtePeerRowStatusTable.setStatus('mandatory')
x25DtePeerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"))
if mibBuilder.loadTexts: x25DtePeerRowStatusEntry.setStatus('mandatory')
x25DtePeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerRowStatus.setStatus('mandatory')
x25DtePeerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerComponentName.setStatus('mandatory')
x25DtePeerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerStorageType.setStatus('mandatory')
x25DtePeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: x25DtePeerIndex.setStatus('mandatory')
x25DtePeerIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10), )
if mibBuilder.loadTexts: x25DtePeerIfTable.setStatus('mandatory')
x25DtePeerIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"))
if mibBuilder.loadTexts: x25DtePeerIfEntry.setStatus('mandatory')
x25DtePeerEncAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(204))).clone(namedValues=NamedValues(("ip", 204))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerEncAddressType.setStatus('mandatory')
x25DtePeerEncAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerEncAddress.setStatus('mandatory')
x25DtePeerX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerX25Address.setStatus('mandatory')
x25DtePeerLinkToRemoteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerLinkToRemoteGroup.setStatus('mandatory')
x25DtePeerCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12), )
if mibBuilder.loadTexts: x25DtePeerCpTable.setStatus('mandatory')
x25DtePeerCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"))
if mibBuilder.loadTexts: x25DtePeerCpEntry.setStatus('mandatory')
x25DtePeerInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerInPacketSize.setStatus('mandatory')
x25DtePeerOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerOutPacketSize.setStatus('mandatory')
x25DtePeerInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerInWindowSize.setStatus('mandatory')
x25DtePeerOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerOutWindowSize.setStatus('mandatory')
x25DtePeerAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("accept", 2), ("refuse", 3))).clone('refuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerAcceptReverseCharging.setStatus('mandatory')
x25DtePeerProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerProposeReverseCharging.setStatus('mandatory')
x25DtePeerOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17), ("default", 18))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerOutThroughputClassSize.setStatus('mandatory')
x25DtePeerInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17), ("default", 18))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerInThroughputClassSize.setStatus('mandatory')
x25DtePeerCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCugIndex.setStatus('mandatory')
x25DtePeerCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCugoaIndex.setStatus('mandatory')
x25DtePeerNetworkUserIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 12), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerNetworkUserIdentifier.setStatus('mandatory')
x25DtePeerChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerChargingInformation.setStatus('mandatory')
x25DtePeerRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 14), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerRpoa.setStatus('mandatory')
x25DtePeerTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65537)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerTrnstDlySlctnAInd.setStatus('mandatory')
x25DtePeerCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCallingNetworkFax.setStatus('mandatory')
x25DtePeerCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCalledNetworkFax.setStatus('mandatory')
x25DtePeerCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 26), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerCallUserData.setStatus('mandatory')
x25DtePeerPEncTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208), )
if mibBuilder.loadTexts: x25DtePeerPEncTable.setStatus('mandatory')
x25DtePeerPEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerPEncIndex"))
if mibBuilder.loadTexts: x25DtePeerPEncEntry.setStatus('mandatory')
x25DtePeerPEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: x25DtePeerPEncIndex.setStatus('mandatory')
x25DtePeerPEncValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(204))).clone(namedValues=NamedValues(("ip", 204)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerPEncValue.setStatus('mandatory')
x25DtePeerPEncRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: x25DtePeerPEncRowStatus.setStatus('mandatory')
x25DtePeerLcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 209), )
if mibBuilder.loadTexts: x25DtePeerLcnTable.setStatus('mandatory')
x25DtePeerLcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 209, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerLcnValue"))
if mibBuilder.loadTexts: x25DtePeerLcnEntry.setStatus('mandatory')
x25DtePeerLcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 209, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerLcnValue.setStatus('mandatory')
x25DtePLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3))
x25DtePLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1), )
if mibBuilder.loadTexts: x25DtePLcnRowStatusTable.setStatus('mandatory')
x25DtePLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePLcnIndex"))
if mibBuilder.loadTexts: x25DtePLcnRowStatusEntry.setStatus('mandatory')
x25DtePLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnRowStatus.setStatus('mandatory')
x25DtePLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePLcnComponentName.setStatus('mandatory')
x25DtePLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePLcnStorageType.setStatus('mandatory')
x25DtePLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: x25DtePLcnIndex.setStatus('mandatory')
x25DtePLcnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10), )
if mibBuilder.loadTexts: x25DtePLcnProvTable.setStatus('mandatory')
x25DtePLcnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePLcnIndex"))
if mibBuilder.loadTexts: x25DtePLcnProvEntry.setStatus('mandatory')
x25DtePLcnEncAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 204))).clone(namedValues=NamedValues(("none", 0), ("ip", 204))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnEncAddressType.setStatus('mandatory')
x25DtePLcnEncAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnEncAddress.setStatus('mandatory')
x25DtePLcnProtocolEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 204, 257))).clone(namedValues=NamedValues(("null", 0), ("ip", 204), ("nscNull", 257))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnProtocolEncType.setStatus('mandatory')
x25DtePLcnLinkToRemoteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnLinkToRemoteGroup.setStatus('mandatory')
x25DtePLcnInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnInPacketSize.setStatus('mandatory')
x25DtePLcnOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnOutPacketSize.setStatus('mandatory')
x25DtePLcnInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnInWindowSize.setStatus('mandatory')
x25DtePLcnOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnOutWindowSize.setStatus('mandatory')
x25DteLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4))
x25DteLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1), )
if mibBuilder.loadTexts: x25DteLcnRowStatusTable.setStatus('mandatory')
x25DteLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnRowStatusEntry.setStatus('mandatory')
x25DteLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnRowStatus.setStatus('mandatory')
x25DteLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnComponentName.setStatus('mandatory')
x25DteLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnStorageType.setStatus('mandatory')
x25DteLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: x25DteLcnIndex.setStatus('mandatory')
x25DteLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10), )
if mibBuilder.loadTexts: x25DteLcnStateTable.setStatus('mandatory')
x25DteLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnStateEntry.setStatus('mandatory')
x25DteLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnAdminState.setStatus('mandatory')
x25DteLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOperationalState.setStatus('mandatory')
x25DteLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnUsageState.setStatus('mandatory')
x25DteLcnCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11), )
if mibBuilder.loadTexts: x25DteLcnCpTable.setStatus('mandatory')
x25DteLcnCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnCpEntry.setStatus('mandatory')
x25DteLcnInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInPacketSize.setStatus('mandatory')
x25DteLcnOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutPacketSize.setStatus('mandatory')
x25DteLcnInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInWindowSize.setStatus('mandatory')
x25DteLcnOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutWindowSize.setStatus('mandatory')
x25DteLcnProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnProposeReverseCharging.setStatus('mandatory')
x25DteLcnFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("unrestricted", 3), ("restricted", 4), ("no", 5))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnFastSelect.setStatus('mandatory')
x25DteLcnOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutThroughputClassSize.setStatus('mandatory')
x25DteLcnInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInThroughputClassSize.setStatus('mandatory')
x25DteLcnCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 9), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCugIndex.setStatus('mandatory')
x25DteLcnCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCugoaIndex.setStatus('mandatory')
x25DteLcnNetworkUserIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 11), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnNetworkUserIdentifier.setStatus('mandatory')
x25DteLcnChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnChargingInformation.setStatus('mandatory')
x25DteLcnRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 13), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnRpoa.setStatus('mandatory')
x25DteLcnTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnTrnstDlySlctnAInd.setStatus('mandatory')
x25DteLcnCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 23), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallingNetworkFax.setStatus('mandatory')
x25DteLcnCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCalledNetworkFax.setStatus('mandatory')
x25DteLcnCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallUserData.setStatus('mandatory')
x25DteLcnLcnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12), )
if mibBuilder.loadTexts: x25DteLcnLcnStatusTable.setStatus('mandatory')
x25DteLcnLcnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnLcnStatusEntry.setStatus('mandatory')
x25DteLcnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("closed", 2), ("calling", 3), ("dataTransfer", 4), ("clearing", 5), ("resetting", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnStatus.setStatus('mandatory')
x25DteLcnCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("permanentLcn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallDirection.setStatus('mandatory')
x25DteLcnCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCalledAddress.setStatus('mandatory')
x25DteLcnCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 5), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallingAddress.setStatus('mandatory')
x25DteLcnOriginalCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 6), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOriginalCalledAddress.setStatus('mandatory')
x25DteLcnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13), )
if mibBuilder.loadTexts: x25DteLcnStatsTable.setStatus('mandatory')
x25DteLcnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnStatsEntry.setStatus('mandatory')
x25DteLcnInUknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInUknownProtocols.setStatus('mandatory')
x25DteLcnInDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInDataOctets.setStatus('mandatory')
x25DteLcnInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInDataPackets.setStatus('mandatory')
x25DteLcnInRmtInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInRmtInitiatedRsts.setStatus('mandatory')
x25DteLcnInPrvdrInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInPrvdrInitiatedRsts.setStatus('mandatory')
x25DteLcnInInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInInterruptPackets.setStatus('mandatory')
x25DteLcnOutDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutDataOctets.setStatus('mandatory')
x25DteLcnOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutDataPackets.setStatus('mandatory')
x25DteLcnOutInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutInterruptPackets.setStatus('mandatory')
x25DteLcnT22ResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnT22ResetTimeouts.setStatus('mandatory')
x25DteLapb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5))
x25DteLapbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1), )
if mibBuilder.loadTexts: x25DteLapbRowStatusTable.setStatus('mandatory')
x25DteLapbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbRowStatusEntry.setStatus('mandatory')
x25DteLapbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbRowStatus.setStatus('mandatory')
x25DteLapbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbComponentName.setStatus('mandatory')
x25DteLapbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbStorageType.setStatus('mandatory')
x25DteLapbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: x25DteLapbIndex.setStatus('mandatory')
x25DteLapbCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10), )
if mibBuilder.loadTexts: x25DteLapbCpTable.setStatus('mandatory')
x25DteLapbCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbCpEntry.setStatus('mandatory')
x25DteLapbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbStationType.setStatus('mandatory')
x25DteLapbFrameSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbFrameSequencing.setStatus('mandatory')
x25DteLapbN1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 32856)).clone(32856)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbN1FrameSize.setStatus('mandatory')
x25DteLapbKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbKWindowSize.setStatus('mandatory')
x25DteLapbN2TransmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbN2TransmitLimit.setStatus('mandatory')
x25DteLapbT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbT1AckTimer.setStatus('mandatory')
x25DteLapbT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbT2AckDelayTimer.setStatus('mandatory')
x25DteLapbT4IdleProbeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbT4IdleProbeTimer.setStatus('mandatory')
x25DteLapbActionInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("sendSABM", 1), ("sendDM", 3), ("none", 4))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbActionInitiate.setStatus('mandatory')
x25DteLapbActionRecvDM = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sendSABM", 1))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbActionRecvDM.setStatus('mandatory')
x25DteLapbTxQDegradeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbTxQDegradeThreshold.setStatus('mandatory')
x25DteLapbTxQResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbTxQResetThreshold.setStatus('mandatory')
x25DteLapbStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11), )
if mibBuilder.loadTexts: x25DteLapbStateTable.setStatus('mandatory')
x25DteLapbStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbStateEntry.setStatus('mandatory')
x25DteLapbAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbAdminState.setStatus('mandatory')
x25DteLapbOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbOperationalState.setStatus('mandatory')
x25DteLapbUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbUsageState.setStatus('mandatory')
x25DteLapbStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12), )
if mibBuilder.loadTexts: x25DteLapbStatusTable.setStatus('mandatory')
x25DteLapbStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbStatusEntry.setStatus('mandatory')
x25DteLapbCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("frameReject", 3), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbCurrentState.setStatus('mandatory')
x25DteLapbLastStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notStarted", 1), ("abmEntered", 2), ("abmeEntered", 3), ("abmReset", 4), ("abmeReset", 5), ("dmReceived", 6), ("dmSent", 7), ("discReceived", 8), ("discSent", 9), ("frmrReceived", 10), ("frmrSent", 11), ("n2TimeOut", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbLastStateChangeReason.setStatus('mandatory')
x25DteLapbFrmrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 7)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFrmrTransmit.setStatus('mandatory')
x25DteLapbFrmrReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 4), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 7)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFrmrReceive.setStatus('mandatory')
x25DteLapbCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbCurrentQueueSize.setStatus('mandatory')
x25DteLapbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13), )
if mibBuilder.loadTexts: x25DteLapbStatsTable.setStatus('mandatory')
x25DteLapbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbStatsEntry.setStatus('mandatory')
x25DteLapbStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbStateChanges.setStatus('mandatory')
x25DteLapbRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbRemoteBusy.setStatus('mandatory')
x25DteLapbTransmitRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbTransmitRejectFrames.setStatus('mandatory')
x25DteLapbReceiveRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbReceiveRejectFrames.setStatus('mandatory')
x25DteLapbT1AckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbT1AckTimeout.setStatus('mandatory')
x25DteLapbFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2))
x25DteLapbFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1), )
if mibBuilder.loadTexts: x25DteLapbFramerRowStatusTable.setStatus('mandatory')
x25DteLapbFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerRowStatusEntry.setStatus('mandatory')
x25DteLapbFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerRowStatus.setStatus('mandatory')
x25DteLapbFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerComponentName.setStatus('mandatory')
x25DteLapbFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerStorageType.setStatus('mandatory')
x25DteLapbFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: x25DteLapbFramerIndex.setStatus('mandatory')
x25DteLapbFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 10), )
if mibBuilder.loadTexts: x25DteLapbFramerProvTable.setStatus('mandatory')
x25DteLapbFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerProvEntry.setStatus('mandatory')
x25DteLapbFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbFramerInterfaceName.setStatus('mandatory')
x25DteLapbFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 11), )
if mibBuilder.loadTexts: x25DteLapbFramerLinkTable.setStatus('mandatory')
x25DteLapbFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerLinkEntry.setStatus('mandatory')
x25DteLapbFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbFramerFlagsBetweenFrames.setStatus('mandatory')
x25DteLapbFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12), )
if mibBuilder.loadTexts: x25DteLapbFramerStateTable.setStatus('mandatory')
x25DteLapbFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerStateEntry.setStatus('mandatory')
x25DteLapbFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerAdminState.setStatus('mandatory')
x25DteLapbFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerOperationalState.setStatus('mandatory')
x25DteLapbFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerUsageState.setStatus('mandatory')
x25DteLapbFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13), )
if mibBuilder.loadTexts: x25DteLapbFramerStatsTable.setStatus('mandatory')
x25DteLapbFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerStatsEntry.setStatus('mandatory')
x25DteLapbFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerFrmToIf.setStatus('mandatory')
x25DteLapbFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerFrmFromIf.setStatus('mandatory')
x25DteLapbFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerOctetFromIf.setStatus('mandatory')
x25DteLapbFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerAborts.setStatus('mandatory')
x25DteLapbFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerCrcErrors.setStatus('mandatory')
x25DteLapbFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerLrcErrors.setStatus('mandatory')
x25DteLapbFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerNonOctetErrors.setStatus('mandatory')
x25DteLapbFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerOverruns.setStatus('mandatory')
x25DteLapbFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerUnderruns.setStatus('mandatory')
x25DteLapbFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14), )
if mibBuilder.loadTexts: x25DteLapbFramerUtilTable.setStatus('mandatory')
x25DteLapbFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerUtilEntry.setStatus('mandatory')
x25DteLapbFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerNormPrioLinkUtilToIf.setStatus('mandatory')
x25DteLapbFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
x25DtePle = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6))
x25DtePleRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1), )
if mibBuilder.loadTexts: x25DtePleRowStatusTable.setStatus('mandatory')
x25DtePleRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePleIndex"))
if mibBuilder.loadTexts: x25DtePleRowStatusEntry.setStatus('mandatory')
x25DtePleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleRowStatus.setStatus('mandatory')
x25DtePleComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleComponentName.setStatus('mandatory')
x25DtePleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleStorageType.setStatus('mandatory')
x25DtePleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: x25DtePleIndex.setStatus('mandatory')
x25DtePleProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 10), )
if mibBuilder.loadTexts: x25DtePleProvTable.setStatus('mandatory')
x25DtePleProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePleIndex"))
if mibBuilder.loadTexts: x25DtePleProvEntry.setStatus('mandatory')
x25DtePleInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536000)).clone(180000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePleInactivityTimer.setStatus('mandatory')
x25DtePleOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11), )
if mibBuilder.loadTexts: x25DtePleOpTable.setStatus('mandatory')
x25DtePleOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePleIndex"))
if mibBuilder.loadTexts: x25DtePleOpEntry.setStatus('mandatory')
x25DtePleEncAddrToX25LkupFlrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleEncAddrToX25LkupFlrs.setStatus('mandatory')
x25DtePleLastFailedEncAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleLastFailedEncAddr.setStatus('mandatory')
x25DtePleX25AddrToEncLkupFlrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleX25AddrToEncLkupFlrs.setStatus('mandatory')
x25DtePleLastFailedX25Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 5), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleLastFailedX25Addr.setStatus('mandatory')
x25DteRg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7))
x25DteRgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1), )
if mibBuilder.loadTexts: x25DteRgRowStatusTable.setStatus('mandatory')
x25DteRgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgRowStatusEntry.setStatus('mandatory')
x25DteRgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgRowStatus.setStatus('mandatory')
x25DteRgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgComponentName.setStatus('mandatory')
x25DteRgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgStorageType.setStatus('mandatory')
x25DteRgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)))
if mibBuilder.loadTexts: x25DteRgIndex.setStatus('mandatory')
x25DteRgIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10), )
if mibBuilder.loadTexts: x25DteRgIfEntryTable.setStatus('mandatory')
x25DteRgIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgIfEntryEntry.setStatus('mandatory')
x25DteRgIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgIfAdminStatus.setStatus('mandatory')
x25DteRgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgIfIndex.setStatus('mandatory')
x25DteRgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11), )
if mibBuilder.loadTexts: x25DteRgProvTable.setStatus('mandatory')
x25DteRgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgProvEntry.setStatus('mandatory')
x25DteRgLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLinkToProtocolPort.setStatus('mandatory')
x25DteRgLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLocalAddress.setStatus('mandatory')
x25DteRgMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(576, 9188)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgMtuSize.setStatus('mandatory')
x25DteRgStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12), )
if mibBuilder.loadTexts: x25DteRgStateTable.setStatus('mandatory')
x25DteRgStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgStateEntry.setStatus('mandatory')
x25DteRgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgAdminState.setStatus('mandatory')
x25DteRgOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgOperationalState.setStatus('mandatory')
x25DteRgUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgUsageState.setStatus('mandatory')
x25DteRgOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 13), )
if mibBuilder.loadTexts: x25DteRgOperStatusTable.setStatus('mandatory')
x25DteRgOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgOperStatusEntry.setStatus('mandatory')
x25DteRgSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgSnmpOperStatus.setStatus('mandatory')
x25DteRgLTPlcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210), )
if mibBuilder.loadTexts: x25DteRgLTPlcnTable.setStatus('mandatory')
x25DteRgLTPlcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgLTPlcnValue"))
if mibBuilder.loadTexts: x25DteRgLTPlcnEntry.setStatus('mandatory')
x25DteRgLTPlcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLTPlcnValue.setStatus('mandatory')
x25DteRgLTPlcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: x25DteRgLTPlcnRowStatus.setStatus('mandatory')
x25DteRgLtPeerTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211), )
if mibBuilder.loadTexts: x25DteRgLtPeerTable.setStatus('mandatory')
x25DteRgLtPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgLtPeerValue"))
if mibBuilder.loadTexts: x25DteRgLtPeerEntry.setStatus('mandatory')
x25DteRgLtPeerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLtPeerValue.setStatus('mandatory')
x25DteRgLtPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: x25DteRgLtPeerRowStatus.setStatus('mandatory')
x25DteRgLcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 212), )
if mibBuilder.loadTexts: x25DteRgLcnTable.setStatus('mandatory')
x25DteRgLcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 212, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgLcnValue"))
if mibBuilder.loadTexts: x25DteRgLcnEntry.setStatus('mandatory')
x25DteRgLcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 212, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgLcnValue.setStatus('mandatory')
x25DteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1))
x25DteGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1, 5))
x25DteGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1, 5, 1))
x25DteGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1, 5, 1, 2))
x25DteCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3))
x25DteCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3, 5))
x25DteCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3, 5, 1))
x25DteCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-X25DteMIB", x25DteLcnNetworkUserIdentifier=x25DteLcnNetworkUserIdentifier, x25DteRg=x25DteRg, x25DtePleEncAddrToX25LkupFlrs=x25DtePleEncAddrToX25LkupFlrs, x25DteT23ClearTimer=x25DteT23ClearTimer, x25DteLapbFramerCrcErrors=x25DteLapbFramerCrcErrors, x25DteLapbFramerUsageState=x25DteLapbFramerUsageState, x25DteLapbFramerComponentName=x25DteLapbFramerComponentName, x25DteLapbFramerInterfaceName=x25DteLapbFramerInterfaceName, x25DteRgLocalAddress=x25DteRgLocalAddress, x25DteLapbFrmrTransmit=x25DteLapbFrmrTransmit, x25DtePeerPEncValue=x25DtePeerPEncValue, x25DteLapbFramerNormPrioLinkUtilFromIf=x25DteLapbFramerNormPrioLinkUtilFromIf, x25DtePeerOutWindowSize=x25DtePeerOutWindowSize, x25DteLapbStationType=x25DteLapbStationType, x25DteLcnCallDirection=x25DteLcnCallDirection, x25DteComponentName=x25DteComponentName, x25DteLcnRowStatusEntry=x25DteLcnRowStatusEntry, x25DteLapbCpTable=x25DteLapbCpTable, x25DteStateTable=x25DteStateTable, x25DteInPacketSize=x25DteInPacketSize, x25DteLapbFramerFrmToIf=x25DteLapbFramerFrmToIf, x25DtePleComponentName=x25DtePleComponentName, x25DtePacketSequencing=x25DtePacketSequencing, x25DteRgLTPlcnEntry=x25DteRgLTPlcnEntry, x25DteLapbFramerRowStatus=x25DteLapbFramerRowStatus, x25DtePeerTrnstDlySlctnAInd=x25DtePeerTrnstDlySlctnAInd, x25DteLcnChargingInformation=x25DteLcnChargingInformation, x25DteRgLtPeerEntry=x25DteRgLtPeerEntry, x25DteIfAdminStatus=x25DteIfAdminStatus, x25DteRgAdminState=x25DteRgAdminState, x25DteLapbCurrentState=x25DteLapbCurrentState, x25DteRowStatus=x25DteRowStatus, x25DtePeerIfTable=x25DtePeerIfTable, x25DteLapbFramer=x25DteLapbFramer, x25DteRgLcnValue=x25DteRgLcnValue, x25DteGroupBE=x25DteGroupBE, x25DteInCallRefusals=x25DteInCallRefusals, x25DteOutActiveChannels=x25DteOutActiveChannels, x25DteLapbLastStateChangeReason=x25DteLapbLastStateChangeReason, x25DteLcnStatus=x25DteLcnStatus, x25DteLcnCalledNetworkFax=x25DteLcnCalledNetworkFax, x25DteRgRowStatusTable=x25DteRgRowStatusTable, x25DteInDataPackets=x25DteInDataPackets, x25DteNumberOfPLcn=x25DteNumberOfPLcn, x25DteCidDataEntry=x25DteCidDataEntry, x25DteLapbTxQDegradeThreshold=x25DteLapbTxQDegradeThreshold, x25DteLapbFramerFrmFromIf=x25DteLapbFramerFrmFromIf, x25DteLapbStateEntry=x25DteLapbStateEntry, x25DteRowStatusTable=x25DteRowStatusTable, x25DteOperStatusTable=x25DteOperStatusTable, x25DtePeerRpoa=x25DtePeerRpoa, x25DteRgComponentName=x25DteRgComponentName, x25DteLcnInPacketSize=x25DteLcnInPacketSize, x25DteLcnInUknownProtocols=x25DteLcnInUknownProtocols, x25DteRowStatusEntry=x25DteRowStatusEntry, x25DteLcnStorageType=x25DteLcnStorageType, x25DteLapbRowStatusEntry=x25DteLapbRowStatusEntry, x25DteLcnAdminState=x25DteLcnAdminState, x25DtePLcnStorageType=x25DtePLcnStorageType, x25DteRgRowStatus=x25DteRgRowStatus, x25DteT20RestartTimer=x25DteT20RestartTimer, x25DteRgMtuSize=x25DteRgMtuSize, x25DteLapbT4IdleProbeTimer=x25DteLapbT4IdleProbeTimer, x25DteRgLcnEntry=x25DteRgLcnEntry, x25DteRgOperStatusEntry=x25DteRgOperStatusEntry, x25DteLapbRowStatusTable=x25DteLapbRowStatusTable, x25DteOpTable=x25DteOpTable, x25DteLapbFramerOctetFromIf=x25DteLapbFramerOctetFromIf, x25DteInWindowSize=x25DteInWindowSize, x25DteLcnFastSelect=x25DteLcnFastSelect, x25DteLapbFramerUtilEntry=x25DteLapbFramerUtilEntry, x25DteLapbStatusEntry=x25DteLapbStatusEntry, x25DteLcnOriginalCalledAddress=x25DteLcnOriginalCalledAddress, x25DteLcnOutWindowSize=x25DteLcnOutWindowSize, x25DtePle=x25DtePle, x25DtePleRowStatusEntry=x25DtePleRowStatusEntry, x25DteRgLtPeerTable=x25DteRgLtPeerTable, x25DteLapbCurrentQueueSize=x25DteLapbCurrentQueueSize, x25DteLcnInThroughputClassSize=x25DteLcnInThroughputClassSize, x25DteLapbFramerStatsTable=x25DteLapbFramerStatsTable, x25DtePeerCallUserData=x25DtePeerCallUserData, x25DtePeerCalledNetworkFax=x25DtePeerCalledNetworkFax, x25DtePeerCpTable=x25DtePeerCpTable, x25DteT22ResetTimeouts=x25DteT22ResetTimeouts, x25DteInRestarts=x25DteInRestarts, x25DtePeerPEncIndex=x25DtePeerPEncIndex, x25DteAcceptReverseCharging=x25DteAcceptReverseCharging, x25DteIfIndex=x25DteIfIndex, x25DtePeerNetworkUserIdentifier=x25DtePeerNetworkUserIdentifier, x25DteCugIndex=x25DteCugIndex, x25DteOperStatusEntry=x25DteOperStatusEntry, x25DteLcnStateEntry=x25DteLcnStateEntry, x25DteLapbFramerFlagsBetweenFrames=x25DteLapbFramerFlagsBetweenFrames, x25DteLcnCallingNetworkFax=x25DteLcnCallingNetworkFax, x25DteMaxActiveChannels=x25DteMaxActiveChannels, x25DteLapbTransmitRejectFrames=x25DteLapbTransmitRejectFrames, x25DtePeerInThroughputClassSize=x25DtePeerInThroughputClassSize, x25DteCugoaIndex=x25DteCugoaIndex, x25DtePeerCpEntry=x25DtePeerCpEntry, x25DteRgLinkToProtocolPort=x25DteRgLinkToProtocolPort, x25DtePeerOutPacketSize=x25DtePeerOutPacketSize, x25DteT21CallTimeouts=x25DteT21CallTimeouts, x25DteTwowayActiveChannels=x25DteTwowayActiveChannels, x25DtePeerEncAddressType=x25DtePeerEncAddressType, x25DtePLcnInPacketSize=x25DtePLcnInPacketSize, x25DteCustomerIdentifier=x25DteCustomerIdentifier, x25DteInPrvdrInitiatedClrs=x25DteInPrvdrInitiatedClrs, x25DteCallUserData=x25DteCallUserData, x25DtePLcnProvEntry=x25DtePLcnProvEntry, x25DteRgLTPlcnTable=x25DteRgLTPlcnTable, x25DteLcnInWindowSize=x25DteLcnInWindowSize, x25DteOperationalState=x25DteOperationalState, x25DteLapbFramerUtilTable=x25DteLapbFramerUtilTable, x25DteRgProvTable=x25DteRgProvTable, x25DteLcnRowStatus=x25DteLcnRowStatus, x25DtePleX25AddrToEncLkupFlrs=x25DtePleX25AddrToEncLkupFlrs, x25DteHighestILChannelNumber=x25DteHighestILChannelNumber, x25DteChargingInformation=x25DteChargingInformation, x25DteLapbFramerIndex=x25DteLapbFramerIndex, x25DteLcnOutPacketSize=x25DteLcnOutPacketSize, x25DteLcnCugIndex=x25DteLcnCugIndex, x25DteStatsTable=x25DteStatsTable, x25DteLcnLcnStatusEntry=x25DteLcnLcnStatusEntry, x25DtePeerOutThroughputClassSize=x25DtePeerOutThroughputClassSize, x25DteLcnCTable=x25DteLcnCTable, x25DtePLcnEncAddressType=x25DtePLcnEncAddressType, x25DteInterfaceMode=x25DteInterfaceMode, x25DteLapbFramerOperationalState=x25DteLapbFramerOperationalState, x25DteOutWindowSize=x25DteOutWindowSize, x25DtePeerLcnValue=x25DtePeerLcnValue, x25DtePLcnOutPacketSize=x25DtePLcnOutPacketSize, x25DtePleIndex=x25DtePleIndex, x25DteLowestTLChannelNumber=x25DteLowestTLChannelNumber, x25DteLcnInPrvdrInitiatedRsts=x25DteLcnInPrvdrInitiatedRsts, x25DtePeerProposeReverseCharging=x25DtePeerProposeReverseCharging, x25DteRpoa=x25DteRpoa, x25DtePeerPEncRowStatus=x25DtePeerPEncRowStatus, x25DtePeer=x25DtePeer, x25DteLapbFramerAborts=x25DteLapbFramerAborts, x25DteLapbStatsTable=x25DteLapbStatsTable, x25DteLcnStateTable=x25DteLcnStateTable, x25DteLapbN2TransmitLimit=x25DteLapbN2TransmitLimit, x25DtePeerAcceptReverseCharging=x25DtePeerAcceptReverseCharging, x25DtePLcnRowStatusEntry=x25DtePLcnRowStatusEntry, x25DteLcnStatsEntry=x25DteLcnStatsEntry, x25DteLcnTrnstDlySlctnAInd=x25DteLcnTrnstDlySlctnAInd, x25DteInPktsAcusdOfPrtclErr=x25DteInPktsAcusdOfPrtclErr, x25DtePeerX25Address=x25DtePeerX25Address, x25DteIfTable=x25DteIfTable, x25DteRgOperStatusTable=x25DteRgOperStatusTable, x25DteStatsEntry=x25DteStatsEntry, x25DtePeerChargingInformation=x25DtePeerChargingInformation, x25DteLcnCallUserData=x25DteLcnCallUserData, x25DteUsageState=x25DteUsageState, x25DteLapbFramerLinkEntry=x25DteLapbFramerLinkEntry, x25DteLapbStatusTable=x25DteLapbStatusTable, x25DteOutDataPackets=x25DteOutDataPackets, x25DtePLcnProtocolEncType=x25DtePLcnProtocolEncType, x25DteLcnOutThroughputClassSize=x25DteLcnOutThroughputClassSize, x25DtePleOpTable=x25DtePleOpTable, x25DteLapbN1FrameSize=x25DteLapbN1FrameSize, x25DtePeerIfEntry=x25DtePeerIfEntry, x25DteLapbOperationalState=x25DteLapbOperationalState, x25DteLapbFramerNonOctetErrors=x25DteLapbFramerNonOctetErrors, x25DteOutCallAttempts=x25DteOutCallAttempts, x25DteLapbFramerStorageType=x25DteLapbFramerStorageType, x25DtePleProvEntry=x25DtePleProvEntry, x25DteInRmtInitiatedRsts=x25DteInRmtInitiatedRsts, x25DteLcnRpoa=x25DteLcnRpoa, x25DteLcnCalledAddress=x25DteLcnCalledAddress, x25DteGroupBE00A=x25DteGroupBE00A, x25DteCallingNetworkFax=x25DteCallingNetworkFax, x25DteStateEntry=x25DteStateEntry, x25DteRgOperationalState=x25DteRgOperationalState, x25DteRgLtPeerRowStatus=x25DteRgLtPeerRowStatus, x25DteLcnCpEntry=x25DteLcnCpEntry, x25DteLapbKWindowSize=x25DteLapbKWindowSize, x25DteRgLcnTable=x25DteRgLcnTable, x25DtePeerLinkToRemoteGroup=x25DtePeerLinkToRemoteGroup, x25DteRgSnmpOperStatus=x25DteRgSnmpOperStatus, x25DteRgUsageState=x25DteRgUsageState, x25DteRgStateEntry=x25DteRgStateEntry, x25DteInThroughputClassSize=x25DteInThroughputClassSize, x25DteDcpTable=x25DteDcpTable, x25DteLcnInDataPackets=x25DteLcnInDataPackets, x25DteLowestILChannelNumber=x25DteLowestILChannelNumber, x25DtePLcnEncAddress=x25DtePLcnEncAddress, x25DteLowestOLChannelNumber=x25DteLowestOLChannelNumber, x25DtePleRowStatusTable=x25DtePleRowStatusTable, x25DteLapbFramerProvTable=x25DteLapbFramerProvTable, x25DteCapabilities=x25DteCapabilities, x25DteLcnOutDataOctets=x25DteLcnOutDataOctets, x25DteLapbFramerRowStatusEntry=x25DteLapbFramerRowStatusEntry, x25DteLcnProposeReverseCharging=x25DteLcnProposeReverseCharging, x25DteLapbT2AckDelayTimer=x25DteLapbT2AckDelayTimer, x25DteLapbRemoteBusy=x25DteLapbRemoteBusy, x25DteOutInterruptPackets=x25DteOutInterruptPackets, x25DteLcnCallingAddress=x25DteLcnCallingAddress, x25DteLcnStatsTable=x25DteLcnStatsTable, x25DtePeerRowStatusTable=x25DtePeerRowStatusTable, x25DteRgIfIndex=x25DteRgIfIndex, x25DtePleLastFailedX25Addr=x25DtePleLastFailedX25Addr, x25DteLcnUsageState=x25DteLcnUsageState, x25DtePLcnLinkToRemoteGroup=x25DtePLcnLinkToRemoteGroup, x25DteDcpEntry=x25DteDcpEntry, x25DteAdminState=x25DteAdminState, x25DteRgLTPlcnRowStatus=x25DteRgLTPlcnRowStatus, x25DtePeerEncAddress=x25DtePeerEncAddress, x25DteLapbT1AckTimer=x25DteLapbT1AckTimer, x25DteLapbStateTable=x25DteLapbStateTable, x25DteLcnOperationalState=x25DteLcnOperationalState, x25DteLapbFramerOverruns=x25DteLapbFramerOverruns, x25DtePeerRowStatus=x25DtePeerRowStatus, x25DteLcnInDataOctets=x25DteLcnInDataOctets, x25DteLapbFramerNormPrioLinkUtilToIf=x25DteLapbFramerNormPrioLinkUtilToIf, x25DteInCalls=x25DteInCalls, x25DteTrnstDlySlctnAInd=x25DteTrnstDlySlctnAInd, x25DteLapbReceiveRejectFrames=x25DteLapbReceiveRejectFrames, x25DtePleOpEntry=x25DtePleOpEntry, x25DteCidDataTable=x25DteCidDataTable, x25DteT22ResetTimer=x25DteT22ResetTimer, x25DteInPrvdrInitiatedRsts=x25DteInPrvdrInitiatedRsts, x25DteRgStateTable=x25DteRgStateTable, x25DteLapbFramerRowStatusTable=x25DteLapbFramerRowStatusTable, x25DteLcnIndex=x25DteLcnIndex, x25DteT23ClearTimeouts=x25DteT23ClearTimeouts, x25DteLapbFramerLrcErrors=x25DteLapbFramerLrcErrors, x25DtePleStorageType=x25DtePleStorageType, x25DtePleRowStatus=x25DtePleRowStatus, x25DteOutCallFailures=x25DteOutCallFailures, x25DteLapbFrameSequencing=x25DteLapbFrameSequencing, x25DteOpEntry=x25DteOpEntry, x25DtePeerCugIndex=x25DtePeerCugIndex, x25DteLapbUsageState=x25DteLapbUsageState, x25DteInInterruptPackets=x25DteInInterruptPackets, x25DteCapabilitiesBE00=x25DteCapabilitiesBE00, x25DtePLcnComponentName=x25DtePLcnComponentName, x25DteLcnOutDataPackets=x25DteLcnOutDataPackets, x25DtePleLastFailedEncAddr=x25DtePleLastFailedEncAddr, x25DteLcnComponentName=x25DteLcnComponentName, x25DteLapbT1AckTimeout=x25DteLapbT1AckTimeout, x25DteLapbFramerProvEntry=x25DteLapbFramerProvEntry, x25DtePeerComponentName=x25DtePeerComponentName, x25DtePLcnOutWindowSize=x25DtePLcnOutWindowSize, x25DteIndex=x25DteIndex, x25DteLcnInInterruptPackets=x25DteLcnInInterruptPackets, x25DteLapbFramerStateTable=x25DteLapbFramerStateTable, x25DtePLcnIndex=x25DtePLcnIndex, x25DteIfEntry=x25DteIfEntry, x25DteLapbComponentName=x25DteLapbComponentName, x25DteProposeReverseCharging=x25DteProposeReverseCharging, x25DteMIB=x25DteMIB, x25DteLcnCugoaIndex=x25DteLcnCugoaIndex, x25DtePeerStorageType=x25DtePeerStorageType)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-X25DteMIB", x25DteGroup=x25DteGroup, x25DteOutPacketSize=x25DteOutPacketSize, x25DtePeerRowStatusEntry=x25DtePeerRowStatusEntry, x25DtePeerCallingNetworkFax=x25DtePeerCallingNetworkFax, x25DteOutThroughputClassSize=x25DteOutThroughputClassSize, x25DteLcnCpTable=x25DteLcnCpTable, x25DteLapbFrmrReceive=x25DteLapbFrmrReceive, x25DtePeerPEncTable=x25DtePeerPEncTable, x25DteStorageType=x25DteStorageType, x25DteLapbActionRecvDM=x25DteLapbActionRecvDM, x25DteT20RestartTimeouts=x25DteT20RestartTimeouts, x25DtePeerPEncEntry=x25DtePeerPEncEntry, x25Dte=x25Dte, x25DteLapbStorageType=x25DteLapbStorageType, x25DteLapb=x25DteLapb, x25DteRgProvEntry=x25DteRgProvEntry, x25DteRgStorageType=x25DteRgStorageType, x25DteLcnCEntry=x25DteLcnCEntry, x25DtePLcn=x25DtePLcn, x25DteIfEntryEntry=x25DteIfEntryEntry, x25DteLcnInRmtInitiatedRsts=x25DteLcnInRmtInitiatedRsts, x25DteLcn=x25DteLcn, x25DtePLcnInWindowSize=x25DtePLcnInWindowSize, x25DteLapbStatsEntry=x25DteLapbStatsEntry, x25DtePLcnRowStatusTable=x25DtePLcnRowStatusTable, x25DteRgIfAdminStatus=x25DteRgIfAdminStatus, x25DtePeerIndex=x25DtePeerIndex, x25DteInterfaceState=x25DteInterfaceState, x25DteIfEntryTable=x25DteIfEntryTable, x25DteLcnRowStatusTable=x25DteLcnRowStatusTable, x25DteLapbFramerAdminState=x25DteLapbFramerAdminState, x25DtePeerLcnTable=x25DtePeerLcnTable, x25DteRgRowStatusEntry=x25DteRgRowStatusEntry, x25DteT21CallTimer=x25DteT21CallTimer, x25DteLapbFramerStateEntry=x25DteLapbFramerStateEntry, x25DteCalledNetworkFax=x25DteCalledNetworkFax, x25DteRgIfEntryTable=x25DteRgIfEntryTable, x25DteInActiveChannels=x25DteInActiveChannels, x25DtePeerCugoaIndex=x25DtePeerCugoaIndex, x25DteRgIndex=x25DteRgIndex, x25DtePLcnRowStatus=x25DtePLcnRowStatus, x25DteLapbTxQResetThreshold=x25DteLapbTxQResetThreshold, x25DteLapbRowStatus=x25DteLapbRowStatus, x25DteLcnLcnStatusTable=x25DteLcnLcnStatusTable, x25DteLcnOutInterruptPackets=x25DteLcnOutInterruptPackets, x25DtePeerInWindowSize=x25DtePeerInWindowSize, x25DteRgIfEntryEntry=x25DteRgIfEntryEntry, x25DteLapbStateChanges=x25DteLapbStateChanges, x25DtePleProvTable=x25DtePleProvTable, x25DteRgLtPeerValue=x25DteRgLtPeerValue, x25DteLapbFramerLinkTable=x25DteLapbFramerLinkTable, x25DteLapbIndex=x25DteLapbIndex, x25DteGroupBE00=x25DteGroupBE00, x25DtePleInactivityTimer=x25DtePleInactivityTimer, x25DteLapbActionInitiate=x25DteLapbActionInitiate, x25DteLapbAdminState=x25DteLapbAdminState, x25DtePeerLcnEntry=x25DtePeerLcnEntry, x25DteHighestOLChannelNumber=x25DteHighestOLChannelNumber, x25DtePLcnProvTable=x25DtePLcnProvTable, x25DteSnmpOperStatus=x25DteSnmpOperStatus, x25DtePeerInPacketSize=x25DtePeerInPacketSize, x25DteHighestTLChannelNumber=x25DteHighestTLChannelNumber, x25DteLapbFramerStatsEntry=x25DteLapbFramerStatsEntry, x25DteLapbCpEntry=x25DteLapbCpEntry, x25DteLcnT22ResetTimeouts=x25DteLcnT22ResetTimeouts, x25DteRgLTPlcnValue=x25DteRgLTPlcnValue, x25DteCapabilitiesBE00A=x25DteCapabilitiesBE00A, x25DteLapbFramerUnderruns=x25DteLapbFramerUnderruns, x25DteCapabilitiesBE=x25DteCapabilitiesBE)
