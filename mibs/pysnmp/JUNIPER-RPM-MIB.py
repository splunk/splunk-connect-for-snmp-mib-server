#
# PySNMP MIB module JUNIPER-RPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-RPM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:50:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
pingCtlOwnerIndex, pingProbeHistoryIndex, pingCtlTestName = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingCtlOwnerIndex", "pingProbeHistoryIndex", "pingCtlTestName")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
jnxRpmMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxRpmMibRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, ModuleIdentity, IpAddress, Counter64, iso, Integer32, Gauge32, MibIdentifier, Counter32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "ModuleIdentity", "IpAddress", "Counter64", "iso", "Integer32", "Gauge32", "MibIdentifier", "Counter32", "ObjectIdentity", "NotificationType")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
jnxRpmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1))
jnxRpmMib.setRevisions(('2007-03-01 00:00',))
if mibBuilder.loadTexts: jnxRpmMib.setLastUpdated('200703010000Z')
if mibBuilder.loadTexts: jnxRpmMib.setOrganization('Juniper Networks, Inc.')
class JnxRpmCollectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("currentTest", 1), ("lastCompletedTest", 2), ("movingAverage", 3), ("allTests", 4))

class JnxRpmMeasurementType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("roundTripTime", 1), ("rttJitter", 2), ("rttInterarrivalJitter", 3), ("egress", 4), ("egressJitter", 5), ("egressInterarrivalJitter", 6), ("ingress", 7), ("ingressJitter", 8), ("ingressInterarrivalJitter", 9))

class JnxRpmMeasurementSet(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("roundTripTime", 1), ("posRttJitter", 2), ("negRttJitter", 3), ("egress", 4), ("posEgressJitter", 5), ("negEgressJitter", 6), ("ingress", 7), ("posIngressJitter", 8), ("negIngressJitter", 9))

class JnxRpmTimestampType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("software", 1), ("clientHardware", 2), ("clientAndServerHardware", 3))

jnxRpmResultsSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1), )
if mibBuilder.loadTexts: jnxRpmResultsSampleTable.setStatus('current')
jnxRpmResultsSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSampleType"))
if mibBuilder.loadTexts: jnxRpmResultsSampleEntry.setStatus('current')
jnxRpmResSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 1), JnxRpmMeasurementType())
if mibBuilder.loadTexts: jnxRpmResSampleType.setStatus('current')
jnxRpmResSampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleValue.setStatus('current')
jnxRpmResSampleTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 3), JnxRpmTimestampType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleTsType.setStatus('current')
jnxRpmResSampleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleDate.setStatus('current')
jnxRpmResultsSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2), )
if mibBuilder.loadTexts: jnxRpmResultsSummaryTable.setStatus('current')
jnxRpmResultsSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSumCollection"))
if mibBuilder.loadTexts: jnxRpmResultsSummaryEntry.setStatus('current')
jnxRpmResSumCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 1), JnxRpmCollectionType())
if mibBuilder.loadTexts: jnxRpmResSumCollection.setStatus('current')
jnxRpmResSumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumSent.setStatus('current')
jnxRpmResSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumReceived.setStatus('current')
jnxRpmResSumPercentLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumPercentLost.setStatus('current')
jnxRpmResSumDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumDate.setStatus('current')
jnxRpmResultsCalculatedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3), )
if mibBuilder.loadTexts: jnxRpmResultsCalculatedTable.setStatus('current')
jnxRpmResultsCalculatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSumCollection"), (0, "JUNIPER-RPM-MIB", "jnxRpmResCalcSet"))
if mibBuilder.loadTexts: jnxRpmResultsCalculatedEntry.setStatus('current')
jnxRpmResCalcSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 1), JnxRpmMeasurementSet())
if mibBuilder.loadTexts: jnxRpmResCalcSet.setStatus('current')
jnxRpmResCalcSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcSamples.setStatus('current')
jnxRpmResCalcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcMin.setStatus('current')
jnxRpmResCalcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcMax.setStatus('current')
jnxRpmResCalcAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcAverage.setStatus('current')
jnxRpmResCalcPkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcPkToPk.setStatus('current')
jnxRpmResCalcStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcStdDev.setStatus('current')
jnxRpmResCalcSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcSum.setStatus('current')
jnxRpmHistorySampleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4), )
if mibBuilder.loadTexts: jnxRpmHistorySampleTable.setStatus('current')
jnxRpmHistorySampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSampleType"))
if mibBuilder.loadTexts: jnxRpmHistorySampleEntry.setStatus('current')
jnxRpmHistSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 1), JnxRpmMeasurementType())
if mibBuilder.loadTexts: jnxRpmHistSampleType.setStatus('current')
jnxRpmHistSampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSampleValue.setStatus('current')
jnxRpmHistSampleTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 3), JnxRpmTimestampType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSampleTsType.setStatus('current')
jnxRpmHistorySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5), )
if mibBuilder.loadTexts: jnxRpmHistorySummaryTable.setStatus('current')
jnxRpmHistorySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSumCollection"))
if mibBuilder.loadTexts: jnxRpmHistorySummaryEntry.setStatus('current')
jnxRpmHistSumCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 1), JnxRpmCollectionType())
if mibBuilder.loadTexts: jnxRpmHistSumCollection.setStatus('current')
jnxRpmHistSumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumSent.setStatus('current')
jnxRpmHistSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumReceived.setStatus('current')
jnxRpmHistSumPercentLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumPercentLost.setStatus('current')
jnxRpmHistoryCalculatedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6), )
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedTable.setStatus('current')
jnxRpmHistoryCalculatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSumCollection"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistCalcSet"))
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedEntry.setStatus('current')
jnxRpmHistCalcSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 1), JnxRpmMeasurementSet())
if mibBuilder.loadTexts: jnxRpmHistCalcSet.setStatus('current')
jnxRpmHistCalcSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcSamples.setStatus('current')
jnxRpmHistCalcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcMin.setStatus('current')
jnxRpmHistCalcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcMax.setStatus('current')
jnxRpmHistCalcAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcAverage.setStatus('current')
jnxRpmHistCalcPkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcPkToPk.setStatus('current')
jnxRpmHistCalcStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcStdDev.setStatus('current')
jnxRpmHistCalcSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcSum.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-RPM-MIB", jnxRpmHistCalcSet=jnxRpmHistCalcSet, jnxRpmResSampleType=jnxRpmResSampleType, jnxRpmResSumDate=jnxRpmResSumDate, jnxRpmResultsCalculatedTable=jnxRpmResultsCalculatedTable, jnxRpmResCalcSum=jnxRpmResCalcSum, jnxRpmResultsSummaryEntry=jnxRpmResultsSummaryEntry, jnxRpmHistCalcMax=jnxRpmHistCalcMax, PYSNMP_MODULE_ID=jnxRpmMib, jnxRpmResCalcSet=jnxRpmResCalcSet, jnxRpmResSampleTsType=jnxRpmResSampleTsType, jnxRpmHistSampleTsType=jnxRpmHistSampleTsType, JnxRpmMeasurementType=JnxRpmMeasurementType, jnxRpmResSumReceived=jnxRpmResSumReceived, jnxRpmHistorySummaryEntry=jnxRpmHistorySummaryEntry, jnxRpmHistCalcSum=jnxRpmHistCalcSum, jnxRpmHistorySampleTable=jnxRpmHistorySampleTable, jnxRpmResCalcPkToPk=jnxRpmResCalcPkToPk, jnxRpmHistCalcStdDev=jnxRpmHistCalcStdDev, jnxRpmResCalcStdDev=jnxRpmResCalcStdDev, jnxRpmHistSumCollection=jnxRpmHistSumCollection, jnxRpmHistorySampleEntry=jnxRpmHistorySampleEntry, jnxRpmHistCalcSamples=jnxRpmHistCalcSamples, JnxRpmMeasurementSet=JnxRpmMeasurementSet, jnxRpmResultsSampleTable=jnxRpmResultsSampleTable, jnxRpmResSampleDate=jnxRpmResSampleDate, jnxRpmResSumCollection=jnxRpmResSumCollection, jnxRpmHistCalcAverage=jnxRpmHistCalcAverage, jnxRpmHistSumSent=jnxRpmHistSumSent, jnxRpmHistoryCalculatedTable=jnxRpmHistoryCalculatedTable, jnxRpmHistoryCalculatedEntry=jnxRpmHistoryCalculatedEntry, jnxRpmHistSampleType=jnxRpmHistSampleType, jnxRpmResultsCalculatedEntry=jnxRpmResultsCalculatedEntry, jnxRpmHistCalcMin=jnxRpmHistCalcMin, jnxRpmResCalcMin=jnxRpmResCalcMin, jnxRpmResultsSampleEntry=jnxRpmResultsSampleEntry, jnxRpmResultsSummaryTable=jnxRpmResultsSummaryTable, jnxRpmHistSumReceived=jnxRpmHistSumReceived, jnxRpmHistCalcPkToPk=jnxRpmHistCalcPkToPk, jnxRpmResCalcMax=jnxRpmResCalcMax, jnxRpmHistorySummaryTable=jnxRpmHistorySummaryTable, jnxRpmMib=jnxRpmMib, JnxRpmCollectionType=JnxRpmCollectionType, jnxRpmResCalcSamples=jnxRpmResCalcSamples, jnxRpmResSampleValue=jnxRpmResSampleValue, jnxRpmResCalcAverage=jnxRpmResCalcAverage, jnxRpmResSumPercentLost=jnxRpmResSumPercentLost, jnxRpmHistSampleValue=jnxRpmHistSampleValue, jnxRpmResSumSent=jnxRpmResSumSent, JnxRpmTimestampType=JnxRpmTimestampType, jnxRpmHistSumPercentLost=jnxRpmHistSumPercentLost)
