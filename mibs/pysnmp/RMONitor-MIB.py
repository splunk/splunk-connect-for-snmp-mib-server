#
# PySNMP MIB module RMONitor-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RMONitor-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:49:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, enterprises, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter64, Unsigned32, Integer32, MibIdentifier, iso, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "enterprises", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "Integer32", "MibIdentifier", "iso", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class OwnerString(DisplayString):
    pass

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
rmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 45))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 45, 1))
protocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 45, 2))
authTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1), )
if mibBuilder.loadTexts: authTable.setStatus('mandatory')
authEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1), ).setIndexNames((0, "RMONitor-MIB", "authCommunity"))
if mibBuilder.loadTexts: authEntry.setStatus('mandatory')
authCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authCommunity.setStatus('mandatory')
authTypeAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("monitor", 2), ("not-applicable", 3), ("primary", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authTypeAccess.setStatus('mandatory')
authActions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authActions.setStatus('mandatory')
subscriptTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptTable.setStatus('mandatory')
subscriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "RMONitor-MIB", "subscriptIpAddress"))
if mibBuilder.loadTexts: subscriptEntry.setStatus('mandatory')
subscriptIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptIpAddress.setStatus('mandatory')
subscriptCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptCommunity.setStatus('mandatory')
subscriptActions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptActions.setStatus('mandatory')
authFailTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authFailTable.setStatus('mandatory')
authFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "RMONitor-MIB", "authFailIndex"))
if mibBuilder.loadTexts: authFailEntry.setStatus('mandatory')
authFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailIndex.setStatus('mandatory')
authFailIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailIPAddress.setStatus('mandatory')
authFailCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailCommunity.setStatus('mandatory')
protocolDistControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1), )
if mibBuilder.loadTexts: protocolDistControlTable.setStatus('mandatory')
protocolDistControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1), ).setIndexNames((0, "RMONitor-MIB", "protocolDistControlIndex"))
if mibBuilder.loadTexts: protocolDistControlEntry.setStatus('mandatory')
protocolDistControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistControlIndex.setStatus('mandatory')
protocolDistControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolDistControlDataSource.setStatus('mandatory')
protocolDistControlLastDeleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistControlLastDeleteTime.setStatus('mandatory')
protocolDistControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 4), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolDistControlOwner.setStatus('mandatory')
protocolDistControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 5), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolDistControlStatus.setStatus('mandatory')
protocolDistTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2), )
if mibBuilder.loadTexts: protocolDistTable.setStatus('mandatory')
protocolDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1), ).setIndexNames((0, "RMONitor-MIB", "protocolDistIndex"), (0, "RMONitor-MIB", "protocolDistEthertype"))
if mibBuilder.loadTexts: protocolDistEntry.setStatus('mandatory')
protocolDistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistIndex.setStatus('mandatory')
protocolDistEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistEthertype.setStatus('mandatory')
protocolDistPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistPkts.setStatus('mandatory')
protocolDistOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistOctets.setStatus('mandatory')
mibBuilder.exportSymbols("RMONitor-MIB", ibm=ibm, authTypeAccess=authTypeAccess, subscriptCommunity=subscriptCommunity, protocolDistControlLastDeleteTime=protocolDistControlLastDeleteTime, authFailCommunity=authFailCommunity, protocolDistEthertype=protocolDistEthertype, OwnerString=OwnerString, protocolDistIndex=protocolDistIndex, protocolDistControlTable=protocolDistControlTable, protocols=protocols, subscriptIpAddress=subscriptIpAddress, ibmProd=ibmProd, subscriptTable=subscriptTable, mib_2=mib_2, protocolDistTable=protocolDistTable, authFailIndex=authFailIndex, authFailTable=authFailTable, authFailIPAddress=authFailIPAddress, subscriptEntry=subscriptEntry, protocolDistControlIndex=protocolDistControlIndex, authEntry=authEntry, authCommunity=authCommunity, protocolDistControlDataSource=protocolDistControlDataSource, EntryStatus=EntryStatus, protocolDistControlOwner=protocolDistControlOwner, protocolDistEntry=protocolDistEntry, authActions=authActions, protocolDistPkts=protocolDistPkts, rmonitor=rmonitor, subscriptActions=subscriptActions, protocolDistOctets=protocolDistOctets, authTable=authTable, authFailEntry=authFailEntry, protocolDistControlStatus=protocolDistControlStatus, security=security, protocolDistControlEntry=protocolDistControlEntry)
