#
# PySNMP MIB module SWITCH-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEFINITIONS
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Integer32, IpAddress, ModuleIdentity, TimeTicks, NotificationType, MibIdentifier, iso, ObjectIdentity, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "ModuleIdentity", "TimeTicks", "NotificationType", "MibIdentifier", "iso", "ObjectIdentity", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32")
TextualConvention, DisplayString, MacAddress, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TimeStamp", "RowStatus")
switchChassis, = mibBuilder.importSymbols("TELESYN-ATI-TC", "switchChassis")
switchChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1))
switchChassisMib.setRevisions(('1997-04-29 20:00', '1997-01-14 20:00', '1996-12-19 22:00',))
if mibBuilder.loadTexts: switchChassisMib.setLastUpdated('9704292000Z')
if mibBuilder.loadTexts: switchChassisMib.setOrganization('')
class HostNameOrIpAddr(DisplayString):
    status = 'current'

class HwIdentifier(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2d.2d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class SwVersionId(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2d.2d.2d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

chassisParams = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1))
ipParams = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 3))
sysConfigParams = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4))
snmpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6))
consoleParams = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 7))
logParams = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8))
bootParams = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9))
chassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSerialNumber.setStatus('current')
chassisHwId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 2), HwIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisHwId.setStatus('current')
chassisOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisOSVersion.setStatus('current')
chassisFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFwVersion.setStatus('current')
chassisLastChanges = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLastChanges.setStatus('current')
chassisBaseMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBaseMacAddress.setStatus('current')
chassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("slowOrStopped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanStatus.setStatus('current')
chassisBoardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBoardSerialNumber.setStatus('current')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('obsolete')
ipNetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetMask.setStatus('obsolete')
ipBcastForm = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOnes", 1), ("allZeros", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBcastForm.setStatus('obsolete')
ipEncap = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEncap.setStatus('obsolete')
ipDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultGateway.setStatus('obsolete')
ipDomainName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDomainName.setStatus('obsolete')
bootFlag = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 16, 32, 48, 64, 128, 192))).clone(namedValues=NamedValues(("bootSystem", 0), ("skipPost", 1), ("runMonitor", 2), ("useBackupBoot", 4), ("loopPost", 8), ("bootLoader", 16), ("bootNetwork", 32), ("bootDiag", 48), ("networkEth0", 64), ("networkEth1", 128), ("networkCom0", 192)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootFlag.setStatus('deprecated')
dramSize = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dramSize.setStatus('current')
cpuVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 3), HwIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVer.setStatus('current')
iscVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 4), HwIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscVer.setStatus('current')
pigVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 5), HwIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pigVer.setStatus('current')
postVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 6), SwVersionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postVer.setStatus('current')
isdVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 7), SwVersionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdVer.setStatus('current')
bootVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 8), SwVersionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVer.setStatus('current')
qmuMemSize = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmuMemSize.setStatus('current')
segBusTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 10), )
if mibBuilder.loadTexts: segBusTable.setStatus('current')
segBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 10, 1), ).setIndexNames((0, "SWITCH-CHASSIS-MIB", "segBusIndex"))
if mibBuilder.loadTexts: segBusEntry.setStatus('current')
segBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: segBusIndex.setStatus('current')
segBusPmiuId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 10, 1, 2), HwIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segBusPmiuId.setStatus('current')
segBusQmuId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 4, 10, 1, 3), HwIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segBusQmuId.setStatus('current')
snmpIpTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 1), )
if mibBuilder.loadTexts: snmpIpTrapRcvrTable.setStatus('current')
snmpIpTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 1, 1), ).setIndexNames((0, "SWITCH-CHASSIS-MIB", "snmpIpTrapRcvrIpAddress"))
if mibBuilder.loadTexts: snmpIpTrapRcvrEntry.setStatus('current')
snmpIpTrapRcvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: snmpIpTrapRcvrIpAddress.setStatus('current')
snmpIpTrapRcvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpIpTrapRcvrPort.setStatus('current')
snmpIpTrapRcvrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpIpTrapRcvrCommunity.setStatus('current')
snmpIpTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpIpTrapRcvrStatus.setStatus('current')
snmpUnAuthIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUnAuthIpAddr.setStatus('current')
snmpUnAuthCommunity = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUnAuthCommunity.setStatus('current')
consolePortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 7, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortSpeed.setStatus('deprecated')
consolePortDataBits = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortDataBits.setStatus('deprecated')
consolePortStopBits = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("onePointFive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortStopBits.setStatus('deprecated')
consolePortParity = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortParity.setStatus('deprecated')
eventLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogEnable.setStatus('current')
eventLogSize = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSize.setStatus('current')
eventLogCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogCount.setStatus('current')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 4), )
if mibBuilder.loadTexts: eventLogTable.setStatus('current')
eventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 4, 1), ).setIndexNames((0, "SWITCH-CHASSIS-MIB", "eventLogIndex"))
if mibBuilder.loadTexts: eventLogEntry.setStatus('current')
eventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: eventLogIndex.setStatus('current')
eventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogTime.setStatus('current')
eventLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDescr.setStatus('current')
eventLogDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDetail.setStatus('current')
eventLogRawEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 8, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRawEntry.setStatus('current')
deviceReset = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceReset.setStatus('current')
tftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4))
tftpServerName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 1), HostNameOrIpAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerName.setStatus('current')
tftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpUserName.setStatus('current')
tftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRemoteFileName.setStatus('current')
tftpLocalFileName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpLocalFileName.setStatus('current')
tftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("putFile", 1), ("getFile", 2), ("getFirmware", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpOperation.setStatus('current')
tftpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configure", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAdminState.setStatus('current')
tftpOperationState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inactive", 1), ("executing", 2), ("succeeded", 3), ("localFileProblem", 4), ("unknownHost", 5), ("timedOut", 6), ("remoteFileProblem", 7), ("otherFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpOperationState.setStatus('current')
tftpOperationStateChange = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpOperationStateChange.setStatus('current')
tftpErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 1, 1, 9, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpErrorMessage.setStatus('current')
mibBuilder.exportSymbols("SWITCH-CHASSIS-MIB", cpuVer=cpuVer, chassisSerialNumber=chassisSerialNumber, pigVer=pigVer, isdVer=isdVer, chassisParams=chassisParams, snmpIpTrapRcvrPort=snmpIpTrapRcvrPort, eventLogRawEntry=eventLogRawEntry, bootParams=bootParams, qmuMemSize=qmuMemSize, eventLogCount=eventLogCount, tftpErrorMessage=tftpErrorMessage, eventLogDescr=eventLogDescr, iscVer=iscVer, HostNameOrIpAddr=HostNameOrIpAddr, chassisOSVersion=chassisOSVersion, tftpAdminState=tftpAdminState, segBusEntry=segBusEntry, snmpIpTrapRcvrCommunity=snmpIpTrapRcvrCommunity, eventLogEnable=eventLogEnable, ipDomainName=ipDomainName, bootFlag=bootFlag, bootVer=bootVer, eventLogSize=eventLogSize, chassisHwId=chassisHwId, HwIdentifier=HwIdentifier, segBusTable=segBusTable, logParams=logParams, tftpServerName=tftpServerName, eventLogTime=eventLogTime, tftpOperation=tftpOperation, consolePortSpeed=consolePortSpeed, segBusPmiuId=segBusPmiuId, snmpParams=snmpParams, ipParams=ipParams, sysConfigParams=sysConfigParams, deviceReset=deviceReset, switchChassisMib=switchChassisMib, ipNetMask=ipNetMask, ipEncap=ipEncap, snmpIpTrapRcvrIpAddress=snmpIpTrapRcvrIpAddress, postVer=postVer, chassisFanStatus=chassisFanStatus, tftpOperationState=tftpOperationState, segBusQmuId=segBusQmuId, PYSNMP_MODULE_ID=switchChassisMib, snmpUnAuthCommunity=snmpUnAuthCommunity, ipAddr=ipAddr, snmpIpTrapRcvrStatus=snmpIpTrapRcvrStatus, eventLogEntry=eventLogEntry, eventLogIndex=eventLogIndex, chassisBaseMacAddress=chassisBaseMacAddress, chassisBoardSerialNumber=chassisBoardSerialNumber, consolePortStopBits=consolePortStopBits, eventLogDetail=eventLogDetail, chassisLastChanges=chassisLastChanges, tftpUserName=tftpUserName, snmpUnAuthIpAddr=snmpUnAuthIpAddr, snmpIpTrapRcvrEntry=snmpIpTrapRcvrEntry, tftpOperationStateChange=tftpOperationStateChange, dramSize=dramSize, chassisFwVersion=chassisFwVersion, tftpRemoteFileName=tftpRemoteFileName, snmpIpTrapRcvrTable=snmpIpTrapRcvrTable, ipDefaultGateway=ipDefaultGateway, consolePortDataBits=consolePortDataBits, tftpGroup=tftpGroup, SwVersionId=SwVersionId, segBusIndex=segBusIndex, consolePortParity=consolePortParity, eventLogTable=eventLogTable, ipBcastForm=ipBcastForm, consoleParams=consoleParams, tftpLocalFileName=tftpLocalFileName)
