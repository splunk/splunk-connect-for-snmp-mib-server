#
# PySNMP MIB module DMTF-MOBILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DMTF-MOBILE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:36:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
DmiDate, dmiEventStateKey, dmiCompId, dmiEventAssociatedGroup, dmiEventSystem, DmiString, dmiEventDateTime, dmiEventSubSystem, dmiEventSeverity = mibBuilder.importSymbols("DMTF-DMI-MIB", "DmiDate", "dmiEventStateKey", "dmiCompId", "dmiEventAssociatedGroup", "dmiEventSystem", "DmiString", "dmiEventDateTime", "dmiEventSubSystem", "dmiEventSeverity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Bits, TimeTicks, MibIdentifier, Unsigned32, NotificationType, Counter32, Counter64, ObjectIdentity, ModuleIdentity, Integer32, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Bits", "TimeTicks", "MibIdentifier", "Unsigned32", "NotificationType", "Counter32", "Counter64", "ObjectIdentity", "ModuleIdentity", "Integer32", "enterprises", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfMobileComputerMIF = ModuleIdentity((1, 3, 6, 1, 4, 1, 412, 2, 8))
if mibBuilder.loadTexts: dmtfMobileComputerMIF.setLastUpdated('9710221800Z')
if mibBuilder.loadTexts: dmtfMobileComputerMIF.setOrganization('Desktop Management Task Force')
dmtfDeviceBayTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 9), )
if mibBuilder.loadTexts: dmtfDeviceBayTable.setStatus('current')
dmtfDeviceBayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "deviceBayIndex"))
if mibBuilder.loadTexts: dmtfDeviceBayEntry.setStatus('current')
dmtfDeviceBayState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfDeviceBayState.setStatus('current')
deviceBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBayIndex.setStatus('current')
deviceBayType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("proprietaryBay", 3), ("standardDesktopDeviceBay", 4), ("standardMobileDeviceBay", 5), ("standardUltraMobileDeviceBay", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBayType.setStatus('current')
deviceBayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBayLocation.setStatus('current')
devicesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicesSupported.setStatus('current')
deviceCurrentlyAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 5), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCurrentlyAttached.setStatus('current')
dmtfDynamicStatesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 2), )
if mibBuilder.loadTexts: dmtfDynamicStatesTable.setStatus('current')
dmtfDynamicStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 2, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfDynamicStatesEntry.setStatus('current')
aCLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("offLine", 3), ("onLine", 4), ("onBackupPower", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCLineStatus.setStatus('current')
dockingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("docked", 3), ("notDocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dockingStatus.setStatus('current')
dmtfInfraredPortTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 4), )
if mibBuilder.loadTexts: dmtfInfraredPortTable.setStatus('current')
dmtfInfraredPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "iRIndex"))
if mibBuilder.loadTexts: dmtfInfraredPortEntry.setStatus('current')
dmtfInfraredPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfInfraredPortState.setStatus('current')
iRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRIndex.setStatus('current')
iRLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRLocation.setStatus('current')
iREnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iREnableState.setStatus('current')
iRLimitSpeedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRLimitSpeedEnable.setStatus('current')
iRSpeedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRSpeedLimit.setStatus('current')
iRPhysicalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 6), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRPhysicalPortName.setStatus('current')
iRVirtualCOMPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRVirtualCOMPortName.setStatus('current')
iRVirtualLPTPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 8), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRVirtualLPTPortName.setStatus('current')
iRProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("sIR", 3), ("fIR", 4), ("mIR", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRProtocol.setStatus('current')
dmtfPointingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 5), )
if mibBuilder.loadTexts: dmtfPointingDeviceTable.setStatus('current')
dmtfPointingDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfPointingDeviceEntry.setStatus('current')
pointingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("mouse", 3), ("trackBall", 4), ("trackPoint", 5), ("glidePoint", 6), ("touchPad", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceType.setStatus('current')
pointingDeviceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 160, 161, 162))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("serial", 3), ("pS2", 4), ("infrared", 5), ("hPHIL", 6), ("busMouse", 7), ("aDB", 8), ("busMouseDB9", 160), ("busMouseMicroDIN", 161), ("uSB", 162)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceInterface.setStatus('current')
pointingDeviceIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceIRQ.setStatus('current')
pointingDeviceButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceButtons.setStatus('current')
pointingDevicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 5), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDevicePortName.setStatus('current')
pointingDeviceDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 6), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceDriverName.setStatus('current')
pointingDeviceDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceDriverVersion.setStatus('current')
fRUGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndex.setStatus('current')
operationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndex.setStatus('current')
securitySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalInterfaceLockedOut", 4), ("externalInterfaceEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySettings.setStatus('current')
dmtfPortableBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 1), )
if mibBuilder.loadTexts: dmtfPortableBatteryTable.setStatus('current')
dmtfPortableBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "portableBatteryIndex"))
if mibBuilder.loadTexts: dmtfPortableBatteryEntry.setStatus('current')
dmtfPortableBatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfPortableBatteryState.setStatus('current')
portableBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryIndex.setStatus('current')
portableBatteryLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryLocation.setStatus('current')
portableBatteryManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryManufacturer.setStatus('current')
portableBatteryManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 4), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryManufactureDate.setStatus('current')
portableBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 5), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatterySerialNumber.setStatus('current')
portableBatteryDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 6), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDeviceName.setStatus('current')
portableBatteryDeviceChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("leadAcid", 3), ("nickelCadmium", 4), ("nickelMetalHydride", 5), ("lithiumIon", 6), ("zincAir", 7), ("lithiumPolymer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDeviceChemistry.setStatus('current')
portableBatteryDesignCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDesignCapacity.setStatus('current')
portableBatteryDesignVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDesignVoltage.setStatus('current')
smartBatteryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 10), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smartBatteryVersion.setStatus('current')
fullChargeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fullChargeCapacity.setStatus('current')
remainingCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remainingCapacity.setStatus('current')
maximumError = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumError.setStatus('current')
portableBatteryChargingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("high", 3), ("low", 4), ("critical", 5), ("charging", 6), ("chargingAndHigh", 7), ("chargingAndLow", 8), ("chargingAndCritical", 9), ("noSystemBattery", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryChargingStatus.setStatus('current')
remainingBatteryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remainingBatteryTime.setStatus('current')
remainingTimeToFullBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remainingTimeToFullBattery.setStatus('current')
powerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndex.setStatus('current')
dmtfPowerManagementBinaryAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 8), )
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationTable.setStatus('current')
dmtfPowerManagementBinaryAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "index"))
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationEntry.setStatus('current')
dmtfPowerManagementBinaryAssociationTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationTableState.setStatus('current')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index.setStatus('current')
type = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: type.setStatus('current')
ref1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ref1.setStatus('current')
ref2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ref2.setStatus('current')
dmtfPowerManagementTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 7), )
if mibBuilder.loadTexts: dmtfPowerManagementTable.setStatus('current')
dmtfPowerManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "PowerManagementEnabledDisabled"))
if mibBuilder.loadTexts: dmtfPowerManagementEntry.setStatus('current')
dmtfPowerManagementTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfPowerManagementTableState.setStatus('current')
powerManagementEnabledDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerManagementEnabledDisabled.setStatus('current')
currentPowerManagementState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("d0WorkingFullyON", 3), ("d1Sleeping", 4), ("d2NonVolatileSleepSoftOff", 5), ("d3OFF", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPowerManagementState.setStatus('current')
d1TimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d1TimerValue.setStatus('current')
d2TimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d2TimerValue.setStatus('current')
d3TimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3TimerValue.setStatus('current')
dmtfSystemPowerManagementTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 6), )
if mibBuilder.loadTexts: dmtfSystemPowerManagementTable.setStatus('current')
dmtfSystemPowerManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfSystemPowerManagementEntry.setStatus('current')
powerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("aPM11", 3), ("aPM12", 4), ("aCPI10", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerManagementCapabilities.setStatus('current')
reducedCPUClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reducedCPUClockSpeed.setStatus('current')
overrideAC = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overrideAC.setStatus('current')
ringEventResume = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringEventResume.setStatus('current')
alarmResume = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmResume.setStatus('current')
dmtfVideoOutputDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 3), )
if mibBuilder.loadTexts: dmtfVideoOutputDeviceTable.setStatus('current')
dmtfVideoOutputDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "index"))
if mibBuilder.loadTexts: dmtfVideoOutputDeviceEntry.setStatus('current')
dmtfVideoOutputDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfVideoOutputDeviceState.setStatus('current')
index2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index2.setStatus('current')
builtIn = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("yes", 3), ("no", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: builtIn.setStatus('current')
type2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("cRT", 3), ("tFT", 4), ("sTN", 5), ("dSTN", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: type2.setStatus('current')
colorSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("yes", 3), ("no", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colorSupport.setStatus('current')
brightness = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brightness.setStatus('current')
contrast = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contrast.setStatus('current')
videoGroupReference = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoGroupReference.setStatus('current')
dmtfPortableBatteryTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0))
dmtfPortableBatteryEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("system1", 3), ("system2", 4))))
if mibBuilder.loadTexts: dmtfPortableBatteryEvSys.setStatus('current')
dmtfPortableBatteryEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("subsystem1", 3), ("subsystem2", 4))))
if mibBuilder.loadTexts: dmtfPortableBatteryEvSub.setStatus('current')
dmtfPortableBatteryLowCombinedBatterysCharge = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0, 1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSys"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSub"))
if mibBuilder.loadTexts: dmtfPortableBatteryLowCombinedBatterysCharge.setStatus('current')
dmtfPortableBatteryCriticalCombinedBatterysCharge = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0, 2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSys"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSub"))
if mibBuilder.loadTexts: dmtfPortableBatteryCriticalCombinedBatterysCharge.setStatus('current')
dmtfPortableBatteryMaintenanceRequired = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0, 3)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSys"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSub"))
if mibBuilder.loadTexts: dmtfPortableBatteryMaintenanceRequired.setStatus('current')
mibBuilder.exportSymbols("DMTF-MOBILE-MIB", ringEventResume=ringEventResume, d3TimerValue=d3TimerValue, type=type, dmtfDeviceBayTable=dmtfDeviceBayTable, pointingDeviceDriverName=pointingDeviceDriverName, DmiGauge=DmiGauge, deviceBayLocation=deviceBayLocation, iRVirtualLPTPortName=iRVirtualLPTPortName, dmtfPowerManagementBinaryAssociationEntry=dmtfPowerManagementBinaryAssociationEntry, portableBatteryDeviceChemistry=portableBatteryDeviceChemistry, ref1=ref1, iRIndex=iRIndex, fRUGroupIndex=fRUGroupIndex, dmtfVideoOutputDeviceState=dmtfVideoOutputDeviceState, remainingCapacity=remainingCapacity, remainingBatteryTime=remainingBatteryTime, contrast=contrast, dmtfPortableBatteryEvSub=dmtfPortableBatteryEvSub, dmtfPortableBatteryTraps=dmtfPortableBatteryTraps, securitySettings=securitySettings, deviceBayIndex=deviceBayIndex, iRVirtualCOMPortName=iRVirtualCOMPortName, iRPhysicalPortName=iRPhysicalPortName, DmiCompId=DmiCompId, index=index, dmtfDeviceBayEntry=dmtfDeviceBayEntry, portableBatteryManufacturer=portableBatteryManufacturer, pointingDeviceButtons=pointingDeviceButtons, dmtfSystemPowerManagementEntry=dmtfSystemPowerManagementEntry, dmtfPowerManagementBinaryAssociationTable=dmtfPowerManagementBinaryAssociationTable, remainingTimeToFullBattery=remainingTimeToFullBattery, index2=index2, dmtfInfraredPortState=dmtfInfraredPortState, videoGroupReference=videoGroupReference, dockingStatus=dockingStatus, smartBatteryVersion=smartBatteryVersion, dmtfVideoOutputDeviceTable=dmtfVideoOutputDeviceTable, dmtfPowerManagementBinaryAssociationTableState=dmtfPowerManagementBinaryAssociationTableState, portableBatteryChargingStatus=portableBatteryChargingStatus, dmtfPointingDeviceTable=dmtfPointingDeviceTable, portableBatteryDeviceName=portableBatteryDeviceName, operationalGroupIndex=operationalGroupIndex, portableBatterySerialNumber=portableBatterySerialNumber, overrideAC=overrideAC, dmtfPortableBatteryLowCombinedBatterysCharge=dmtfPortableBatteryLowCombinedBatterysCharge, iRProtocol=iRProtocol, portableBatteryDesignVoltage=portableBatteryDesignVoltage, dmtfDynamicStatesTable=dmtfDynamicStatesTable, dmtfPowerManagementTableState=dmtfPowerManagementTableState, dmtfPortableBatteryMaintenanceRequired=dmtfPortableBatteryMaintenanceRequired, dmtfPortableBatteryCriticalCombinedBatterysCharge=dmtfPortableBatteryCriticalCombinedBatterysCharge, dmtfVideoOutputDeviceEntry=dmtfVideoOutputDeviceEntry, dmtfPowerManagementEntry=dmtfPowerManagementEntry, dmtfPortableBatteryEvSys=dmtfPortableBatteryEvSys, dmtfStdMifs=dmtfStdMifs, pointingDeviceInterface=pointingDeviceInterface, portableBatteryIndex=portableBatteryIndex, DmiCounter64=DmiCounter64, dmtfDynOids=dmtfDynOids, dmtfDynamicStatesEntry=dmtfDynamicStatesEntry, dmtfPowerManagementTable=dmtfPowerManagementTable, DmiGroupId=DmiGroupId, dmtfSystemPowerManagementTable=dmtfSystemPowerManagementTable, ref2=ref2, builtIn=builtIn, deviceBayType=deviceBayType, type2=type2, DmiOctetstring=DmiOctetstring, aCLineStatus=aCLineStatus, DmiCounter=DmiCounter, pointingDevicePortName=pointingDevicePortName, fullChargeCapacity=fullChargeCapacity, iREnableState=iREnableState, powerManagementEnabledDisabled=powerManagementEnabledDisabled, reducedCPUClockSpeed=reducedCPUClockSpeed, dmtf=dmtf, dmtfPortableBatteryTable=dmtfPortableBatteryTable, iRSpeedLimit=iRSpeedLimit, dmtfDeviceBayState=dmtfDeviceBayState, iRLocation=iRLocation, dmtfPortableBatteryEntry=dmtfPortableBatteryEntry, d1TimerValue=d1TimerValue, d2TimerValue=d2TimerValue, powerUnitIndex=powerUnitIndex, alarmResume=alarmResume, DmiInteger=DmiInteger, pointingDeviceType=pointingDeviceType, iRLimitSpeedEnable=iRLimitSpeedEnable, deviceCurrentlyAttached=deviceCurrentlyAttached, portableBatteryDesignCapacity=portableBatteryDesignCapacity, dmtfInfraredPortEntry=dmtfInfraredPortEntry, colorSupport=colorSupport, brightness=brightness, pointingDeviceDriverVersion=pointingDeviceDriverVersion, portableBatteryManufactureDate=portableBatteryManufactureDate, dmtfMobileComputerMIF=dmtfMobileComputerMIF, maximumError=maximumError, powerManagementCapabilities=powerManagementCapabilities, PYSNMP_MODULE_ID=dmtfMobileComputerMIF, dmtfPortableBatteryState=dmtfPortableBatteryState, portableBatteryLocation=portableBatteryLocation, currentPowerManagementState=currentPowerManagementState, dmtfPointingDeviceEntry=dmtfPointingDeviceEntry, devicesSupported=devicesSupported, pointingDeviceIRQ=pointingDeviceIRQ, dmtfInfraredPortTable=dmtfInfraredPortTable)
