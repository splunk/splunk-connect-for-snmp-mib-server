#
# PySNMP MIB module SCA-MPLINK2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCA-MPLINK2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:52:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, IpAddress, MibIdentifier, NotificationType, Counter64, Unsigned32, ObjectIdentity, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "IpAddress", "MibIdentifier", "NotificationType", "Counter64", "Unsigned32", "ObjectIdentity", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class OnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class Attachment(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("none", 1), ("tenbase-t", 2), ("aui", 3), ("id0", 4), ("id1", 5), ("id2", 6), ("id3", 7), ("eia530-dce", 8), ("test-plug", 9), ("v11-dce", 10), ("v24-dce", 11), ("v35-dce", 12), ("v36-dce", 13), ("eia530-dte", 14), ("v11-dte", 15), ("v24-dte", 16), ("v35-dte", 17), ("v36-dte", 18), ("empty", 19), ("isdn", 20), ("pcmcia-async", 21), ("isdn-e1-rj45", 22), ("isdn-e1-bnc", 23), ("isdn-t1-rj45", 24))

class CompType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("proprietary", 1), ("stac", 2))

class Direction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3))

class DataState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("down", 1), ("timeCut", 2), ("up", 3))

class ConnectState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("create", 1), ("down", 2), ("outgoingCall", 3), ("incomingCall", 4), ("incomingDisconnect", 5), ("outgoingDisconnect", 6), ("waitDisconnectConfirm", 7), ("error", 8), ("destroy", 9), ("timeCut", 10), ("idle", 11), ("up", 12), ("empty", 13))

mplk2 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44))
mpl2Service = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 1))
mpl2LanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 2))
mpl2WanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 3))
mpl2IfSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 4))
mpl2General = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 5))
mpl2ServiceTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 1, 1), )
if mibBuilder.loadTexts: mpl2ServiceTable.setStatus('mandatory')
mpl2ServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2ServiceNumber"))
if mibBuilder.loadTexts: mpl2ServiceEntry.setStatus('mandatory')
mpl2ServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceNumber.setStatus('mandatory')
mpl2ServiceSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceSlotNumber.setStatus('mandatory')
mpl2ServicePlugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServicePlugNumber.setStatus('mandatory')
mpl2ServicePlugName = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServicePlugName.setStatus('mandatory')
mpl2ServiceAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 5), Attachment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceAttachment.setStatus('mandatory')
mpl2ServiceProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16))).clone(namedValues=NamedValues(("lan", 1), ("lapbHdlc", 2), ("pppHdlc", 3), ("frHdlc", 4), ("frAttachment", 5), ("lapbIsdn", 6), ("pppIsdn", 7), ("isdnAttachment", 8), ("x25Lapb", 9), ("x25Attachment", 10), ("slip", 11), ("pppMultiMaster", 12), ("pppPcmciaModem", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceProvider.setStatus('mandatory')
mpl2ServiceBytesSentUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesSentUpper.setStatus('mandatory')
mpl2ServiceBytesSentLower = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesSentLower.setStatus('mandatory')
mpl2ServiceBytesReceivedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesReceivedUpper.setStatus('mandatory')
mpl2ServiceBytesReceivedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesReceivedLower.setStatus('mandatory')
mpl2ServiceLock = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 11), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpl2ServiceLock.setStatus('mandatory')
mpl2LanTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 2, 1), )
if mibBuilder.loadTexts: mpl2LanTable.setStatus('mandatory')
mpl2LanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2LanNumber"))
if mibBuilder.loadTexts: mpl2LanEntry.setStatus('mandatory')
mpl2LanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanNumber.setStatus('mandatory')
mpl2LanRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxCRCErrors.setStatus('mandatory')
mpl2LanRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxOverrun.setStatus('mandatory')
mpl2LanRxLong = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxLong.setStatus('mandatory')
mpl2LanRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxOverflow.setStatus('mandatory')
mpl2LanRxAlnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxAlnErrors.setStatus('mandatory')
mpl2LanRxOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxOuts.setStatus('mandatory')
mpl2LanRxShort = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxShort.setStatus('mandatory')
mpl2LanTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxDeferred.setStatus('mandatory')
mpl2LanTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxUnderrun.setStatus('mandatory')
mpl2LanTxSQEFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxSQEFailure.setStatus('mandatory')
mpl2LanTxExcDeferral = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxExcDeferral.setStatus('mandatory')
mpl2LanTxCollExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxCollExceed.setStatus('mandatory')
mpl2LanTxLateColl = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxLateColl.setStatus('mandatory')
mpl2LanTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxCollisions.setStatus('mandatory')
mpl2LanTxNoCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxNoCarrier.setStatus('mandatory')
mpl2WanTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 3, 1), )
if mibBuilder.loadTexts: mpl2WanTable.setStatus('mandatory')
mpl2WanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2WanNumber"))
if mibBuilder.loadTexts: mpl2WanEntry.setStatus('mandatory')
mpl2WanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanNumber.setStatus('mandatory')
mpl2WanDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 2), DataState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanDataState.setStatus('mandatory')
mpl2WanDataStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanDataStateTimer.setStatus('mandatory')
mpl2WanConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 4), ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanConnectState.setStatus('mandatory')
mpl2WanConnectStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanConnectStateTimer.setStatus('mandatory')
mpl2WanCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 6), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCompression.setStatus('mandatory')
mpl2WanCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 7), CompType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCompressionType.setStatus('mandatory')
mpl2WanCallsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsSucceeded.setStatus('mandatory')
mpl2WanCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsFailed.setStatus('mandatory')
mpl2WanCallsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsAccepted.setStatus('mandatory')
mpl2WanCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsRejected.setStatus('mandatory')
mpl2WanRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpl2WanRetries.setStatus('mandatory')
mpl2WanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 13), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanDirection.setStatus('mandatory')
mpl2WanHasBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 14), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanHasBackup.setStatus('mandatory')
mpl2WanBackupFor = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanBackupFor.setStatus('mandatory')
mpl2WanBackupForAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 16), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanBackupForAttachment.setStatus('mandatory')
mpl2WanIsSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 17), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanIsSlave.setStatus('mandatory')
mpl2WanPppMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanPppMaster.setStatus('mandatory')
mpl2WanPppSlaveUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanPppSlaveUpCount.setStatus('mandatory')
mpl2WanActivityTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanActivityTimeLeft.setStatus('mandatory')
mpl2WanActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 21), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpl2WanActivity.setStatus('mandatory')
mpl2WanTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 22), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanTimer.setStatus('mandatory')
mpl2IfStackTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 4, 1), )
if mibBuilder.loadTexts: mpl2IfStackTable.setStatus('mandatory')
mpl2IfStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 4, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2IfStackNumber"))
if mibBuilder.loadTexts: mpl2IfStackEntry.setStatus('mandatory')
mpl2IfStackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2IfStackNumber.setStatus('mandatory')
mpl2IfStackLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2IfStackLowerLayer.setStatus('mandatory')
mpl2GeneralOverviewChange = MibScalar((1, 3, 6, 1, 4, 1, 208, 44, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2GeneralOverviewChange.setStatus('mandatory')
mpl2LockEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,1)).setObjects(("SCA-MPLINK2-MIB", "mpl2ServiceNumber"), ("SCA-MPLINK2-MIB", "mpl2ServiceLock"))
mpl2WanRetriesEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,2)).setObjects(("SCA-MPLINK2-MIB", "mpl2WanNumber"), ("SCA-MPLINK2-MIB", "mpl2WanRetries"))
mpl2WanActivityEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,3)).setObjects(("SCA-MPLINK2-MIB", "mpl2WanNumber"), ("SCA-MPLINK2-MIB", "mpl2WanActivity"))
mpl2WanTimerEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,4)).setObjects(("SCA-MPLINK2-MIB", "mpl2WanNumber"), ("SCA-MPLINK2-MIB", "mpl2WanTimer"))
mibBuilder.exportSymbols("SCA-MPLINK2-MIB", DataState=DataState, mpl2ServiceLock=mpl2ServiceLock, mpl2WanDataState=mpl2WanDataState, mpl2WanCompressionType=mpl2WanCompressionType, mpl2LanRxAlnErrors=mpl2LanRxAlnErrors, mpl2ServicePlugName=mpl2ServicePlugName, mpl2LanRxOuts=mpl2LanRxOuts, mpl2WanIsSlave=mpl2WanIsSlave, mpl2IfStackEntry=mpl2IfStackEntry, mpl2GeneralOverviewChange=mpl2GeneralOverviewChange, mpl2LanTxExcDeferral=mpl2LanTxExcDeferral, mpl2ServiceBytesSentUpper=mpl2ServiceBytesSentUpper, mpl2LanRxShort=mpl2LanRxShort, mpl2WanActivityTimeLeft=mpl2WanActivityTimeLeft, mpl2WanRetriesEvent=mpl2WanRetriesEvent, mpl2LanTable=mpl2LanTable, mpl2Service=mpl2Service, mpl2WanTable=mpl2WanTable, mpl2WanBackupForAttachment=mpl2WanBackupForAttachment, mpl2WanCallsRejected=mpl2WanCallsRejected, mpl2LanTxUnderrun=mpl2LanTxUnderrun, mpl2ServiceAttachment=mpl2ServiceAttachment, mpl2LanNumber=mpl2LanNumber, mpl2WanCallsFailed=mpl2WanCallsFailed, mpl2WanSpecific=mpl2WanSpecific, mpl2IfSpecific=mpl2IfSpecific, mpl2ServiceNumber=mpl2ServiceNumber, mpl2ServiceBytesReceivedLower=mpl2ServiceBytesReceivedLower, mpl2WanConnectState=mpl2WanConnectState, mpl2WanHasBackup=mpl2WanHasBackup, mpl2WanPppMaster=mpl2WanPppMaster, mpl2WanTimerEvent=mpl2WanTimerEvent, mpl2General=mpl2General, mpl2IfStackLowerLayer=mpl2IfStackLowerLayer, mpl2LanTxNoCarrier=mpl2LanTxNoCarrier, mpl2WanDirection=mpl2WanDirection, mpl2ServiceBytesReceivedUpper=mpl2ServiceBytesReceivedUpper, mpl2LanTxSQEFailure=mpl2LanTxSQEFailure, mpl2LanTxCollExceed=mpl2LanTxCollExceed, Direction=Direction, OnOff=OnOff, mpl2LanTxDeferred=mpl2LanTxDeferred, mpl2LanEntry=mpl2LanEntry, mpl2WanCompression=mpl2WanCompression, mpl2ServiceSlotNumber=mpl2ServiceSlotNumber, mpl2ServiceTable=mpl2ServiceTable, CompType=CompType, mpl2LanRxOverflow=mpl2LanRxOverflow, mpl2LanTxLateColl=mpl2LanTxLateColl, mpl2LockEvent=mpl2LockEvent, mpl2WanNumber=mpl2WanNumber, mpl2ServiceProvider=mpl2ServiceProvider, mpl2WanCallsSucceeded=mpl2WanCallsSucceeded, mpl2WanEntry=mpl2WanEntry, mpl2LanRxOverrun=mpl2LanRxOverrun, mpl2IfStackNumber=mpl2IfStackNumber, mpl2WanBackupFor=mpl2WanBackupFor, mpl2ServiceBytesSentLower=mpl2ServiceBytesSentLower, mpl2ServiceEntry=mpl2ServiceEntry, mpl2LanTxCollisions=mpl2LanTxCollisions, mpl2LanSpecific=mpl2LanSpecific, mpl2LanRxLong=mpl2LanRxLong, mpl2LanRxCRCErrors=mpl2LanRxCRCErrors, Attachment=Attachment, mplk2=mplk2, mpl2WanCallsAccepted=mpl2WanCallsAccepted, mpl2WanRetries=mpl2WanRetries, mpl2WanPppSlaveUpCount=mpl2WanPppSlaveUpCount, mpl2WanConnectStateTimer=mpl2WanConnectStateTimer, mpl2ServicePlugNumber=mpl2ServicePlugNumber, mpl2IfStackTable=mpl2IfStackTable, mpl2WanActivityEvent=mpl2WanActivityEvent, mpl2WanTimer=mpl2WanTimer, mpl2WanDataStateTimer=mpl2WanDataStateTimer, ConnectState=ConnectState, mpl2WanActivity=mpl2WanActivity)
