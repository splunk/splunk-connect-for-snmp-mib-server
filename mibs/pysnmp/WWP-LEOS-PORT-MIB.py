#
# PySNMP MIB module WWP-LEOS-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-PORT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:31:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
dot3adAggPortListPorts, dot3adAggPortActorAdminKey = mibBuilder.importSymbols("IEEE8023-LAG-MIB", "dot3adAggPortListPorts", "dot3adAggPortActorAdminKey")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysLocation, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName")
iso, Counter64, MibIdentifier, TimeTicks, Gauge32, Integer32, ObjectIdentity, ModuleIdentity, Unsigned32, Counter32, NotificationType, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "MibIdentifier", "TimeTicks", "Gauge32", "Integer32", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Counter32", "NotificationType", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "MacAddress")
wwpModules, wwpModulesLeos = mibBuilder.importSymbols("WWP-SMI", "wwpModules", "wwpModulesLeos")
wwpLeosPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2))
wwpLeosPortMIB.setRevisions(('2012-05-25 00:00', '2011-02-02 00:00', '2010-11-01 00:00', '2010-07-28 00:00', '2010-05-05 17:00', '2008-11-14 00:00', '2008-07-21 00:00', '2007-08-11 00:00', '2007-06-20 00:00', '2006-05-26 00:00', '2006-05-18 00:00', '2006-03-15 00:00', '2005-07-28 00:00', '2004-04-18 17:00',))
if mibBuilder.loadTexts: wwpLeosPortMIB.setLastUpdated('201205250000Z')
if mibBuilder.loadTexts: wwpLeosPortMIB.setOrganization('Ciena, Inc')
class PortList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class PortEgressFrameCosPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingore", 1), ("rcosToL2OuterPcpMap", 2))

class PortIngressFixedColor(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("green", 1), ("yellow", 2))

wwpLeosPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1))
wwpLeosEtherPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1))
wwpLeosEtherPortNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2))
wwpLeosPortMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2))
wwpLeosPortMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0))
wwpLeosPortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 3))
wwpLeosPortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 3, 1))
wwpLeosPortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 3, 2))
wwpLeosEtherPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1), )
if mibBuilder.loadTexts: wwpLeosEtherPortTable.setStatus('current')
wwpLeosEtherPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortEntry.setStatus('current')
wwpLeosEtherPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortId.setStatus('current')
wwpLeosEtherPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortName.setStatus('current')
wwpLeosEtherPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortDesc.setStatus('current')
wwpLeosEtherPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ethernet", 1), ("fastEthernet", 2), ("hundredFx", 3), ("gigEthernet", 4), ("lagPort", 5), ("unknown", 6), ("gigHundredFx", 7), ("tripleSpeed", 8), ("tenGigEthernet", 9), ("gigTenGigEthernet", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortType.setStatus('current')
wwpLeosEtherPortPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortPhysAddr.setStatus('current')
wwpLeosEtherPortAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAutoNeg.setStatus('current')
wwpLeosEtherPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminStatus.setStatus('current')
wwpLeosEtherPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notauth", 3), ("lbtx", 4), ("lbrx", 5), ("linkflap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperStatus.setStatus('current')
wwpLeosEtherPortAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tenMb", 1), ("hundredMb", 2), ("gig", 3), ("auto", 4), ("tenGig", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminSpeed.setStatus('current')
wwpLeosEtherPortOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("tenMb", 1), ("hundredMb", 2), ("gig", 3), ("tenGig", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperSpeed.setStatus('deprecated')
wwpLeosEtherPortAdminDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminDuplex.setStatus('current')
wwpLeosEtherPortOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperDuplex.setStatus('current')
wwpLeosEtherPortAdminFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("asymTx", 3), ("asymRx", 4), ("sym", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminFlowCtrl.setStatus('current')
wwpLeosEtherPortOperFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("asymTx", 3), ("asymRx", 4), ("sym", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperFlowCtrl.setStatus('current')
wwpLeosEtherIngressPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherIngressPvid.setStatus('current')
wwpLeosEtherUntagEgressVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherUntagEgressVlanId.setStatus('current')
wwpLeosEtherPortAcceptableFrameTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admitAll", 1), ("admitOnlyVlanTagged", 2), ("admitOnlyUntagged", 3))).clone('admitAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAcceptableFrameTypes.setStatus('current')
wwpLeosEtherPortUntaggedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntaggedPriority.setStatus('deprecated')
wwpLeosEtherPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1522, 9216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMaxFrameSize.setStatus('current')
wwpLeosEtherPortVlanIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortVlanIngressFiltering.setStatus('current')
wwpLeosEtherPortAdminAdvertisedFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("asymTx", 3), ("sym", 4), ("symAsymRx", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminAdvertisedFlowCtrl.setStatus('current')
wwpLeosEtherPortVplsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDefined", 1), ("subscriber", 2), ("networkFacing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortVplsPortType.setStatus('current')
wwpLeosEtherPortIngressCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("leave", 1), ("fixed", 2), ("ippInherit", 3), ("phbgInherit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortIngressCosPolicy.setStatus('current')
wwpLeosEtherPortIngressFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortIngressFixedDot1dPri.setStatus('current')
wwpLeosEtherPortUntagDataVsi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVsi.setStatus('current')
wwpLeosEtherPortOperationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 26), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperationalSpeed.setStatus('current')
wwpLeosEtherPortUntagCtrlVsi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagCtrlVsi.setStatus('current')
wwpLeosEtherPortMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorPort.setStatus('current')
wwpLeosEtherPortMirrorIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorIngress.setStatus('current')
wwpLeosEtherPortMirrorEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEgress.setStatus('current')
wwpLeosEtherPortUntagDataVsiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("mpls", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVsiType.setStatus('current')
wwpLeosEtherPortUntagCtrlVsiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("mpls", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagCtrlVsiType.setStatus('current')
wwpLeosEtherPortVsIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortVsIngressFiltering.setStatus('current')
wwpLeosEtherPortOperAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperAutoNeg.setStatus('current')
wwpLeosEtherPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 35), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortUpTime.setStatus('current')
wwpLeosEtherPortUntagDataVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVid.setStatus('current')
wwpLeosEtherPortPhyLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 37), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortPhyLoopback.setStatus('current')
wwpLeosEtherPortVlanIngressFilterStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortVlanIngressFilterStrict.setStatus('current')
wwpLeosEtherPortMacSaDaSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMacSaDaSwap.setStatus('current')
wwpLeosEtherPortMacSaDaSwapVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMacSaDaSwapVlan.setStatus('current')
wwpLeosEtherPortResolvedCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("dot1d", 1), ("l3DscpCos", 2), ("fixedCos", 3), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosPolicy.setStatus('current')
wwpLeosEtherPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("rj45", 1), ("sfp", 2), ("default", 3), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMode.setStatus('current')
wwpLeosEtherFixedRcos = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherFixedRcos.setStatus('current')
wwpLeosEtherPortEgressPortQueueMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortEgressPortQueueMapId.setStatus('current')
wwpLeosEtherPortResolvedCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosMapId.setStatus('current')
wwpLeosEtherPortResolvedCosRemarkL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosRemarkL2.setStatus('current')
wwpLeosEtherPortL2TransformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("iPush-e-Pop", 1), ("iStamp-Push-e-QualifiedPopStamp", 2), ("iPush-e-PopStamp", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortL2TransformMode.setStatus('current')
wwpLeosEtherPortLinkFlapDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 48), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapDetection.setStatus('current')
wwpLeosEtherPortLinkFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapCount.setStatus('current')
wwpLeosEtherPortLinkFlapDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapDetectTime.setStatus('current')
wwpLeosEtherPortLinkFlapHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapHoldTime.setStatus('current')
wwpLeosEtherFixedRColor = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 52), PortIngressFixedColor().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherFixedRColor.setStatus('current')
wwpLeosEtherPortFrameCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortFrameCosMapId.setStatus('current')
wwpLeosEtherPortEgressCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 54), PortEgressFrameCosPolicy().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortEgressCosPolicy.setStatus('current')
wwpLeosEtherPortEgressSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 55), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortEgressSpeed.setStatus('current')
wwpLeosEtherPortAdaptiveRateSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 56), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortAdaptiveRateSpeed.setStatus('current')
wwpLeosEtherPortMirrorEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("vlanTag", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncap.setStatus('current')
wwpLeosEtherPortMirrorEncapVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncapVid.setStatus('current')
wwpLeosEtherPortMirrorEncapTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tpid8100", 1), ("tpid9100", 2), ("tpid88A8", 3))).clone('tpid8100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncapTpid.setStatus('current')
wwpLeosEtherPortIfgDecrease = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortIfgDecrease.setStatus('current')
wwpLeosEtherPortAdvertSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-applicable", 1), ("ten", 2), ("hundred", 3), ("gigabit", 4), ("ten-hundred-gigabit", 5))).clone('ten-hundred-gigabit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdvertSpeed.setStatus('current')
wwpLeosEtherPortAdvertDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("half", 2), ("full", 3), ("half-full", 4))).clone('half-full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdvertDuplex.setStatus('current')
wwpLeosEtherPortFlushTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosEtherPortFlushTable.setStatus('current')
wwpLeosEtherPortFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortFlushEntry.setStatus('current')
wwpLeosEtherPortFlushActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortFlushActivate.setStatus('current')
wwpLeosEtherPortTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsTable.setStatus('current')
wwpLeosEtherPortTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsEntry.setStatus('current')
wwpLeosEtherPortTrapsState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsState.setStatus('current')
wwpLeosEtherPortStateMirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupTable.setStatus('current')
wwpLeosEtherPortStateMirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortStateMirrorGroupId"))
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupEntry.setStatus('current')
wwpLeosEtherPortStateMirrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupId.setStatus('current')
wwpLeosEtherPortStateMirrorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupName.setStatus('current')
wwpLeosEtherPortStateMirrorGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupOperStatus.setStatus('current')
wwpLeosEtherPortStateMirrorGroupNumSrcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupNumSrcPorts.setStatus('current')
wwpLeosEtherPortStateMirrorGroupNumDstPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupNumDstPorts.setStatus('current')
wwpLeosEtherPortStateMirrorGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupStatus.setStatus('current')
wwpLeosEtherPortStateMirrorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupType.setStatus('current')
wwpLeosEtherPortStateMirrorGroupMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemTable.setStatus('current')
wwpLeosEtherPortStateMirrorGroupMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortStateMirrorGroupId"), (0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemEntry.setStatus('current')
wwpLeosEtherPortStateMirrorGroupMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("srcPort", 1), ("dstPort", 2))).clone('srcPort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemType.setStatus('current')
wwpLeosEtherPortStateMirrorGroupMemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemOperState.setStatus('current')
wwpLeosEtherPortStateMirrorGroupMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemStatus.setStatus('current')
wwpLeosEtherStndLinkUpDownTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherStndLinkUpDownTrapsEnable.setStatus('current')
wwpLeosEtherPortLinkUpDownTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkUpDownTrapsEnable.setStatus('current')
wwpLeosEtherAggPortLinkUpDownTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherAggPortLinkUpDownTrapsEnable.setStatus('current')
wwpLeosEthLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 3)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortAdminStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"))
if mibBuilder.loadTexts: wwpLeosEthLinkUp.setStatus('current')
wwpLeosEthLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 4)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortAdminStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"))
if mibBuilder.loadTexts: wwpLeosEthLinkDown.setStatus('current')
wwpLeosEthAdminSpeedIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 5)).setObjects(("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEthAdminSpeedIncompatible.setStatus('current')
wwpLeosEthLinkFlap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 6)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortLinkFlapHoldTime"))
if mibBuilder.loadTexts: wwpLeosEthLinkFlap.setStatus('current')
wwpLeosAggLinkUpDown = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 7)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortAdminStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorAdminKey"), ("IEEE8023-LAG-MIB", "dot3adAggPortListPorts"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"))
if mibBuilder.loadTexts: wwpLeosAggLinkUpDown.setStatus('current')
mibBuilder.exportSymbols("WWP-LEOS-PORT-MIB", wwpLeosEtherPortMirrorEncap=wwpLeosEtherPortMirrorEncap, wwpLeosEtherPortStateMirrorGroupMemType=wwpLeosEtherPortStateMirrorGroupMemType, wwpLeosEtherPortAcceptableFrameTypes=wwpLeosEtherPortAcceptableFrameTypes, wwpLeosAggLinkUpDown=wwpLeosAggLinkUpDown, wwpLeosEtherPortResolvedCosRemarkL2=wwpLeosEtherPortResolvedCosRemarkL2, wwpLeosEtherPortStateMirrorGroupMemStatus=wwpLeosEtherPortStateMirrorGroupMemStatus, wwpLeosEtherPortUntagCtrlVsi=wwpLeosEtherPortUntagCtrlVsi, wwpLeosEtherPortEntry=wwpLeosEtherPortEntry, wwpLeosEtherPortOperDuplex=wwpLeosEtherPortOperDuplex, wwpLeosEtherPortResolvedCosPolicy=wwpLeosEtherPortResolvedCosPolicy, PortIngressFixedColor=PortIngressFixedColor, wwpLeosEtherPortUpTime=wwpLeosEtherPortUpTime, wwpLeosEtherPortMirrorEgress=wwpLeosEtherPortMirrorEgress, wwpLeosEtherAggPortLinkUpDownTrapsEnable=wwpLeosEtherAggPortLinkUpDownTrapsEnable, wwpLeosEtherPortVplsPortType=wwpLeosEtherPortVplsPortType, wwpLeosEtherPortUntagDataVsiType=wwpLeosEtherPortUntagDataVsiType, wwpLeosEtherPortEgressCosPolicy=wwpLeosEtherPortEgressCosPolicy, wwpLeosEtherPortEgressSpeed=wwpLeosEtherPortEgressSpeed, wwpLeosEtherPortIngressFixedDot1dPri=wwpLeosEtherPortIngressFixedDot1dPri, wwpLeosEtherPortStateMirrorGroupMemOperState=wwpLeosEtherPortStateMirrorGroupMemOperState, wwpLeosPortMIB=wwpLeosPortMIB, wwpLeosEtherPortStateMirrorGroupMemTable=wwpLeosEtherPortStateMirrorGroupMemTable, wwpLeosEtherPortAdminFlowCtrl=wwpLeosEtherPortAdminFlowCtrl, wwpLeosEtherPortAdvertSpeed=wwpLeosEtherPortAdvertSpeed, wwpLeosEtherPortTable=wwpLeosEtherPortTable, wwpLeosPortMIBGroups=wwpLeosPortMIBGroups, wwpLeosEtherPortPhyLoopback=wwpLeosEtherPortPhyLoopback, PortList=PortList, wwpLeosEtherPortVlanIngressFiltering=wwpLeosEtherPortVlanIngressFiltering, wwpLeosPortMIBNotificationPrefix=wwpLeosPortMIBNotificationPrefix, wwpLeosEtherPortTrapsState=wwpLeosEtherPortTrapsState, wwpLeosEtherPortMirrorPort=wwpLeosEtherPortMirrorPort, wwpLeosEtherPortStateMirrorGroupNumDstPorts=wwpLeosEtherPortStateMirrorGroupNumDstPorts, wwpLeosEtherPortFlushTable=wwpLeosEtherPortFlushTable, wwpLeosEtherPortStateMirrorGroupStatus=wwpLeosEtherPortStateMirrorGroupStatus, wwpLeosEtherPortStateMirrorGroupId=wwpLeosEtherPortStateMirrorGroupId, wwpLeosEtherUntagEgressVlanId=wwpLeosEtherUntagEgressVlanId, wwpLeosEtherPortIfgDecrease=wwpLeosEtherPortIfgDecrease, wwpLeosEtherPortNotif=wwpLeosEtherPortNotif, wwpLeosEtherPortAdminSpeed=wwpLeosEtherPortAdminSpeed, wwpLeosEtherPortAdvertDuplex=wwpLeosEtherPortAdvertDuplex, wwpLeosEtherPortFlushActivate=wwpLeosEtherPortFlushActivate, wwpLeosEtherPortLinkUpDownTrapsEnable=wwpLeosEtherPortLinkUpDownTrapsEnable, wwpLeosEtherPortFrameCosMapId=wwpLeosEtherPortFrameCosMapId, wwpLeosEtherPortStateMirrorGroupNumSrcPorts=wwpLeosEtherPortStateMirrorGroupNumSrcPorts, wwpLeosEtherPortOperFlowCtrl=wwpLeosEtherPortOperFlowCtrl, wwpLeosEtherFixedRColor=wwpLeosEtherFixedRColor, wwpLeosEtherPortAutoNeg=wwpLeosEtherPortAutoNeg, wwpLeosEtherPortStateMirrorGroupEntry=wwpLeosEtherPortStateMirrorGroupEntry, wwpLeosEtherPortPhysAddr=wwpLeosEtherPortPhysAddr, wwpLeosEtherPortMacSaDaSwapVlan=wwpLeosEtherPortMacSaDaSwapVlan, wwpLeosEtherPortOperationalSpeed=wwpLeosEtherPortOperationalSpeed, wwpLeosEtherPortUntaggedPriority=wwpLeosEtherPortUntaggedPriority, wwpLeosEtherPortMode=wwpLeosEtherPortMode, wwpLeosEtherPortStateMirrorGroupType=wwpLeosEtherPortStateMirrorGroupType, wwpLeosEtherPortUntagDataVid=wwpLeosEtherPortUntagDataVid, wwpLeosEtherPortFlushEntry=wwpLeosEtherPortFlushEntry, wwpLeosEtherPortStateMirrorGroupOperStatus=wwpLeosEtherPortStateMirrorGroupOperStatus, wwpLeosEtherPortId=wwpLeosEtherPortId, wwpLeosEtherPortVlanIngressFilterStrict=wwpLeosEtherPortVlanIngressFilterStrict, wwpLeosEtherPortAdaptiveRateSpeed=wwpLeosEtherPortAdaptiveRateSpeed, wwpLeosEtherPortIngressCosPolicy=wwpLeosEtherPortIngressCosPolicy, wwpLeosEtherPortOperSpeed=wwpLeosEtherPortOperSpeed, wwpLeosEthLinkDown=wwpLeosEthLinkDown, wwpLeosEtherPortDesc=wwpLeosEtherPortDesc, PYSNMP_MODULE_ID=wwpLeosPortMIB, wwpLeosEtherPortTrapsEntry=wwpLeosEtherPortTrapsEntry, wwpLeosEtherIngressPvid=wwpLeosEtherIngressPvid, wwpLeosEtherPortStateMirrorGroupTable=wwpLeosEtherPortStateMirrorGroupTable, wwpLeosEtherPort=wwpLeosEtherPort, wwpLeosEthLinkFlap=wwpLeosEthLinkFlap, wwpLeosEtherPortMirrorIngress=wwpLeosEtherPortMirrorIngress, wwpLeosEtherPortName=wwpLeosEtherPortName, wwpLeosEtherPortStateMirrorGroupMemEntry=wwpLeosEtherPortStateMirrorGroupMemEntry, wwpLeosPortMIBConformance=wwpLeosPortMIBConformance, wwpLeosEthAdminSpeedIncompatible=wwpLeosEthAdminSpeedIncompatible, wwpLeosEtherPortMaxFrameSize=wwpLeosEtherPortMaxFrameSize, wwpLeosEtherPortOperStatus=wwpLeosEtherPortOperStatus, wwpLeosEtherPortMirrorEncapTpid=wwpLeosEtherPortMirrorEncapTpid, wwpLeosEthLinkUp=wwpLeosEthLinkUp, wwpLeosEtherPortVsIngressFiltering=wwpLeosEtherPortVsIngressFiltering, wwpLeosEtherPortLinkFlapDetection=wwpLeosEtherPortLinkFlapDetection, wwpLeosEtherPortEgressPortQueueMapId=wwpLeosEtherPortEgressPortQueueMapId, wwpLeosPortMIBNotifications=wwpLeosPortMIBNotifications, wwpLeosEtherPortLinkFlapCount=wwpLeosEtherPortLinkFlapCount, wwpLeosEtherPortType=wwpLeosEtherPortType, wwpLeosEtherPortUntagDataVsi=wwpLeosEtherPortUntagDataVsi, wwpLeosEtherStndLinkUpDownTrapsEnable=wwpLeosEtherStndLinkUpDownTrapsEnable, wwpLeosEtherPortOperAutoNeg=wwpLeosEtherPortOperAutoNeg, PortEgressFrameCosPolicy=PortEgressFrameCosPolicy, wwpLeosPortMIBCompliances=wwpLeosPortMIBCompliances, wwpLeosEtherPortAdminAdvertisedFlowCtrl=wwpLeosEtherPortAdminAdvertisedFlowCtrl, wwpLeosEtherPortResolvedCosMapId=wwpLeosEtherPortResolvedCosMapId, wwpLeosEtherPortLinkFlapHoldTime=wwpLeosEtherPortLinkFlapHoldTime, wwpLeosEtherPortL2TransformMode=wwpLeosEtherPortL2TransformMode, wwpLeosEtherPortTrapsTable=wwpLeosEtherPortTrapsTable, wwpLeosEtherFixedRcos=wwpLeosEtherFixedRcos, wwpLeosPortMIBObjects=wwpLeosPortMIBObjects, wwpLeosEtherPortStateMirrorGroupName=wwpLeosEtherPortStateMirrorGroupName, wwpLeosEtherPortAdminDuplex=wwpLeosEtherPortAdminDuplex, wwpLeosEtherPortUntagCtrlVsiType=wwpLeosEtherPortUntagCtrlVsiType, wwpLeosEtherPortLinkFlapDetectTime=wwpLeosEtherPortLinkFlapDetectTime, wwpLeosEtherPortAdminStatus=wwpLeosEtherPortAdminStatus, wwpLeosEtherPortMirrorEncapVid=wwpLeosEtherPortMirrorEncapVid, wwpLeosEtherPortMacSaDaSwap=wwpLeosEtherPortMacSaDaSwap)
