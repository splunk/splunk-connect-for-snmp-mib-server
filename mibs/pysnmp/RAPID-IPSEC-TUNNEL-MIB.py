#
# PySNMP MIB module RAPID-IPSEC-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAPID-IPSEC-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:43:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
rapidstream, = mibBuilder.importSymbols("RAPID-MIB", "rapidstream")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, TimeTicks, ModuleIdentity, NotificationType, Integer32, Gauge32, enterprises, IpAddress, Counter32, Counter64, Unsigned32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "TimeTicks", "ModuleIdentity", "NotificationType", "Integer32", "Gauge32", "enterprises", "IpAddress", "Counter32", "Counter64", "Unsigned32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
rsInfoModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 4355, 6))
rsInfoModule.setRevisions(('2001-04-20 12:00', '2002-11-01 12:00',))
if mibBuilder.loadTexts: rsInfoModule.setLastUpdated('0103061200Z')
if mibBuilder.loadTexts: rsInfoModule.setOrganization('WatchGuard Technologies, Inc.')
rsIpsecTunnelMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 6, 5))
if mibBuilder.loadTexts: rsIpsecTunnelMIB.setStatus('current')
rsIpsecTunnel = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1))
if mibBuilder.loadTexts: rsIpsecTunnel.setStatus('current')
rsIpsecTunnelNum = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelNum.setStatus('current')
rsIpsecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2), )
if mibBuilder.loadTexts: rsIpsecTunnelTable.setStatus('current')
rsIpsecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1), ).setIndexNames((0, "RAPID-IPSEC-TUNNEL-MIB", "rsIpsecTunnelID"))
if mibBuilder.loadTexts: rsIpsecTunnelEntry.setStatus('current')
rsIpsecTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelID.setStatus('current')
rsIpsecTunnelLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelLocalAddr.setStatus('current')
rsIpsecTunnelPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelPeerAddr.setStatus('current')
rsIpsecTunnelInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInSpi.setStatus('current')
rsIpsecTunnelOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutSpi.setStatus('current')
rsIpsecTunnelCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelCreateTime.setStatus('current')
rsIpsecTunnelDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelDeviceID.setStatus('current')
rsIpsecTunnelEspEncryptAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("des", 2), ("three-des", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelEspEncryptAlg.setStatus('current')
rsIpsecTunnelEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("md5", 2), ("sha", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelEspAuthAlg.setStatus('current')
rsIpsecTunnelAhAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("md5", 2), ("sha", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelAhAuthAlg.setStatus('current')
rsIpsecTunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelMode.setStatus('current')
rsIpsecTunnelKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("manual", 1), ("auto-ike", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelKeyMode.setStatus('current')
rsIpsecTunnelLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelLifeTime.setStatus('current')
rsIpsecTunnelLifeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelLifeLength.setStatus('current')
rsIpsecTunnelInSaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInSaBytes.setStatus('current')
rsIpsecTunnelOutSaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutSaBytes.setStatus('current')
rsIpsecTunnelAccSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelAccSecs.setStatus('current')
rsIpsecTunnelSelectorProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 8, 12, 17, 22, 29, 41, 43, 44, 46, 47, 50, 51, 58, 59, 60, 92, 98, 103, 255))).clone(namedValues=NamedValues(("any", 0), ("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("tp", 29), ("ipv6", 41), ("ipv6-routing", 43), ("ipv6-fragmentation", 44), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("icmpv6", 58), ("none", 59), ("dstopts", 60), ("mtp", 92), ("encap", 98), ("pim", 103), ("raw", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorProtocol.setStatus('current')
rsIpsecTunnelSelectorRemoteIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-addr-single", 1), ("ip-addr-subnet", 2), ("ip-addr-range", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorRemoteIPType.setStatus('current')
rsIpsecTunnelSelectorRemoteIPOne = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorRemoteIPOne.setStatus('current')
rsIpsecTunnelSelectorRemoteIPTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorRemoteIPTwo.setStatus('current')
rsIpsecTunnelSelectorRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorRemotePort.setStatus('current')
rsIpsecTunnelSelectorLocalIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-addr-single", 1), ("ip-addr-subnet", 2), ("ip-addr-range", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorLocalIPType.setStatus('current')
rsIpsecTunnelSelectorLocalIPOne = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorLocalIPOne.setStatus('current')
rsIpsecTunnelSelectorLocalIPTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorLocalIPTwo.setStatus('current')
rsIpsecTunnelSelectorLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelSelectorLocalPort.setStatus('current')
rsIpsecTunnelNumRekey = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelNumRekey.setStatus('current')
rsIpsecTunnelInKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 28), Counter32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInKbytes.setStatus('current')
rsIpsecTunnelOutKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 29), Counter32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutKbytes.setStatus('current')
rsIpsecTunnelInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInPackets.setStatus('current')
rsIpsecTunnelOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutPackets.setStatus('current')
rsIpsecTunnelInDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInDecryptErrors.setStatus('current')
rsIpsecTunnelInAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInAuthErrors.setStatus('current')
rsIpsecTunnelInReplayErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInReplayErrors.setStatus('current')
rsIpsecTunnelInOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelInOtherErrors.setStatus('current')
rsIpsecTunnelOutDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutDecryptErrors.setStatus('current')
rsIpsecTunnelOutAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutAuthErrors.setStatus('current')
rsIpsecTunnelOutReplayErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutReplayErrors.setStatus('current')
rsIpsecTunnelOutOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOutOtherErrors.setStatus('current')
rsIpsecTunnelUdpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelUdpEncap.setStatus('current')
rsIpsecTunnelPeerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelPeerUdpPort.setStatus('current')
rsIpsecTunnelOrigPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 5, 1, 2, 1, 42), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpsecTunnelOrigPeerAddr.setStatus('current')
mibBuilder.exportSymbols("RAPID-IPSEC-TUNNEL-MIB", rsIpsecTunnelAccSecs=rsIpsecTunnelAccSecs, rsIpsecTunnelEspAuthAlg=rsIpsecTunnelEspAuthAlg, rsIpsecTunnelPeerAddr=rsIpsecTunnelPeerAddr, rsIpsecTunnelOutPackets=rsIpsecTunnelOutPackets, rsIpsecTunnelEspEncryptAlg=rsIpsecTunnelEspEncryptAlg, rsIpsecTunnelSelectorRemoteIPOne=rsIpsecTunnelSelectorRemoteIPOne, rsInfoModule=rsInfoModule, rsIpsecTunnelMIB=rsIpsecTunnelMIB, rsIpsecTunnelLocalAddr=rsIpsecTunnelLocalAddr, rsIpsecTunnelInReplayErrors=rsIpsecTunnelInReplayErrors, rsIpsecTunnelOutReplayErrors=rsIpsecTunnelOutReplayErrors, rsIpsecTunnelSelectorLocalIPTwo=rsIpsecTunnelSelectorLocalIPTwo, rsIpsecTunnelInKbytes=rsIpsecTunnelInKbytes, rsIpsecTunnelOutAuthErrors=rsIpsecTunnelOutAuthErrors, rsIpsecTunnel=rsIpsecTunnel, rsIpsecTunnelSelectorLocalIPOne=rsIpsecTunnelSelectorLocalIPOne, rsIpsecTunnelOrigPeerAddr=rsIpsecTunnelOrigPeerAddr, rsIpsecTunnelEntry=rsIpsecTunnelEntry, rsIpsecTunnelOutSpi=rsIpsecTunnelOutSpi, rsIpsecTunnelInDecryptErrors=rsIpsecTunnelInDecryptErrors, rsIpsecTunnelNum=rsIpsecTunnelNum, rsIpsecTunnelKeyMode=rsIpsecTunnelKeyMode, rsIpsecTunnelOutOtherErrors=rsIpsecTunnelOutOtherErrors, rsIpsecTunnelOutKbytes=rsIpsecTunnelOutKbytes, rsIpsecTunnelNumRekey=rsIpsecTunnelNumRekey, rsIpsecTunnelOutDecryptErrors=rsIpsecTunnelOutDecryptErrors, rsIpsecTunnelSelectorRemotePort=rsIpsecTunnelSelectorRemotePort, rsIpsecTunnelInSaBytes=rsIpsecTunnelInSaBytes, rsIpsecTunnelCreateTime=rsIpsecTunnelCreateTime, rsIpsecTunnelSelectorLocalPort=rsIpsecTunnelSelectorLocalPort, rsIpsecTunnelLifeLength=rsIpsecTunnelLifeLength, rsIpsecTunnelSelectorProtocol=rsIpsecTunnelSelectorProtocol, rsIpsecTunnelSelectorRemoteIPTwo=rsIpsecTunnelSelectorRemoteIPTwo, rsIpsecTunnelTable=rsIpsecTunnelTable, rsIpsecTunnelInAuthErrors=rsIpsecTunnelInAuthErrors, rsIpsecTunnelDeviceID=rsIpsecTunnelDeviceID, rsIpsecTunnelID=rsIpsecTunnelID, rsIpsecTunnelUdpEncap=rsIpsecTunnelUdpEncap, rsIpsecTunnelAhAuthAlg=rsIpsecTunnelAhAuthAlg, rsIpsecTunnelLifeTime=rsIpsecTunnelLifeTime, rsIpsecTunnelSelectorRemoteIPType=rsIpsecTunnelSelectorRemoteIPType, rsIpsecTunnelPeerUdpPort=rsIpsecTunnelPeerUdpPort, PYSNMP_MODULE_ID=rsInfoModule, rsIpsecTunnelMode=rsIpsecTunnelMode, rsIpsecTunnelSelectorLocalIPType=rsIpsecTunnelSelectorLocalIPType, rsIpsecTunnelOutSaBytes=rsIpsecTunnelOutSaBytes, rsIpsecTunnelInPackets=rsIpsecTunnelInPackets, rsIpsecTunnelInSpi=rsIpsecTunnelInSpi, rsIpsecTunnelInOtherErrors=rsIpsecTunnelInOtherErrors)
