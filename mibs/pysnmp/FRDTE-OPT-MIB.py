#
# PySNMP MIB module FRDTE-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRDTE-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:02:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, MibIdentifier, ModuleIdentity, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, mgmt, ObjectIdentity, Unsigned32, Bits, TimeTicks, iso, Integer32, Counter32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "ModuleIdentity", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mgmt", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "iso", "Integer32", "Counter32", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PCTFRDTEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5), )
if mibBuilder.loadTexts: cdx6500PCTFRDTEPortTable.setStatus('mandatory')
cdx6500PCTFRDTEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtepCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PCTFRDTEPortEntry.setStatus('mandatory')
cdx6500frdtepCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCfgPortNum.setStatus('mandatory')
cdx6500frdtepConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 21, 100))).clone(namedValues=NamedValues(("simp", 1), ("dtr", 2), ("simpb", 21), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepConnectionType.setStatus('mandatory')
cdx6500frdtepClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("int", 1), ("ext", 2), ("extint", 3), ("extlp", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepClockSource.setStatus('mandatory')
cdx6500frdtepClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepClockSpeed.setStatus('mandatory')
cdx6500frdtepMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepMaxStations.setStatus('deprecated')
cdx6500frdtepFrameSeqCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("extended", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFrameSeqCounting.setStatus('mandatory')
cdx6500frdtepPktSeqCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("extended", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepPktSeqCounting.setStatus('mandatory')
cdx6500frdtepCtrlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("annexD", 1), ("none", 2), ("lmi", 3), ("annexA", 4), ("auto", 5), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepCtrlProtocol.setStatus('mandatory')
cdx6500frdtepT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepT391.setStatus('mandatory')
cdx6500frdtepT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepT392.setStatus('mandatory')
cdx6500frdtepN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepN391.setStatus('mandatory')
cdx6500frdtepN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepN392.setStatus('mandatory')
cdx6500frdtepN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepN393.setStatus('mandatory')
cdx6500frdtepNT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepNT1.setStatus('mandatory')
cdx6500frdtepNT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepNT2.setStatus('mandatory')
cdx6500frdtepNN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepNN1.setStatus('mandatory')
cdx6500frdtepNN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepNN2.setStatus('mandatory')
cdx6500frdtepNN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepNN3.setStatus('mandatory')
cdx6500frdtepHighPriorityStn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepHighPriorityStn.setStatus('mandatory')
cdx6500frdtepMaxVoiceBWBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepMaxVoiceBWBitsPerSec.setStatus('mandatory')
cdx6500frdtepSegSizeVoicePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257, 513, 1025, 100))).clone(namedValues=NamedValues(("segSize32", 33), ("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepSegSizeVoicePresent.setStatus('mandatory')
cdx6500frdtepSegSizeVoiceNotPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257, 513, 1025, 2049, 4097, 32000, 100))).clone(namedValues=NamedValues(("segSize32", 33), ("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("segSize2048", 2049), ("segSize4096", 4097), ("disable", 32000), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepSegSizeVoiceNotPresent.setStatus('mandatory')
cdx6500frdtepInvertTXClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepInvertTXClock.setStatus('mandatory')
cdx6500frdtepControlProtocolOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepControlProtocolOptions.setStatus('mandatory')
cdx6500frdtepDiscardControlOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("debit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepDiscardControlOptions.setStatus('mandatory')
cdx6500frdtepElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepElectricalInterfaceType.setStatus('mandatory')
cdx6500frdtepV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500frdtepHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTFRDTEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5), )
if mibBuilder.loadTexts: cdx6500PPSTFRDTEPortTable.setStatus('mandatory')
cdx6500PPSTFRDTEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtepStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTFRDTEPortEntry.setStatus('mandatory')
cdx6500frdtepStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepStatsPortNum.setStatus('mandatory')
cdx6500frdtepPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("busyOut", 3), ("up", 4), ("down", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepPortStatus.setStatus('mandatory')
cdx6500frdtepPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepPortSpeed.setStatus('mandatory')
cdx6500frdtepUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepUtilizationIn.setStatus('mandatory')
cdx6500frdtepUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepUtilizationOut.setStatus('mandatory')
cdx6500frdtepCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharInTotal.setStatus('mandatory')
cdx6500frdtepCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharOutTotal.setStatus('mandatory')
cdx6500frdtepCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharsInPerSec.setStatus('mandatory')
cdx6500frdtepCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharsOutPerSec.setStatus('mandatory')
cdx6500frdtepFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFrameInTotal.setStatus('mandatory')
cdx6500frdtepFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFrameOutTotal.setStatus('mandatory')
cdx6500frdtepFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFramesInPerSec.setStatus('mandatory')
cdx6500frdtepFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFramesOutPerSec.setStatus('mandatory')
cdx6500frdtepOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepOverrunErrors.setStatus('mandatory')
cdx6500frdtepUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 15), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepUnderrunErrors.setStatus('mandatory')
cdx6500frdtepCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCRCErrors.setStatus('mandatory')
cdx6500SPCTFRDTEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: cdx6500SPCTFRDTEStationTable.setStatus('mandatory')
cdx6500SPCTFRDTEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtesCfgPortNum"), (0, "FRDTE-OPT-MIB", "cdx6500frdtesCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTFRDTEStationEntry.setStatus('mandatory')
cdx6500frdtesCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCfgPortNum.setStatus('mandatory')
cdx6500frdtesCfgDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCfgDLCI.setStatus('mandatory')
cdx6500frdtesStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annexG", 1), ("bypass", 2), ("voiceRelay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStationType.setStatus('mandatory')
cdx6500frdtesCommInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCommInfoRate.setStatus('mandatory')
cdx6500frdtesCommBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCommBurstSize.setStatus('mandatory')
cdx6500frdtesTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesTransDelay.setStatus('mandatory')
cdx6500frdtesControlledMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("normal", 1), ("disable", 2), ("congested", 3), ("limit", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesControlledMode.setStatus('mandatory')
cdx6500frdtesLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesLinkAddress.setStatus('mandatory')
cdx6500frdtesPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesPVCChannels.setStatus('mandatory')
cdx6500frdtesStartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStartingPVC.setStatus('mandatory')
cdx6500frdtesSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesSVCChannels.setStatus('mandatory')
cdx6500frdtesStartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStartingSVC.setStatus('mandatory')
cdx6500frdtesInitialFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("sabm", 1), ("disc", 2), ("none", 3), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesInitialFrame.setStatus('mandatory')
cdx6500frdtesRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesRetryTimer.setStatus('mandatory')
cdx6500frdtesPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesPollTimer.setStatus('mandatory')
cdx6500frdtesTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesTries.setStatus('mandatory')
cdx6500frdtesFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesFrameWinSize.setStatus('mandatory')
cdx6500frdtesPacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesPacketWinSize.setStatus('mandatory')
cdx6500frdtesMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10, 11, 100))).clone(namedValues=NamedValues(("psize32", 6), ("psize64", 7), ("psize128", 8), ("psize256", 9), ("psize512", 10), ("psize1024", 11), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesMaxPacketSize.setStatus('mandatory')
cdx6500frdtesUpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesUpperQueue.setStatus('mandatory')
cdx6500frdtesLowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesLowerQueue.setStatus('mandatory')
cdx6500frdtesRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesRestartTimer.setStatus('mandatory')
cdx6500frdtesResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesResetTimer.setStatus('mandatory')
cdx6500frdtesCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCallTimer.setStatus('mandatory')
cdx6500frdtesClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesClearTimer.setStatus('mandatory')
cdx6500frdtesX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesX25Options.setStatus('deprecated')
cdx6500frdtesRCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesRCDestination.setStatus('mandatory')
cdx6500frdtesCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCUG.setStatus('mandatory')
cdx6500frdtesBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesBillingRecords.setStatus('mandatory')
cdx6500frdtesCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCfgStationNum.setStatus('mandatory')
cdx6500frdtesStnX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnX25Options.setStatus('mandatory')
cdx6500frdtesStnFrameSegmenter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnFrameSegmenter.setStatus('mandatory')
cdx6500frdtesStnVoiceSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnVoiceSVCChannels.setStatus('mandatory')
cdx6500frdtesStnVoiceCongCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnVoiceCongCtrlMode.setStatus('mandatory')
cdx6500frdtesStnPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnPeakUtilization.setStatus('mandatory')
cdx6500frdtesStnMaxInboundQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnMaxInboundQueue.setStatus('mandatory')
cdx6500frdtesStnAnnexGRateReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnAnnexGRateReduction.setStatus('mandatory')
cdx6500SPSTFRDTEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2), )
if mibBuilder.loadTexts: cdx6500SPSTFRDTEStationTable.setStatus('mandatory')
cdx6500SPSTFRDTEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtesStatsPortNum"), (0, "FRDTE-OPT-MIB", "cdx6500frdtesStatsStationNumber"))
if mibBuilder.loadTexts: cdx6500SPSTFRDTEStationEntry.setStatus('mandatory')
cdx6500frdtesStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesStatsPortNum.setStatus('mandatory')
cdx6500frdtesStatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesStatsDLCI.setStatus('mandatory')
cdx6500frdtesUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesUtilizationIn.setStatus('mandatory')
cdx6500frdtesUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesUtilizationOut.setStatus('mandatory')
cdx6500frdtesMaxSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesMaxSVCCount.setStatus('mandatory')
cdx6500frdtesCurrentSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCurrentSVCCount.setStatus('mandatory')
cdx6500frdtesCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharInTotal.setStatus('mandatory')
cdx6500frdtesCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharOutTotal.setStatus('mandatory')
cdx6500frdtesCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharsInPerSec.setStatus('mandatory')
cdx6500frdtesCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharsOutPerSec.setStatus('mandatory')
cdx6500frdtesPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktInTotal.setStatus('mandatory')
cdx6500frdtesPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktOutTotal.setStatus('mandatory')
cdx6500frdtesPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktsInPerSec.setStatus('mandatory')
cdx6500frdtesPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktsOutPerSec.setStatus('mandatory')
cdx6500frdtesPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPacketsQueued.setStatus('mandatory')
cdx6500frdtesFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFrameInTotal.setStatus('mandatory')
cdx6500frdtesFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFrameOutTotal.setStatus('mandatory')
cdx6500frdtesFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFramesInPerSec.setStatus('mandatory')
cdx6500frdtesFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFramesOutPerSec.setStatus('mandatory')
cdx6500frdtesInfoFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesInfoFramesIn.setStatus('mandatory')
cdx6500frdtesInfoFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesInfoFramesOut.setStatus('mandatory')
cdx6500frdtesRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRNRFramesIn.setStatus('mandatory')
cdx6500frdtesRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRNRFramesOut.setStatus('mandatory')
cdx6500frdtesRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRRFramesIn.setStatus('mandatory')
cdx6500frdtesRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRRFramesOut.setStatus('mandatory')
cdx6500frdtesREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesREJFramesIn.setStatus('mandatory')
cdx6500frdtesREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesREJFramesOut.setStatus('mandatory')
cdx6500frdtesDataPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesDataPktsIn.setStatus('mandatory')
cdx6500frdtesDataPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesDataPktsOut.setStatus('mandatory')
cdx6500frdtesResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesResetStats.setStatus('mandatory')
cdx6500frdtesBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesBoot.setStatus('mandatory')
cdx6500frdtesDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesDisable.setStatus('mandatory')
cdx6500frdtesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesEnable.setStatus('mandatory')
cdx6500frdtesStatsStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesStatsStationNumber.setStatus('mandatory')
mibBuilder.exportSymbols("FRDTE-OPT-MIB", cdx6500frdtesUtilizationOut=cdx6500frdtesUtilizationOut, cdx6500frdtepFrameInTotal=cdx6500frdtepFrameInTotal, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500PPSTFRDTEPortEntry=cdx6500PPSTFRDTEPortEntry, cdx6500frdtesClearTimer=cdx6500frdtesClearTimer, codex=codex, cdx6500frdtesPVCChannels=cdx6500frdtesPVCChannels, cdx6500frdtepStatsPortNum=cdx6500frdtepStatsPortNum, cdx6500frdtesRRFramesIn=cdx6500frdtesRRFramesIn, cdx6500frdtesStnX25Options=cdx6500frdtesStnX25Options, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500frdtesStnVoiceCongCtrlMode=cdx6500frdtesStnVoiceCongCtrlMode, cdx6500frdtesLowerQueue=cdx6500frdtesLowerQueue, cdx6500PCTFRDTEPortEntry=cdx6500PCTFRDTEPortEntry, Counter16=Counter16, cdx6500frdtepT392=cdx6500frdtepT392, cdx6500frdtesDataPktsOut=cdx6500frdtesDataPktsOut, cdx6500frdtepNN1=cdx6500frdtepNN1, cdx6500frdtesControlledMode=cdx6500frdtesControlledMode, cdx6500frdtepCharsOutPerSec=cdx6500frdtepCharsOutPerSec, cdx6500frdtesRNRFramesIn=cdx6500frdtesRNRFramesIn, cdx6500frdtepNN2=cdx6500frdtepNN2, cdx6500frdtepClockSource=cdx6500frdtepClockSource, cdx6500frdtepClockSpeed=cdx6500frdtepClockSpeed, cdx6500frdtesStnFrameSegmenter=cdx6500frdtesStnFrameSegmenter, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500frdtepInvertTXClock=cdx6500frdtepInvertTXClock, cdx6500frdtesCharInTotal=cdx6500frdtesCharInTotal, cdx6500frdtepPortSpeed=cdx6500frdtepPortSpeed, cdx6500frdtesCallTimer=cdx6500frdtesCallTimer, cdx6500frdtesRetryTimer=cdx6500frdtesRetryTimer, cdx6500frdtepCfgPortNum=cdx6500frdtepCfgPortNum, cdx6500frdtesStnAnnexGRateReduction=cdx6500frdtesStnAnnexGRateReduction, cdx6500frdtesDataPktsIn=cdx6500frdtesDataPktsIn, cdx6500frdtesTransDelay=cdx6500frdtesTransDelay, cdx6500frdtesFramesInPerSec=cdx6500frdtesFramesInPerSec, cdx6500frdtesCharsOutPerSec=cdx6500frdtesCharsOutPerSec, cdx6500frdtepFrameOutTotal=cdx6500frdtepFrameOutTotal, cdx6500frdtesRRFramesOut=cdx6500frdtesRRFramesOut, cdx6500SPSTFRDTEStationEntry=cdx6500SPSTFRDTEStationEntry, cdx6500frdtepV24ElectricalInterfaceOption=cdx6500frdtepV24ElectricalInterfaceOption, cdx6500frdtesStartingSVC=cdx6500frdtesStartingSVC, cdx6500frdtepN391=cdx6500frdtepN391, cdx6500SPCTFRDTEStationEntry=cdx6500SPCTFRDTEStationEntry, cdx6500frdtesStartingPVC=cdx6500frdtesStartingPVC, cdx6500frdtepMaxVoiceBWBitsPerSec=cdx6500frdtepMaxVoiceBWBitsPerSec, cdx6500Configuration=cdx6500Configuration, cdx6500frdtesMaxPacketSize=cdx6500frdtesMaxPacketSize, cdx6500frdtesCharOutTotal=cdx6500frdtesCharOutTotal, cdx6500frdtepNN3=cdx6500frdtepNN3, DisplayString=DisplayString, cdx6500frdtepCtrlProtocol=cdx6500frdtepCtrlProtocol, cdx6500frdtepCharOutTotal=cdx6500frdtepCharOutTotal, cdx6500frdtepPortStatus=cdx6500frdtepPortStatus, cdx6500frdtesPktInTotal=cdx6500frdtesPktInTotal, cdx6500frdtepNT2=cdx6500frdtepNT2, cdx6500frdtepHighSpeedElectricalInterfaceOption=cdx6500frdtepHighSpeedElectricalInterfaceOption, cdx6500frdtesInfoFramesIn=cdx6500frdtesInfoFramesIn, cdx6500frdtesResetStats=cdx6500frdtesResetStats, cdx6500frdtepConnectionType=cdx6500frdtepConnectionType, cdx6500frdtepFrameSeqCounting=cdx6500frdtepFrameSeqCounting, cdx6500frdtesStatsPortNum=cdx6500frdtesStatsPortNum, cdx6500frdtesResetTimer=cdx6500frdtesResetTimer, cdx6500frdtepN392=cdx6500frdtepN392, cdx6500frdtesTries=cdx6500frdtesTries, cdx6500frdtesRNRFramesOut=cdx6500frdtesRNRFramesOut, cdx6500frdtesStnPeakUtilization=cdx6500frdtesStnPeakUtilization, cdx6500frdtesFrameInTotal=cdx6500frdtesFrameInTotal, cdx6500frdtesPacketsQueued=cdx6500frdtesPacketsQueued, cdx6500frdtesCfgPortNum=cdx6500frdtesCfgPortNum, cdx6500frdtesCfgDLCI=cdx6500frdtesCfgDLCI, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500frdtepUnderrunErrors=cdx6500frdtepUnderrunErrors, cdx6500frdtesSVCChannels=cdx6500frdtesSVCChannels, cdx6500PCTFRDTEPortTable=cdx6500PCTFRDTEPortTable, cdx6500frdtesFramesOutPerSec=cdx6500frdtesFramesOutPerSec, cdx6500frdtesDisable=cdx6500frdtesDisable, cdx6500frdtepControlProtocolOptions=cdx6500frdtepControlProtocolOptions, cdx6500frdtesPktsOutPerSec=cdx6500frdtesPktsOutPerSec, cdx6500SPSTFRDTEStationTable=cdx6500SPSTFRDTEStationTable, cdx6500frdtepOverrunErrors=cdx6500frdtepOverrunErrors, cdx6500frdtesCharsInPerSec=cdx6500frdtesCharsInPerSec, cdx6500frdtepElectricalInterfaceType=cdx6500frdtepElectricalInterfaceType, cdx6500frdtesREJFramesOut=cdx6500frdtesREJFramesOut, cdx6500frdtepUtilizationIn=cdx6500frdtepUtilizationIn, cdx6500frdtesREJFramesIn=cdx6500frdtesREJFramesIn, cdx6500frdtepHighPriorityStn=cdx6500frdtepHighPriorityStn, cdx6500frdtesCommInfoRate=cdx6500frdtesCommInfoRate, cdx6500frdtesPacketWinSize=cdx6500frdtesPacketWinSize, cdx6500frdtesUtilizationIn=cdx6500frdtesUtilizationIn, cdx6500frdtesFrameWinSize=cdx6500frdtesFrameWinSize, cdx6500frdtepCharsInPerSec=cdx6500frdtepCharsInPerSec, cdx6500frdtesFrameOutTotal=cdx6500frdtesFrameOutTotal, cdx6500frdtesInitialFrame=cdx6500frdtesInitialFrame, cdx6500frdtesX25Options=cdx6500frdtesX25Options, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500frdtesInfoFramesOut=cdx6500frdtesInfoFramesOut, cdx6500frdtepCRCErrors=cdx6500frdtepCRCErrors, cdxProductSpecific=cdxProductSpecific, cdx6500frdtepUtilizationOut=cdx6500frdtepUtilizationOut, cdx6500frdtesPktOutTotal=cdx6500frdtesPktOutTotal, cdx6500SPCTFRDTEStationTable=cdx6500SPCTFRDTEStationTable, cdx6500Controls=cdx6500Controls, cdx6500Statistics=cdx6500Statistics, cdx6500frdtepN393=cdx6500frdtepN393, cdx6500frdtepSegSizeVoicePresent=cdx6500frdtepSegSizeVoicePresent, cdx6500frdtepMaxStations=cdx6500frdtepMaxStations, cdx6500frdtesLinkAddress=cdx6500frdtesLinkAddress, cdx6500frdtepDiscardControlOptions=cdx6500frdtepDiscardControlOptions, cdx6500frdtesRCDestination=cdx6500frdtesRCDestination, cdx6500frdtesCurrentSVCCount=cdx6500frdtesCurrentSVCCount, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500frdtepFramesOutPerSec=cdx6500frdtepFramesOutPerSec, cdx6500frdtesStationType=cdx6500frdtesStationType, cdx6500frdtesBoot=cdx6500frdtesBoot, cdx6500frdtesStnVoiceSVCChannels=cdx6500frdtesStnVoiceSVCChannels, cdx6500frdtepNT1=cdx6500frdtepNT1, cdx6500frdtepFramesInPerSec=cdx6500frdtepFramesInPerSec, cdx6500frdtesStatsStationNumber=cdx6500frdtesStatsStationNumber, cdx6500frdtepT391=cdx6500frdtepT391, cdx6500frdtesBillingRecords=cdx6500frdtesBillingRecords, cdx6500frdtesStnMaxInboundQueue=cdx6500frdtesStnMaxInboundQueue, cdx6500frdtesStatsDLCI=cdx6500frdtesStatsDLCI, cdx6500frdtesUpperQueue=cdx6500frdtesUpperQueue, cdx6500frdtesMaxSVCCount=cdx6500frdtesMaxSVCCount, cdx6500frdtepCharInTotal=cdx6500frdtepCharInTotal, cdx6500frdtesCommBurstSize=cdx6500frdtesCommBurstSize, cdx6500frdtesCfgStationNum=cdx6500frdtesCfgStationNum, cdx6500frdtesPktsInPerSec=cdx6500frdtesPktsInPerSec, cdx6500frdtepSegSizeVoiceNotPresent=cdx6500frdtepSegSizeVoiceNotPresent, cdx6500frdtepPktSeqCounting=cdx6500frdtepPktSeqCounting, cdx6500=cdx6500, cdx6500frdtesRestartTimer=cdx6500frdtesRestartTimer, cdx6500frdtesCUG=cdx6500frdtesCUG, cdx6500PPSTFRDTEPortTable=cdx6500PPSTFRDTEPortTable, cdx6500frdtesEnable=cdx6500frdtesEnable, cdx6500frdtesPollTimer=cdx6500frdtesPollTimer)
