#
# PySNMP MIB module HPN-ICF-MINM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MINM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:28:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
hpnicfVsiIndex, = mibBuilder.importSymbols("HPN-ICF-VSI-MIB", "hpnicfVsiIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Unsigned32, Counter64, Gauge32, ObjectIdentity, Bits, ModuleIdentity, IpAddress, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Unsigned32", "Counter64", "Gauge32", "ObjectIdentity", "Bits", "ModuleIdentity", "IpAddress", "MibIdentifier", "NotificationType", "iso")
DisplayString, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention")
hpnicfMinm = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107))
hpnicfMinm.setRevisions(('2009-08-08 10:00',))
if mibBuilder.loadTexts: hpnicfMinm.setLastUpdated('200908081000Z')
if mibBuilder.loadTexts: hpnicfMinm.setOrganization('')
class HpnicfMinmEnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hpnicfMinmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1))
hpnicfMinmScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 1))
hpnicfMinmCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 1, 1), Bits().clone(namedValues=NamedValues(("reEncapsulation", 0), ("uplink", 1), ("vsiShareConnection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMinmCapabilities.setStatus('current')
hpnicfMinmBmac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMinmBmac.setStatus('current')
hpnicfMinmVsiTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 2), )
if mibBuilder.loadTexts: hpnicfMinmVsiTable.setStatus('current')
hpnicfMinmVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiIndex"))
if mibBuilder.loadTexts: hpnicfMinmVsiEntry.setStatus('current')
hpnicfMinmVsiBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMinmVsiBvlan.setStatus('current')
hpnicfMinmVsiReEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 2, 1, 2), HpnicfMinmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMinmVsiReEncapsulation.setStatus('current')
hpnicfMinmVsiNextAvailableLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMinmVsiNextAvailableLinkId.setStatus('current')
hpnicfMinmUplinkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 3), )
if mibBuilder.loadTexts: hpnicfMinmUplinkTable.setStatus('current')
hpnicfMinmUplinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfMinmUplinkEntry.setStatus('current')
hpnicfMinmUplinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMinmUplinkRowStatus.setStatus('current')
hpnicfMinmConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4), )
if mibBuilder.loadTexts: hpnicfMinmConnectionTable.setStatus('current')
hpnicfMinmConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiIndex"), (0, "HPN-ICF-MINM-MIB", "hpnicfMinmConnectionLinkId"))
if mibBuilder.loadTexts: hpnicfMinmConnectionEntry.setStatus('current')
hpnicfMinmConnectionLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfMinmConnectionLinkId.setStatus('current')
hpnicfMinmConnectionBmac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMinmConnectionBmac.setStatus('current')
hpnicfMinmConnectionBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMinmConnectionBvlan.setStatus('current')
hpnicfMinmConnectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMinmConnectionPort.setStatus('current')
hpnicfMinmConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("learned", 1), ("configDynamic", 2), ("configStatic", 3), ("blackhole", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMinmConnectionStatus.setStatus('current')
hpnicfMinmConnectionAgingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aging", 1), ("noAged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMinmConnectionAgingStatus.setStatus('current')
hpnicfMinmConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 107, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMinmConnectionRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-MINM-MIB", hpnicfMinmConnectionStatus=hpnicfMinmConnectionStatus, hpnicfMinmConnectionAgingStatus=hpnicfMinmConnectionAgingStatus, hpnicfMinmVsiNextAvailableLinkId=hpnicfMinmVsiNextAvailableLinkId, hpnicfMinmVsiEntry=hpnicfMinmVsiEntry, hpnicfMinmConnectionLinkId=hpnicfMinmConnectionLinkId, hpnicfMinmBmac=hpnicfMinmBmac, hpnicfMinmConnectionTable=hpnicfMinmConnectionTable, hpnicfMinmConnectionPort=hpnicfMinmConnectionPort, PYSNMP_MODULE_ID=hpnicfMinm, hpnicfMinmVsiBvlan=hpnicfMinmVsiBvlan, HpnicfMinmEnabledStatus=HpnicfMinmEnabledStatus, hpnicfMinmVsiTable=hpnicfMinmVsiTable, hpnicfMinmConnectionBvlan=hpnicfMinmConnectionBvlan, hpnicfMinmConnectionBmac=hpnicfMinmConnectionBmac, hpnicfMinm=hpnicfMinm, hpnicfMinmConnectionEntry=hpnicfMinmConnectionEntry, hpnicfMinmUplinkTable=hpnicfMinmUplinkTable, hpnicfMinmVsiReEncapsulation=hpnicfMinmVsiReEncapsulation, hpnicfMinmScalarGroup=hpnicfMinmScalarGroup, hpnicfMinmCapabilities=hpnicfMinmCapabilities, hpnicfMinmUplinkEntry=hpnicfMinmUplinkEntry, hpnicfMinmConnectionRowStatus=hpnicfMinmConnectionRowStatus, hpnicfMinmObjects=hpnicfMinmObjects, hpnicfMinmUplinkRowStatus=hpnicfMinmUplinkRowStatus)
