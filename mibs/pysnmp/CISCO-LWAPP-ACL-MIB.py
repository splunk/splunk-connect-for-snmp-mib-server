#
# PySNMP MIB module CISCO-LWAPP-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, Bits, Integer32, IpAddress, Unsigned32, NotificationType, TimeTicks, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "TimeTicks", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "iso", "Counter32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoLwappAclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 577))
ciscoLwappAclMIB.setRevisions(('2010-03-04 00:00', '2006-08-29 00:00', '2006-07-19 00:00',))
if mibBuilder.loadTexts: ciscoLwappAclMIB.setLastUpdated('201003040000Z')
if mibBuilder.loadTexts: ciscoLwappAclMIB.setOrganization('Cisco Systems Inc.')
ciscoLwappAclMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 0))
ciscoLwappAclMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1))
ciscoLwappAclMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 2))
ciscoLwappCpuAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1))
ciscoLwappControllerAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2))
ciscoLwappControllerAclGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 3))
claAclCounterEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claAclCounterEnable.setStatus('current')
claCpuAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1), )
if mibBuilder.loadTexts: claCpuAclTable.setStatus('current')
claCpuAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-ACL-MIB", "claCpuAclIndex"))
if mibBuilder.loadTexts: claCpuAclEntry.setStatus('current')
claCpuAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: claCpuAclIndex.setStatus('current')
claCpuAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claCpuAclName.setStatus('current')
claCpuAclPacketApplicability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wired", 2), ("wireless", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claCpuAclPacketApplicability.setStatus('current')
claAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1), )
if mibBuilder.loadTexts: claAclTable.setStatus('current')
claAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-ACL-MIB", "claAclName"))
if mibBuilder.loadTexts: claAclEntry.setStatus('current')
claAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: claAclName.setStatus('current')
claAclCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claAclCounterClear.setStatus('current')
claAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2), )
if mibBuilder.loadTexts: claAclRuleTable.setStatus('current')
claAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-ACL-MIB", "claAclName"), (0, "CISCO-LWAPP-ACL-MIB", "claAclRuleIndex"))
if mibBuilder.loadTexts: claAclRuleEntry.setStatus('current')
claAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: claAclRuleIndex.setStatus('current')
claAclRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: claAclRuleHits.setStatus('current')
ciscoLwappAclMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 1))
ciscoLwappAclMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 2))
ciscoLwappAclMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 1, 1)).setObjects(("CISCO-LWAPP-ACL-MIB", "ciscoLwappCpuAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAclMIBCompliance = ciscoLwappAclMIBCompliance.setStatus('deprecated')
ciscoLwappAclMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 1, 2)).setObjects(("CISCO-LWAPP-ACL-MIB", "ciscoLwappCpuAclGroup"), ("CISCO-LWAPP-ACL-MIB", "ciscoLwappAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAclMIBComplianceRev1 = ciscoLwappAclMIBComplianceRev1.setStatus('current')
ciscoLwappCpuAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 2, 1)).setObjects(("CISCO-LWAPP-ACL-MIB", "claCpuAclName"), ("CISCO-LWAPP-ACL-MIB", "claCpuAclPacketApplicability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappCpuAclGroup = ciscoLwappCpuAclGroup.setStatus('current')
ciscoLwappAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 2, 2)).setObjects(("CISCO-LWAPP-ACL-MIB", "claAclCounterEnable"), ("CISCO-LWAPP-ACL-MIB", "claAclCounterClear"), ("CISCO-LWAPP-ACL-MIB", "claAclRuleHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAclGroup = ciscoLwappAclGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-ACL-MIB", ciscoLwappAclMIBNotifs=ciscoLwappAclMIBNotifs, claCpuAclPacketApplicability=claCpuAclPacketApplicability, ciscoLwappAclMIBComplianceRev1=ciscoLwappAclMIBComplianceRev1, claCpuAclEntry=claCpuAclEntry, claAclRuleIndex=claAclRuleIndex, ciscoLwappAclMIBConform=ciscoLwappAclMIBConform, claCpuAclName=claCpuAclName, claAclRuleHits=claAclRuleHits, ciscoLwappAclMIBGroups=ciscoLwappAclMIBGroups, ciscoLwappAclMIBCompliance=ciscoLwappAclMIBCompliance, claAclRuleEntry=claAclRuleEntry, claAclRuleTable=claAclRuleTable, ciscoLwappCpuAclGroup=ciscoLwappCpuAclGroup, ciscoLwappAclGroup=ciscoLwappAclGroup, claAclEntry=claAclEntry, ciscoLwappAclMIBCompliances=ciscoLwappAclMIBCompliances, claCpuAclTable=claCpuAclTable, claAclName=claAclName, ciscoLwappAclMIBObjects=ciscoLwappAclMIBObjects, ciscoLwappAclMIB=ciscoLwappAclMIB, PYSNMP_MODULE_ID=ciscoLwappAclMIB, ciscoLwappControllerAcl=ciscoLwappControllerAcl, ciscoLwappControllerAclGeneral=ciscoLwappControllerAclGeneral, ciscoLwappCpuAcl=ciscoLwappCpuAcl, claAclTable=claAclTable, claAclCounterEnable=claAclCounterEnable, claAclCounterClear=claAclCounterClear, claCpuAclIndex=claCpuAclIndex)
