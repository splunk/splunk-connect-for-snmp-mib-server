#
# PySNMP MIB module XYLAN-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-PPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, ModuleIdentity, NotificationType, Counter32, Gauge32, Unsigned32, IpAddress, Integer32, TimeTicks, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Counter32", "Gauge32", "Unsigned32", "IpAddress", "Integer32", "TimeTicks", "Counter64", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanPppArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanPppArch")
pppxConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 17, 1))
pppxCpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 17, 2))
pppxStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 17, 3))
pppxIncomingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 17, 4))
pppxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1), )
if mibBuilder.loadTexts: pppxConfigTable.setStatus('mandatory')
pppxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1), ).setIndexNames((0, "XYLAN-PPP-MIB", "pppxConfigPeerID"))
if mibBuilder.loadTexts: pppxConfigEntry.setStatus('mandatory')
pppxConfigPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxConfigPeerID.setStatus('mandatory')
pppxConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigDescription.setStatus('mandatory')
pppxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigAdminStatus.setStatus('mandatory')
pppxConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("multilink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigMode.setStatus('mandatory')
pppxConfigBridgingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigBridgingVLAN.setStatus('mandatory')
pppxConfigRoutingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigRoutingVLAN.setStatus('mandatory')
pppxConfigCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("lzsDcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigCompressionType.setStatus('mandatory')
pppxConfigBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigBridgingMode.setStatus('mandatory')
pppxConfigIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigIpConfigAdminStatus.setStatus('mandatory')
pppxConfigBcpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigBcpConfigAdminStatus.setStatus('mandatory')
pppxConfigIpxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigIpxConfigAdminStatus.setStatus('mandatory')
pppxConfigCcpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigCcpConfigAdminStatus.setStatus('mandatory')
pppxConfigRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigRemoteIpAddress.setStatus('mandatory')
pppxConfigAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigAuthenticationType.setStatus('mandatory')
pppxConfigUserIdToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigUserIdToRemote.setStatus('mandatory')
pppxConfigPasswordToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigPasswordToRemote.setStatus('mandatory')
pppxConfigUserIdFromRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigUserIdFromRemote.setStatus('mandatory')
pppxConfigPasswordFromRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigPasswordFromRemote.setStatus('mandatory')
pppxConfigMaxFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigMaxFailureCount.setStatus('mandatory')
pppxConfigMaxConfigureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigMaxConfigureCount.setStatus('mandatory')
pppxConfigMaxTerminateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigMaxTerminateCount.setStatus('mandatory')
pppxConfigRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxConfigRetryTimeout.setStatus('mandatory')
pppxCpTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1), )
if mibBuilder.loadTexts: pppxCpTable.setStatus('mandatory')
pppxCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1), ).setIndexNames((0, "XYLAN-PPP-MIB", "pppxCpPeerID"))
if mibBuilder.loadTexts: pppxCpEntry.setStatus('mandatory')
pppxCpPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpPeerID.setStatus('mandatory')
pppxCpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpSlotIndex.setStatus('mandatory')
pppxCpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpPortIndex.setStatus('mandatory')
pppxCpIpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpIpOperStatus.setStatus('mandatory')
pppxCpIpxOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpIpxOperStatus.setStatus('mandatory')
pppxCpBcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpBcpOperStatus.setStatus('mandatory')
pppxCpCcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpCcpOperStatus.setStatus('mandatory')
pppxCpTxLcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpTxLcpPackets.setStatus('mandatory')
pppxCpRxLcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpRxLcpPackets.setStatus('mandatory')
pppxCpTxIpcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpTxIpcpPackets.setStatus('mandatory')
pppxCpRxIpcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpRxIpcpPackets.setStatus('mandatory')
pppxCpTxIpxcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpTxIpxcpPackets.setStatus('mandatory')
pppxCpRxIpxcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpRxIpxcpPackets.setStatus('mandatory')
pppxCpTxBcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpTxBcpPackets.setStatus('mandatory')
pppxCpRxBcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpRxBcpPackets.setStatus('mandatory')
pppxCpTxCcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpTxCcpPackets.setStatus('mandatory')
pppxCpRxCcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxCpRxCcpPackets.setStatus('mandatory')
pppxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1), )
if mibBuilder.loadTexts: pppxStatsTable.setStatus('mandatory')
pppxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1), ).setIndexNames((0, "XYLAN-PPP-MIB", "pppxStatsIfIndex"))
if mibBuilder.loadTexts: pppxStatsEntry.setStatus('mandatory')
pppxStatsPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsPeerID.setStatus('mandatory')
pppxStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsIfIndex.setStatus('mandatory')
pppxStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsSlotIndex.setStatus('mandatory')
pppxStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsPortIndex.setStatus('mandatory')
pppxStatsSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsSubIndex.setStatus('mandatory')
pppxStatsTxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxIPOctets.setStatus('mandatory')
pppxStatsTxIPPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxIPPackets.setStatus('mandatory')
pppxStatsRxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxIPOctets.setStatus('mandatory')
pppxStatsRxIPPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxIPPackets.setStatus('mandatory')
pppxStatsTxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxIPXOctets.setStatus('mandatory')
pppxStatsTxIPXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxIPXPackets.setStatus('mandatory')
pppxStatsRxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxIPXOctets.setStatus('mandatory')
pppxStatsRxIPXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxIPXPackets.setStatus('mandatory')
pppxStatsTxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxBPDUOctets.setStatus('mandatory')
pppxStatsTxBPDUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxBPDUPackets.setStatus('mandatory')
pppxStatsRxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxBPDUOctets.setStatus('mandatory')
pppxStatsRxBPDUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxBPDUPackets.setStatus('mandatory')
pppxStatsTxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxEthernetOctets.setStatus('mandatory')
pppxStatsTxEthernetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxEthernetPackets.setStatus('mandatory')
pppxStatsRxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxEthernetOctets.setStatus('mandatory')
pppxStatsRxEthernetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxEthernetPackets.setStatus('mandatory')
pppxStatsTx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTx8025Octets.setStatus('mandatory')
pppxStatsTx8025Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTx8025Packets.setStatus('mandatory')
pppxStatsRx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRx8025Octets.setStatus('mandatory')
pppxStatsRx8025Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRx8025Packets.setStatus('mandatory')
pppxStatsTxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxFDDIOctets.setStatus('mandatory')
pppxStatsTxFDDIPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxFDDIPackets.setStatus('mandatory')
pppxStatsRxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxFDDIOctets.setStatus('mandatory')
pppxStatsRxFDDIPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxFDDIPackets.setStatus('mandatory')
pppxStatsTxCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxCompressedOctets.setStatus('mandatory')
pppxStatsTxCompressedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxCompressedPackets.setStatus('mandatory')
pppxStatsRxCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxCompressedOctets.setStatus('mandatory')
pppxStatsRxCompressedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxCompressedPackets.setStatus('mandatory')
pppxStatsTxPrecompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsTxPrecompressedOctets.setStatus('mandatory')
pppxStatsRxDecompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxDecompressedOctets.setStatus('mandatory')
pppxStatsRxCompressedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxStatsRxCompressedDiscards.setStatus('mandatory')
pppxIncomingTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1), )
if mibBuilder.loadTexts: pppxIncomingTable.setStatus('mandatory')
pppxIncomingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1), ).setIndexNames((0, "XYLAN-PPP-MIB", "pppxIncomingIndex"))
if mibBuilder.loadTexts: pppxIncomingEntry.setStatus('mandatory')
pppxIncomingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppxIncomingIndex.setStatus('mandatory')
pppxIncomingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingAdminStatus.setStatus('mandatory')
pppxIncomingAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingAuthenticationType.setStatus('mandatory')
pppxIncomingUserIdToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingUserIdToRemote.setStatus('mandatory')
pppxIncomingPasswordToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingPasswordToRemote.setStatus('mandatory')
pppxIncomingBridgingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingBridgingVLAN.setStatus('mandatory')
pppxIncomingRoutingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingRoutingVLAN.setStatus('mandatory')
pppxIncomingCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("lzsDcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingCompressionType.setStatus('mandatory')
pppxIncomingIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingIpConfigAdminStatus.setStatus('mandatory')
pppxIncomingBcpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingBcpConfigAdminStatus.setStatus('mandatory')
pppxIncomingIpxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingIpxConfigAdminStatus.setStatus('mandatory')
pppxIncomingCcpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 17, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppxIncomingCcpConfigAdminStatus.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-PPP-MIB", pppxIncomingRoutingVLAN=pppxIncomingRoutingVLAN, pppxConfigAuthenticationType=pppxConfigAuthenticationType, pppxStatsTx8025Octets=pppxStatsTx8025Octets, pppxCpTxBcpPackets=pppxCpTxBcpPackets, pppxStatsTxIPPackets=pppxStatsTxIPPackets, pppxCpTxLcpPackets=pppxCpTxLcpPackets, pppxStatsTxIPXPackets=pppxStatsTxIPXPackets, pppxCpEntry=pppxCpEntry, pppxConfigBridgingMode=pppxConfigBridgingMode, pppxStatsTxEthernetOctets=pppxStatsTxEthernetOctets, pppxStatsTxIPXOctets=pppxStatsTxIPXOctets, pppxStatsRxEthernetOctets=pppxStatsRxEthernetOctets, pppxStatsGroup=pppxStatsGroup, pppxCpRxBcpPackets=pppxCpRxBcpPackets, pppxConfigUserIdFromRemote=pppxConfigUserIdFromRemote, pppxStatsTxBPDUPackets=pppxStatsTxBPDUPackets, pppxConfigPasswordToRemote=pppxConfigPasswordToRemote, pppxConfigRemoteIpAddress=pppxConfigRemoteIpAddress, pppxConfigAdminStatus=pppxConfigAdminStatus, pppxConfigCcpConfigAdminStatus=pppxConfigCcpConfigAdminStatus, pppxStatsRx8025Packets=pppxStatsRx8025Packets, pppxCpCcpOperStatus=pppxCpCcpOperStatus, pppxStatsRx8025Octets=pppxStatsRx8025Octets, pppxCpGroup=pppxCpGroup, pppxConfigMaxFailureCount=pppxConfigMaxFailureCount, pppxConfigIpxConfigAdminStatus=pppxConfigIpxConfigAdminStatus, pppxCpTxIpxcpPackets=pppxCpTxIpxcpPackets, pppxStatsIfIndex=pppxStatsIfIndex, pppxStatsSubIndex=pppxStatsSubIndex, pppxConfigEntry=pppxConfigEntry, pppxIncomingUserIdToRemote=pppxIncomingUserIdToRemote, pppxConfigMaxConfigureCount=pppxConfigMaxConfigureCount, pppxStatsPortIndex=pppxStatsPortIndex, pppxConfigDescription=pppxConfigDescription, pppxStatsTxEthernetPackets=pppxStatsTxEthernetPackets, pppxCpIpOperStatus=pppxCpIpOperStatus, pppxStatsSlotIndex=pppxStatsSlotIndex, pppxIncomingPasswordToRemote=pppxIncomingPasswordToRemote, pppxStatsRxDecompressedOctets=pppxStatsRxDecompressedOctets, pppxStatsTx8025Packets=pppxStatsTx8025Packets, pppxStatsRxIPXOctets=pppxStatsRxIPXOctets, pppxCpRxIpxcpPackets=pppxCpRxIpxcpPackets, pppxStatsRxCompressedPackets=pppxStatsRxCompressedPackets, pppxIncomingBridgingVLAN=pppxIncomingBridgingVLAN, pppxIncomingAdminStatus=pppxIncomingAdminStatus, pppxConfigGroup=pppxConfigGroup, pppxCpTxCcpPackets=pppxCpTxCcpPackets, pppxStatsRxCompressedDiscards=pppxStatsRxCompressedDiscards, pppxConfigMaxTerminateCount=pppxConfigMaxTerminateCount, pppxCpRxIpcpPackets=pppxCpRxIpcpPackets, pppxConfigMode=pppxConfigMode, pppxConfigPeerID=pppxConfigPeerID, pppxStatsTxIPOctets=pppxStatsTxIPOctets, pppxConfigBcpConfigAdminStatus=pppxConfigBcpConfigAdminStatus, pppxStatsRxEthernetPackets=pppxStatsRxEthernetPackets, pppxCpTxIpcpPackets=pppxCpTxIpcpPackets, pppxStatsRxFDDIPackets=pppxStatsRxFDDIPackets, pppxIncomingBcpConfigAdminStatus=pppxIncomingBcpConfigAdminStatus, pppxIncomingTable=pppxIncomingTable, pppxIncomingEntry=pppxIncomingEntry, pppxCpSlotIndex=pppxCpSlotIndex, pppxStatsRxIPOctets=pppxStatsRxIPOctets, pppxCpRxCcpPackets=pppxCpRxCcpPackets, pppxConfigTable=pppxConfigTable, pppxCpPeerID=pppxCpPeerID, pppxCpTable=pppxCpTable, pppxConfigRetryTimeout=pppxConfigRetryTimeout, pppxStatsRxCompressedOctets=pppxStatsRxCompressedOctets, pppxStatsRxBPDUPackets=pppxStatsRxBPDUPackets, pppxCpRxLcpPackets=pppxCpRxLcpPackets, pppxIncomingIndex=pppxIncomingIndex, pppxIncomingIpConfigAdminStatus=pppxIncomingIpConfigAdminStatus, pppxIncomingGroup=pppxIncomingGroup, pppxStatsRxIPXPackets=pppxStatsRxIPXPackets, pppxStatsTxCompressedPackets=pppxStatsTxCompressedPackets, pppxIncomingIpxConfigAdminStatus=pppxIncomingIpxConfigAdminStatus, pppxConfigPasswordFromRemote=pppxConfigPasswordFromRemote, pppxStatsTxBPDUOctets=pppxStatsTxBPDUOctets, pppxCpPortIndex=pppxCpPortIndex, pppxCpBcpOperStatus=pppxCpBcpOperStatus, pppxConfigRoutingVLAN=pppxConfigRoutingVLAN, pppxStatsRxIPPackets=pppxStatsRxIPPackets, pppxConfigIpConfigAdminStatus=pppxConfigIpConfigAdminStatus, pppxStatsTxFDDIPackets=pppxStatsTxFDDIPackets, pppxIncomingCompressionType=pppxIncomingCompressionType, pppxConfigBridgingVLAN=pppxConfigBridgingVLAN, pppxStatsEntry=pppxStatsEntry, pppxConfigCompressionType=pppxConfigCompressionType, pppxStatsTxCompressedOctets=pppxStatsTxCompressedOctets, pppxStatsTxPrecompressedOctets=pppxStatsTxPrecompressedOctets, pppxStatsRxBPDUOctets=pppxStatsRxBPDUOctets, pppxIncomingCcpConfigAdminStatus=pppxIncomingCcpConfigAdminStatus, pppxStatsTable=pppxStatsTable, pppxStatsRxFDDIOctets=pppxStatsRxFDDIOctets, pppxStatsPeerID=pppxStatsPeerID, pppxConfigUserIdToRemote=pppxConfigUserIdToRemote, pppxIncomingAuthenticationType=pppxIncomingAuthenticationType, pppxCpIpxOperStatus=pppxCpIpxOperStatus, pppxStatsTxFDDIOctets=pppxStatsTxFDDIOctets)
