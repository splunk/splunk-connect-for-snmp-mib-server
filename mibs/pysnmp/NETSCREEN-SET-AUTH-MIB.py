#
# PySNMP MIB module NETSCREEN-SET-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-SET-AUTH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
netscreenSetting, netscreenSettingMibModule = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSetting", "netscreenSettingMibModule")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, NotificationType, Counter64, MibIdentifier, ModuleIdentity, Counter32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "NotificationType", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenSetAuthMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 2))
netscreenSetAuthMibModule.setRevisions(('2004-05-03 00:00', '2004-11-10 20:22', '2004-03-03 00:00', '2003-11-10 00:00', '2002-04-27 00:00', '2001-05-27 00:00',))
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setLastUpdated('200411102022Z')
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setOrganization('Juniper Networks, Inc.')
nsSetAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 2))
nsSetAuthCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1), )
if mibBuilder.loadTexts: nsSetAuthCfgTable.setStatus('current')
nsSetAuthCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1), ).setIndexNames((0, "NETSCREEN-SET-AUTH-MIB", "nsSetAuthCfgIdx"))
if mibBuilder.loadTexts: nsSetAuthCfgEntry.setStatus('current')
nsSetAuthCfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgIdx.setStatus('current')
nsSetAuthCfgVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgVsys.setStatus('current')
nsSetAuthCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgName.setStatus('current')
nsSetAuthCfgPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgPrimary.setStatus('current')
nsSetAuthCfgBackup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgBackup1.setStatus('current')
nsSetAuthCfgBackup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgBackup2.setStatus('current')
nsSetAuthCfgConnIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgConnIdleTimeout.setStatus('current')
nsSetAuthCfgAuthAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAuthAccount.setStatus('current')
nsSetAuthCfgIkeAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgIkeAccount.setStatus('current')
nsSetAuthCfgL2tpAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgL2tpAccount.setStatus('current')
nsSetAuthCfgAdminAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAdminAccount.setStatus('current')
nsSetAuthCfgXauthAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgXauthAccount.setStatus('current')
nsSetAuthCfgMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("build-in-user-db", 0), ("radius-server", 1), ("secureId-server", 2), ("ldap-server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgMethod.setStatus('current')
nsSetAuthCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgPort.setStatus('current')
nsSetAuthCfgSecCliRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecCliRetry.setStatus('current')
nsSetAuthCfgSecCliTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecCliTimeout.setStatus('current')
nsSetAuthCfgSecEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sdi", 0), ("des", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecEncType.setStatus('current')
nsSetAuthCfgSecUseDuress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecUseDuress.setStatus('current')
nsSetAuthCfgLDAPCni = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgLDAPCni.setStatus('current')
nsSetAuthCfgLDAPDn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgLDAPDn.setStatus('current')
nsSetAuthCfgSepChar = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSepChar.setStatus('mandatory')
nsSetAuthCfgSepNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSepNumber.setStatus('mandatory')
nsSetAuthCfgRevInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRevInterval.setStatus('mandatory')
nsSetAuthCfgRadRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRadRetries.setStatus('mandatory')
nsSetAuthCfgEnableStnID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgEnableStnID.setStatus('mandatory')
nsSetAuthCfgDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgDomainName.setStatus('mandatory')
nsSetAuthCfgAcctSessIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctSessIdLen.setStatus('mandatory')
nsSetAuthCfgRFC2138Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRFC2138Compatibility.setStatus('mandatory')
nsSetAuthCfgSourceIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfName.setStatus('mandatory')
nsSetAuthCfgAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctPort.setStatus('mandatory')
nsSetAuthCfgAcctListActn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cleanup-sess", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctListActn.setStatus('mandatory')
nsSetAuthCfgSourceIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfInfo.setStatus('mandatory')
mibBuilder.exportSymbols("NETSCREEN-SET-AUTH-MIB", PYSNMP_MODULE_ID=netscreenSetAuthMibModule, netscreenSetAuthMibModule=netscreenSetAuthMibModule, nsSetAuthCfgAuthAccount=nsSetAuthCfgAuthAccount, nsSetAuthCfgPort=nsSetAuthCfgPort, nsSetAuthCfgEnableStnID=nsSetAuthCfgEnableStnID, nsSetAuthCfgBackup1=nsSetAuthCfgBackup1, nsSetAuth=nsSetAuth, nsSetAuthCfgMethod=nsSetAuthCfgMethod, nsSetAuthCfgRadRetries=nsSetAuthCfgRadRetries, nsSetAuthCfgSecCliRetry=nsSetAuthCfgSecCliRetry, nsSetAuthCfgConnIdleTimeout=nsSetAuthCfgConnIdleTimeout, nsSetAuthCfgLDAPCni=nsSetAuthCfgLDAPCni, nsSetAuthCfgPrimary=nsSetAuthCfgPrimary, nsSetAuthCfgSecEncType=nsSetAuthCfgSecEncType, nsSetAuthCfgSepNumber=nsSetAuthCfgSepNumber, nsSetAuthCfgAcctSessIdLen=nsSetAuthCfgAcctSessIdLen, nsSetAuthCfgL2tpAccount=nsSetAuthCfgL2tpAccount, nsSetAuthCfgSourceIfName=nsSetAuthCfgSourceIfName, nsSetAuthCfgSecCliTimeout=nsSetAuthCfgSecCliTimeout, nsSetAuthCfgEntry=nsSetAuthCfgEntry, nsSetAuthCfgTable=nsSetAuthCfgTable, nsSetAuthCfgSecUseDuress=nsSetAuthCfgSecUseDuress, nsSetAuthCfgBackup2=nsSetAuthCfgBackup2, nsSetAuthCfgLDAPDn=nsSetAuthCfgLDAPDn, nsSetAuthCfgSepChar=nsSetAuthCfgSepChar, nsSetAuthCfgRevInterval=nsSetAuthCfgRevInterval, nsSetAuthCfgRFC2138Compatibility=nsSetAuthCfgRFC2138Compatibility, nsSetAuthCfgName=nsSetAuthCfgName, nsSetAuthCfgAcctListActn=nsSetAuthCfgAcctListActn, nsSetAuthCfgVsys=nsSetAuthCfgVsys, nsSetAuthCfgIkeAccount=nsSetAuthCfgIkeAccount, nsSetAuthCfgAdminAccount=nsSetAuthCfgAdminAccount, nsSetAuthCfgIdx=nsSetAuthCfgIdx, nsSetAuthCfgXauthAccount=nsSetAuthCfgXauthAccount, nsSetAuthCfgSourceIfInfo=nsSetAuthCfgSourceIfInfo, nsSetAuthCfgAcctPort=nsSetAuthCfgAcctPort, nsSetAuthCfgDomainName=nsSetAuthCfgDomainName)
