#
# PySNMP MIB module FRDCE-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRDCE-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:02:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, MibIdentifier, Bits, IpAddress, Integer32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, iso, ObjectIdentity, ModuleIdentity, Counter64, mgmt = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "MibIdentifier", "Bits", "IpAddress", "Integer32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "iso", "ObjectIdentity", "ModuleIdentity", "Counter64", "mgmt")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

cdx6500PCTFRDCEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6), )
if mibBuilder.loadTexts: cdx6500PCTFRDCEPortTable.setStatus('mandatory')
cdx6500PCTFRDCEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcepCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PCTFRDCEPortEntry.setStatus('mandatory')
cdx6500frdcepCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCfgPortNum.setStatus('mandatory')
cdx6500frdcepConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 50))).clone(namedValues=NamedValues(("simp", 0), ("newvalSimp", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepConnectionType.setStatus('mandatory')
cdx6500frdcepClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("extint", 2), ("extlp", 3), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepClockSource.setStatus('mandatory')
cdx6500frdcepClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepClockSpeed.setStatus('mandatory')
cdx6500frdcepMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepMaxStations.setStatus('deprecated')
cdx6500frdcepCtrlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("annexD", 0), ("none", 1), ("lmi", 2), ("annexA", 3), ("newvalAnnexD", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCtrlProtocol.setStatus('mandatory')
cdx6500frdcepT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepT391.setStatus('mandatory')
cdx6500frdcepT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepT392.setStatus('mandatory')
cdx6500frdcepN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepN391.setStatus('mandatory')
cdx6500frdcepN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepN392.setStatus('mandatory')
cdx6500frdcepN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepN393.setStatus('mandatory')
cdx6500frdcepNT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNT1.setStatus('mandatory')
cdx6500frdcepNT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNT2.setStatus('mandatory')
cdx6500frdcepNN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNN1.setStatus('mandatory')
cdx6500frdcepNN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNN2.setStatus('mandatory')
cdx6500frdcepNN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNN3.setStatus('mandatory')
cdx6500frdcepSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepSubaddress.setStatus('mandatory')
cdx6500frdcepBiDirAnnexD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("bi", 0), ("uni", 1), ("newvalBi", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepBiDirAnnexD.setStatus('mandatory')
cdx6500frdcepInvertTXClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepInvertTXClock.setStatus('mandatory')
cdx6500frdcepControlProtocolOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepControlProtocolOptions.setStatus('mandatory')
cdx6500frdcepDiscardControlOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("debit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepDiscardControlOptions.setStatus('mandatory')
cdx6500frdcepElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepElectricalInterfaceType.setStatus('mandatory')
cdx6500frdcepV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500frdcepHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTFRDCEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: cdx6500PPSTFRDCEPortTable.setStatus('mandatory')
cdx6500PPSTFRDCEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcepStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTFRDCEPortEntry.setStatus('mandatory')
cdx6500frdcepStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepStatsPortNum.setStatus('mandatory')
cdx6500frdcepPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepPortStatus.setStatus('mandatory')
cdx6500frdcepPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepPortSpeed.setStatus('mandatory')
cdx6500frdcepUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepUtilizationIn.setStatus('mandatory')
cdx6500frdcepUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepUtilizationOut.setStatus('mandatory')
cdx6500frdcepCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharInTotal.setStatus('mandatory')
cdx6500frdcepCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharOutTotal.setStatus('mandatory')
cdx6500frdcepCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharsInPerSec.setStatus('mandatory')
cdx6500frdcepCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharsOutPerSec.setStatus('mandatory')
cdx6500frdcepFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFrameInTotal.setStatus('mandatory')
cdx6500frdcepFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFrameOutTotal.setStatus('mandatory')
cdx6500frdcepFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFramesInPerSec.setStatus('mandatory')
cdx6500frdcepFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFramesOutPerSec.setStatus('mandatory')
cdx6500frdcepOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepOverrunErrors.setStatus('mandatory')
cdx6500frdcepUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 15), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepUnderrunErrors.setStatus('mandatory')
cdx6500frdcepCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCRCErrors.setStatus('mandatory')
cdx6500SPCTFRDCEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3), )
if mibBuilder.loadTexts: cdx6500SPCTFRDCEStationTable.setStatus('mandatory')
cdx6500SPCTFRDCEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcesCfgPortNum"), (0, "FRDCE-OPT-MIB", "cdx6500frdcesCfgDLCI"))
if mibBuilder.loadTexts: cdx6500SPCTFRDCEStationEntry.setStatus('mandatory')
cdx6500frdcesCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCfgPortNum.setStatus('mandatory')
cdx6500frdcesCfgDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCfgDLCI.setStatus('mandatory')
cdx6500frdcesAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesAutocallMnem.setStatus('mandatory')
cdx6500frdcesAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesAutocallTimeout.setStatus('mandatory')
cdx6500frdcesMaxAutocalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesMaxAutocalls.setStatus('mandatory')
cdx6500frdcesRemoteConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRemoteConnID.setStatus('mandatory')
cdx6500frdcesPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("expedite", 3), ("newvalLow", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPriority.setStatus('mandatory')
cdx6500frdcesBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesBillingRecords.setStatus('mandatory')
cdx6500frdcesStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesStationNum.setStatus('mandatory')
cdx6500frdcesMaxInboundQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesMaxInboundQueue.setStatus('mandatory')
cdx6500SPSTFRDCEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3), )
if mibBuilder.loadTexts: cdx6500SPSTFRDCEStationTable.setStatus('mandatory')
cdx6500SPSTFRDCEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcesStatsPortNum"), (0, "FRDCE-OPT-MIB", "cdx6500frdcesStatsDLCI"))
if mibBuilder.loadTexts: cdx6500SPSTFRDCEStationEntry.setStatus('mandatory')
cdx6500frdcesStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesStatsPortNum.setStatus('mandatory')
cdx6500frdcesStatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesStatsDLCI.setStatus('mandatory')
cdx6500frdcesUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesUtilizationIn.setStatus('mandatory')
cdx6500frdcesUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesUtilizationOut.setStatus('mandatory')
cdx6500frdcesMaxSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesMaxSVCCount.setStatus('deprecated')
cdx6500frdcesCurrentSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCurrentSVCCount.setStatus('deprecated')
cdx6500frdcesCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharInTotal.setStatus('mandatory')
cdx6500frdcesCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharOutTotal.setStatus('mandatory')
cdx6500frdcesCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharsInPerSec.setStatus('mandatory')
cdx6500frdcesCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharsOutPerSec.setStatus('mandatory')
cdx6500frdcesPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktInTotal.setStatus('mandatory')
cdx6500frdcesPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktOutTotal.setStatus('mandatory')
cdx6500frdcesPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktsInPerSec.setStatus('mandatory')
cdx6500frdcesPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktsOutPerSec.setStatus('mandatory')
cdx6500frdcesPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPacketsQueued.setStatus('mandatory')
cdx6500frdcesFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFrameInTotal.setStatus('mandatory')
cdx6500frdcesFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFrameOutTotal.setStatus('mandatory')
cdx6500frdcesFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFramesInPerSec.setStatus('mandatory')
cdx6500frdcesFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFramesOutPerSec.setStatus('mandatory')
cdx6500frdcesInfoFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesInfoFramesIn.setStatus('deprecated')
cdx6500frdcesInfoFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesInfoFramesOut.setStatus('deprecated')
cdx6500frdcesRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRNRFramesIn.setStatus('deprecated')
cdx6500frdcesRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRNRFramesOut.setStatus('deprecated')
cdx6500frdcesRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRRFramesIn.setStatus('deprecated')
cdx6500frdcesRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRRFramesOut.setStatus('deprecated')
cdx6500frdcesREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesREJFramesIn.setStatus('deprecated')
cdx6500frdcesREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesREJFramesOut.setStatus('deprecated')
cdx6500frdcesDataPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesDataPktsIn.setStatus('mandatory')
cdx6500frdcesDataPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesDataPktsOut.setStatus('mandatory')
cdx6500frdcesResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesResetStats.setStatus('obsolete')
cdx6500frdcesBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesBoot.setStatus('obsolete')
cdx6500frdcesDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesDisable.setStatus('obsolete')
cdx6500frdcesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesEnable.setStatus('obsolete')
cdx6500ContFRATable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17))
cdx6500frdcepPContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1), )
if mibBuilder.loadTexts: cdx6500frdcepPContTable.setStatus('mandatory')
cdx6500frdcepPContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcepContPortNumber"))
if mibBuilder.loadTexts: cdx6500frdcepPContEntry.setStatus('mandatory')
cdx6500frdcepContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cdx6500frdcepContPortNumber.setStatus('mandatory')
cdx6500frdcepContPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("resetstats", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcepContPortControl.setStatus('mandatory')
cdx6500frdcesSContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2), )
if mibBuilder.loadTexts: cdx6500frdcesSContTable.setStatus('mandatory')
cdx6500frdcesSContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcesStationPortNumber"), (0, "FRDCE-OPT-MIB", "cdx6500frdcesStationDLCI"))
if mibBuilder.loadTexts: cdx6500frdcesSContEntry.setStatus('mandatory')
cdx6500frdcesStationPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cdx6500frdcesStationPortNumber.setStatus('mandatory')
cdx6500frdcesStationDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: cdx6500frdcesStationDLCI.setStatus('mandatory')
cdx6500frdcesStationControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("resetstats", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesStationControl.setStatus('mandatory')
mibBuilder.exportSymbols("FRDCE-OPT-MIB", cdx6500frdcepStatsPortNum=cdx6500frdcepStatsPortNum, cdx6500frdcesRemoteConnID=cdx6500frdcesRemoteConnID, cdx6500SPCTFRDCEStationTable=cdx6500SPCTFRDCEStationTable, cdx6500=cdx6500, cdx6500frdcepNN1=cdx6500frdcepNN1, cdx6500frdcesCfgDLCI=cdx6500frdcesCfgDLCI, cdx6500frdcesBoot=cdx6500frdcesBoot, cdx6500SPCTFRDCEStationEntry=cdx6500SPCTFRDCEStationEntry, cdx6500frdcepNT1=cdx6500frdcepNT1, cdx6500frdcesRNRFramesIn=cdx6500frdcesRNRFramesIn, cdx6500frdcepBiDirAnnexD=cdx6500frdcepBiDirAnnexD, cdx6500frdcesCharsOutPerSec=cdx6500frdcesCharsOutPerSec, cdx6500frdcepConnectionType=cdx6500frdcepConnectionType, cdx6500frdcesStatsDLCI=cdx6500frdcesStatsDLCI, cdx6500Statistics=cdx6500Statistics, cdx6500frdcepMaxStations=cdx6500frdcepMaxStations, cdx6500frdcepN392=cdx6500frdcepN392, cdx6500frdcepCharsOutPerSec=cdx6500frdcepCharsOutPerSec, cdx6500frdcesREJFramesIn=cdx6500frdcesREJFramesIn, cdx6500frdcepSubaddress=cdx6500frdcepSubaddress, cdx6500frdcepDiscardControlOptions=cdx6500frdcepDiscardControlOptions, cdx6500frdcepT392=cdx6500frdcepT392, cdx6500PPSTFRDCEPortTable=cdx6500PPSTFRDCEPortTable, cdx6500frdcesPacketsQueued=cdx6500frdcesPacketsQueued, cdx6500frdcepNT2=cdx6500frdcepNT2, cdx6500frdcepUtilizationOut=cdx6500frdcepUtilizationOut, cdx6500frdcepPortSpeed=cdx6500frdcepPortSpeed, cdx6500frdcesAutocallMnem=cdx6500frdcesAutocallMnem, cdx6500frdcepFramesInPerSec=cdx6500frdcepFramesInPerSec, cdx6500frdcepPortStatus=cdx6500frdcepPortStatus, cdx6500frdcepN391=cdx6500frdcepN391, cdx6500PCTFRDCEPortEntry=cdx6500PCTFRDCEPortEntry, cdx6500frdcesFrameInTotal=cdx6500frdcesFrameInTotal, cdx6500frdcepFrameOutTotal=cdx6500frdcepFrameOutTotal, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500PCTFRDCEPortTable=cdx6500PCTFRDCEPortTable, cdx6500frdcepN393=cdx6500frdcepN393, cdx6500frdcesUtilizationIn=cdx6500frdcesUtilizationIn, cdx6500frdcesREJFramesOut=cdx6500frdcesREJFramesOut, cdx6500frdcepOverrunErrors=cdx6500frdcepOverrunErrors, cdx6500frdcesFramesOutPerSec=cdx6500frdcesFramesOutPerSec, cdx6500frdcesCharInTotal=cdx6500frdcesCharInTotal, cdx6500frdcesBillingRecords=cdx6500frdcesBillingRecords, cdx6500ContFRATable=cdx6500ContFRATable, cdx6500frdcepNN2=cdx6500frdcepNN2, cdx6500frdcepPContTable=cdx6500frdcepPContTable, cdx6500frdcesResetStats=cdx6500frdcesResetStats, cdx6500frdcesRRFramesIn=cdx6500frdcesRRFramesIn, cdx6500frdcesMaxInboundQueue=cdx6500frdcesMaxInboundQueue, cdx6500frdcesFrameOutTotal=cdx6500frdcesFrameOutTotal, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500frdcepCtrlProtocol=cdx6500frdcepCtrlProtocol, cdx6500frdcesAutocallTimeout=cdx6500frdcesAutocallTimeout, cdx6500frdcepUnderrunErrors=cdx6500frdcepUnderrunErrors, cdx6500frdcesRNRFramesOut=cdx6500frdcesRNRFramesOut, cdx6500frdcesSContTable=cdx6500frdcesSContTable, cdx6500frdcepCRCErrors=cdx6500frdcepCRCErrors, cdx6500frdcesPktsOutPerSec=cdx6500frdcesPktsOutPerSec, cdx6500frdcesPktOutTotal=cdx6500frdcesPktOutTotal, cdx6500frdcepFramesOutPerSec=cdx6500frdcepFramesOutPerSec, codex=codex, cdx6500frdcesDataPktsOut=cdx6500frdcesDataPktsOut, cdx6500frdcepContPortNumber=cdx6500frdcepContPortNumber, cdx6500frdcesCurrentSVCCount=cdx6500frdcesCurrentSVCCount, cdx6500frdcesPktsInPerSec=cdx6500frdcesPktsInPerSec, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500frdcepV24ElectricalInterfaceOption=cdx6500frdcepV24ElectricalInterfaceOption, cdx6500frdcesDataPktsIn=cdx6500frdcesDataPktsIn, cdx6500frdcesStationDLCI=cdx6500frdcesStationDLCI, cdx6500frdcesSContEntry=cdx6500frdcesSContEntry, cdx6500frdcepCharInTotal=cdx6500frdcepCharInTotal, cdx6500frdcepControlProtocolOptions=cdx6500frdcepControlProtocolOptions, cdx6500frdcesUtilizationOut=cdx6500frdcesUtilizationOut, cdx6500SPSTFRDCEStationEntry=cdx6500SPSTFRDCEStationEntry, cdx6500frdcepFrameInTotal=cdx6500frdcepFrameInTotal, cdx6500frdcepNN3=cdx6500frdcepNN3, cdx6500frdcepCharsInPerSec=cdx6500frdcepCharsInPerSec, cdx6500frdcesStatsPortNum=cdx6500frdcesStatsPortNum, cdx6500frdcepT391=cdx6500frdcepT391, cdx6500frdcesRRFramesOut=cdx6500frdcesRRFramesOut, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500frdcepCfgPortNum=cdx6500frdcepCfgPortNum, cdx6500frdcesMaxAutocalls=cdx6500frdcesMaxAutocalls, cdx6500frdcesCharsInPerSec=cdx6500frdcesCharsInPerSec, cdx6500frdcesStationControl=cdx6500frdcesStationControl, cdx6500Controls=cdx6500Controls, cdxProductSpecific=cdxProductSpecific, cdx6500frdcesDisable=cdx6500frdcesDisable, cdx6500frdcepInvertTXClock=cdx6500frdcepInvertTXClock, cdx6500frdcepClockSpeed=cdx6500frdcepClockSpeed, cdx6500frdcepClockSource=cdx6500frdcepClockSource, Counter16=Counter16, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500frdcepContPortControl=cdx6500frdcepContPortControl, cdx6500frdcepHighSpeedElectricalInterfaceOption=cdx6500frdcepHighSpeedElectricalInterfaceOption, cdx6500frdcesInfoFramesOut=cdx6500frdcesInfoFramesOut, cdx6500PPSTFRDCEPortEntry=cdx6500PPSTFRDCEPortEntry, cdx6500frdcepPContEntry=cdx6500frdcepPContEntry, cdx6500frdcepCharOutTotal=cdx6500frdcepCharOutTotal, cdx6500frdcesMaxSVCCount=cdx6500frdcesMaxSVCCount, cdx6500frdcesPriority=cdx6500frdcesPriority, cdx6500frdcepElectricalInterfaceType=cdx6500frdcepElectricalInterfaceType, cdx6500frdcesFramesInPerSec=cdx6500frdcesFramesInPerSec, cdx6500Configuration=cdx6500Configuration, DisplayString=DisplayString, cdx6500frdcepUtilizationIn=cdx6500frdcepUtilizationIn, cdx6500frdcesStationPortNumber=cdx6500frdcesStationPortNumber, cdx6500frdcesStationNum=cdx6500frdcesStationNum, PhysAddress=PhysAddress, cdx6500frdcesCfgPortNum=cdx6500frdcesCfgPortNum, cdx6500SPSTFRDCEStationTable=cdx6500SPSTFRDCEStationTable, cdx6500frdcesPktInTotal=cdx6500frdcesPktInTotal, cdx6500frdcesInfoFramesIn=cdx6500frdcesInfoFramesIn, cdx6500frdcesEnable=cdx6500frdcesEnable, cdx6500frdcesCharOutTotal=cdx6500frdcesCharOutTotal, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup)
