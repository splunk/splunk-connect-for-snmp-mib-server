#
# PySNMP MIB module TNI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TNI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:16:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, iso, Counter32, Unsigned32, ModuleIdentity, Integer32, NotificationType, TimeTicks, NotificationType, IpAddress, MibIdentifier, Bits, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "iso", "Counter32", "Unsigned32", "ModuleIdentity", "Integer32", "NotificationType", "TimeTicks", "NotificationType", "IpAddress", "MibIdentifier", "Bits", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class CpsConnector(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38))
    namedValues = NamedValues(("rj-45", 10), ("stmm", 11), ("stsm", 12), ("scmm", 13), ("scsm", 14), ("scsmlh", 15), ("scsmelh", 16), ("scsmlhlw", 17), ("mtrjmm", 18), ("lc", 19), ("bnc", 20), ("stsmlh", 21), ("stsmelh", 22), ("scmm1300", 23), ("stmm1300", 24), ("mtrjsm", 25), ("serial26", 26), ("stmmlh", 27), ("scsmsh", 28), ("scsimplex", 29), ("bncdual", 30), ("db9rsxxx", 31), ("termblock", 32), ("rj11", 33), ("sc40km", 34), ("sc125km", 35), ("din6", 38))

transition = MibIdentifier((1, 3, 6, 1, 4, 1, 868))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1))
rptrProdsId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1))
rptrStackMId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1))
rptrSPSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 2))
ringProdsId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 2))
ringStackTRId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 2, 1))
brdgProdsId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 3))
brdgSwitchMId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 3, 1))
brdgFBRMId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 3, 2))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2))
rptrSMVer1Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 1))
rptrSMVer2Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 2))
rptrSM08TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 3))
rptrSM08TSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 4))
rptrSM06FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 5))
rptrSM06FSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 6))
rptrSM8T0Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 7))
rptrSM8TS0Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 8))
rptrSM6F0Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 9))
rptrSM6FS0Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 10))
rptrSM8T6FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 11))
rptrSM8TS6FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 12))
rptrSM8T6FSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 13))
rptrSM8TS6FSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 14))
rptrSM6F8TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 15))
rptrSM6FS8TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 16))
rptrSM6F8TSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 17))
rptrSM6FS8TSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 18))
rptrSM8T8TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 19))
rptrSM8TS8TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 20))
rptrSM8T8TSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 21))
rptrSM8TS8TSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 22))
rptrSM6F6FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 23))
rptrSM6FS6FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 24))
rptrSM6F6FSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 25))
rptrSM6FS6FSId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 26))
rptrSM24TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 27))
rptrSM16TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 28))
rptrSM14FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 29))
rptrSM12FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 30))
rptrSM6FId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 31))
rptrSM0Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 1, 32))
rptrSPSVer1Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 2, 1))
rptrESPS24Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 2, 2))
rptrESPS24SId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 1, 2, 3))
ringTRVer1Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 2, 1, 1))
ringTRVer2Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 2, 1, 2))
ringTR0Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 2, 1, 3))
ringTR16TId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 2, 1, 4))
brdgSWVer1Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 3, 1, 1))
repeater = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1))
tnStackM = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1, 1))
tnSMCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 1))
tnSMVer1 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 2))
tnSMVer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 3))
sps = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1, 2))
spsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1))
spsVer1 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2))
ring = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 2))
tnStackTR = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 2, 1))
tnTRCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1))
tnTRVer1 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2))
tnTRVer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 3))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 3))
sfbrm10x100 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 3, 1))
sfbrmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1))
sfbrmSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2))
sfbrmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3))
sfbrmAddrDB = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4))
tnSMComHwReset = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnSMComHwReset.setStatus('mandatory')
tnSMComMgmtHwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnSMComMgmtHwRev.setStatus('mandatory')
tnSMComDiagSwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnSMComDiagSwRev.setStatus('mandatory')
tnSMComMgmtSwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnSMComMgmtSwRev.setStatus('mandatory')
tnSMComIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnSMComIpAddr.setStatus('mandatory')
tnSMComNetMask = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnSMComNetMask.setStatus('mandatory')
spsReset = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsReset.setStatus('mandatory')
spsConfig = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsConfig.setStatus('mandatory')
spsBootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsBootpEnable.setStatus('mandatory')
spsBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsBootpServer.setStatus('mandatory')
spsBootpFilename = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsBootpFilename.setStatus('mandatory')
spsDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsDefaultGateway.setStatus('mandatory')
spsMgmtSegment = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsMgmtSegment.setStatus('mandatory')
spsIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 8), )
if mibBuilder.loadTexts: spsIpAddrTable.setStatus('mandatory')
spsIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 8, 1), ).setIndexNames((0, "TNI-MIB", "spsIpIfIndex"))
if mibBuilder.loadTexts: spsIpAddrEntry.setStatus('mandatory')
spsIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsIpIfIndex.setStatus('mandatory')
spsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsIpAddr.setStatus('mandatory')
spsIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsIpNetMask.setStatus('mandatory')
spsTrapTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 9), )
if mibBuilder.loadTexts: spsTrapTable.setStatus('mandatory')
spsTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 9, 1), ).setIndexNames((0, "TNI-MIB", "spsTrapIndex"))
if mibBuilder.loadTexts: spsTrapEntry.setStatus('mandatory')
spsTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsTrapIndex.setStatus('mandatory')
spsTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsTrapDestination.setStatus('mandatory')
spsTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsTrapCommunity.setStatus('mandatory')
spsMaxSegment = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsMaxSegment.setStatus('mandatory')
spsPasswdReset = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsPasswdReset.setStatus('mandatory')
spsExternalPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsExternalPowerSupply.setStatus('mandatory')
spsDisplayString = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsDisplayString.setStatus('mandatory')
spsRptrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 5), )
if mibBuilder.loadTexts: spsRptrGroupTable.setStatus('mandatory')
spsRptrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 5, 1), ).setIndexNames((0, "TNI-MIB", "spsRptrGroupIndex"))
if mibBuilder.loadTexts: spsRptrGroupEntry.setStatus('mandatory')
spsRptrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsRptrGroupIndex.setStatus('mandatory')
spsRptrGroupUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsRptrGroupUnitId.setStatus('mandatory')
spsRptrGroupInternalPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsRptrGroupInternalPowerSupply.setStatus('mandatory')
spsRptrPortTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6), )
if mibBuilder.loadTexts: spsRptrPortTable.setStatus('mandatory')
spsRptrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1), ).setIndexNames((0, "TNI-MIB", "spsRptrPortGroupIndex"), (0, "TNI-MIB", "spsRptrPortIndex"))
if mibBuilder.loadTexts: spsRptrPortEntry.setStatus('mandatory')
spsRptrPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsRptrPortGroupIndex.setStatus('mandatory')
spsRptrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsRptrPortIndex.setStatus('mandatory')
spsRptrPortSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsRptrPortSegment.setStatus('mandatory')
spsRptrPortSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsRptrPortSrcAddr.setStatus('mandatory')
spsRptrPortEavesdropping = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsRptrPortEavesdropping.setStatus('mandatory')
spsRptrPortIntrusion = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsRptrPortIntrusion.setStatus('mandatory')
spsRptrPortCollisionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31, 63, 127, 255))).clone(namedValues=NamedValues(("collision-limit-31", 31), ("collision-limit-63", 63), ("collision-limit-127", 127), ("collision-limit-155", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsRptrPortCollisionLimit.setStatus('mandatory')
spsRptrPortEnableIntruderDetectTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spsRptrPortEnableIntruderDetectTrap.setStatus('mandatory')
spsRptrPortDisableIntruder = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: spsRptrPortDisableIntruder.setStatus('mandatory')
spsSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 7), )
if mibBuilder.loadTexts: spsSerialPortTable.setStatus('mandatory')
spsSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 7, 1), ).setIndexNames((0, "TNI-MIB", "spsSerialPortIndex"))
if mibBuilder.loadTexts: spsSerialPortEntry.setStatus('mandatory')
spsSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsSerialPortIndex.setStatus('mandatory')
spsSerialPortModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsSerialPortModemControl.setStatus('mandatory')
spsMonitorSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 8), )
if mibBuilder.loadTexts: spsMonitorSegmentTable.setStatus('mandatory')
spsMonitorSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 8, 1), ).setIndexNames((0, "TNI-MIB", "spsMonitorSegmentIndex"))
if mibBuilder.loadTexts: spsMonitorSegmentEntry.setStatus('mandatory')
spsMonitorSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsMonitorSegmentIndex.setStatus('mandatory')
spsMonitorSegmentTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsMonitorSegmentTotalFrames.setStatus('mandatory')
spsMonitorSegmentTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsMonitorSegmentTotalOctets.setStatus('mandatory')
spsMonitorSegmentTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 1, 2, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spsMonitorSegmentTotalErrors.setStatus('mandatory')
tnTRComHwReset = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnTRComHwReset.setStatus('mandatory')
tnTRComMgmtHwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRComMgmtHwRev.setStatus('mandatory')
tnTRComDiagSwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRComDiagSwRev.setStatus('mandatory')
tnTRComMgmtSwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRComMgmtSwRev.setStatus('mandatory')
tnTRComIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnTRComIpAddr.setStatus('mandatory')
tnTRComNetMask = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnTRComNetMask.setStatus('mandatory')
tnTRComIfaceCapacity = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRComIfaceCapacity.setStatus('mandatory')
tnTRV1Commands = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-op", 1), ("open", 2), ("reset", 3), ("close", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnTRV1Commands.setStatus('mandatory')
tnTRV1RingStatus = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1RingStatus.setStatus('mandatory')
tnTRV1RingState = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openFailure", 5), ("ringFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1RingState.setStatus('mandatory')
tnTRV1RingOpenStatus = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOpen", 1), ("badParam", 2), ("lobeFailed", 3), ("signalLoss", 4), ("insertionTimeout", 5), ("ringFailed", 6), ("beaconing", 7), ("duplicateMAC", 8), ("requestFailed", 9), ("removeReceived", 10), ("open", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1RingOpenStatus.setStatus('mandatory')
tnTRV1RingSpeed = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneMegabit", 2), ("fourMegabit", 3), ("sixteenMegabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnTRV1RingSpeed.setStatus('mandatory')
tnTRV1UpStream = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1UpStream.setStatus('mandatory')
tnTRV1ActMonParticipate = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnTRV1ActMonParticipate.setStatus('mandatory')
tnTRV1Functional = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnTRV1Functional.setStatus('mandatory')
tnTRV1StatsLineErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsLineErrors.setStatus('mandatory')
tnTRV1StatsBurstErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsBurstErrors.setStatus('mandatory')
tnTRV1StatsACErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsACErrors.setStatus('mandatory')
tnTRV1StatsAbortTransErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsAbortTransErrors.setStatus('mandatory')
tnTRV1StatsInternalErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsInternalErrors.setStatus('mandatory')
tnTRV1StatsLostFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsLostFrameErrors.setStatus('mandatory')
tnTRV1StatsReceiveCongestions = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsReceiveCongestions.setStatus('mandatory')
tnTRV1StatsFrameCopiedErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsFrameCopiedErrors.setStatus('mandatory')
tnTRV1StatsTokenErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsTokenErrors.setStatus('mandatory')
tnTRV1StatsSoftErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsSoftErrors.setStatus('mandatory')
tnTRV1StatsHardErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsHardErrors.setStatus('mandatory')
tnTRV1StatsSignalLoss = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsSignalLoss.setStatus('mandatory')
tnTRV1StatsTransmitBeacons = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsTransmitBeacons.setStatus('mandatory')
tnTRV1StatsRecoverys = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsRecoverys.setStatus('mandatory')
tnTRV1StatsLobeWires = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsLobeWires.setStatus('mandatory')
tnTRV1StatsRemoves = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsRemoves.setStatus('mandatory')
tnTRV1StatsSingles = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsSingles.setStatus('mandatory')
tnTRV1StatsFreqErrors = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1StatsFreqErrors.setStatus('optional')
tnTRV1TimerReturnRepeat = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerReturnRepeat.setStatus('mandatory')
tnTRV1TimerHolding = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerHolding.setStatus('mandatory')
tnTRV1TimerQueuePDU = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerQueuePDU.setStatus('mandatory')
tnTRV1TimerValidTransmit = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerValidTransmit.setStatus('mandatory')
tnTRV1TimerNoToken = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerNoToken.setStatus('mandatory')
tnTRV1TimerActiveMon = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerActiveMon.setStatus('mandatory')
tnTRV1TimerStandbyMon = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerStandbyMon.setStatus('mandatory')
tnTRV1TimerErrorReport = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerErrorReport.setStatus('mandatory')
tnTRV1TimerBeaconTransmit = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerBeaconTransmit.setStatus('mandatory')
tnTRV1TimerBeaconReceive = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 2, 1, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnTRV1TimerBeaconReceive.setStatus('mandatory')
tnIntruderDetect = NotificationType((1, 3, 6, 1, 4, 1, 868) + (0,1)).setObjects(("TNI-MIB", "spsRptrPortGroupIndex"), ("TNI-MIB", "spsRptrPortIndex"))
sfbrm100SystemTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1), )
if mibBuilder.loadTexts: sfbrm100SystemTable.setStatus('mandatory')
sfbrm100SystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100SysLocPortIndex"), (0, "TNI-MIB", "sfbrm100SysSecIndex"))
if mibBuilder.loadTexts: sfbrm100SystemEntry.setStatus('mandatory')
sfbrm100SysLocPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysLocPortIndex.setStatus('mandatory')
sfbrm100SysSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysSecIndex.setStatus('mandatory')
sfbrm100SysGrpString = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysGrpString.setStatus('mandatory')
sfbrm100SysMRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysMRevision.setStatus('mandatory')
sfbrm100SysCfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysCfgMatch.setStatus('mandatory')
sfbrm100SysBootLoaderRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysBootLoaderRevision.setStatus('mandatory')
sfbrm100SysFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysFirmwareRevision.setStatus('mandatory')
sfbrm100SysSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysSerialNumber.setStatus('mandatory')
sfbrm100SysBIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysBIAddress.setStatus('mandatory')
sfbrm100SysSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysSlotIndex.setStatus('mandatory')
sfbrm100SysNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysNumPorts.setStatus('mandatory')
sfbrm100SysMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 12), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysMACAddress.setStatus('mandatory')
sfbrm100SystemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SystemReset.setStatus('mandatory')
sfbrm100SysIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysIPaddress.setStatus('mandatory')
sfbrm100SysSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysSubnetMask.setStatus('mandatory')
sfbrm100SysDefGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysDefGateway.setStatus('mandatory')
sfbrm100SysSNMPTrapMgr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysSNMPTrapMgr.setStatus('mandatory')
sfbrm100SysRadiusAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysRadiusAuth.setStatus('mandatory')
sfbrm100SysRadiusServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysRadiusServerAddr.setStatus('mandatory')
sfbrm100SysRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysRadiusSecret.setStatus('mandatory')
sfbrm100SysRadiusRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysRadiusRetry.setStatus('mandatory')
sfbrm100SysRadiusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysRadiusTimeout.setStatus('mandatory')
sfbrm100SysDHCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysDHCPEnable.setStatus('mandatory')
sfbrm100SysSerialAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysSerialAccess.setStatus('mandatory')
sfbrm100SysTLPT = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysTLPT.setStatus('mandatory')
sfbrm100SysTFTPServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysTFTPServerAddr.setStatus('mandatory')
sfbrm100SysTFTPfilename = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysTFTPfilename.setStatus('mandatory')
sfbrm100SysTFTPCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("perform", 1), ("donothing", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysTFTPCmd.setStatus('mandatory')
sfbrm100SysTFTPServerIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysTFTPServerIgnore.setStatus('mandatory')
sfbrm100SysMgmtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysMgmtVlanId.setStatus('mandatory')
sfbrm100SysSNMPAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysSNMPAccess.setStatus('mandatory')
sfbrm100SysIPAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysIPAccess.setStatus('mandatory')
sfbrm100SysLastGaspPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpTrap", 1), ("oamDyingGaspPdu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysLastGaspPdu.setStatus('mandatory')
sfbrm100SysLastGaspPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysLastGaspPort.setStatus('mandatory')
sfbrm100SysLocalLPT = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysLocalLPT.setStatus('mandatory')
sfbrm100SysLPTPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysLPTPort.setStatus('mandatory')
sfbrm100SysAutoUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysAutoUpgrade.setStatus('mandatory')
sfbrm100SysFormFactorSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysFormFactorSlot.setStatus('mandatory')
sfbrm100SysFormFactorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SysFormFactorPort.setStatus('mandatory')
sfbrm100SysOAMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 1, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SysOAMPort.setStatus('mandatory')
sfbrm100SwTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1), )
if mibBuilder.loadTexts: sfbrm100SwTable.setStatus('mandatory')
sfbrm100SwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100SwPortIndex"), (0, "TNI-MIB", "sfbrm100SwSecIndex"))
if mibBuilder.loadTexts: sfbrm100SwEntry.setStatus('mandatory')
sfbrm100SwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SwPortIndex.setStatus('mandatory')
sfbrm100SwSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SwSecIndex.setStatus('mandatory')
sfbrm100SwATUAgeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwATUAgeTimeout.setStatus('mandatory')
sfbrm100SwIngressMonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIngressMonPort.setStatus('mandatory')
sfbrm100SwEgressMonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwEgressMonPort.setStatus('mandatory')
sfbrm100SwFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwFactoryDefaults.setStatus('mandatory')
sfbrm100SwResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwResetCounters.setStatus('mandatory')
sfbrm100SwHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cntRx", 1), ("cntTx", 2), ("cntRxTx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwHistMode.setStatus('mandatory')
sfbrm100SwIEEEPriRemap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap0.setStatus('mandatory')
sfbrm100SwIEEEPriRemap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap1.setStatus('mandatory')
sfbrm100SwIEEEPriRemap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap2.setStatus('mandatory')
sfbrm100SwIEEEPriRemap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap3.setStatus('mandatory')
sfbrm100SwIEEEPriRemap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap4.setStatus('mandatory')
sfbrm100SwIEEEPriRemap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap5.setStatus('mandatory')
sfbrm100SwIEEEPriRemap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap6.setStatus('mandatory')
sfbrm100SwIEEEPriRemap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIEEEPriRemap7.setStatus('mandatory')
sfbrm100SwFlushFdb = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flushAll", 1), ("flushNonStatic", 2), ("doNothing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwFlushFdb.setStatus('mandatory')
sfbrm100SwFlushVlandb = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flushAll", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwFlushVlandb.setStatus('mandatory')
sfbrm100SwUseDoubleTagData = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwUseDoubleTagData.setStatus('mandatory')
sfbrm100SwFiberRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwFiberRedundancy.setStatus('mandatory')
sfbrm100SwFiberRedundRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("revert", 1), ("noRevert", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwFiberRedundRevert.setStatus('mandatory')
sfbrm100SwFbrRedundActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwFbrRedundActivePort.setStatus('mandatory')
sfbrm100SwSupressVlanViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwSupressVlanViolations.setStatus('mandatory')
sfbrm100SwSupressMACViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwSupressMACViolations.setStatus('mandatory')
sfbrm100SwIPPrioTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 2), )
if mibBuilder.loadTexts: sfbrm100SwIPPrioTable.setStatus('mandatory')
sfbrm100SwIPPrioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 2, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100SwIPPrioPortIndex"), (0, "TNI-MIB", "sfbrm100SwIPPrioIndex"))
if mibBuilder.loadTexts: sfbrm100SwIPPrioEntry.setStatus('mandatory')
sfbrm100SwIPPrioPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SwIPPrioPortIndex.setStatus('mandatory')
sfbrm100SwIPPrioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SwIPPrioIndex.setStatus('mandatory')
sfbrm100SwIPPrioTC = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100SwIPPrioTC.setStatus('mandatory')
sfbrm100SwIPPrioRemap = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pri0", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SwIPPrioRemap.setStatus('mandatory')
sfbrm100PortTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1), )
if mibBuilder.loadTexts: sfbrm100PortTable.setStatus('mandatory')
sfbrm100PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100PortLocIndex"), (0, "TNI-MIB", "sfbrm100PortRmtIndex"))
if mibBuilder.loadTexts: sfbrm100PortEntry.setStatus('mandatory')
sfbrm100PortLocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortLocIndex.setStatus('mandatory')
sfbrm100PortRmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortRmtIndex.setStatus('mandatory')
sfbrm100PortGrpString = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortGrpString.setStatus('mandatory')
sfbrm100PortConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 4), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortConnType.setStatus('mandatory')
sfbrm100PortOAMState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortOAMState.setStatus('mandatory')
sfbrm100PortOAMModeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortOAMModeCtrl.setStatus('mandatory')
sfbrm100PortRmtLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oamLoopback", 1), ("alternateLoopback", 2), ("disable", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortRmtLoopback.setStatus('mandatory')
sfbrm100PortIgnoreLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("process", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIgnoreLoopback.setStatus('mandatory')
sfbrm100PortAdvPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noPause", 1), ("symPause", 2), ("asymPauseLp", 3), ("asymPauseCon", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdvPause.setStatus('mandatory')
sfbrm100PortAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdv1000FDX.setStatus('mandatory')
sfbrm100PortAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdv1000HDX.setStatus('mandatory')
sfbrm100PortAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdv100FDX.setStatus('mandatory')
sfbrm100PortAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdv100HDX.setStatus('mandatory')
sfbrm100PortAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdv10FDX.setStatus('mandatory')
sfbrm100PortAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdv10HDX.setStatus('mandatory')
sfbrm100PortAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("negotiating", 3), ("resolved", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAutoneg.setStatus('mandatory')
sfbrm100PortFDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortFDuplex.setStatus('mandatory')
sfbrm100PortFSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1000", 3), ("notApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortFSpeed.setStatus('mandatory')
sfbrm100PortLpPauseAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noPause", 1), ("symPause", 2), ("asymPauseLp", 3), ("asymPauseCon", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortLpPauseAbility.setStatus('mandatory')
sfbrm100PortLpAutonegAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("spdAutoDupAuto", 1), ("spd1000DupAuto", 2), ("spd100DupAuto", 3), ("spd10DupAuto", 4), ("spdAutoDupFull", 5), ("spdAutoDupHalf", 6), ("spd1000DupFull", 7), ("spd1000DupHalf", 8), ("spd100DupFull", 9), ("spd100DupHalf", 10), ("spd10DupFull", 11), ("spd10DupHalf", 12), ("notcapable", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortLpAutonegAbility.setStatus('mandatory')
sfbrm100PortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortLinkState.setStatus('mandatory')
sfbrm100PortAutonegState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resolved", 1), ("notResolved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortAutonegState.setStatus('mandatory')
sfbrm100PortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortDuplex.setStatus('mandatory')
sfbrm100PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1000", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortSpeed.setStatus('mandatory')
sfbrm100PortFEFI = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortFEFI.setStatus('mandatory')
sfbrm100PortAutocross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mdi", 1), ("mdiX", 2), ("autoCross", 3), ("notApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAutocross.setStatus('mandatory')
sfbrm100PortLock = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortLock.setStatus('mandatory')
sfbrm100PortIgnoreWrongData = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIgnoreWrongData.setStatus('mandatory')
sfbrm100PortIGMPSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIGMPSnoop.setStatus('mandatory')
sfbrm100PortDoubleTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortDoubleTagging.setStatus('mandatory')
sfbrm100PortUseIPTC = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortUseIPTC.setStatus('mandatory')
sfbrm100PortUseTagTC = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortUseTagTC.setStatus('mandatory')
sfbrm100PortUseBothTC = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useIP", 1), ("useTag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortUseBothTC.setStatus('mandatory')
sfbrm100PortVLANTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortVLANTunnel.setStatus('mandatory')
sfbrm100PortFwdUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortFwdUnknown.setStatus('mandatory')
sfbrm100PortDefForward = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortDefForward.setStatus('mandatory')
sfbrm100PortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAdminState.setStatus('mandatory')
sfbrm100PortVTUPriOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortVTUPriOverride.setStatus('mandatory')
sfbrm100PortSAPriOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortSAPriOverride.setStatus('mandatory')
sfbrm100PortDAPriOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortDAPriOverride.setStatus('mandatory')
sfbrm100PortVLANStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vlanDisabled", 1), ("fallback", 2), ("check", 3), ("secure", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortVLANStatus.setStatus('mandatory')
sfbrm100PortDiscardTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortDiscardTagged.setStatus('mandatory')
sfbrm100PortDiscardUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortDiscardUntagged.setStatus('mandatory')
sfbrm100PortEgressMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortEgressMonitor.setStatus('mandatory')
sfbrm100PortIngressMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIngressMonitor.setStatus('mandatory')
sfbrm100PortPri3IngressRateCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sameAsPri2", 1), ("twiceAsPri2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortPri3IngressRateCtrl.setStatus('mandatory')
sfbrm100PortPri2IngressRateCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sameAsPri1", 1), ("twiceAsPri1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortPri2IngressRateCtrl.setStatus('mandatory')
sfbrm100PortPri1IngressRateCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sameAsPri0", 1), ("twiceAsPri0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortPri1IngressRateCtrl.setStatus('mandatory')
sfbrm100PortPri0IngressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("noLimit", 1), ("rate64K", 2), ("rate96K", 3), ("rate128K", 4), ("rate160K", 5), ("rate192K", 6), ("rate224K", 7), ("rate256K", 8), ("rate320K", 9), ("rate384K", 10), ("rate512K", 11), ("rate768K", 12), ("rate1M", 13), ("rate1-2M", 14), ("rate1-5M", 15), ("rate2M", 16), ("rate3M", 17), ("rate4M", 18), ("rate5M", 19), ("rate8M", 20), ("rate10M", 21), ("rate20M", 22), ("rate30M", 23), ("rate40M", 24), ("rate60M", 25), ("rate80M", 26), ("rate128M", 27), ("rate256M", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortPri0IngressRate.setStatus('mandatory')
sfbrm100PortIngressLimitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("bCastMCastFloodedUCast", 2), ("bCastMCastOnly", 3), ("bCastOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIngressLimitMode.setStatus('mandatory')
sfbrm100PortEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("noLimit", 1), ("rate64K", 2), ("rate96K", 3), ("rate128K", 4), ("rate160K", 5), ("rate192K", 6), ("rate224K", 7), ("rate256K", 8), ("rate320K", 9), ("rate384K", 10), ("rate512K", 11), ("rate768K", 12), ("rate1M", 13), ("rate1-2M", 14), ("rate1-5M", 15), ("rate2M", 16), ("rate3M", 17), ("rate4M", 18), ("rate5M", 19), ("rate8M", 20), ("rate10M", 21), ("rate20M", 22), ("rate30M", 23), ("rate40M", 24), ("rate60M", 25), ("rate80M", 26), ("rate128M", 27), ("rate256M", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortEgressRate.setStatus('mandatory')
sfbrm100PortDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortDefaultPriority.setStatus('mandatory')
sfbrm100PortForceDefVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortForceDefVLANId.setStatus('mandatory')
sfbrm100PortDefaultVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortDefaultVLANId.setStatus('mandatory')
sfbrm100PortBasedVLANTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortBasedVLANTbl.setStatus('mandatory')
sfbrm100PortIEEEPriRemap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap0.setStatus('mandatory')
sfbrm100PortIEEEPriRemap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap1.setStatus('mandatory')
sfbrm100PortIEEEPriRemap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap2.setStatus('mandatory')
sfbrm100PortIEEEPriRemap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap3.setStatus('mandatory')
sfbrm100PortIEEEPriRemap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap4.setStatus('mandatory')
sfbrm100PortIEEEPriRemap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap5.setStatus('mandatory')
sfbrm100PortIEEEPriRemap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap6.setStatus('mandatory')
sfbrm100PortIEEEPriRemap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIEEEPriRemap7.setStatus('mandatory')
sfbrm100PortVCTest = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perform", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortVCTest.setStatus('mandatory')
sfbrm100PortVCTxMDI0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("impedanceMismatch", 2), ("shortInCable", 3), ("openInCable", 4), ("failed", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortVCTxMDI0Status.setStatus('mandatory')
sfbrm100PortTxMDI0Dist = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lessThan50m", 1), ("between50m80m", 2), ("between80m110m", 3), ("between110m140m", 4), ("morethan140m", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortTxMDI0Dist.setStatus('mandatory')
sfbrm100PortVCRxMDI1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("impedanceMismatch", 2), ("shortInCable", 3), ("openInCable", 4), ("failed", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortVCRxMDI1Status.setStatus('mandatory')
sfbrm100PortRxMDI1Dist = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lessThan50m", 1), ("between50m80m", 2), ("between80m110m", 3), ("between110m140m", 4), ("morethan140m", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortRxMDI1Dist.setStatus('mandatory')
sfbrm100PortVCMDI2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("impedanceMismatch", 2), ("shortInCable", 3), ("openInCable", 4), ("failed", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortVCMDI2Status.setStatus('mandatory')
sfbrm100PortMDI2Dist = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lessThan50m", 1), ("between50m80m", 2), ("between80m110m", 3), ("between110m140m", 4), ("morethan140m", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortMDI2Dist.setStatus('mandatory')
sfbrm100PortVCMDI3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("impedanceMismatch", 2), ("shortInCable", 3), ("openInCable", 4), ("failed", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortVCMDI3Status.setStatus('mandatory')
sfbrm100PortMDI3Dist = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lessThan50m", 1), ("between50m80m", 2), ("between80m110m", 3), ("between110m140m", 4), ("morethan140m", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortMDI3Dist.setStatus('mandatory')
sfbrm100PortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("donothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortResetCounters.setStatus('mandatory')
sfbrm100PortIPTrafficAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIPTrafficAccess.setStatus('mandatory')
sfbrm100PortResetOAMCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortResetOAMCounters.setStatus('mandatory')
sfbrm100PortForceAutoUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortForceAutoUpgrade.setStatus('mandatory')
sfbrm100PortModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mode10or100or1000BaseT", 1), ("mode1000BaseX", 2), ("mode10or100BaseT", 3), ("mode100BaseFX", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortModeType.setStatus('mandatory')
sfbrm100PortOAMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortOAMMode.setStatus('mandatory')
sfbrm100PortPhyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortPhyNumber.setStatus('mandatory')
sfbrm100PortIngressRateLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("noLimit", 1), ("rate64K", 2), ("rate128K", 3), ("rate192K", 4), ("rate256K", 5), ("rate320K", 6), ("rate384K", 7), ("rate512K", 8), ("rate768K", 9), ("rate1M", 10), ("rate2M", 11), ("rate3M", 12), ("rate4M", 13), ("rate6M", 14), ("rate8M", 15), ("rate10M", 16), ("rate20M", 17), ("rate30M", 18), ("rate40M", 19), ("rate50M", 20), ("rate60M", 21), ("rate70M", 22), ("rate80M", 23), ("rate100M", 24), ("rate200M", 25), ("rate300M", 26), ("rate400M", 27), ("rate500M", 28), ("rate600M", 29), ("rate700M", 30), ("rate800M", 31), ("rate900M", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortIngressRateLimit2.setStatus('mandatory')
sfbrm100PortEgressRateLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("noLimit", 1), ("rate64K", 2), ("rate128K", 3), ("rate192K", 4), ("rate256K", 5), ("rate320K", 6), ("rate384K", 7), ("rate512K", 8), ("rate768K", 9), ("rate1M", 10), ("rate2M", 11), ("rate3M", 12), ("rate4M", 13), ("rate6M", 14), ("rate8M", 15), ("rate10M", 16), ("rate20M", 17), ("rate30M", 18), ("rate40M", 19), ("rate50M", 20), ("rate60M", 21), ("rate70M", 22), ("rate80M", 23), ("rate100M", 24), ("rate200M", 25), ("rate300M", 26), ("rate400M", 27), ("rate500M", 28), ("rate600M", 29), ("rate700M", 30), ("rate800M", 31), ("rate900M", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortEgressRateLimit2.setStatus('mandatory')
sfbrm100PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2), )
if mibBuilder.loadTexts: sfbrm100PortStatsTable.setStatus('mandatory')
sfbrm100PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100PortLocStatsIndex"), (0, "TNI-MIB", "sfbrm100PortRmtStatsIndex"))
if mibBuilder.loadTexts: sfbrm100PortStatsEntry.setStatus('mandatory')
sfbrm100PortLocStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortLocStatsIndex.setStatus('mandatory')
sfbrm100PortRmtStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortRmtStatsIndex.setStatus('mandatory')
sfbrm100PortInGoodOctetsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInGoodOctetsLo.setStatus('mandatory')
sfbrm100PortInGoodOctetsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInGoodOctetsHi.setStatus('mandatory')
sfbrm100PortInBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInBadOctets.setStatus('mandatory')
sfbrm100PortInUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInUnicasts.setStatus('mandatory')
sfbrm100PortInBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInBroadcasts.setStatus('mandatory')
sfbrm100PortInMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInMulticasts.setStatus('mandatory')
sfbrm100PortInPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInPause.setStatus('mandatory')
sfbrm100PortInUndersize = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInUndersize.setStatus('mandatory')
sfbrm100PortInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInFragments.setStatus('mandatory')
sfbrm100PortInOversize = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInOversize.setStatus('mandatory')
sfbrm100PortInJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInJabber.setStatus('mandatory')
sfbrm100PortInRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInRxErr.setStatus('mandatory')
sfbrm100PortInFCSErr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInFCSErr.setStatus('mandatory')
sfbrm100PortIn64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortIn64Octets.setStatus('mandatory')
sfbrm100PortIn65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortIn65to127Octets.setStatus('mandatory')
sfbrm100PortIn128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortIn128to255Octets.setStatus('mandatory')
sfbrm100PortIn256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortIn256to511Octets.setStatus('mandatory')
sfbrm100PortIn512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortIn512to1023Octets.setStatus('mandatory')
sfbrm100PortIn1024toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortIn1024toMaxOctets.setStatus('mandatory')
sfbrm100PortOutOctetsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutOctetsLo.setStatus('mandatory')
sfbrm100PortOutOctetsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutOctetsHi.setStatus('mandatory')
sfbrm100PortOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutUnicasts.setStatus('mandatory')
sfbrm100PortOutBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutBroadcasts.setStatus('mandatory')
sfbrm100PortOutMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutMulticasts.setStatus('mandatory')
sfbrm100PortOutPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutPause.setStatus('mandatory')
sfbrm100PortOutDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutDeferred.setStatus('mandatory')
sfbrm100PortOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutCollisions.setStatus('mandatory')
sfbrm100PortOutSingle = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutSingle.setStatus('mandatory')
sfbrm100PortOutMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutMultiple.setStatus('mandatory')
sfbrm100PortOutExcessive = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutExcessive.setStatus('mandatory')
sfbrm100PortOutLate = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutLate.setStatus('mandatory')
sfbrm100PortOutFCSErr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutFCSErr.setStatus('mandatory')
sfbrm100PortInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInDiscard.setStatus('mandatory')
sfbrm100PortInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortInFiltered.setStatus('mandatory')
sfbrm100PortOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortOutFiltered.setStatus('mandatory')
sfbrm100DMITable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3), )
if mibBuilder.loadTexts: sfbrm100DMITable.setStatus('mandatory')
sfbrm100DMIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100DMILocPortIndex"), (0, "TNI-MIB", "sfbrm100DMIRmtPortIndex"))
if mibBuilder.loadTexts: sfbrm100DMIEntry.setStatus('mandatory')
sfbrm100DMILocPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMILocPortIndex.setStatus('mandatory')
sfbrm100DMIRmtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMIRmtPortIndex.setStatus('mandatory')
sfbrm100DMIRxPwrLvlPreset = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100DMIRxPwrLvlPreset.setStatus('mandatory')
sfbrm100DMIConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 4), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMIConnType.setStatus('mandatory')
sfbrm100DMIBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMIBitRate.setStatus('mandatory')
sfbrm100DMILenFor9x125umKM = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMILenFor9x125umKM.setStatus('mandatory')
sfbrm100DMILenFor9x125um100M = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMILenFor9x125um100M.setStatus('mandatory')
sfbrm100DMILenFor50x125um10M = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMILenFor50x125um10M.setStatus('mandatory')
sfbrm100DMILenFor625x125um10M = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMILenFor625x125um10M.setStatus('mandatory')
sfbrm100DMILenForCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMILenForCopper.setStatus('mandatory')
sfbrm100DMIId = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMIId.setStatus('mandatory')
sfbrm100DMILaserWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMILaserWavelength.setStatus('mandatory')
sfbrm100DMITemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMITemperature.setStatus('mandatory')
sfbrm100DMITempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 6), ("highAlarm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMITempAlarm.setStatus('mandatory')
sfbrm100DMITxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMITxBiasCurrent.setStatus('mandatory')
sfbrm100DMITxBiasAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 6), ("highAlarm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMITxBiasAlarm.setStatus('mandatory')
sfbrm100DMITxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMITxPowerLevel.setStatus('mandatory')
sfbrm100DMITxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 6), ("highAlarm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMITxPowerAlarm.setStatus('mandatory')
sfbrm100DMIRxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMIRxPowerLevel.setStatus('mandatory')
sfbrm100DMIRxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 6), ("highAlarm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100DMIRxPowerAlarm.setStatus('mandatory')
sfbrm100PortL2CPTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4), )
if mibBuilder.loadTexts: sfbrm100PortL2CPTable.setStatus('mandatory')
sfbrm100PortL2CPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100PortLocIndex"), (0, "TNI-MIB", "sfbrm100PortRmtIndex"))
if mibBuilder.loadTexts: sfbrm100PortL2CPEntry.setStatus('mandatory')
sfbrm100PortL2CPLocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortL2CPLocIndex.setStatus('mandatory')
sfbrm100PortL2CPRmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100PortL2CPRmtIndex.setStatus('mandatory')
sfbrm100STPProtocolsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100STPProtocolsFwd.setStatus('mandatory')
sfbrm100SlowProtocolsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100SlowProtocolsFwd.setStatus('mandatory')
sfbrm100PortAuthProtocolFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100PortAuthProtocolFwd.setStatus('mandatory')
sfbrm100ELMIProtocolFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100ELMIProtocolFwd.setStatus('mandatory')
sfbrm100LLDPProtocolFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100LLDPProtocolFwd.setStatus('mandatory')
sfbrm100BridgeMgmtProtocolsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100BridgeMgmtProtocolsFwd.setStatus('mandatory')
sfbrm100GARPBlockProtocolsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100GARPBlockProtocolsFwd.setStatus('mandatory')
sfbrm100BridgeBlkOtherMulticastsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100BridgeBlkOtherMulticastsFwd.setStatus('mandatory')
sfbrm100FwdDBTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1), )
if mibBuilder.loadTexts: sfbrm100FwdDBTable.setStatus('mandatory')
sfbrm100FwdDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100FwdLocPortIndex"), (0, "TNI-MIB", "sfbrm100FwdDBNum"), (0, "TNI-MIB", "sfbrm100FwdMacAddress"))
if mibBuilder.loadTexts: sfbrm100FwdDBEntry.setStatus('mandatory')
sfbrm100FwdLocPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100FwdLocPortIndex.setStatus('mandatory')
sfbrm100FwdDBNum = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100FwdDBNum.setStatus('mandatory')
sfbrm100FwdMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100FwdMacAddress.setStatus('mandatory')
sfbrm100FwdConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100FwdConnPort.setStatus('mandatory')
sfbrm100FwdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100FwdPriority.setStatus('mandatory')
sfbrm100FwdEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("staticNRL", 2), ("staticPA", 3), ("dynamic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100FwdEntryType.setStatus('mandatory')
sfbrm100FwdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("write", 1), ("delete", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100FwdEntryStatus.setStatus('mandatory')
sfbrm100VlanTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2), )
if mibBuilder.loadTexts: sfbrm100VlanTable.setStatus('mandatory')
sfbrm100VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1), ).setIndexNames((0, "TNI-MIB", "sfbrm100VlanLocPortIndex"), (0, "TNI-MIB", "sfbrm100VlanDBNum"), (0, "TNI-MIB", "sfbrm100VlanVID"))
if mibBuilder.loadTexts: sfbrm100VlanEntry.setStatus('mandatory')
sfbrm100VlanLocPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100VlanLocPortIndex.setStatus('mandatory')
sfbrm100VlanDBNum = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100VlanDBNum.setStatus('mandatory')
sfbrm100VlanVID = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfbrm100VlanVID.setStatus('mandatory')
sfbrm100VlanVIDPriOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanVIDPriOverride.setStatus('mandatory')
sfbrm100VlanVIDPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanVIDPriority.setStatus('mandatory')
sfbrm100VlanMemTagPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort1.setStatus('mandatory')
sfbrm100VlanMemTagPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort2.setStatus('mandatory')
sfbrm100VlanMemTagPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort3.setStatus('mandatory')
sfbrm100VlanMemTagPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort4.setStatus('mandatory')
sfbrm100VlanMemTagPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort5.setStatus('mandatory')
sfbrm100VlanMemTagPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort6.setStatus('mandatory')
sfbrm100VlanMemTagPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort7.setStatus('mandatory')
sfbrm100VlanMemTagPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort8.setStatus('mandatory')
sfbrm100VlanMemTagPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort9.setStatus('mandatory')
sfbrm100VlanMemTagPort10 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("memEgressNoMod", 1), ("memEgressNoTag", 2), ("memEgressTag", 3), ("notMember", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanMemTagPort10.setStatus('mandatory')
sfbrm100VlanEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 3, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("write", 1), ("delete", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfbrm100VlanEntryStatus.setStatus('mandatory')
sfbrm100ATUDbFull = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,119))
sfbrm100VTUMemberViolation = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,120))
sfbrm100VTUMissViolation = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,121))
sfbrm100ATUMemberViolation = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,122))
sfbrm100ATUMissViolation = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,123))
sfbrm100OAMRemoteDetected = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,124))
sfbrm100EEPROMOnFiber = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,125))
sfbrm100DMIOnFiber = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,126))
sfbrm100LinkChanged = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,127))
sfbrm100DMILowRxIntrusion = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,128))
sfbrm100DMILowRxPower = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,129))
sfbrm100DMILowTxPower = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,130))
sfbrm100DMILowTxBias = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,131))
sfbrm100DMILowTemperature = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,132))
sfbrm100LastGasp = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,133))
sfbrm100OAMPeerLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,134))
sfbrm100OAMPeerLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,135))
sfbrm100OAMPeerDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,136))
sfbrm100OAMThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,137))
sfbrm100PeerVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 3, 2) + (0,138))
mibBuilder.exportSymbols("TNI-MIB", rptrProdsId=rptrProdsId, sfbrm100SysSubnetMask=sfbrm100SysSubnetMask, rptrSM8T6FId=rptrSM8T6FId, sfbrm100SysSerialAccess=sfbrm100SysSerialAccess, sfbrm100DMILaserWavelength=sfbrm100DMILaserWavelength, sfbrm100SwIEEEPriRemap5=sfbrm100SwIEEEPriRemap5, tnTRComMgmtSwRev=tnTRComMgmtSwRev, sfbrm100SysMgmtVlanId=sfbrm100SysMgmtVlanId, sfbrm100PortIEEEPriRemap1=sfbrm100PortIEEEPriRemap1, spsRptrPortIntrusion=spsRptrPortIntrusion, sfbrm100PortForceAutoUpgrade=sfbrm100PortForceAutoUpgrade, sfbrm100LastGasp=sfbrm100LastGasp, sfbrm100SysSNMPAccess=sfbrm100SysSNMPAccess, sfbrm100PortIEEEPriRemap6=sfbrm100PortIEEEPriRemap6, rptrSMVer2Id=rptrSMVer2Id, sfbrm100PortFwdUnknown=sfbrm100PortFwdUnknown, sfbrm100DMILenFor9x125umKM=sfbrm100DMILenFor9x125umKM, sfbrm100SwIPPrioEntry=sfbrm100SwIPPrioEntry, tnTRComNetMask=tnTRComNetMask, spsMonitorSegmentIndex=spsMonitorSegmentIndex, sfbrm100SwEntry=sfbrm100SwEntry, sfbrm100PortGrpString=sfbrm100PortGrpString, spsIpAddr=spsIpAddr, sfbrm100PortAdvPause=sfbrm100PortAdvPause, sfbrm100ATUDbFull=sfbrm100ATUDbFull, sfbrm100VlanMemTagPort3=sfbrm100VlanMemTagPort3, sfbrm100DMITxBiasAlarm=sfbrm100DMITxBiasAlarm, sfbrm100PortInUnicasts=sfbrm100PortInUnicasts, rptrSM08TId=rptrSM08TId, spsRptrPortSegment=spsRptrPortSegment, sfbrm100PortOutMulticasts=sfbrm100PortOutMulticasts, sfbrm100STPProtocolsFwd=sfbrm100STPProtocolsFwd, sfbrm100PortFEFI=sfbrm100PortFEFI, rptrSM8T8TId=rptrSM8T8TId, sfbrm100PortAdv100HDX=sfbrm100PortAdv100HDX, sfbrm100OAMPeerLinkDown=sfbrm100OAMPeerLinkDown, spsBootpFilename=spsBootpFilename, sfbrm100PortInRxErr=sfbrm100PortInRxErr, sfbrm100PortDiscardUntagged=sfbrm100PortDiscardUntagged, rptrSM6FS6FId=rptrSM6FS6FId, sfbrm100SlowProtocolsFwd=sfbrm100SlowProtocolsFwd, spsRptrPortDisableIntruder=spsRptrPortDisableIntruder, sfbrm100FwdDBNum=sfbrm100FwdDBNum, sfbrm100PortMDI2Dist=sfbrm100PortMDI2Dist, rptrSM8T0Id=rptrSM8T0Id, products=products, spsPasswdReset=spsPasswdReset, spsTrapIndex=spsTrapIndex, sfbrm100PortDuplex=sfbrm100PortDuplex, tnTRV1TimerReturnRepeat=tnTRV1TimerReturnRepeat, sfbrm100DMILenFor9x125um100M=sfbrm100DMILenFor9x125um100M, spsRptrPortEavesdropping=spsRptrPortEavesdropping, tnSMComMgmtHwRev=tnSMComMgmtHwRev, spsSerialPortTable=spsSerialPortTable, ringStackTRId=ringStackTRId, sfbrm100PortIn64Octets=sfbrm100PortIn64Octets, sfbrm100SysMACAddress=sfbrm100SysMACAddress, spsMonitorSegmentTable=spsMonitorSegmentTable, spsRptrPortIndex=spsRptrPortIndex, spsDefaultGateway=spsDefaultGateway, sfbrm100PortFDuplex=sfbrm100PortFDuplex, spsBootpEnable=spsBootpEnable, sfbrm100PortInUndersize=sfbrm100PortInUndersize, spsRptrGroupEntry=spsRptrGroupEntry, sfbrm100ELMIProtocolFwd=sfbrm100ELMIProtocolFwd, sfbrm100VlanVID=sfbrm100VlanVID, rptrSM6F0Id=rptrSM6F0Id, sfbrm100SwIEEEPriRemap4=sfbrm100SwIEEEPriRemap4, sfbrm100PortUseTagTC=sfbrm100PortUseTagTC, sfbrm100PortIEEEPriRemap5=sfbrm100PortIEEEPriRemap5, sfbrm100SysFormFactorPort=sfbrm100SysFormFactorPort, sfbrm100SwFiberRedundRevert=sfbrm100SwFiberRedundRevert, sfbrm100SysLastGaspPort=sfbrm100SysLastGaspPort, sfbrm100SysGrpString=sfbrm100SysGrpString, sfbrm100DMIBitRate=sfbrm100DMIBitRate, sfbrm100SysFormFactorSlot=sfbrm100SysFormFactorSlot, tnTRV1StatsTransmitBeacons=tnTRV1StatsTransmitBeacons, sfbrm100DMIOnFiber=sfbrm100DMIOnFiber, sfbrm100SysLastGaspPdu=sfbrm100SysLastGaspPdu, sfbrm100DMIRxPowerAlarm=sfbrm100DMIRxPowerAlarm, sfbrm100PortPri1IngressRateCtrl=sfbrm100PortPri1IngressRateCtrl, sfbrm100PortDiscardTagged=sfbrm100PortDiscardTagged, sfbrm100BridgeMgmtProtocolsFwd=sfbrm100BridgeMgmtProtocolsFwd, sfbrm100PortIEEEPriRemap3=sfbrm100PortIEEEPriRemap3, rptrSM06FSId=rptrSM06FSId, spsMonitorSegmentTotalErrors=spsMonitorSegmentTotalErrors, sfbrm100DMIId=sfbrm100DMIId, sfbrm100DMIConnType=sfbrm100DMIConnType, rptrSM0Id=rptrSM0Id, tnTRV1StatsBurstErrors=tnTRV1StatsBurstErrors, sfbrm100PortAutocross=sfbrm100PortAutocross, sfbrm100PortDAPriOverride=sfbrm100PortDAPriOverride, spsRptrGroupUnitId=spsRptrGroupUnitId, tnStackTR=tnStackTR, sfbrm100VlanMemTagPort4=sfbrm100VlanMemTagPort4, sfbrm100ATUMissViolation=sfbrm100ATUMissViolation, sfbrm100PortLocIndex=sfbrm100PortLocIndex, sfbrm100PortRmtIndex=sfbrm100PortRmtIndex, sfbrm100PortInGoodOctetsLo=sfbrm100PortInGoodOctetsLo, sfbrm100SystemTable=sfbrm100SystemTable, sfbrm100PortIgnoreLoopback=sfbrm100PortIgnoreLoopback, sfbrm100PortMDI3Dist=sfbrm100PortMDI3Dist, sfbrm100VlanTable=sfbrm100VlanTable, sfbrm100PortL2CPTable=sfbrm100PortL2CPTable, sfbrm100DMILenForCopper=sfbrm100DMILenForCopper, sfbrm100DMILenFor50x125um10M=sfbrm100DMILenFor50x125um10M, sfbrm100LLDPProtocolFwd=sfbrm100LLDPProtocolFwd, sfbrm100SwSupressMACViolations=sfbrm100SwSupressMACViolations, sfbrm100PortSAPriOverride=sfbrm100PortSAPriOverride, tnTRV1TimerStandbyMon=tnTRV1TimerStandbyMon, sfbrm100SysLPTPort=sfbrm100SysLPTPort, sfbrm100PortAdv10FDX=sfbrm100PortAdv10FDX, sfbrm100SwIEEEPriRemap7=sfbrm100SwIEEEPriRemap7, sfbrm100DMITxPowerAlarm=sfbrm100DMITxPowerAlarm, sfbrm100PortOAMState=sfbrm100PortOAMState, sfbrm100FwdDBEntry=sfbrm100FwdDBEntry, sfbrm100PortInBadOctets=sfbrm100PortInBadOctets, sfbrm100FwdLocPortIndex=sfbrm100FwdLocPortIndex, tnTRVer1=tnTRVer1, brdgFBRMId=brdgFBRMId, sfbrm100PortOutSingle=sfbrm100PortOutSingle, tnTRComMgmtHwRev=tnTRComMgmtHwRev, sfbrm100PortPri3IngressRateCtrl=sfbrm100PortPri3IngressRateCtrl, sfbrm100PortAdv100FDX=sfbrm100PortAdv100FDX, sfbrm100VlanMemTagPort7=sfbrm100VlanMemTagPort7, sfbrm100VlanVIDPriOverride=sfbrm100VlanVIDPriOverride, sfbrm100FwdMacAddress=sfbrm100FwdMacAddress, sfbrm100PortAdv1000HDX=sfbrm100PortAdv1000HDX, sfbrm100PortIGMPSnoop=sfbrm100PortIGMPSnoop, spsRptrPortEnableIntruderDetectTrap=spsRptrPortEnableIntruderDetectTrap, sfbrm100PortOAMMode=sfbrm100PortOAMMode, rptrSM6FS6FSId=rptrSM6FS6FSId, sfbrm100PortInGoodOctetsHi=sfbrm100PortInGoodOctetsHi, spsCommon=spsCommon, sfbrm100SwPortIndex=sfbrm100SwPortIndex, sfbrm100PortLinkState=sfbrm100PortLinkState, sfbrm100PortFSpeed=sfbrm100PortFSpeed, rptrSMVer1Id=rptrSMVer1Id, sfbrm100FwdEntryStatus=sfbrm100FwdEntryStatus, sfbrm100SysTFTPServerAddr=sfbrm100SysTFTPServerAddr, sfbrm100PortOutBroadcasts=sfbrm100PortOutBroadcasts, sfbrm100SwSecIndex=sfbrm100SwSecIndex, spsReset=spsReset, tnTRV1StatsSingles=tnTRV1StatsSingles, sfbrm100SysRadiusAuth=sfbrm100SysRadiusAuth, tnTRV1Functional=tnTRV1Functional, tnTRV1TimerActiveMon=tnTRV1TimerActiveMon, spsIpNetMask=spsIpNetMask, sfbrm100DMILenFor625x125um10M=sfbrm100DMILenFor625x125um10M, spsRptrPortEntry=spsRptrPortEntry, spsRptrPortGroupIndex=spsRptrPortGroupIndex, sfbrm100SwIPPrioRemap=sfbrm100SwIPPrioRemap, sfbrm100SwEgressMonPort=sfbrm100SwEgressMonPort, sfbrm100SysAutoUpgrade=sfbrm100SysAutoUpgrade, sfbrm100DMILowTxBias=sfbrm100DMILowTxBias, sfbrm100PortOutOctetsLo=sfbrm100PortOutOctetsLo, tnTRV1StatsAbortTransErrors=tnTRV1StatsAbortTransErrors, sfbrm100PortOAMModeCtrl=sfbrm100PortOAMModeCtrl, spsIpAddrTable=spsIpAddrTable, sfbrm100SysTFTPfilename=sfbrm100SysTFTPfilename, sfbrm100PortInMulticasts=sfbrm100PortInMulticasts, sfbrm100SwIEEEPriRemap0=sfbrm100SwIEEEPriRemap0, sfbrm100PortInJabber=sfbrm100PortInJabber, sfbrm100SwTable=sfbrm100SwTable, tnTRV1TimerBeaconTransmit=tnTRV1TimerBeaconTransmit, tnTRV1StatsFreqErrors=tnTRV1StatsFreqErrors, sfbrm100PortRxMDI1Dist=sfbrm100PortRxMDI1Dist, ring=ring, spsRptrGroupTable=spsRptrGroupTable, sfbrm100PortLpAutonegAbility=sfbrm100PortLpAutonegAbility, sps=sps, spsRptrPortTable=spsRptrPortTable, sfbrm100PortOutExcessive=sfbrm100PortOutExcessive, sfbrm100PortL2CPRmtIndex=sfbrm100PortL2CPRmtIndex, tnTRV1StatsReceiveCongestions=tnTRV1StatsReceiveCongestions, rptrSM6F8TSId=rptrSM6F8TSId, sfbrm100PortIgnoreWrongData=sfbrm100PortIgnoreWrongData, spsSerialPortEntry=spsSerialPortEntry, sfbrm100PortVCRxMDI1Status=sfbrm100PortVCRxMDI1Status, sfbrm100PortAdv10HDX=sfbrm100PortAdv10HDX, tnTRComDiagSwRev=tnTRComDiagSwRev, rptrSPSVer1Id=rptrSPSVer1Id, spsConfig=spsConfig, sfbrm100SysLocalLPT=sfbrm100SysLocalLPT, spsTrapCommunity=spsTrapCommunity, sfbrm100PortAutoneg=sfbrm100PortAutoneg, tnTRV1StatsLineErrors=tnTRV1StatsLineErrors, sfbrm100FwdDBTable=sfbrm100FwdDBTable, ringTR16TId=ringTR16TId, rptrSM12FId=rptrSM12FId, spsIpAddrEntry=spsIpAddrEntry, sfbrm100PortPri0IngressRate=sfbrm100PortPri0IngressRate, sfbrm100LinkChanged=sfbrm100LinkChanged, sfbrm100DMIEntry=sfbrm100DMIEntry, rptrESPS24SId=rptrESPS24SId, sfbrm100PortAdv1000FDX=sfbrm100PortAdv1000FDX, sfbrm100VlanMemTagPort1=sfbrm100VlanMemTagPort1, rptrSM8TS0Id=rptrSM8TS0Id, sfbrm100SysOAMPort=sfbrm100SysOAMPort, sfbrm100SysSNMPTrapMgr=sfbrm100SysSNMPTrapMgr, rptrStackMId=rptrStackMId, sfbrm100SwFbrRedundActivePort=sfbrm100SwFbrRedundActivePort, ringTRVer1Id=ringTRVer1Id, spsExternalPowerSupply=spsExternalPowerSupply, sfbrm100PortOutFCSErr=sfbrm100PortOutFCSErr, sfbrm100OAMThresholdEvent=sfbrm100OAMThresholdEvent, sfbrm100PortOutMultiple=sfbrm100PortOutMultiple, spsVer1=spsVer1, sfbrm100ATUMemberViolation=sfbrm100ATUMemberViolation, sfbrm100PortConnType=sfbrm100PortConnType, sfbrmSystem=sfbrmSystem, sfbrm100SysBIAddress=sfbrm100SysBIAddress, rptrSM6FS0Id=rptrSM6FS0Id, sfbrm100SwIPPrioTable=sfbrm100SwIPPrioTable, spsBootpServer=spsBootpServer, sfbrm100PortVCTxMDI0Status=sfbrm100PortVCTxMDI0Status, tnSMCommon=tnSMCommon, sfbrm100DMITempAlarm=sfbrm100DMITempAlarm, spsMonitorSegmentEntry=spsMonitorSegmentEntry, sfbrm100VlanMemTagPort2=sfbrm100VlanMemTagPort2, sfbrm100PeerVersionMismatch=sfbrm100PeerVersionMismatch, sfbrm100PortIEEEPriRemap7=sfbrm100PortIEEEPriRemap7, tnTRCommon=tnTRCommon, sfbrm100PortInFCSErr=sfbrm100PortInFCSErr, sfbrm100DMIRmtPortIndex=sfbrm100DMIRmtPortIndex, rptrSPSId=rptrSPSId, tnTRV1StatsSignalLoss=tnTRV1StatsSignalLoss, rptrSM6F6FSId=rptrSM6F6FSId, sfbrm100PortOutFiltered=sfbrm100PortOutFiltered, sfbrm100SwIEEEPriRemap6=sfbrm100SwIEEEPriRemap6, sfbrm100SysTFTPServerIgnore=sfbrm100SysTFTPServerIgnore, sfbrm100SwSupressVlanViolations=sfbrm100SwSupressVlanViolations, sfbrm100SwFiberRedundancy=sfbrm100SwFiberRedundancy, sfbrm100PortOutLate=sfbrm100PortOutLate, sfbrm100SwIEEEPriRemap1=sfbrm100SwIEEEPriRemap1, sfbrmAddrDB=sfbrmAddrDB, sfbrm100PortEntry=sfbrm100PortEntry, sfbrm100PortIngressMonitor=sfbrm100PortIngressMonitor, rptrSM16TId=rptrSM16TId, sfbrm100SystemEntry=sfbrm100SystemEntry, tnTRComHwReset=tnTRComHwReset, CpsConnector=CpsConnector, rptrSM24TId=rptrSM24TId, rptrSM6FId=rptrSM6FId, tnTRV1StatsACErrors=tnTRV1StatsACErrors, sfbrm100SwFactoryDefaults=sfbrm100SwFactoryDefaults, sfbrm100DMILowRxPower=sfbrm100DMILowRxPower, bridge=bridge, repeater=repeater, MacAddress=MacAddress, sfbrm100PortIEEEPriRemap4=sfbrm100PortIEEEPriRemap4, sfbrm100EEPROMOnFiber=sfbrm100EEPROMOnFiber, sfbrm100PortOutOctetsHi=sfbrm100PortOutOctetsHi, tnTRV1StatsRemoves=tnTRV1StatsRemoves)
mibBuilder.exportSymbols("TNI-MIB", tnTRV1StatsLobeWires=tnTRV1StatsLobeWires, sfbrm100SwIPPrioIndex=sfbrm100SwIPPrioIndex, sfbrm100SwIEEEPriRemap3=sfbrm100SwIEEEPriRemap3, sfbrm100PortIn512to1023Octets=sfbrm100PortIn512to1023Octets, sfbrm100PortInFragments=sfbrm100PortInFragments, tnSMComIpAddr=tnSMComIpAddr, sfbrm100SysSecIndex=sfbrm100SysSecIndex, tnTRComIpAddr=tnTRComIpAddr, rptrSM14FId=rptrSM14FId, rptrSM06FId=rptrSM06FId, sfbrm100OAMPeerLinkUp=sfbrm100OAMPeerLinkUp, sfbrm100FwdPriority=sfbrm100FwdPriority, rptrSM8TS8TSId=rptrSM8TS8TSId, sfbrm100DMILowTemperature=sfbrm100DMILowTemperature, sfbrm100FwdEntryType=sfbrm100FwdEntryType, tnStackM=tnStackM, rptrSM8TS6FSId=rptrSM8TS6FSId, sfbrm100PortL2CPLocIndex=sfbrm100PortL2CPLocIndex, rptrSM6FS8TSId=rptrSM6FS8TSId, rptrSM6F6FId=rptrSM6F6FId, sfbrm100PortIn1024toMaxOctets=sfbrm100PortIn1024toMaxOctets, sfbrm100VTUMemberViolation=sfbrm100VTUMemberViolation, sfbrm100SysRadiusServerAddr=sfbrm100SysRadiusServerAddr, tnSMVer1=tnSMVer1, sfbrm100PortIPTrafficAccess=sfbrm100PortIPTrafficAccess, sfbrm100SysTFTPCmd=sfbrm100SysTFTPCmd, brdgProdsId=brdgProdsId, sfbrm100SysDHCPEnable=sfbrm100SysDHCPEnable, sfbrm100PortOutDeferred=sfbrm100PortOutDeferred, sfbrm100PortTable=sfbrm100PortTable, rptrSM08TSId=rptrSM08TSId, sfbrm100PortRmtLoopback=sfbrm100PortRmtLoopback, spsSerialPortIndex=spsSerialPortIndex, sfbrm100PortAdminState=sfbrm100PortAdminState, sfbrm100OAMRemoteDetected=sfbrm100OAMRemoteDetected, sfbrm100PortAutonegState=sfbrm100PortAutonegState, sfbrm100PortForceDefVLANId=sfbrm100PortForceDefVLANId, tnTRV1StatsLostFrameErrors=tnTRV1StatsLostFrameErrors, sfbrm100PortStatsEntry=sfbrm100PortStatsEntry, sfbrm100PortEgressRateLimit2=sfbrm100PortEgressRateLimit2, sfbrm100PortVTUPriOverride=sfbrm100PortVTUPriOverride, spsDisplayString=spsDisplayString, sfbrm100SysIPAccess=sfbrm100SysIPAccess, sfbrm100PortInFiltered=sfbrm100PortInFiltered, tnTRV1StatsFrameCopiedErrors=tnTRV1StatsFrameCopiedErrors, sfbrm100PortVCMDI3Status=sfbrm100PortVCMDI3Status, sfbrm100SysSerialNumber=sfbrm100SysSerialNumber, sfbrm100FwdConnPort=sfbrm100FwdConnPort, sfbrm100GARPBlockProtocolsFwd=sfbrm100GARPBlockProtocolsFwd, sfbrm100PortOutUnicasts=sfbrm100PortOutUnicasts, sfbrm100SysFirmwareRevision=sfbrm100SysFirmwareRevision, brdgSWVer1Id=brdgSWVer1Id, sfbrm100PortLpPauseAbility=sfbrm100PortLpPauseAbility, rptrSM8T6FSId=rptrSM8T6FSId, sfbrm100SysRadiusRetry=sfbrm100SysRadiusRetry, tnTRV1RingSpeed=tnTRV1RingSpeed, sfbrm100SwIPPrioTC=sfbrm100SwIPPrioTC, sfbrm100PortDefaultVLANId=sfbrm100PortDefaultVLANId, sfbrm100PortIn65to127Octets=sfbrm100PortIn65to127Octets, spsSerialPortModemControl=spsSerialPortModemControl, tnTRV1TimerQueuePDU=tnTRV1TimerQueuePDU, sfbrm100PortStatsTable=sfbrm100PortStatsTable, tnTRV1TimerErrorReport=tnTRV1TimerErrorReport, sfbrm100SwResetCounters=sfbrm100SwResetCounters, tnTRV1StatsRecoverys=tnTRV1StatsRecoverys, sfbrm100SystemReset=sfbrm100SystemReset, tnTRV1RingState=tnTRV1RingState, sfbrm100SysNumPorts=sfbrm100SysNumPorts, sfbrm100VTUMissViolation=sfbrm100VTUMissViolation, rptrSM8T8TSId=rptrSM8T8TSId, sfbrm100SwIEEEPriRemap2=sfbrm100SwIEEEPriRemap2, sfbrm100PortDefaultPriority=sfbrm100PortDefaultPriority, sfbrm100SysLocPortIndex=sfbrm100SysLocPortIndex, spsMaxSegment=spsMaxSegment, sfbrm100PortIEEEPriRemap2=sfbrm100PortIEEEPriRemap2, sfbrm100PortDoubleTagging=sfbrm100PortDoubleTagging, spsRptrGroupInternalPowerSupply=spsRptrGroupInternalPowerSupply, sfbrm100PortUseIPTC=sfbrm100PortUseIPTC, sfbrm100VlanLocPortIndex=sfbrm100VlanLocPortIndex, sfbrm100SwATUAgeTimeout=sfbrm100SwATUAgeTimeout, ringTR0Id=ringTR0Id, spsRptrPortSrcAddr=spsRptrPortSrcAddr, tnTRV1TimerNoToken=tnTRV1TimerNoToken, sfbrm100SysBootLoaderRevision=sfbrm100SysBootLoaderRevision, sfbrm100PortInBroadcasts=sfbrm100PortInBroadcasts, tnIntruderDetect=tnIntruderDetect, sfbrm100PortPri2IngressRateCtrl=sfbrm100PortPri2IngressRateCtrl, sfbrm100PortUseBothTC=sfbrm100PortUseBothTC, sfbrm100PortInPause=sfbrm100PortInPause, sfbrm100VlanEntry=sfbrm100VlanEntry, tnSMComNetMask=tnSMComNetMask, spsIpIfIndex=spsIpIfIndex, sfbrm100SwIngressMonPort=sfbrm100SwIngressMonPort, tnTRV1TimerHolding=tnTRV1TimerHolding, spsTrapEntry=spsTrapEntry, sfbrmPort=sfbrmPort, sfbrm100SwIPPrioPortIndex=sfbrm100SwIPPrioPortIndex, tnSMComHwReset=tnSMComHwReset, tnTRV1Commands=tnTRV1Commands, sfbrm100VlanMemTagPort5=sfbrm100VlanMemTagPort5, sfbrm100PortInOversize=sfbrm100PortInOversize, brdgSwitchMId=brdgSwitchMId, tnSMVer2=tnSMVer2, sfbrm100DMILowTxPower=sfbrm100DMILowTxPower, sfbrm100SwHistMode=sfbrm100SwHistMode, tnTRV1StatsHardErrors=tnTRV1StatsHardErrors, tnTRV1StatsSoftErrors=tnTRV1StatsSoftErrors, sfbrm100PortVCTest=sfbrm100PortVCTest, sfbrm100SysMRevision=sfbrm100SysMRevision, tnTRV1StatsInternalErrors=tnTRV1StatsInternalErrors, sfbrm100PortSpeed=sfbrm100PortSpeed, sfbrm100SysRadiusSecret=sfbrm100SysRadiusSecret, sfbrm100DMITable=sfbrm100DMITable, spsMonitorSegmentTotalOctets=spsMonitorSegmentTotalOctets, sfbrm100DMILowRxIntrusion=sfbrm100DMILowRxIntrusion, tnTRV1UpStream=tnTRV1UpStream, tnSMComMgmtSwRev=tnSMComMgmtSwRev, sfbrm100DMILocPortIndex=sfbrm100DMILocPortIndex, sfbrm100PortIEEEPriRemap0=sfbrm100PortIEEEPriRemap0, sfbrm100PortIn256to511Octets=sfbrm100PortIn256to511Octets, sfbrm100PortAuthProtocolFwd=sfbrm100PortAuthProtocolFwd, sfbrm100PortVLANTunnel=sfbrm100PortVLANTunnel, sfbrm100PortEgressMonitor=sfbrm100PortEgressMonitor, sfbrmSwitch=sfbrmSwitch, sfbrm100PortModeType=sfbrm100PortModeType, sfbrm100PortVCMDI2Status=sfbrm100PortVCMDI2Status, tnSMComDiagSwRev=tnSMComDiagSwRev, sfbrm100PortPhyNumber=sfbrm100PortPhyNumber, sfbrm100BridgeBlkOtherMulticastsFwd=sfbrm100BridgeBlkOtherMulticastsFwd, spsMonitorSegmentTotalFrames=spsMonitorSegmentTotalFrames, sfbrm100PortIn128to255Octets=sfbrm100PortIn128to255Octets, sfbrm100VlanMemTagPort6=sfbrm100VlanMemTagPort6, transition=transition, spsMgmtSegment=spsMgmtSegment, sfbrm100SysRadiusTimeout=sfbrm100SysRadiusTimeout, sfbrm100DMITemperature=sfbrm100DMITemperature, sfbrm100PortOutPause=sfbrm100PortOutPause, sfbrm100PortResetCounters=sfbrm100PortResetCounters, tnTRV1ActMonParticipate=tnTRV1ActMonParticipate, sfbrm100PortLock=sfbrm100PortLock, sfbrm100PortRmtStatsIndex=sfbrm100PortRmtStatsIndex, sfbrm100DMIRxPowerLevel=sfbrm100DMIRxPowerLevel, sfbrm100DMIRxPwrLvlPreset=sfbrm100DMIRxPwrLvlPreset, sfbrm100SwFlushVlandb=sfbrm100SwFlushVlandb, productId=productId, rptrSM8TS6FId=rptrSM8TS6FId, sfbrm100PortIngressRateLimit2=sfbrm100PortIngressRateLimit2, sfbrm100DMITxPowerLevel=sfbrm100DMITxPowerLevel, sfbrm100VlanMemTagPort10=sfbrm100VlanMemTagPort10, sfbrm100SwFlushFdb=sfbrm100SwFlushFdb, sfbrm100SysCfgMatch=sfbrm100SysCfgMatch, sfbrm100PortL2CPEntry=sfbrm100PortL2CPEntry, sfbrm100PortBasedVLANTbl=sfbrm100PortBasedVLANTbl, sfbrm100SysTLPT=sfbrm100SysTLPT, tnTRV1TimerBeaconReceive=tnTRV1TimerBeaconReceive, sfbrm100VlanDBNum=sfbrm100VlanDBNum, spsTrapTable=spsTrapTable, sfbrm100PortVLANStatus=sfbrm100PortVLANStatus, sfbrm100PortResetOAMCounters=sfbrm100PortResetOAMCounters, rptrSM6F8TId=rptrSM6F8TId, sfbrm100PortIngressLimitMode=sfbrm100PortIngressLimitMode, tnTRV1RingOpenStatus=tnTRV1RingOpenStatus, sfbrm100VlanMemTagPort8=sfbrm100VlanMemTagPort8, ringProdsId=ringProdsId, spsTrapDestination=spsTrapDestination, sfbrm100VlanEntryStatus=sfbrm100VlanEntryStatus, sfbrm100VlanVIDPriority=sfbrm100VlanVIDPriority, sfbrm100OAMPeerDyingGasp=sfbrm100OAMPeerDyingGasp, sfbrm10x100=sfbrm10x100, sfbrm100DMITxBiasCurrent=sfbrm100DMITxBiasCurrent, rptrESPS24Id=rptrESPS24Id, spsRptrPortCollisionLimit=spsRptrPortCollisionLimit, sfbrm100SwUseDoubleTagData=sfbrm100SwUseDoubleTagData, rptrSM8TS8TId=rptrSM8TS8TId, tnTRVer2=tnTRVer2, sfbrm100PortInDiscard=sfbrm100PortInDiscard, sfbrm100SysSlotIndex=sfbrm100SysSlotIndex, sfbrm100PortOutCollisions=sfbrm100PortOutCollisions, rptrSM6FS8TId=rptrSM6FS8TId, spsRptrGroupIndex=spsRptrGroupIndex, sfbrm100SysDefGateway=sfbrm100SysDefGateway, tnTRV1TimerValidTransmit=tnTRV1TimerValidTransmit, ringTRVer2Id=ringTRVer2Id, sfbrm100VlanMemTagPort9=sfbrm100VlanMemTagPort9, tnTRV1RingStatus=tnTRV1RingStatus, sfbrm100PortEgressRate=sfbrm100PortEgressRate, sfbrm100PortTxMDI0Dist=sfbrm100PortTxMDI0Dist, sfbrm100PortDefForward=sfbrm100PortDefForward, tnTRV1StatsTokenErrors=tnTRV1StatsTokenErrors, tnTRComIfaceCapacity=tnTRComIfaceCapacity, sfbrm100SysIPaddress=sfbrm100SysIPaddress, sfbrm100PortLocStatsIndex=sfbrm100PortLocStatsIndex)
