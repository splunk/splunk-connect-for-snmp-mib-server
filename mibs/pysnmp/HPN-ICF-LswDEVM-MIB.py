#
# PySNMP MIB module HPN-ICF-LswDEVM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-LswDEVM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
hpnicfLswFrameIndex, hpnicfLswSlotIndex = mibBuilder.importSymbols("HPN-ICF-LSW-DEV-ADM-MIB", "hpnicfLswFrameIndex", "hpnicfLswSlotIndex")
hpnicfRhw, hpnicflswCommon = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfRhw", "hpnicflswCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, MibIdentifier, Counter64, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ModuleIdentity, NotificationType, Counter32, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ModuleIdentity", "NotificationType", "Counter32", "Gauge32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpnicfLswdevMMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9))
hpnicfLswdevMMib.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hpnicfLswdevMMib.setLastUpdated('201111260000Z')
if mibBuilder.loadTexts: hpnicfLswdevMMib.setOrganization('')
hpnicfDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8))
hpnicfCpuTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 1), )
if mibBuilder.loadTexts: hpnicfCpuTable.setStatus('current')
hpnicfCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 1, 1), ).setIndexNames((0, "HPN-ICF-LswDEVM-MIB", "hpnicfCpuIndex"))
if mibBuilder.loadTexts: hpnicfCpuEntry.setStatus('current')
hpnicfCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCpuIndex.setStatus('current')
hpnicfCpuCostRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCpuCostRate.setStatus('current')
hpnicfCpuCostRatePer1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCpuCostRatePer1Min.setStatus('current')
hpnicfCpuCostRatePer5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCpuCostRatePer5Min.setStatus('current')
hpnicfMem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2))
hpnicfMemTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1), )
if mibBuilder.loadTexts: hpnicfMemTable.setStatus('current')
hpnicfMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-LswDEVM-MIB", "hpnicfMemModuleIndex"))
if mibBuilder.loadTexts: hpnicfMemEntry.setStatus('current')
hpnicfMemModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfMemModuleIndex.setStatus('current')
hpnicfMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMemSize.setStatus('current')
hpnicfMemFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMemFree.setStatus('current')
hpnicfMemRawSliceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMemRawSliceUsed.setStatus('current')
hpnicfMemLgFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMemLgFree.setStatus('current')
hpnicfMemFail = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMemFail.setStatus('current')
hpnicfMemFailNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMemFailNoMem.setStatus('current')
hpnicfBufTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 2), )
if mibBuilder.loadTexts: hpnicfBufTable.setStatus('current')
hpnicfBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-LswDEVM-MIB", "hpnicfBufModuleIndex"), (0, "HPN-ICF-LswDEVM-MIB", "hpnicfBufSize"))
if mibBuilder.loadTexts: hpnicfBufEntry.setStatus('current')
hpnicfBufModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfBufModuleIndex.setStatus('current')
hpnicfBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfBufSize.setStatus('current')
hpnicfBufCurrentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfBufCurrentTotal.setStatus('current')
hpnicfBufCurrentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfBufCurrentUsed.setStatus('current')
hpnicfFlh = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 3))
hpnicfFlhTotalSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFlhTotalSize.setStatus('current')
hpnicfFlhTotalFree = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFlhTotalFree.setStatus('current')
hpnicfFlhLastDelTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFlhLastDelTime.setStatus('current')
hpnicfFlhDelState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("executing", 1), ("ok", 2), ("error", 3), ("readOnly", 4), ("failtoopen", 5), ("blockMallocFail", 6), ("noneDelOperationSinceStart", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFlhDelState.setStatus('current')
hpnicfFlhState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("free", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFlhState.setStatus('current')
hpnicfLswdevMMibObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1))
if mibBuilder.loadTexts: hpnicfLswdevMMibObject.setStatus('current')
hpnicfdevMFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 1), )
if mibBuilder.loadTexts: hpnicfdevMFanStatusTable.setStatus('current')
hpnicfdevMFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-LswDEVM-MIB", "hpnicfDevMFanNum"))
if mibBuilder.loadTexts: hpnicfdevMFanStatusEntry.setStatus('current')
hpnicfDevMFanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDevMFanNum.setStatus('current')
hpnicfDevMFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("deactive", 2), ("not-install", 3), ("unsupport", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDevMFanStatus.setStatus('current')
hpnicfdevMPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 2), )
if mibBuilder.loadTexts: hpnicfdevMPowerStatusTable.setStatus('current')
hpnicfdevMPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-LswDEVM-MIB", "hpnicfDevMPowerNum"))
if mibBuilder.loadTexts: hpnicfdevMPowerStatusEntry.setStatus('current')
hpnicfDevMPowerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDevMPowerNum.setStatus('current')
hpnicfDevMPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("deactive", 2), ("not-install", 3), ("unsupport", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDevMPowerStatus.setStatus('current')
hpnicfdevMSlotEnvironmentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 3), )
if mibBuilder.loadTexts: hpnicfdevMSlotEnvironmentTable.setStatus('current')
hpnicfdevMSlotEnvironmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-LSW-DEV-ADM-MIB", "hpnicfLswFrameIndex"), (0, "HPN-ICF-LSW-DEV-ADM-MIB", "hpnicfLswSlotIndex"), (0, "HPN-ICF-LswDEVM-MIB", "hpnicfdevMSlotEnvironmentType"))
if mibBuilder.loadTexts: hpnicfdevMSlotEnvironmentEntry.setStatus('current')
hpnicfdevMSlotEnvironmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("fog", 3))))
if mibBuilder.loadTexts: hpnicfdevMSlotEnvironmentType.setStatus('current')
hpnicfDevMSlotEnvironmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("upper", 2), ("lower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDevMSlotEnvironmentStatus.setStatus('current')
hpnicfDevMSlotEnvironmentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDevMSlotEnvironmentValue.setStatus('current')
hpnicfDevMSlotEnvironmentUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDevMSlotEnvironmentUpperLimit.setStatus('current')
hpnicfDevMSlotEnvironmentLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDevMSlotEnvironmentLowerLimit.setStatus('current')
hpnicfLinkUpDownTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableBoth", 1), ("disableBoth", 2), ("enableLinkUpTrapOnly", 3), ("enableLinkDownTrapOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfLinkUpDownTrapEnable.setStatus('current')
hpnicfdot1qTpFdbLearnStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1qTpFdbLearnStatus.setStatus('current')
hpnicfCfmWriteFlash = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("write", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCfmWriteFlash.setStatus('current')
hpnicfCfmEraseFlash = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCfmEraseFlash.setStatus('current')
hpnicfDevMFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 13), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDevMFirstTrapTime.setStatus('current')
hpnicfdevMExternalAlarmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 9, 1, 14))
mibBuilder.exportSymbols("HPN-ICF-LswDEVM-MIB", hpnicfDevice=hpnicfDevice, hpnicfCfmEraseFlash=hpnicfCfmEraseFlash, hpnicfCpuEntry=hpnicfCpuEntry, hpnicfCpuTable=hpnicfCpuTable, hpnicfDevMPowerNum=hpnicfDevMPowerNum, hpnicfMemSize=hpnicfMemSize, hpnicfDevMSlotEnvironmentValue=hpnicfDevMSlotEnvironmentValue, hpnicfCfmWriteFlash=hpnicfCfmWriteFlash, hpnicfMemFail=hpnicfMemFail, hpnicfBufCurrentTotal=hpnicfBufCurrentTotal, hpnicfFlhDelState=hpnicfFlhDelState, hpnicfdevMPowerStatusEntry=hpnicfdevMPowerStatusEntry, hpnicfdevMSlotEnvironmentTable=hpnicfdevMSlotEnvironmentTable, hpnicfMemLgFree=hpnicfMemLgFree, hpnicfdevMExternalAlarmStatus=hpnicfdevMExternalAlarmStatus, hpnicfBufModuleIndex=hpnicfBufModuleIndex, hpnicfCpuCostRatePer5Min=hpnicfCpuCostRatePer5Min, hpnicfLswdevMMib=hpnicfLswdevMMib, hpnicfMemFree=hpnicfMemFree, hpnicfBufEntry=hpnicfBufEntry, PYSNMP_MODULE_ID=hpnicfLswdevMMib, hpnicfBufSize=hpnicfBufSize, hpnicfFlhTotalSize=hpnicfFlhTotalSize, hpnicfLswdevMMibObject=hpnicfLswdevMMibObject, hpnicfCpuCostRatePer1Min=hpnicfCpuCostRatePer1Min, hpnicfDevMSlotEnvironmentStatus=hpnicfDevMSlotEnvironmentStatus, hpnicfLinkUpDownTrapEnable=hpnicfLinkUpDownTrapEnable, hpnicfMemTable=hpnicfMemTable, hpnicfBufTable=hpnicfBufTable, hpnicfFlhLastDelTime=hpnicfFlhLastDelTime, hpnicfdevMSlotEnvironmentEntry=hpnicfdevMSlotEnvironmentEntry, hpnicfMem=hpnicfMem, hpnicfMemFailNoMem=hpnicfMemFailNoMem, hpnicfDevMFirstTrapTime=hpnicfDevMFirstTrapTime, hpnicfDevMPowerStatus=hpnicfDevMPowerStatus, hpnicfdevMFanStatusTable=hpnicfdevMFanStatusTable, hpnicfFlhState=hpnicfFlhState, hpnicfFlhTotalFree=hpnicfFlhTotalFree, hpnicfdevMSlotEnvironmentType=hpnicfdevMSlotEnvironmentType, hpnicfBufCurrentUsed=hpnicfBufCurrentUsed, hpnicfdevMFanStatusEntry=hpnicfdevMFanStatusEntry, hpnicfDevMSlotEnvironmentLowerLimit=hpnicfDevMSlotEnvironmentLowerLimit, hpnicfCpuIndex=hpnicfCpuIndex, hpnicfDevMFanStatus=hpnicfDevMFanStatus, hpnicfFlh=hpnicfFlh, hpnicfDevMSlotEnvironmentUpperLimit=hpnicfDevMSlotEnvironmentUpperLimit, hpnicfdot1qTpFdbLearnStatus=hpnicfdot1qTpFdbLearnStatus, hpnicfMemModuleIndex=hpnicfMemModuleIndex, hpnicfMemRawSliceUsed=hpnicfMemRawSliceUsed, hpnicfMemEntry=hpnicfMemEntry, hpnicfdevMPowerStatusTable=hpnicfdevMPowerStatusTable, hpnicfDevMFanNum=hpnicfDevMFanNum, hpnicfCpuCostRate=hpnicfCpuCostRate)
