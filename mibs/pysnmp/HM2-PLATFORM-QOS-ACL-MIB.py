#
# PySNMP MIB module HM2-PLATFORM-QOS-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-QOS-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
hm2PlatformQoS, = mibBuilder.importSymbols("HM2-PLATFORM-QOS-MIB", "hm2PlatformQoS")
HmEnabledStatus, = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Gauge32, Unsigned32, TimeTicks, Counter32, MibIdentifier, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Gauge32", "Unsigned32", "TimeTicks", "Counter32", "MibIdentifier", "NotificationType", "ObjectIdentity")
TruthValue, DisplayString, TextualConvention, MacAddress, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "MacAddress", "TimeStamp", "RowStatus")
hm2PlatformQosAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 3, 2))
hm2PlatformQosAcl.setRevisions(('2012-12-20 00:00', '2012-05-02 00:00', '2011-06-12 00:00',))
if mibBuilder.loadTexts: hm2PlatformQosAcl.setLastUpdated('201212200000Z')
if mibBuilder.loadTexts: hm2PlatformQosAcl.setOrganization('Hirschmann Automation and Control GmbH')
class EtypeValue(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class Ipv6AddressPrefix(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class AclBurstSize(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 128), )
class Hm2PortOperator(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("eq", 0), ("neq", 1), ("lt", 2), ("gt", 3))

hm2AgentAclNamedIpv4IndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclNamedIpv4IndexNextFree.setStatus('current')
hm2AgentAclTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 1), )
if mibBuilder.loadTexts: hm2AgentAclTable.setStatus('current')
hm2AgentAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIndex"))
if mibBuilder.loadTexts: hm2AgentAclEntry.setStatus('current')
hm2AgentAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentAclIndex.setStatus('current')
hm2AgentAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclStatus.setStatus('current')
hm2AgentAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclName.setStatus('current')
hm2AgentAclStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 1, 1, 248), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushAclHitCount", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclStatsAction.setStatus('current')
hm2AgentAclIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8), )
if mibBuilder.loadTexts: hm2AgentAclIfTable.setStatus('current')
hm2AgentAclIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfIndex"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfDirection"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfSequence"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclType"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclId"))
if mibBuilder.loadTexts: hm2AgentAclIfEntry.setStatus('current')
hm2AgentAclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentAclIfIndex.setStatus('current')
hm2AgentAclIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: hm2AgentAclIfDirection.setStatus('current')
hm2AgentAclIfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hm2AgentAclIfSequence.setStatus('current')
hm2AgentAclIfAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclIfAclType.setStatus('current')
hm2AgentAclIfAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclIfAclId.setStatus('current')
hm2AgentAclIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclIfStatus.setStatus('current')
hm2AgentAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4), )
if mibBuilder.loadTexts: hm2AgentAclRuleTable.setStatus('current')
hm2AgentAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIndex"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclRuleIndex"))
if mibBuilder.loadTexts: hm2AgentAclRuleEntry.setStatus('current')
hm2AgentAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentAclRuleIndex.setStatus('current')
hm2AgentAclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleAction.setStatus('current')
hm2AgentAclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleProtocol.setStatus('current')
hm2AgentAclRuleSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleSrcIpAddress.setStatus('current')
hm2AgentAclRuleSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleSrcIpMask.setStatus('current')
hm2AgentAclRuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleSrcL4Port.setStatus('current')
hm2AgentAclRuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleSrcL4PortRangeStart.setStatus('current')
hm2AgentAclRuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleSrcL4PortRangeEnd.setStatus('current')
hm2AgentAclRuleDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleDestIpAddress.setStatus('current')
hm2AgentAclRuleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleDestIpMask.setStatus('current')
hm2AgentAclRuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleDestL4Port.setStatus('current')
hm2AgentAclRuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleDestL4PortRangeStart.setStatus('current')
hm2AgentAclRuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleDestL4PortRangeEnd.setStatus('current')
hm2AgentAclRuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleIPDSCP.setStatus('current')
hm2AgentAclRuleIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleIpPrecedence.setStatus('current')
hm2AgentAclRuleIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleIpTosBits.setStatus('current')
hm2AgentAclRuleIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleIpTosMask.setStatus('current')
hm2AgentAclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleStatus.setStatus('current')
hm2AgentAclRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleAssignQueueId.setStatus('current')
hm2AgentAclRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleRedirectIntf.setStatus('current')
hm2AgentAclRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleMatchEvery.setStatus('current')
hm2AgentAclRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 22), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleMirrorIntf.setStatus('current')
hm2AgentAclRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleLogging.setStatus('current')
hm2AgentAclRuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleTimeRangeName.setStatus('current')
hm2AgentAclRuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclRuleTimeRangeStatus.setStatus('current')
hm2AgentAclRuleRedirectExtAgentId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 100), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleRedirectExtAgentId.setStatus('current')
hm2AgentAclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleIcmpType.setStatus('current')
hm2AgentAclRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleIcmpCode.setStatus('current')
hm2AgentAclRuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleIgmpType.setStatus('current')
hm2AgentAclRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 32), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleEstablished.setStatus('current')
hm2AgentAclRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleFragments.setStatus('current')
hm2AgentAclRuleIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 248), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclRuleIndexNextFree.setStatus('current')
hm2AgentAclRuleRateLimitCrateUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps", 1), ("kbps", 2))).clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleRateLimitCrateUnit.setStatus('current')
hm2AgentAclRuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 250), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleRateLimitCrate.setStatus('current')
hm2AgentAclRuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 251), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleRateLimitCburst.setStatus('current')
hm2AgentAclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 252), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushRuleHitCount", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleStatsAction.setStatus('current')
hm2AgentAclRuleHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 253), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclRuleHitCount.setStatus('current')
hm2AgentAclRuleHitCountDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 254), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclRuleHitCountDiscontinuityTime.setStatus('current')
hm2AgentAclRuleTcpFlagBits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 255), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleTcpFlagBits.setStatus('current')
hm2AgentAclRuleTcpFlagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 256), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleTcpFlagMask.setStatus('current')
hm2AgentAclRuleSrcL4PortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 257), Hm2PortOperator().clone('eq')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleSrcL4PortOperator.setStatus('current')
hm2AgentAclRuleDstL4PortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 4, 1, 258), Hm2PortOperator().clone('eq')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclRuleDstL4PortOperator.setStatus('current')
hm2AgentAclMacIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclMacIndexNextFree.setStatus('current')
hm2AgentAclMacTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 6), )
if mibBuilder.loadTexts: hm2AgentAclMacTable.setStatus('current')
hm2AgentAclMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclMacIndex"))
if mibBuilder.loadTexts: hm2AgentAclMacEntry.setStatus('current')
hm2AgentAclMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentAclMacIndex.setStatus('current')
hm2AgentAclMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacName.setStatus('current')
hm2AgentAclMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacStatus.setStatus('current')
hm2AgentAclMacStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 6, 1, 248), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushAclHitCount", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacStatsAction.setStatus('current')
hm2AgentAclMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7), )
if mibBuilder.loadTexts: hm2AgentAclMacRuleTable.setStatus('current')
hm2AgentAclMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclMacIndex"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclMacRuleIndex"))
if mibBuilder.loadTexts: hm2AgentAclMacRuleEntry.setStatus('current')
hm2AgentAclMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentAclMacRuleIndex.setStatus('current')
hm2AgentAclMacRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleAction.setStatus('current')
hm2AgentAclMacRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleCos.setStatus('current')
hm2AgentAclMacRuleCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleCos2.setStatus('current')
hm2AgentAclMacRuleDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleDestMacAddr.setStatus('current')
hm2AgentAclMacRuleDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleDestMacMask.setStatus('current')
hm2AgentAclMacRuleEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 248))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipxold", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoedisc", 12), ("rarp", 13), ("pppoesess", 14), ("ipxnew", 15), ("profinet", 16), ("powerlink", 17), ("ethercat", 18), ("pppoe", 248)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleEtypeKey.setStatus('current')
hm2AgentAclMacRuleEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 8), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleEtypeValue.setStatus('current')
hm2AgentAclMacRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleSrcMacAddr.setStatus('current')
hm2AgentAclMacRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleSrcMacMask.setStatus('current')
hm2AgentAclMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleVlanId.setStatus('current')
hm2AgentAclMacRuleVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleVlanIdRangeStart.setStatus('current')
hm2AgentAclMacRuleVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleVlanIdRangeEnd.setStatus('current')
hm2AgentAclMacRuleVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleVlanId2.setStatus('current')
hm2AgentAclMacRuleVlanId2RangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleVlanId2RangeStart.setStatus('current')
hm2AgentAclMacRuleVlanId2RangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleVlanId2RangeEnd.setStatus('current')
hm2AgentAclMacRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleStatus.setStatus('current')
hm2AgentAclMacRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleAssignQueueId.setStatus('current')
hm2AgentAclMacRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 19), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleRedirectIntf.setStatus('current')
hm2AgentAclMacRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleMatchEvery.setStatus('current')
hm2AgentAclMacRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 21), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleMirrorIntf.setStatus('current')
hm2AgentAclMacRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleLogging.setStatus('current')
hm2AgentAclMacRuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleTimeRangeName.setStatus('current')
hm2AgentAclMacRuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclMacRuleTimeRangeStatus.setStatus('current')
hm2AgentAclMacRuleIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 248), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclMacRuleIndexNextFree.setStatus('current')
hm2AgentAclMacRuleRateLimitCrateUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps", 1), ("kbps", 2))).clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleRateLimitCrateUnit.setStatus('current')
hm2AgentAclMacRuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 250), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleRateLimitCrate.setStatus('current')
hm2AgentAclMacRuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 251), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleRateLimitCburst.setStatus('current')
hm2AgentAclMacRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 252), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushRuleHitCount", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclMacRuleStatsAction.setStatus('current')
hm2AgentAclMacRuleHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 253), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclMacRuleHitCount.setStatus('current')
hm2AgentAclMacRuleHitCountDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 7, 1, 254), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAclMacRuleHitCountDiscontinuityTime.setStatus('current')
hm2AgentAclLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9))
hm2AgentAclTrapRuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleIndex.setStatus('current')
hm2AgentAclTrapRuleAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleAction.setStatus('current')
hm2AgentAclTrapRuleHitCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 4), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleHitCount.setStatus('current')
hm2AgentAclTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 5), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentAclTrapFlag.setStatus('current')
hm2AgentAclTrapRuleTimeRangeName = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleTimeRangeName.setStatus('current')
hm2AgentAclTrapRuleTimeRangeNotification = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2), ("delete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleTimeRangeNotification.setStatus('current')
hm2AgentAclTrapRuleInstallationStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("success", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleInstallationStatus.setStatus('current')
hm2AgentAclTrapRuleHitCountHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 248), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleHitCountHigh.setStatus('current')
hm2AgentAclTrapRuleHitCountLow = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 9, 249), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2AgentAclTrapRuleHitCountLow.setStatus('current')
hm2AgentAclNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 0))
hm2AgentAclTrapRuleLogEvent = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 0, 1)).setObjects(("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclType"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclId"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleIndex"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleAction"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleHitCount"))
if mibBuilder.loadTexts: hm2AgentAclTrapRuleLogEvent.setStatus('current')
hm2AgentAclTrapRuleTimeRangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 0, 2)).setObjects(("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclType"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclId"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleIndex"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleTimeRangeName"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleTimeRangeNotification"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleInstallationStatus"))
if mibBuilder.loadTexts: hm2AgentAclTrapRuleTimeRangeEvent.setStatus('current')
hm2AgentAclTrapRuleLogEventV1 = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 0, 248)).setObjects(("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclType"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclIfAclId"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleIndex"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleAction"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleHitCountHigh"), ("HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclTrapRuleHitCountLow"))
if mibBuilder.loadTexts: hm2AgentAclTrapRuleLogEventV1.setStatus('current')
hm2AgentAclVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13), )
if mibBuilder.loadTexts: hm2AgentAclVlanTable.setStatus('current')
hm2AgentAclVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclVlanIndex"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclVlanDirection"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclVlanSequence"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclVlanAclType"), (0, "HM2-PLATFORM-QOS-ACL-MIB", "hm2AgentAclVlanAclId"))
if mibBuilder.loadTexts: hm2AgentAclVlanEntry.setStatus('current')
hm2AgentAclVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentAclVlanIndex.setStatus('current')
hm2AgentAclVlanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: hm2AgentAclVlanDirection.setStatus('current')
hm2AgentAclVlanSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hm2AgentAclVlanSequence.setStatus('current')
hm2AgentAclVlanAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: hm2AgentAclVlanAclType.setStatus('current')
hm2AgentAclVlanAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentAclVlanAclId.setStatus('current')
hm2AgentAclVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentAclVlanStatus.setStatus('current')
hm2AgentOperatorRuleAssignOutboundInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 3, 2, 248))
if mibBuilder.loadTexts: hm2AgentOperatorRuleAssignOutboundInvalid.setStatus('current')
mibBuilder.exportSymbols("HM2-PLATFORM-QOS-ACL-MIB", hm2AgentAclMacRuleVlanId=hm2AgentAclMacRuleVlanId, hm2AgentAclRuleDestIpAddress=hm2AgentAclRuleDestIpAddress, hm2AgentAclRuleDestL4PortRangeStart=hm2AgentAclRuleDestL4PortRangeStart, hm2AgentAclRuleSrcL4Port=hm2AgentAclRuleSrcL4Port, hm2AgentAclRuleAssignQueueId=hm2AgentAclRuleAssignQueueId, hm2AgentAclMacStatus=hm2AgentAclMacStatus, hm2AgentAclNamedIpv4IndexNextFree=hm2AgentAclNamedIpv4IndexNextFree, hm2AgentAclLoggingGroup=hm2AgentAclLoggingGroup, hm2AgentAclRuleFragments=hm2AgentAclRuleFragments, hm2AgentAclMacIndexNextFree=hm2AgentAclMacIndexNextFree, hm2AgentAclRuleDestL4PortRangeEnd=hm2AgentAclRuleDestL4PortRangeEnd, hm2AgentAclMacRuleMatchEvery=hm2AgentAclMacRuleMatchEvery, hm2AgentAclMacRuleVlanIdRangeEnd=hm2AgentAclMacRuleVlanIdRangeEnd, hm2AgentAclRuleTcpFlagMask=hm2AgentAclRuleTcpFlagMask, hm2AgentAclMacRuleCos2=hm2AgentAclMacRuleCos2, hm2AgentAclIfStatus=hm2AgentAclIfStatus, hm2AgentAclRuleTimeRangeName=hm2AgentAclRuleTimeRangeName, hm2AgentAclMacRuleEtypeValue=hm2AgentAclMacRuleEtypeValue, hm2AgentAclTrapRuleHitCount=hm2AgentAclTrapRuleHitCount, hm2PlatformQosAcl=hm2PlatformQosAcl, hm2AgentAclRuleAction=hm2AgentAclRuleAction, hm2AgentAclRuleStatus=hm2AgentAclRuleStatus, hm2AgentAclTrapRuleAction=hm2AgentAclTrapRuleAction, hm2AgentAclMacRuleIndex=hm2AgentAclMacRuleIndex, hm2AgentAclTrapRuleTimeRangeNotification=hm2AgentAclTrapRuleTimeRangeNotification, hm2AgentAclVlanEntry=hm2AgentAclVlanEntry, hm2AgentAclRuleDestL4Port=hm2AgentAclRuleDestL4Port, hm2AgentAclRuleRedirectIntf=hm2AgentAclRuleRedirectIntf, hm2AgentAclMacRuleHitCount=hm2AgentAclMacRuleHitCount, hm2AgentAclTrapRuleHitCountHigh=hm2AgentAclTrapRuleHitCountHigh, hm2AgentAclEntry=hm2AgentAclEntry, hm2AgentAclStatsAction=hm2AgentAclStatsAction, hm2AgentAclRuleHitCountDiscontinuityTime=hm2AgentAclRuleHitCountDiscontinuityTime, hm2AgentAclRuleIndexNextFree=hm2AgentAclRuleIndexNextFree, hm2AgentAclTrapRuleIndex=hm2AgentAclTrapRuleIndex, hm2AgentAclRuleIcmpCode=hm2AgentAclRuleIcmpCode, hm2AgentAclMacRuleTable=hm2AgentAclMacRuleTable, hm2AgentAclRuleMirrorIntf=hm2AgentAclRuleMirrorIntf, hm2AgentAclMacRuleRateLimitCburst=hm2AgentAclMacRuleRateLimitCburst, hm2AgentAclIfDirection=hm2AgentAclIfDirection, hm2AgentAclMacRuleEtypeKey=hm2AgentAclMacRuleEtypeKey, hm2AgentAclIfTable=hm2AgentAclIfTable, hm2AgentAclMacRuleSrcMacAddr=hm2AgentAclMacRuleSrcMacAddr, hm2AgentAclMacRuleVlanIdRangeStart=hm2AgentAclMacRuleVlanIdRangeStart, hm2AgentAclRuleIgmpType=hm2AgentAclRuleIgmpType, hm2AgentAclMacRuleStatsAction=hm2AgentAclMacRuleStatsAction, EtypeValue=EtypeValue, hm2AgentAclRuleIpPrecedence=hm2AgentAclRuleIpPrecedence, hm2AgentOperatorRuleAssignOutboundInvalid=hm2AgentOperatorRuleAssignOutboundInvalid, hm2AgentAclRuleIPDSCP=hm2AgentAclRuleIPDSCP, hm2AgentAclRuleSrcIpMask=hm2AgentAclRuleSrcIpMask, Hm2PortOperator=Hm2PortOperator, hm2AgentAclMacRuleRateLimitCrateUnit=hm2AgentAclMacRuleRateLimitCrateUnit, hm2AgentAclRuleIndex=hm2AgentAclRuleIndex, hm2AgentAclMacRuleVlanId2=hm2AgentAclMacRuleVlanId2, hm2AgentAclRuleEstablished=hm2AgentAclRuleEstablished, hm2AgentAclVlanDirection=hm2AgentAclVlanDirection, hm2AgentAclMacName=hm2AgentAclMacName, hm2AgentAclTable=hm2AgentAclTable, hm2AgentAclStatus=hm2AgentAclStatus, hm2AgentAclRuleTcpFlagBits=hm2AgentAclRuleTcpFlagBits, hm2AgentAclTrapRuleLogEvent=hm2AgentAclTrapRuleLogEvent, hm2AgentAclTrapRuleTimeRangeEvent=hm2AgentAclTrapRuleTimeRangeEvent, hm2AgentAclMacRuleDestMacMask=hm2AgentAclMacRuleDestMacMask, hm2AgentAclRuleMatchEvery=hm2AgentAclRuleMatchEvery, hm2AgentAclTrapFlag=hm2AgentAclTrapFlag, hm2AgentAclRuleRateLimitCburst=hm2AgentAclRuleRateLimitCburst, hm2AgentAclMacTable=hm2AgentAclMacTable, hm2AgentAclVlanAclType=hm2AgentAclVlanAclType, hm2AgentAclRuleStatsAction=hm2AgentAclRuleStatsAction, hm2AgentAclRuleSrcL4PortOperator=hm2AgentAclRuleSrcL4PortOperator, hm2AgentAclMacRuleAssignQueueId=hm2AgentAclMacRuleAssignQueueId, hm2AgentAclRuleHitCount=hm2AgentAclRuleHitCount, hm2AgentAclRuleSrcL4PortRangeEnd=hm2AgentAclRuleSrcL4PortRangeEnd, hm2AgentAclVlanStatus=hm2AgentAclVlanStatus, hm2AgentAclMacRuleAction=hm2AgentAclMacRuleAction, hm2AgentAclIfIndex=hm2AgentAclIfIndex, hm2AgentAclMacRuleStatus=hm2AgentAclMacRuleStatus, hm2AgentAclMacRuleCos=hm2AgentAclMacRuleCos, hm2AgentAclIndex=hm2AgentAclIndex, hm2AgentAclVlanIndex=hm2AgentAclVlanIndex, AclBurstSize=AclBurstSize, hm2AgentAclRuleIcmpType=hm2AgentAclRuleIcmpType, hm2AgentAclRuleRateLimitCrateUnit=hm2AgentAclRuleRateLimitCrateUnit, hm2AgentAclMacIndex=hm2AgentAclMacIndex, hm2AgentAclRuleTimeRangeStatus=hm2AgentAclRuleTimeRangeStatus, hm2AgentAclMacRuleDestMacAddr=hm2AgentAclMacRuleDestMacAddr, hm2AgentAclVlanSequence=hm2AgentAclVlanSequence, Ipv6AddressPrefix=Ipv6AddressPrefix, hm2AgentAclIfAclType=hm2AgentAclIfAclType, hm2AgentAclMacRuleEntry=hm2AgentAclMacRuleEntry, hm2AgentAclRuleDstL4PortOperator=hm2AgentAclRuleDstL4PortOperator, hm2AgentAclTrapRuleInstallationStatus=hm2AgentAclTrapRuleInstallationStatus, hm2AgentAclTrapRuleHitCountLow=hm2AgentAclTrapRuleHitCountLow, hm2AgentAclRuleDestIpMask=hm2AgentAclRuleDestIpMask, hm2AgentAclMacRuleRedirectIntf=hm2AgentAclMacRuleRedirectIntf, hm2AgentAclMacRuleLogging=hm2AgentAclMacRuleLogging, hm2AgentAclMacRuleHitCountDiscontinuityTime=hm2AgentAclMacRuleHitCountDiscontinuityTime, hm2AgentAclRuleSrcL4PortRangeStart=hm2AgentAclRuleSrcL4PortRangeStart, hm2AgentAclRuleLogging=hm2AgentAclRuleLogging, hm2AgentAclMacRuleVlanId2RangeEnd=hm2AgentAclMacRuleVlanId2RangeEnd, hm2AgentAclVlanAclId=hm2AgentAclVlanAclId, hm2AgentAclMacRuleTimeRangeName=hm2AgentAclMacRuleTimeRangeName, hm2AgentAclIfEntry=hm2AgentAclIfEntry, hm2AgentAclMacEntry=hm2AgentAclMacEntry, hm2AgentAclMacRuleSrcMacMask=hm2AgentAclMacRuleSrcMacMask, hm2AgentAclRuleIpTosBits=hm2AgentAclRuleIpTosBits, hm2AgentAclRuleProtocol=hm2AgentAclRuleProtocol, hm2AgentAclIfAclId=hm2AgentAclIfAclId, hm2AgentAclTrapRuleTimeRangeName=hm2AgentAclTrapRuleTimeRangeName, hm2AgentAclRuleEntry=hm2AgentAclRuleEntry, hm2AgentAclMacStatsAction=hm2AgentAclMacStatsAction, hm2AgentAclIfSequence=hm2AgentAclIfSequence, hm2AgentAclRuleRedirectExtAgentId=hm2AgentAclRuleRedirectExtAgentId, hm2AgentAclRuleTable=hm2AgentAclRuleTable, hm2AgentAclTrapRuleLogEventV1=hm2AgentAclTrapRuleLogEventV1, hm2AgentAclMacRuleMirrorIntf=hm2AgentAclMacRuleMirrorIntf, hm2AgentAclMacRuleVlanId2RangeStart=hm2AgentAclMacRuleVlanId2RangeStart, hm2AgentAclName=hm2AgentAclName, hm2AgentAclMacRuleRateLimitCrate=hm2AgentAclMacRuleRateLimitCrate, hm2AgentAclNotifications=hm2AgentAclNotifications, hm2AgentAclMacRuleTimeRangeStatus=hm2AgentAclMacRuleTimeRangeStatus, PYSNMP_MODULE_ID=hm2PlatformQosAcl, hm2AgentAclRuleSrcIpAddress=hm2AgentAclRuleSrcIpAddress, hm2AgentAclVlanTable=hm2AgentAclVlanTable, hm2AgentAclRuleRateLimitCrate=hm2AgentAclRuleRateLimitCrate, hm2AgentAclMacRuleIndexNextFree=hm2AgentAclMacRuleIndexNextFree, hm2AgentAclRuleIpTosMask=hm2AgentAclRuleIpTosMask)
