#
# PySNMP MIB module HPNSAENV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAENV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter64, Integer32, Counter32, NotificationType, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, ObjectIdentity, TimeTicks, Unsigned32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "Integer32", "Counter32", "NotificationType", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "ObjectIdentity", "TimeTicks", "Unsigned32", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26))
hpnsaEnvMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 1))
hpnsaEnvVoltageData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2))
hpnsaEnvTemperatureData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3))
hpnsaEnvFanSensorData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4))
hpnsaEnvChassisData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 5))
hpnsaEnvMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvMibRevMajor.setStatus('mandatory')
hpnsaEnvMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvMibRevMinor.setStatus('mandatory')
hpnsaEnvVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1), )
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorTable.setStatus('mandatory')
hpnsaEnvVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1), ).setIndexNames((0, "HPNSAENV-MIB", "hpnsaEnvVoltageSensorIndex"))
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorEntry.setStatus('mandatory')
hpnsaEnvVoltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorIndex.setStatus('mandatory')
hpnsaEnvVoltageSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("analog", 3), ("digital", 4), ("three-state-discrete", 5), ("four-state-discrete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorType.setStatus('mandatory')
hpnsaEnvVoltageSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheral-bay", 5), ("system-management-module", 6), ("motherboard", 7), ("memory-module", 8), ("processor-module", 9), ("power-unit", 10), ("add-in-card", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLocation.setStatus('mandatory')
hpnsaEnvVoltageSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("voltsensor-other", 1), ("voltsensor-unknown", 2), ("voltsensor-plus-5-volt", 3), ("voltsensor-minus-5-volt", 4), ("voltsensor-plus-12-volt", 5), ("voltsensor-minus-12-volt", 6), ("voltsensor-plus-3-3-volt", 7), ("voltsensor-plus-2-5-volt", 8), ("voltsensor-scsi-terminator", 9), ("voltsensor-processor-1", 10), ("voltsensor-processor-2", 11), ("voltsensor-processor-3", 12), ("voltsensor-processor-4", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorDescription.setStatus('mandatory')
hpnsaEnvVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorStatus.setStatus('mandatory')
hpnsaEnvVoltageSensorLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLevel.setStatus('mandatory')
hpnsaEnvVoltageSensorNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNominalLevel.setStatus('mandatory')
hpnsaEnvVoltageSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNormalMaximum.setStatus('mandatory')
hpnsaEnvVoltageSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNormalMinimum.setStatus('mandatory')
hpnsaEnvVoltageSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorMaximum.setStatus('mandatory')
hpnsaEnvVoltageSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorMinimum.setStatus('mandatory')
hpnsaEnvVoltageSensorLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerNonCriticalThreshold.setStatus('mandatory')
hpnsaEnvVoltageSensorUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperNonCriticalThreshold.setStatus('mandatory')
hpnsaEnvVoltageSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerCriticalThreshold.setStatus('mandatory')
hpnsaEnvVoltageSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperCriticalThreshold.setStatus('mandatory')
hpnsaEnvVoltageSensorLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerNonRecoverableThreshold.setStatus('mandatory')
hpnsaEnvVoltageSensorUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperNonRecoverableThreshold.setStatus('mandatory')
hpnsaEnvVoltageSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorResolution.setStatus('mandatory')
hpnsaEnvVoltageSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorTolerance.setStatus('mandatory')
hpnsaEnvVoltageSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorAccuracy.setStatus('mandatory')
hpnsaEnvVoltageSensorPositiveHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorPositiveHysterisis.setStatus('mandatory')
hpnsaEnvVoltageSensorNegativeHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNegativeHysterisis.setStatus('mandatory')
hpnsaEnvTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1), )
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorTable.setStatus('mandatory')
hpnsaEnvTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1), ).setIndexNames((0, "HPNSAENV-MIB", "hpnsaEnvTemperatureSensorIndex"))
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorEntry.setStatus('mandatory')
hpnsaEnvTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorIndex.setStatus('mandatory')
hpnsaEnvTemperatureSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("analog", 3), ("digital", 4), ("three-state-discrete", 5), ("four-state-discrete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorType.setStatus('mandatory')
hpnsaEnvTemperatureSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheral-bay", 5), ("system-management-module", 6), ("motherboard", 7), ("memory-module", 8), ("processor-module", 9), ("power-unit", 10), ("add-in-card", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLocation.setStatus('mandatory')
hpnsaEnvTemperatureSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("temperature-sensor-other", 1), ("temperature-sensor-unknown", 2), ("temperature-sensor-processor-1", 3), ("temperature-sensor-processor-2", 4), ("temperature-sensor-processor-3", 5), ("temperature-sensor-processor-4", 6), ("temperature-sensor-processor-5", 7), ("temperature-sensor-processor-6", 8), ("temperature-sensor-processor-7", 9), ("temperature-sensor-processor-8", 10), ("temperature-sensor-system-board", 11), ("temperature-sensor-disk-backplane", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorDescription.setStatus('mandatory')
hpnsaEnvTemperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorStatus.setStatus('mandatory')
hpnsaEnvTemperatureSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorReading.setStatus('mandatory')
hpnsaEnvTemperatureSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNominalReading.setStatus('mandatory')
hpnsaEnvTemperatureSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNormalMaximum.setStatus('mandatory')
hpnsaEnvTemperatureSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNormalMinimum.setStatus('mandatory')
hpnsaEnvTemperatureSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorMaximum.setStatus('mandatory')
hpnsaEnvTemperatureSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorMinimum.setStatus('mandatory')
hpnsaEnvTemperatureSensorLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerNonCriticalThreshold.setStatus('mandatory')
hpnsaEnvTemperatureSensorUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperNonCriticalThreshold.setStatus('mandatory')
hpnsaEnvTemperatureSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerCriticalThreshold.setStatus('mandatory')
hpnsaEnvTemperatureSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperCriticalThreshold.setStatus('mandatory')
hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold.setStatus('mandatory')
hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold.setStatus('mandatory')
hpnsaEnvTemperatureSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorResolution.setStatus('mandatory')
hpnsaEnvTemperatureSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorTolerance.setStatus('mandatory')
hpnsaEnvTemperatureSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorAccuracy.setStatus('mandatory')
hpnsaEnvTemperatureSensorPositiveHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorPositiveHysterisis.setStatus('mandatory')
hpnsaEnvTemperatureSensorNegativeHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNegativeHysterisis.setStatus('mandatory')
hpnsaEnvFanSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1), )
if mibBuilder.loadTexts: hpnsaEnvFanSensorTable.setStatus('mandatory')
hpnsaEnvFanSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1), ).setIndexNames((0, "HPNSAENV-MIB", "hpnsaEnvFanSensorIndex"))
if mibBuilder.loadTexts: hpnsaEnvFanSensorEntry.setStatus('mandatory')
hpnsaEnvFanSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorIndex.setStatus('mandatory')
hpnsaEnvFanSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("analog", 3), ("digital", 4), ("three-state-discrete", 5), ("four-state-discrete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorType.setStatus('mandatory')
hpnsaEnvFanSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheral-bay", 5), ("system-management-module", 6), ("motherboard", 7), ("memory-module", 8), ("processor-module", 9), ("power-unit", 10), ("add-in-card", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLocation.setStatus('mandatory')
hpnsaEnvFanSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fan-sensor-other", 1), ("fan-sensor-unknown", 2), ("fan-sensor-cpu-board", 3), ("fan-sensor-chassis", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorDescription.setStatus('mandatory')
hpnsaEnvFanSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorStatus.setStatus('mandatory')
hpnsaEnvFanSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorReading.setStatus('mandatory')
hpnsaEnvFanSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNominalReading.setStatus('mandatory')
hpnsaEnvFanSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNormalMaximum.setStatus('mandatory')
hpnsaEnvFanSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNormalMinimum.setStatus('mandatory')
hpnsaEnvFanSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorMaximum.setStatus('mandatory')
hpnsaEnvFanSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorMinimum.setStatus('mandatory')
hpnsaEnvFanSensorLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerNonCriticalThreshold.setStatus('mandatory')
hpnsaEnvFanSensorUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperNonCriticalThreshold.setStatus('mandatory')
hpnsaEnvFanSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerCriticalThreshold.setStatus('mandatory')
hpnsaEnvFanSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperCriticalThreshold.setStatus('mandatory')
hpnsaEnvFanSensorLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerNonRecoverableThreshold.setStatus('mandatory')
hpnsaEnvFanSensorUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperNonRecoverableThreshold.setStatus('mandatory')
hpnsaEnvFanSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorResolution.setStatus('mandatory')
hpnsaEnvFanSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorTolerance.setStatus('mandatory')
hpnsaEnvFanSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorAccuracy.setStatus('mandatory')
hpnsaEnvFanSensorPositiveHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorPositiveHysterisis.setStatus('mandatory')
hpnsaEnvFanSensorNegativeHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNegativeHysterisis.setStatus('mandatory')
hpnsaEnvChassisStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chassis-open", 1), ("chassis-closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvChassisStatus.setStatus('mandatory')
mibBuilder.exportSymbols("HPNSAENV-MIB", hpnsaEnvVoltageSensorType=hpnsaEnvVoltageSensorType, hpnsaEnvVoltageSensorTolerance=hpnsaEnvVoltageSensorTolerance, hpnsaEnvTemperatureSensorStatus=hpnsaEnvTemperatureSensorStatus, hpnsaEnvFanSensorIndex=hpnsaEnvFanSensorIndex, hpnsaEnvVoltageSensorPositiveHysterisis=hpnsaEnvVoltageSensorPositiveHysterisis, hpnsaEnvFanSensorMinimum=hpnsaEnvFanSensorMinimum, hpnsaEnvMibRev=hpnsaEnvMibRev, hpnsaEnvVoltageSensorUpperCriticalThreshold=hpnsaEnvVoltageSensorUpperCriticalThreshold, hpnsaEnvFanSensorUpperNonCriticalThreshold=hpnsaEnvFanSensorUpperNonCriticalThreshold, hpnsaEnvVoltageSensorUpperNonRecoverableThreshold=hpnsaEnvVoltageSensorUpperNonRecoverableThreshold, hpnsaEnvironment=hpnsaEnvironment, hpnsaEnvTemperatureSensorTolerance=hpnsaEnvTemperatureSensorTolerance, hpnsaEnvVoltageSensorLocation=hpnsaEnvVoltageSensorLocation, hpnsaEnvTemperatureSensorReading=hpnsaEnvTemperatureSensorReading, hpnsaEnvFanSensorReading=hpnsaEnvFanSensorReading, hpnsaEnvVoltageSensorNominalLevel=hpnsaEnvVoltageSensorNominalLevel, hpnsaEnvFanSensorMaximum=hpnsaEnvFanSensorMaximum, nm=nm, hpnsaEnvTemperatureSensorIndex=hpnsaEnvTemperatureSensorIndex, hpnsaEnvTemperatureSensorUpperCriticalThreshold=hpnsaEnvTemperatureSensorUpperCriticalThreshold, hpnsaEnvTemperatureSensorNormalMinimum=hpnsaEnvTemperatureSensorNormalMinimum, hpnsaEnvMibRevMinor=hpnsaEnvMibRevMinor, hpnsaEnvTemperatureSensorNominalReading=hpnsaEnvTemperatureSensorNominalReading, hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold=hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold, hpnsaEnvVoltageSensorNormalMaximum=hpnsaEnvVoltageSensorNormalMaximum, hpnsaEnvVoltageSensorAccuracy=hpnsaEnvVoltageSensorAccuracy, hpnsaEnvTemperatureSensorTable=hpnsaEnvTemperatureSensorTable, hpnsaEnvTemperatureSensorPositiveHysterisis=hpnsaEnvTemperatureSensorPositiveHysterisis, hpnsaEnvMibRevMajor=hpnsaEnvMibRevMajor, hpnsaEnvTemperatureSensorType=hpnsaEnvTemperatureSensorType, hpnsaEnvFanSensorData=hpnsaEnvFanSensorData, hpnsaEnvFanSensorStatus=hpnsaEnvFanSensorStatus, hpnsaEnvTemperatureSensorResolution=hpnsaEnvTemperatureSensorResolution, hpnsaEnvFanSensorDescription=hpnsaEnvFanSensorDescription, hpnsaEnvFanSensorPositiveHysterisis=hpnsaEnvFanSensorPositiveHysterisis, hpnsaEnvVoltageSensorLevel=hpnsaEnvVoltageSensorLevel, hpnsaEnvFanSensorUpperNonRecoverableThreshold=hpnsaEnvFanSensorUpperNonRecoverableThreshold, hpnsaEnvVoltageSensorStatus=hpnsaEnvVoltageSensorStatus, hpnsaEnvVoltageSensorNegativeHysterisis=hpnsaEnvVoltageSensorNegativeHysterisis, hpnsa=hpnsa, hpnsaEnvTemperatureSensorEntry=hpnsaEnvTemperatureSensorEntry, hpnsaEnvTemperatureData=hpnsaEnvTemperatureData, hpnsaEnvVoltageSensorResolution=hpnsaEnvVoltageSensorResolution, hpnsaEnvTemperatureSensorMinimum=hpnsaEnvTemperatureSensorMinimum, hpnsaEnvFanSensorType=hpnsaEnvFanSensorType, hpnsaEnvVoltageSensorMinimum=hpnsaEnvVoltageSensorMinimum, hpnsaEnvTemperatureSensorLowerCriticalThreshold=hpnsaEnvTemperatureSensorLowerCriticalThreshold, hpnsaEnvFanSensorUpperCriticalThreshold=hpnsaEnvFanSensorUpperCriticalThreshold, hpnsaEnvFanSensorResolution=hpnsaEnvFanSensorResolution, hpnsaEnvVoltageData=hpnsaEnvVoltageData, hpnsaEnvTemperatureSensorMaximum=hpnsaEnvTemperatureSensorMaximum, hpnsaEnvVoltageSensorDescription=hpnsaEnvVoltageSensorDescription, hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold=hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold, hpnsaEnvVoltageSensorEntry=hpnsaEnvVoltageSensorEntry, hpnsaEnvVoltageSensorIndex=hpnsaEnvVoltageSensorIndex, hpnsaEnvTemperatureSensorUpperNonCriticalThreshold=hpnsaEnvTemperatureSensorUpperNonCriticalThreshold, hpnsaEnvFanSensorTable=hpnsaEnvFanSensorTable, hpnsaEnvTemperatureSensorNegativeHysterisis=hpnsaEnvTemperatureSensorNegativeHysterisis, hpnsaEnvChassisData=hpnsaEnvChassisData, hp=hp, hpnsaEnvVoltageSensorNormalMinimum=hpnsaEnvVoltageSensorNormalMinimum, hpnsaEnvFanSensorEntry=hpnsaEnvFanSensorEntry, hpnsaEnvVoltageSensorLowerNonRecoverableThreshold=hpnsaEnvVoltageSensorLowerNonRecoverableThreshold, hpnsaEnvFanSensorLowerNonCriticalThreshold=hpnsaEnvFanSensorLowerNonCriticalThreshold, hpnsaEnvVoltageSensorMaximum=hpnsaEnvVoltageSensorMaximum, hpnsaEnvTemperatureSensorDescription=hpnsaEnvTemperatureSensorDescription, hpnsaEnvChassisStatus=hpnsaEnvChassisStatus, hpnsaEnvVoltageSensorLowerCriticalThreshold=hpnsaEnvVoltageSensorLowerCriticalThreshold, hpnsaEnvFanSensorNormalMinimum=hpnsaEnvFanSensorNormalMinimum, hpnsaEnvFanSensorLocation=hpnsaEnvFanSensorLocation, hpnsaEnvTemperatureSensorLowerNonCriticalThreshold=hpnsaEnvTemperatureSensorLowerNonCriticalThreshold, hpnsaEnvTemperatureSensorLocation=hpnsaEnvTemperatureSensorLocation, hpnsaEnvTemperatureSensorAccuracy=hpnsaEnvTemperatureSensorAccuracy, hpnsaEnvFanSensorLowerCriticalThreshold=hpnsaEnvFanSensorLowerCriticalThreshold, hpnsaEnvFanSensorNominalReading=hpnsaEnvFanSensorNominalReading, hpnsaEnvFanSensorLowerNonRecoverableThreshold=hpnsaEnvFanSensorLowerNonRecoverableThreshold, hpnsaEnvFanSensorNormalMaximum=hpnsaEnvFanSensorNormalMaximum, hpnsaEnvFanSensorTolerance=hpnsaEnvFanSensorTolerance, hpnsaEnvFanSensorNegativeHysterisis=hpnsaEnvFanSensorNegativeHysterisis, hpnsaEnvVoltageSensorTable=hpnsaEnvVoltageSensorTable, hpnsaEnvVoltageSensorUpperNonCriticalThreshold=hpnsaEnvVoltageSensorUpperNonCriticalThreshold, hpnsaEnvVoltageSensorLowerNonCriticalThreshold=hpnsaEnvVoltageSensorLowerNonCriticalThreshold, hpnsaEnvFanSensorAccuracy=hpnsaEnvFanSensorAccuracy, hpnsaEnvTemperatureSensorNormalMaximum=hpnsaEnvTemperatureSensorNormalMaximum)
