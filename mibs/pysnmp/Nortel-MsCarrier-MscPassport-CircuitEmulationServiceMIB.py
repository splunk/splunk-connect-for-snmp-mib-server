#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:20:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
DisplayString, RowPointer, StorageType, Integer32, Counter32, Gauge32, RowStatus, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DisplayString", "RowPointer", "StorageType", "Integer32", "Counter32", "Gauge32", "RowStatus", "Unsigned32")
EnterpriseDateAndTime, PassportCounter64, FixedPoint2, AsciiString, Link, Hex, NonReplicated, IntegerSequence = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "EnterpriseDateAndTime", "PassportCounter64", "FixedPoint2", "AsciiString", "Link", "Hex", "NonReplicated", "IntegerSequence")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, ModuleIdentity, MibIdentifier, Counter64, iso, Integer32, Bits, Counter32, ObjectIdentity, Gauge32, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter64", "iso", "Integer32", "Bits", "Counter32", "ObjectIdentity", "Gauge32", "NotificationType", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
circuitEmulationServiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55))
mscAal1Ces = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119))
mscAal1CesRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 1), )
if mibBuilder.loadTexts: mscAal1CesRowStatusTable.setStatus('mandatory')
mscAal1CesRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"))
if mibBuilder.loadTexts: mscAal1CesRowStatusEntry.setStatus('mandatory')
mscAal1CesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesRowStatus.setStatus('mandatory')
mscAal1CesComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesComponentName.setStatus('mandatory')
mscAal1CesStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesStorageType.setStatus('mandatory')
mscAal1CesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: mscAal1CesIndex.setStatus('mandatory')
mscAal1CesCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 10), )
if mibBuilder.loadTexts: mscAal1CesCidDataTable.setStatus('mandatory')
mscAal1CesCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"))
if mibBuilder.loadTexts: mscAal1CesCidDataEntry.setStatus('mandatory')
mscAal1CesCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesCustomerIdentifier.setStatus('mandatory')
mscAal1CesProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11), )
if mibBuilder.loadTexts: mscAal1CesProvTable.setStatus('mandatory')
mscAal1CesProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"))
if mibBuilder.loadTexts: mscAal1CesProvEntry.setStatus('mandatory')
mscAal1CesServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unstructured", 0), ("basicStructured", 1), ("casStructured", 2))).clone('unstructured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesServiceType.setStatus('mandatory')
mscAal1CesBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(94, 15651), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesBufferSize.setStatus('mandatory')
mscAal1CesCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesCellLossIntegrationPeriod.setStatus('mandatory')
mscAal1CesInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 5), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesInterfaceName.setStatus('mandatory')
mscAal1CesPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesPartialFill.setStatus('mandatory')
mscAal1CesIdleSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesIdleSuppression.setStatus('mandatory')
mscAal1CesIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 8), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesIdlePattern.setStatus('mandatory')
mscAal1CesCellLossRecoveryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesCellLossRecoveryPeriod.setStatus('mandatory')
mscAal1CesDummyDataByte = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 10), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesDummyDataByte.setStatus('mandatory')
mscAal1CesMaximumBufferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 11), FixedPoint2().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65500), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesMaximumBufferDelay.setStatus('mandatory')
mscAal1CesDp2CellDelayVariationTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 11, 1, 12), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(1, 65500)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesDp2CellDelayVariationTolerance.setStatus('mandatory')
mscAal1CesStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12), )
if mibBuilder.loadTexts: mscAal1CesStateTable.setStatus('mandatory')
mscAal1CesStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"))
if mibBuilder.loadTexts: mscAal1CesStateEntry.setStatus('mandatory')
mscAal1CesAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAdminState.setStatus('mandatory')
mscAal1CesOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesOperationalState.setStatus('mandatory')
mscAal1CesUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesUsageState.setStatus('mandatory')
mscAal1CesAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAvailabilityStatus.setStatus('mandatory')
mscAal1CesProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesProceduralStatus.setStatus('mandatory')
mscAal1CesControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesControlStatus.setStatus('mandatory')
mscAal1CesAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAlarmStatus.setStatus('mandatory')
mscAal1CesStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesStandbyStatus.setStatus('mandatory')
mscAal1CesUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesUnknownStatus.setStatus('mandatory')
mscAal1CesOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 13), )
if mibBuilder.loadTexts: mscAal1CesOperTable.setStatus('mandatory')
mscAal1CesOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"))
if mibBuilder.loadTexts: mscAal1CesOperEntry.setStatus('mandatory')
mscAal1CesCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noLoss", 0), ("loss", 1))).clone('noLoss')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesCellLossStatus.setStatus('mandatory')
mscAal1CesAal1LayerLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noLoss", 0), ("loss", 1))).clone('noLoss')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAal1LayerLossStatus.setStatus('mandatory')
mscAal1CesConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connected", 0), ("channelNotReady", 1), ("atmNotReady", 2), ("atmNotConfigured", 3))).clone('channelNotReady')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesConnectionStatus.setStatus('mandatory')
mscAal1CesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14), )
if mibBuilder.loadTexts: mscAal1CesStatsTable.setStatus('mandatory')
mscAal1CesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"))
if mibBuilder.loadTexts: mscAal1CesStatsEntry.setStatus('mandatory')
mscAal1CesCellsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesCellsTransmitted.setStatus('mandatory')
mscAal1CesCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesCellsReceived.setStatus('mandatory')
mscAal1CesLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLostCells.setStatus('mandatory')
mscAal1CesBufferUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesBufferUnderflows.setStatus('mandatory')
mscAal1CesBufferOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesBufferOverflows.setStatus('mandatory')
mscAal1CesReassembledCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesReassembledCells.setStatus('mandatory')
mscAal1CesHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesHeaderErrors.setStatus('mandatory')
mscAal1CesPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPointerReframes.setStatus('mandatory')
mscAal1CesPointerParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPointerParityErrors.setStatus('mandatory')
mscAal1CesAal1SequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAal1SequenceErrors.setStatus('mandatory')
mscAal1CesMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesMisinsertedCells.setStatus('mandatory')
mscAal1CesNap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2))
mscAal1CesNapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 1), )
if mibBuilder.loadTexts: mscAal1CesNapRowStatusTable.setStatus('mandatory')
mscAal1CesNapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesNapIndex"))
if mibBuilder.loadTexts: mscAal1CesNapRowStatusEntry.setStatus('mandatory')
mscAal1CesNapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesNapRowStatus.setStatus('mandatory')
mscAal1CesNapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesNapComponentName.setStatus('mandatory')
mscAal1CesNapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesNapStorageType.setStatus('mandatory')
mscAal1CesNapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAal1CesNapIndex.setStatus('mandatory')
mscAal1CesNapProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 10), )
if mibBuilder.loadTexts: mscAal1CesNapProvTable.setStatus('mandatory')
mscAal1CesNapProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesNapIndex"))
if mibBuilder.loadTexts: mscAal1CesNapProvEntry.setStatus('mandatory')
mscAal1CesNapAtmConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesNapAtmConnection.setStatus('mandatory')
mscAal1CesAep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3))
mscAal1CesAepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 1), )
if mibBuilder.loadTexts: mscAal1CesAepRowStatusTable.setStatus('mandatory')
mscAal1CesAepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesAepIndex"))
if mibBuilder.loadTexts: mscAal1CesAepRowStatusEntry.setStatus('mandatory')
mscAal1CesAepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepRowStatus.setStatus('mandatory')
mscAal1CesAepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepComponentName.setStatus('mandatory')
mscAal1CesAepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepStorageType.setStatus('mandatory')
mscAal1CesAepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAal1CesAepIndex.setStatus('mandatory')
mscAal1CesAepProvEndPointAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 10), )
if mibBuilder.loadTexts: mscAal1CesAepProvEndPointAddrTable.setStatus('mandatory')
mscAal1CesAepProvEndPointAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesAepIndex"))
if mibBuilder.loadTexts: mscAal1CesAepProvEndPointAddrEntry.setStatus('mandatory')
mscAal1CesAepExpectedRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepExpectedRemoteAddress.setStatus('mandatory')
mscAal1CesAepLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepLocalAddress.setStatus('mandatory')
mscAal1CesAepProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11), )
if mibBuilder.loadTexts: mscAal1CesAepProvTable.setStatus('mandatory')
mscAal1CesAepProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesAepIndex"))
if mibBuilder.loadTexts: mscAal1CesAepProvEntry.setStatus('mandatory')
mscAal1CesAepAddressToCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepAddressToCall.setStatus('mandatory')
mscAal1CesAepRoutingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("porsOnly", 0), ("atmOnly", 1), ("porsFirst", 2), ("atmFirst", 3))).clone('porsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepRoutingOption.setStatus('mandatory')
mscAal1CesAepProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepProfile.setStatus('mandatory')
mscAal1CesAepFirstRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepFirstRetryInterval.setStatus('mandatory')
mscAal1CesAepRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepRetryLimit.setStatus('mandatory')
mscAal1CesAepActiveEndPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("softPVC", 1))).clone('svc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepActiveEndPointType.setStatus('mandatory')
mscAal1CesAepCalledVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 11, 1, 7), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesAepCalledVpiVci.setStatus('mandatory')
mscAal1CesAepEpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 12), )
if mibBuilder.loadTexts: mscAal1CesAepEpOperTable.setStatus('mandatory')
mscAal1CesAepEpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesAepIndex"))
if mibBuilder.loadTexts: mscAal1CesAepEpOperEntry.setStatus('mandatory')
mscAal1CesAepRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(7, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepRemoteAddress.setStatus('mandatory')
mscAal1CesAepLastTearDownCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepLastTearDownCause.setStatus('mandatory')
mscAal1CesAepLastTearDownDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 12, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepLastTearDownDiagnostic.setStatus('mandatory')
mscAal1CesAepOutTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 13), )
if mibBuilder.loadTexts: mscAal1CesAepOutTable.setStatus('mandatory')
mscAal1CesAepOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesAepIndex"))
if mibBuilder.loadTexts: mscAal1CesAepOutEntry.setStatus('mandatory')
mscAal1CesAepSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initialising", 0), ("connecting", 1), ("connected", 2), ("idle", 3), ("retriesExhausted", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepSvcStatus.setStatus('mandatory')
mscAal1CesAepLastSetupFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepLastSetupFailureCause.setStatus('mandatory')
mscAal1CesAepLastSetupFailureDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 13, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepLastSetupFailureDiagnostic.setStatus('mandatory')
mscAal1CesAepRetryTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepRetryTimeRemaining.setStatus('mandatory')
mscAal1CesAepRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAepRetryFailures.setStatus('mandatory')
mscAal1CesPep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4))
mscAal1CesPepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 1), )
if mibBuilder.loadTexts: mscAal1CesPepRowStatusTable.setStatus('mandatory')
mscAal1CesPepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesPepIndex"))
if mibBuilder.loadTexts: mscAal1CesPepRowStatusEntry.setStatus('mandatory')
mscAal1CesPepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesPepRowStatus.setStatus('mandatory')
mscAal1CesPepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPepComponentName.setStatus('mandatory')
mscAal1CesPepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPepStorageType.setStatus('mandatory')
mscAal1CesPepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAal1CesPepIndex.setStatus('mandatory')
mscAal1CesPepProvEndPointAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 10), )
if mibBuilder.loadTexts: mscAal1CesPepProvEndPointAddrTable.setStatus('mandatory')
mscAal1CesPepProvEndPointAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesPepIndex"))
if mibBuilder.loadTexts: mscAal1CesPepProvEndPointAddrEntry.setStatus('mandatory')
mscAal1CesPepExpectedRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesPepExpectedRemoteAddress.setStatus('mandatory')
mscAal1CesPepLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesPepLocalAddress.setStatus('mandatory')
mscAal1CesPepEpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 11), )
if mibBuilder.loadTexts: mscAal1CesPepEpOperTable.setStatus('mandatory')
mscAal1CesPepEpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesPepIndex"))
if mibBuilder.loadTexts: mscAal1CesPepEpOperEntry.setStatus('mandatory')
mscAal1CesPepRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(7, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPepRemoteAddress.setStatus('mandatory')
mscAal1CesPepLastTearDownCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPepLastTearDownCause.setStatus('mandatory')
mscAal1CesPepLastTearDownDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 11, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPepLastTearDownDiagnostic.setStatus('mandatory')
mscAal1CesPepPassiveOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 12), )
if mibBuilder.loadTexts: mscAal1CesPepPassiveOperTable.setStatus('mandatory')
mscAal1CesPepPassiveOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesPepIndex"))
if mibBuilder.loadTexts: mscAal1CesPepPassiveOperEntry.setStatus('mandatory')
mscAal1CesPepSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("initialising", 0), ("connecting", 1), ("connected", 2), ("idle", 3), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesPepSvcStatus.setStatus('mandatory')
mscAal1CesLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5))
mscAal1CesLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 1), )
if mibBuilder.loadTexts: mscAal1CesLCoRowStatusTable.setStatus('mandatory')
mscAal1CesLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesLCoIndex"))
if mibBuilder.loadTexts: mscAal1CesLCoRowStatusEntry.setStatus('mandatory')
mscAal1CesLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRowStatus.setStatus('mandatory')
mscAal1CesLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoComponentName.setStatus('mandatory')
mscAal1CesLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoStorageType.setStatus('mandatory')
mscAal1CesLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAal1CesLCoIndex.setStatus('mandatory')
mscAal1CesLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10), )
if mibBuilder.loadTexts: mscAal1CesLCoPathDataTable.setStatus('mandatory')
mscAal1CesLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesLCoIndex"))
if mibBuilder.loadTexts: mscAal1CesLCoPathDataEntry.setStatus('mandatory')
mscAal1CesLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoState.setStatus('mandatory')
mscAal1CesLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAal1CesLCoOverrideRemoteName.setStatus('mandatory')
mscAal1CesLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoEnd.setStatus('mandatory')
mscAal1CesLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoCostMetric.setStatus('mandatory')
mscAal1CesLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoDelayMetric.setStatus('mandatory')
mscAal1CesLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRoundTripDelay.setStatus('mandatory')
mscAal1CesLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoSetupPriority.setStatus('mandatory')
mscAal1CesLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoHoldingPriority.setStatus('mandatory')
mscAal1CesLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRequiredTxBandwidth.setStatus('mandatory')
mscAal1CesLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRequiredRxBandwidth.setStatus('mandatory')
mscAal1CesLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRequiredTrafficType.setStatus('mandatory')
mscAal1CesLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPermittedTrunkTypes.setStatus('mandatory')
mscAal1CesLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRequiredSecurity.setStatus('mandatory')
mscAal1CesLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRequiredCustomerParameter.setStatus('mandatory')
mscAal1CesLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoEmissionPriority.setStatus('mandatory')
mscAal1CesLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoDiscardPriority.setStatus('mandatory')
mscAal1CesLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPathType.setStatus('mandatory')
mscAal1CesLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoRetryCount.setStatus('mandatory')
mscAal1CesLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPathFailureCount.setStatus('mandatory')
mscAal1CesLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoReasonForNoRoute.setStatus('mandatory')
mscAal1CesLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoLastTearDownReason.setStatus('mandatory')
mscAal1CesLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPathFailureAction.setStatus('mandatory')
mscAal1CesLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoBumpPreference.setStatus('mandatory')
mscAal1CesLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoOptimization.setStatus('mandatory')
mscAal1CesLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPathUpDateTime.setStatus('mandatory')
mscAal1CesLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 11), )
if mibBuilder.loadTexts: mscAal1CesLCoStatsTable.setStatus('mandatory')
mscAal1CesLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesLCoIndex"))
if mibBuilder.loadTexts: mscAal1CesLCoStatsEntry.setStatus('mandatory')
mscAal1CesLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPktsToNetwork.setStatus('mandatory')
mscAal1CesLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoBytesToNetwork.setStatus('mandatory')
mscAal1CesLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPktsFromNetwork.setStatus('mandatory')
mscAal1CesLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoBytesFromNetwork.setStatus('mandatory')
mscAal1CesLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 264), )
if mibBuilder.loadTexts: mscAal1CesLCoPathTable.setStatus('mandatory')
mscAal1CesLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 264, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesLCoIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesLCoPathValue"))
if mibBuilder.loadTexts: mscAal1CesLCoPathEntry.setStatus('mandatory')
mscAal1CesLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 5, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesLCoPathValue.setStatus('mandatory')
mscAal1CesAtmCon = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6))
mscAal1CesAtmConRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 1), )
if mibBuilder.loadTexts: mscAal1CesAtmConRowStatusTable.setStatus('mandatory')
mscAal1CesAtmConRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesAtmConIndex"))
if mibBuilder.loadTexts: mscAal1CesAtmConRowStatusEntry.setStatus('mandatory')
mscAal1CesAtmConRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAtmConRowStatus.setStatus('mandatory')
mscAal1CesAtmConComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAtmConComponentName.setStatus('mandatory')
mscAal1CesAtmConStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAtmConStorageType.setStatus('mandatory')
mscAal1CesAtmConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAal1CesAtmConIndex.setStatus('mandatory')
mscAal1CesAtmConOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 10), )
if mibBuilder.loadTexts: mscAal1CesAtmConOperTable.setStatus('mandatory')
mscAal1CesAtmConOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscAal1CesAtmConIndex"))
if mibBuilder.loadTexts: mscAal1CesAtmConOperEntry.setStatus('mandatory')
mscAal1CesAtmConNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 119, 6, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAal1CesAtmConNextHop.setStatus('mandatory')
mscMmTx = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151))
mscMmTxRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 1), )
if mibBuilder.loadTexts: mscMmTxRowStatusTable.setStatus('mandatory')
mscMmTxRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"))
if mibBuilder.loadTexts: mscMmTxRowStatusEntry.setStatus('mandatory')
mscMmTxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxRowStatus.setStatus('mandatory')
mscMmTxComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxComponentName.setStatus('mandatory')
mscMmTxStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxStorageType.setStatus('mandatory')
mscMmTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: mscMmTxIndex.setStatus('mandatory')
mscMmTxCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 10), )
if mibBuilder.loadTexts: mscMmTxCidDataTable.setStatus('mandatory')
mscMmTxCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"))
if mibBuilder.loadTexts: mscMmTxCidDataEntry.setStatus('mandatory')
mscMmTxCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxCustomerIdentifier.setStatus('mandatory')
mscMmTxProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 11), )
if mibBuilder.loadTexts: mscMmTxProvTable.setStatus('mandatory')
mscMmTxProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"))
if mibBuilder.loadTexts: mscMmTxProvEntry.setStatus('mandatory')
mscMmTxLinkToLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 11, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxLinkToLogicalProcessor.setStatus('mandatory')
mscMmTxMonitoredDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("ingress", 0))).clone('ingress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxMonitoredDirection.setStatus('mandatory')
mscMmTxServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("basicStructured", 1))).clone('basicStructured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxServiceType.setStatus('mandatory')
mscMmTxPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(47, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxPartialFill.setStatus('mandatory')
mscMmTxIdleSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("off", 0))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxIdleSuppression.setStatus('mandatory')
mscMmTxStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12), )
if mibBuilder.loadTexts: mscMmTxStateTable.setStatus('mandatory')
mscMmTxStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"))
if mibBuilder.loadTexts: mscMmTxStateEntry.setStatus('mandatory')
mscMmTxAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxAdminState.setStatus('mandatory')
mscMmTxOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxOperationalState.setStatus('mandatory')
mscMmTxUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxUsageState.setStatus('mandatory')
mscMmTxAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxAvailabilityStatus.setStatus('mandatory')
mscMmTxProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxProceduralStatus.setStatus('mandatory')
mscMmTxControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxControlStatus.setStatus('mandatory')
mscMmTxAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxAlarmStatus.setStatus('mandatory')
mscMmTxStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxStandbyStatus.setStatus('mandatory')
mscMmTxUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxUnknownStatus.setStatus('mandatory')
mscMmTxOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 13), )
if mibBuilder.loadTexts: mscMmTxOperTable.setStatus('mandatory')
mscMmTxOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"))
if mibBuilder.loadTexts: mscMmTxOperEntry.setStatus('mandatory')
mscMmTxConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 0), ("channelNotReady", 1), ("atmNotReady", 2), ("atmNotConfigured", 3), ("channelNotSpecified", 4))).clone('channelNotReady')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxConnectionStatus.setStatus('mandatory')
mscMmTxChanToMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 13, 1, 4), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxChanToMonitor.setStatus('mandatory')
mscMmTxNap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2))
mscMmTxNapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 1), )
if mibBuilder.loadTexts: mscMmTxNapRowStatusTable.setStatus('mandatory')
mscMmTxNapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxNapIndex"))
if mibBuilder.loadTexts: mscMmTxNapRowStatusEntry.setStatus('mandatory')
mscMmTxNapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxNapRowStatus.setStatus('mandatory')
mscMmTxNapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxNapComponentName.setStatus('mandatory')
mscMmTxNapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxNapStorageType.setStatus('mandatory')
mscMmTxNapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscMmTxNapIndex.setStatus('mandatory')
mscMmTxNapProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 10), )
if mibBuilder.loadTexts: mscMmTxNapProvTable.setStatus('mandatory')
mscMmTxNapProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxNapIndex"))
if mibBuilder.loadTexts: mscMmTxNapProvEntry.setStatus('mandatory')
mscMmTxNapAtmConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMmTxNapAtmConnection.setStatus('mandatory')
mscMmTxAtmCon = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6))
mscMmTxAtmConRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 1), )
if mibBuilder.loadTexts: mscMmTxAtmConRowStatusTable.setStatus('mandatory')
mscMmTxAtmConRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxAtmConIndex"))
if mibBuilder.loadTexts: mscMmTxAtmConRowStatusEntry.setStatus('mandatory')
mscMmTxAtmConRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxAtmConRowStatus.setStatus('mandatory')
mscMmTxAtmConComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxAtmConComponentName.setStatus('mandatory')
mscMmTxAtmConStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxAtmConStorageType.setStatus('mandatory')
mscMmTxAtmConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscMmTxAtmConIndex.setStatus('mandatory')
mscMmTxAtmConOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 10), )
if mibBuilder.loadTexts: mscMmTxAtmConOperTable.setStatus('mandatory')
mscMmTxAtmConOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxIndex"), (0, "Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", "mscMmTxAtmConIndex"))
if mibBuilder.loadTexts: mscMmTxAtmConOperEntry.setStatus('mandatory')
mscMmTxAtmConNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 151, 6, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMmTxAtmConNextHop.setStatus('mandatory')
circuitEmulationServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 1))
circuitEmulationServiceGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 1, 1))
circuitEmulationServiceGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 1, 1, 3))
circuitEmulationServiceGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 1, 1, 3, 2))
circuitEmulationServiceCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 3))
circuitEmulationServiceCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 3, 1))
circuitEmulationServiceCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 3, 1, 3))
circuitEmulationServiceCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 55, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-CircuitEmulationServiceMIB", mscAal1CesLCoRetryCount=mscAal1CesLCoRetryCount, mscAal1CesLCoPathUpDateTime=mscAal1CesLCoPathUpDateTime, mscAal1CesAepExpectedRemoteAddress=mscAal1CesAepExpectedRemoteAddress, mscMmTxControlStatus=mscMmTxControlStatus, circuitEmulationServiceGroupCA=circuitEmulationServiceGroupCA, mscAal1CesAepFirstRetryInterval=mscAal1CesAepFirstRetryInterval, mscAal1CesStateTable=mscAal1CesStateTable, mscAal1CesPepLocalAddress=mscAal1CesPepLocalAddress, mscAal1CesAepCalledVpiVci=mscAal1CesAepCalledVpiVci, mscAal1CesAtmConStorageType=mscAal1CesAtmConStorageType, mscAal1CesProvTable=mscAal1CesProvTable, mscAal1CesCellsReceived=mscAal1CesCellsReceived, mscMmTxComponentName=mscMmTxComponentName, mscAal1CesMaximumBufferDelay=mscAal1CesMaximumBufferDelay, mscAal1CesAal1LayerLossStatus=mscAal1CesAal1LayerLossStatus, mscAal1CesAepRetryTimeRemaining=mscAal1CesAepRetryTimeRemaining, mscAal1CesIndex=mscAal1CesIndex, mscMmTxOperationalState=mscMmTxOperationalState, mscMmTxAlarmStatus=mscMmTxAlarmStatus, mscAal1CesLCoDelayMetric=mscAal1CesLCoDelayMetric, mscAal1CesLCoPktsToNetwork=mscAal1CesLCoPktsToNetwork, mscAal1CesBufferUnderflows=mscAal1CesBufferUnderflows, mscAal1CesAvailabilityStatus=mscAal1CesAvailabilityStatus, mscAal1CesLCoStatsTable=mscAal1CesLCoStatsTable, mscMmTxAtmConOperEntry=mscMmTxAtmConOperEntry, mscAal1CesAepStorageType=mscAal1CesAepStorageType, mscAal1CesNap=mscAal1CesNap, mscAal1CesLCoReasonForNoRoute=mscAal1CesLCoReasonForNoRoute, mscAal1CesNapProvTable=mscAal1CesNapProvTable, mscAal1CesIdlePattern=mscAal1CesIdlePattern, mscMmTxOperTable=mscMmTxOperTable, mscMmTxAtmConNextHop=mscMmTxAtmConNextHop, mscAal1CesInterfaceName=mscAal1CesInterfaceName, mscAal1CesHeaderErrors=mscAal1CesHeaderErrors, mscAal1CesPepStorageType=mscAal1CesPepStorageType, mscMmTxUsageState=mscMmTxUsageState, mscAal1CesAepLastTearDownCause=mscAal1CesAepLastTearDownCause, mscAal1CesLCoRequiredTrafficType=mscAal1CesLCoRequiredTrafficType, mscAal1CesLCoRequiredCustomerParameter=mscAal1CesLCoRequiredCustomerParameter, mscMmTx=mscMmTx, mscAal1CesPepProvEndPointAddrEntry=mscAal1CesPepProvEndPointAddrEntry, mscMmTxCidDataEntry=mscMmTxCidDataEntry, mscMmTxProceduralStatus=mscMmTxProceduralStatus, mscAal1CesPepRowStatusEntry=mscAal1CesPepRowStatusEntry, mscAal1CesLCoBumpPreference=mscAal1CesLCoBumpPreference, mscAal1CesLCoComponentName=mscAal1CesLCoComponentName, mscAal1CesServiceType=mscAal1CesServiceType, mscAal1CesAepProfile=mscAal1CesAepProfile, mscMmTxAtmConStorageType=mscMmTxAtmConStorageType, mscAal1CesNapProvEntry=mscAal1CesNapProvEntry, mscAal1CesLCoBytesToNetwork=mscAal1CesLCoBytesToNetwork, mscAal1CesLCoHoldingPriority=mscAal1CesLCoHoldingPriority, mscAal1CesIdleSuppression=mscAal1CesIdleSuppression, mscMmTxRowStatusEntry=mscMmTxRowStatusEntry, mscAal1CesBufferOverflows=mscAal1CesBufferOverflows, mscMmTxLinkToLogicalProcessor=mscMmTxLinkToLogicalProcessor, mscMmTxStandbyStatus=mscMmTxStandbyStatus, mscAal1CesPepLastTearDownCause=mscAal1CesPepLastTearDownCause, mscAal1CesCustomerIdentifier=mscAal1CesCustomerIdentifier, mscAal1CesPepRowStatusTable=mscAal1CesPepRowStatusTable, mscAal1CesStatsTable=mscAal1CesStatsTable, mscAal1CesCidDataEntry=mscAal1CesCidDataEntry, mscAal1CesLCoPathFailureAction=mscAal1CesLCoPathFailureAction, mscAal1CesLCoRequiredRxBandwidth=mscAal1CesLCoRequiredRxBandwidth, mscMmTxAvailabilityStatus=mscMmTxAvailabilityStatus, mscAal1CesRowStatusEntry=mscAal1CesRowStatusEntry, circuitEmulationServiceGroup=circuitEmulationServiceGroup, mscAal1CesAtmCon=mscAal1CesAtmCon, mscAal1CesNapComponentName=mscAal1CesNapComponentName, mscAal1CesStatsEntry=mscAal1CesStatsEntry, mscAal1CesRowStatusTable=mscAal1CesRowStatusTable, mscAal1CesLCoLastTearDownReason=mscAal1CesLCoLastTearDownReason, mscAal1CesAtmConComponentName=mscAal1CesAtmConComponentName, mscAal1CesLCoRequiredSecurity=mscAal1CesLCoRequiredSecurity, mscMmTxAtmConComponentName=mscMmTxAtmConComponentName, mscAal1CesLCoEnd=mscAal1CesLCoEnd, mscAal1CesAlarmStatus=mscAal1CesAlarmStatus, mscAal1CesLCoStorageType=mscAal1CesLCoStorageType, mscAal1CesStateEntry=mscAal1CesStateEntry, mscAal1CesAepProvEndPointAddrTable=mscAal1CesAepProvEndPointAddrTable, mscAal1CesLCoBytesFromNetwork=mscAal1CesLCoBytesFromNetwork, mscAal1CesPointerReframes=mscAal1CesPointerReframes, mscAal1CesAepLastSetupFailureCause=mscAal1CesAepLastSetupFailureCause, mscAal1CesPepLastTearDownDiagnostic=mscAal1CesPepLastTearDownDiagnostic, mscMmTxNapProvTable=mscMmTxNapProvTable, circuitEmulationServiceCapabilities=circuitEmulationServiceCapabilities, mscAal1CesCellLossIntegrationPeriod=mscAal1CesCellLossIntegrationPeriod, mscAal1CesLCoRowStatusEntry=mscAal1CesLCoRowStatusEntry, mscAal1CesLCoPermittedTrunkTypes=mscAal1CesLCoPermittedTrunkTypes, mscAal1CesDummyDataByte=mscAal1CesDummyDataByte, mscAal1CesAepLastTearDownDiagnostic=mscAal1CesAepLastTearDownDiagnostic, mscMmTxRowStatus=mscMmTxRowStatus, mscAal1CesProvEntry=mscAal1CesProvEntry, mscAal1CesNapRowStatusEntry=mscAal1CesNapRowStatusEntry, mscAal1CesLCoPathTable=mscAal1CesLCoPathTable, mscMmTxChanToMonitor=mscMmTxChanToMonitor, mscAal1CesAepRetryFailures=mscAal1CesAepRetryFailures, mscAal1CesAepOutEntry=mscAal1CesAepOutEntry, mscAal1CesNapIndex=mscAal1CesNapIndex, mscAal1CesAepActiveEndPointType=mscAal1CesAepActiveEndPointType, mscAal1CesAtmConRowStatusTable=mscAal1CesAtmConRowStatusTable, mscMmTxNapStorageType=mscMmTxNapStorageType, mscAal1CesLCoIndex=mscAal1CesLCoIndex, mscMmTxAtmConIndex=mscMmTxAtmConIndex, mscMmTxAtmCon=mscMmTxAtmCon, circuitEmulationServiceCapabilitiesCA02A=circuitEmulationServiceCapabilitiesCA02A, mscAal1CesAepRowStatusTable=mscAal1CesAepRowStatusTable, mscAal1CesLCoPathEntry=mscAal1CesLCoPathEntry, mscAal1CesPepRemoteAddress=mscAal1CesPepRemoteAddress, mscMmTxPartialFill=mscMmTxPartialFill, mscAal1CesPartialFill=mscAal1CesPartialFill, mscAal1CesPepRowStatus=mscAal1CesPepRowStatus, mscAal1CesCidDataTable=mscAal1CesCidDataTable, mscAal1CesBufferSize=mscAal1CesBufferSize, mscAal1CesOperationalState=mscAal1CesOperationalState, mscAal1CesAepProvEndPointAddrEntry=mscAal1CesAepProvEndPointAddrEntry, mscAal1CesAtmConRowStatus=mscAal1CesAtmConRowStatus, mscAal1CesPepPassiveOperTable=mscAal1CesPepPassiveOperTable, mscAal1CesPepPassiveOperEntry=mscAal1CesPepPassiveOperEntry, mscAal1CesAtmConIndex=mscAal1CesAtmConIndex, mscAal1CesCellsTransmitted=mscAal1CesCellsTransmitted, mscAal1CesAtmConOperEntry=mscAal1CesAtmConOperEntry, circuitEmulationServiceMIB=circuitEmulationServiceMIB, mscAal1CesNapRowStatusTable=mscAal1CesNapRowStatusTable, mscAal1CesLCoOverrideRemoteName=mscAal1CesLCoOverrideRemoteName, mscAal1CesPepEpOperTable=mscAal1CesPepEpOperTable, mscAal1CesLCoRowStatus=mscAal1CesLCoRowStatus, mscAal1CesReassembledCells=mscAal1CesReassembledCells, mscMmTxNap=mscMmTxNap, mscAal1CesDp2CellDelayVariationTolerance=mscAal1CesDp2CellDelayVariationTolerance, mscAal1CesLCoCostMetric=mscAal1CesLCoCostMetric, circuitEmulationServiceCapabilitiesCA=circuitEmulationServiceCapabilitiesCA, mscAal1CesNapStorageType=mscAal1CesNapStorageType, mscAal1CesAepProvTable=mscAal1CesAepProvTable, mscAal1CesAepOutTable=mscAal1CesAepOutTable, mscAal1CesPepExpectedRemoteAddress=mscAal1CesPepExpectedRemoteAddress, mscAal1CesStandbyStatus=mscAal1CesStandbyStatus, mscAal1CesLCoEmissionPriority=mscAal1CesLCoEmissionPriority, mscMmTxMonitoredDirection=mscMmTxMonitoredDirection, mscAal1CesAepAddressToCall=mscAal1CesAepAddressToCall, mscAal1CesPep=mscAal1CesPep, mscAal1CesUsageState=mscAal1CesUsageState, mscAal1CesProceduralStatus=mscAal1CesProceduralStatus, circuitEmulationServiceGroupCA02A=circuitEmulationServiceGroupCA02A, mscMmTxNapRowStatusEntry=mscMmTxNapRowStatusEntry, mscAal1CesLCoPathFailureCount=mscAal1CesLCoPathFailureCount, mscAal1CesLCoPathDataTable=mscAal1CesLCoPathDataTable, mscMmTxProvEntry=mscMmTxProvEntry, mscAal1CesLCoOptimization=mscAal1CesLCoOptimization, mscMmTxIndex=mscMmTxIndex, mscAal1CesControlStatus=mscAal1CesControlStatus, mscAal1CesLCoStatsEntry=mscAal1CesLCoStatsEntry, mscMmTxOperEntry=mscMmTxOperEntry, mscMmTxStateTable=mscMmTxStateTable, mscAal1CesAepEpOperTable=mscAal1CesAepEpOperTable, mscMmTxNapProvEntry=mscMmTxNapProvEntry, mscMmTxCidDataTable=mscMmTxCidDataTable, mscAal1CesCellLossStatus=mscAal1CesCellLossStatus, mscMmTxAtmConOperTable=mscMmTxAtmConOperTable, mscAal1CesAepLocalAddress=mscAal1CesAepLocalAddress, mscAal1CesAepSvcStatus=mscAal1CesAepSvcStatus, mscAal1CesAepComponentName=mscAal1CesAepComponentName, mscAal1Ces=mscAal1Ces, mscMmTxNapRowStatusTable=mscMmTxNapRowStatusTable, mscAal1CesConnectionStatus=mscAal1CesConnectionStatus, mscAal1CesRowStatus=mscAal1CesRowStatus, mscAal1CesPepComponentName=mscAal1CesPepComponentName, mscAal1CesLCoState=mscAal1CesLCoState, mscAal1CesAepRemoteAddress=mscAal1CesAepRemoteAddress, mscAal1CesLCoDiscardPriority=mscAal1CesLCoDiscardPriority, mscMmTxServiceType=mscMmTxServiceType, mscMmTxNapAtmConnection=mscMmTxNapAtmConnection, circuitEmulationServiceGroupCA02=circuitEmulationServiceGroupCA02, mscAal1CesOperEntry=mscAal1CesOperEntry, mscAal1CesLCoRowStatusTable=mscAal1CesLCoRowStatusTable, mscAal1CesStorageType=mscAal1CesStorageType, mscAal1CesAepProvEntry=mscAal1CesAepProvEntry, mscAal1CesCellLossRecoveryPeriod=mscAal1CesCellLossRecoveryPeriod, mscAal1CesPepIndex=mscAal1CesPepIndex, mscAal1CesPepSvcStatus=mscAal1CesPepSvcStatus, mscAal1CesLCoPathValue=mscAal1CesLCoPathValue, mscMmTxNapIndex=mscMmTxNapIndex, mscAal1CesLCoSetupPriority=mscAal1CesLCoSetupPriority, mscAal1CesAal1SequenceErrors=mscAal1CesAal1SequenceErrors, mscAal1CesPepProvEndPointAddrTable=mscAal1CesPepProvEndPointAddrTable, mscMmTxStorageType=mscMmTxStorageType, mscAal1CesLCoPathDataEntry=mscAal1CesLCoPathDataEntry, mscAal1CesAepRowStatus=mscAal1CesAepRowStatus, mscAal1CesAepEpOperEntry=mscAal1CesAepEpOperEntry, mscAal1CesAtmConRowStatusEntry=mscAal1CesAtmConRowStatusEntry, mscAal1CesAtmConNextHop=mscAal1CesAtmConNextHop, mscMmTxAtmConRowStatusTable=mscMmTxAtmConRowStatusTable, mscAal1CesNapRowStatus=mscAal1CesNapRowStatus, mscMmTxAdminState=mscMmTxAdminState, mscAal1CesAepIndex=mscAal1CesAepIndex, mscAal1CesAep=mscAal1CesAep, mscMmTxAtmConRowStatusEntry=mscMmTxAtmConRowStatusEntry, mscMmTxNapComponentName=mscMmTxNapComponentName, mscAal1CesNapAtmConnection=mscAal1CesNapAtmConnection, mscAal1CesAepRoutingOption=mscAal1CesAepRoutingOption, mscMmTxProvTable=mscMmTxProvTable, mscMmTxConnectionStatus=mscMmTxConnectionStatus, mscAal1CesPepEpOperEntry=mscAal1CesPepEpOperEntry, mscMmTxStateEntry=mscMmTxStateEntry, circuitEmulationServiceCapabilitiesCA02=circuitEmulationServiceCapabilitiesCA02, mscMmTxIdleSuppression=mscMmTxIdleSuppression, mscAal1CesAdminState=mscAal1CesAdminState, mscAal1CesUnknownStatus=mscAal1CesUnknownStatus, mscAal1CesLostCells=mscAal1CesLostCells, mscMmTxCustomerIdentifier=mscMmTxCustomerIdentifier, mscMmTxUnknownStatus=mscMmTxUnknownStatus, mscAal1CesAepRowStatusEntry=mscAal1CesAepRowStatusEntry, mscAal1CesLCo=mscAal1CesLCo, mscAal1CesLCoPktsFromNetwork=mscAal1CesLCoPktsFromNetwork, mscMmTxRowStatusTable=mscMmTxRowStatusTable, mscAal1CesMisinsertedCells=mscAal1CesMisinsertedCells, mscAal1CesAepRetryLimit=mscAal1CesAepRetryLimit, mscMmTxNapRowStatus=mscMmTxNapRowStatus, mscMmTxAtmConRowStatus=mscMmTxAtmConRowStatus, mscAal1CesPointerParityErrors=mscAal1CesPointerParityErrors, mscAal1CesComponentName=mscAal1CesComponentName, mscAal1CesLCoPathType=mscAal1CesLCoPathType, mscAal1CesLCoRequiredTxBandwidth=mscAal1CesLCoRequiredTxBandwidth, mscAal1CesOperTable=mscAal1CesOperTable, mscAal1CesLCoRoundTripDelay=mscAal1CesLCoRoundTripDelay, mscAal1CesAepLastSetupFailureDiagnostic=mscAal1CesAepLastSetupFailureDiagnostic, mscAal1CesAtmConOperTable=mscAal1CesAtmConOperTable)
