#
# PySNMP MIB module DAVID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DAVID-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, IpAddress, Integer32, iso, ModuleIdentity, Gauge32, Counter32, Bits, ObjectIdentity, MibIdentifier, TimeTicks, Counter64, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "IpAddress", "Integer32", "iso", "ModuleIdentity", "Gauge32", "Counter32", "Bits", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter64", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
david = MibIdentifier((1, 3, 6, 1, 4, 1, 66))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1))
davidExpressNet = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1, 3))
exNetChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1, 3, 1))
exNetEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1, 3, 2))
exNetConcentrator = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1))
exNetModule = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2))
exNetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3))
exNetMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4))
exNetChassisType = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("m6102", 2), ("m6103", 3), ("m6310tel", 4), ("m6310rj", 5), ("m6318st", 6), ("m6318sma", 7), ("reserved", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetChassisType.setStatus('mandatory')
exNetChassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("expressNet", 2), ("reserved", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetChassisBkplType.setStatus('mandatory')
exNetChassisBkplRev = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetChassisBkplRev.setStatus('mandatory')
exNetChassisPsType = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("standardXfmr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetChassisPsType.setStatus('mandatory')
exNetChassisPsStatus = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetChassisPsStatus.setStatus('mandatory')
exNetSlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 7), )
if mibBuilder.loadTexts: exNetSlotConfigTable.setStatus('mandatory')
exNetSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 7, 1), ).setIndexNames((0, "DAVID-MIB", "exNetSlotIndex"))
if mibBuilder.loadTexts: exNetSlotConfigEntry.setStatus('mandatory')
exNetSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetSlotIndex.setStatus('mandatory')
exNetBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetBoardId.setStatus('mandatory')
exNetBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("empty", 1), ("other", 2), ("m6203", 3), ("m6201", 4), ("m6311", 5), ("m6312", 6), ("m6313st", 7), ("m6313sma", 8), ("m6006", 9), ("reserved", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetBoardType.setStatus('mandatory')
exNetBoardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetBoardDescr.setStatus('mandatory')
exNetBoardNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 7, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetBoardNumOfPorts.setStatus('mandatory')
exNetChassisCapacity = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetChassisCapacity.setStatus('mandatory')
exNetConcRetimingStatus = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcRetimingStatus.setStatus('mandatory')
exNetConcFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcFrmsRxOk.setStatus('mandatory')
exNetConcOctetsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcOctetsRxOk.setStatus('mandatory')
exNetConcMcastFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcMcastFrmsRxOk.setStatus('mandatory')
exNetConcBcastFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcBcastFrmsRxOk.setStatus('mandatory')
exNetConcColls = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcColls.setStatus('mandatory')
exNetConcTooLongErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcTooLongErrors.setStatus('mandatory')
exNetConcRuntErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcRuntErrors.setStatus('mandatory')
exNetConcFragErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcFragErrors.setStatus('mandatory')
exNetConcAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcAlignErrors.setStatus('mandatory')
exNetConcFcsErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcFcsErrors.setStatus('mandatory')
exNetConcLateCollErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcLateCollErrors.setStatus('mandatory')
exNetConcName = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetConcName.setStatus('mandatory')
exNetConcJabbers = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcJabbers.setStatus('mandatory')
exNetConcSfdErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcSfdErrors.setStatus('mandatory')
exNetConcAutoPartitions = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcAutoPartitions.setStatus('mandatory')
exNetConcOosBitRate = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcOosBitRate.setStatus('mandatory')
exNetConcLinkErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcLinkErrors.setStatus('mandatory')
exNetConcFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcFrameErrors.setStatus('mandatory')
exNetConcNetUtilization = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcNetUtilization.setStatus('mandatory')
exNetConcResetTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetConcResetTimeStamp.setStatus('mandatory')
exNetConcReset = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2), ("resetToDefault", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetConcReset.setStatus('mandatory')
exNetModuleTable = MibTable((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: exNetModuleTable.setStatus('mandatory')
exNetModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "DAVID-MIB", "exNetModuleIndex"))
if mibBuilder.loadTexts: exNetModuleEntry.setStatus('mandatory')
exNetModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleIndex.setStatus('mandatory')
exNetModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("empty", 1), ("other", 2), ("m6203", 3), ("m6201", 4), ("m6311", 5), ("m6312", 6), ("m6313st", 7), ("m6313sma", 8), ("m6006", 9), ("reserved", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleType.setStatus('mandatory')
exNetModuleHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleHwVer.setStatus('mandatory')
exNetModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("noComms", 2), ("selfTestFail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleStatus.setStatus('mandatory')
exNetModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2), ("resetToDefault", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetModuleReset.setStatus('mandatory')
exNetModulePartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("partition", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetModulePartStatus.setStatus('mandatory')
exNetModuleNmCntlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notNmControl", 1), ("nmControl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleNmCntlStatus.setStatus('mandatory')
exNetModulePsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModulePsStatus.setStatus('mandatory')
exNetModuleFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleFrmsRxOk.setStatus('mandatory')
exNetModuleOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleOctetsRxOk.setStatus('mandatory')
exNetModuleColls = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleColls.setStatus('mandatory')
exNetModuleTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleTooLongErrors.setStatus('mandatory')
exNetModuleRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleRuntErrors.setStatus('mandatory')
exNetModuleAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleAlignErrors.setStatus('mandatory')
exNetModuleFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleFcsErrors.setStatus('mandatory')
exNetModuleLateCollErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleLateCollErrors.setStatus('mandatory')
exNetModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetModuleName.setStatus('mandatory')
exNetModuleJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleJabbers.setStatus('mandatory')
exNetModuleSfdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleSfdErrors.setStatus('mandatory')
exNetModuleAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleAutoPartitions.setStatus('mandatory')
exNetModuleOosBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleOosBitRate.setStatus('mandatory')
exNetModuleLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleLinkErrors.setStatus('mandatory')
exNetModuleFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleFrameErrors.setStatus('mandatory')
exNetModuleFragErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleFragErrors.setStatus('mandatory')
exNetModulePortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetModulePortConfig.setStatus('mandatory')
exNetModuleLinkStatConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetModuleLinkStatConfig.setStatus('mandatory')
exNetModuleResetTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleResetTimeStamp.setStatus('mandatory')
exNetModuleLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleLinkStatus.setStatus('mandatory')
exNetModuleFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleFwVer.setStatus('mandatory')
exNetModuleFwFeaturePkg = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleFwFeaturePkg.setStatus('mandatory')
exNetModuleSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 2, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetModuleSelfTestResult.setStatus('mandatory')
exNetPortTable = MibTable((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: exNetPortTable.setStatus('mandatory')
exNetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "DAVID-MIB", "exNetPortModuleIndex"), (0, "DAVID-MIB", "exNetPortIndex"))
if mibBuilder.loadTexts: exNetPortEntry.setStatus('mandatory')
exNetPortModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortModuleIndex.setStatus('mandatory')
exNetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortIndex.setStatus('mandatory')
exNetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortLinkStatus.setStatus('mandatory')
exNetPortPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("partition", 2), ("autoPartition", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetPortPartStatus.setStatus('mandatory')
exNetPortJabberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("jabbering", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortJabberStatus.setStatus('mandatory')
exNetPortFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortFrmsRxOk.setStatus('mandatory')
exNetPortOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortOctetsRxOk.setStatus('mandatory')
exNetPortColls = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortColls.setStatus('mandatory')
exNetPortTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortTooLongErrors.setStatus('mandatory')
exNetPortRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortRuntErrors.setStatus('mandatory')
exNetPortAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortAlignErrors.setStatus('mandatory')
exNetPortFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortFcsErrors.setStatus('mandatory')
exNetPortLateCollErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortLateCollErrors.setStatus('mandatory')
exNetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetPortName.setStatus('mandatory')
exNetPortJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortJabbers.setStatus('mandatory')
exNetPortSfdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortSfdErrors.setStatus('mandatory')
exNetPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortAutoPartitions.setStatus('mandatory')
exNetPortOosBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortOosBitRate.setStatus('mandatory')
exNetPortLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortLinkErrors.setStatus('mandatory')
exNetPortFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortFrameErrors.setStatus('mandatory')
exNetPortFragErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortFragErrors.setStatus('mandatory')
exNetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("repeater", 2), ("tenBasefAsync", 3), ("tenBasefSync", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortType.setStatus('mandatory')
exNetPortMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("tenBase5", 2), ("tenBaseT", 3), ("fOIRL", 4), ("tenBase2", 5), ("tenBaseFA", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetPortMauType.setStatus('mandatory')
exNetPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("txDisabled", 4), ("rxDisabled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetPortConfig.setStatus('mandatory')
exNetPortLinkStatConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("txDisabled", 4), ("rxDisabled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetPortLinkStatConfig.setStatus('mandatory')
exNetPortPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("positive", 2), ("negative", 3), ("txNegative", 4), ("rxNegative", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetPortPolarity.setStatus('mandatory')
exNetPortTransmitTest = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetPortTransmitTest.setStatus('mandatory')
exNetMgmtType = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("tbd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetMgmtType.setStatus('mandatory')
exNetMgmtHwVer = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetMgmtHwVer.setStatus('mandatory')
exNetMgmtFwVer = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetMgmtFwVer.setStatus('mandatory')
exNetMgmtSwMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetMgmtSwMajorVer.setStatus('mandatory')
exNetMgmtSwMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetMgmtSwMinorVer.setStatus('mandatory')
exNetMgmtStatus = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetMgmtStatus.setStatus('mandatory')
exNetMgmtMode = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtMode.setStatus('mandatory')
exNetMgmtReset = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtReset.setStatus('mandatory')
exNetMgmtRestart = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRestart", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtRestart.setStatus('mandatory')
exNetMgmtIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtIpAddr.setStatus('mandatory')
exNetMgmtNetMask = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtNetMask.setStatus('mandatory')
exNetMgmtDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtDefaultGateway.setStatus('mandatory')
exNetMgmtBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exNetMgmtBaudRate.setStatus('mandatory')
exNetMgmtLocation = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtLocation.setStatus('mandatory')
exNetMgmtTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 20), )
if mibBuilder.loadTexts: exNetMgmtTrapReceiverTable.setStatus('mandatory')
exNetMgmtTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 20, 1), ).setIndexNames((0, "DAVID-MIB", "exNetMgmtTrapReceiverAddr"))
if mibBuilder.loadTexts: exNetMgmtTrapReceiverEntry.setStatus('mandatory')
exNetMgmtTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtTrapType.setStatus('mandatory')
exNetMgmtTrapReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 20, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtTrapReceiverAddr.setStatus('mandatory')
exNetMgmtTrapReceiverComm = MibTableColumn((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtTrapReceiverComm.setStatus('mandatory')
exNetMgmtAuthTrap = MibScalar((1, 3, 6, 1, 4, 1, 66, 1, 3, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exNetMgmtAuthTrap.setStatus('mandatory')
mibBuilder.exportSymbols("DAVID-MIB", exNetPortIndex=exNetPortIndex, exNetMgmtAuthTrap=exNetMgmtAuthTrap, exNetModuleOctetsRxOk=exNetModuleOctetsRxOk, exNetPortPartStatus=exNetPortPartStatus, exNetPortSfdErrors=exNetPortSfdErrors, exNetConcAlignErrors=exNetConcAlignErrors, exNetPortLinkErrors=exNetPortLinkErrors, exNetChassisCapacity=exNetChassisCapacity, exNetMgmtHwVer=exNetMgmtHwVer, exNetConcAutoPartitions=exNetConcAutoPartitions, exNetMgmtDefaultGateway=exNetMgmtDefaultGateway, exNetChassisBkplType=exNetChassisBkplType, exNetMgmt=exNetMgmt, exNetModuleRuntErrors=exNetModuleRuntErrors, exNetMgmtTrapReceiverTable=exNetMgmtTrapReceiverTable, exNetConcentrator=exNetConcentrator, exNetConcLinkErrors=exNetConcLinkErrors, exNetModuleSfdErrors=exNetModuleSfdErrors, exNetModuleFwVer=exNetModuleFwVer, exNetModulePortConfig=exNetModulePortConfig, exNetChassisPsStatus=exNetChassisPsStatus, exNetModuleEntry=exNetModuleEntry, exNetPortLateCollErrors=exNetPortLateCollErrors, exNetModuleNmCntlStatus=exNetModuleNmCntlStatus, exNetMgmtFwVer=exNetMgmtFwVer, exNetConcResetTimeStamp=exNetConcResetTimeStamp, exNetModuleSelfTestResult=exNetModuleSelfTestResult, exNetModule=exNetModule, exNetMgmtLocation=exNetMgmtLocation, exNetSlotIndex=exNetSlotIndex, exNetModuleAutoPartitions=exNetModuleAutoPartitions, exNetSlotConfigTable=exNetSlotConfigTable, exNetPortPolarity=exNetPortPolarity, exNetPortJabberStatus=exNetPortJabberStatus, exNetConcJabbers=exNetConcJabbers, exNetPortTable=exNetPortTable, exNetMgmtMode=exNetMgmtMode, exNetMgmtTrapReceiverComm=exNetMgmtTrapReceiverComm, exNetMgmtSwMajorVer=exNetMgmtSwMajorVer, exNetBoardId=exNetBoardId, exNetConcOctetsRxOk=exNetConcOctetsRxOk, exNetModuleStatus=exNetModuleStatus, exNetMgmtStatus=exNetMgmtStatus, exNetMgmtReset=exNetMgmtReset, exNetModuleHwVer=exNetModuleHwVer, exNetModuleIndex=exNetModuleIndex, davidExpressNet=davidExpressNet, exNetConcBcastFrmsRxOk=exNetConcBcastFrmsRxOk, exNetPortLinkStatus=exNetPortLinkStatus, exNetConcMcastFrmsRxOk=exNetConcMcastFrmsRxOk, exNetModuleType=exNetModuleType, exNetConcLateCollErrors=exNetConcLateCollErrors, exNetMgmtSwMinorVer=exNetMgmtSwMinorVer, exNetPortFrmsRxOk=exNetPortFrmsRxOk, exNetModuleFrmsRxOk=exNetModuleFrmsRxOk, exNetPortColls=exNetPortColls, exNetModuleName=exNetModuleName, exNetModuleLinkStatConfig=exNetModuleLinkStatConfig, exNetConcRetimingStatus=exNetConcRetimingStatus, exNetModuleColls=exNetModuleColls, exNetPortTooLongErrors=exNetPortTooLongErrors, exNetConcOosBitRate=exNetConcOosBitRate, exNetMgmtBaudRate=exNetMgmtBaudRate, exNetPortModuleIndex=exNetPortModuleIndex, exNetBoardNumOfPorts=exNetBoardNumOfPorts, exNetPortFrameErrors=exNetPortFrameErrors, exNetConcSfdErrors=exNetConcSfdErrors, exNetMgmtTrapReceiverAddr=exNetMgmtTrapReceiverAddr, exNetModuleFragErrors=exNetModuleFragErrors, exNetChassisPsType=exNetChassisPsType, exNetBoardDescr=exNetBoardDescr, exNetPortEntry=exNetPortEntry, exNetModuleLateCollErrors=exNetModuleLateCollErrors, exNetPortMauType=exNetPortMauType, exNetConcReset=exNetConcReset, exNetModuleTable=exNetModuleTable, david=david, exNetModuleTooLongErrors=exNetModuleTooLongErrors, exNetSlotConfigEntry=exNetSlotConfigEntry, exNetModulePsStatus=exNetModulePsStatus, exNetModuleFwFeaturePkg=exNetModuleFwFeaturePkg, exNetConcFrameErrors=exNetConcFrameErrors, exNetPortOosBitRate=exNetPortOosBitRate, exNetConcFragErrors=exNetConcFragErrors, exNetConcTooLongErrors=exNetConcTooLongErrors, exNetModuleLinkStatus=exNetModuleLinkStatus, exNetChassisType=exNetChassisType, exNetModuleResetTimeStamp=exNetModuleResetTimeStamp, exNetPortAlignErrors=exNetPortAlignErrors, exNetPortFcsErrors=exNetPortFcsErrors, exNetBoardType=exNetBoardType, exNetEthernet=exNetEthernet, exNetPortType=exNetPortType, exNetConcRuntErrors=exNetConcRuntErrors, exNetConcColls=exNetConcColls, exNetConcFrmsRxOk=exNetConcFrmsRxOk, exNetModulePartStatus=exNetModulePartStatus, exNetPortName=exNetPortName, exNetPortTransmitTest=exNetPortTransmitTest, exNetPortJabbers=exNetPortJabbers, exNetMgmtIpAddr=exNetMgmtIpAddr, exNetPortConfig=exNetPortConfig, exNetModuleJabbers=exNetModuleJabbers, exNetPortLinkStatConfig=exNetPortLinkStatConfig, exNetMgmtNetMask=exNetMgmtNetMask, exNetPortOctetsRxOk=exNetPortOctetsRxOk, exNetModuleOosBitRate=exNetModuleOosBitRate, exNetModuleReset=exNetModuleReset, exNetModuleFrameErrors=exNetModuleFrameErrors, exNetPortAutoPartitions=exNetPortAutoPartitions, exNetModuleFcsErrors=exNetModuleFcsErrors, exNetMgmtTrapType=exNetMgmtTrapType, exNetChassis=exNetChassis, exNetConcName=exNetConcName, products=products, exNetModuleLinkErrors=exNetModuleLinkErrors, exNetModuleAlignErrors=exNetModuleAlignErrors, exNetMgmtType=exNetMgmtType, exNetConcFcsErrors=exNetConcFcsErrors, exNetMgmtTrapReceiverEntry=exNetMgmtTrapReceiverEntry, exNetPortFragErrors=exNetPortFragErrors, exNetPort=exNetPort, exNetMgmtRestart=exNetMgmtRestart, exNetConcNetUtilization=exNetConcNetUtilization, exNetChassisBkplRev=exNetChassisBkplRev, exNetPortRuntErrors=exNetPortRuntErrors)
