#
# PySNMP MIB module EQLGROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQLGROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:50:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, ModuleIdentity, Counter32, TimeTicks, enterprises, Gauge32, MibIdentifier, NotificationType, Bits, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "ModuleIdentity", "Counter32", "TimeTicks", "enterprises", "Gauge32", "MibIdentifier", "NotificationType", "Bits", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity")
RowStatus, RowPointer, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "RowPointer", "DisplayString", "TextualConvention", "TruthValue")
eqlgroupModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 1))
eqlgroupModule.setRevisions(('2002-09-06 00:00',))
if mibBuilder.loadTexts: eqlgroupModule.setLastUpdated('201403121459Z')
if mibBuilder.loadTexts: eqlgroupModule.setOrganization('EqualLogic Inc.')
eqlgroupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 1, 1))
eqlgroupNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 1, 2))
eqlgroupConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 1, 3))
class UTFString(TextualConvention, OctetString):
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class AdminAccountPrivilegeType(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("global-admin", 0), ("pool-admin", 1), ("pool-admin-group-read", 2), ("volume-admin", 3))

class AdminAccountType(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("read-write", 1), ("read-only", 2))

eqlStorageGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1), )
if mibBuilder.loadTexts: eqlStorageGroupTable.setStatus('current')
eqlStorageGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlStorageGroupEntry.setStatus('current')
eqlGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupId.setStatus('current')
eqlGroupIsSingleSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single-subnet", 1), ("multi-subnet", 2))).clone('single-subnet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupIsSingleSubnet.setStatus('current')
eqlGroupDefaultGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultGatewayIpAddress.setStatus('deprecated')
eqlGroupDefaultMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultMask.setStatus('current')
eqlGroupDefaultRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rip", 2), ("ospf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultRoutingProtocol.setStatus('current')
eqlGroupIsStorageOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("capacity", 1), ("performance", 2), ("raid5", 3))).clone('capacity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupIsStorageOptimization.setStatus('current')
eqlGroupDiskAddWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 7), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDiskAddWaitTime.setStatus('current')
eqlGroupDefaultLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultLanguage.setStatus('deprecated')
eqlGroupDefaultSnapshotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 9), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultSnapshotSize.setStatus('current')
eqlGroupDefaultSnapshotWarningLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultSnapshotWarningLevel.setStatus('current')
eqlGroupDefaultSnapshotDeletePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("make-volume-offline", 1), ("delete-oldest", 2), ("stop-snapshots", 3))).clone('delete-oldest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultSnapshotDeletePolicy.setStatus('current')
eqlGroupTimeZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455))).clone(namedValues=NamedValues(("hst", 1), ("ast", 2), ("pst", 3), ("pnt", 4), ("mst", 5), ("cst", 6), ("est", 7), ("iet", 8), ("prt", 9), ("gmt", 10), ("ect", 11), ("eet", 12), ("eat", 13), ("met", 14), ("net", 15), ("plt", 16), ("ist", 17), ("bst", 18), ("vst", 19), ("ctt", 20), ("jst", 21), ("act", 22), ("aet", 23), ("sst", 24), ("nst", 25), ("mit", 26), ("cnt", 27), ("agt", 28), ("bet", 29), ("cat", 30), ("europe-Andorra", 31), ("asia-Dubai", 32), ("asia-Kabul", 33), ("america-Antigua", 34), ("america-Anguilla", 35), ("europe-Tirane", 36), ("asia-Yerevan", 37), ("america-Curacao", 38), ("africa-Luanda", 39), ("antarctica-McMurdo", 40), ("antarctica-South-Pole", 41), ("antarctica-Rothera", 42), ("antarctica-Palmer", 43), ("antarctica-Mawson", 44), ("antarctica-Davis", 45), ("antarctica-Casey", 46), ("antarctica-Vostok", 47), ("antarctica-DumontDUrville", 48), ("antarctica-Syowa", 49), ("america-Argentina-Buenos-Aires", 50), ("america-Argentina-Cordoba", 51), ("america-Argentina-Jujuy", 52), ("america-Argentina-Tucuman", 53), ("america-Argentina-Catamarca", 54), ("america-Argentina-La-Rioja", 55), ("america-Argentina-San-Juan", 56), ("america-Argentina-Mendoza", 57), ("america-Argentina-Rio-Gallegos", 58), ("america-Argentina-Ushuaia", 59), ("pacific-Pago-Pago", 60), ("europe-Vienna", 61), ("australia-Lord-Howe", 62), ("australia-Hobart", 63), ("australia-Currie", 64), ("australia-Melbourne", 65), ("australia-Sydney", 66), ("australia-Broken-Hill", 67), ("australia-Brisbane", 68), ("australia-Lindeman", 69), ("australia-Adelaide", 70), ("australia-Darwin", 71), ("australia-Perth", 72), ("america-Aruba", 73), ("europe-Mariehamn", 74), ("asia-Baku", 75), ("europe-Sarajevo", 76), ("america-Barbados", 77), ("asia-Dhaka", 78), ("europe-Brussels", 79), ("africa-Ouagadougou", 80), ("europe-Sofia", 81), ("asia-Bahrain", 82), ("africa-Bujumbura", 83), ("africa-Porto-Novo", 84), ("atlantic-Bermuda", 85), ("asia-Brunei", 86), ("america-La-Paz", 87), ("america-Noronha", 88), ("america-Belem", 89), ("america-Fortaleza", 90), ("america-Recife", 91), ("america-Araguaina", 92), ("america-Maceio", 93), ("america-Bahia", 94), ("america-Sao-Paulo", 95), ("america-Campo-Grande", 96), ("america-Cuiaba", 97), ("america-Porto-Velho", 98), ("america-Boa-Vista", 99), ("america-Manaus", 100), ("america-Eirunepe", 101), ("america-Rio-Branco", 102), ("america-Nassau", 103), ("asia-Thimphu", 104), ("africa-Gaborone", 105), ("europe-Minsk", 106), ("america-Belize", 107), ("america-St-Johns", 108), ("america-Halifax", 109), ("america-Glace-Bay", 110), ("america-Moncton", 111), ("america-Goose-Bay", 112), ("america-Blanc-Sablon", 113), ("america-Montreal", 114), ("america-Toronto", 115), ("america-Nipigon", 116), ("america-Thunder-Bay", 117), ("america-Pangnirtung", 118), ("america-Iqaluit", 119), ("america-Atikokan", 120), ("america-Rankin-Inlet", 121), ("america-Winnipeg", 122), ("america-Rainy-River", 123), ("america-Cambridge-Bay", 124), ("america-Regina", 125), ("america-Swift-Current", 126), ("america-Edmonton", 127), ("america-Yellowknife", 128), ("america-Inuvik", 129), ("america-Dawson-Creek", 130), ("america-Vancouver", 131), ("america-Whitehorse", 132), ("america-Dawson", 133), ("indian-Cocos", 134), ("africa-Kinshasa", 135), ("africa-Lubumbashi", 136), ("africa-Bangui", 137), ("africa-Brazzaville", 138), ("europe-Zurich", 139), ("africa-Abidjan", 140), ("pacific-Rarotonga", 141), ("america-Santiago", 142), ("pacific-Easter", 143), ("africa-Douala", 144), ("asia-Shanghai", 145), ("asia-Harbin", 146), ("asia-Chongqing", 147), ("asia-Urumqi", 148), ("asia-Kashgar", 149), ("america-Bogota", 150), ("america-Costa-Rica", 151), ("america-Havana", 152), ("atlantic-Cape-Verde", 153), ("indian-Christmas", 154), ("asia-Nicosia", 155), ("europe-Prague", 156), ("europe-Berlin", 157), ("africa-Djibouti", 158), ("europe-Copenhagen", 159), ("america-Dominica", 160), ("america-Santo-Domingo", 161), ("africa-Algiers", 162), ("america-Guayaquil", 163), ("pacific-Galapagos", 164), ("europe-Tallinn", 165), ("africa-Cairo", 166), ("africa-El-Aaiun", 167), ("africa-Asmara", 168), ("europe-Madrid", 169), ("africa-Ceuta", 170), ("atlantic-Canary", 171), ("africa-Addis-Ababa", 172), ("europe-Helsinki", 173), ("pacific-Fiji", 174), ("atlantic-Stanley", 175), ("pacific-Truk", 176), ("pacific-Ponape", 177), ("pacific-Kosrae", 178), ("atlantic-Faroe", 179), ("europe-Paris", 180), ("africa-Libreville", 181), ("europe-London", 182), ("america-Grenada", 183), ("asia-Tbilisi", 184), ("america-Cayenne", 185), ("europe-Guernsey", 186), ("africa-Accra", 187), ("europe-Gibraltar", 188), ("america-Godthab", 189), ("america-Danmarkshavn", 190), ("america-Scoresbysund", 191), ("america-Thule", 192), ("africa-Banjul", 193), ("africa-Conakry", 194), ("america-Guadeloupe", 195), ("africa-Malabo", 196), ("europe-Athens", 197), ("atlantic-South-Georgia", 198), ("america-Guatemala", 199), ("pacific-Guam", 200), ("africa-Bissau", 201), ("america-Guyana", 202), ("asia-Hong-Kong", 203), ("america-Tegucigalpa", 204), ("europe-Zagreb", 205), ("america-Port-au-Prince", 206), ("europe-Budapest", 207), ("asia-Jakarta", 208), ("asia-Pontianak", 209), ("asia-Makassar", 210), ("asia-Jayapura", 211), ("europe-Dublin", 212), ("asia-Jerusalem", 213), ("europe-Isle-of-Man", 214), ("asia-Calcutta", 215), ("indian-Chagos", 216), ("asia-Baghdad", 217), ("asia-Tehran", 218), ("atlantic-Reykjavik", 219), ("europe-Rome", 220), ("europe-Jersey", 221), ("america-Jamaica", 222), ("asia-Amman", 223), ("asia-Tokyo", 224), ("africa-Nairobi", 225), ("asia-Bishkek", 226), ("asia-Phnom-Penh", 227), ("pacific-Tarawa", 228), ("pacific-Enderbury", 229), ("pacific-Kiritimati", 230), ("indian-Comoro", 231), ("america-St-Kitts", 232), ("asia-Pyongyang", 233), ("asia-Seoul", 234), ("asia-Kuwait", 235), ("america-Cayman", 236), ("asia-Almaty", 237), ("asia-Qyzylorda", 238), ("asia-Aqtobe", 239), ("asia-Aqtau", 240), ("asia-Oral", 241), ("asia-Vientiane", 242), ("asia-Beirut", 243), ("america-St-Lucia", 244), ("europe-Vaduz", 245), ("asia-Colombo", 246), ("africa-Monrovia", 247), ("africa-Maseru", 248), ("europe-Vilnius", 249), ("europe-Luxembourg", 250), ("europe-Riga", 251), ("africa-Tripoli", 252), ("africa-Casablanca", 253), ("europe-Monaco", 254), ("europe-Chisinau", 255)) + NamedValues(("europe-Podgorica", 256), ("indian-Antananarivo", 257), ("pacific-Majuro", 258), ("pacific-Kwajalein", 259), ("europe-Skopje", 260), ("africa-Bamako", 261), ("asia-Rangoon", 262), ("asia-Ulaanbaatar", 263), ("asia-Hovd", 264), ("asia-Choibalsan", 265), ("asia-Macau", 266), ("pacific-Saipan", 267), ("america-Martinique", 268), ("africa-Nouakchott", 269), ("america-Montserrat", 270), ("europe-Malta", 271), ("indian-Mauritius", 272), ("indian-Maldives", 273), ("africa-Blantyre", 274), ("america-Mexico-City", 275), ("america-Cancun", 276), ("america-Merida", 277), ("america-Monterrey", 278), ("america-Mazatlan", 279), ("america-Chihuahua", 280), ("america-Hermosillo", 281), ("america-Tijuana", 282), ("asia-Kuala-Lumpur", 283), ("asia-Kuching", 284), ("africa-Maputo", 285), ("africa-Windhoek", 286), ("pacific-Noumea", 287), ("africa-Niamey", 288), ("pacific-Norfolk", 289), ("africa-Lagos", 290), ("america-Managua", 291), ("europe-Amsterdam", 292), ("europe-Oslo", 293), ("asia-Katmandu", 294), ("pacific-Nauru", 295), ("pacific-Niue", 296), ("pacific-Auckland", 297), ("pacific-Chatham", 298), ("asia-Muscat", 299), ("america-Panama", 300), ("america-Lima", 301), ("pacific-Tahiti", 302), ("pacific-Marquesas", 303), ("pacific-Gambier", 304), ("pacific-Port-Moresby", 305), ("asia-Manila", 306), ("asia-Karachi", 307), ("europe-Warsaw", 308), ("america-Miquelon", 309), ("pacific-Pitcairn", 310), ("america-Puerto-Rico", 311), ("asia-Gaza", 312), ("europe-Lisbon", 313), ("atlantic-Madeira", 314), ("atlantic-Azores", 315), ("pacific-Palau", 316), ("america-Asuncion", 317), ("asia-Qatar", 318), ("indian-Reunion", 319), ("europe-Bucharest", 320), ("europe-Belgrade", 321), ("europe-Kaliningrad", 322), ("europe-Moscow", 323), ("europe-Volgograd", 324), ("europe-Samara", 325), ("asia-Yekaterinburg", 326), ("asia-Omsk", 327), ("asia-Novosibirsk", 328), ("asia-Krasnoyarsk", 329), ("asia-Irkutsk", 330), ("asia-Yakutsk", 331), ("asia-Vladivostok", 332), ("asia-Sakhalin", 333), ("asia-Magadan", 334), ("asia-Kamchatka", 335), ("asia-Anadyr", 336), ("africa-Kigali", 337), ("asia-Riyadh", 338), ("pacific-Guadalcanal", 339), ("indian-Mahe", 340), ("africa-Khartoum", 341), ("europe-Stockholm", 342), ("asia-Singapore", 343), ("atlantic-St-Helena", 344), ("europe-Ljubljana", 345), ("arctic-Longyearbyen", 346), ("atlantic-Jan-Mayen", 347), ("europe-Bratislava", 348), ("africa-Freetown", 349), ("europe-San-Marino", 350), ("africa-Dakar", 351), ("africa-Mogadishu", 352), ("america-Paramaribo", 353), ("africa-Sao-Tome", 354), ("america-El-Salvador", 355), ("asia-Damascus", 356), ("africa-Mbabane", 357), ("america-Grand-Turk", 358), ("africa-Ndjamena", 359), ("indian-Kerguelen", 360), ("africa-Lome", 361), ("asia-Bangkok", 362), ("asia-Dushanbe", 363), ("pacific-Fakaofo", 364), ("asia-Dili", 365), ("asia-Ashgabat", 366), ("africa-Tunis", 367), ("pacific-Tongatapu", 368), ("europe-Istanbul", 369), ("america-Port-of-Spain", 370), ("pacific-Funafuti", 371), ("asia-Taipei", 372), ("africa-Dar-es-Salaam", 373), ("europe-Kiev", 374), ("europe-Uzhgorod", 375), ("europe-Zaporozhye", 376), ("europe-Simferopol", 377), ("africa-Kampala", 378), ("pacific-Johnston", 379), ("pacific-Midway", 380), ("pacific-Wake", 381), ("america-New-York", 382), ("america-Detroit", 383), ("america-Kentucky-Louisville", 384), ("america-Kentucky-Monticello", 385), ("america-Indiana-Indianapolis", 386), ("america-Indiana-Marengo", 387), ("america-Indiana-Knox", 388), ("america-Indiana-Vevay", 389), ("america-Chicago", 390), ("america-Indiana-Vincennes", 391), ("america-Indiana-Petersburg", 392), ("america-Menominee", 393), ("america-North-Dakota-Center", 394), ("america-North-Dakota-New-Salem", 395), ("america-Denver", 396), ("america-Boise", 397), ("america-Shiprock", 398), ("america-Phoenix", 399), ("america-Los-Angeles", 400), ("america-Anchorage", 401), ("america-Juneau", 402), ("america-Yakutat", 403), ("america-Nome", 404), ("america-Adak", 405), ("pacific-Honolulu", 406), ("america-Montevideo", 407), ("asia-Samarkand", 408), ("asia-Tashkent", 409), ("europe-Vatican", 410), ("america-St-Vincent", 411), ("america-Caracas", 412), ("america-Tortola", 413), ("america-St-Thomas", 414), ("asia-Saigon", 415), ("pacific-Efate", 416), ("pacific-Wallis", 417), ("pacific-Apia", 418), ("asia-Aden", 419), ("indian-Mayotte", 420), ("africa-Johannesburg", 421), ("africa-Lusaka", 422), ("africa-Harare", 423), ("australia-Eucla", 424), ("america-Indiana-Tell-City", 425), ("america-Indiana-Winamac", 426), ("america-Resolute", 427), ("america-Marigot", 428), ("asia-Kolkata", 429), ("asia-Ho-Chi-Minh", 430), ("america-St-Barthelemy", 431), ("america-Argentina-San-Luis", 432), ("america-Santarem", 433), ("america-Argentina-Salta", 434), ("asia-Kathmandu", 435), ("america-Ojinaga", 436), ("america-Santa-Isabel", 437), ("asia-Novokuznetsk", 438), ("america-Matamoros", 439), ("antarctica-Macquarie", 440), ("america-Bahia-Banderas", 441), ("pacific-Pohnpei", 442), ("pacific-Chuuk", 443), ("america-North-Dakota-Beulah", 444), ("america-Metlakatla", 445), ("america-Sitka", 446), ("america-Kralendijk", 447), ("america-Lower-Princes", 448), ("africa-Juba", 449), ("asia-Hebron", 450), ("europe-Tiraspol", 451), ("america-Creston", 452), ("asia-Khandyga", 453), ("europe-Busingen", 454), ("asia-Ust-Nera", 455))).clone('est')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupTimeZone.setStatus('current')
eqlGroupLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 14), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupLogLevel.setStatus('current')
eqlGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 15), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDescription.setStatus('current')
eqlGroupIscsiNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('iqn.2001-04.com.equallogic.')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupIscsiNamePrefix.setStatus('current')
eqlGroupDefaultAliasToVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultAliasToVolumeName.setStatus('current')
eqlGroupEmailSrcDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEmailSrcDomain.setStatus('current')
eqlGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupName.setStatus('current')
eqlGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupIpAddr.setStatus('current')
eqlGroupEnableWebAccessSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableWebAccessSSL.setStatus('current')
eqlGroupEnableWebAccessUnsecure = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 22), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableWebAccessUnsecure.setStatus('current')
eqlGroupEnableCliAccessSSH = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 23), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableCliAccessSSH.setStatus('current')
eqlGroupEnableCliAccessUnsecure = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableCliAccessUnsecure.setStatus('current')
eqlGroupEnableEmailNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableEmailNotifications.setStatus('current')
eqlGroupEnableSNMPTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableSNMPTraps.setStatus('current')
eqlGroupEnableSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableSyslog.setStatus('current')
eqlGroupEmailPriorityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEmailPriorityMask.setStatus('current')
eqlGroupSNMPPriorityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupSNMPPriorityMask.setStatus('deprecated')
eqlGroupSysLogPriorityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupSysLogPriorityMask.setStatus('current')
eqlGroupDefaultSite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultSite.setStatus('current')
eqlGroupPasswd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupPasswd1.setStatus('current')
eqlGroupPasswd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: eqlGroupPasswd2.setStatus('current')
eqlGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 34), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupRowStatus.setStatus('current')
eqlGroupObjectReuseScrub = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGroupObjectReuseScrub.setStatus('deprecated')
eqlGroupEnableSSH = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 36), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableSSH.setStatus('deprecated')
eqlGroupEnableTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 37), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableTelnet.setStatus('deprecated')
eqlGroupEnableFTP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 38), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableFTP.setStatus('current')
eqlGroupEmailSrcUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEmailSrcUserName.setStatus('current')
eqlGroupSyslogFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("default", 0), ("kern", 1), ("user", 2), ("mail", 3), ("daemon", 4), ("auth", 5), ("syslog", 6), ("lpr", 7), ("news", 8), ("uucp", 9), ("cron", 10), ("authpriv", 11), ("ftp", 12), ("local0", 17), ("local1", 18), ("local2", 19), ("local3", 20), ("local4", 21), ("local5", 22), ("local6", 23), ("local7", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupSyslogFacility.setStatus('current')
eqlGroupEnableCLB = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 41), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableCLB.setStatus('current')
eqlGroupEnableVolBal = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 42), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableVolBal.setStatus('current')
eqlGroupDiscoveryFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 43), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDiscoveryFilter.setStatus('current')
eqlGroupEmailSupportContact = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupEmailSupportContact.setStatus('current')
eqlGroupReplicationWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 45), Unsigned32().clone(72)).setUnits('KB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupReplicationWindowSize.setStatus('current')
eqlGroupConfigurationFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 46), Bits().clone(namedValues=NamedValues(("cluster-pr-flag", 0), ("ignore-group-conn", 1), ("array-restart-flag", 2), ("repl-use-jumbos", 3), ("force-SCSI-QErr-OldBehavior", 4), ("dcb-disable", 5), ("lldp-vlanidneg-disable", 6), ("mpio-dynamic-scaling-mask0", 7), ("unmap-disable", 8), ("mpio-dynamic-scaling-mask1", 9), ("volume-fix-run", 10), ("sacl-disable", 11), ("flag12", 12), ("flag13", 13), ("flag14", 14), ("flag15", 15), ("flag16", 16), ("flag17", 17), ("flag18", 18), ("flag19", 19), ("flag20", 20), ("flag21", 21), ("flag22", 22), ("flag23", 23), ("flag24", 24), ("flag25", 25), ("flag26", 26), ("flag27", 27), ("flag28", 28), ("flag29", 29), ("flag30", 30), ("flag31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupConfigurationFlags.setStatus('current')
eqlGroupISCSIPortalGrpTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 9))).clone(namedValues=NamedValues(("notConfigured", 0), ("configuredAndSetToZero", 8), ("configuredAndSetToOne", 9))).clone('notConfigured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGroupISCSIPortalGrpTag.setStatus('current')
eqlGroupMaxConcurrentReplicas = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 48), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupMaxConcurrentReplicas.setStatus('current')
eqlGroupDefaultThinWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultThinWarn.setStatus('current')
eqlGroupDefaultThinMaxGrow = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultThinMaxGrow.setStatus('current')
eqlGroupDefaultMgmtGatewayIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 51), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultMgmtGatewayIpAddressType.setStatus('current')
eqlGroupDefaultMgmtGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 52), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultMgmtGatewayIpAddress.setStatus('current')
eqlGroupInet6AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 53), InetAddressType().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupInet6AddrType.setStatus('current')
eqlGroupInet6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 54), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupInet6Addr.setStatus('current')
eqlGroupInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 55), InetAddressType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupInetAddrType.setStatus('current')
eqlGroupInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 56), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupInetAddr.setStatus('current')
eqlGroupSupportSlowSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("automatic", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupSupportSlowSwitch.setStatus('current')
eqlGroupProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGroupProfileIndex.setStatus('current')
eqlGroupEnableSSHProtocolV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 59), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableSSHProtocolV1.setStatus('current')
eqlGroupEnableStandbyButton = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 60), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableStandbyButton.setStatus('current')
eqlGroupLDAPLoginAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 61), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupLDAPLoginAuthEnable.setStatus('current')
eqlGroupApplianceDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("discover", 0))).clone('discover')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupApplianceDiscovery.setStatus('current')
eqlGroupDefaultDcbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultDcbVlanId.setStatus('current')
eqlGroupThermalShutdownOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupThermalShutdownOverride.setStatus('current')
eqlGroupEnableLegacyCryptos = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableLegacyCryptos.setStatus('current')
eqlGroupMaxReplSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 66), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupMaxReplSegments.setStatus('current')
eqlGroupEnableVolumeRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 67), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupEnableVolumeRecovery.setStatus('current')
eqlGroupSessionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(30)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupSessionIdleTimeout.setStatus('current')
eqlGroupSessionIdleTimeoutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupSessionIdleTimeoutEnable.setStatus('current')
eqlGroupSessionBannerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupSessionBannerEnable.setStatus('current')
eqlGroupDefaultVolSnapshotBorrowEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 71), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupDefaultVolSnapshotBorrowEnabled.setStatus('current')
eqlGroupRecoveryLifeTimeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 72), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupRecoveryLifeTimeEnable.setStatus('current')
eqlGroupRecoveryLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupRecoveryLifeTime.setStatus('current')
eqlGroupTimeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupTimeProtocol.setStatus('current')
eqlGroupRecoveryTrimmerFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 75), Integer32().clone(86400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupRecoveryTrimmerFreq.setStatus('current')
eqlGroupUpdateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupUpdateEnable.setStatus('current')
eqlGroupUpdateLast = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 77), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupUpdateLast.setStatus('current')
eqlGroupDefaultSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sector-size-512-bytes", 0), ("sector-size-4096-bytes", 1))).clone('sector-size-512-bytes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDefaultSectorSize.setStatus('current')
eqlGroupCompressionScanFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 80), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupCompressionScanFreq.setStatus('current')
eqlGroupRunCompressionScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupRunCompressionScan.setStatus('current')
eqlGroupMonitorReminderTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 1, 1, 82), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupMonitorReminderTimestamp.setStatus('current')
eqlStorageGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2), )
if mibBuilder.loadTexts: eqlStorageGroupStatusTable.setStatus('current')
eqlStorageGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlStorageGroupStatusEntry.setStatus('current')
eqlStorageGroupStatusPoolSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusPoolSpace.setStatus('current')
eqlStorageGroupStatusPoolSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusPoolSpaceUsed.setStatus('current')
eqlStorageGroupStatusTotalMembersOnLine = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusTotalMembersOnLine.setStatus('current')
eqlStorageGroupStatusPoolSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusPoolSpaceReserved.setStatus('current')
eqlStorageGroupStatusReservedSpaceInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusReservedSpaceInUse.setStatus('current')
eqlStorageGroupStatusDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStorageGroupStatusDateAndTime.setStatus('current')
eqlStorageGroupStatusSnapshotsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusSnapshotsInUse.setStatus('current')
eqlStorageGroupStatusVolumesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVolumesInUse.setStatus('current')
eqlStorageGroupStatusSnapshotsOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusSnapshotsOnline.setStatus('current')
eqlStorageGroupStatusVolumesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVolumesOnline.setStatus('current')
eqlStorageGroupStatusSnapshotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusSnapshotCount.setStatus('current')
eqlStorageGroupStatusVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVolumeCount.setStatus('current')
eqlStorageGroupStatusMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusMemberCount.setStatus('current')
eqlStorageGroupStatusMembersInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusMembersInUse.setStatus('current')
eqlStorageGroupStatusFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 15), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusFreeSpace.setStatus('current')
eqlStorageGroupStatusPoolSpaceDelegated = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 16), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusPoolSpaceDelegated.setStatus('current')
eqlStorageGroupStatusDelegatedUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 17), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusDelegatedUsedSpace.setStatus('current')
eqlStorageGroupStatusReplReserveSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 18), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusReplReserveSpace.setStatus('current')
eqlStorageGroupStatusReplReserveInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 19), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusReplReserveInUse.setStatus('current')
eqlStorageGroupStatusVolumeSpaceSubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 20), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVolumeSpaceSubscribed.setStatus('current')
eqlStorageGroupStatusVolumeSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 21), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVolumeSpaceAllocated.setStatus('current')
eqlStorageGroupStatusFailbackSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 22), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusFailbackSpace.setStatus('current')
eqlStorageGroupStatusThinProvFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 23), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusThinProvFreeSpace.setStatus('current')
eqlStorageGroupStatusConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusConnectionCount.setStatus('current')
eqlStorageGroupStatusSnapReserveSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 25), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusSnapReserveSpaceFree.setStatus('current')
eqlStorageGroupStatusReplReserveSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 26), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusReplReserveSpaceFree.setStatus('current')
eqlStorageGroupStatusGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusGroupId.setStatus('current')
eqlStorageGroupStatusVirtualVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVirtualVolumeCount.setStatus('current')
eqlStorageGroupStatusVirtualVolumesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVirtualVolumesOnline.setStatus('current')
eqlStorageGroupStatusVirtualVolumesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVirtualVolumesInUse.setStatus('current')
eqlStorageGroupStatusVirtualVolumeSpaceSubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 31), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVirtualVolumeSpaceSubscribed.setStatus('current')
eqlStorageGroupStatsTotalSpaceBorrowing = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 32), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatsTotalSpaceBorrowing.setStatus('current')
eqlStorageGroupStatusStorageContainerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusStorageContainerCount.setStatus('current')
eqlStorageGroupStatusStorageContainerVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusStorageContainerVolumeCount.setStatus('current')
eqlStorageGroupStatusStorageContainerSnapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusStorageContainerSnapCount.setStatus('current')
eqlStorageGroupStatusStorageContainerVolumesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusStorageContainerVolumesOnline.setStatus('current')
eqlStorageGroupStatusStorageContainerSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 38), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusStorageContainerSpaceReserved.setStatus('current')
eqlStorageGroupStatusCompressedSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 39), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusCompressedSpaceUsed.setStatus('current')
eqlStorageGroupStatusVirtualSpaceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 40), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusVirtualSpaceSize.setStatus('current')
eqlStorageGroupStatusReplicationSnapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusReplicationSnapCount.setStatus('current')
eqlStorageGroupStatusStorageContainerVolumesBound = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupStatusStorageContainerVolumesBound.setStatus('current')
eqlStorageGroupSiteTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3), )
if mibBuilder.loadTexts: eqlStorageGroupSiteTable.setStatus('current')
eqlStorageGroupSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupSiteIndex"))
if mibBuilder.loadTexts: eqlStorageGroupSiteEntry.setStatus('current')
eqlGroupSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupSiteIndex.setStatus('current')
eqlGroupSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1, 2), UTFString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSiteName.setStatus('current')
eqlGroupSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1, 3), UTFString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSiteDescription.setStatus('current')
eqlGroupSiteContactEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSiteContactEmail.setStatus('current')
eqlGroupSiteContactPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSiteContactPhone.setStatus('current')
eqlGroupSiteContactMobile = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSiteContactMobile.setStatus('current')
eqlGroupSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSiteRowStatus.setStatus('current')
eqlStorageGroupDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4), )
if mibBuilder.loadTexts: eqlStorageGroupDnsServerTable.setStatus('current')
eqlStorageGroupDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupDnsServerIndex"))
if mibBuilder.loadTexts: eqlStorageGroupDnsServerEntry.setStatus('current')
eqlGroupDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupDnsServerIndex.setStatus('current')
eqlGroupDnsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsServerIpAddress.setStatus('current')
eqlGroupDnsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsServerRowStatus.setStatus('current')
eqlGroupDnsServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsServerInetAddressType.setStatus('current')
eqlGroupDnsServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsServerInetAddress.setStatus('current')
eqlGroupDnsServerConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("startConfig", 0), ("inProgress", 1), ("endConfig", 2))).clone('startConfig')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsServerConfigState.setStatus('current')
eqlStorageGroupNtpServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5), )
if mibBuilder.loadTexts: eqlStorageGroupNtpServerTable.setStatus('current')
eqlStorageGroupNtpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupNtpServerIndex"))
if mibBuilder.loadTexts: eqlStorageGroupNtpServerEntry.setStatus('current')
eqlGroupNtpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupNtpServerIndex.setStatus('current')
eqlGroupNtpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupNtpServerIpAddress.setStatus('current')
eqlGroupNtpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupNtpServerRowStatus.setStatus('current')
eqlGroupNtpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupNtpServerPort.setStatus('current')
eqlGroupNtpServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupNtpServerInetAddressType.setStatus('current')
eqlGroupNtpServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 5, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupNtpServerInetAddress.setStatus('current')
eqlStorageGroupChapServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6), )
if mibBuilder.loadTexts: eqlStorageGroupChapServerTable.setStatus('current')
eqlStorageGroupChapServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupChapServerIndex"))
if mibBuilder.loadTexts: eqlStorageGroupChapServerEntry.setStatus('current')
eqlGroupChapServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupChapServerIndex.setStatus('current')
eqlGroupChapServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupChapServerIpAddress.setStatus('current')
eqlGroupChapServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupChapServerRowStatus.setStatus('current')
eqlGroupChapServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupChapServerPort.setStatus('current')
eqlGroupChapServerRADIUSSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupChapServerRADIUSSecret.setStatus('current')
eqlGroupChapServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupChapServerInetAddressType.setStatus('current')
eqlGroupChapServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 6, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupChapServerInetAddress.setStatus('current')
eqlStorageGroupSMTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7), )
if mibBuilder.loadTexts: eqlStorageGroupSMTPServerTable.setStatus('current')
eqlStorageGroupSMTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupSMTPServerIndex"))
if mibBuilder.loadTexts: eqlStorageGroupSMTPServerEntry.setStatus('current')
eqlGroupSMTPServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupSMTPServerIndex.setStatus('current')
eqlGroupSMTPServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSMTPServerIpAddress.setStatus('current')
eqlGroupSMTPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSMTPServerRowStatus.setStatus('current')
eqlGroupSMTPServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSMTPServerPort.setStatus('current')
eqlGroupSMTPServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSMTPServerInetAddressType.setStatus('current')
eqlGroupSMTPServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 7, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSMTPServerInetAddress.setStatus('current')
eqlStorageGroupSysLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 8), )
if mibBuilder.loadTexts: eqlStorageGroupSysLogServerTable.setStatus('current')
eqlStorageGroupSysLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 8, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupSysLogServerIndex"))
if mibBuilder.loadTexts: eqlStorageGroupSysLogServerEntry.setStatus('current')
eqlGroupSysLogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupSysLogServerIndex.setStatus('current')
eqlGroupSysLogServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 8, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSysLogServerIpAddress.setStatus('current')
eqlGroupSysLogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSysLogServerRowStatus.setStatus('current')
eqlGroupSysLogServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 8, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSysLogServerInetAddressType.setStatus('current')
eqlGroupSysLogServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 8, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSysLogServerInetAddress.setStatus('current')
eqlStorageGroupAlertEmailTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 9), )
if mibBuilder.loadTexts: eqlStorageGroupAlertEmailTable.setStatus('current')
eqlStorageGroupAlertEmailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 9, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupAlertEmailIndex"))
if mibBuilder.loadTexts: eqlStorageGroupAlertEmailEntry.setStatus('current')
eqlGroupAlertEmailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupAlertEmailIndex.setStatus('current')
eqlGroupAlertEmailAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupAlertEmailAddress.setStatus('current')
eqlGroupAlertEmailRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupAlertEmailRowStatus.setStatus('current')
eqlStorageGroupAdminAccountTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10), )
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountTable.setStatus('current')
eqlStorageGroupAdminAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlStorageGroupAdminAccountIndex"))
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountEntry.setStatus('current')
eqlStorageGroupAdminAccountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountIndex.setStatus('current')
eqlStorageGroupAdminAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountRowStatus.setStatus('current')
eqlStorageGroupAdminAccountName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountName.setStatus('current')
eqlStorageGroupAdminAccountPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountPassword.setStatus('current')
eqlStorageGroupAdminAccountDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 5), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountDescription.setStatus('current')
eqlStorageGroupAdminAccountType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 6), AdminAccountType().clone('read-write')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountType.setStatus('current')
eqlStorageGroupAdminAccountContact = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountContact.setStatus('current')
eqlStorageGroupAdminAccountEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountEmail.setStatus('current')
eqlStorageGroupAdminAccountPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountPhone.setStatus('current')
eqlStorageGroupAdminAccountMobile = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountMobile.setStatus('current')
eqlStorageGroupAdminAccountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountStatus.setStatus('current')
eqlStorageGroupAdminAccountCliFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountCliFlags.setStatus('current')
eqlStorageGroupAdminAccountGuiFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountGuiFlags.setStatus('current')
eqlStorageGroupAdminAccountPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountPollInterval.setStatus('current')
eqlStorageGroupAdminAccountAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("radius", 1), ("ldap", 2))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountAuthType.setStatus('current')
eqlStorageGroupAdminAccountRecentLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountRecentLogin.setStatus('current')
eqlStorageGroupAdminAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountClass.setStatus('current')
eqlStorageGroupAdminAccountPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 18), AdminAccountPrivilegeType().clone('global-admin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountPrivilege.setStatus('current')
eqlStorageGroupAdminAccountSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountSnmpKey.setStatus('current')
eqlStorageGroupAdminAccountSnmpKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountSnmpKey2.setStatus('current')
eqlStorageGroupAdminAccountCHAPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountCHAPPassword.setStatus('current')
eqlStorageGroupAdminAccountKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountKey.setStatus('current')
eqlStorageGroupAdminAccountAdGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 65))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountAdGroupName.setStatus('current')
eqlStorageGroupAdminAccountSNMPPrivProt = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes128", 1))).clone('des')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountSNMPPrivProt.setStatus('current')
eqlStorageGroupiSNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11), )
if mibBuilder.loadTexts: eqlStorageGroupiSNSServerTable.setStatus('current')
eqlStorageGroupiSNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupiSNSServerIndex"))
if mibBuilder.loadTexts: eqlStorageGroupiSNSServerEntry.setStatus('current')
eqlGroupiSNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupiSNSServerIndex.setStatus('current')
eqlGroupiSNSServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupiSNSServerRowStatus.setStatus('current')
eqlGroupiSNSServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupiSNSServerIpAddress.setStatus('current')
eqlGroupiSNSServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlGroupiSNSServerPort.setStatus('current')
eqlGroupiSNSServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupiSNSServerInetAddressType.setStatus('current')
eqlGroupiSNSServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 11, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupiSNSServerInetAddress.setStatus('current')
eqlGroupCompatibilityTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 12), )
if mibBuilder.loadTexts: eqlGroupCompatibilityTable.setStatus('current')
eqlGroupCompatibilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 12, 1), )
eqlStorageGroupEntry.registerAugmentions(("EQLGROUP-MIB", "eqlGroupCompatibilityEntry"))
eqlGroupCompatibilityEntry.setIndexNames(*eqlStorageGroupEntry.getIndexNames())
if mibBuilder.loadTexts: eqlGroupCompatibilityEntry.setStatus('current')
eqlGroupCurrentCompLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGroupCurrentCompLevel.setStatus('current')
eqlStorageGroupCollectionTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 13), )
if mibBuilder.loadTexts: eqlStorageGroupCollectionTable.setStatus('current')
eqlStorageGroupCollectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 13, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlStorageGroupCollectionEntry.setStatus('current')
eqlGrpNoofVolCollections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGrpNoofVolCollections.setStatus('current')
eqlGrpNoofSnapCollections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGrpNoofSnapCollections.setStatus('current')
eqlGrpNoofOrphanSnapCollections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGrpNoofOrphanSnapCollections.setStatus('current')
eqlRADIUSTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14), )
if mibBuilder.loadTexts: eqlRADIUSTable.setStatus('current')
eqlRADIUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlRADIUSEntry.setStatus('current')
eqlRADIUSSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSSecret.setStatus('current')
eqlRADIUSLoginAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSLoginAuthEnable.setStatus('current')
eqlRADIUSAuthRecvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSAuthRecvTimeout.setStatus('current')
eqlRADIUSAuthMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSAuthMaxRetries.setStatus('current')
eqlRADIUSLoginAcctEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSLoginAcctEnable.setStatus('current')
eqlRADIUSAcctRecvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSAcctRecvTimeout.setStatus('current')
eqlRADIUSAcctMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSAcctMaxRetries.setStatus('current')
eqlRADIUSiscsiAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSiscsiAuthEnable.setStatus('current')
eqlLocaliscsiAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlLocaliscsiAuthEnable.setStatus('current')
eqlRADIUSRequireAdminAttrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 14, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSRequireAdminAttrEnable.setStatus('current')
eqlRADIUSAcctServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15), )
if mibBuilder.loadTexts: eqlRADIUSAcctServerTable.setStatus('current')
eqlRADIUSAcctServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlRADIUSAcctServerIndex"))
if mibBuilder.loadTexts: eqlRADIUSAcctServerEntry.setStatus('current')
eqlRADIUSAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlRADIUSAcctServerIndex.setStatus('current')
eqlRADIUSAcctServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlRADIUSAcctServerIpAddress.setStatus('current')
eqlRADIUSAcctServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlRADIUSAcctServerPort.setStatus('current')
eqlRADIUSAcctServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlRADIUSAcctServerRowStatus.setStatus('current')
eqlRADIUSAcctServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRADIUSAcctServerSecret.setStatus('current')
eqlRADIUSAcctServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlRADIUSAcctServerInetAddressType.setStatus('current')
eqlRADIUSAcctServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 15, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlRADIUSAcctServerInetAddress.setStatus('current')
eqlUserSessionTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16), )
if mibBuilder.loadTexts: eqlUserSessionTable.setStatus('current')
eqlUserSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlUserSessionIndex"))
if mibBuilder.loadTexts: eqlUserSessionEntry.setStatus('current')
eqlUserSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlUserSessionIndex.setStatus('current')
eqlUserSessionAdminAccountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionAdminAccountIndex.setStatus('current')
eqlUserSessionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionStart.setStatus('current')
eqlUserSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("root", 0), ("console", 1), ("telnet", 2), ("ssh", 3), ("gui", 4), ("gui-ssl", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionProtocol.setStatus('current')
eqlUserSessionRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionRemoteAddress.setStatus('current')
eqlUserSessionLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionLocalAddress.setStatus('current')
eqlUserSessionRemoteInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionRemoteInetAddressType.setStatus('current')
eqlUserSessionRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionRemoteInetAddress.setStatus('current')
eqlUserSessionLocalInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 9), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionLocalInetAddressType.setStatus('current')
eqlUserSessionLocalInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 16, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlUserSessionLocalInetAddress.setStatus('current')
eqlRecordVersionTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 17), )
if mibBuilder.loadTexts: eqlRecordVersionTable.setStatus('current')
eqlRecordVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 17, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlRecordVersionTableType"))
if mibBuilder.loadTexts: eqlRecordVersionEntry.setStatus('current')
eqlRecordVersionTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlRecordVersionTableType.setStatus('current')
eqlRecordVersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 17, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRecordVersionMin.setStatus('current')
eqlRecordVersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 17, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlRecordVersionMax.setStatus('current')
eqlGroupTaskTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18), )
if mibBuilder.loadTexts: eqlGroupTaskTable.setStatus('current')
eqlGroupTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupTaskIndex"))
if mibBuilder.loadTexts: eqlGroupTaskEntry.setStatus('current')
eqlGroupTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlGroupTaskIndex.setStatus('current')
eqlGroupTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskRowStatus.setStatus('current')
eqlGroupTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resync", 1), ("failback", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskType.setStatus('current')
eqlGroupTaskContext = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskContext.setStatus('current')
eqlGroupTaskNumSubTasks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskNumSubTasks.setStatus('current')
eqlGroupTaskSubTaskInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 10001, 10002, 10003, 10004, 10005, 20001, 20002, 20003, 20004, 20005))).clone(namedValues=NamedValues(("none", 0), ("primaryVolumeOffline", 10001), ("primaryVolumeReplicationCancel", 10002), ("primaryVolumeDemote", 10003), ("recoveryVolumeReplicationConfigure", 10004), ("recoveryVolumeCreateReplica", 10005), ("recoveryVolumeDisableSchedules", 20001), ("recoveryVolumeOffline", 20002), ("recoveryVolumeFinalReplication", 20003), ("recoveryVolumeDemote", 20004), ("primaryVolumePromote", 20005)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskSubTaskInProgress.setStatus('current')
eqlGroupTaskSubtaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskSubtaskStatus.setStatus('current')
eqlGroupTaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-action-required", 1), ("in-progress", 2), ("complete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskStatus.setStatus('current')
eqlGroupTaskUserAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retry", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskUserAction.setStatus('current')
eqlGroupTaskStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 10), Counter32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskStartTime.setStatus('current')
eqlGroupTaskReplication = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("network", 2), ("noreplication", 3))).clone('network')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupTaskReplication.setStatus('current')
eqlStorageGroupProfileTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20), )
if mibBuilder.loadTexts: eqlStorageGroupProfileTable.setStatus('current')
eqlStorageGroupProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupProfileIndex"))
if mibBuilder.loadTexts: eqlStorageGroupProfileEntry.setStatus('current')
eqlStorageGroupProfileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileVersion.setStatus('current')
eqlStorageGroupProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileWeight.setStatus('current')
eqlStorageGroupProfileMaxMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxMembers.setStatus('current')
eqlStorageGroupProfileMaxVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxVolumes.setStatus('current')
eqlStorageGroupProfileMaxSnapsPerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxSnapsPerGroup.setStatus('current')
eqlStorageGroupProfileMaxSnapsPerVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxSnapsPerVolume.setStatus('current')
eqlStorageGroupProfileMaxReplicasPerVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxReplicasPerVolume.setStatus('current')
eqlStorageGroupProfileMaxReplVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxReplVolumes.setStatus('current')
eqlStorageGroupProfileMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxConnections.setStatus('current')
eqlStorageGroupProfileMaxPartners = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxPartners.setStatus('current')
eqlStorageGroupProfileMaxConnWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxConnWarning.setStatus('current')
eqlStorageGroupProfileMaxSyncReplVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 20, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupProfileMaxSyncReplVolumes.setStatus('current')
eqlStorageGroupAdminAccountKeyTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 21), )
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountKeyTable.setStatus('current')
eqlStorageGroupAdminAccountKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 21, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlStorageGroupAdminAccountKey"))
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountKeyEntry.setStatus('current')
eqlStorageGroupAdminAccountIndexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageGroupAdminAccountIndexValue.setStatus('current')
eqlStorageGroupChapAccountTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 22), )
if mibBuilder.loadTexts: eqlStorageGroupChapAccountTable.setStatus('current')
eqlStorageGroupChapAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 22, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlStorageGroupChapAccountIndex"))
if mibBuilder.loadTexts: eqlStorageGroupChapAccountEntry.setStatus('current')
eqlStorageGroupChapAccountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 22, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlStorageGroupChapAccountIndex.setStatus('current')
eqlStorageGroupChapAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupChapAccountRowStatus.setStatus('current')
eqlStorageGroupChapAccountAdminAccountKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 22, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupChapAccountAdminAccountKey.setStatus('current')
eqlStorageGroupChapAccountPublic = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 22, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupChapAccountPublic.setStatus('current')
eqlLDAPServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24), )
if mibBuilder.loadTexts: eqlLDAPServerTable.setStatus('current')
eqlLDAPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlLDAPServerIndex"))
if mibBuilder.loadTexts: eqlLDAPServerEntry.setStatus('current')
eqlLDAPServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlLDAPServerIndex.setStatus('current')
eqlLDAPServerBaseDN = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerBaseDN.setStatus('current')
eqlLDAPServerSecureProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("tls", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerSecureProtocol.setStatus('current')
eqlLDAPServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerInetAddressType.setStatus('current')
eqlLDAPServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerInetAddress.setStatus('current')
eqlLDAPServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerPort.setStatus('current')
eqlLDAPServerAnonymousAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerAnonymousAccess.setStatus('current')
eqlLDAPServerBindDN = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerBindDN.setStatus('current')
eqlLDAPServerBindPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerBindPassword.setStatus('current')
eqlLDAPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 24, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLDAPServerRowStatus.setStatus('current')
eqlLdapLoginAccessTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25), )
if mibBuilder.loadTexts: eqlLdapLoginAccessTable.setStatus('current')
eqlLdapLoginAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlLdapLoginAccessType"), (0, "EQLGROUP-MIB", "eqlLdapLoginAccessName"))
if mibBuilder.loadTexts: eqlLdapLoginAccessEntry.setStatus('current')
eqlLdapLoginAccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 65))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessName.setStatus('current')
eqlLdapLoginAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adGroup", 1), ("ldapUser", 2))).clone('adGroup')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessType.setStatus('current')
eqlLdapLoginAccessAccountPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25, 1, 3), AdminAccountPrivilegeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessAccountPrivilege.setStatus('current')
eqlLdapLoginAccessAccountType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25, 1, 4), AdminAccountType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessAccountType.setStatus('current')
eqlLdapLoginAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessRowStatus.setStatus('current')
eqlLdapLoginAccessAdDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 25, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 65))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessAdDomainName.setStatus('current')
eqlStorageGroupDnsSuffixTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 26), )
if mibBuilder.loadTexts: eqlStorageGroupDnsSuffixTable.setStatus('current')
eqlStorageGroupDnsSuffixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 26, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlGroupDnsSuffixIndex"))
if mibBuilder.loadTexts: eqlStorageGroupDnsSuffixEntry.setStatus('current')
eqlGroupDnsSuffixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlGroupDnsSuffixIndex.setStatus('current')
eqlGroupDnsSuffixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 26, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsSuffixRowStatus.setStatus('current')
eqlGroupDnsSuffixString = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsSuffixString.setStatus('current')
eqlGroupDnsSuffixConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("startConfig", 0), ("inProgress", 1), ("endConfig", 2))).clone('startConfig')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupDnsSuffixConfigState.setStatus('current')
eqlStorageGroupSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 27), )
if mibBuilder.loadTexts: eqlStorageGroupSnmpTable.setStatus('current')
eqlStorageGroupSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 27, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlStorageGroupSnmpEntry.setStatus('current')
eqlStorageGroupSnmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 27, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupSnmpRowStatus.setStatus('current')
eqlStorageGroupSnmpManagersList = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 27, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupSnmpManagersList.setStatus('current')
eqlStorageGroupSnmpTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 27, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupSnmpTrapCommunity.setStatus('current')
eqlGroupSessionBannerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 28), )
if mibBuilder.loadTexts: eqlGroupSessionBannerTable.setStatus('current')
eqlGroupSessionBannerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 28, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlGroupSessionBannerEntry.setStatus('current')
eqlGroupSessionBannerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 28, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSessionBannerRowStatus.setStatus('current')
eqlGroupSessionBannerText = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 28, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlGroupSessionBannerText.setStatus('current')
eqlGroupSingleSignOnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 29), )
if mibBuilder.loadTexts: eqlGroupSingleSignOnStatusTable.setStatus('current')
eqlGroupSingleSignOnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 29, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlGroupSingleSignOnStatusEntry.setStatus('current')
eqlGroupSingleSignOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-ready", 0), ("ready", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGroupSingleSignOnStatus.setStatus('current')
eqlGroupSingleSignOnRegGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGroupSingleSignOnRegGroupName.setStatus('current')
eqlGroupSingleSignOnKrbRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 29, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlGroupSingleSignOnKrbRealm.setStatus('current')
eqlNextAvailableIndexTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 30), )
if mibBuilder.loadTexts: eqlNextAvailableIndexTable.setStatus('current')
eqlNextAvailableIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 30, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlNextAvailableIndexTableType"))
if mibBuilder.loadTexts: eqlNextAvailableIndexEntry.setStatus('current')
eqlNextAvailableIndexTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 30, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNextAvailableIndexTableType.setStatus('current')
eqlNextAvailableIndexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 30, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNextAvailableIndexValue.setStatus('current')
eqlStorageGroupSnmpReadOnlyCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 31), )
if mibBuilder.loadTexts: eqlStorageGroupSnmpReadOnlyCommunityTable.setStatus('current')
eqlStorageGroupSnmpReadOnlyCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 31, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlStorageGroupSnmpReadOnlyCommunityEntry.setStatus('current')
eqlStorageGroupSnmpReadOnlyCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 31, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageGroupSnmpReadOnlyCommunity.setStatus('current')
eqlEULAAcceptInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 1, 1, 32), )
if mibBuilder.loadTexts: eqlEULAAcceptInfoTable.setStatus('current')
eqlEULAAcceptInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 1, 1, 32, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlEULAAcceptInfoFirmwareType"))
if mibBuilder.loadTexts: eqlEULAAcceptInfoEntry.setStatus('current')
eqlEULAAcceptInfoFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("peer-storage-array", 1), ("fluidfs-nas", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlEULAAcceptInfoFirmwareType.setStatus('current')
eqlEULAAcceptInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 32, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlEULAAcceptInfoRowStatus.setStatus('current')
eqlEULAAcceptInfoAccountName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 32, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlEULAAcceptInfoAccountName.setStatus('current')
eqlEULAAcceptInfoEULAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 32, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlEULAAcceptInfoEULAVersion.setStatus('current')
eqlEULAAcceptInfoTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 1, 1, 32, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlEULAAcceptInfoTimestamp.setStatus('current')
mibBuilder.exportSymbols("EQLGROUP-MIB", eqlRADIUSAcctServerPort=eqlRADIUSAcctServerPort, eqlGroupiSNSServerIndex=eqlGroupiSNSServerIndex, eqlGroupSingleSignOnStatusTable=eqlGroupSingleSignOnStatusTable, eqlGroupDiscoveryFilter=eqlGroupDiscoveryFilter, eqlStorageGroupSnmpManagersList=eqlStorageGroupSnmpManagersList, eqlGroupSMTPServerIndex=eqlGroupSMTPServerIndex, eqlGroupTaskType=eqlGroupTaskType, eqlStorageGroupStatusStorageContainerCount=eqlStorageGroupStatusStorageContainerCount, eqlGroupSingleSignOnKrbRealm=eqlGroupSingleSignOnKrbRealm, eqlGroupTaskRowStatus=eqlGroupTaskRowStatus, eqlStorageGroupCollectionTable=eqlStorageGroupCollectionTable, eqlGroupTaskIndex=eqlGroupTaskIndex, eqlGroupSingleSignOnRegGroupName=eqlGroupSingleSignOnRegGroupName, eqlRecordVersionTable=eqlRecordVersionTable, eqlStorageGroupAdminAccountPollInterval=eqlStorageGroupAdminAccountPollInterval, eqlGroupEnableVolumeRecovery=eqlGroupEnableVolumeRecovery, eqlGroupProfileIndex=eqlGroupProfileIndex, eqlGroupSiteName=eqlGroupSiteName, eqlGroupDefaultLanguage=eqlGroupDefaultLanguage, eqlUserSessionTable=eqlUserSessionTable, eqlGroupUpdateEnable=eqlGroupUpdateEnable, eqlEULAAcceptInfoAccountName=eqlEULAAcceptInfoAccountName, eqlStorageGroupAdminAccountRowStatus=eqlStorageGroupAdminAccountRowStatus, eqlStorageGroupStatusVirtualVolumesOnline=eqlStorageGroupStatusVirtualVolumesOnline, eqlRADIUSAuthRecvTimeout=eqlRADIUSAuthRecvTimeout, eqlStorageGroupStatusReplicationSnapCount=eqlStorageGroupStatusReplicationSnapCount, eqlGroupDefaultRoutingProtocol=eqlGroupDefaultRoutingProtocol, eqlUserSessionLocalInetAddressType=eqlUserSessionLocalInetAddressType, eqlGroupChapServerInetAddressType=eqlGroupChapServerInetAddressType, eqlUserSessionIndex=eqlUserSessionIndex, eqlStorageGroupStatusVirtualSpaceSize=eqlStorageGroupStatusVirtualSpaceSize, eqlStorageGroupAdminAccountKey=eqlStorageGroupAdminAccountKey, eqlStorageGroupTable=eqlStorageGroupTable, eqlGroupDefaultSite=eqlGroupDefaultSite, eqlStorageGroupChapAccountPublic=eqlStorageGroupChapAccountPublic, eqlRADIUSAcctServerSecret=eqlRADIUSAcctServerSecret, eqlGroupEnableLegacyCryptos=eqlGroupEnableLegacyCryptos, eqlGroupRowStatus=eqlGroupRowStatus, eqlGroupDnsServerIndex=eqlGroupDnsServerIndex, eqlStorageGroupStatusReplReserveInUse=eqlStorageGroupStatusReplReserveInUse, eqlGroupDiskAddWaitTime=eqlGroupDiskAddWaitTime, eqlGrpNoofSnapCollections=eqlGrpNoofSnapCollections, eqlStorageGroupStatusDelegatedUsedSpace=eqlStorageGroupStatusDelegatedUsedSpace, eqlGroupDnsServerInetAddress=eqlGroupDnsServerInetAddress, eqlGroupSyslogFacility=eqlGroupSyslogFacility, eqlGroupTaskSubtaskStatus=eqlGroupTaskSubtaskStatus, eqlGroupDnsSuffixIndex=eqlGroupDnsSuffixIndex, eqlGroupCompatibilityEntry=eqlGroupCompatibilityEntry, eqlStorageGroupAdminAccountType=eqlStorageGroupAdminAccountType, eqlGroupSysLogServerInetAddressType=eqlGroupSysLogServerInetAddressType, eqlStorageGroupAdminAccountMobile=eqlStorageGroupAdminAccountMobile, eqlStorageGroupStatusTable=eqlStorageGroupStatusTable, eqlGroupiSNSServerRowStatus=eqlGroupiSNSServerRowStatus, eqlStorageGroupAdminAccountPassword=eqlStorageGroupAdminAccountPassword, eqlGroupApplianceDiscovery=eqlGroupApplianceDiscovery, eqlStorageGroupAdminAccountSNMPPrivProt=eqlStorageGroupAdminAccountSNMPPrivProt, eqlStorageGroupSnmpTrapCommunity=eqlStorageGroupSnmpTrapCommunity, eqlGroupEmailPriorityMask=eqlGroupEmailPriorityMask, UTFString=UTFString, eqlGroupDefaultSnapshotWarningLevel=eqlGroupDefaultSnapshotWarningLevel, eqlGroupEnableFTP=eqlGroupEnableFTP, eqlGroupiSNSServerPort=eqlGroupiSNSServerPort, eqlGroupDefaultMask=eqlGroupDefaultMask, eqlGroupSiteContactMobile=eqlGroupSiteContactMobile, eqlGroupDnsSuffixString=eqlGroupDnsSuffixString, eqlGroupNtpServerIpAddress=eqlGroupNtpServerIpAddress, eqlStorageGroupAdminAccountCHAPPassword=eqlStorageGroupAdminAccountCHAPPassword, eqlGroupId=eqlGroupId, eqlStorageGroupStatusSnapReserveSpaceFree=eqlStorageGroupStatusSnapReserveSpaceFree, eqlGroupDefaultGatewayIpAddress=eqlGroupDefaultGatewayIpAddress, eqlStorageGroupStatusReplReserveSpaceFree=eqlStorageGroupStatusReplReserveSpaceFree, eqlGroupCurrentCompLevel=eqlGroupCurrentCompLevel, eqlStorageGroupAlertEmailEntry=eqlStorageGroupAlertEmailEntry, eqlRecordVersionMin=eqlRecordVersionMin, eqlStorageGroupSnmpTable=eqlStorageGroupSnmpTable, eqlGroupThermalShutdownOverride=eqlGroupThermalShutdownOverride, eqlStorageGroupStatusPoolSpaceUsed=eqlStorageGroupStatusPoolSpaceUsed, eqlStorageGroupChapServerTable=eqlStorageGroupChapServerTable, eqlGroupDefaultVolSnapshotBorrowEnabled=eqlGroupDefaultVolSnapshotBorrowEnabled, eqlGroupEnableVolBal=eqlGroupEnableVolBal, eqlGroupEnableWebAccessSSL=eqlGroupEnableWebAccessSSL, eqlStorageGroupAdminAccountAdGroupName=eqlStorageGroupAdminAccountAdGroupName, eqlStorageGroupNtpServerEntry=eqlStorageGroupNtpServerEntry, eqlgroupObjects=eqlgroupObjects, PYSNMP_MODULE_ID=eqlgroupModule, eqlGroupIpAddr=eqlGroupIpAddr, eqlLdapLoginAccessType=eqlLdapLoginAccessType, eqlLdapLoginAccessName=eqlLdapLoginAccessName, eqlStorageGroupAdminAccountClass=eqlStorageGroupAdminAccountClass, eqlUserSessionStart=eqlUserSessionStart, eqlGroupTimeProtocol=eqlGroupTimeProtocol, eqlGrpNoofVolCollections=eqlGrpNoofVolCollections, eqlUserSessionLocalAddress=eqlUserSessionLocalAddress, eqlGroupDnsSuffixRowStatus=eqlGroupDnsSuffixRowStatus, eqlGroupChapServerRowStatus=eqlGroupChapServerRowStatus, eqlStorageGroupSiteTable=eqlStorageGroupSiteTable, eqlGroupSMTPServerIpAddress=eqlGroupSMTPServerIpAddress, eqlGroupIsStorageOptimization=eqlGroupIsStorageOptimization, eqlRecordVersionTableType=eqlRecordVersionTableType, eqlLdapLoginAccessAdDomainName=eqlLdapLoginAccessAdDomainName, eqlGroupDefaultMgmtGatewayIpAddress=eqlGroupDefaultMgmtGatewayIpAddress, eqlStorageGroupAdminAccountIndex=eqlStorageGroupAdminAccountIndex, eqlStorageGroupStatusTotalMembersOnLine=eqlStorageGroupStatusTotalMembersOnLine, eqlLDAPServerInetAddress=eqlLDAPServerInetAddress, eqlGroupChapServerInetAddress=eqlGroupChapServerInetAddress, eqlGroupEnableCLB=eqlGroupEnableCLB, eqlEULAAcceptInfoEULAVersion=eqlEULAAcceptInfoEULAVersion, eqlGroupTaskStatus=eqlGroupTaskStatus, eqlStorageGroupStatusSnapshotCount=eqlStorageGroupStatusSnapshotCount, eqlGroupTimeZone=eqlGroupTimeZone, eqlUserSessionRemoteInetAddressType=eqlUserSessionRemoteInetAddressType, eqlStorageGroupAlertEmailTable=eqlStorageGroupAlertEmailTable, eqlGroupDnsServerInetAddressType=eqlGroupDnsServerInetAddressType, eqlStorageGroupDnsSuffixEntry=eqlStorageGroupDnsSuffixEntry, eqlStorageGroupAdminAccountSnmpKey=eqlStorageGroupAdminAccountSnmpKey, eqlGroupiSNSServerInetAddressType=eqlGroupiSNSServerInetAddressType, eqlUserSessionEntry=eqlUserSessionEntry, eqlGroupLogLevel=eqlGroupLogLevel, eqlRADIUSAcctMaxRetries=eqlRADIUSAcctMaxRetries, eqlNextAvailableIndexTable=eqlNextAvailableIndexTable, eqlStorageGroupProfileWeight=eqlStorageGroupProfileWeight, eqlStorageGroupProfileMaxVolumes=eqlStorageGroupProfileMaxVolumes, eqlLDAPServerPort=eqlLDAPServerPort, eqlGroupSMTPServerPort=eqlGroupSMTPServerPort, eqlGroupUpdateLast=eqlGroupUpdateLast, eqlRADIUSAcctServerInetAddressType=eqlRADIUSAcctServerInetAddressType, eqlGroupSessionIdleTimeoutEnable=eqlGroupSessionIdleTimeoutEnable, eqlGroupTaskNumSubTasks=eqlGroupTaskNumSubTasks, eqlGroupAlertEmailIndex=eqlGroupAlertEmailIndex, eqlStorageGroupStatsTotalSpaceBorrowing=eqlStorageGroupStatsTotalSpaceBorrowing, eqlGroupRecoveryLifeTimeEnable=eqlGroupRecoveryLifeTimeEnable, eqlLdapLoginAccessAccountType=eqlLdapLoginAccessAccountType, eqlStorageGroupProfileMaxConnections=eqlStorageGroupProfileMaxConnections, eqlStorageGroupChapAccountRowStatus=eqlStorageGroupChapAccountRowStatus, eqlLocaliscsiAuthEnable=eqlLocaliscsiAuthEnable, eqlLdapLoginAccessRowStatus=eqlLdapLoginAccessRowStatus, eqlStorageGroupSnmpReadOnlyCommunityEntry=eqlStorageGroupSnmpReadOnlyCommunityEntry, eqlStorageGroupSnmpReadOnlyCommunity=eqlStorageGroupSnmpReadOnlyCommunity, eqlGroupEnableEmailNotifications=eqlGroupEnableEmailNotifications, eqlStorageGroupAdminAccountPhone=eqlStorageGroupAdminAccountPhone, eqlStorageGroupiSNSServerTable=eqlStorageGroupiSNSServerTable, eqlRADIUSAcctServerEntry=eqlRADIUSAcctServerEntry, eqlStorageGroupStatusFreeSpace=eqlStorageGroupStatusFreeSpace, eqlStorageGroupChapAccountAdminAccountKey=eqlStorageGroupChapAccountAdminAccountKey, eqlGroupSMTPServerRowStatus=eqlGroupSMTPServerRowStatus, eqlLDAPServerEntry=eqlLDAPServerEntry, eqlStorageGroupAdminAccountRecentLogin=eqlStorageGroupAdminAccountRecentLogin, eqlGroupChapServerRADIUSSecret=eqlGroupChapServerRADIUSSecret, eqlGroupReplicationWindowSize=eqlGroupReplicationWindowSize, eqlStorageGroupProfileMaxPartners=eqlStorageGroupProfileMaxPartners, eqlStorageGroupStatusStorageContainerVolumesBound=eqlStorageGroupStatusStorageContainerVolumesBound, eqlGroupSysLogServerIpAddress=eqlGroupSysLogServerIpAddress, eqlLdapLoginAccessAccountPrivilege=eqlLdapLoginAccessAccountPrivilege, eqlStorageGroupAdminAccountDescription=eqlStorageGroupAdminAccountDescription, eqlGroupNtpServerPort=eqlGroupNtpServerPort, eqlLDAPServerAnonymousAccess=eqlLDAPServerAnonymousAccess, eqlGroupDnsServerConfigState=eqlGroupDnsServerConfigState, eqlRADIUSAcctRecvTimeout=eqlRADIUSAcctRecvTimeout, eqlGroupIscsiNamePrefix=eqlGroupIscsiNamePrefix, eqlStorageGroupSnmpRowStatus=eqlStorageGroupSnmpRowStatus, eqlRADIUSTable=eqlRADIUSTable, eqlGroupTaskUserAction=eqlGroupTaskUserAction, eqlStorageGroupSysLogServerTable=eqlStorageGroupSysLogServerTable, eqlGroupDefaultThinMaxGrow=eqlGroupDefaultThinMaxGrow, eqlStorageGroupChapAccountTable=eqlStorageGroupChapAccountTable, eqlGroupSiteDescription=eqlGroupSiteDescription, eqlUserSessionRemoteAddress=eqlUserSessionRemoteAddress, eqlStorageGroupStatusVirtualVolumeSpaceSubscribed=eqlStorageGroupStatusVirtualVolumeSpaceSubscribed, eqlGroupEnableWebAccessUnsecure=eqlGroupEnableWebAccessUnsecure, eqlRADIUSLoginAcctEnable=eqlRADIUSLoginAcctEnable, eqlStorageGroupProfileMaxSnapsPerVolume=eqlStorageGroupProfileMaxSnapsPerVolume, eqlStorageGroupAdminAccountStatus=eqlStorageGroupAdminAccountStatus, eqlStorageGroupProfileVersion=eqlStorageGroupProfileVersion, eqlLDAPServerBindDN=eqlLDAPServerBindDN, eqlStorageGroupAdminAccountContact=eqlStorageGroupAdminAccountContact, eqlStorageGroupChapAccountIndex=eqlStorageGroupChapAccountIndex, eqlStorageGroupStatusVolumeSpaceSubscribed=eqlStorageGroupStatusVolumeSpaceSubscribed, eqlLdapLoginAccessTable=eqlLdapLoginAccessTable, eqlgroupModule=eqlgroupModule, eqlStorageGroupChapServerEntry=eqlStorageGroupChapServerEntry, eqlGroupAlertEmailRowStatus=eqlGroupAlertEmailRowStatus, eqlGroupDnsServerRowStatus=eqlGroupDnsServerRowStatus, eqlStorageGroupAdminAccountGuiFlags=eqlStorageGroupAdminAccountGuiFlags, eqlStorageGroupStatusVolumeSpaceAllocated=eqlStorageGroupStatusVolumeSpaceAllocated, eqlStorageGroupStatusReservedSpaceInUse=eqlStorageGroupStatusReservedSpaceInUse, eqlGroupTaskTable=eqlGroupTaskTable, eqlRADIUSLoginAuthEnable=eqlRADIUSLoginAuthEnable, eqlGroupSessionBannerEntry=eqlGroupSessionBannerEntry, eqlGroupMonitorReminderTimestamp=eqlGroupMonitorReminderTimestamp, eqlRADIUSAcctServerTable=eqlRADIUSAcctServerTable, eqlGroupSessionBannerRowStatus=eqlGroupSessionBannerRowStatus, eqlStorageGroupAdminAccountIndexValue=eqlStorageGroupAdminAccountIndexValue, eqlRADIUSAcctServerIndex=eqlRADIUSAcctServerIndex, eqlGroupAlertEmailAddress=eqlGroupAlertEmailAddress, eqlGroupIsSingleSubnet=eqlGroupIsSingleSubnet, eqlStorageGroupStatusMemberCount=eqlStorageGroupStatusMemberCount, eqlGroupCompatibilityTable=eqlGroupCompatibilityTable, eqlLDAPServerRowStatus=eqlLDAPServerRowStatus, eqlUserSessionProtocol=eqlUserSessionProtocol, eqlGroupNtpServerInetAddress=eqlGroupNtpServerInetAddress, eqlGroupConfigurationFlags=eqlGroupConfigurationFlags, eqlStorageGroupProfileMaxConnWarning=eqlStorageGroupProfileMaxConnWarning, eqlStorageGroupStatusSnapshotsInUse=eqlStorageGroupStatusSnapshotsInUse, eqlGroupEnableSNMPTraps=eqlGroupEnableSNMPTraps, eqlGroupTaskContext=eqlGroupTaskContext, eqlGroupRunCompressionScan=eqlGroupRunCompressionScan, eqlStorageGroupStatusGroupId=eqlStorageGroupStatusGroupId, eqlGroupInet6AddrType=eqlGroupInet6AddrType, eqlStorageGroupStatusStorageContainerSpaceReserved=eqlStorageGroupStatusStorageContainerSpaceReserved, eqlGroupISCSIPortalGrpTag=eqlGroupISCSIPortalGrpTag, eqlStorageGroupStatusStorageContainerSnapCount=eqlStorageGroupStatusStorageContainerSnapCount, eqlStorageGroupStatusMembersInUse=eqlStorageGroupStatusMembersInUse, eqlStorageGroupStatusFailbackSpace=eqlStorageGroupStatusFailbackSpace, eqlGroupChapServerIndex=eqlGroupChapServerIndex, eqlRADIUSAuthMaxRetries=eqlRADIUSAuthMaxRetries, eqlEULAAcceptInfoTable=eqlEULAAcceptInfoTable, eqlGroupSiteRowStatus=eqlGroupSiteRowStatus, eqlStorageGroupStatusPoolSpace=eqlStorageGroupStatusPoolSpace, eqlStorageGroupDnsSuffixTable=eqlStorageGroupDnsSuffixTable, eqlEULAAcceptInfoTimestamp=eqlEULAAcceptInfoTimestamp, eqlStorageGroupAdminAccountSnmpKey2=eqlStorageGroupAdminAccountSnmpKey2, eqlStorageGroupAdminAccountEmail=eqlStorageGroupAdminAccountEmail, eqlStorageGroupEntry=eqlStorageGroupEntry, eqlStorageGroupStatusEntry=eqlStorageGroupStatusEntry, eqlGroupDefaultThinWarn=eqlGroupDefaultThinWarn, eqlGroupMaxConcurrentReplicas=eqlGroupMaxConcurrentReplicas, eqlStorageGroupChapAccountEntry=eqlStorageGroupChapAccountEntry, eqlStorageGroupStatusReplReserveSpace=eqlStorageGroupStatusReplReserveSpace, eqlStorageGroupStatusVolumesInUse=eqlStorageGroupStatusVolumesInUse, eqlGroupNtpServerInetAddressType=eqlGroupNtpServerInetAddressType, eqlRADIUSAcctServerInetAddress=eqlRADIUSAcctServerInetAddress, eqlLDAPServerBaseDN=eqlLDAPServerBaseDN, eqlGroupTaskEntry=eqlGroupTaskEntry, eqlGroupTaskReplication=eqlGroupTaskReplication, eqlGroupTaskSubTaskInProgress=eqlGroupTaskSubTaskInProgress, eqlUserSessionRemoteInetAddress=eqlUserSessionRemoteInetAddress, eqlGroupSessionBannerText=eqlGroupSessionBannerText, eqlGroupEmailSrcUserName=eqlGroupEmailSrcUserName, eqlStorageGroupSnmpReadOnlyCommunityTable=eqlStorageGroupSnmpReadOnlyCommunityTable, eqlGroupNtpServerRowStatus=eqlGroupNtpServerRowStatus, eqlUserSessionAdminAccountIndex=eqlUserSessionAdminAccountIndex, eqlGroupEnableSSH=eqlGroupEnableSSH, eqlGroupSiteContactEmail=eqlGroupSiteContactEmail, eqlStorageGroupSiteEntry=eqlStorageGroupSiteEntry, eqlGroupObjectReuseScrub=eqlGroupObjectReuseScrub, eqlGroupSMTPServerInetAddress=eqlGroupSMTPServerInetAddress, eqlRecordVersionMax=eqlRecordVersionMax, eqlGroupRecoveryTrimmerFreq=eqlGroupRecoveryTrimmerFreq, eqlGroupSessionIdleTimeout=eqlGroupSessionIdleTimeout, eqlGroupDnsServerIpAddress=eqlGroupDnsServerIpAddress, eqlGroupiSNSServerIpAddress=eqlGroupiSNSServerIpAddress, eqlgroupNotifications=eqlgroupNotifications, eqlStorageGroupStatusVirtualVolumesInUse=eqlStorageGroupStatusVirtualVolumesInUse, eqlGroupSMTPServerInetAddressType=eqlGroupSMTPServerInetAddressType)
mibBuilder.exportSymbols("EQLGROUP-MIB", eqlStorageGroupProfileMaxReplicasPerVolume=eqlStorageGroupProfileMaxReplicasPerVolume, eqlGroupEmailSrcDomain=eqlGroupEmailSrcDomain, eqlGroupSingleSignOnStatus=eqlGroupSingleSignOnStatus, eqlGroupChapServerIpAddress=eqlGroupChapServerIpAddress, eqlGroupDefaultSectorSize=eqlGroupDefaultSectorSize, eqlGrpNoofOrphanSnapCollections=eqlGrpNoofOrphanSnapCollections, eqlStorageGroupProfileMaxReplVolumes=eqlStorageGroupProfileMaxReplVolumes, eqlStorageGroupProfileTable=eqlStorageGroupProfileTable, eqlGroupSiteContactPhone=eqlGroupSiteContactPhone, eqlStorageGroupSnmpEntry=eqlStorageGroupSnmpEntry, eqlGroupInetAddr=eqlGroupInetAddr, eqlGroupDefaultAliasToVolumeName=eqlGroupDefaultAliasToVolumeName, eqlStorageGroupSysLogServerEntry=eqlStorageGroupSysLogServerEntry, eqlLDAPServerBindPassword=eqlLDAPServerBindPassword, eqlStorageGroupStatusDateAndTime=eqlStorageGroupStatusDateAndTime, eqlGroupSNMPPriorityMask=eqlGroupSNMPPriorityMask, eqlGroupSysLogServerRowStatus=eqlGroupSysLogServerRowStatus, eqlGroupChapServerPort=eqlGroupChapServerPort, eqlLDAPServerTable=eqlLDAPServerTable, eqlStorageGroupiSNSServerEntry=eqlStorageGroupiSNSServerEntry, eqlStorageGroupProfileMaxSyncReplVolumes=eqlStorageGroupProfileMaxSyncReplVolumes, eqlGroupSysLogServerInetAddress=eqlGroupSysLogServerInetAddress, eqlRADIUSAcctServerRowStatus=eqlRADIUSAcctServerRowStatus, eqlRADIUSRequireAdminAttrEnable=eqlRADIUSRequireAdminAttrEnable, eqlGroupDefaultSnapshotDeletePolicy=eqlGroupDefaultSnapshotDeletePolicy, eqlGroupRecoveryLifeTime=eqlGroupRecoveryLifeTime, eqlGroupSysLogPriorityMask=eqlGroupSysLogPriorityMask, eqlNextAvailableIndexTableType=eqlNextAvailableIndexTableType, eqlStorageGroupDnsServerTable=eqlStorageGroupDnsServerTable, eqlGroupSupportSlowSwitch=eqlGroupSupportSlowSwitch, AdminAccountType=AdminAccountType, eqlStorageGroupStatusCompressedSpaceUsed=eqlStorageGroupStatusCompressedSpaceUsed, eqlStorageGroupStatusVolumeCount=eqlStorageGroupStatusVolumeCount, eqlStorageGroupAdminAccountAuthType=eqlStorageGroupAdminAccountAuthType, eqlLDAPServerInetAddressType=eqlLDAPServerInetAddressType, eqlStorageGroupStatusVirtualVolumeCount=eqlStorageGroupStatusVirtualVolumeCount, eqlGroupDescription=eqlGroupDescription, eqlStorageGroupStatusSnapshotsOnline=eqlStorageGroupStatusSnapshotsOnline, eqlGroupSingleSignOnStatusEntry=eqlGroupSingleSignOnStatusEntry, eqlGroupName=eqlGroupName, eqlRADIUSiscsiAuthEnable=eqlRADIUSiscsiAuthEnable, eqlGroupTaskStartTime=eqlGroupTaskStartTime, eqlStorageGroupNtpServerTable=eqlStorageGroupNtpServerTable, eqlGroupSiteIndex=eqlGroupSiteIndex, eqlGroupCompressionScanFreq=eqlGroupCompressionScanFreq, eqlStorageGroupAdminAccountKeyEntry=eqlStorageGroupAdminAccountKeyEntry, eqlRADIUSEntry=eqlRADIUSEntry, eqlGroupEnableCliAccessUnsecure=eqlGroupEnableCliAccessUnsecure, eqlStorageGroupStatusPoolSpaceDelegated=eqlStorageGroupStatusPoolSpaceDelegated, eqlStorageGroupStatusPoolSpaceReserved=eqlStorageGroupStatusPoolSpaceReserved, eqlGroupDefaultDcbVlanId=eqlGroupDefaultDcbVlanId, eqlStorageGroupAdminAccountPrivilege=eqlStorageGroupAdminAccountPrivilege, eqlRADIUSSecret=eqlRADIUSSecret, eqlStorageGroupProfileMaxSnapsPerGroup=eqlStorageGroupProfileMaxSnapsPerGroup, eqlStorageGroupSMTPServerEntry=eqlStorageGroupSMTPServerEntry, eqlStorageGroupProfileMaxMembers=eqlStorageGroupProfileMaxMembers, eqlGroupPasswd2=eqlGroupPasswd2, eqlEULAAcceptInfoEntry=eqlEULAAcceptInfoEntry, eqlStorageGroupAdminAccountCliFlags=eqlStorageGroupAdminAccountCliFlags, eqlGroupDefaultMgmtGatewayIpAddressType=eqlGroupDefaultMgmtGatewayIpAddressType, eqlGroupNtpServerIndex=eqlGroupNtpServerIndex, eqlGroupEnableStandbyButton=eqlGroupEnableStandbyButton, eqlStorageGroupStatusStorageContainerVolumesOnline=eqlStorageGroupStatusStorageContainerVolumesOnline, eqlStorageGroupStatusConnectionCount=eqlStorageGroupStatusConnectionCount, eqlStorageGroupDnsServerEntry=eqlStorageGroupDnsServerEntry, eqlStorageGroupAdminAccountName=eqlStorageGroupAdminAccountName, eqlRecordVersionEntry=eqlRecordVersionEntry, eqlLDAPServerSecureProtocol=eqlLDAPServerSecureProtocol, eqlGroupPasswd1=eqlGroupPasswd1, eqlGroupEmailSupportContact=eqlGroupEmailSupportContact, eqlStorageGroupStatusThinProvFreeSpace=eqlStorageGroupStatusThinProvFreeSpace, eqlLdapLoginAccessEntry=eqlLdapLoginAccessEntry, eqlGroupEnableCliAccessSSH=eqlGroupEnableCliAccessSSH, eqlGroupInet6Addr=eqlGroupInet6Addr, eqlGroupDnsSuffixConfigState=eqlGroupDnsSuffixConfigState, eqlGroupSessionBannerTable=eqlGroupSessionBannerTable, eqlGroupiSNSServerInetAddress=eqlGroupiSNSServerInetAddress, eqlEULAAcceptInfoFirmwareType=eqlEULAAcceptInfoFirmwareType, eqlGroupMaxReplSegments=eqlGroupMaxReplSegments, eqlGroupEnableSyslog=eqlGroupEnableSyslog, eqlgroupConformance=eqlgroupConformance, eqlGroupLDAPLoginAuthEnable=eqlGroupLDAPLoginAuthEnable, eqlLDAPServerIndex=eqlLDAPServerIndex, eqlStorageGroupStatusStorageContainerVolumeCount=eqlStorageGroupStatusStorageContainerVolumeCount, AdminAccountPrivilegeType=AdminAccountPrivilegeType, eqlGroupSysLogServerIndex=eqlGroupSysLogServerIndex, eqlNextAvailableIndexEntry=eqlNextAvailableIndexEntry, eqlGroupInetAddrType=eqlGroupInetAddrType, eqlStorageGroupCollectionEntry=eqlStorageGroupCollectionEntry, eqlUserSessionLocalInetAddress=eqlUserSessionLocalInetAddress, eqlStorageGroupSMTPServerTable=eqlStorageGroupSMTPServerTable, eqlStorageGroupAdminAccountEntry=eqlStorageGroupAdminAccountEntry, eqlEULAAcceptInfoRowStatus=eqlEULAAcceptInfoRowStatus, eqlRADIUSAcctServerIpAddress=eqlRADIUSAcctServerIpAddress, eqlStorageGroupProfileEntry=eqlStorageGroupProfileEntry, eqlGroupEnableSSHProtocolV1=eqlGroupEnableSSHProtocolV1, eqlGroupEnableTelnet=eqlGroupEnableTelnet, eqlStorageGroupAdminAccountTable=eqlStorageGroupAdminAccountTable, eqlStorageGroupAdminAccountKeyTable=eqlStorageGroupAdminAccountKeyTable, eqlNextAvailableIndexValue=eqlNextAvailableIndexValue, eqlStorageGroupStatusVolumesOnline=eqlStorageGroupStatusVolumesOnline, eqlGroupSessionBannerEnable=eqlGroupSessionBannerEnable, eqlGroupDefaultSnapshotSize=eqlGroupDefaultSnapshotSize)
