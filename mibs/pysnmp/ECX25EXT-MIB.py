#
# PySNMP MIB module ECX25EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ECX25EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibIdentifier, ModuleIdentity, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, enterprises, TimeTicks, Counter32, NotificationType, NotificationType, Unsigned32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "ModuleIdentity", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "enterprises", "TimeTicks", "Counter32", "NotificationType", "NotificationType", "Unsigned32", "ObjectIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
x25ext = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5))
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class DisplayString(OctetString):
    pass

class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class X121Address(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 17)

x25CountersTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1), )
if mibBuilder.loadTexts: x25CountersTable.setStatus('mandatory')
x25CountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1), ).setIndexNames((0, "ECX25EXT-MIB", "x25CountPortRef"))
if mibBuilder.loadTexts: x25CountEntry.setStatus('mandatory')
x25CountPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CountPortRef.setStatus('mandatory')
x25RestartReqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RestartReqTxs.setStatus('mandatory')
x25RestartReqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RestartReqRxs.setStatus('mandatory')
x25ClearReqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ClearReqTxs.setStatus('mandatory')
x25ClearReqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ClearReqRxs.setStatus('mandatory')
x25ResetReqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ResetReqTxs.setStatus('mandatory')
x25ResetReqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ResetReqRxs.setStatus('mandatory')
x25InterrReqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25InterrReqTxs.setStatus('mandatory')
x25InterrReqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25InterrReqRxs.setStatus('mandatory')
x25RNRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RNRsTxs.setStatus('mandatory')
x25RNRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RNRsRxs.setStatus('mandatory')
x25REJsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25REJsTxs.setStatus('mandatory')
x25REJsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25REJsRxs.setStatus('mandatory')
x25CallConfirmTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CallConfirmTxs.setStatus('mandatory')
x25CallConfirmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CallConfirmRxs.setStatus('mandatory')
x25RRTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RRTxs.setStatus('mandatory')
x25RRRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RRRxs.setStatus('mandatory')
x25IntConfirmTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25IntConfirmTxs.setStatus('mandatory')
x25IntConfirmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25IntConfirmRxs.setStatus('mandatory')
x25ClrConfirmTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ClrConfirmTxs.setStatus('mandatory')
x25ClrConfirmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ClrConfirmRxs.setStatus('mandatory')
x25ResetConfirmTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ResetConfirmTxs.setStatus('mandatory')
x25ResetConfirmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ResetConfirmRxs.setStatus('mandatory')
x25RestartConfirmTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RestartConfirmTxs.setStatus('mandatory')
x25RestartConfirmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RestartConfirmRxs.setStatus('mandatory')
x25CallReqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CallReqTxs.setStatus('mandatory')
x25CallReqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CallReqRxs.setStatus('mandatory')
x25RegisterReqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RegisterReqTxs.setStatus('mandatory')
x25RegisterReqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RegisterReqRxs.setStatus('mandatory')
x25RegisterConfirmTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RegisterConfirmTxs.setStatus('mandatory')
x25RegisterConfirmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RegisterConfirmRxs.setStatus('mandatory')
x25DataSegmentsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DataSegmentsTxs.setStatus('mandatory')
x25DataSegmentsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DataSegmentsRxs.setStatus('mandatory')
x25CaractersTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CaractersTxs.setStatus('mandatory')
x25CaractersRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CaractersRxs.setStatus('mandatory')
x25DiagnosticPktsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DiagnosticPktsTxs.setStatus('mandatory')
x25DiagnosticPktsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DiagnosticPktsRxs.setStatus('mandatory')
x25UnknownPktsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25UnknownPktsTxs.setStatus('mandatory')
x25UnknownPktsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25UnknownPktsRxs.setStatus('mandatory')
x25VCCallParmTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2), )
if mibBuilder.loadTexts: x25VCCallParmTable.setStatus('mandatory')
x25VCCallParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1), ).setIndexNames((0, "ECX25EXT-MIB", "x25VCCallParmPortIndex"), (0, "ECX25EXT-MIB", "x25VCCallParmVCIndex"))
if mibBuilder.loadTexts: x25VCCallParmEntry.setStatus('mandatory')
x25VCCallParmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25VCCallParmPortIndex.setStatus('mandatory')
x25VCCallParmVCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25VCCallParmVCIndex.setStatus('mandatory')
x25VCCallParmInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25VCCallParmInPacketSize.setStatus('mandatory')
x25VCCallParmOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25VCCallParmOutPacketSize.setStatus('mandatory')
x25VCCallParmInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25VCCallParmInWindowSize.setStatus('mandatory')
x25VCCallParmOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25VCCallParmOutWindowSize.setStatus('mandatory')
x25VCCallParmUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25VCCallParmUserData.setStatus('mandatory')
x25VCCallParmCallingNetworkFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25VCCallParmCallingNetworkFacilities.setStatus('mandatory')
x25VCCallParmCalledNetworkFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25VCCallParmCalledNetworkFacilities.setStatus('mandatory')
x25OperTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3), )
if mibBuilder.loadTexts: x25OperTable.setStatus('mandatory')
x25OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1), ).setIndexNames((0, "ECX25EXT-MIB", "x25OperIndex"))
if mibBuilder.loadTexts: x25OperEntry.setStatus('mandatory')
x25OperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperIndex.setStatus('mandatory')
x25OperInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dxe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperInterfaceMode.setStatus('mandatory')
x25OperMaxActiveCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperMaxActiveCircuits.setStatus('mandatory')
x25OperPacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperPacketSequencing.setStatus('mandatory')
x25OperRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperRestartTimer.setStatus('mandatory')
x25OperCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 6), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperCallTimer.setStatus('mandatory')
x25OperResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 7), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperResetTimer.setStatus('mandatory')
x25OperClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 8), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperClearTimer.setStatus('mandatory')
x25OperWindowTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 9), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperWindowTimer.setStatus('mandatory')
x25OperDataRxmtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 10), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperDataRxmtTimer.setStatus('mandatory')
x25OperInterruptTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 11), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperInterruptTimer.setStatus('mandatory')
x25OperRejectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 12), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperRejectTimer.setStatus('mandatory')
x25OperRegistrationRequestTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 13), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperRegistrationRequestTimer.setStatus('mandatory')
x25OperMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 14), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperMinimumRecallTimer.setStatus('mandatory')
x25OperRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperRestartCount.setStatus('mandatory')
x25OperResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperResetCount.setStatus('mandatory')
x25OperClearCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperClearCount.setStatus('mandatory')
x25OperDataRxmtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperDataRxmtCount.setStatus('mandatory')
x25OperRejectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperRejectCount.setStatus('mandatory')
x25OperRegistrationRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperRegistrationRequestCount.setStatus('mandatory')
x25OperNumberPVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperNumberPVCs.setStatus('mandatory')
x25OperDefCallParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperDefCallParamId.setStatus('mandatory')
x25OperLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 23), X121Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperLocalAddress.setStatus('mandatory')
x25OperDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 24), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperDataLinkId.setStatus('mandatory')
x25OperProtocolVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 3, 1, 25), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OperProtocolVersionSupported.setStatus('mandatory')
x25StatTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4), )
if mibBuilder.loadTexts: x25StatTable.setStatus('mandatory')
x25StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1), ).setIndexNames((0, "ECX25EXT-MIB", "x25StatIndex"))
if mibBuilder.loadTexts: x25StatEntry.setStatus('mandatory')
x25StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatIndex.setStatus('mandatory')
x25StatInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInCalls.setStatus('mandatory')
x25StatInCallRefusals = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInCallRefusals.setStatus('mandatory')
x25StatInProviderInitiatedClears = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInProviderInitiatedClears.setStatus('mandatory')
x25StatInRemotelyInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInRemotelyInitiatedResets.setStatus('mandatory')
x25StatInProviderInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInProviderInitiatedResets.setStatus('mandatory')
x25StatInRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInRestarts.setStatus('mandatory')
x25StatInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInDataPackets.setStatus('mandatory')
x25StatInAccusedOfProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInAccusedOfProtocolErrors.setStatus('mandatory')
x25StatInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInInterrupts.setStatus('mandatory')
x25StatOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutCallAttempts.setStatus('mandatory')
x25StatOutCallFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutCallFailures.setStatus('mandatory')
x25StatOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutInterrupts.setStatus('mandatory')
x25StatOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutDataPackets.setStatus('mandatory')
x25StatOutgoingCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutgoingCircuits.setStatus('mandatory')
x25StatIncomingCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatIncomingCircuits.setStatus('mandatory')
x25StatTwowayCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatTwowayCircuits.setStatus('mandatory')
x25StatRestartTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatRestartTimeouts.setStatus('mandatory')
x25StatCallTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatCallTimeouts.setStatus('mandatory')
x25StatResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatResetTimeouts.setStatus('mandatory')
x25StatClearTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatClearTimeouts.setStatus('mandatory')
x25StatDataRxmtTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatDataRxmtTimeouts.setStatus('mandatory')
x25StatInterruptTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInterruptTimeouts.setStatus('mandatory')
x25StatRetryCountExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatRetryCountExceededs.setStatus('mandatory')
x25StatClearCountExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatClearCountExceededs.setStatus('mandatory')
x25ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5), )
if mibBuilder.loadTexts: x25ChannelTable.setStatus('mandatory')
x25ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1), ).setIndexNames((0, "ECX25EXT-MIB", "x25ChannelIndex"))
if mibBuilder.loadTexts: x25ChannelEntry.setStatus('mandatory')
x25ChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ChannelIndex.setStatus('mandatory')
x25ChannelLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelLIC.setStatus('mandatory')
x25ChannelHIC = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelHIC.setStatus('mandatory')
x25ChannelLTC = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelLTC.setStatus('mandatory')
x25ChannelHTC = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelHTC.setStatus('mandatory')
x25ChannelLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelLOC.setStatus('mandatory')
x25ChannelHOC = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelHOC.setStatus('mandatory')
x25CircuitTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6), )
if mibBuilder.loadTexts: x25CircuitTable.setStatus('mandatory')
x25CircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1), ).setIndexNames((0, "ECX25EXT-MIB", "x25CircuitIndex"), (0, "ECX25EXT-MIB", "x25CircuitChannel"))
if mibBuilder.loadTexts: x25CircuitEntry.setStatus('mandatory')
x25CircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitIndex.setStatus('mandatory')
x25CircuitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitChannel.setStatus('mandatory')
x25CircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("closed", 2), ("calling", 3), ("open", 4), ("clearing", 5), ("pvc", 6), ("pvcResetting", 7), ("startClear", 8), ("startPvcResetting", 9), ("other", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitStatus.setStatus('mandatory')
x25CircuitEstablishTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitEstablishTime.setStatus('mandatory')
x25CircuitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("pvc", 3))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitDirection.setStatus('mandatory')
x25CircuitInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInOctets.setStatus('mandatory')
x25CircuitInPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInPdus.setStatus('mandatory')
x25CircuitInRemotelyInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInRemotelyInitiatedResets.setStatus('mandatory')
x25CircuitInProviderInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInProviderInitiatedResets.setStatus('mandatory')
x25CircuitInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInInterrupts.setStatus('mandatory')
x25CircuitOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitOutOctets.setStatus('mandatory')
x25CircuitOutPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitOutPdus.setStatus('mandatory')
x25CircuitOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitOutInterrupts.setStatus('mandatory')
x25CircuitDataRetransmissionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitDataRetransmissionTimeouts.setStatus('mandatory')
x25CircuitResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitResetTimeouts.setStatus('mandatory')
x25CircuitInterruptTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInterruptTimeouts.setStatus('mandatory')
x25CircuitCallParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 17), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitCallParamId.setStatus('mandatory')
x25CircuitCalledDteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 18), X121Address().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitCalledDteAddress.setStatus('mandatory')
x25CircuitCallingDteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 19), X121Address().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitCallingDteAddress.setStatus('mandatory')
x25CircuitOriginallyCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 20), X121Address().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitOriginallyCalledAddress.setStatus('mandatory')
x25CircuitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitDescr.setStatus('mandatory')
x25CallParmTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7), )
if mibBuilder.loadTexts: x25CallParmTable.setStatus('mandatory')
x25CallParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1), ).setIndexNames((0, "ECX25EXT-MIB", "x25CallParmIndex"))
if mibBuilder.loadTexts: x25CallParmEntry.setStatus('mandatory')
x25CallParmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CallParmIndex.setStatus('mandatory')
x25CallParmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 2), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmStatus.setStatus('mandatory')
x25CallParmRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 3), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CallParmRefCount.setStatus('mandatory')
x25CallParmInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInPacketSize.setStatus('mandatory')
x25CallParmOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutPacketSize.setStatus('mandatory')
x25CallParmInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInWindowSize.setStatus('mandatory')
x25CallParmOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutWindowSize.setStatus('mandatory')
x25CallParmAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("accept", 2), ("refuse", 3), ("neverAccept", 4))).clone('refuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmAcceptReverseCharging.setStatus('mandatory')
x25CallParmProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmProposeReverseCharging.setStatus('mandatory')
x25CallParmFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 1), ("notSpecified", 2), ("fastSelect", 3), ("restrictedFastResponse", 4), ("noFastSelect", 5), ("noRestrictedFastResponse", 6))).clone('noFastSelect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmFastSelect.setStatus('mandatory')
x25CallParmInThruPutClasSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("tcReserved1", 1), ("tcReserved2", 2), ("tc75", 3), ("tc150", 4), ("tc300", 5), ("tc600", 6), ("tc1200", 7), ("tc2400", 8), ("tc4800", 9), ("tc9600", 10), ("tc19200", 11), ("tc48000", 12), ("tc64000", 13), ("tcReserved14", 14), ("tcReserved15", 15), ("tcReserved0", 16), ("tcNone", 17), ("tcDefault", 18))).clone('tcNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInThruPutClasSize.setStatus('mandatory')
x25CallParmOutThruPutClasSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("tcReserved1", 1), ("tcReserved2", 2), ("tc75", 3), ("tc150", 4), ("tc300", 5), ("tc600", 6), ("tc1200", 7), ("tc2400", 8), ("tc4800", 9), ("tc9600", 10), ("tc19200", 11), ("tc48000", 12), ("tc64000", 13), ("tcReserved14", 14), ("tcReserved15", 15), ("tcReserved0", 16), ("tcNone", 17), ("tcDefault", 18))).clone('tcNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutThruPutClasSize.setStatus('mandatory')
x25CallParmCug = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCug.setStatus('mandatory')
x25CallParmCugoa = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCugoa.setStatus('mandatory')
x25CallParmBcug = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmBcug.setStatus('mandatory')
x25CallParmNui = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmNui.setStatus('mandatory')
x25CallParmChargingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("noFacility", 2), ("noChargingInfo", 3), ("chargingInfo", 4))).clone('noFacility')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmChargingInfo.setStatus('mandatory')
x25CallParmRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmRpoa.setStatus('mandatory')
x25CallParmTrnstDly = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65537)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmTrnstDly.setStatus('mandatory')
x25CallParmCallingExt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCallingExt.setStatus('mandatory')
x25CallParmCalledExt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCalledExt.setStatus('mandatory')
x25CallParmInMinThuPutCls = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInMinThuPutCls.setStatus('mandatory')
x25CallParmOutMinThuPutCls = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutMinThuPutCls.setStatus('mandatory')
x25CallParmEndTrnsDly = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmEndTrnsDly.setStatus('mandatory')
x25CallParmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmPriority.setStatus('mandatory')
x25CallParmProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmProtection.setStatus('mandatory')
x25CallParmExptData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("noExpeditedData", 2), ("expeditedData", 3))).clone('noExpeditedData')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmExptData.setStatus('mandatory')
x25CallParmUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmUserData.setStatus('mandatory')
x25CallParmCallingNetworkFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCallingNetworkFacilities.setStatus('mandatory')
x25CallParmCalledNetworkFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 5, 7, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCalledNetworkFacilities.setStatus('mandatory')
x25Restart = NotificationType((1, 3, 6, 1, 4, 1, 434) + (0,451)).setObjects(("ECX25EXT-MIB", "x25OperIndex"))
x25Reset = NotificationType((1, 3, 6, 1, 4, 1, 434) + (0,2)).setObjects(("ECX25EXT-MIB", "x25CircuitIndex"), ("ECX25EXT-MIB", "x25CircuitChannel"))
mibBuilder.exportSymbols("ECX25EXT-MIB", x25ChannelLOC=x25ChannelLOC, x25OperDataLinkId=x25OperDataLinkId, x25DiagnosticPktsRxs=x25DiagnosticPktsRxs, x25StatOutCallFailures=x25StatOutCallFailures, x25ClearReqTxs=x25ClearReqTxs, x25OperDataRxmtTimer=x25OperDataRxmtTimer, x25CallParmEndTrnsDly=x25CallParmEndTrnsDly, x25RestartConfirmRxs=x25RestartConfirmRxs, x25OperResetCount=x25OperResetCount, x25OperResetTimer=x25OperResetTimer, x25StatOutDataPackets=x25StatOutDataPackets, x25OperProtocolVersionSupported=x25OperProtocolVersionSupported, x25CallParmUserData=x25CallParmUserData, x25OperIndex=x25OperIndex, x25OperRestartTimer=x25OperRestartTimer, x25CallParmTable=x25CallParmTable, x25OperClearCount=x25OperClearCount, x25CircuitEstablishTime=x25CircuitEstablishTime, x25CallConfirmTxs=x25CallConfirmTxs, x25CallParmPriority=x25CallParmPriority, x25VCCallParmInWindowSize=x25VCCallParmInWindowSize, x25OperRestartCount=x25OperRestartCount, x25CallParmCalledNetworkFacilities=x25CallParmCalledNetworkFacilities, x25UnknownPktsRxs=x25UnknownPktsRxs, x25CircuitOutInterrupts=x25CircuitOutInterrupts, x25CallParmEntry=x25CallParmEntry, x25StatClearCountExceededs=x25StatClearCountExceededs, x25CallParmProposeReverseCharging=x25CallParmProposeReverseCharging, x25StatOutInterrupts=x25StatOutInterrupts, x25VCCallParmVCIndex=x25VCCallParmVCIndex, x25RegisterReqTxs=x25RegisterReqTxs, x25OperRejectTimer=x25OperRejectTimer, x25ResetReqTxs=x25ResetReqTxs, x25VCCallParmOutPacketSize=x25VCCallParmOutPacketSize, x25CircuitResetTimeouts=x25CircuitResetTimeouts, x25RestartConfirmTxs=x25RestartConfirmTxs, x25CircuitTable=x25CircuitTable, x25StatResetTimeouts=x25StatResetTimeouts, x25OperMaxActiveCircuits=x25OperMaxActiveCircuits, x25CallParmRefCount=x25CallParmRefCount, x25OperWindowTimer=x25OperWindowTimer, x25CallParmFastSelect=x25CallParmFastSelect, x25CircuitCallParamId=x25CircuitCallParamId, x25CallParmExptData=x25CallParmExptData, x25OperInterfaceMode=x25OperInterfaceMode, x25StatRestartTimeouts=x25StatRestartTimeouts, EntryStatus=EntryStatus, x25CircuitInInterrupts=x25CircuitInInterrupts, x25CallParmInPacketSize=x25CallParmInPacketSize, x25ResetConfirmTxs=x25ResetConfirmTxs, x25UnknownPktsTxs=x25UnknownPktsTxs, x25OperRegistrationRequestTimer=x25OperRegistrationRequestTimer, x25OperRejectCount=x25OperRejectCount, x25StatInProviderInitiatedClears=x25StatInProviderInitiatedClears, x25CircuitOriginallyCalledAddress=x25CircuitOriginallyCalledAddress, x25CircuitChannel=x25CircuitChannel, x25RegisterReqRxs=x25RegisterReqRxs, x25StatDataRxmtTimeouts=x25StatDataRxmtTimeouts, x25RegisterConfirmRxs=x25RegisterConfirmRxs, x25CircuitIndex=x25CircuitIndex, x25CircuitInProviderInitiatedResets=x25CircuitInProviderInitiatedResets, x25ResetReqRxs=x25ResetReqRxs, x25CallParmAcceptReverseCharging=x25CallParmAcceptReverseCharging, x25REJsRxs=x25REJsRxs, x25OperTable=x25OperTable, x25VCCallParmInPacketSize=x25VCCallParmInPacketSize, x25CircuitStatus=x25CircuitStatus, x25OperCallTimer=x25OperCallTimer, x25CircuitInPdus=x25CircuitInPdus, x25CallParmProtection=x25CallParmProtection, x25VCCallParmCalledNetworkFacilities=x25VCCallParmCalledNetworkFacilities, x25OperDefCallParamId=x25OperDefCallParamId, x25ChannelLIC=x25ChannelLIC, x25StatInDataPackets=x25StatInDataPackets, x25CallParmRpoa=x25CallParmRpoa, x25StatTable=x25StatTable, mibv2=mibv2, x25CallParmOutThruPutClasSize=x25CallParmOutThruPutClasSize, x25CallParmInWindowSize=x25CallParmInWindowSize, x25StatIndex=x25StatIndex, x25CallParmNui=x25CallParmNui, x25StatInAccusedOfProtocolErrors=x25StatInAccusedOfProtocolErrors, x25OperEntry=x25OperEntry, x25CountPortRef=x25CountPortRef, x25OperMinimumRecallTimer=x25OperMinimumRecallTimer, x25InterrReqTxs=x25InterrReqTxs, x25ChannelHIC=x25ChannelHIC, x25ChannelEntry=x25ChannelEntry, x25CallParmInMinThuPutCls=x25CallParmInMinThuPutCls, x25DiagnosticPktsTxs=x25DiagnosticPktsTxs, module=module, x25CaractersRxs=x25CaractersRxs, x25CircuitOutPdus=x25CircuitOutPdus, x25CallParmChargingInfo=x25CallParmChargingInfo, x25IntConfirmTxs=x25IntConfirmTxs, x25CircuitDataRetransmissionTimeouts=x25CircuitDataRetransmissionTimeouts, x25DataSegmentsRxs=x25DataSegmentsRxs, x25ext=x25ext, x25VCCallParmEntry=x25VCCallParmEntry, DisplayString=DisplayString, x25Reset=x25Reset, x25CallParmStatus=x25CallParmStatus, x25StatClearTimeouts=x25StatClearTimeouts, x25RegisterConfirmTxs=x25RegisterConfirmTxs, x25VCCallParmCallingNetworkFacilities=x25VCCallParmCallingNetworkFacilities, x25CaractersTxs=x25CaractersTxs, x25VCCallParmPortIndex=x25VCCallParmPortIndex, x25CallParmCallingExt=x25CallParmCallingExt, x25CallParmBcug=x25CallParmBcug, x25CallConfirmRxs=x25CallConfirmRxs, x25RNRsRxs=x25RNRsRxs, x25StatInCallRefusals=x25StatInCallRefusals, x25StatOutCallAttempts=x25StatOutCallAttempts, x25ClrConfirmTxs=x25ClrConfirmTxs, x25StatInRemotelyInitiatedResets=x25StatInRemotelyInitiatedResets, x25CircuitInRemotelyInitiatedResets=x25CircuitInRemotelyInitiatedResets, x25RRRxs=x25RRRxs, x25ChannelTable=x25ChannelTable, x25CircuitEntry=x25CircuitEntry, x25StatEntry=x25StatEntry, x25CircuitCallingDteAddress=x25CircuitCallingDteAddress, x25CallParmOutPacketSize=x25CallParmOutPacketSize, x25InterrReqRxs=x25InterrReqRxs, x25RestartReqRxs=x25RestartReqRxs, x25CallParmTrnstDly=x25CallParmTrnstDly, x25CallParmIndex=x25CallParmIndex, x25StatInterruptTimeouts=x25StatInterruptTimeouts, x25ClrConfirmRxs=x25ClrConfirmRxs, x25CountEntry=x25CountEntry, x25StatRetryCountExceededs=x25StatRetryCountExceededs, x25CircuitDirection=x25CircuitDirection, x25ClearReqRxs=x25ClearReqRxs, x25StatInRestarts=x25StatInRestarts, x25CircuitOutOctets=x25CircuitOutOctets, x25CallParmOutMinThuPutCls=x25CallParmOutMinThuPutCls, x25CallReqRxs=x25CallReqRxs, x25REJsTxs=x25REJsTxs, x25CallParmInThruPutClasSize=x25CallParmInThruPutClasSize, x25CallParmCug=x25CallParmCug, x25VCCallParmTable=x25VCCallParmTable, x25Restart=x25Restart, x25ChannelLTC=x25ChannelLTC, PositiveInteger=PositiveInteger, x25CircuitDescr=x25CircuitDescr, x25StatInCalls=x25StatInCalls, x25RNRsTxs=x25RNRsTxs, x25ResetConfirmRxs=x25ResetConfirmRxs, x25CallParmCugoa=x25CallParmCugoa, x25CallReqTxs=x25CallReqTxs, x25OperRegistrationRequestCount=x25OperRegistrationRequestCount, x25OperNumberPVCs=x25OperNumberPVCs, management=management, x25VCCallParmOutWindowSize=x25VCCallParmOutWindowSize, x25StatInInterrupts=x25StatInInterrupts, eicon=eicon, x25StatIncomingCircuits=x25StatIncomingCircuits, x25StatOutgoingCircuits=x25StatOutgoingCircuits, x25StatCallTimeouts=x25StatCallTimeouts, x25OperInterruptTimer=x25OperInterruptTimer, x25RRTxs=x25RRTxs, x25OperClearTimer=x25OperClearTimer, x25OperDataRxmtCount=x25OperDataRxmtCount, x25VCCallParmUserData=x25VCCallParmUserData, x25StatInProviderInitiatedResets=x25StatInProviderInitiatedResets, x25StatTwowayCircuits=x25StatTwowayCircuits, x25RestartReqTxs=x25RestartReqTxs, x25CallParmOutWindowSize=x25CallParmOutWindowSize, x25IntConfirmRxs=x25IntConfirmRxs, x25OperLocalAddress=x25OperLocalAddress, X121Address=X121Address, x25CircuitInOctets=x25CircuitInOctets, x25ChannelIndex=x25ChannelIndex, x25OperPacketSequencing=x25OperPacketSequencing, IfIndexType=IfIndexType, x25CallParmCalledExt=x25CallParmCalledExt, x25DataSegmentsTxs=x25DataSegmentsTxs, x25CircuitCalledDteAddress=x25CircuitCalledDteAddress, x25ChannelHOC=x25ChannelHOC, x25CallParmCallingNetworkFacilities=x25CallParmCallingNetworkFacilities, x25CountersTable=x25CountersTable, x25ChannelHTC=x25ChannelHTC, x25CircuitInterruptTimeouts=x25CircuitInterruptTimeouts)
