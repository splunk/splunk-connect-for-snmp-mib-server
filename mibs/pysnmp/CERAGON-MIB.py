#
# PySNMP MIB module CERAGON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CERAGON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, Bits, Counter32, ModuleIdentity, NotificationType, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, TimeTicks, Integer32, NotificationType, Unsigned32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Bits", "Counter32", "ModuleIdentity", "NotificationType", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "TimeTicks", "Integer32", "NotificationType", "Unsigned32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ceragon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281))
gnOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 1))
gnFirstOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 1, 1))
gnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2))
gnGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1))
gnGenStandardOrg = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("etsi", 2), ("fcc", 3), ("japan", 4), ("lmds", 5), ("cmds", 6), ("australia", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStandardOrg.setStatus('mandatory')
gnGenTxFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("from37000to37350", 2), ("from37350to37700", 3), ("from37700to38050", 4), ("from38050to38400", 5), ("from38600to38950", 6), ("from38950to39300", 7), ("from39300to39650", 8), ("from39650to40000", 9), ("from37058to37618", 10), ("from37618to38178", 11), ("from38318to38878", 12), ("from38878to39438", 13), ("notUsed", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenTxFreqRange.setStatus('mandatory')
gnGenRemoteConnection = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenRemoteConnection.setStatus('mandatory')
gnGenRemoteDistance = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRemoteDistance.setStatus('mandatory')
gnGenInterLenLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenInterLenLocalRemote.setStatus('mandatory')
gnGenTxFreqLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenTxFreqLocalRemote.setStatus('mandatory')
gnGenRealTimeandDate = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRealTimeandDate.setStatus('mandatory')
gnGenCfgDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8), )
if mibBuilder.loadTexts: gnGenCfgDeviceTable.setStatus('mandatory')
gnGenCfgDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenCfgDeviceId"))
if mibBuilder.loadTexts: gnGenCfgDeviceEntry.setStatus('mandatory')
gnGenCfgDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgDeviceId.setStatus('mandatory')
gnGenCfgDeviceResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3), ("clearFastEthernetStatistics", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgDeviceResetPerfMon.setStatus('mandatory')
gnGenCfgDeviceOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noOperation", 2), ("softwareReset", 3), ("setDefaultConf", 4), ("clearMainManagerSoftware", 5), ("resetODU", 6), ("resetMUX", 7), ("resetSwOdu", 8))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgDeviceOperation.setStatus('mandatory')
gnGenCfgActivateLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 10))).clone(namedValues=NamedValues(("noOperation", 2), ("loopbackSPI", 3), ("loopbackMDM", 5), ("loopbackOuterSPI", 6), ("localODUloopback", 10))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgActivateLoopback.setStatus('mandatory')
gnGenCfgF1DataChanConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noInterface", 1), ("rs232db25", 2), ("v35", 3), ("rs422db25", 4), ("rj45CoDirect", 5), ("rj45bridge", 6), ("x21db15", 7), ("rs232db9", 8))).clone('rs232db25')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgF1DataChanConnector.setStatus('mandatory')
gnGenCfgWaySideConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noInterface", 1), ("rs232db25", 2), ("v35", 3), ("rs422db25", 4), ("connectorE1", 5), ("rj45bridge", 6), ("x21db15", 7), ("connectorT1", 8), ("lineSTM4", 9), ("clockUnit2M", 10), ("clockUnit1dot5M", 11))).clone('noInterface')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgWaySideConnector.setStatus('mandatory')
gnGenCfgActivateChanLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("loopbackDataChan", 3), ("loopbackWaySide", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgActivateChanLoopback.setStatus('mandatory')
gnGenCfgInterLenLocalOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgInterLenLocalOnly.setStatus('mandatory')
gnGenCfgSlipIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSlipIp.setStatus('mandatory')
gnGenCfgSlipModemConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSlipModemConnection.setStatus('mandatory')
gnGenCfgSlipSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud9600", 1), ("baud19200", 2), ("baud38400", 3), ("baud57600", 4), ("baud115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSlipSpeed.setStatus('mandatory')
gnGenCfgAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgAlarmSeverity.setStatus('mandatory')
gnGenCfgODUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgODUSerialNumber.setStatus('mandatory')
gnGenCfgIDUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgIDUSerialNumber.setStatus('mandatory')
gnGenCfgAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgAlarmText.setStatus('mandatory')
gnGenCfgTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("clear", 0), ("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgTrapSeverity.setStatus('mandatory')
gnGenCfgProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("accessMux", 2), ("sdhRegenerator", 3), ("narrowBandPdhRepeater", 4), ("accessMuxStm0", 5), ("plex6200", 6), ("adm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgProductType.setStatus('mandatory')
gnGenCfgLeftMediumConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noInterface", 1), ("twoDS3", 2), ("oneDS3", 3), ("twoE3", 4), ("oneE3", 5), ("oneFastEthernet", 6), ("fiberSTM1", 7), ("electricalSTM1", 8), ("utpSTM1", 9), ("stpSTM1", 10), ("twoSTM1", 11), ("eightE1", 12), ("eightT1", 13), ("hitLess", 14), ("fiberSTM1Trib", 15), ("electricalSTM1Trib", 16), ("hitLessWithBridge", 17), ("opticalFastEthernet", 18))).clone('twoDS3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgLeftMediumConnector.setStatus('mandatory')
gnGenCfgMiddleMediumConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noInterface", 1), ("twoDS3", 2), ("oneDS3", 3), ("twoE3", 4), ("oneE3", 5), ("oneFastEthernet", 6), ("fiberSTM1", 7), ("electricalSTM1", 8), ("utpSTM1", 9), ("stpSTM1", 10), ("twoSTM1", 11), ("eightE1", 12), ("eightT1", 13), ("hitLess", 14), ("fiberSTM1Trib", 15), ("electricalSTM1Trib", 16), ("hitLessWithBridge", 17), ("opticalFastEthernet", 18))).clone('oneDS3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgMiddleMediumConnector.setStatus('mandatory')
gnGenCfgPrimaryClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgPrimaryClockSource.setStatus('mandatory')
gnGenCfgSecondaryClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSecondaryClockSource.setStatus('mandatory')
gnGenCfgTrapOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgTrapOption.setStatus('mandatory')
gnGenCfgCLLI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgCLLI.setStatus('mandatory')
gnGenCfgHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgHeartbeatPeriod.setStatus('mandatory')
gnGenCfgGetRemoteData = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgGetRemoteData.setStatus('mandatory')
gnGenCfgClearLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgClearLoopTimeout.setStatus('mandatory')
gnGenCfgSubProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgSubProductType.setStatus('mandatory')
gnGenStatDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9), )
if mibBuilder.loadTexts: gnGenStatDeviceTable.setStatus('mandatory')
gnGenStatDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenStatDeviceId"))
if mibBuilder.loadTexts: gnGenStatDeviceEntry.setStatus('mandatory')
gnGenStatDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceId.setStatus('mandatory')
gnGenStatDeviceCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceCelsiusTemp.setStatus('mandatory')
gnGenStatDeviceFahrenheitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(14, 158))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceFahrenheitTemp.setStatus('mandatory')
gnGenStatDevicePowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDevicePowerSupply.setStatus('mandatory')
gnGenStatDeviceCable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("ok", 2), ("short", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceCable.setStatus('mandatory')
gnGenStatDeviceDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceDryContact.setStatus('mandatory')
gnGenStatDeviceLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceLeds.setStatus('mandatory')
gnGenStatInternalCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatInternalCommunication.setStatus('mandatory')
gnGenStatDeviceFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceFanStatus.setStatus('mandatory')
gnGenStatDeviceODUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceODUStatus.setStatus('mandatory')
gnGenStatDeviceIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceIDUStatus.setStatus('mandatory')
gnGenStatDeviceRSTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceRSTStatus.setStatus('mandatory')
gnGenChannelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenChannelBandwidth.setStatus('mandatory')
gnGenTxFreqNumLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenTxFreqNumLocalRemote.setStatus('mandatory')
gnGenProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("gnSDH", 2), ("gnSONET", 3), ("gnSONET-C", 4), ("gnSDH-C", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenProtocolType.setStatus('mandatory')
gnGenLinkId = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenLinkId.setStatus('mandatory')
gnGenMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMibVersion.setStatus('mandatory')
gnGenModemType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gn16QAM", 2), ("gn32QAM", 3), ("gn128QAM", 4), ("gn256QAM", 5), ("gn64QAM", 6), ("gn4QAM", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenModemType.setStatus('mandatory')
gnGenRadioSide = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRadioSide.setStatus('mandatory')
gnGenSystemWorkTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenSystemWorkTime.setStatus('mandatory')
gnGenRxFreqNumLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRxFreqNumLocalRemote.setStatus('mandatory')
gnGenLastCfgTimeandDate = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenLastCfgTimeandDate.setStatus('mandatory')
gnGenMostSevereAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("clear", 0), ("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMostSevereAlarm.setStatus('mandatory')
gnGenIdcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21), )
if mibBuilder.loadTexts: gnGenIdcCfgTable.setStatus('mandatory')
gnGenIdcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenIdcCfgId"))
if mibBuilder.loadTexts: gnGenIdcCfgEntry.setStatus('mandatory')
gnGenIdcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcCfgId.setStatus('mandatory')
gnGenIdcCfgXpicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgXpicMode.setStatus('mandatory')
gnGenIdcCfgResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3), ("clearFastEthernetStatistics", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgResetPerfMon.setStatus('mandatory')
gnGenIdcCfgOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOperation", 2), ("softwareReset", 3), ("setDefaultConf", 4), ("setIDCDefaultConf", 5), ("hardwareColdReset", 6), ("hardwareSoftReset", 7))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgOperation.setStatus('mandatory')
gnGenIdcCfgWaySideConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noInterface", 1), ("connectorE1", 2), ("connectorT1", 3), ("connectorDualE1", 4), ("connectorDualT1", 5), ("connectorDual10baseT", 6))).clone('noInterface')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcCfgWaySideConnector.setStatus('mandatory')
gnGenIdcCfgHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgHeartbeatPeriod.setStatus('mandatory')
gnGenIdcCfgClearLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgClearLoopTimeout.setStatus('mandatory')
gnGenIdcCfgSlipIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSlipIp.setStatus('mandatory')
gnGenIdcCfgSlipModemConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSlipModemConnection.setStatus('mandatory')
gnGenIdcCfgSlipSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud9600", 1), ("baud19200", 2), ("baud38400", 3), ("baud57600", 4), ("baud115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSlipSpeed.setStatus('mandatory')
gnGenIdcCfgAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgAlarmSeverity.setStatus('mandatory')
gnGenIdcCfgIDUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcCfgIDUSerialNumber.setStatus('mandatory')
gnGenIdcCfgTrapOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgTrapOption.setStatus('mandatory')
gnGenIdcCfgCLLI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgCLLI.setStatus('mandatory')
gnGenIdcCfgEowCascadeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgEowCascadeStatus.setStatus('mandatory')
gnGenIdcCfgSerialPPPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSerialPPPAdminStatus.setStatus('mandatory')
gnGenIdcStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22), )
if mibBuilder.loadTexts: gnGenIdcStatTable.setStatus('mandatory')
gnGenIdcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenIdcStatId"))
if mibBuilder.loadTexts: gnGenIdcStatEntry.setStatus('mandatory')
gnGenIdcStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatId.setStatus('mandatory')
gnGenIdcStatXpicSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatXpicSupport.setStatus('mandatory')
gnGenIdcStatLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatLeds.setStatus('mandatory')
gnGenIdcStatIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatIDUStatus.setStatus('mandatory')
gnGenIdcStatMMCCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatMMCCardStatus.setStatus('mandatory')
gnGenIdcStatDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatDryContact.setStatus('mandatory')
gnGenIdcStatFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatFanStatus.setStatus('mandatory')
gnGenIdcStatLeftDrawerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noDrawer", 2), ("drawerDown", 3), ("drawerUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatLeftDrawerStatus.setStatus('mandatory')
gnGenIdcStatRightDrawerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noDrawer", 2), ("drawerDown", 3), ("drawerUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatRightDrawerStatus.setStatus('mandatory')
gnGenIdcStatHitlessSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatHitlessSupport.setStatus('mandatory')
gnGenIdcStatEowExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("exist", 2), ("notExist", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatEowExistence.setStatus('mandatory')
gnGenIdcStatEowSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatEowSupport.setStatus('mandatory')
gnGenIdcStatIduPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("upper", 2), ("lower", 3), ("single", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatIduPosition.setStatus('mandatory')
gnGenIdcStatBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatBoardType.setStatus('mandatory')
gnGenIdcStatAgentIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatAgentIPAddress.setStatus('mandatory')
gnGenIdcStatInterfaceConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notExist", 2), ("oneFEplus64E1", 3), ("twoFEplus64E1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatInterfaceConnector.setStatus('mandatory')
gnGenIdcStatIfTableCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatIfTableCounter.setStatus('mandatory')
gnGeneralXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23), )
if mibBuilder.loadTexts: gnGeneralXTable.setStatus('mandatory')
gnGeneralXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenXId"))
if mibBuilder.loadTexts: gnGeneralXEntry.setStatus('mandatory')
gnGenXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXId.setStatus('mandatory')
gnGenXStandardOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("etsi", 2), ("fcc", 3), ("japan", 4), ("lmds", 5), ("cmds", 6), ("australia", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXStandardOrg.setStatus('mandatory')
gnGenXRemoteConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXRemoteConnection.setStatus('mandatory')
gnGenXLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXLinkId.setStatus('mandatory')
gnGenXModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gn16QAM", 2), ("gn32QAM", 3), ("gn128QAM", 4), ("gn256QAM", 5), ("gn64QAM", 6), ("gn4QAM", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXModemType.setStatus('mandatory')
gnGenXRadioSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXRadioSide.setStatus('mandatory')
gnGenXSystemWorkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXSystemWorkTime.setStatus('mandatory')
gnGenXOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noOperation", 2), ("setMuxDefaultConf", 3), ("hardwareColdReset", 4), ("hardwareWarmReset", 5), ("softwareODCReset", 6), ("hardwareODCReset", 7), ("resetAllDrawers", 8))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXOperation.setStatus('mandatory')
gnGenXResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3), ("clearFastEthernetStatistics", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXResetPerfMon.setStatus('mandatory')
gnGenXAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXAlarmSeverity.setStatus('mandatory')
gnGenXCarrierSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXCarrierSerialNumber.setStatus('mandatory')
gnGenXMUXSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXMUXSerialNumber.setStatus('mandatory')
gnGenXProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("accessMux", 2), ("sdhRegenerator", 3), ("narrowBandPdhRepeater", 4), ("accessMuxStm0", 5), ("plex6200", 6), ("adm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXProductType.setStatus('mandatory')
gnGenXCarrierConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("noInterface", 2), ("oneElectricalSTM1", 3), ("oneFiberSTM1SingleMode", 4), ("oneFiberSTM1MultiMode", 5), ("twoElectricalSTM1", 6), ("twoFiberSTM1SingleMode", 7), ("twoFiberSTM1MultiMode", 8), ("oneFEOnly", 9), ("oneFEplus4E1", 10), ("oneFEplus8E1", 11), ("oneFEplus4T1", 12), ("oneFEplus8T1", 13), ("twoFEOnly", 14), ("twoFEplus4E1", 15), ("twoFEplus8E1", 16), ("twoFEplus4T1", 17), ("twoFEplus8T1", 18), ("oneDS3", 19), ("threeDS3", 20), ("oneE3", 21), ("threeE3", 22), ("oneOpticalGBEOnly", 23), ("oneOpticalGBEPlus8E1", 24), ("oneOpticalGBEPlus8T1", 25), ("oneElectricalGBEOnly", 26), ("oneElectricalGBEPlus8E1", 27), ("oneElectricalGBEPlus8T1", 28), ("oneFEplus64E1", 29), ("oneFEplus64T1", 30), ("eightE1Only", 31), ("eightT1Only", 32), ("oneStm1XC", 33), ("twoStm1XC", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXCarrierConnector.setStatus('mandatory')
gnGenXInterfacesLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXInterfacesLeds.setStatus('mandatory')
gnGenXMultiRateMultiConsConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 24, 25, 26))).clone(namedValues=NamedValues(("mrmc1528", 1), ("mrmc1550", 2), ("mrmc3156", 3), ("mrmc3150", 4), ("mrmc1228", 5), ("mrmc1540", 6), ("mrmc4410", 7), ("mrmc4420", 8), ("mrmc4440", 9), ("mrmc1125", 10), ("mrmc2050", 11), ("mrmc2030", 12), ("mrmc1340", 13), ("mrmc3756", 18), ("acm56", 24), ("acm50", 25), ("acm28", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXMultiRateMultiConsConf.setStatus('mandatory')
gnGenXMultiRateMultiConsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXMultiRateMultiConsSupport.setStatus('mandatory')
gnGenXWaysideChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXWaysideChannel.setStatus('mandatory')
gnGenXWaySideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("waySideLoop", 3))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXWaySideLoopback.setStatus('mandatory')
gnGenXSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("idcToDrawer", 3), ("drawerToIdc", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXSyncIdcDataBase.setStatus('mandatory')
gnGenXAesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupport", 4), ("systemFailure", 5))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXAesEnable.setStatus('mandatory')
gnGenXAesMkeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("auto", 2), ("manual", 3))).clone('auto')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXAesMkeyMode.setStatus('mandatory')
gnGenXActNumOfInterfaceOnClass1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass1.setStatus('mandatory')
gnGenXActNumOfInterfaceOnClass2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass2.setStatus('mandatory')
gnGenXActNumOfInterfaceOnClass3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass3.setStatus('mandatory')
gnGenXEowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXEowStatus.setStatus('mandatory')
gnGenXTempLicenseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupported", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXTempLicenseEnable.setStatus('mandatory')
gnGenXTempLicenseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXTempLicenseTimer.setStatus('mandatory')
gnGenXDefectBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXDefectBlocks.setStatus('mandatory')
gnGenXBytesCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXBytesCorrected.setStatus('mandatory')
gnGenXPrbsTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notActive", 2), ("active", 3))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXPrbsTest.setStatus('mandatory')
gnGenXClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clearCounters", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXClearCounters.setStatus('mandatory')
gnGenXMuxLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXMuxLicense.setStatus('mandatory')
gnGenAddAlarmExtToTraps = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenAddAlarmExtToTraps.setStatus('mandatory')
gnGenFeatureSupport = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenFeatureSupport.setStatus('mandatory')
gnGeneralMrmcXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26), )
if mibBuilder.loadTexts: gnGeneralMrmcXTable.setStatus('mandatory')
gnGeneralMrmcXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenMrmcXId"), (0, "CERAGON-MIB", "gnGenMrmcXMrmcVal"))
if mibBuilder.loadTexts: gnGeneralMrmcXEntry.setStatus('mandatory')
gnGenMrmcXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXId.setStatus('mandatory')
gnGenMrmcXMrmcVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXMrmcVal.setStatus('mandatory')
gnGenMrmcXBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXBitRate.setStatus('mandatory')
gnGenMrmcXBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXBandWidth.setStatus('mandatory')
gnGenMrmcXQam = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXQam.setStatus('mandatory')
gnGenMrmcXScriptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXScriptType.setStatus('mandatory')
gnGenDrawerXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27), )
if mibBuilder.loadTexts: gnGenDrawerXTable.setStatus('mandatory')
gnGenDrawerXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenDrawerXId"))
if mibBuilder.loadTexts: gnGenDrawerXEntry.setStatus('mandatory')
gnGenDrawerXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXId.setStatus('mandatory')
gnGenDrawerXName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenDrawerXName.setStatus('mandatory')
gnGenDrawerXSlot1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("notExist", 2), ("powerOff", 3), ("powerOn", 4), ("dbReady", 5))).clone('notExist')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXSlot1Status.setStatus('mandatory')
gnGenDrawerXSlot2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("notExist", 2), ("powerOff", 3), ("powerOn", 4), ("dbReady", 5))).clone('notExist')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXSlot2Status.setStatus('mandatory')
gnGenDrawerXDeviceLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXDeviceLeds.setStatus('mandatory')
gnGenDrawerXInternalCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXInternalCommunication.setStatus('mandatory')
gnGenDrawerXDeviceIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXDeviceIDUStatus.setStatus('mandatory')
gnCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28))
cluster = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1))
clusterSystemType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("unknown", 2), ("p1500", 3), ("t3200", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSystemType.setStatus('mandatory')
clusterNumOfSubRacks = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNumOfSubRacks.setStatus('mandatory')
clusterSubRackNum = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSubRackNum.setStatus('mandatory')
clusterFloorNum = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterFloorNum.setStatus('mandatory')
clusterIPBase = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIPBase.setStatus('mandatory')
clusterIDCRole = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("clusterPrime", 2), ("member", 3), ("subrackManager", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIDCRole.setStatus('mandatory')
clusterPrimeIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPrimeIPAddress.setStatus('mandatory')
clusterPeerIPLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPeerIPLastChangeTime.setStatus('mandatory')
addressesTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2), )
if mibBuilder.loadTexts: addressesTable.setStatus('mandatory')
addressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "addressesPeerIPId"))
if mibBuilder.loadTexts: addressesEntry.setStatus('mandatory')
addressesPeerIPId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressesPeerIPId.setStatus('mandatory')
addressesPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressesPeerIPAddress.setStatus('mandatory')
primeIDC = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 3))
primeIDCAutoInternalClockDistribution = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primeIDCAutoInternalClockDistribution.setStatus('mandatory')
primeIDCSynchronizeClockInCluster = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noaction", 2), ("synchronize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primeIDCSynchronizeClockInCluster.setStatus('mandatory')
backplaneSlotMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4), )
if mibBuilder.loadTexts: backplaneSlotMappingTable.setStatus('mandatory')
backplaneSlotMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "backplaneSlotMappingSubrackId"), (0, "CERAGON-MIB", "backplaneSlotMappingFloorId"), (0, "CERAGON-MIB", "backplaneSlotMappingDrawerId"), (0, "CERAGON-MIB", "backplaneSlotMappingSubDrawerId"))
if mibBuilder.loadTexts: backplaneSlotMappingEntry.setStatus('mandatory')
backplaneSlotMappingSubrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingSubrackId.setStatus('mandatory')
backplaneSlotMappingFloorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingFloorId.setStatus('mandatory')
backplaneSlotMappingDrawerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingDrawerId.setStatus('mandatory')
backplaneSlotMappingSubDrawerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingSubDrawerId.setStatus('mandatory')
backplaneSlotMappingUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("idc", 2), ("odu", 3), ("mux", 4), ("modem", 5), ("drawer", 6), ("unknown", 7), ("none", 8), ("xc", 9), ("auxInterface", 10), ("power", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingUnitType.setStatus('mandatory')
backplaneSlotMappingUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingUnitNumber.setStatus('mandatory')
backplaneSlotMappingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingUnitIndex.setStatus('mandatory')
gnSubrack = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29))
powerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1), )
if mibBuilder.loadTexts: powerInputTable.setStatus('mandatory')
powerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "powerInputId"))
if mibBuilder.loadTexts: powerInputEntry.setStatus('mandatory')
powerInputId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerInputId.setStatus('mandatory')
powerInputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerInputAdmin.setStatus('mandatory')
powerInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("notexist", 2), ("unknown", 3), ("down", 4), ("up", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerInputStatus.setStatus('mandatory')
powerInputLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerInputLedStatus.setStatus('mandatory')
auxiliaryDrawer = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2))
auxiliaryDrawerAuxCardType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("na", 2), ("v1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerAuxCardType.setStatus('mandatory')
auxiliaryDrawerLedsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerLedsStatus.setStatus('mandatory')
auxiliaryDrawerBoardHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerBoardHWVersion.setStatus('mandatory')
auxiliaryDrawerBoardFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerBoardFWVersion.setStatus('mandatory')
auxiliaryDrawerBoardPostResetFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerBoardPostResetFWVersion.setStatus('mandatory')
auxiliaryDrawerSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerSerialNumber.setStatus('mandatory')
auxiliaryDrawerBoardReset = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noaction", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxiliaryDrawerBoardReset.setStatus('mandatory')
auxiliaryDrawerOrderWireCascading = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxiliaryDrawerOrderWireCascading.setStatus('mandatory')
xcDrawerTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3), )
if mibBuilder.loadTexts: xcDrawerTable.setStatus('mandatory')
xcDrawerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "xcDrawerXCId"))
if mibBuilder.loadTexts: xcDrawerEntry.setStatus('mandatory')
xcDrawerXCId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCId.setStatus('mandatory')
xcDrawerLedsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerLedsStatus.setStatus('mandatory')
xcDrawerBoardHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerBoardHWVersion.setStatus('mandatory')
xcDrawerBoardFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerBoardFWVersion.setStatus('mandatory')
xcDrawerBoardPostResetFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerBoardPostResetFWVersion.setStatus('mandatory')
xcDrawerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerSerialNumber.setStatus('mandatory')
xcDrawerResetXCBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noaction", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcDrawerResetXCBoard.setStatus('mandatory')
xcDrawerXCSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("passed", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCSelfTestResult.setStatus('mandatory')
xcDrawerXCActivityRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCActivityRole.setStatus('mandatory')
xcDrawerSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("idcToXC", 3), ("xcToIdc", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcDrawerSyncIdcDataBase.setStatus('mandatory')
xcDrawerXCConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("oneStm1XC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCConnector.setStatus('mandatory')
gnGenCarrierXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30), )
if mibBuilder.loadTexts: gnGenCarrierXTable.setStatus('mandatory')
gnGenCarrierXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenCarrierXId"))
if mibBuilder.loadTexts: gnGenCarrierXEntry.setStatus('mandatory')
gnGenCarrierXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("carrier1", 3), ("carrier2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCarrierXId.setStatus('mandatory')
gnGenCarrierXResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCarrierXResetPerfMon.setStatus('mandatory')
gnGenCarrierXSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noOperation", 2), ("idcToDrawer", 3), ("drawerToIdc", 4), ("idcToAllDrawers", 5))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCarrierXSyncIdcDataBase.setStatus('mandatory')
gnAgn = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2))
gnAgnMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1), )
if mibBuilder.loadTexts: gnAgnMgrTable.setStatus('mandatory')
gnAgnMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnMgrId"))
if mibBuilder.loadTexts: gnAgnMgrEntry.setStatus('mandatory')
gnAgnMgrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnMgrId.setStatus('mandatory')
gnAgnMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrIP.setStatus('mandatory')
gnAgnMgrAlarmGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrAlarmGroupMask.setStatus('mandatory')
gnAgnMgrSeverityFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrSeverityFilter.setStatus('mandatory')
gnAgnMgrTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrTrapPort.setStatus('mandatory')
gnAgnLogFileData = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2))
gnAgnLogFileMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileMaxEntries.setStatus('mandatory')
gnAgnLogFileValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileValidEntries.setStatus('mandatory')
gnAgnLogFileAction = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("clear", 2), ("save", 3), ("saveAndClear", 4), ("noAction", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnLogFileAction.setStatus('mandatory')
gnAgnLogFileTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4), )
if mibBuilder.loadTexts: gnAgnLogFileTable.setStatus('mandatory')
gnAgnLogFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnLogFileId"))
if mibBuilder.loadTexts: gnAgnLogFileEntry.setStatus('mandatory')
gnAgnLogFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileId.setStatus('mandatory')
gnAgnLogFileValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("valid", 2), ("notvalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileValid.setStatus('mandatory')
gnAgnLogFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDate.setStatus('mandatory')
gnAgnLogFileTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileTime.setStatus('mandatory')
gnAgnLogFileSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileSeverity.setStatus('mandatory')
gnAgnLogFileText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileText.setStatus('mandatory')
gnAgnLogFileDeviceCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceCelsiusTemp.setStatus('mandatory')
gnAgnLogFileDevicePowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDevicePowerSupply.setStatus('mandatory')
gnAgnLogFileInternalCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileInternalCommunication.setStatus('mandatory')
gnAgnLogFileDeviceFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceFanStatus.setStatus('mandatory')
gnAgnLogFileDeviceODUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceODUStatus.setStatus('mandatory')
gnAgnLogFileDeviceIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceIDUStatus.setStatus('mandatory')
gnAgnLogFileOduCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduCelsiusTemp.setStatus('mandatory')
gnAgnLogFileOduReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduReceiveLevel.setStatus('mandatory')
gnAgnLogFileOduSynthesizerVCOLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduSynthesizerVCOLock.setStatus('mandatory')
gnAgnLogFileOduPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduPowerSupply.setStatus('mandatory')
gnAgnLogFileLineBERCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLineBERCur.setStatus('mandatory')
gnAgnLogFileRadioBERCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileRadioBERCur.setStatus('mandatory')
gnAgnLogFileModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileModStatus.setStatus('mandatory')
gnAgnLogFileDemodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDemodStatus.setStatus('mandatory')
gnAgnLogFileLastDemodDefectBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLastDemodDefectBlocks.setStatus('mandatory')
gnAgnLogFileLastDemodBytesCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLastDemodBytesCorrected.setStatus('mandatory')
gnAgnLogFileLastDemodBlocksCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLastDemodBlocksCorrected.setStatus('mandatory')
gnAgnLogFileUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileUniqueId.setStatus('mandatory')
gnAgnLogFileSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 257, 258, 259, 260, 261, 262, 263, 264, 265, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 769, 770, 771, 772, 773, 774))).clone(namedValues=NamedValues(("interfaces", 1), ("idc", 2), ("drawer1", 3), ("drawer2", 4), ("tIdc1", 257), ("tIdc2", 258), ("tIdc3", 259), ("tIdc4", 260), ("tIdc5", 261), ("tIdc6", 262), ("tIdc7", 263), ("tIdc8", 264), ("tIdc9", 265), ("tDrawer1", 513), ("tDrawer2", 514), ("tDrawer3", 515), ("tDrawer4", 516), ("tDrawer5", 517), ("tDrawer6", 518), ("tDrawer7", 519), ("tDrawer8", 520), ("tDrawer9", 521), ("tDrawer10", 522), ("tDrawer11", 523), ("tDrawer12", 524), ("tDrawer13", 525), ("tDrawer14", 526), ("tDrawer15", 527), ("tXC1", 769), ("tXC2", 770), ("tXC3", 771), ("tXC4", 772), ("tXC5", 773), ("tXC6", 774)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileSource.setStatus('mandatory')
gnAgnLogFileTimeT = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileTimeT.setStatus('mandatory')
gnAgnLogFileHitlessSwitchLogAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnLogFileHitlessSwitchLogAdmin.setStatus('mandatory')
gnAgnLogFileXCSwitchLogAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnLogFileXCSwitchLogAdmin.setStatus('mandatory')
gnAgnExternAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3))
gnAgnInExternAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1), )
if mibBuilder.loadTexts: gnAgnInExternAlarmTable.setStatus('mandatory')
gnAgnInExternAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInExternAlarmDevId"), (0, "CERAGON-MIB", "gnAgnInExternAlarmIndex"))
if mibBuilder.loadTexts: gnAgnInExternAlarmEntry.setStatus('mandatory')
gnAgnInExternAlarmDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInExternAlarmDevId.setStatus('mandatory')
gnAgnInExternAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInExternAlarmIndex.setStatus('mandatory')
gnAgnInExternAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInExternAlarmEnable.setStatus('mandatory')
gnAgnInExternAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('Alarm Description')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInExternAlarmText.setStatus('mandatory')
gnAgnInExternAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInExternAlarmSeverity.setStatus('mandatory')
gnAgnOutRelayAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2), )
if mibBuilder.loadTexts: gnAgnOutRelayAlarmTable.setStatus('mandatory')
gnAgnOutRelayAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnOutRelayAlarmDevId"), (0, "CERAGON-MIB", "gnAgnOutRelayAlarmIndex"))
if mibBuilder.loadTexts: gnAgnOutRelayAlarmEntry.setStatus('mandatory')
gnAgnOutRelayAlarmDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnOutRelayAlarmDevId.setStatus('mandatory')
gnAgnOutRelayAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnOutRelayAlarmIndex.setStatus('mandatory')
gnAgnOutRelayAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("major", 2), ("minor", 3), ("warning", 4), ("external", 5), ("power", 6), ("ber", 7), ("line", 8), ("loopback", 9), ("lof", 10), ("idu", 11), ("odu", 12), ("cable", 13), ("remote", 14), ("critical", 15), ("testOn", 16), ("off", 17), ("xc", 18))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnOutRelayAlarmType.setStatus('mandatory')
gnAgnFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4))
gnAgnFileTransferDestination = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("gnLocal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferDestination.setStatus('mandatory')
gnAgnFileTransferServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferServerIP.setStatus('mandatory')
gnAgnFileTransferFileName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferFileName.setStatus('mandatory')
gnAgnFileTransferTftpTotalTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferTftpTotalTimeOut.setStatus('mandatory')
gnAgnFileTransferTransCmd = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("gnStartMUXSoftwareDownLoad", 1), ("gnStartODUSoftwareDownLoad", 2), ("gnStartMainManagerSoftwareDownLoad", 3), ("gnCancel", 4), ("gnNoOperation", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferTransCmd.setStatus('mandatory')
gnAgnFileTransfertFtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("gnTftpSessionPreStartSession", 1), ("gnTftpSessionFileError", 2), ("gnTftpSessionRcvBlock", 3), ("gnTftpSessionRcvtimeout", 4), ("gnTftpSessionRcvError", 5), ("gnTftpSessionDone", 6), ("gnNoTftpSession", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransfertFtpStatus.setStatus('mandatory')
gnAgnFileTransfertftpBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransfertftpBlockCount.setStatus('mandatory')
gnAgnFileTransferProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tftp", 2), ("ftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferProtocol.setStatus('mandatory')
gnAgnFileTransferUserName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferUserName.setStatus('mandatory')
gnAgnFileTransferPassword = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferPassword.setStatus('mandatory')
gnAgnFileTransferIDCVersionControl = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransferIDCVersionControl.setStatus('mandatory')
gnAgnFileTransferODCVersionControl = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransferODCVersionControl.setStatus('mandatory')
gnAgnInternalDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5), )
if mibBuilder.loadTexts: gnAgnInternalDownloadTable.setStatus('mandatory')
gnAgnInternalDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInternalDownloadId"))
if mibBuilder.loadTexts: gnAgnInternalDownloadEntry.setStatus('mandatory')
gnAgnInternalDownloadId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadId.setStatus('mandatory')
gnAgnInternalDownloadOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("localMUX", 2), ("localODU", 3), ("remoteMUX", 4), ("remoteODU", 5), ("leftShelfODU", 6), ("rightShelfODU", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadOperation.setStatus('mandatory')
gnAgnInternalDownloadAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start", 2), ("cancel", 3), ("clear", 4), ("noAction", 5), ("upLoadFpga", 6))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInternalDownloadAction.setStatus('mandatory')
gnAgnInternalDownloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("gnInternalDownloadSessionError", 1), ("gnInternalDownloadSessionClearing", 2), ("gnInternalDownloadSessionSendBlock", 3), ("gnInternalDownloadSessiontimeout", 4), ("gnInternalDownloadSessionDone", 5), ("gnInternalDownloadSessionWaitForRetransmit", 6), ("gnNoInternalDownloadSession", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadStatus.setStatus('mandatory')
gnAgnInternalDownloadBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadBlockCount.setStatus('mandatory')
gnAgnInternalDownloadVersionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInternalDownloadVersionControl.setStatus('mandatory')
gnAgnInternalDownloadFileSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadFileSizeInBytes.setStatus('mandatory')
gnAgnInternalDownloadBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadBytesCount.setStatus('mandatory')
gnAgnInterLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6), )
if mibBuilder.loadTexts: gnAgnInterLinkTable.setStatus('mandatory')
gnAgnInterLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInterLinkId"))
if mibBuilder.loadTexts: gnAgnInterLinkEntry.setStatus('mandatory')
gnAgnInterLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkId.setStatus('mandatory')
gnAgnInterLinkSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkSide.setStatus('mandatory')
gnAgnInterLinkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("me", 2), ("mate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkSource.setStatus('mandatory')
gnAgnInterLinkDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("me", 2), ("mate", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkDestination.setStatus('mandatory')
gnAgnInterLinkSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("manager", 2), ("mux", 3), ("odu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkSoftware.setStatus('mandatory')
gnAgnInterLinkAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("start", 2), ("cancel", 3), ("noAction", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkAction.setStatus('mandatory')
gnAgnInterLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("gnInterLinkSessionError", 1), ("gnInterLinkSessionClearing", 2), ("gnInterLinkSessionSendBlock", 3), ("gnInterLinkSessiontimeout", 4), ("gnInterLinkSessionDone", 5), ("gnNoInterLinkSession", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkStatus.setStatus('mandatory')
gnAgnInterLinkBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkBlockCount.setStatus('mandatory')
gnSoftwareVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7), )
if mibBuilder.loadTexts: gnSoftwareVersionTable.setStatus('mandatory')
gnSoftwareVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "gnSoftwareVersionId"))
if mibBuilder.loadTexts: gnSoftwareVersionEntry.setStatus('mandatory')
gnSoftwareVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionId.setStatus('mandatory')
gnSoftwareVersionIDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionIDU.setStatus('mandatory')
gnSoftwareVersionMUX = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMUX.setStatus('mandatory')
gnSoftwareVersionODU = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionODU.setStatus('mandatory')
gnSoftwareVersionIDUPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionIDUPostResetVersion.setStatus('mandatory')
gnSoftwareVersionMUXPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMUXPostResetVersion.setStatus('mandatory')
gnSoftwareVersionODUPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionODUPostResetVersion.setStatus('mandatory')
gnSoftwareVersionMuxAlteraVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMuxAlteraVer.setStatus('mandatory')
gnSoftwareIDCVersionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSoftwareIDCVersionControl.setStatus('mandatory')
gnSoftwareVersionWSAlteraVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionWSAlteraVer.setStatus('mandatory')
gnSoftwareVersionWSPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionWSPostResetVersion.setStatus('mandatory')
gnSoftwareVersionMrmcVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMrmcVer.setStatus('mandatory')
gnSoftwareVersionMrmcPostResetVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMrmcPostResetVer.setStatus('mandatory')
gnSoftwareVersionBootSoftVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionBootSoftVer.setStatus('mandatory')
gnSoftwareVersionBootFlashVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionBootFlashVer.setStatus('mandatory')
gnSoftwareVersionAcmLutVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionAcmLutVer.setStatus('mandatory')
gnSoftwareVersionAcmLutVerPostResetVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionAcmLutVerPostResetVer.setStatus('mandatory')
gnSoftwareVersionSfdVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionSfdVer.setStatus('mandatory')
gnAgnNTPCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8))
gnAgnNTPCfgServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgServerIP.setStatus('mandatory')
gnAgnNTPCfgOffsetFromUTC = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1439, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgOffsetFromUTC.setStatus('mandatory')
gnAgnNTPCfgSummerAdjOffset = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1439, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjOffset.setStatus('mandatory')
gnAgnNTPCfgSummerAdjStart = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjStart.setStatus('mandatory')
gnAgnNTPCfgSummerAdjEnd = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjEnd.setStatus('mandatory')
gnAgnNTPCfgEnableAuth = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("des", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgEnableAuth.setStatus('mandatory')
gnAgnNTPCfgAuthSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgAuthSecretKey.setStatus('mandatory')
gnAgnNTPCfgAuthPublicKey = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgAuthPublicKey.setStatus('mandatory')
gnAgnNTPCfgUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgUpdateInterval.setStatus('mandatory')
gnAgnNTPCfgProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ntp", 2), ("sntp", 3))).clone('ntp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgProtocolType.setStatus('mandatory')
gnAgnInBandMng = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9))
gnAgnInBandMngEthernetIp = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngEthernetIp.setStatus('mandatory')
gnAgnInBandMngEthernetMask = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngEthernetMask.setStatus('mandatory')
gnAgnInBandMngPppIp = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngPppIp.setStatus('mandatory')
gnAgnInBandMngPppMask = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngPppMask.setStatus('mandatory')
gnAgnInBandMngDefRoute = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngDefRoute.setStatus('mandatory')
gnAgnInBandMngEnable = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngEnable.setStatus('mandatory')
gnAgnInBandMngNetworkElementType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("networkElement", 2), ("gateway", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngNetworkElementType.setStatus('mandatory')
gnAgnInBandMngRadioChannel = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dccr", 2), ("dccm", 3), ("mediaSpecific128k", 4), ("proprietary", 5), ("userChannel", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngRadioChannel.setStatus('mandatory')
gnAgnInBandMngUnknownPackets = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("transparent", 2), ("discard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngUnknownPackets.setStatus('mandatory')
gnAgnInBandMngTTL = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngTTL.setStatus('mandatory')
gnAgnInBandMngRingIpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngRingIpSubnet.setStatus('mandatory')
gnAgnInBandMngRingIpMask = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngRingIpMask.setStatus('mandatory')
gnAgnInBandMngNetworkId = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngNetworkId.setStatus('mandatory')
gnAgnInBandMngLineMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("inbandFiber", 2), ("forcePPPoE", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngLineMode.setStatus('mandatory')
gnAgnInBandMngFiberChannel = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("dccr", 2), ("dccm", 3), ("userChannel", 5))).clone('dccr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngFiberChannel.setStatus('mandatory')
gnAgnInBandMngTribChannel = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disable", 2), ("dccr", 3), ("dccm", 4))).clone('dccr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngTribChannel.setStatus('mandatory')
gnAgnInBandMngXChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17), )
if mibBuilder.loadTexts: gnAgnInBandMngXChannelTable.setStatus('mandatory')
gnAgnInBandMngXChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInBandMngXChannelId"))
if mibBuilder.loadTexts: gnAgnInBandMngXChannelEntry.setStatus('mandatory')
gnAgnInBandMngXChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelId.setStatus('mandatory')
gnAgnInBandMngXChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelIfIndex.setStatus('mandatory')
gnAgnInBandMngXChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("proprietary", 2), ("dccr", 3), ("dccm", 4), ("mediaspecific", 5), ("pppoe", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelType.setStatus('mandatory')
gnAgnInBandMngXChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelState.setStatus('mandatory')
gnAgnInBandMngXChannelNeighborIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelNeighborIP.setStatus('mandatory')
gnAgnInBandMngXChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("up", 2), ("down", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelStatus.setStatus('mandatory')
gnAgnInBandMngXEnableInbandChannels = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXEnableInbandChannels.setStatus('mandatory')
gnAgnInBandMngMainGNEInterface = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 2), ("channel1", 3), ("channel2", 4), ("channel3", 5), ("channel4", 6))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngMainGNEInterface.setStatus('mandatory')
gnNeighborIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10))
gnNeighborInBandTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1), )
if mibBuilder.loadTexts: gnNeighborInBandTable.setStatus('mandatory')
gnNeighborInBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnNeighborInBandEntry.setStatus('mandatory')
gnNeighborInBandIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborInBandIP.setStatus('mandatory')
gnNeighborInBandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("up", 2), ("down", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborInBandStatus.setStatus('mandatory')
gnNeighborMateIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborMateIP.setStatus('mandatory')
gnNeighborRemoteRadioIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborRemoteRadioIP.setStatus('mandatory')
gnNeighborInBandXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4), )
if mibBuilder.loadTexts: gnNeighborInBandXTable.setStatus('mandatory')
gnNeighborInBandXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnNeighborInBandXId"))
if mibBuilder.loadTexts: gnNeighborInBandXEntry.setStatus('mandatory')
gnNeighborInBandXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborInBandXId.setStatus('mandatory')
gnNeighborInBandXIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborInBandXIP.setStatus('mandatory')
gnNeighborIpTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5), )
if mibBuilder.loadTexts: gnNeighborIpTable.setStatus('mandatory')
gnNeighborIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnNeighborIpEntry.setStatus('mandatory')
gnNeighborIpDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disable", 2), ("manual", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpDetectMode.setStatus('mandatory')
gnNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpAddress.setStatus('mandatory')
gnNeighborIpRemoteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpRemoteIfIndex.setStatus('mandatory')
gnNeighborIpRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("regenerator", 1), ("access", 2), ("adm", 3), ("unit1500p", 4), ("admline2line", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpRemoteType.setStatus('mandatory')
gnAgnSNMPCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11))
gnAgnSNMPCfgTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnSNMPCfgTrapCommunity.setStatus('mandatory')
gnAgnSNMPCfgReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnSNMPCfgReadCommunity.setStatus('mandatory')
gnAgnSNMPCfgWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnSNMPCfgWriteCommunity.setStatus('mandatory')
gnAgnPrvt = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 12))
gnAgnPrvtCmd = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("cNV", 3), ("cNVBtr", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnPrvtCmd.setStatus('mandatory')
gnAgnPrvtCmdStat = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 2), ("cNVPass", 3), ("cNVFail", 4), ("cNVBtrPass", 5), ("cNVBtrFail", 6))).clone('ready')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnPrvtCmdStat.setStatus('mandatory')
gnSoftwareDrawerVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13), )
if mibBuilder.loadTexts: gnSoftwareDrawerVersionTable.setStatus('mandatory')
gnSoftwareDrawerVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1), ).setIndexNames((0, "CERAGON-MIB", "gnSoftwareDrawerId"))
if mibBuilder.loadTexts: gnSoftwareDrawerVersionEntry.setStatus('mandatory')
gnSoftwareDrawerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerId.setStatus('mandatory')
gnSoftwareDrawerVersionMUX = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionMUX.setStatus('mandatory')
gnSoftwareDrawerVersionMUXPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionMUXPostResetVersion.setStatus('mandatory')
gnSoftwareDrawerVersionODU = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionODU.setStatus('mandatory')
gnSoftwareDrawerVersionODUPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionODUPostResetVersion.setStatus('mandatory')
gnSoftwareDrawerVersionModemFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemFile.setStatus('mandatory')
gnSoftwareDrawerVersionModemFilePostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemFilePostResetVersion.setStatus('mandatory')
gnSoftwareDrawerVersionModemScript = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemScript.setStatus('mandatory')
gnSoftwareDrawerVersionModemScriptPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemScriptPostResetVersion.setStatus('mandatory')
gnSoftwareDrawerVersionRfuFpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionRfuFpgaVersion.setStatus('mandatory')
gnAgnCurrentAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14))
gnAgnCurrentAlarmLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmLastChange.setStatus('mandatory')
gnAgnCurrentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2), )
if mibBuilder.loadTexts: gnAgnCurrentAlarmTable.setStatus('mandatory')
gnAgnCurrentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnCurrentAlarmCounter"))
if mibBuilder.loadTexts: gnAgnCurrentAlarmEntry.setStatus('mandatory')
gnAgnCurrentAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmCounter.setStatus('mandatory')
gnAgnCurrentAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmSeverity.setStatus('mandatory')
gnAgnCurrentAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmId.setStatus('mandatory')
gnAgnCurrentAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmIfIndex.setStatus('mandatory')
gnAgnCurrentAlarmOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 257, 258, 259, 260, 261, 262, 263, 264, 265, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 769, 770, 771, 772, 773, 774))).clone(namedValues=NamedValues(("interfaces", 1), ("idc", 2), ("drawer1", 3), ("drawer2", 4), ("unKnown", 5), ("tIdc1", 257), ("tIdc2", 258), ("tIdc3", 259), ("tIdc4", 260), ("tIdc5", 261), ("tIdc6", 262), ("tIdc7", 263), ("tIdc8", 264), ("tIdc9", 265), ("tDrawer1", 513), ("tDrawer2", 514), ("tDrawer3", 515), ("tDrawer4", 516), ("tDrawer5", 517), ("tDrawer6", 518), ("tDrawer7", 519), ("tDrawer8", 520), ("tDrawer9", 521), ("tDrawer10", 522), ("tDrawer11", 523), ("tDrawer12", 524), ("tDrawer13", 525), ("tDrawer14", 526), ("tDrawer15", 527), ("tXC1", 769), ("tXC2", 770), ("tXC3", 771), ("tXC4", 772), ("tXC5", 773), ("tXC6", 774)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmOrigin.setStatus('mandatory')
gnAgnCurrentAlarmUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("idc", 2), ("odu", 3), ("mux", 4), ("modem", 5), ("drawer", 6), ("unKnown", 7), ("xc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmUnit.setStatus('mandatory')
gnAgnCurrentAlarmTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmTrapID.setStatus('mandatory')
gnAgnCurrentAlarmTimeT = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmTimeT.setStatus('mandatory')
gnAgnCurrentAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmText.setStatus('mandatory')
gnNMS = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 15))
gnApplicFileTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16), )
if mibBuilder.loadTexts: gnApplicFileTable.setStatus('mandatory')
gnApplicFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1), ).setIndexNames((0, "CERAGON-MIB", "gnApplicFileId"))
if mibBuilder.loadTexts: gnApplicFileEntry.setStatus('mandatory')
gnApplicFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileId.setStatus('mandatory')
gnApplicFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileName.setStatus('mandatory')
gnApplicFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileVersion.setStatus('mandatory')
gnApplicFileCreateDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileCreateDate.setStatus('mandatory')
gnApplicFileDownloadDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileDownloadDate.setStatus('mandatory')
gnApplicFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("idc", 1), ("mux", 2), ("odu", 3), ("modem", 4), ("boot", 5), ("modemConfig", 6), ("wayside", 7), ("bootRom", 8), ("rfuFpga", 9), ("rfuConfig", 10), ("mrmcTable", 11), ("xc", 12), ("xcErrorgen", 13), ("aAux", 14), ("license", 15), ("frameConfigTable", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileType.setStatus('mandatory')
gnApplicFileSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileSubType.setStatus('mandatory')
gnApplicFileFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileFirmware.setStatus('mandatory')
gnApplicFileGeneralPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileGeneralPurpose.setStatus('mandatory')
gnApplicFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileSize.setStatus('mandatory')
gnApplicFileCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileCompressed.setStatus('mandatory')
gnApplicFileDssSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileDssSupport.setStatus('mandatory')
gnApplicFileCrcSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileCrcSupport.setStatus('mandatory')
gnDiskCapacityData = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 17))
gnDiskUsedspace = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnDiskUsedspace.setStatus('mandatory')
gnDiskFreespace = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnDiskFreespace.setStatus('mandatory')
gnUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3))
gnODU = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 1))
gnOduCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1), )
if mibBuilder.loadTexts: gnOduCfgTable.setStatus('mandatory')
gnOduCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnOduCfgEntry.setStatus('mandatory')
gnOduCfgTransmitterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgTransmitterFrequency.setStatus('mandatory')
gnOduCfgRLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRLPerfMonThresh1.setStatus('mandatory')
gnOduCfgRLPerfMonThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRLPerfMonThresh2.setStatus('mandatory')
gnOduCfgATPCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgATPCStatus.setStatus('mandatory')
gnOduCfgMUTEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgMUTEStatus.setStatus('mandatory')
gnOduCfgAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneFoot", 2), ("twoFeet", 3), ("threeFeet", 4), ("fourFeet", 5), ("sixFeet", 6))).clone('oneFoot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgAntennaType.setStatus('mandatory')
gnOduCfgTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgTransmitLevel.setStatus('mandatory')
gnOduCfgRealTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRealTxFreqNumber.setStatus('mandatory')
gnOduCfgRealRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRealRxFreqNumber.setStatus('mandatory')
gnOduCfgMinTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMinTxFreqNumber.setStatus('mandatory')
gnOduCfgMaxTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMaxTxFreqNumber.setStatus('mandatory')
gnOduCfgMaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMaxTxLevel.setStatus('mandatory')
gnOduCfgRefRsl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRefRsl.setStatus('mandatory')
gnOduCfgForceRmtMuteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgForceRmtMuteTx.setStatus('mandatory')
gnOduCfgForceRmtMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgForceRmtMaxTx.setStatus('mandatory')
gnOduCfgTLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 25)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgTLPerfMonThresh1.setStatus('mandatory')
gnOduCfgMinRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMinRxFreqNumber.setStatus('mandatory')
gnOduCfgMaxRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMaxRxFreqNumber.setStatus('mandatory')
gnOduCfgOduLoopSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgOduLoopSupport.setStatus('mandatory')
gnOduCfgOduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("unknown", 2), ("v2", 3), ("v1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgOduModel.setStatus('mandatory')
gnOduCfgFreqPlanStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgFreqPlanStandard.setStatus('mandatory')
gnOduCfgFreqDevider = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgFreqDevider.setStatus('mandatory')
gnOduStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2), )
if mibBuilder.loadTexts: gnOduStatusTable.setStatus('mandatory')
gnOduStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnOduStatusEntry.setStatus('mandatory')
gnOduStatusCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusCelsiusTemp.setStatus('mandatory')
gnOduStatusFahrenheitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 176))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusFahrenheitTemp.setStatus('mandatory')
gnOduStatusTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusTransmitLevel.setStatus('mandatory')
gnOduStatusReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusReceiveLevel.setStatus('mandatory')
gnOduStatusSynthesizerVCOLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusSynthesizerVCOLock.setStatus('mandatory')
gnOduStatusPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusPowerSupply.setStatus('mandatory')
gnOduStatusClearLoopTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusClearLoopTimer.setStatus('mandatory')
gnOduMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3))
gnOduMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1), )
if mibBuilder.loadTexts: gnOduMonCurrTable.setStatus('mandatory')
gnOduMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnOduMonCurrEntry.setStatus('mandatory')
gnOduMonCurrMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMinRL.setStatus('mandatory')
gnOduMonCurrMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMaxRL.setStatus('mandatory')
gnOduMonCurrTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrTLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrRLThresh2Exceed.setStatus('mandatory')
gnOduMonCurrDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMinRL.setStatus('mandatory')
gnOduMonCurrDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMaxRL.setStatus('mandatory')
gnOduMonCurrDayTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayTLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayRLThresh2Exceed.setStatus('mandatory')
gnOduMonCurrMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMinTL.setStatus('mandatory')
gnOduMonCurrMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMaxTL.setStatus('mandatory')
gnOduMonCurrDayMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMinTL.setStatus('mandatory')
gnOduMonCurrDayMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMaxTL.setStatus('mandatory')
gnOduMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2), )
if mibBuilder.loadTexts: gnOduMonIntervalTable.setStatus('mandatory')
gnOduMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnOduMonIntervalIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalEntry.setStatus('mandatory')
gnOduMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalIdx.setStatus('mandatory')
gnOduMonIntervalMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMinRL.setStatus('mandatory')
gnOduMonIntervalMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMaxRL.setStatus('mandatory')
gnOduMonIntervalTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalTLThresh1Exceed.setStatus('mandatory')
gnOduMonIntervalEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalEvent.setStatus('mandatory')
gnOduMonIntervalRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalRLThresh1Exceed.setStatus('mandatory')
gnOduMonIntervalRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalRLThresh2Exceed.setStatus('mandatory')
gnOduMonIntervalMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMinTL.setStatus('mandatory')
gnOduMonIntervalMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMaxTL.setStatus('mandatory')
gnOduMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3), )
if mibBuilder.loadTexts: gnOduMonDayTable.setStatus('mandatory')
gnOduMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnOduMonDayIdx"))
if mibBuilder.loadTexts: gnOduMonDayEntry.setStatus('mandatory')
gnOduMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayIdx.setStatus('mandatory')
gnOduMonDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMinRL.setStatus('mandatory')
gnOduMonDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMaxRL.setStatus('mandatory')
gnOduMonDayTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayTLThresh1Exceed.setStatus('mandatory')
gnOduMonDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayRLThresh1Exceed.setStatus('mandatory')
gnOduMonDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayRLThresh2Exceed.setStatus('mandatory')
gnOduMonDayMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMinTL.setStatus('mandatory')
gnOduMonDayMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMaxTL.setStatus('mandatory')
gnOduCfgXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4), )
if mibBuilder.loadTexts: gnOduCfgXTable.setStatus('mandatory')
gnOduCfgXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduCfgXId"))
if mibBuilder.loadTexts: gnOduCfgXEntry.setStatus('mandatory')
gnOduCfgXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXId.setStatus('mandatory')
gnOduCfgXTxFreqNumLocalRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXTxFreqNumLocalRemote.setStatus('mandatory')
gnOduCfgXRLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRLPerfMonThresh1.setStatus('mandatory')
gnOduCfgXRLPerfMonThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRLPerfMonThresh2.setStatus('mandatory')
gnOduCfgXATPCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXATPCStatus.setStatus('mandatory')
gnOduCfgXMUTEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXMUTEStatus.setStatus('mandatory')
gnOduCfgXAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneFoot", 2), ("twoFeet", 3), ("threeFeet", 4), ("fourFeet", 5), ("sixFeet", 6))).clone('oneFoot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXAntennaType.setStatus('mandatory')
gnOduCfgXTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXTransmitLevel.setStatus('mandatory')
gnOduCfgXRealTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRealTxFreqNumber.setStatus('mandatory')
gnOduCfgXRealRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRealRxFreqNumber.setStatus('mandatory')
gnOduCfgXMinTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMinTxFreqNumber.setStatus('mandatory')
gnOduCfgXMaxTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMaxTxFreqNumber.setStatus('mandatory')
gnOduCfgXMaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMaxTxLevel.setStatus('mandatory')
gnOduCfgXRefRsl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRefRsl.setStatus('mandatory')
gnOduCfgXForceRmtMuteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXForceRmtMuteTx.setStatus('mandatory')
gnOduCfgXForceRmtMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXForceRmtMaxTx.setStatus('mandatory')
gnOduCfgXTLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 25)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXTLPerfMonThresh1.setStatus('mandatory')
gnOduCfgXOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noOperation", 2), ("setOduDefaultConf", 3), ("resetODU", 4), ("swResetODU", 5))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXOperation.setStatus('mandatory')
gnOduCfgXODUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXODUSerialNumber.setStatus('mandatory')
gnOduCfgXChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXChannelBandwidth.setStatus('mandatory')
gnOduCfgXMinRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMinRxFreqNumber.setStatus('mandatory')
gnOduCfgXMaxRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMaxRxFreqNumber.setStatus('mandatory')
gnOduCfgXRxFreqNumLocalRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRxFreqNumLocalRemote.setStatus('mandatory')
gnOduCfgXOduLoopSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXOduLoopSupport.setStatus('mandatory')
gnOduCfgXOduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 2), ("v2", 3), ("v1", 4), ("v3", 5), ("v4", 6), ("v5", 7), ("v6", 8), ("v7", 9), ("v8", 10), ("v9", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXOduModel.setStatus('mandatory')
gnOduCfgXFreqPlanStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXFreqPlanStandard.setStatus('mandatory')
gnOduCfgXFreqDevider = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXFreqDevider.setStatus('mandatory')
gnOduCfgXLoopbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXLoopbackOption.setStatus('mandatory')
gnOduCfgXxpicClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("standAlone", 2), ("masterClock", 3), ("slaveClock", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXxpicClockMode.setStatus('mandatory')
gnOduCfgXUnfadedReferenceRsl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -15)).clone(-70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXUnfadedReferenceRsl.setStatus('mandatory')
gnOduCfgXRfuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("main", 2), ("diversity", 3), ("combined", 4))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRfuMode.setStatus('mandatory')
gnOduCfgXRslRouteToConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("main", 2), ("diversity", 3))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRslRouteToConnector.setStatus('mandatory')
gnOduCfgXDelayCalibrationOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("activate", 3), ("error", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationOperation.setStatus('mandatory')
gnOduCfgXDelayCalibrationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationValue.setStatus('mandatory')
gnOduCfgXDelayCalibrationWgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationWgType.setStatus('mandatory')
gnOduCfgXOduLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXOduLog.setStatus('mandatory')
gnOduCfgXOduLogPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXOduLogPeriod.setStatus('mandatory')
gnOduCfgXXpiPerfMonThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXXpiPerfMonThresh.setStatus('mandatory')
gnOduStatusXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5), )
if mibBuilder.loadTexts: gnOduStatusXTable.setStatus('mandatory')
gnOduStatusXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduStatusXId"))
if mibBuilder.loadTexts: gnOduStatusXEntry.setStatus('mandatory')
gnOduStatusXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXId.setStatus('mandatory')
gnOduStatusXCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXCelsiusTemp.setStatus('mandatory')
gnOduStatusXFahrenheitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 176))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXFahrenheitTemp.setStatus('mandatory')
gnOduStatusXTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXTransmitLevel.setStatus('mandatory')
gnOduStatusXReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXReceiveLevel.setStatus('mandatory')
gnOduStatusXSynthesizerVCOLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXSynthesizerVCOLock.setStatus('mandatory')
gnOduStatusXPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXPowerSupply.setStatus('mandatory')
gnOduStatusXIfcSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXIfcSupported.setStatus('mandatory')
gnOduStatusXRslDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRslDiversity.setStatus('mandatory')
gnOduStatusXRslCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRslCombined.setStatus('mandatory')
gnOduStatusXRfuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRfuAddress.setStatus('mandatory')
gnOduStatusXMinTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXMinTransmitLevel.setStatus('mandatory')
gnOduStatusXOduSWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXOduSWVer.setStatus('mandatory')
gnOduStatusXOduSWPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXOduSWPostVer.setStatus('mandatory')
gnOduStatusXRfuFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRfuFwVer.setStatus('mandatory')
gnOduStatusXValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXValidIntervals.setStatus('mandatory')
gnOduMonitorX = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6))
gnOduMonCurrXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1), )
if mibBuilder.loadTexts: gnOduMonCurrXTable.setStatus('mandatory')
gnOduMonCurrXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonCurrXId"))
if mibBuilder.loadTexts: gnOduMonCurrXEntry.setStatus('mandatory')
gnOduMonCurrXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXId.setStatus('mandatory')
gnOduMonCurrXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMinRL.setStatus('mandatory')
gnOduMonCurrXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMaxRL.setStatus('mandatory')
gnOduMonCurrXTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXTLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXRLThresh2Exceed.setStatus('mandatory')
gnOduMonCurrXDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMinRL.setStatus('mandatory')
gnOduMonCurrXDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxRL.setStatus('mandatory')
gnOduMonCurrXDayTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayTLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrXDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrXDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayRLThresh2Exceed.setStatus('mandatory')
gnOduMonCurrXMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMinTL.setStatus('mandatory')
gnOduMonCurrXMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMaxTL.setStatus('mandatory')
gnOduMonCurrXDayMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMinTL.setStatus('mandatory')
gnOduMonCurrXDayMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxTL.setStatus('mandatory')
gnOduMonCurrXXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXXpi.setStatus('mandatory')
gnOduMonCurrXMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMinXpi.setStatus('mandatory')
gnOduMonCurrXMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMaxXpi.setStatus('mandatory')
gnOduMonCurrXDayMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMinXpi.setStatus('mandatory')
gnOduMonCurrXDayMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxXpi.setStatus('mandatory')
gnOduMonCurrXXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXXpiThreshExceed.setStatus('mandatory')
gnOduMonCurrXDayXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayXpiThreshExceed.setStatus('mandatory')
gnOduMonCurrXMse = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMse.setStatus('mandatory')
gnOduMonCurrXLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXLastDayIDF.setStatus('mandatory')
gnOduMonIntervalXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2), )
if mibBuilder.loadTexts: gnOduMonIntervalXTable.setStatus('mandatory')
gnOduMonIntervalXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonIntervalXId"), (0, "CERAGON-MIB", "gnOduMonIntervalXIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalXEntry.setStatus('mandatory')
gnOduMonIntervalXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXId.setStatus('mandatory')
gnOduMonIntervalXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXIdx.setStatus('mandatory')
gnOduMonIntervalXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMinRL.setStatus('mandatory')
gnOduMonIntervalXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMaxRL.setStatus('mandatory')
gnOduMonIntervalXTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXTLThresh1Exceed.setStatus('mandatory')
gnOduMonIntervalXEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXEvent.setStatus('mandatory')
gnOduMonIntervalXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXRLThresh1Exceed.setStatus('mandatory')
gnOduMonIntervalXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXRLThresh2Exceed.setStatus('mandatory')
gnOduMonIntervalXMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMinTL.setStatus('mandatory')
gnOduMonIntervalXMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMaxTL.setStatus('mandatory')
gnOduMonIntervalXMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMinXpi.setStatus('mandatory')
gnOduMonIntervalXMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMaxXpi.setStatus('mandatory')
gnOduMonIntervalXXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXXpiThreshExceed.setStatus('mandatory')
gnOduMonIntervalXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXIDF.setStatus('mandatory')
gnOduMonDayXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3), )
if mibBuilder.loadTexts: gnOduMonDayXTable.setStatus('mandatory')
gnOduMonDayXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonDayXId"), (0, "CERAGON-MIB", "gnOduMonDayXIdx"))
if mibBuilder.loadTexts: gnOduMonDayXEntry.setStatus('mandatory')
gnOduMonDayXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXId.setStatus('mandatory')
gnOduMonDayXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXIdx.setStatus('mandatory')
gnOduMonDayXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMinRL.setStatus('mandatory')
gnOduMonDayXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMaxRL.setStatus('mandatory')
gnOduMonDayXTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXTLThresh1Exceed.setStatus('mandatory')
gnOduMonDayXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXRLThresh1Exceed.setStatus('mandatory')
gnOduMonDayXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXRLThresh2Exceed.setStatus('mandatory')
gnOduMonDayXMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMinTL.setStatus('mandatory')
gnOduMonDayXMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMaxTL.setStatus('mandatory')
gnOduMonDayXMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMinXpi.setStatus('mandatory')
gnOduMonDayXMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMaxXpi.setStatus('mandatory')
gnOduMonDayXXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXXpiThreshExceed.setStatus('mandatory')
gnOduMonDayXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXIDF.setStatus('mandatory')
gnOduMonCurrDiversityXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4), )
if mibBuilder.loadTexts: gnOduMonCurrDiversityXTable.setStatus('mandatory')
gnOduMonCurrDiversityXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonCurrDiversityXId"))
if mibBuilder.loadTexts: gnOduMonCurrDiversityXEntry.setStatus('mandatory')
gnOduMonCurrDiversityXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXId.setStatus('mandatory')
gnOduMonCurrDiversityXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXMinRL.setStatus('mandatory')
gnOduMonCurrDiversityXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXMaxRL.setStatus('mandatory')
gnOduMonCurrDiversityXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrDiversityXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXRLThresh2Exceed.setStatus('mandatory')
gnOduMonCurrDiversityXDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayMinRL.setStatus('mandatory')
gnOduMonCurrDiversityXDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayMaxRL.setStatus('mandatory')
gnOduMonCurrDiversityXDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrDiversityXDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayRLThresh2Exceed.setStatus('mandatory')
gnOduMonIntervalDiversityXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5), )
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXTable.setStatus('mandatory')
gnOduMonIntervalDiversityXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonIntervalDiversityXId"), (0, "CERAGON-MIB", "gnOduMonIntervalDiversityXIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXEntry.setStatus('mandatory')
gnOduMonIntervalDiversityXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXId.setStatus('mandatory')
gnOduMonIntervalDiversityXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXIdx.setStatus('mandatory')
gnOduMonIntervalDiversityXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXMinRL.setStatus('mandatory')
gnOduMonIntervalDiversityXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXMaxRL.setStatus('mandatory')
gnOduMonIntervalDiversityXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXRLThresh1Exceed.setStatus('mandatory')
gnOduMonIntervalDiversityXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXRLThresh2Exceed.setStatus('mandatory')
gnOduMonDayDiversityXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6), )
if mibBuilder.loadTexts: gnOduMonDayDiversityXTable.setStatus('mandatory')
gnOduMonDayDiversityXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonDayDiversityXId"), (0, "CERAGON-MIB", "gnOduMonDayDiversityXIdx"))
if mibBuilder.loadTexts: gnOduMonDayDiversityXEntry.setStatus('mandatory')
gnOduMonDayDiversityXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXId.setStatus('mandatory')
gnOduMonDayDiversityXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXIdx.setStatus('mandatory')
gnOduMonDayDiversityXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXMinRL.setStatus('mandatory')
gnOduMonDayDiversityXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXMaxRL.setStatus('mandatory')
gnOduMonDayDiversityXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXRLThresh1Exceed.setStatus('mandatory')
gnOduMonDayDiversityXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXRLThresh2Exceed.setStatus('mandatory')
gnOduMonCurrCombinedXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7), )
if mibBuilder.loadTexts: gnOduMonCurrCombinedXTable.setStatus('mandatory')
gnOduMonCurrCombinedXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonCurrCombinedXId"))
if mibBuilder.loadTexts: gnOduMonCurrCombinedXEntry.setStatus('mandatory')
gnOduMonCurrCombinedXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXId.setStatus('mandatory')
gnOduMonCurrCombinedXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXMinRL.setStatus('mandatory')
gnOduMonCurrCombinedXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXMaxRL.setStatus('mandatory')
gnOduMonCurrCombinedXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrCombinedXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXRLThresh2Exceed.setStatus('mandatory')
gnOduMonCurrCombinedXDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayMinRL.setStatus('mandatory')
gnOduMonCurrCombinedXDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayMaxRL.setStatus('mandatory')
gnOduMonCurrCombinedXDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayRLThresh1Exceed.setStatus('mandatory')
gnOduMonCurrCombinedXDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayRLThresh2Exceed.setStatus('mandatory')
gnOduMonIntervalCombinedXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8), )
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXTable.setStatus('mandatory')
gnOduMonIntervalCombinedXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonIntervalCombinedXId"), (0, "CERAGON-MIB", "gnOduMonIntervalCombinedXIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXEntry.setStatus('mandatory')
gnOduMonIntervalCombinedXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXId.setStatus('mandatory')
gnOduMonIntervalCombinedXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXIdx.setStatus('mandatory')
gnOduMonIntervalCombinedXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXMinRL.setStatus('mandatory')
gnOduMonIntervalCombinedXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXMaxRL.setStatus('mandatory')
gnOduMonIntervalCombinedXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXRLThresh1Exceed.setStatus('mandatory')
gnOduMonIntervalCombinedXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXRLThresh2Exceed.setStatus('mandatory')
gnOduMonDayCombinedXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9), )
if mibBuilder.loadTexts: gnOduMonDayCombinedXTable.setStatus('mandatory')
gnOduMonDayCombinedXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonDayCombinedXId"), (0, "CERAGON-MIB", "gnOduMonDayCombinedXIdx"))
if mibBuilder.loadTexts: gnOduMonDayCombinedXEntry.setStatus('mandatory')
gnOduMonDayCombinedXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXId.setStatus('mandatory')
gnOduMonDayCombinedXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXIdx.setStatus('mandatory')
gnOduMonDayCombinedXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXMinRL.setStatus('mandatory')
gnOduMonDayCombinedXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXMaxRL.setStatus('mandatory')
gnOduMonDayCombinedXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXRLThresh1Exceed.setStatus('mandatory')
gnOduMonDayCombinedXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXRLThresh2Exceed.setStatus('mandatory')
gnIDU = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2))
gnMdm = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1))
gnMdmStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2), )
if mibBuilder.loadTexts: gnMdmStatTable.setStatus('mandatory')
gnMdmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMdmStatEntry.setStatus('mandatory')
gnMdmModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ok", 2), ("modulatorFault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmModStatus.setStatus('mandatory')
gnMdmDemodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmDemodStatus.setStatus('mandatory')
gnMdmDefectBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmDefectBlocks.setStatus('mandatory')
gnMdmBytesCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmBytesCorrected.setStatus('mandatory')
gnMdmClearBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmClearBC.setStatus('mandatory')
gnMdmStatXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3), )
if mibBuilder.loadTexts: gnMdmStatXTable.setStatus('mandatory')
gnMdmStatXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmStatXId"))
if mibBuilder.loadTexts: gnMdmStatXEntry.setStatus('mandatory')
gnMdmStatXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXId.setStatus('mandatory')
gnMdmStatXStandardOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("etsi", 2), ("fcc", 3), ("japan", 4), ("lmds", 5), ("cmds", 6), ("australia", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXStandardOrg.setStatus('mandatory')
gnMdmStatXRemoteConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXRemoteConnection.setStatus('mandatory')
gnMdmStatXModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemType.setStatus('mandatory')
gnMdmStatXModemWorkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemWorkTime.setStatus('mandatory')
gnMdmStatXModemSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemSerialNumber.setStatus('mandatory')
gnMdmStatXModemFWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemFWVer.setStatus('mandatory')
gnMdmStatXModemFWPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemFWPostVer.setStatus('mandatory')
gnMdmStatXModemScriptVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemScriptVer.setStatus('mandatory')
gnMdmStatXModemScriptPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemScriptPostVer.setStatus('mandatory')
gnMdmStatXIfLoopbackTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXIfLoopbackTimeOut.setStatus('mandatory')
gnMdmStatXBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3), ("v3", 4))).clone('v1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXBoardType.setStatus('mandatory')
gnMdmStatXDefectedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXDefectedBlocks.setStatus('mandatory')
gnMdmStatXScriptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXScriptType.setStatus('mandatory')
gnMdmStatXAcmValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXAcmValidIntervals.setStatus('mandatory')
gnMdmStatXAcmSignalValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("valid", 2), ("notValid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXAcmSignalValid.setStatus('mandatory')
gnMdmStatXTxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXTxConstellation.setStatus('mandatory')
gnMdmStatXRxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXRxConstellation.setStatus('mandatory')
gnMdmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4), )
if mibBuilder.loadTexts: gnMdmCfgTable.setStatus('mandatory')
gnMdmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmCfgId"))
if mibBuilder.loadTexts: gnMdmCfgEntry.setStatus('mandatory')
gnMdmCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmCfgId.setStatus('mandatory')
gnMdmCfgDiversityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgDiversityMode.setStatus('mandatory')
gnMdmCfgXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5), )
if mibBuilder.loadTexts: gnMdmCfgXTable.setStatus('mandatory')
gnMdmCfgXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmCfgXId"))
if mibBuilder.loadTexts: gnMdmCfgXEntry.setStatus('mandatory')
gnMdmCfgXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmCfgXId.setStatus('mandatory')
gnMdmCfgXLatencyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("low", 2), ("high", 3))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXLatencyType.setStatus('mandatory')
gnMdmCfgXLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXLinkId.setStatus('mandatory')
gnMdmCfgXRadioSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXRadioSide.setStatus('mandatory')
gnMdmCfgXMrmcConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 24, 25, 26))).clone(namedValues=NamedValues(("mrmc1528", 1), ("mrmc1550", 2), ("mrmc3156", 3), ("mrmc3150", 4), ("mrmc1228", 5), ("mrmc1540", 6), ("mrmc4410", 7), ("mrmc4420", 8), ("mrmc4440", 9), ("mrmc1125", 10), ("mrmc2050", 11), ("mrmc2030", 12), ("mrmc1340", 13), ("mrmc3756", 18), ("acm56", 24), ("acm50", 25), ("acm28", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXMrmcConf.setStatus('mandatory')
gnMdmCfgXIfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("none", 2), ("active", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXIfLoopback.setStatus('mandatory')
gnMdmCfgXHwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noOperation", 2), ("hwReset", 3))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXHwReset.setStatus('mandatory')
gnMdmCfgXPrbsTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notActive", 2), ("active", 3))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXPrbsTest.setStatus('mandatory')
gnMdmCfgXClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clearCounters", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXClearCounters.setStatus('mandatory')
gnMdmCfgXAcmOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("adaptive", 1), ("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8))).clone('acm4QAM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXAcmOperationMode.setStatus('mandatory')
gnMdmCfgXAcmMaximumConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8))).clone('acm4QAM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXAcmMaximumConstellation.setStatus('mandatory')
gnMdmAcmStatXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6), )
if mibBuilder.loadTexts: gnMdmAcmStatXTable.setStatus('mandatory')
gnMdmAcmStatXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmStatXId"), (0, "CERAGON-MIB", "gnMdmAcmStatXQamId"))
if mibBuilder.loadTexts: gnMdmAcmStatXEntry.setStatus('mandatory')
gnMdmAcmStatXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXId.setStatus('mandatory')
gnMdmAcmStatXQamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8))).clone('acm4QAM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXQamId.setStatus('mandatory')
gnMdmAcmStatXRoundedThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(155)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXRoundedThroughput.setStatus('mandatory')
gnMdmAcmStatXSupportedThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notSupport", 2), ("support", 3))).clone('notSupport')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXSupportedThroughput.setStatus('mandatory')
gnMdmMonitorX = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7))
gnMdmAcmMonitorX = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1))
gnMdmAcmMonCurrXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1), )
if mibBuilder.loadTexts: gnMdmAcmMonCurrXTable.setStatus('mandatory')
gnMdmAcmMonCurrXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmMonCurrXId"))
if mibBuilder.loadTexts: gnMdmAcmMonCurrXEntry.setStatus('mandatory')
gnMdmAcmMonCurrXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXId.setStatus('mandatory')
gnMdmAcmMonCurrXMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXMinConstellation.setStatus('mandatory')
gnMdmAcmMonCurrXMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXMaxConstellation.setStatus('mandatory')
gnMdmAcmMonCurrXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXIDF.setStatus('mandatory')
gnMdmAcmMonCurrXDayMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayMinConstellation.setStatus('mandatory')
gnMdmAcmMonCurrXDayMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayMaxConstellation.setStatus('mandatory')
gnMdmAcmMonCurrXDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayIDF.setStatus('mandatory')
gnMdmAcmMonIntervalXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2), )
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXTable.setStatus('mandatory')
gnMdmAcmMonIntervalXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmMonIntervalXId"), (0, "CERAGON-MIB", "gnMdmAcmMonIntervalXIdx"))
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXEntry.setStatus('mandatory')
gnMdmAcmMonIntervalXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXId.setStatus('mandatory')
gnMdmAcmMonIntervalXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXIdx.setStatus('mandatory')
gnMdmAcmMonIntervalXMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXMinConstellation.setStatus('mandatory')
gnMdmAcmMonIntervalXMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXMaxConstellation.setStatus('mandatory')
gnMdmAcmMonIntervalXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXIDF.setStatus('mandatory')
gnMdmAcmMonDayXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3), )
if mibBuilder.loadTexts: gnMdmAcmMonDayXTable.setStatus('mandatory')
gnMdmAcmMonDayXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmMonDayXId"), (0, "CERAGON-MIB", "gnMdmAcmMonDayXIdx"))
if mibBuilder.loadTexts: gnMdmAcmMonDayXEntry.setStatus('mandatory')
gnMdmAcmMonDayXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXId.setStatus('mandatory')
gnMdmAcmMonDayXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXIdx.setStatus('mandatory')
gnMdmAcmMonDayXMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXMinConstellation.setStatus('mandatory')
gnMdmAcmMonDayXMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXMaxConstellation.setStatus('mandatory')
gnMdmAcmMonDayXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXIDF.setStatus('mandatory')
gnSpi = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2))
gnSpiCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2, 1), )
if mibBuilder.loadTexts: gnSpiCfgTable.setStatus('mandatory')
gnSpiCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnSpiCfgEntry.setStatus('mandatory')
gnSpiCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nointerface", 1), ("fiber", 2), ("electrical", 3), ("utp", 4), ("stp", 5))).clone('fiber')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSpiCfgConnector.setStatus('mandatory')
gnMux = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3))
gnRstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1), )
if mibBuilder.loadTexts: gnRstCfgTable.setStatus('mandatory')
gnRstCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnRstCfgEntry.setStatus('mandatory')
gnRstCfgTransmittedJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J0 J0 J0 J0 J0 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransmittedJ0.setStatus('mandatory')
gnRstCfgExpectedJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J0 J0 J0 J0 J0 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgExpectedJ0.setStatus('mandatory')
gnRstCfgTransparencyJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("notActive", 4))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyJ0.setStatus('mandatory')
gnRstCfgRSTAISMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAIS", 2), ("doNotSendAIS", 3))).clone('doNotSendAIS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgRSTAISMode.setStatus('mandatory')
gnRstCfgRstEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgRstEXCThresh.setStatus('mandatory')
gnRstCfgRstSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgRstSDThresh.setStatus('mandatory')
gnRstCfgTransparencyE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("disable", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyE1.setStatus('mandatory')
gnRstCfgTransparencyF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("disable", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyF1.setStatus('mandatory')
gnRstCfgTransparencyUnscrambled = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyUnscrambled.setStatus('mandatory')
gnRstCfgMngByteLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("mediaSpecificBytes", 2), ("spareA1A0Bytes", 3), ("e1Byets", 4), ("noMngBytes", 5), ("dccr", 6), ("dccm", 7), ("userChannel", 8), ("waysideChannel", 9))).clone('mediaSpecificBytes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgMngByteLocation.setStatus('mandatory')
gnRstCfgE1waysideChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgE1waysideChannel.setStatus('mandatory')
gnRstCfgTransparencyDCCR = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyDCCR.setStatus('mandatory')
gnRstCfgTransparencyB1Chan = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyB1Chan.setStatus('mandatory')
gnRstCfgTestActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTestActivate.setStatus('mandatory')
gnRstCfgLoopbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3), ("interfaceExterLoop", 4))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgLoopbackOption.setStatus('mandatory')
gnRstStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2), )
if mibBuilder.loadTexts: gnRstStatTable.setStatus('mandatory')
gnRstStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnRstStatEntry.setStatus('mandatory')
gnRstStatReceivedJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatReceivedJ0.setStatus('mandatory')
gnRstStatBERCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatBERCur.setStatus('mandatory')
gnRstStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatStatus.setStatus('mandatory')
gnRstStatClearLoopTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatClearLoopTimer.setStatus('mandatory')
gnRstMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3))
gnRstMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1), )
if mibBuilder.loadTexts: gnRstMonCurrTable.setStatus('mandatory')
gnRstMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnRstMonCurrEntry.setStatus('mandatory')
gnRstMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrBBE.setStatus('mandatory')
gnRstMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrUAS.setStatus('mandatory')
gnRstMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayES.setStatus('mandatory')
gnRstMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDaySES.setStatus('mandatory')
gnRstMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayBBE.setStatus('mandatory')
gnRstMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayUAS.setStatus('mandatory')
gnRstMonCurrLastDayOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayOFS.setStatus('mandatory')
gnRstMonCurrLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayIDF.setStatus('mandatory')
gnRstMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2), )
if mibBuilder.loadTexts: gnRstMonIntervalTable.setStatus('mandatory')
gnRstMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnRstMonIntervalIdx"))
if mibBuilder.loadTexts: gnRstMonIntervalEntry.setStatus('mandatory')
gnRstMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalIdx.setStatus('mandatory')
gnRstMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalBBE.setStatus('mandatory')
gnRstMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalUAS.setStatus('mandatory')
gnRstMonIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalIDF.setStatus('mandatory')
gnRstMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3), )
if mibBuilder.loadTexts: gnRstMonDayTable.setStatus('mandatory')
gnRstMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnRstMonDayIdx"))
if mibBuilder.loadTexts: gnRstMonDayEntry.setStatus('mandatory')
gnRstMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayIdx.setStatus('mandatory')
gnRstMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayES.setStatus('mandatory')
gnRstMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDaySES.setStatus('mandatory')
gnRstMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayBBE.setStatus('mandatory')
gnRstMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayUAS.setStatus('mandatory')
gnRstMonDayOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayOFS.setStatus('mandatory')
gnRstMonDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayIDF.setStatus('mandatory')
gnMstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4), )
if mibBuilder.loadTexts: gnMstCfgTable.setStatus('mandatory')
gnMstCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstCfgEntry.setStatus('mandatory')
gnMstCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMstCfgEXCThresh.setStatus('mandatory')
gnMstCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMstCfgSDThresh.setStatus('mandatory')
gnMstStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5), )
if mibBuilder.loadTexts: gnMstStatTable.setStatus('mandatory')
gnMstStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstStatEntry.setStatus('mandatory')
gnMstStatReceivedS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatReceivedS1.setStatus('mandatory')
gnMstStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatStatus.setStatus('mandatory')
gnMstStatTransmitS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatTransmitS1.setStatus('mandatory')
gnMstStatCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatCurrentBer.setStatus('mandatory')
gnMstStatReceivedK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatReceivedK1.setStatus('mandatory')
gnMstStatReceivedK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatReceivedK2.setStatus('mandatory')
gnMstStatTransmitK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatTransmitK1.setStatus('mandatory')
gnMstStatTransmitK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatTransmitK2.setStatus('mandatory')
gnMstMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6))
gnMstMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1), )
if mibBuilder.loadTexts: gnMstMonCurrTable.setStatus('mandatory')
gnMstMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstMonCurrEntry.setStatus('mandatory')
gnMstMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrBBE.setStatus('mandatory')
gnMstMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrUAS.setStatus('mandatory')
gnMstMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDayES.setStatus('mandatory')
gnMstMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDaySES.setStatus('mandatory')
gnMstMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDayBBE.setStatus('mandatory')
gnMstMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDayUAS.setStatus('mandatory')
gnMstMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2), )
if mibBuilder.loadTexts: gnMstMonIntervalTable.setStatus('mandatory')
gnMstMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstMonIntervalIdx"))
if mibBuilder.loadTexts: gnMstMonIntervalEntry.setStatus('mandatory')
gnMstMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonIntervalIdx.setStatus('mandatory')
gnMstMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonIntervalBBE.setStatus('mandatory')
gnMstMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonIntervalUAS.setStatus('mandatory')
gnMstMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3), )
if mibBuilder.loadTexts: gnMstMonDayTable.setStatus('mandatory')
gnMstMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstMonDayIdx"))
if mibBuilder.loadTexts: gnMstMonDayEntry.setStatus('mandatory')
gnMstMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayIdx.setStatus('mandatory')
gnMstMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayES.setStatus('mandatory')
gnMstMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDaySES.setStatus('mandatory')
gnMstMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayBBE.setStatus('mandatory')
gnMstMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayUAS.setStatus('mandatory')
gnMstFarEndMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4), )
if mibBuilder.loadTexts: gnMstFarEndMonCurrTable.setStatus('mandatory')
gnMstFarEndMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstFarEndMonCurrEntry.setStatus('mandatory')
gnMstFarEndMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrBBE.setStatus('mandatory')
gnMstFarEndMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrUAS.setStatus('mandatory')
gnMstFarEndMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayES.setStatus('mandatory')
gnMstFarEndMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDaySES.setStatus('mandatory')
gnMstFarEndMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayBBE.setStatus('mandatory')
gnMstFarEndMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayUAS.setStatus('mandatory')
gnMstFarEndMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5), )
if mibBuilder.loadTexts: gnMstFarEndMonIntervalTable.setStatus('mandatory')
gnMstFarEndMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstFarEndMonIntervalIdx"))
if mibBuilder.loadTexts: gnMstFarEndMonIntervalEntry.setStatus('mandatory')
gnMstFarEndMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonIntervalIdx.setStatus('mandatory')
gnMstFarEndMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonIntervalBBE.setStatus('mandatory')
gnMstFarEndMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonIntervalUAS.setStatus('mandatory')
gnMstFarEndMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6), )
if mibBuilder.loadTexts: gnMstFarEndMonDayTable.setStatus('mandatory')
gnMstFarEndMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstFarEndMonDayIdx"))
if mibBuilder.loadTexts: gnMstFarEndMonDayEntry.setStatus('mandatory')
gnMstFarEndMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayIdx.setStatus('mandatory')
gnMstFarEndMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayES.setStatus('mandatory')
gnMstFarEndMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDaySES.setStatus('mandatory')
gnMstFarEndMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayBBE.setStatus('mandatory')
gnMstFarEndMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayUAS.setStatus('mandatory')
gnHptCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7), )
if mibBuilder.loadTexts: gnHptCfgTable.setStatus('mandatory')
gnHptCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptCfgEntry.setStatus('mandatory')
gnHptCfgTransmittedJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('  ACCESS MUX   ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTransmittedJ1.setStatus('mandatory')
gnHptCfgExpectedJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('  ACCESS MUX   ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgExpectedJ1.setStatus('mandatory')
gnHptCfgMismatchJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgMismatchJ1.setStatus('mandatory')
gnHptCfgTransparencyJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("notActive", 4))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTransparencyJ1.setStatus('mandatory')
gnHptCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgEXCThresh.setStatus('mandatory')
gnHptCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgSDThresh.setStatus('mandatory')
gnHptCfgTug3Structure1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTug3Structure1.setStatus('mandatory')
gnHptCfgTug3Structure2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTug3Structure2.setStatus('mandatory')
gnHptCfgTug3Structure3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTug3Structure3.setStatus('mandatory')
gnHptCfgSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgSignalLabelMismatch.setStatus('mandatory')
gnHptCfgTrailPT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTrailPT1.setStatus('mandatory')
gnHptCfgTrailPT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTrailPT2.setStatus('mandatory')
gnHptCfgTrailPT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTrailPT3.setStatus('mandatory')
gnHptStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8), )
if mibBuilder.loadTexts: gnHptStatTable.setStatus('mandatory')
gnHptStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptStatEntry.setStatus('mandatory')
gnHptStatReceivedJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatReceivedJ1.setStatus('mandatory')
gnHptStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatStatus.setStatus('mandatory')
gnHptStatCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatCurrentBer.setStatus('mandatory')
gnHptStatFarEndCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatFarEndCurrentBer.setStatus('mandatory')
gnHptStatReceivedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatReceivedSignalLabel.setStatus('mandatory')
gnHptMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9))
gnHptMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1), )
if mibBuilder.loadTexts: gnHptMonCurrTable.setStatus('mandatory')
gnHptMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptMonCurrEntry.setStatus('mandatory')
gnHptMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrBBE.setStatus('mandatory')
gnHptMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrUAS.setStatus('mandatory')
gnHptMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDayES.setStatus('mandatory')
gnHptMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDaySES.setStatus('mandatory')
gnHptMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDayBBE.setStatus('mandatory')
gnHptMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDayUAS.setStatus('mandatory')
gnHptMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2), )
if mibBuilder.loadTexts: gnHptMonIntervalTable.setStatus('mandatory')
gnHptMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptMonIntervalIdx"))
if mibBuilder.loadTexts: gnHptMonIntervalEntry.setStatus('mandatory')
gnHptMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonIntervalIdx.setStatus('mandatory')
gnHptMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonIntervalBBE.setStatus('mandatory')
gnHptMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonIntervalUAS.setStatus('mandatory')
gnHptMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3), )
if mibBuilder.loadTexts: gnHptMonDayTable.setStatus('mandatory')
gnHptMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptMonDayIdx"))
if mibBuilder.loadTexts: gnHptMonDayEntry.setStatus('mandatory')
gnHptMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayIdx.setStatus('mandatory')
gnHptMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayES.setStatus('mandatory')
gnHptMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDaySES.setStatus('mandatory')
gnHptMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayBBE.setStatus('mandatory')
gnHptMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayUAS.setStatus('mandatory')
gnHptFarEndMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4), )
if mibBuilder.loadTexts: gnHptFarEndMonCurrTable.setStatus('mandatory')
gnHptFarEndMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptFarEndMonCurrEntry.setStatus('mandatory')
gnHptFarEndMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrBBE.setStatus('mandatory')
gnHptFarEndMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrUAS.setStatus('mandatory')
gnHptFarEndMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayES.setStatus('mandatory')
gnHptFarEndMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDaySES.setStatus('mandatory')
gnHptFarEndMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayBBE.setStatus('mandatory')
gnHptFarEndMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayUAS.setStatus('mandatory')
gnHptFarEndMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5), )
if mibBuilder.loadTexts: gnHptFarEndMonIntervalTable.setStatus('mandatory')
gnHptFarEndMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptFarEndMonIntervalIdx"))
if mibBuilder.loadTexts: gnHptFarEndMonIntervalEntry.setStatus('mandatory')
gnHptFarEndMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonIntervalIdx.setStatus('mandatory')
gnHptFarEndMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonIntervalBBE.setStatus('mandatory')
gnHptFarEndMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonIntervalUAS.setStatus('mandatory')
gnHptFarEndMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6), )
if mibBuilder.loadTexts: gnHptFarEndMonDayTable.setStatus('mandatory')
gnHptFarEndMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptFarEndMonDayIdx"))
if mibBuilder.loadTexts: gnHptFarEndMonDayEntry.setStatus('mandatory')
gnHptFarEndMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayIdx.setStatus('mandatory')
gnHptFarEndMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayES.setStatus('mandatory')
gnHptFarEndMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDaySES.setStatus('mandatory')
gnHptFarEndMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayBBE.setStatus('mandatory')
gnHptFarEndMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayUAS.setStatus('mandatory')
gnLptCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10), )
if mibBuilder.loadTexts: gnLptCfgTable.setStatus('mandatory')
gnLptCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptCfgEntry.setStatus('mandatory')
gnLptCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnLptCfgEXCThresh.setStatus('mandatory')
gnLptCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 15))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6), ("notActive", 15))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnLptCfgSDThresh.setStatus('mandatory')
gnLptStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11), )
if mibBuilder.loadTexts: gnLptStatTable.setStatus('mandatory')
gnLptStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptStatEntry.setStatus('mandatory')
gnLptStatReceivedJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatReceivedJ2.setStatus('mandatory')
gnLptStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatStatus.setStatus('mandatory')
gnLptStatProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("working", 2), ("protect", 3), ("passthrough", 4), ("notActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatProtectionMode.setStatus('mandatory')
gnLptStatCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatCurrentBer.setStatus('mandatory')
gnLptStatFarEndCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatFarEndCurrentBer.setStatus('mandatory')
gnLptStatReceivedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatReceivedSignalLabel.setStatus('mandatory')
gnLptStatKLM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatKLM.setStatus('mandatory')
gnLptMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12))
gnLptMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1), )
if mibBuilder.loadTexts: gnLptMonCurrTable.setStatus('mandatory')
gnLptMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptMonCurrEntry.setStatus('mandatory')
gnLptMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrBBE.setStatus('mandatory')
gnLptMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrUAS.setStatus('mandatory')
gnLptMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDayES.setStatus('mandatory')
gnLptMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDaySES.setStatus('mandatory')
gnLptMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDayBBE.setStatus('mandatory')
gnLptMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDayUAS.setStatus('mandatory')
gnLptMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2), )
if mibBuilder.loadTexts: gnLptMonIntervalTable.setStatus('mandatory')
gnLptMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptMonIntervalIdx"))
if mibBuilder.loadTexts: gnLptMonIntervalEntry.setStatus('mandatory')
gnLptMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonIntervalIdx.setStatus('mandatory')
gnLptMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonIntervalBBE.setStatus('mandatory')
gnLptMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonIntervalUAS.setStatus('mandatory')
gnLptMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3), )
if mibBuilder.loadTexts: gnLptMonDayTable.setStatus('mandatory')
gnLptMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptMonDayIdx"))
if mibBuilder.loadTexts: gnLptMonDayEntry.setStatus('mandatory')
gnLptMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayIdx.setStatus('mandatory')
gnLptMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayES.setStatus('mandatory')
gnLptMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDaySES.setStatus('mandatory')
gnLptMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayBBE.setStatus('mandatory')
gnLptMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayUAS.setStatus('mandatory')
gnLptFarEndMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4), )
if mibBuilder.loadTexts: gnLptFarEndMonCurrTable.setStatus('mandatory')
gnLptFarEndMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptFarEndMonCurrEntry.setStatus('mandatory')
gnLptFarEndMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrBBE.setStatus('mandatory')
gnLptFarEndMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrUAS.setStatus('mandatory')
gnLptFarEndMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayES.setStatus('mandatory')
gnLptFarEndMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDaySES.setStatus('mandatory')
gnLptFarEndMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayBBE.setStatus('mandatory')
gnLptFarEndMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayUAS.setStatus('mandatory')
gnLptFarEndMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5), )
if mibBuilder.loadTexts: gnLptFarEndMonIntervalTable.setStatus('mandatory')
gnLptFarEndMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptFarEndMonIntervalIdx"))
if mibBuilder.loadTexts: gnLptFarEndMonIntervalEntry.setStatus('mandatory')
gnLptFarEndMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonIntervalIdx.setStatus('mandatory')
gnLptFarEndMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonIntervalBBE.setStatus('mandatory')
gnLptFarEndMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonIntervalUAS.setStatus('mandatory')
gnLptFarEndMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6), )
if mibBuilder.loadTexts: gnLptFarEndMonDayTable.setStatus('mandatory')
gnLptFarEndMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptFarEndMonDayIdx"))
if mibBuilder.loadTexts: gnLptFarEndMonDayEntry.setStatus('mandatory')
gnLptFarEndMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayIdx.setStatus('mandatory')
gnLptFarEndMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayES.setStatus('mandatory')
gnLptFarEndMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDaySES.setStatus('mandatory')
gnLptFarEndMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayBBE.setStatus('mandatory')
gnLptFarEndMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayUAS.setStatus('mandatory')
gnMuxCfgXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13), )
if mibBuilder.loadTexts: gnMuxCfgXTable.setStatus('mandatory')
gnMuxCfgXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMuxCfgXId"))
if mibBuilder.loadTexts: gnMuxCfgXEntry.setStatus('mandatory')
gnMuxCfgXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("mux1", 3), ("mux2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxCfgXId.setStatus('mandatory')
gnMuxCfgXWsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMuxCfgXWsAdmin.setStatus('mandatory')
gnMuxCfgXWsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("waySideLoop", 3))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMuxCfgXWsLoopback.setStatus('mandatory')
gnMuxCfgXHwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noOperation", 2), ("hwReset", 3))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMuxCfgXHwReset.setStatus('mandatory')
gnMUXCfgXTempLicenseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupported", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMUXCfgXTempLicenseEnable.setStatus('mandatory')
gnMUXCfgXTempLicenseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMUXCfgXTempLicenseTimer.setStatus('mandatory')
gnMuxStatXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14), )
if mibBuilder.loadTexts: gnMuxStatXTable.setStatus('mandatory')
gnMuxStatXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMuxStatXId"))
if mibBuilder.loadTexts: gnMuxStatXEntry.setStatus('mandatory')
gnMuxStatXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("mux1", 3), ("mux2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXId.setStatus('mandatory')
gnMuxStatXMuxSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXMuxSerialNumber.setStatus('mandatory')
gnMuxStatXIfLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXIfLeds.setStatus('mandatory')
gnMuxStatXNumOfIfOnClass1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass1.setStatus('mandatory')
gnMuxStatXNumOfIfOnClass2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass2.setStatus('mandatory')
gnMuxStatXNumOfIfOnClass3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass3.setStatus('mandatory')
gnMuxStatXAesAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupport", 4), ("systemFailure", 5))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXAesAdmin.setStatus('mandatory')
gnMuxStatXMuxFWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXMuxFWVer.setStatus('mandatory')
gnMuxStatXMuxFWPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXMuxFWPostVer.setStatus('mandatory')
gnMuxStatXBoardConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("noInterface", 2), ("oneElectricalSTM1", 3), ("oneFiberSTM1SingleMode", 4), ("oneFiberSTM1MultiMode", 5), ("twoElectricalSTM1", 6), ("twoFiberSTM1SingleMode", 7), ("twoFiberSTM1MultiMode", 8), ("oneFEOnly", 9), ("oneFEplus4E1", 10), ("oneFEplus8E1", 11), ("oneFEplus4T1", 12), ("oneFEplus8T1", 13), ("twoFEOnly", 14), ("twoFEplus4E1", 15), ("twoFEplus8E1", 16), ("twoFEplus4T1", 17), ("twoFEplus8T1", 18), ("oneDS3", 19), ("threeDS3", 20), ("oneE3", 21), ("threeE3", 22), ("oneOpticalGBEOnly", 23), ("oneOpticalGBEPlus8E1", 24), ("oneOpticalGBEPlus8T1", 25), ("oneElectricalGBEOnly", 26), ("oneElectricalGBEPlus8E1", 27), ("oneElectricalGBEPlus8T1", 28), ("oneFEplus64E1", 29), ("oneFEplus64T1", 30), ("eightE1Only", 31), ("eightT1Only", 32), ("oneStm1XC", 33), ("twoStm1XC", 34))).clone('noInterface')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXBoardConnector.setStatus('mandatory')
gnMuxStatXBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3), ("v3", 4), ("v4", 5), ("v5", 6), ("v6", 7))).clone('v1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXBoardType.setStatus('mandatory')
gnAux = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4))
gnAuxGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1))
gnAuxGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1), )
if mibBuilder.loadTexts: gnAuxGeneralTable.setStatus('mandatory')
gnAuxGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAuxGeneralId"))
if mibBuilder.loadTexts: gnAuxGeneralEntry.setStatus('mandatory')
gnAuxGeneralId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAuxGeneralId.setStatus('mandatory')
gnAuxGeneralSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("auxToIdc", 3), ("idcToAux", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAuxGeneralSyncIdcDataBase.setStatus('mandatory')
gnWsc = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2))
gnWscCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1), )
if mibBuilder.loadTexts: gnWscCfgTable.setStatus('mandatory')
gnWscCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnWscCfgId"), (0, "CERAGON-MIB", "gnWscCfgChNumber"))
if mibBuilder.loadTexts: gnWscCfgEntry.setStatus('mandatory')
gnWscCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscCfgId.setStatus('mandatory')
gnWscCfgChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscCfgChNumber.setStatus('mandatory')
gnWscCfgRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("drawer1", 2), ("drawer2", 3))).clone('drawer1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgRouting.setStatus('mandatory')
gnWscCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgEnable.setStatus('mandatory')
gnWscCfgBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("low", 2), ("high", 3))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgBitRate.setStatus('mandatory')
gnWscCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("e1", 2), ("t1", 3), ("fastEthernet", 4))).clone('e1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgType.setStatus('mandatory')
gnWscStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2), )
if mibBuilder.loadTexts: gnWscStatTable.setStatus('mandatory')
gnWscStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnWscStatId"), (0, "CERAGON-MIB", "gnWscStatChNumber"))
if mibBuilder.loadTexts: gnWscStatEntry.setStatus('mandatory')
gnWscStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscStatId.setStatus('mandatory')
gnWscStatChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscStatChNumber.setStatus('mandatory')
gnWscStatBitRateSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3))).clone('notSupported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscStatBitRateSupport.setStatus('mandatory')
gnEow = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3))
gnEowCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1), )
if mibBuilder.loadTexts: gnEowCfgTable.setStatus('mandatory')
gnEowCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnEowCfgId"))
if mibBuilder.loadTexts: gnEowCfgEntry.setStatus('mandatory')
gnEowCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowCfgId.setStatus('mandatory')
gnEowCfgEowLeftEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnEowCfgEowLeftEnable.setStatus('mandatory')
gnEowCfgEowRightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnEowCfgEowRightEnable.setStatus('mandatory')
gnEowCfgEowCascadeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnEowCfgEowCascadeEnable.setStatus('mandatory')
gnEowStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2), )
if mibBuilder.loadTexts: gnEowStatTable.setStatus('mandatory')
gnEowStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnEowStatId"))
if mibBuilder.loadTexts: gnEowStatEntry.setStatus('mandatory')
gnEowStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowStatId.setStatus('mandatory')
gnEowStatEowLeftSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3))).clone('supported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowStatEowLeftSupport.setStatus('mandatory')
gnEowStatEowRightSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3))).clone('supported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowStatEowRightSupport.setStatus('mandatory')
gnUc = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4))
gnUcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1), )
if mibBuilder.loadTexts: gnUcCfgTable.setStatus('mandatory')
gnUcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnUcCfgId"), (0, "CERAGON-MIB", "gnUcCfgChNumber"))
if mibBuilder.loadTexts: gnUcCfgEntry.setStatus('mandatory')
gnUcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcCfgId.setStatus('mandatory')
gnUcCfgChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcCfgChNumber.setStatus('mandatory')
gnUcCfgRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("drawer1", 2), ("drawer2", 3))).clone('drawer1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgRouting.setStatus('mandatory')
gnUcCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgEnable.setStatus('mandatory')
gnUcCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("v11Asyn", 2), ("rs232", 3), ("v11SynCoDirectional", 4), ("v11SynContraDirectional", 5), ("ethernet", 6))).clone('v11Asyn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgType.setStatus('mandatory')
gnUcCfgLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("none", 2), ("line", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgLoopback.setStatus('mandatory')
gnUcStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2), )
if mibBuilder.loadTexts: gnUcStatTable.setStatus('mandatory')
gnUcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnUcStatId"))
if mibBuilder.loadTexts: gnUcStatEntry.setStatus('mandatory')
gnUcStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcStatId.setStatus('mandatory')
gnUcStatLeftMaxRouteChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcStatLeftMaxRouteChannel.setStatus('mandatory')
gnUcStatRightMaxRouteChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcStatRightMaxRouteChannel.setStatus('mandatory')
gnProtect = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3))
gnProtectCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1), )
if mibBuilder.loadTexts: gnProtectCfgTable.setStatus('mandatory')
gnProtectCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnProtectCfgId"))
if mibBuilder.loadTexts: gnProtectCfgEntry.setStatus('mandatory')
gnProtectCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectCfgId.setStatus('mandatory')
gnProtectCfgSwitchRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("userSwitchRequest", 3), ("userForceSwitch", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgSwitchRequest.setStatus('mandatory')
gnProtectCfgBERSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgBERSwitch.setStatus('mandatory')
gnProtectCfgExtInSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgExtInSwitch.setStatus('mandatory')
gnProtectCfgOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgOption.setStatus('mandatory')
gnProtectCfgUserCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 2), ("copyConfToMate", 3), ("copyLeftConfToRight", 4), ("copyRightConfToLeft", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgUserCommand.setStatus('mandatory')
gnProtectCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 2), ("internal", 3), ("external", 4), ("externalInternal", 5), ("multiRadioWithoutLineProtection", 6), ("multiRadioWithLineProtection", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgType.setStatus('mandatory')
gnProtectCfgProtectionLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgProtectionLockout.setStatus('mandatory')
gnProtectCfgSdBERSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgSdBERSwitch.setStatus('mandatory')
gnProtectCfgMultiRadioBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("unblock", 2), ("blockLeft", 3), ("blockRight", 4), ("blockBoth", 5))).clone('unblock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgMultiRadioBlock.setStatus('mandatory')
gnProtectUnitMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("slave", 2), ("master", 3))).clone('slave')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectUnitMode.setStatus('mandatory')
gnHitLessCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3), )
if mibBuilder.loadTexts: gnHitLessCfgTable.setStatus('mandatory')
gnHitLessCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnHitLessCfgId"))
if mibBuilder.loadTexts: gnHitLessCfgEntry.setStatus('mandatory')
gnHitLessCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessCfgId.setStatus('mandatory')
gnHitLessCfgSwitchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgSwitchEnable.setStatus('mandatory')
gnHitLessCfgDiversityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("space", 2), ("frequency", 3), ("none", 4))).clone('space')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgDiversityType.setStatus('mandatory')
gnHitLessCfgSwitchingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("revertive", 2), ("nonRevertive", 3))).clone('revertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgSwitchingMode.setStatus('mandatory')
gnHitLessCfgRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgRevertTime.setStatus('mandatory')
gnHitLessCfgManualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("activate", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgManualSwitch.setStatus('mandatory')
gnHitLessCfgEventCounterCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clearCounter", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgEventCounterCommand.setStatus('mandatory')
gnHitLessCfgSwitchLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 2), ("left", 3), ("right", 4), ("self", 5), ("mate", 6))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgSwitchLock.setStatus('mandatory')
gnHitLessStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4), )
if mibBuilder.loadTexts: gnHitLessStatTable.setStatus('mandatory')
gnHitLessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnHitLessStatId"))
if mibBuilder.loadTexts: gnHitLessStatEntry.setStatus('mandatory')
gnHitLessStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatId.setStatus('mandatory')
gnHitLessStatReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 2), ("mate", 3), ("leftRadio", 4), ("rightRadio", 5))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatReceiverStatus.setStatus('mandatory')
gnHitLessStatModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("hitlessOK", 2), ("hitlessFailure", 3))).clone('hitlessFailure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatModeStatus.setStatus('mandatory')
gnHitLessStatEventCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatEventCounter.setStatus('mandatory')
gnHitLessStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatAlarmStatus.setStatus('mandatory')
gnTribStmProtectCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5))
gnTribStmProtectType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("none", 2), ("msp", 3), ("sncp", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmProtectType.setStatus('mandatory')
gnTribStmMspConnect = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dualTribConnect", 2), ("singleTribConnect", 3))).clone('dualTribConnect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspConnect.setStatus('mandatory')
gnTribStmMspType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("uniDirectional", 2), ("biDirectional", 3))).clone('uniDirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspType.setStatus('mandatory')
gnTribStmMspRevertiveMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("nonRevertive", 2), ("revertive", 3))).clone('nonRevertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspRevertiveMode.setStatus('mandatory')
gnTribStmMspProtectRole = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("main", 2), ("standBy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspProtectRole.setStatus('mandatory')
gnTribStmMspWaitToRestoreTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspWaitToRestoreTime.setStatus('mandatory')
gnTribStmMspUserCommand = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clear", 2), ("lockOut", 3), ("forceSwitch", 4), ("manualSwitch", 5), ("exercise", 6))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspUserCommand.setStatus('mandatory')
gnTribStmProtectStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3, 6))
gnTribStmProtectCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("working", 2), ("protecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnTribStmProtectCurrentState.setStatus('mandatory')
gnTribStmProtectCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ok", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnTribStmProtectCableStatus.setStatus('mandatory')
gnProtectXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7), )
if mibBuilder.loadTexts: gnProtectXTable.setStatus('mandatory')
gnProtectXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "gnProtectXId"))
if mibBuilder.loadTexts: gnProtectXEntry.setStatus('mandatory')
gnProtectXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectXId.setStatus('mandatory')
gnProtectXProtectUnitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("slave", 2), ("master", 3))).clone('slave')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectXProtectUnitMode.setStatus('mandatory')
gnProtectXMultiRadioOhRadioSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4))).clone('drawer1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectXMultiRadioOhRadioSource.setStatus('mandatory')
gnLinkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8))
topologiesOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1), )
if mibBuilder.loadTexts: topologiesOptionsTable.setStatus('mandatory')
topologiesOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "topologiesOptionsGroupTopology"))
if mibBuilder.loadTexts: topologiesOptionsEntry.setStatus('mandatory')
topologiesOptionsGroupTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsGroupTopology.setStatus('mandatory')
topologiesOptionsMembersCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsMembersCarriers.setStatus('mandatory')
topologiesOptionsProtectingCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsProtectingCarriers.setStatus('mandatory')
topologiesOptionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsName.setStatus('mandatory')
linkGroupingTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2), )
if mibBuilder.loadTexts: linkGroupingTable.setStatus('mandatory')
linkGroupingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "linkGroupingGroupId"))
if mibBuilder.loadTexts: linkGroupingEntry.setStatus('mandatory')
linkGroupingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupId.setStatus('mandatory')
linkGroupingGroupAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupAdmin.setStatus('mandatory')
linkGroupingGroupTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 256, 513, 514, 515, 516, 517, 518, 519, 520, 521))).clone(namedValues=NamedValues(("topologyhsb1-1", 1), ("topologystandalone", 256), ("topology1plus1", 513), ("topology2plus1", 514), ("topology3plus1", 515), ("topology4plus1", 516), ("topology5plus1", 517), ("topology6plus1", 518), ("topology7plus1", 519), ("topology8plus1", 520), ("topology9plus1", 521)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupTopology.setStatus('mandatory')
linkGroupingExtraTrafficAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingExtraTrafficAdmin.setStatus('mandatory')
linkGroupingGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupName.setStatus('mandatory')
protectionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3), )
if mibBuilder.loadTexts: protectionTable.setStatus('mandatory')
protectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "protectionGroupId"))
if mibBuilder.loadTexts: protectionEntry.setStatus('mandatory')
protectionGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionGroupId.setStatus('mandatory')
protectionGroupsProtectionAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionGroupsProtectionAdmin.setStatus('mandatory')
protectionNplus1ProtectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("standard", 2), ("advanced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionNplus1ProtectionMethod.setStatus('mandatory')
protectionProtectingCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionProtectingCarrierId.setStatus('mandatory')
standardProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4), )
if mibBuilder.loadTexts: standardProtectionTable.setStatus('mandatory')
standardProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "standardProtectionGroupId"))
if mibBuilder.loadTexts: standardProtectionEntry.setStatus('mandatory')
standardProtectionGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standardProtectionGroupId.setStatus('mandatory')
standardProtectionSwitchOnEarlyWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionSwitchOnEarlyWarning.setStatus('mandatory')
standardProtectionHighPrioProtectionTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7))).clone(namedValues=NamedValues(("bblof", 4), ("bbexb", 5), ("bbsd", 6), ("ew", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionHighPrioProtectionTh.setStatus('mandatory')
standardProtectionRevertiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 256, 257))).clone(namedValues=NamedValues(("carrier1", 1), ("carrier2", 2), ("carrier3", 3), ("carrier4", 4), ("carrier5", 5), ("carrier6", 6), ("carrier7", 7), ("carrier8", 8), ("carrier9", 9), ("carrier10", 10), ("carrier11", 11), ("carrier12", 12), ("carrier13", 13), ("carrier14", 14), ("carrier15", 15), ("extraTraffic", 256), ("none", 257)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionRevertiveLink.setStatus('mandatory')
standardProtectionRevertiveSwitchTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionRevertiveSwitchTimeOut.setStatus('mandatory')
membersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5), )
if mibBuilder.loadTexts: membersTable.setStatus('mandatory')
membersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "membersGroupId"), (0, "CERAGON-MIB", "membersCarrierId"))
if mibBuilder.loadTexts: membersEntry.setStatus('mandatory')
membersGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: membersGroupId.setStatus('mandatory')
membersCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: membersCarrierId.setStatus('mandatory')
membersProtectionPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("void", 2), ("normal", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membersProtectionPriorityLevel.setStatus('mandatory')
nplus1ProtectingTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6), )
if mibBuilder.loadTexts: nplus1ProtectingTable.setStatus('mandatory')
nplus1ProtectingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1ProtectingGroupId"))
if mibBuilder.loadTexts: nplus1ProtectingEntry.setStatus('mandatory')
nplus1ProtectingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingGroupId.setStatus('mandatory')
nplus1ProtectingXCProtectionFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("na", 2), ("lof", 3), ("noPeer", 4), ("clear", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingXCProtectionFraming.setStatus('mandatory')
nplus1ProtectingProtectedLinkTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingProtectedLinkTx.setStatus('mandatory')
nplus1ProtectingProtectedLinkRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingProtectedLinkRx.setStatus('mandatory')
nplus1ProtectingRequestedLinkTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingRequestedLinkTx.setStatus('mandatory')
nplus1ProtectingRequestedLinkRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingRequestedLinkRx.setStatus('mandatory')
nplus1ProtectingSwitchToProtectingCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039))).clone(namedValues=NamedValues(("noaction", 256), ("lockout", 512), ("force1", 769), ("force2", 770), ("force3", 771), ("force4", 772), ("force5", 773), ("force6", 774), ("force7", 775), ("force8", 776), ("force9", 777), ("force10", 778), ("force11", 779), ("force12", 780), ("force13", 781), ("force14", 782), ("force15", 783), ("request1", 1025), ("request2", 1026), ("request3", 1027), ("request4", 1028), ("request5", 1029), ("request6", 1030), ("request7", 1031), ("request8", 1032), ("request9", 1033), ("request10", 1034), ("request11", 1035), ("request12", 1036), ("request13", 1037), ("request14", 1038), ("request15", 1039)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nplus1ProtectingSwitchToProtectingCommand.setStatus('mandatory')
carrierProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7), )
if mibBuilder.loadTexts: carrierProtectionTable.setStatus('mandatory')
carrierProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "carrierProtectionXCId"), (0, "CERAGON-MIB", "carrierProtectionCarrierId"))
if mibBuilder.loadTexts: carrierProtectionEntry.setStatus('mandatory')
carrierProtectionXCId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionXCId.setStatus('mandatory')
carrierProtectionCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionCarrierId.setStatus('mandatory')
carrierProtectionLinkGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standalone", 2), ("group1", 3), ("group2", 4), ("group3", 5), ("group4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionLinkGroupNum.setStatus('mandatory')
carrierProtectionServedByRemoteXC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("na", 2), ("yes", 3), ("no", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionServedByRemoteXC.setStatus('mandatory')
carrierProtectionRadioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("na", 2), ("off", 3), ("bblof", 4), ("bbexb", 5), ("bbsd", 6), ("ew", 7), ("clear", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionRadioStatus.setStatus('mandatory')
carrierProtectionLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("na", 2), ("lof", 3), ("clear", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionLineFraming.setStatus('mandatory')
carrierProtectionLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("none", 3), ("external", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: carrierProtectionLoopback.setStatus('mandatory')
carrierProtectionLoopbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionLoopbackTimer.setStatus('mandatory')
nplus1StandardPMCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8), )
if mibBuilder.loadTexts: nplus1StandardPMCurrTable.setStatus('mandatory')
nplus1StandardPMCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1StandardPMCurrCarrierId"))
if mibBuilder.loadTexts: nplus1StandardPMCurrEntry.setStatus('mandatory')
nplus1StandardPMCurrCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrCarrierId.setStatus('mandatory')
nplus1StandardPMCurrTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrTimeElapsed.setStatus('mandatory')
nplus1StandardPMCurrValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrValidIntervals.setStatus('mandatory')
nplus1StandardPMCurrLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayIDF.setStatus('mandatory')
nplus1StandardPMCurrLastDayGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayGroupNum.setStatus('mandatory')
nplus1StandardPMCurrPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrPSAC.setStatus('mandatory')
nplus1StandardPMCurrFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrFSRC.setStatus('mandatory')
nplus1StandardPMCurrPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrPSAD.setStatus('mandatory')
nplus1StandardPMCurrFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrFSRD.setStatus('mandatory')
nplus1StandardPMCurrLastDayPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayPSAC.setStatus('mandatory')
nplus1StandardPMCurrLastDayFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayFSRC.setStatus('mandatory')
nplus1StandardPMCurrLastDayPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayPSAD.setStatus('mandatory')
nplus1StandardPMCurrLastDayFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayFSRD.setStatus('mandatory')
nplus1StandardPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9), )
if mibBuilder.loadTexts: nplus1StandardPMIntervalTable.setStatus('mandatory')
nplus1StandardPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1StandardPMIntervalCarrierId"), (0, "CERAGON-MIB", "nplus1StandardPMIntervalIdx"))
if mibBuilder.loadTexts: nplus1StandardPMIntervalEntry.setStatus('mandatory')
nplus1StandardPMIntervalCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalCarrierId.setStatus('mandatory')
nplus1StandardPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalIdx.setStatus('mandatory')
nplus1StandardPMIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalIDF.setStatus('mandatory')
nplus1StandardPMIntervalGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalGroupNum.setStatus('mandatory')
nplus1StandardPMIntervalPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalPSAC.setStatus('mandatory')
nplus1StandardPMIntervalFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalFSRC.setStatus('mandatory')
nplus1StandardPMIntervalPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalPSAD.setStatus('mandatory')
nplus1StandardPMIntervalFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalFSRD.setStatus('mandatory')
nplus1StandardPMDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10), )
if mibBuilder.loadTexts: nplus1StandardPMDayTable.setStatus('mandatory')
nplus1StandardPMDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1StandardPMDayCarrierId"), (0, "CERAGON-MIB", "nplus1StandardPMDayIdx"))
if mibBuilder.loadTexts: nplus1StandardPMDayEntry.setStatus('mandatory')
nplus1StandardPMDayCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayCarrierId.setStatus('mandatory')
nplus1StandardPMDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayIdx.setStatus('mandatory')
nplus1StandardPMDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayIDF.setStatus('mandatory')
nplus1StandardPMDayGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayGroupNum.setStatus('mandatory')
nplus1StandardPMDayPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayPSAC.setStatus('mandatory')
nplus1StandardPMDayFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayFSRC.setStatus('mandatory')
nplus1StandardPMDayPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayPSAD.setStatus('mandatory')
nplus1StandardPMDayFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayFSRD.setStatus('mandatory')
gnSSM = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 4))
gnSSMCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1))
gnSSMCfgSSMMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgSSMMode.setStatus('mandatory')
gnSSMCfgPrimaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgPrimaryClockSource.setStatus('mandatory')
gnSSMCfgPrimaryClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgPrimaryClockQuality.setStatus('mandatory')
gnSSMCfgSecondaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgSecondaryClockSource.setStatus('mandatory')
gnSSMCfgSecondaryClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgSecondaryClockQuality.setStatus('mandatory')
gnSSMCfgClockUserCommand = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 2), ("switchToPrimaryClock", 3), ("switchToSecondaryClock", 4), ("switchToInternalClock", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgClockUserCommand.setStatus('mandatory')
gnSSMCfgClockOutputMute = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgClockOutputMute.setStatus('mandatory')
gnSSMStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2))
gnSSMStatStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatStatus.setStatus('mandatory')
gnSSMStatCurrentClock = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("primary", 2), ("secondary", 3), ("internal", 4), ("holdOver", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatCurrentClock.setStatus('mandatory')
gnSSMStatCurrentClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatCurrentClockQuality.setStatus('mandatory')
gnSSMStatClockUnitType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noClockUnit", 2), ("smc", 3), ("sec", 4), ("st3", 5), ("st3e", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatClockUnitType.setStatus('mandatory')
gnSSMStatHoldoverPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatHoldoverPeriod.setStatus('mandatory')
gnAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4))
gnAccessCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 1))
gnAccessCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1), )
if mibBuilder.loadTexts: gnAccessCfgTable.setStatus('mandatory')
gnAccessCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnAccessCfgEntry.setStatus('mandatory')
gnAccessCfgLongCableOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ds3ShortCable", 2), ("ds3LongCable", 3), ("t1From0to133ft", 4), ("t1From133to266ft", 5), ("t1From266to399ft", 6), ("t1From399to533ft", 7), ("t1From533to655ft", 8), ("anyLength", 9), ("t1FA640From0to110ft", 10), ("t1FA640From110to220ft", 11), ("t1FA640From220to330ft", 12), ("t1FA640From330to440ft", 13), ("t1FA640From440to550ft", 14))).clone('t1From0to133ft')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgLongCableOption.setStatus('mandatory')
gnAccessCfgLoopbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3), ("interfaceExterLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgLoopbackOption.setStatus('mandatory')
gnAccessCfgRunPrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("noOperation", 2), ("lineOnRadioOnRcvLine", 3), ("lineOnRadioOnRcvRadio", 4), ("lineOnRadioOffRcvLine", 5), ("lineOnRadioOffRcvRadio", 6), ("lineOffRadioOnRcvLine", 7), ("lineOffRadioOnRcvRadio", 8), ("lineOffRadioOffRcvLine", 9), ("lineOffRadioOffRcvRadio", 10), ("lineOnRadioOnRcvOff", 11), ("lineOffRadioOnRcvOff", 12), ("lineOnRadioOffRcvOff", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgRunPrbs.setStatus('mandatory')
gnAccessCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgEXCThresh.setStatus('mandatory')
gnAccessCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgSDThresh.setStatus('mandatory')
gnAccessCfgTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("sendAIS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgTest.setStatus('mandatory')
gnAccessCfgLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("ami", 2), ("b8zs", 3), ("hdb3", 4), ("b3zs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgLineCoding.setStatus('mandatory')
gnAccessStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 2))
gnAccessStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1), )
if mibBuilder.loadTexts: gnAccessStatTable.setStatus('mandatory')
gnAccessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnAccessStatEntry.setStatus('mandatory')
gnAccessStatInterfaceBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatInterfaceBer.setStatus('mandatory')
gnAccessStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatStatus.setStatus('mandatory')
gnAccessStatPrbsBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatPrbsBer.setStatus('mandatory')
gnAccessStatValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatValidIntervals.setStatus('mandatory')
gnFastEthernetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 3))
gnFastEthernetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1), )
if mibBuilder.loadTexts: gnFastEthernetCfgTable.setStatus('mandatory')
gnFastEthernetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetCfgEntry.setStatus('mandatory')
gnFastEthernetCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgAutoNegotiation.setStatus('mandatory')
gnFastEthernetCfgForceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tenBased", 2), ("hundredBased", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgForceSpeed.setStatus('mandatory')
gnFastEthernetCfgDynamicBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notActive", 2), ("dynamic", 3), ("leftPreferred", 4), ("vlanPriority", 5), ("ipPriority", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgDynamicBand.setStatus('mandatory')
gnFastEthernetCfgGigabitEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgGigabitEthernet.setStatus('mandatory')
gnFastEthernetCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("halfDuplex", 2), ("fullDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgDuplexMode.setStatus('mandatory')
gnFastEthernetCfgQueuingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("fixedPriority", 2), ("weightedFair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgQueuingScheme.setStatus('mandatory')
gnFastEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 4))
gnFastEthernetStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 4, 1), )
if mibBuilder.loadTexts: gnFastEthernetStatTable.setStatus('mandatory')
gnFastEthernetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetStatEntry.setStatus('mandatory')
gnFastEthernetStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetStatStatus.setStatus('mandatory')
gnPdhMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 5))
gnPdhMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1), )
if mibBuilder.loadTexts: gnPdhMonCurrTable.setStatus('mandatory')
gnPdhMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnPdhMonCurrEntry.setStatus('mandatory')
gnPdhMonCurrES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrES.setStatus('mandatory')
gnPdhMonCurrSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrSES.setStatus('mandatory')
gnPdhMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrBBE.setStatus('mandatory')
gnPdhMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrUAS.setStatus('mandatory')
gnPdhMonCurrCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrCV.setStatus('mandatory')
gnPdhMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayES.setStatus('mandatory')
gnPdhMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDaySES.setStatus('mandatory')
gnPdhMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayBBE.setStatus('mandatory')
gnPdhMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayUAS.setStatus('mandatory')
gnPdhMonCurrLastDayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayCV.setStatus('mandatory')
gnPdhMonCurrLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayIDF.setStatus('mandatory')
gnPdhMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2), )
if mibBuilder.loadTexts: gnPdhMonIntervalTable.setStatus('mandatory')
gnPdhMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnPdhMonIntervalIdx"))
if mibBuilder.loadTexts: gnPdhMonIntervalEntry.setStatus('mandatory')
gnPdhMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalIdx.setStatus('mandatory')
gnPdhMonIntervalES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalES.setStatus('mandatory')
gnPdhMonIntervalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalSES.setStatus('mandatory')
gnPdhMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalBBE.setStatus('mandatory')
gnPdhMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalUAS.setStatus('mandatory')
gnPdhMonIntervalCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalCV.setStatus('mandatory')
gnPdhMonIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalIDF.setStatus('mandatory')
gnPdhMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3), )
if mibBuilder.loadTexts: gnPdhMonDayTable.setStatus('mandatory')
gnPdhMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnPdhMonDayIdx"))
if mibBuilder.loadTexts: gnPdhMonDayEntry.setStatus('mandatory')
gnPdhMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayIdx.setStatus('mandatory')
gnPdhMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayES.setStatus('mandatory')
gnPdhMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDaySES.setStatus('mandatory')
gnPdhMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayBBE.setStatus('mandatory')
gnPdhMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayUAS.setStatus('mandatory')
gnPdhMonDayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayCV.setStatus('mandatory')
gnPdhMonDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayIDF.setStatus('mandatory')
gnFastEthernetMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 6))
gnFastEthernetMonPrivateTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1), )
if mibBuilder.loadTexts: gnFastEthernetMonPrivateTable.setStatus('mandatory')
gnFastEthernetMonPrivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetMonPrivateEntry.setStatus('mandatory')
gnFastEthernetMonPrivateAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonPrivateAlignmentErrors.setStatus('mandatory')
gnFastEthernetMonPrivateFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonPrivateFcsErrors.setStatus('mandatory')
gnFastEthernetMonPrivateFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonPrivateFrameTooLongs.setStatus('mandatory')
gnFastEthernetMonStdHiTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2), )
if mibBuilder.loadTexts: gnFastEthernetMonStdHiTable.setStatus('mandatory')
gnFastEthernetMonStdHiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetMonStdHiEntry.setStatus('mandatory')
gnFastEthernetMonStdHiInOctetsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInOctetsHC.setStatus('mandatory')
gnFastEthernetMonStdHiInUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInUcastPktsHC.setStatus('mandatory')
gnFastEthernetMonStdHiInNUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInNUcastPktsHC.setStatus('mandatory')
gnFastEthernetMonStdHiOutOctetsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutOctetsHC.setStatus('mandatory')
gnFastEthernetMonStdHiOutUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutUcastPktsHC.setStatus('mandatory')
gnFastEthernetMonStdHiOutNUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutNUcastPktsHC.setStatus('mandatory')
gnTrailCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 7))
gnTrailCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1), )
if mibBuilder.loadTexts: gnTrailCfgTable.setStatus('mandatory')
gnTrailCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnTrailCfgEntry.setStatus('mandatory')
gnTrailCfgTrailName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgTrailName.setStatus('mandatory')
gnTrailCfgProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("protected", 2), ("unprotected", 3))).clone('protected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgProtection.setStatus('mandatory')
gnTrailCfgLowPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgLowPathIndex.setStatus('mandatory')
gnTrailCfgLowPathSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgLowPathSide.setStatus('mandatory')
gnTrailCfgProtectionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("inhibit", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgProtectionOptions.setStatus('mandatory')
gnTrailCfgMismatchJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3), ("ignoreAlarm", 4))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgMismatchJ2.setStatus('mandatory')
gnTrailCfgTransmittedJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J2 J2 J2 J2 J2 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgTransmittedJ2.setStatus('mandatory')
gnTrailCfgExpectedJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J2 J2 J2 J2 J2 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgExpectedJ2.setStatus('mandatory')
gnTrailCfgReversionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("revertive", 2), ("nonRevertive", 3))).clone('nonRevertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgReversionMode.setStatus('mandatory')
gnTrailCfgProtectionUserCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("switchToProtection", 3), ("switchToWorking", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgProtectionUserCommand.setStatus('mandatory')
gnTrailCfgHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgHoldOffTime.setStatus('mandatory')
gnTrailCfgOscillationGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgOscillationGuardTime.setStatus('mandatory')
gnTrailCfgWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgWaitToRestoreTime.setStatus('mandatory')
gnTrailCfgSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgSignalLabelMismatch.setStatus('mandatory')
gnTrailCfgBERConsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAISDoPathProtection", 3), ("doPathProtection", 4))).clone('doPathProtection')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgBERConsAction.setStatus('mandatory')
gnTribCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 8))
gnTribCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1), )
if mibBuilder.loadTexts: gnTribCfgTable.setStatus('mandatory')
gnTribCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnTribCfgEntry.setStatus('mandatory')
gnTribCfgLowPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgLowPathIndex.setStatus('mandatory')
gnTribCfgLowPathSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgLowPathSide.setStatus('mandatory')
gnTribCfgProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("protected", 2), ("unprotected", 3))).clone('protected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgProtection.setStatus('mandatory')
gnTribCfgProtectionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("inhibit", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgProtectionOptions.setStatus('mandatory')
gnTribCfgReversionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("revertive", 2), ("nonRevertive", 3))).clone('nonRevertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgReversionMode.setStatus('mandatory')
gnTribCfgProtectionUserCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("switchToProtection", 3), ("switchToWorking", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgProtectionUserCommand.setStatus('mandatory')
gnTribCfgHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgHoldOffTime.setStatus('mandatory')
gnTribCfgOscillationGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgOscillationGuardTime.setStatus('mandatory')
gnTribCfgWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgWaitToRestoreTime.setStatus('mandatory')
gnTribCfgKLM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgKLM.setStatus('mandatory')
gnTrailPassThrough = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 9))
gnTrailPassThroughTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1), )
if mibBuilder.loadTexts: gnTrailPassThroughTable.setStatus('mandatory')
gnTrailPassThroughEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnTrailPassThroughIndex"))
if mibBuilder.loadTexts: gnTrailPassThroughEntry.setStatus('mandatory')
gnTrailPassThroughIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnTrailPassThroughIndex.setStatus('mandatory')
gnTrailPassThroughName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailPassThroughName.setStatus('mandatory')
gnGigabitEthernetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 10))
gnGigabitEthernetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1), )
if mibBuilder.loadTexts: gnGigabitEthernetCfgTable.setStatus('mandatory')
gnGigabitEthernetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnGigabitEthernetCfgEntry.setStatus('mandatory')
gnGigabitEthernetCfgPauseFrameGenerating = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgPauseFrameGenerating.setStatus('mandatory')
gnGigabitEthernetCfgMuteOnExcError = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnExcError.setStatus('mandatory')
gnGigabitEthernetCfgMuteOnSd = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnSd.setStatus('mandatory')
gnGigabitEthernetCfgMuteOnRemoteRadioFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnRemoteRadioFault.setStatus('mandatory')
gnGigabitEthernetCfgSpeedAndDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("autoNegotiation", 2), ("thousandBasedFullDuplex", 3), ("thousandBasedHalfDuplex", 4), ("hundredBasedFullDuplex", 5), ("hundredBasedHalfDuplex", 6), ("tenBasedFullDuplex", 7), ("tenBasedHalfDuplex", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSpeedAndDuplex.setStatus('mandatory')
gnGigabitEthernetCfgSchedulerPriorityOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("strict", 2), ("hrr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerPriorityOption.setStatus('mandatory')
gnGigabitEthernetCfgSchedulerQueue1Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17))).clone(namedValues=NamedValues(("strict", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue1Weight.setStatus('mandatory')
gnGigabitEthernetCfgSchedulerQueue2Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue2Weight.setStatus('mandatory')
gnGigabitEthernetCfgSchedulerQueue3Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue3Weight.setStatus('mandatory')
gnGigabitEthernetCfgSchedulerQueue4Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue4Weight.setStatus('mandatory')
gnGigabitEthernetCfgClassifierFirstPrioUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierFirstPrioUDP.setStatus('mandatory')
gnGigabitEthernetCfgClassifierPrioBitSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 2), ("externalOverhead", 3), ("vlan", 4), ("ip", 5), ("mpls", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierPrioBitSource.setStatus('mandatory')
gnGigabitEthernetCfgClassifierGroupMinVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupMinVlanId.setStatus('mandatory')
gnGigabitEthernetCfgClassifierGroupMaxVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupMaxVlanId.setStatus('mandatory')
gnGigabitEthernetCfgClassifierGroupVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 0), ("queue1", 1), ("queue2", 2), ("queue3", 3), ("queue4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupVlanPriority.setStatus('mandatory')
gnGigabitEthernetCfgClassifierGroupVlanSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupVlanSet.setStatus('mandatory')
gnGigabitEthernetCfgAcmMuteOnMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgAcmMuteOnMinConstellation.setStatus('mandatory')
gnGigabitEthernetCfgEnableAutomaticTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgEnableAutomaticTxMute.setStatus('mandatory')
gnGigabitEthernetCfgTrafficBISTAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgTrafficBISTAdmin.setStatus('mandatory')
gnGigabitEthernetCfgClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClearStatistics.setStatus('mandatory')
gnGigabitEthernetCfgPauseFrameForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgPauseFrameForwarding.setStatus('mandatory')
gnGigabitEthernetCfgPhyLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgPhyLoopback.setStatus('mandatory')
gnVlanEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 11))
gnVlanEthernetStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1), )
if mibBuilder.loadTexts: gnVlanEthernetStatTable.setStatus('mandatory')
gnVlanEthernetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnVlanEthernetStatGroupId"))
if mibBuilder.loadTexts: gnVlanEthernetStatEntry.setStatus('mandatory')
gnVlanEthernetStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatGroupId.setStatus('mandatory')
gnVlanEthernetStatMinVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatMinVlanId.setStatus('mandatory')
gnVlanEthernetStatMaxVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatMaxVlanId.setStatus('mandatory')
gnVlanEthernetStatVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("queue1", 1), ("queue2", 2), ("queue3", 3), ("queue4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatVlanPriority.setStatus('mandatory')
gnGigabitEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 12))
gnGigabitEthernetStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1), )
if mibBuilder.loadTexts: gnGigabitEthernetStatTable.setStatus('mandatory')
gnGigabitEthernetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnGigabitEthernetStatEntry.setStatus('mandatory')
gnGigabitEthernetStatBistErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatBistErrorSeconds.setStatus('mandatory')
gnGigabitEthernetStatSpeedAndDuplexSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatSpeedAndDuplexSupport.setStatus('mandatory')
gnGigabitEthernetStatValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatValidIntervals.setStatus('mandatory')
gnGigabitEthernetStatSpeedAndDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("thousandBasedFullDuplex", 3), ("thousandBasedHalfDuplex", 4), ("hundredBasedFullDuplex", 5), ("hundredBasedHalfDuplex", 6), ("tenBasedFullDuplex", 7), ("tenBasedHalfDuplex", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatSpeedAndDuplexMode.setStatus('mandatory')
gnGigabitEthernetMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 13))
gnGigabitEthernetMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1), )
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrTable.setStatus('mandatory')
gnGigabitEthernetMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrEntry.setStatus('mandatory')
gnGigabitEthernetMonCurrPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrPacketErrorRate.setStatus('mandatory')
gnGigabitEthernetMonCurrIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrIDF.setStatus('mandatory')
gnGigabitEthernetMonCurrDayPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrDayPacketErrorRate.setStatus('mandatory')
gnGigabitEthernetMonCurrDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrDayIDF.setStatus('mandatory')
gnGigabitEthernetMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2), )
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalTable.setStatus('mandatory')
gnGigabitEthernetMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnGigabitEthernetMonIntervalIdx"))
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalEntry.setStatus('mandatory')
gnGigabitEthernetMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalIdx.setStatus('mandatory')
gnGigabitEthernetMonIntervalPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalPacketErrorRate.setStatus('mandatory')
gnGigabitEthernetMonIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalIDF.setStatus('mandatory')
gnGigabitEthernetMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3), )
if mibBuilder.loadTexts: gnGigabitEthernetMonDayTable.setStatus('mandatory')
gnGigabitEthernetMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnGigabitEthernetMonDayIdx"))
if mibBuilder.loadTexts: gnGigabitEthernetMonDayEntry.setStatus('mandatory')
gnGigabitEthernetMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonDayIdx.setStatus('mandatory')
gnGigabitEthernetMonDayPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonDayPacketErrorRate.setStatus('mandatory')
gnGigabitEthernetMonDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonDayIDF.setStatus('mandatory')
gnEthStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 14))
gnEthStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1), )
if mibBuilder.loadTexts: gnEthStatisticTable.setStatus('mandatory')
gnEthStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnEthStatisticEntry.setStatus('mandatory')
gnEthStatisticIfInOctetsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticIfInOctetsMsb.setStatus('mandatory')
gnEthStatisticAFrameReceivedOkLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameReceivedOkLsb.setStatus('mandatory')
gnEthStatisticAFrameReceivedOkMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameReceivedOkMsb.setStatus('mandatory')
gnEthStatisticCRCAlignErrorsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticCRCAlignErrorsMsb.setStatus('mandatory')
gnEthStatisticIfInUcastPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticIfInUcastPktsMsb.setStatus('mandatory')
gnEthStatisticBroadcastPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticBroadcastPktsMsb.setStatus('mandatory')
gnEthStatisticMulticastPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticMulticastPktsMsb.setStatus('mandatory')
gnEthStatisticUndersizePktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticUndersizePktsMsb.setStatus('mandatory')
gnEthStatisticOversizePktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticOversizePktsMsb.setStatus('mandatory')
gnEthStatisticPkts64OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts64OctetMsb.setStatus('mandatory')
gnEthStatisticPkts65to127OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts65to127OctetMsb.setStatus('mandatory')
gnEthStatisticPkts128to255OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts128to255OctetMsb.setStatus('mandatory')
gnEthStatisticPkts256to511OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts256to511OctetMsb.setStatus('mandatory')
gnEthStatisticPkts512to1023OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts512to1023OctetMsb.setStatus('mandatory')
gnEthStatisticPkts1024to1518OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts1024to1518OctetMsb.setStatus('mandatory')
gnEthStatisticRadioTransmitFramesLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioTransmitFramesLsb.setStatus('mandatory')
gnEthStatisticRadioTransmitFramesMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioTransmitFramesMsb.setStatus('mandatory')
gnEthStatisticDroppedPacketsLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticDroppedPacketsLsb.setStatus('mandatory')
gnEthStatisticDroppedPacketsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticDroppedPacketsMsb.setStatus('mandatory')
gnEthStatisticRadioReceivedFramesLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedFramesLsb.setStatus('mandatory')
gnEthStatisticRadioReceivedFramesMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedFramesMsb.setStatus('mandatory')
gnEthStatisticRadioReceivedCrcFramesLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedCrcFramesLsb.setStatus('mandatory')
gnEthStatisticRadioReceivedCrcFramesMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedCrcFramesMsb.setStatus('mandatory')
gnEthStatisticRadioSyncUnlockEventsLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioSyncUnlockEventsLsb.setStatus('mandatory')
gnEthStatisticRadioSyncUnlockEventsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioSyncUnlockEventsMsb.setStatus('mandatory')
gnEthStatisticAFrameTransmittedOkLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameTransmittedOkLsb.setStatus('mandatory')
gnEthStatisticAFrameTransmittedOkMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameTransmittedOkMsb.setStatus('mandatory')
gnEthStatisticIfOutOctetsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticIfOutOctetsMsb.setStatus('mandatory')
gnEthStatisticEtherStatsPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticEtherStatsPktsMsb.setStatus('mandatory')
gnEthStatisticEtherStatsOctetsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticEtherStatsOctetsMsb.setStatus('mandatory')
gnLastDummy = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 9))
gnLastDummyParam = MibScalar((1, 3, 6, 1, 4, 1, 2281, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLastDummyParam.setStatus('mandatory')
gnODUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,1)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceODUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnIDUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,2)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXDeviceIDUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnSDHTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,3)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceRSTStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnACCESSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,4)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnODUTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,5)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceODUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnIDUTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,6)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXDeviceIDUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnSDHTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,7)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceRSTStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnAccessTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,8)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
gnLODUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,10)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODUSynthUnLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,11)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODUTxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,12)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODURxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,13)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,14)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLIDUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,15)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,16)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLModemFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,17)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLIDUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,18)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLoopbackOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,19)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLRemoteCommFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,20)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,21)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,22)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,23)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,24)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLEXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,25)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,26)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLRcvAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,27)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,28)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,29)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,30)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,31)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,32)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,33)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm1OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,34)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm2OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,35)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm3OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,36)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm4OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,37)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm5OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,38)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm6OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,39)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm7OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,40)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm8OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,41)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLSystemFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,42)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLTftpFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,43)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLInternalDownloadFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,44)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLIntralinkFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,45)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,46)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLProtectSwitchFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,47)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLProtectCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,48)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLHeartBeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,49)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLomTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,50)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLHitlessProblemTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,51)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLHitlessRadioLofTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,52)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLHitlessCableDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,53)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLPamTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,54)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLScmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,55)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLInvTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,56)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLInbandTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,57)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnWSLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,58)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnODUtoODUCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,59)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnNoSignalReceivedFromODUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,60)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnProtectionLockoutConfiguredTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,61)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUPowerFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,62)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFURxLevelPathOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,63)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUExtremeTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,64)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,65)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLowSignalToRFUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,66)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUXPICClockFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,67)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUDelayCalibrationFailure1Trap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,68)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUDelayCalibrationFailure2Trap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,69)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLSFPFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,70)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,71)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionSyncLosTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,72)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionKepTimout = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,73)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionSkTimerElapsed = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,74)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionPowerUpSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,75)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionConditionalTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,76)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionWillTurnOffOnNextRest = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,77)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionEventReport = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,78)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionTechCardWasDetected = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,79)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnAdminPasswordInDefaultState = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,80)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLinkGroupingProtectionFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,81)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLossOfProtectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,82)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnTempLicenseTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,83)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnMultiRadioProblemTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,84)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,110)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODUSynthLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,111)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODUTxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,112)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODURxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,113)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLODUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,114)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLIDUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,115)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,116)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLModemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,117)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLIDUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,118)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLoopbackOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,119)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLRemoteCommOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,120)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,121)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,122)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,123)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,124)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoEXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,125)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,126)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,127)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,128)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,129)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,130)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,131)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,132)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,133)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm1OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,134)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm2OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,135)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm3OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,136)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm4OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,137)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm5OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,138)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm6OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,139)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm7OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,140)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLExternalAlarm8OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,141)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLSystemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,142)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLTftpOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,143)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLInternalDownloadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,144)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLIntralinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,145)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLNoConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,146)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLProtectSwitchOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,147)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLProtectCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,148)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLLomOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,150)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLHitlessProblemOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,151)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLHitlessRadioLofOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,152)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLHitlessCableDisconnectOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,153)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLPamOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,154)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLScmOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,155)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLInvOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,156)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLInbandOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,157)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnWSNoLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,158)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnODUtoODUCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,159)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnSignalReceivedFromODUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,160)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnProtectionLockoutClearededTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,161)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUPowerFailureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,162)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFURxLevelPathOutOfRangeClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,163)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUExtremeTemperatureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,164)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUFanFailureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,165)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLowSignalToRFUClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,166)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUXPICClockFailureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,167)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUDelayCalibrationFailure1ClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,168)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRFUDelayCalibrationFailure2ClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,169)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLSFPOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,170)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionFaultClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,171)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionSyncLosClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,172)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionKepTimoutCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,173)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionSkTimerElapsedCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,174)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionPowerUpSelfTestFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,175)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionConditionalTestFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,176)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionWillTurnOffOnNextRestCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,177)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionEventReportCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,178)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnEncryptionTechCardWasDetectedCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,179)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnAdminPasswordInDefaultStateCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,180)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLinkGroupingProtectionFaultClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,181)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnLossOfProtectionClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,182)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnTempLicenseClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,183)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnMultiRadioProblemOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,184)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,210)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUSynthUnLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,211)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUTxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,212)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODURxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,213)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,214)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRIDUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,215)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,216)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRModemFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,217)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRIDUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,218)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLoopbackOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,219)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRRemoteCommFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,220)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,221)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,222)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,223)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,224)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnREXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,225)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,226)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,227)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,228)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,229)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,230)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,231)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,232)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,233)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm1OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,234)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm2OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,235)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm3OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,236)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm4OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,237)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm5OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,238)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm6OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,239)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm7OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,240)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm8OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,241)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRSystemFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,242)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRTftpFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,243)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRInternalDownloadFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,244)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRIntralinkFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,245)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,246)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRProtectSwitchFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,247)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRProtectCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,248)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRHeartBeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,249)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLomTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,250)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRHitlessRadioLofTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,252)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRHitlessCableDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,253)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,310)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUSynthLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,311)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUTxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,312)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODURxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,313)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRODUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,314)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRIDUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,315)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,316)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRModemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,317)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRIDUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,318)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLoopbackOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,319)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRRemoteCommOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,320)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,321)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,322)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,323)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,324)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoEXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,325)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,326)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,327)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,328)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,329)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,330)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,331)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,332)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,333)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm1OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,334)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm2OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,335)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm3OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,336)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm4OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,337)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm5OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,338)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm6OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,339)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm7OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,340)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRExternalAlarm8OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,341)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRSystemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,342)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRTftpOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,343)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRInternalDownloadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,344)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRIntralinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,345)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRNoConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,346)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRProtectCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,348)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRLomOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,350)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRHitlessRadioLofOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,352)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
gnRHitlessCableDisconnectOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,353)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
mibBuilder.exportSymbols("CERAGON-MIB", gnOduCfgMaxTxFreqNumber=gnOduCfgMaxTxFreqNumber, auxiliaryDrawerBoardHWVersion=auxiliaryDrawerBoardHWVersion, backplaneSlotMappingFloorId=backplaneSlotMappingFloorId, gnGigabitEthernetMonCurrEntry=gnGigabitEthernetMonCurrEntry, gnMdmStatXTxConstellation=gnMdmStatXTxConstellation, gnAgnInExternAlarmDevId=gnAgnInExternAlarmDevId, gnGenXMultiRateMultiConsSupport=gnGenXMultiRateMultiConsSupport, gnSoftwareVersionODU=gnSoftwareVersionODU, gnLExternalAlarm2OffTrap=gnLExternalAlarm2OffTrap, xcDrawerXCActivityRole=xcDrawerXCActivityRole, gnEthStatisticRadioReceivedCrcFramesLsb=gnEthStatisticRadioReceivedCrcFramesLsb, gnNeighborInBandEntry=gnNeighborInBandEntry, gnAgnFileTransferTransCmd=gnAgnFileTransferTransCmd, gnHptStatTable=gnHptStatTable, gnOduCfgXOduLoopSupport=gnOduCfgXOduLoopSupport, gnEowCfgEowLeftEnable=gnEowCfgEowLeftEnable, gnAgnFileTransferTftpTotalTimeOut=gnAgnFileTransferTftpTotalTimeOut, gnRExternalAlarm6OnTrap=gnRExternalAlarm6OnTrap, gnHptFarEndMonCurrLastDayBBE=gnHptFarEndMonCurrLastDayBBE, gnFastEthernetMonStdHiInUcastPktsHC=gnFastEthernetMonStdHiInUcastPktsHC, gnRstCfgTransparencyUnscrambled=gnRstCfgTransparencyUnscrambled, gnAgnLogFileLineBERCur=gnAgnLogFileLineBERCur, gnRNoLOFTrap=gnRNoLOFTrap, gnGigabitEthernetMonCurrDayPacketErrorRate=gnGigabitEthernetMonCurrDayPacketErrorRate, gnAgnInExternAlarmTable=gnAgnInExternAlarmTable, nplus1StandardPMIntervalPSAC=nplus1StandardPMIntervalPSAC, gnMdmCfgEntry=gnMdmCfgEntry, gnMuxCfgXTable=gnMuxCfgXTable, gnOduCfgXTransmitLevel=gnOduCfgXTransmitLevel, gnMstStatTransmitK2=gnMstStatTransmitK2, gnAgnInBandMngXEnableInbandChannels=gnAgnInBandMngXEnableInbandChannels, gnHitLessCfgRevertTime=gnHitLessCfgRevertTime, gnAgnInterLinkSide=gnAgnInterLinkSide, gnLinkGroupingProtectionFaultClearedTrap=gnLinkGroupingProtectionFaultClearedTrap, gnOduMonDayCombinedXIdx=gnOduMonDayCombinedXIdx, gnAgnLogFileXCSwitchLogAdmin=gnAgnLogFileXCSwitchLogAdmin, gnHptFarEndMonDaySES=gnHptFarEndMonDaySES, gnHptMonIntervalIdx=gnHptMonIntervalIdx, gnHptMonIntervalUAS=gnHptMonIntervalUAS, gnRSDTrap=gnRSDTrap, gnMstMonDayES=gnMstMonDayES, gnUcStatRightMaxRouteChannel=gnUcStatRightMaxRouteChannel, gnMdmAcmMonDayXId=gnMdmAcmMonDayXId, gnRstMonDayUAS=gnRstMonDayUAS, gnLLopTrap=gnLLopTrap, gnRODURxLevelOutOfRangeTrap=gnRODURxLevelOutOfRangeTrap, gnRModemFailTrap=gnRModemFailTrap, gnLptMonIntervalTable=gnLptMonIntervalTable, gnLTftpOkTrap=gnLTftpOkTrap, gnAgnInBandMngDefRoute=gnAgnInBandMngDefRoute, gnOduMonCurrXMaxTL=gnOduMonCurrXMaxTL, gnGigabitEthernetStatValidIntervals=gnGigabitEthernetStatValidIntervals, gnOduMonDayDiversityXMinRL=gnOduMonDayDiversityXMinRL, gnLossOfProtectionTrap=gnLossOfProtectionTrap, gnRFUFanFailureTrap=gnRFUFanFailureTrap, gnHptFarEndMonCurrEntry=gnHptFarEndMonCurrEntry, gnMdmCfgXMrmcConf=gnMdmCfgXMrmcConf, gnAccessStatStatus=gnAccessStatStatus, gnAgnInBandMngXChannelState=gnAgnInBandMngXChannelState, gnOduMonIntervalMaxRL=gnOduMonIntervalMaxRL, gnMstFarEndMonIntervalUAS=gnMstFarEndMonIntervalUAS, gnProtectionLockoutConfiguredTrap=gnProtectionLockoutConfiguredTrap, gnOduCfgXRxFreqNumLocalRemote=gnOduCfgXRxFreqNumLocalRemote, gnFastEthernetStatTable=gnFastEthernetStatTable, gnLInbandOkTrap=gnLInbandOkTrap, gnNeighborInBandIP=gnNeighborInBandIP, gnHitLessCfgSwitchLock=gnHitLessCfgSwitchLock, gnRstMonIntervalIdx=gnRstMonIntervalIdx, gnLptStatProtectionMode=gnLptStatProtectionMode, gnHptMonDayUAS=gnHptMonDayUAS, backplaneSlotMappingSubrackId=backplaneSlotMappingSubrackId, gnGenStatDeviceIDUStatus=gnGenStatDeviceIDUStatus, gnHptCfgSignalLabelMismatch=gnHptCfgSignalLabelMismatch, gnWscCfgEntry=gnWscCfgEntry, gnHitLessCfgSwitchEnable=gnHitLessCfgSwitchEnable, gnRstCfgTransparencyE1=gnRstCfgTransparencyE1, gnLNoTIMTrap=gnLNoTIMTrap, gnProtectCfgProtectionLockout=gnProtectCfgProtectionLockout, gnSoftwareVersionId=gnSoftwareVersionId, gnGigabitEthernetMonIntervalTable=gnGigabitEthernetMonIntervalTable, gnRExternalAlarm8OnTrap=gnRExternalAlarm8OnTrap, gnHitLessStatReceiverStatus=gnHitLessStatReceiverStatus, gnMdmAcmMonCurrXDayMaxConstellation=gnMdmAcmMonCurrXDayMaxConstellation, gnMultiRadioProblemTrap=gnMultiRadioProblemTrap, gnAgnOutRelayAlarmDevId=gnAgnOutRelayAlarmDevId, gnAgnSNMPCfgWriteCommunity=gnAgnSNMPCfgWriteCommunity, gnTribCfgTable=gnTribCfgTable, gnGigabitEthernetMonCurrPacketErrorRate=gnGigabitEthernetMonCurrPacketErrorRate, gnLLocTrap=gnLLocTrap, gnAgnLogFileUniqueId=gnAgnLogFileUniqueId, gnTribStmMspUserCommand=gnTribStmMspUserCommand, gnOduMonCurrCombinedXDayMinRL=gnOduMonCurrCombinedXDayMinRL, gnOduMonIntervalXTable=gnOduMonIntervalXTable, gnFastEthernetMon=gnFastEthernetMon, gnGigabitEthernetCfgPauseFrameForwarding=gnGigabitEthernetCfgPauseFrameForwarding, gnAgnLogFileOduPowerSupply=gnAgnLogFileOduPowerSupply, nplus1StandardPMIntervalFSRC=nplus1StandardPMIntervalFSRC, gnMstFarEndMonDaySES=gnMstFarEndMonDaySES, gnGeneralXEntry=gnGeneralXEntry, gnOduCfgXODUSerialNumber=gnOduCfgXODUSerialNumber, gnAgnInternalDownloadBlockCount=gnAgnInternalDownloadBlockCount, nplus1ProtectingSwitchToProtectingCommand=nplus1ProtectingSwitchToProtectingCommand, gnAgnInBandMngUnknownPackets=gnAgnInBandMngUnknownPackets, gnAgnNTPCfgAuthPublicKey=gnAgnNTPCfgAuthPublicKey, gnAgnMgrTable=gnAgnMgrTable, nplus1StandardPMCurrFSRC=nplus1StandardPMCurrFSRC, gnGenCfgDeviceTable=gnGenCfgDeviceTable, carrierProtectionServedByRemoteXC=carrierProtectionServedByRemoteXC, gnPdhMonCurrLastDayIDF=gnPdhMonCurrLastDayIDF, gnMdmAcmMonIntervalXId=gnMdmAcmMonIntervalXId, gnLConfMismatchTrap=gnLConfMismatchTrap, gnEow=gnEow, gnOduStatusXEntry=gnOduStatusXEntry, gnRstCfgLoopbackOption=gnRstCfgLoopbackOption, gnUcStatTable=gnUcStatTable, gnOduStatusXReceiveLevel=gnOduStatusXReceiveLevel, gnGenXSystemWorkTime=gnGenXSystemWorkTime, gnAgnMgrIP=gnAgnMgrIP, gnLinkGroups=gnLinkGroups, gnRSystemOkTrap=gnRSystemOkTrap, gnRNoLocTrap=gnRNoLocTrap, gnMuxStatXMuxFWVer=gnMuxStatXMuxFWVer, gnTribStmMspProtectRole=gnTribStmMspProtectRole, xcDrawerResetXCBoard=xcDrawerResetXCBoard, gnMstFarEndMonIntervalBBE=gnMstFarEndMonIntervalBBE, gnLptMonDayIdx=gnLptMonDayIdx, gnTribStmProtectStat=gnTribStmProtectStat, gnRODUExtremeTempTrap=gnRODUExtremeTempTrap, nplus1StandardPMDayIdx=nplus1StandardPMDayIdx, backplaneSlotMappingDrawerId=backplaneSlotMappingDrawerId, gnAgnLogFileSource=gnAgnLogFileSource, gnAgnLogFileOduCelsiusTemp=gnAgnLogFileOduCelsiusTemp, gnEncryptionFaultClearedTrap=gnEncryptionFaultClearedTrap, gnLIDUPowerFailTrap=gnLIDUPowerFailTrap, gnApplicFileType=gnApplicFileType, gnMstStatReceivedK1=gnMstStatReceivedK1, gnSoftwareDrawerVersionODU=gnSoftwareDrawerVersionODU, gnMdmAcmMonCurrXDayMinConstellation=gnMdmAcmMonCurrXDayMinConstellation, gnLptMonDayTable=gnLptMonDayTable, gnRExternalAlarm8OffTrap=gnRExternalAlarm8OffTrap, gnAgnNTPCfgAuthSecretKey=gnAgnNTPCfgAuthSecretKey, gnOduMonDayDiversityXId=gnOduMonDayDiversityXId, gnGenCfgDeviceEntry=gnGenCfgDeviceEntry, gnLNoUnExpTrap=gnLNoUnExpTrap, gnLowSignalToRFUTrap=gnLowSignalToRFUTrap, gnTrailCfgLowPathSide=gnTrailCfgLowPathSide, gnRFUXPICClockFailureTrap=gnRFUXPICClockFailureTrap, gnOduMonDayCombinedXEntry=gnOduMonDayCombinedXEntry, gnPdhMonCurrES=gnPdhMonCurrES, gnAgnLogFileText=gnAgnLogFileText, gnLptMonDayEntry=gnLptMonDayEntry, gnAgnInternalDownloadFileSizeInBytes=gnAgnInternalDownloadFileSizeInBytes, gnPdhMonIntervalES=gnPdhMonIntervalES, gnTrailCfgSignalLabelMismatch=gnTrailCfgSignalLabelMismatch, nplus1StandardPMDayPSAD=nplus1StandardPMDayPSAD, gnNeighborIpRemoteType=gnNeighborIpRemoteType, gnOduCfgXEntry=gnOduCfgXEntry, gnRExternalAlarm2OffTrap=gnRExternalAlarm2OffTrap, gnOduMonCurrXEntry=gnOduMonCurrXEntry, gnRstMonDayTable=gnRstMonDayTable, gnGenXAesEnable=gnGenXAesEnable, gnGigabitEthernetCfgSchedulerQueue2Weight=gnGigabitEthernetCfgSchedulerQueue2Weight, gnMdmStatXAcmSignalValid=gnMdmStatXAcmSignalValid, gnEncryptionTechCardWasDetected=gnEncryptionTechCardWasDetected, gnOduMonDayMinRL=gnOduMonDayMinRL, gnOduMonDayDiversityXIdx=gnOduMonDayDiversityXIdx, gnHitLessStatEventCounter=gnHitLessStatEventCounter, gnGigabitEthernetStat=gnGigabitEthernetStat, gnLptStatReceivedSignalLabel=gnLptStatReceivedSignalLabel, gnMdmStatEntry=gnMdmStatEntry, membersEntry=membersEntry, gnGigabitEthernetCfgMuteOnRemoteRadioFault=gnGigabitEthernetCfgMuteOnRemoteRadioFault, gnOduMonDayXTLThresh1Exceed=gnOduMonDayXTLThresh1Exceed, gnLptMonDayUAS=gnLptMonDayUAS, gnWscCfgId=gnWscCfgId, gnFastEthernetCfgGigabitEthernet=gnFastEthernetCfgGigabitEthernet, gnAgnCurrentAlarmTrapID=gnAgnCurrentAlarmTrapID, gnAccessStat=gnAccessStat, gnRRemoteCommOkTrap=gnRRemoteCommOkTrap, gnHitLessStatAlarmStatus=gnHitLessStatAlarmStatus, gnDiskUsedspace=gnDiskUsedspace, gnTrailCfgProtectionOptions=gnTrailCfgProtectionOptions, gnGenXMultiRateMultiConsConf=gnGenXMultiRateMultiConsConf, gnApplicFileCrcSupport=gnApplicFileCrcSupport, gnEncryptionFaultTrap=gnEncryptionFaultTrap, gnWscStatTable=gnWscStatTable, standardProtectionEntry=standardProtectionEntry, clusterSubRackNum=clusterSubRackNum, gnGenIdcCfgAlarmSeverity=gnGenIdcCfgAlarmSeverity, gnOduMonCurrDayMaxTL=gnOduMonCurrDayMaxTL, gnRExternalAlarm4OffTrap=gnRExternalAlarm4OffTrap, gnGenXAlarmSeverity=gnGenXAlarmSeverity, gnWscCfgEnable=gnWscCfgEnable, gnOduMonDayXMaxXpi=gnOduMonDayXMaxXpi, gnAuxGeneralSyncIdcDataBase=gnAuxGeneralSyncIdcDataBase, gnLptStatTable=gnLptStatTable, gnGenCfgHeartbeatPeriod=gnGenCfgHeartbeatPeriod, gnAgnFileTransfertFtpStatus=gnAgnFileTransfertFtpStatus, nplus1StandardPMCurrEntry=nplus1StandardPMCurrEntry, gnFastEthernetMonStdHiTable=gnFastEthernetMonStdHiTable, gnHptFarEndMonDayES=gnHptFarEndMonDayES, gnTribCfgReversionMode=gnTribCfgReversionMode, gnHptMonCurrLastDayUAS=gnHptMonCurrLastDayUAS, gnPdhMonDayUAS=gnPdhMonDayUAS, gnAgnSNMPCfg=gnAgnSNMPCfg, gnGenStatInternalCommunication=gnGenStatInternalCommunication, gnRLomOkTrap=gnRLomOkTrap, gnEthStatisticEtherStatsOctetsMsb=gnEthStatisticEtherStatsOctetsMsb, gnRstCfgTransmittedJ0=gnRstCfgTransmittedJ0, auxiliaryDrawerOrderWireCascading=auxiliaryDrawerOrderWireCascading, gnOduMonCurrDiversityXMaxRL=gnOduMonCurrDiversityXMaxRL, gnAgnLogFileDeviceCelsiusTemp=gnAgnLogFileDeviceCelsiusTemp, gnOduMonIntervalXXpiThreshExceed=gnOduMonIntervalXXpiThreshExceed, gnEthStatisticPkts1024to1518OctetMsb=gnEthStatisticPkts1024to1518OctetMsb, gnOduCfgForceRmtMaxTx=gnOduCfgForceRmtMaxTx, gnLExternalAlarm7OnTrap=gnLExternalAlarm7OnTrap, gnWscCfgType=gnWscCfgType, gnGigabitEthernetCfgClassifierGroupVlanPriority=gnGigabitEthernetCfgClassifierGroupVlanPriority, gnEthStatisticEtherStatsPktsMsb=gnEthStatisticEtherStatsPktsMsb, gnRNoUnExpTrap=gnRNoUnExpTrap, gnOduStatusPowerSupply=gnOduStatusPowerSupply, nplus1StandardPMCurrLastDayFSRD=nplus1StandardPMCurrLastDayFSRD, gnMdmAcmMonCurrXTable=gnMdmAcmMonCurrXTable, gnFastEthernetMonStdHiInNUcastPktsHC=gnFastEthernetMonStdHiInNUcastPktsHC, gnGenStatDeviceCelsiusTemp=gnGenStatDeviceCelsiusTemp, auxiliaryDrawerLedsStatus=auxiliaryDrawerLedsStatus, gnMstStatReceivedK2=gnMstStatReceivedK2, gnGigabitEthernetCfgEnableAutomaticTxMute=gnGigabitEthernetCfgEnableAutomaticTxMute, gnGenCfgWaySideConnector=gnGenCfgWaySideConnector, gnMstFarEndMonCurrLastDaySES=gnMstFarEndMonCurrLastDaySES, gnRODUSynthUnLockTrap=gnRODUSynthUnLockTrap, gnWscStatId=gnWscStatId, gnOduCfgMUTEStatus=gnOduCfgMUTEStatus, gnPdhMonCurrLastDayES=gnPdhMonCurrLastDayES, gnLHitlessProblemOKTrap=gnLHitlessProblemOKTrap, gnProtectCfgExtInSwitch=gnProtectCfgExtInSwitch, gnMdmClearBC=gnMdmClearBC, gnMdmStatXRemoteConnection=gnMdmStatXRemoteConnection, gnMuxStatXNumOfIfOnClass3=gnMuxStatXNumOfIfOnClass3, gnMdmCfgXLinkId=gnMdmCfgXLinkId, gnSSMStatCurrentClockQuality=gnSSMStatCurrentClockQuality, gnLIDUNormalTempTrap=gnLIDUNormalTempTrap, gnMuxCfgXHwReset=gnMuxCfgXHwReset, gnOduStatusTransmitLevel=gnOduStatusTransmitLevel, gnHptStatEntry=gnHptStatEntry, gnGenIdcStatMMCCardStatus=gnGenIdcStatMMCCardStatus, primeIDC=primeIDC, gnAgnOutRelayAlarmType=gnAgnOutRelayAlarmType, gnEncryptionConditionalTestFailCleared=gnEncryptionConditionalTestFailCleared, gnVlanEthernetStat=gnVlanEthernetStat, gnLptStatStatus=gnLptStatStatus, gnMuxStatXMuxFWPostVer=gnMuxStatXMuxFWPostVer, standardProtectionHighPrioProtectionTh=standardProtectionHighPrioProtectionTh, gnLptFarEndMonIntervalTable=gnLptFarEndMonIntervalTable)
mibBuilder.exportSymbols("CERAGON-MIB", gnOduMonCurrCombinedXTable=gnOduMonCurrCombinedXTable, gnLProtectSwitchFaultTrap=gnLProtectSwitchFaultTrap, gnHptFarEndMonCurrBBE=gnHptFarEndMonCurrBBE, gnMstStatTransmitS1=gnMstStatTransmitS1, gnSoftwareVersionMUX=gnSoftwareVersionMUX, gnRstCfgRstSDThresh=gnRstCfgRstSDThresh, gnHptFarEndMonIntervalUAS=gnHptFarEndMonIntervalUAS, gnApplicFileDownloadDate=gnApplicFileDownloadDate, gnOduCfgXMUTEStatus=gnOduCfgXMUTEStatus, gnFastEthernetMonStdHiOutNUcastPktsHC=gnFastEthernetMonStdHiOutNUcastPktsHC, gnGigabitEthernetMonIntervalIDF=gnGigabitEthernetMonIntervalIDF, gnFastEthernetMonPrivateFrameTooLongs=gnFastEthernetMonPrivateFrameTooLongs, gnMuxStatXEntry=gnMuxStatXEntry, gnRHitlessRadioLofOKTrap=gnRHitlessRadioLofOKTrap, gnEowCfgEowRightEnable=gnEowCfgEowRightEnable, gnOduMonDayCombinedXMaxRL=gnOduMonDayCombinedXMaxRL, gnGigabitEthernetCfgMuteOnExcError=gnGigabitEthernetCfgMuteOnExcError, gnLODUPowerFailTrap=gnLODUPowerFailTrap, gnOduMonDayIdx=gnOduMonDayIdx, gnLScmTrap=gnLScmTrap, gnLExternalAlarm4OnTrap=gnLExternalAlarm4OnTrap, gnHptCfgEntry=gnHptCfgEntry, gnLInvOkTrap=gnLInvOkTrap, gnOduCfgXTxFreqNumLocalRemote=gnOduCfgXTxFreqNumLocalRemote, gnAgnMgrTrapPort=gnAgnMgrTrapPort, gnAgnCurrentAlarmText=gnAgnCurrentAlarmText, standardProtectionRevertiveSwitchTimeOut=standardProtectionRevertiveSwitchTimeOut, gnOduMonCurrDiversityXTable=gnOduMonCurrDiversityXTable, gnOduMonIntervalCombinedXMaxRL=gnOduMonIntervalCombinedXMaxRL, gnOduCfgXDelayCalibrationOperation=gnOduCfgXDelayCalibrationOperation, gnAuxGeneralEntry=gnAuxGeneralEntry, primeIDCAutoInternalClockDistribution=primeIDCAutoInternalClockDistribution, gnApplicFileCreateDate=gnApplicFileCreateDate, gnRstMonCurrUAS=gnRstMonCurrUAS, gnOduMonIntervalDiversityXMinRL=gnOduMonIntervalDiversityXMinRL, gnOduMonIntervalTLThresh1Exceed=gnOduMonIntervalTLThresh1Exceed, gnProtectCfgOption=gnProtectCfgOption, gnMdmAcmStatXId=gnMdmAcmStatXId, gnOduCfgTransmitLevel=gnOduCfgTransmitLevel, xcDrawerSerialNumber=xcDrawerSerialNumber, gnEthStatisticRadioSyncUnlockEventsMsb=gnEthStatisticRadioSyncUnlockEventsMsb, gnProtectCfgBERSwitch=gnProtectCfgBERSwitch, gnFastEthernetMonStdHiOutUcastPktsHC=gnFastEthernetMonStdHiOutUcastPktsHC, membersGroupId=membersGroupId, gnLptMonCurrTable=gnLptMonCurrTable, gnMdmAcmMonDayXIdx=gnMdmAcmMonDayXIdx, gnPdhMonDayCV=gnPdhMonDayCV, gnAuxGeneral=gnAuxGeneral, gnMdmAcmStatXQamId=gnMdmAcmStatXQamId, gnMdmStatXEntry=gnMdmStatXEntry, gnGenIdcCfgSlipSpeed=gnGenIdcCfgSlipSpeed, gnMdmStatXDefectedBlocks=gnMdmStatXDefectedBlocks, gnGenStandardOrg=gnGenStandardOrg, gnOduMonCurrXDayTLThresh1Exceed=gnOduMonCurrXDayTLThresh1Exceed, gnAgnLogFileRadioBERCur=gnAgnLogFileRadioBERCur, gnOduMonitorX=gnOduMonitorX, gnRNoUnqTrap=gnRNoUnqTrap, gnRFUPowerFailureTrap=gnRFUPowerFailureTrap, gnNeighborIpAddress=gnNeighborIpAddress, gnOduStatusXTable=gnOduStatusXTable, gnHptMonCurrUAS=gnHptMonCurrUAS, gnEncryptionKepTimout=gnEncryptionKepTimout, gnRstCfgRSTAISMode=gnRstCfgRSTAISMode, gnMdmCfgXAcmMaximumConstellation=gnMdmCfgXAcmMaximumConstellation, gnGenCfgAlarmText=gnGenCfgAlarmText, gnSSMStatCurrentClock=gnSSMStatCurrentClock, gnGigabitEthernetCfg=gnGigabitEthernetCfg, gnMdmStatXAcmValidIntervals=gnMdmStatXAcmValidIntervals, gnAgnPrvt=gnAgnPrvt, gnGenIdcStatId=gnGenIdcStatId, gnLptCfgTable=gnLptCfgTable, gnOduCfgRLPerfMonThresh2=gnOduCfgRLPerfMonThresh2, gnEncryptionPowerUpSelfTestFailCleared=gnEncryptionPowerUpSelfTestFailCleared, gnMdmAcmMonIntervalXMaxConstellation=gnMdmAcmMonIntervalXMaxConstellation, gnGenMrmcXBitRate=gnGenMrmcXBitRate, gnPdhMonCurrLastDaySES=gnPdhMonCurrLastDaySES, gnWSNoLOSTrap=gnWSNoLOSTrap, gnMdmStatXTable=gnMdmStatXTable, gnProtectCfgSdBERSwitch=gnProtectCfgSdBERSwitch, gnLHitlessProblemTrap=gnLHitlessProblemTrap, gnLptFarEndMonDayES=gnLptFarEndMonDayES, gnGenIdcCfgResetPerfMon=gnGenIdcCfgResetPerfMon, gnAgnInBandMngNetworkId=gnAgnInBandMngNetworkId, gnRUnqTrap=gnRUnqTrap, gnLNoLopTrap=gnLNoLopTrap, gnGenCarrierXResetPerfMon=gnGenCarrierXResetPerfMon, gnMstFarEndMonCurrLastDayES=gnMstFarEndMonCurrLastDayES, gnLptFarEndMonDayTable=gnLptFarEndMonDayTable, gnGenXRemoteConnection=gnGenXRemoteConnection, gnRAisTrap=gnRAisTrap, gnTrailCfgReversionMode=gnTrailCfgReversionMode, gnRConfMismatchTrap=gnRConfMismatchTrap, gnEowCfgId=gnEowCfgId, gnRTftpOkTrap=gnRTftpOkTrap, gnOduMonCurrMinRL=gnOduMonCurrMinRL, gnOduCfgXDelayCalibrationWgType=gnOduCfgXDelayCalibrationWgType, gnGenCfgSlipSpeed=gnGenCfgSlipSpeed, gnGenProtocolType=gnGenProtocolType, gnAgnCurrentAlarmOrigin=gnAgnCurrentAlarmOrigin, gnAgnInterLinkSource=gnAgnInterLinkSource, gnOduMonCurrXDayMinTL=gnOduMonCurrXDayMinTL, gnOduMonIntervalDiversityXEntry=gnOduMonIntervalDiversityXEntry, gnLLOFTrap=gnLLOFTrap, gnGenInterLenLocalRemote=gnGenInterLenLocalRemote, gnEncryptionSyncLosClearedTrap=gnEncryptionSyncLosClearedTrap, gnGenIdcStatIduPosition=gnGenIdcStatIduPosition, gnLODUSynthUnLockTrap=gnLODUSynthUnLockTrap, gnOduMonCurrRLThresh2Exceed=gnOduMonCurrRLThresh2Exceed, gnGenXActNumOfInterfaceOnClass2=gnGenXActNumOfInterfaceOnClass2, gnAgnInExternAlarmIndex=gnAgnInExternAlarmIndex, gnProtectXMultiRadioOhRadioSource=gnProtectXMultiRadioOhRadioSource, gnAccessCfgEXCThresh=gnAccessCfgEXCThresh, gnLptFarEndMonCurrLastDayUAS=gnLptFarEndMonCurrLastDayUAS, gnUcCfgLoopback=gnUcCfgLoopback, gnLowSignalToRFUClearedTrap=gnLowSignalToRFUClearedTrap, addressesPeerIPId=addressesPeerIPId, gnSSMStatHoldoverPeriod=gnSSMStatHoldoverPeriod, gnAgnInExternAlarmEnable=gnAgnInExternAlarmEnable, nplus1StandardPMDayCarrierId=nplus1StandardPMDayCarrierId, gnMdmAcmMonDayXMinConstellation=gnMdmAcmMonDayXMinConstellation, gnLODURxLevelOutOfRangeTrap=gnLODURxLevelOutOfRangeTrap, membersTable=membersTable, gnGigabitEthernetCfgClassifierGroupMaxVlanId=gnGigabitEthernetCfgClassifierGroupMaxVlanId, gnOduMonDayXTable=gnOduMonDayXTable, gnOduMonDayCombinedXRLThresh1Exceed=gnOduMonDayCombinedXRLThresh1Exceed, gnGenTxFreqNumLocalRemote=gnGenTxFreqNumLocalRemote, gnGenCarrierXSyncIdcDataBase=gnGenCarrierXSyncIdcDataBase, gnSSMCfgClockUserCommand=gnSSMCfgClockUserCommand, gnOduCfgXMaxTxLevel=gnOduCfgXMaxTxLevel, gnOduStatusXFahrenheitTemp=gnOduStatusXFahrenheitTemp, gnLODUNormalTempTrap=gnLODUNormalTempTrap, xcDrawerXCId=xcDrawerXCId, standardProtectionSwitchOnEarlyWarning=standardProtectionSwitchOnEarlyWarning, gnGigabitEthernetCfgTable=gnGigabitEthernetCfgTable, gnSDHTrap=gnSDHTrap, gnGenIdcCfgEntry=gnGenIdcCfgEntry, gnAgnInBandMngEthernetIp=gnAgnInBandMngEthernetIp, gnAux=gnAux, gnOduMonCurrTable=gnOduMonCurrTable, gnFastEthernetMonStdHiOutOctetsHC=gnFastEthernetMonStdHiOutOctetsHC, gnOduCfgXRLPerfMonThresh2=gnOduCfgXRLPerfMonThresh2, gnPdhMonCurrBBE=gnPdhMonCurrBBE, gnEthStatisticPkts128to255OctetMsb=gnEthStatisticPkts128to255OctetMsb, gnRExternalAlarm7OnTrap=gnRExternalAlarm7OnTrap, gnRExternalAlarm6OffTrap=gnRExternalAlarm6OffTrap, gnLExternalAlarm1OffTrap=gnLExternalAlarm1OffTrap, gnRstMonDayEntry=gnRstMonDayEntry, gnMdmAcmMonDayXEntry=gnMdmAcmMonDayXEntry, gnLLomOkTrap=gnLLomOkTrap, gnAgnLogFileTable=gnAgnLogFileTable, gnHptFarEndMonIntervalEntry=gnHptFarEndMonIntervalEntry, gnGigabitEthernetCfgMuteOnSd=gnGigabitEthernetCfgMuteOnSd, gnRODUNormalTempTrap=gnRODUNormalTempTrap, gnOduMonCurrDiversityXId=gnOduMonCurrDiversityXId, gnOduStatusXPowerSupply=gnOduStatusXPowerSupply, gnEncryptionWillTurnOffOnNextRestCleared=gnEncryptionWillTurnOffOnNextRestCleared, gnLRemoteCommFaultTrap=gnLRemoteCommFaultTrap, linkGroupingGroupName=linkGroupingGroupName, gnLNoSlmTrap=gnLNoSlmTrap, gnOduCfgXTLPerfMonThresh1=gnOduCfgXTLPerfMonThresh1, gnTribStmMspConnect=gnTribStmMspConnect, gnRHitlessCableDisconnectOKTrap=gnRHitlessCableDisconnectOKTrap, gnGenXMUXSerialNumber=gnGenXMUXSerialNumber, gnAdminPasswordInDefaultState=gnAdminPasswordInDefaultState, gnOduMonCurrXXpi=gnOduMonCurrXXpi, gnGenIdcStatEntry=gnGenIdcStatEntry, gnGigabitEthernetStatBistErrorSeconds=gnGigabitEthernetStatBistErrorSeconds, gnHptStatReceivedSignalLabel=gnHptStatReceivedSignalLabel, carrierProtectionXCId=carrierProtectionXCId, gnHptFarEndMonIntervalTable=gnHptFarEndMonIntervalTable, gnAgnInExternAlarmEntry=gnAgnInExternAlarmEntry, gnAgnCurrentAlarmEntry=gnAgnCurrentAlarmEntry, gnHptMonCurrLastDaySES=gnHptMonCurrLastDaySES, gnOduMonIntervalDiversityXRLThresh2Exceed=gnOduMonIntervalDiversityXRLThresh2Exceed, gnOduMonIntervalXMaxXpi=gnOduMonIntervalXMaxXpi, gnPdhMonCurrTable=gnPdhMonCurrTable, gnHptFarEndMonCurrUAS=gnHptFarEndMonCurrUAS, gnLHitlessCableDisconnectOKTrap=gnLHitlessCableDisconnectOKTrap, gnGenCfgProductType=gnGenCfgProductType, gnOduMonDayEntry=gnOduMonDayEntry, gnTrailCfgProtection=gnTrailCfgProtection, gnAgnLogFileDeviceIDUStatus=gnAgnLogFileDeviceIDUStatus, gnSoftwareVersionMrmcPostResetVer=gnSoftwareVersionMrmcPostResetVer, gnLptFarEndMonCurrBBE=gnLptFarEndMonCurrBBE, gnGenTxFreqLocalRemote=gnGenTxFreqLocalRemote, nplus1StandardPMDayEntry=nplus1StandardPMDayEntry, gnGenRealTimeandDate=gnGenRealTimeandDate, carrierProtectionEntry=carrierProtectionEntry, gnAgnMgrSeverityFilter=gnAgnMgrSeverityFilter, gnLptFarEndMonCurrUAS=gnLptFarEndMonCurrUAS, gnWscStatEntry=gnWscStatEntry, gnAgnLogFileOduReceiveLevel=gnAgnLogFileOduReceiveLevel, gnRstMonIntervalIDF=gnRstMonIntervalIDF, gnGenIdcCfgSlipModemConnection=gnGenIdcCfgSlipModemConnection, gnRstMonCurrBBE=gnRstMonCurrBBE, gnMdmStatXModemType=gnMdmStatXModemType, gnHptFarEndMonCurrLastDayUAS=gnHptFarEndMonCurrLastDayUAS, gnRIDUPowerFailTrap=gnRIDUPowerFailTrap, gnMstFarEndMonDayUAS=gnMstFarEndMonDayUAS, gnOduMonDayRLThresh1Exceed=gnOduMonDayRLThresh1Exceed, gnNeighborIpDetectMode=gnNeighborIpDetectMode, gnLLomTrap=gnLLomTrap, gnGenRadioSide=gnGenRadioSide, gnUcCfgType=gnUcCfgType, gnAgnFileTransferPassword=gnAgnFileTransferPassword, gnOduMonCurrEntry=gnOduMonCurrEntry, gnOduMonIntervalDiversityXTable=gnOduMonIntervalDiversityXTable, gnSoftwareVersionIDU=gnSoftwareVersionIDU, gnMstMonDayBBE=gnMstMonDayBBE, gnRFURxLevelPathOutOfRangeTrap=gnRFURxLevelPathOutOfRangeTrap, gnOduStatusXIfcSupported=gnOduStatusXIfcSupported, gnHptMonDayEntry=gnHptMonDayEntry, gnAgnLogFileLastDemodBlocksCorrected=gnAgnLogFileLastDemodBlocksCorrected, gnMdmStatXModemFWVer=gnMdmStatXModemFWVer, gnOduCfgTLPerfMonThresh1=gnOduCfgTLPerfMonThresh1, gnGenXActNumOfInterfaceOnClass3=gnGenXActNumOfInterfaceOnClass3, nplus1StandardPMDayTable=nplus1StandardPMDayTable, xcDrawerXCSelfTestResult=xcDrawerXCSelfTestResult, nplus1StandardPMIntervalFSRD=nplus1StandardPMIntervalFSRD, gnMstMonIntervalIdx=gnMstMonIntervalIdx, gnAgnInBandMngXChannelId=gnAgnInBandMngXChannelId, gnAgnLogFileHitlessSwitchLogAdmin=gnAgnLogFileHitlessSwitchLogAdmin, protectionGroupId=protectionGroupId, gnRUnExpTrap=gnRUnExpTrap, gnSoftwareVersionBootFlashVer=gnSoftwareVersionBootFlashVer, gnSoftwareDrawerVersionMUXPostResetVersion=gnSoftwareDrawerVersionMUXPostResetVersion, gnAccessStatTable=gnAccessStatTable, gnOduCfgMinRxFreqNumber=gnOduCfgMinRxFreqNumber, nplus1StandardPMCurrPSAD=nplus1StandardPMCurrPSAD, gnHptStatCurrentBer=gnHptStatCurrentBer, gnMstMonIntervalTable=gnMstMonIntervalTable, gnGenCfgTrapSeverity=gnGenCfgTrapSeverity, gnGenIdcCfgTrapOption=gnGenIdcCfgTrapOption, gnAgnLogFileInternalCommunication=gnAgnLogFileInternalCommunication, gnApplicFileTable=gnApplicFileTable, gnHitLessCfgId=gnHitLessCfgId, xcDrawerBoardPostResetFWVersion=xcDrawerBoardPostResetFWVersion, gnOduMonCurrXTLThresh1Exceed=gnOduMonCurrXTLThresh1Exceed, gnTempLicenseTrap=gnTempLicenseTrap, gnSoftwareVersionWSAlteraVer=gnSoftwareVersionWSAlteraVer, gnMstStatTransmitK1=gnMstStatTransmitK1, gnHptFarEndMonCurrTable=gnHptFarEndMonCurrTable, gnGigabitEthernetCfgPauseFrameGenerating=gnGigabitEthernetCfgPauseFrameGenerating, gnGenCfgLeftMediumConnector=gnGenCfgLeftMediumConnector, gnFastEthernetMonPrivateEntry=gnFastEthernetMonPrivateEntry, gnRFUDelayCalibrationFailure1ClearedTrap=gnRFUDelayCalibrationFailure1ClearedTrap, gnGenCfgGetRemoteData=gnGenCfgGetRemoteData, nplus1ProtectingXCProtectionFraming=nplus1ProtectingXCProtectionFraming, gnLNoTestRunningTrap=gnLNoTestRunningTrap, gnAgnFileTransferUserName=gnAgnFileTransferUserName, gnProtectCfgSwitchRequest=gnProtectCfgSwitchRequest, gnPdhMonDayEntry=gnPdhMonDayEntry, gnAgnFileTransferIDCVersionControl=gnAgnFileTransferIDCVersionControl, gnGenDrawerXInternalCommunication=gnGenDrawerXInternalCommunication)
mibBuilder.exportSymbols("CERAGON-MIB", gnRNoEXCTrap=gnRNoEXCTrap, auxiliaryDrawer=auxiliaryDrawer, gnSoftwareVersionAcmLutVer=gnSoftwareVersionAcmLutVer, gnAgnInBandMngLineMode=gnAgnInBandMngLineMode, gnLastDummy=gnLastDummy, gnSSMCfgPrimaryClockSource=gnSSMCfgPrimaryClockSource, protectionProtectingCarrierId=protectionProtectingCarrierId, gnOduMonCurrTLThresh1Exceed=gnOduMonCurrTLThresh1Exceed, gnMdmStatTable=gnMdmStatTable, gnMstMonCurrLastDaySES=gnMstMonCurrLastDaySES, gnEthStatisticTable=gnEthStatisticTable, gnLptMonCurrLastDayBBE=gnLptMonCurrLastDayBBE, gnGigabitEthernetCfgClassifierGroupMinVlanId=gnGigabitEthernetCfgClassifierGroupMinVlanId, linkGroupingGroupTopology=linkGroupingGroupTopology, gnPdhMonDayIdx=gnPdhMonDayIdx, gnEowStatEntry=gnEowStatEntry, gnGenStatDeviceFahrenheitTemp=gnGenStatDeviceFahrenheitTemp, gnOduMonDayTLThresh1Exceed=gnOduMonDayTLThresh1Exceed, gnGenIdcStatAgentIPAddress=gnGenIdcStatAgentIPAddress, nplus1StandardPMIntervalPSAD=nplus1StandardPMIntervalPSAD, gnGenCfgIDUSerialNumber=gnGenCfgIDUSerialNumber, gnOduStatusSynthesizerVCOLock=gnOduStatusSynthesizerVCOLock, gnOduCfgFreqDevider=gnOduCfgFreqDevider, gnGenStatDeviceEntry=gnGenStatDeviceEntry, gnTribStmProtectCfg=gnTribStmProtectCfg, gnRRdiTrap=gnRRdiTrap, backplaneSlotMappingUnitIndex=backplaneSlotMappingUnitIndex, gnHptMonDayIdx=gnHptMonDayIdx, gnVlanEthernetStatMinVlanId=gnVlanEthernetStatMinVlanId, gnAgnInBandMngXChannelType=gnAgnInBandMngXChannelType, gnSpi=gnSpi, gnRHitlessCableDisconnectTrap=gnRHitlessCableDisconnectTrap, gnMuxCfgXWsAdmin=gnMuxCfgXWsAdmin, gnGenXCarrierConnector=gnGenXCarrierConnector, gnOduMonCurrDayRLThresh2Exceed=gnOduMonCurrDayRLThresh2Exceed, gnOduMonCurrXLastDayIDF=gnOduMonCurrXLastDayIDF, gnLNoLOSTrap=gnLNoLOSTrap, gnOduMonCurrCombinedXDayRLThresh2Exceed=gnOduMonCurrCombinedXDayRLThresh2Exceed, gnRstMonCurrLastDayUAS=gnRstMonCurrLastDayUAS, gnOduCfgXDelayCalibrationValue=gnOduCfgXDelayCalibrationValue, gnMdmCfgXRadioSide=gnMdmCfgXRadioSide, gnGenCfgInterLenLocalOnly=gnGenCfgInterLenLocalOnly, gnOduStatusXSynthesizerVCOLock=gnOduStatusXSynthesizerVCOLock, gnMstMonIntervalUAS=gnMstMonIntervalUAS, gnNeighborInBandStatus=gnNeighborInBandStatus, gnGigabitEthernetCfgTrafficBISTAdmin=gnGigabitEthernetCfgTrafficBISTAdmin, gnGenXSyncIdcDataBase=gnGenXSyncIdcDataBase, gnTrailCfgLowPathIndex=gnTrailCfgLowPathIndex, gnHptMonIntervalTable=gnHptMonIntervalTable, gnGenCfgClearLoopTimeout=gnGenCfgClearLoopTimeout, gnRIDUNormalTempTrap=gnRIDUNormalTempTrap, gnHptMonIntervalBBE=gnHptMonIntervalBBE, gnOduCfgXTable=gnOduCfgXTable, gnEowCfgEntry=gnEowCfgEntry, standardProtectionGroupId=standardProtectionGroupId, gnLInternalDownloadFaultTrap=gnLInternalDownloadFaultTrap, gnUcCfgId=gnUcCfgId, gnOduMonIntervalXMinTL=gnOduMonIntervalXMinTL, gnOduMonDayRLThresh2Exceed=gnOduMonDayRLThresh2Exceed, gnOduMonIntervalXMinRL=gnOduMonIntervalXMinRL, gnMstFarEndMonCurrLastDayBBE=gnMstFarEndMonCurrLastDayBBE, gnOduMonDayTable=gnOduMonDayTable, gnGenIdcCfgCLLI=gnGenIdcCfgCLLI, gnGenMrmcXId=gnGenMrmcXId, gnLptMonCurrLastDaySES=gnLptMonCurrLastDaySES, gnLNoEXCTrap=gnLNoEXCTrap, gnWscCfgBitRate=gnWscCfgBitRate, gnOduStatusXId=gnOduStatusXId, gnEthStatisticRadioReceivedFramesLsb=gnEthStatisticRadioReceivedFramesLsb, gnOduMonCurrXXpiThreshExceed=gnOduMonCurrXXpiThreshExceed, gnMdmStatXStandardOrg=gnMdmStatXStandardOrg, gnGigabitEthernetCfgSchedulerQueue1Weight=gnGigabitEthernetCfgSchedulerQueue1Weight, gnOduMonCurrXDayRLThresh1Exceed=gnOduMonCurrXDayRLThresh1Exceed, gnOduMonDayDiversityXEntry=gnOduMonDayDiversityXEntry, gnHptCfgTrailPT1=gnHptCfgTrailPT1, gnGigabitEthernetMonCurrTable=gnGigabitEthernetMonCurrTable, gnTribCfgHoldOffTime=gnTribCfgHoldOffTime, gnTribStmMspRevertiveMode=gnTribStmMspRevertiveMode, gnAgnLogFileSeverity=gnAgnLogFileSeverity, gnGenStatDeviceODUStatus=gnGenStatDeviceODUStatus, gnUcStatEntry=gnUcStatEntry, gnApplicFileId=gnApplicFileId, gnLHeartBeatTrap=gnLHeartBeatTrap, gnLCableOkTrap=gnLCableOkTrap, gnLptFarEndMonIntervalEntry=gnLptFarEndMonIntervalEntry, standardProtectionTable=standardProtectionTable, gnGenIdcStatIfTableCounter=gnGenIdcStatIfTableCounter, gnMstFarEndMonCurrTable=gnMstFarEndMonCurrTable, gnVlanEthernetStatGroupId=gnVlanEthernetStatGroupId, gnAgnCurrentAlarmIfIndex=gnAgnCurrentAlarmIfIndex, topologiesOptionsProtectingCarriers=topologiesOptionsProtectingCarriers, gnPdhMonCurrEntry=gnPdhMonCurrEntry, gnProtectXProtectUnitMode=gnProtectXProtectUnitMode, gnMdmAcmMonCurrXDayIDF=gnMdmAcmMonCurrXDayIDF, gnRTestRunningTrap=gnRTestRunningTrap, gnMdmCfgXClearCounters=gnMdmCfgXClearCounters, gnGigabitEthernetStatSpeedAndDuplexMode=gnGigabitEthernetStatSpeedAndDuplexMode, powerInputId=powerInputId, gnAccessStatInterfaceBer=gnAccessStatInterfaceBer, gnRSlmTrap=gnRSlmTrap, gnOduMonCurrDiversityXDayRLThresh1Exceed=gnOduMonCurrDiversityXDayRLThresh1Exceed, gnGenIdcStatIDUStatus=gnGenIdcStatIDUStatus, gnOduMonDayCombinedXTable=gnOduMonDayCombinedXTable, gnAgnInterLinkTable=gnAgnInterLinkTable, gnEthStatistic=gnEthStatistic, gnLIntralinkFaultTrap=gnLIntralinkFaultTrap, gnTribCfg=gnTribCfg, gnMux=gnMux, gnGenTxFreqRange=gnGenTxFreqRange, gnAgnInterLinkEntry=gnAgnInterLinkEntry, gnMdmCfgId=gnMdmCfgId, gnMstMonDayUAS=gnMstMonDayUAS, gnAgnInBandMngTTL=gnAgnInBandMngTTL, gnSignalReceivedFromODUTrap=gnSignalReceivedFromODUTrap, gnProtectCfgTable=gnProtectCfgTable, gnLNoLocTrap=gnLNoLocTrap, addressesEntry=addressesEntry, xcDrawerSyncIdcDataBase=xcDrawerSyncIdcDataBase, gnMdmCfgDiversityMode=gnMdmCfgDiversityMode, gnEncryptionKepTimoutCleared=gnEncryptionKepTimoutCleared, gnOduMonDayXIDF=gnOduMonDayXIDF, gnFastEthernetCfgQueuingScheme=gnFastEthernetCfgQueuingScheme, gnEncryptionSkTimerElapsedCleared=gnEncryptionSkTimerElapsedCleared, gnMstFarEndMonIntervalEntry=gnMstFarEndMonIntervalEntry, gnAgnNTPCfgEnableAuth=gnAgnNTPCfgEnableAuth, gnLptStatEntry=gnLptStatEntry, gnPdhMonIntervalCV=gnPdhMonIntervalCV, gnRNoTestRunningTrap=gnRNoTestRunningTrap, gnMstFarEndMonDayEntry=gnMstFarEndMonDayEntry, gnAgnLogFileDeviceODUStatus=gnAgnLogFileDeviceODUStatus, gnOduMonCurrXDayMaxRL=gnOduMonCurrXDayMaxRL, gnMstMonDayIdx=gnMstMonDayIdx, auxiliaryDrawerBoardPostResetFWVersion=auxiliaryDrawerBoardPostResetFWVersion, gnRstCfgTransparencyF1=gnRstCfgTransparencyF1, gnRProtectCableOkTrap=gnRProtectCableOkTrap, addressesTable=addressesTable, gnOduStatusXValidIntervals=gnOduStatusXValidIntervals, gnTrailPassThroughIndex=gnTrailPassThroughIndex, gnAgnNTPCfgServerIP=gnAgnNTPCfgServerIP, gnOduCfgXMinRxFreqNumber=gnOduCfgXMinRxFreqNumber, gnWscCfgRouting=gnWscCfgRouting, gnOduMonIntervalRLThresh1Exceed=gnOduMonIntervalRLThresh1Exceed, gnGenMrmcXMrmcVal=gnGenMrmcXMrmcVal, gnAgnInterLinkStatus=gnAgnInterLinkStatus, gnLExternalAlarm4OffTrap=gnLExternalAlarm4OffTrap, gnHptCfgMismatchJ1=gnHptCfgMismatchJ1, gnPdhMonIntervalEntry=gnPdhMonIntervalEntry, gnOduMonDayDiversityXMaxRL=gnOduMonDayDiversityXMaxRL, gnPdhMonIntervalSES=gnPdhMonIntervalSES, gnLptMonDaySES=gnLptMonDaySES, gnTribStmProtectCableStatus=gnTribStmProtectCableStatus, gnAgnInExternAlarmText=gnAgnInExternAlarmText, gnMdmStatXRxConstellation=gnMdmStatXRxConstellation, gnDiskFreespace=gnDiskFreespace, xcDrawerTable=xcDrawerTable, gnUcStatLeftMaxRouteChannel=gnUcStatLeftMaxRouteChannel, gnTrailPassThroughTable=gnTrailPassThroughTable, nplus1StandardPMIntervalIdx=nplus1StandardPMIntervalIdx, gnMdmStatXModemScriptVer=gnMdmStatXModemScriptVer, gnEthStatisticIfInOctetsMsb=gnEthStatisticIfInOctetsMsb, gnOduStatusXOduSWPostVer=gnOduStatusXOduSWPostVer, gnSpiCfgConnector=gnSpiCfgConnector, gnOduMonCurrXDayXpiThreshExceed=gnOduMonCurrXDayXpiThreshExceed, gnAuxGeneralTable=gnAuxGeneralTable, protectionEntry=protectionEntry, gnSoftwareVersionAcmLutVerPostResetVer=gnSoftwareVersionAcmLutVerPostResetVer, gnOduMonDayMinTL=gnOduMonDayMinTL, gnOduMonDayXRLThresh1Exceed=gnOduMonDayXRLThresh1Exceed, gnMdmAcmMonDayXTable=gnMdmAcmMonDayXTable, gnSpiCfgEntry=gnSpiCfgEntry, gnSSMCfgClockOutputMute=gnSSMCfgClockOutputMute, gnRIntralinkFaultTrap=gnRIntralinkFaultTrap, gnMdmAcmMonCurrXMaxConstellation=gnMdmAcmMonCurrXMaxConstellation, gnHptFarEndMonDayBBE=gnHptFarEndMonDayBBE, gnLRcvAisTrap=gnLRcvAisTrap, gnLUnExpTrap=gnLUnExpTrap, gnGigabitEthernetStatEntry=gnGigabitEthernetStatEntry, gnGenIdcCfgSlipIp=gnGenIdcCfgSlipIp, clusterNumOfSubRacks=clusterNumOfSubRacks, gnAgnInternalDownloadVersionControl=gnAgnInternalDownloadVersionControl, gnNeighborInBandTable=gnNeighborInBandTable, gnPdhMonIntervalUAS=gnPdhMonIntervalUAS, gnOduCfgTable=gnOduCfgTable, gnOduCfgRealRxFreqNumber=gnOduCfgRealRxFreqNumber, gnNeighborInBandXIP=gnNeighborInBandXIP, gnApplicFileGeneralPurpose=gnApplicFileGeneralPurpose, gnLNoConfMismatchTrap=gnLNoConfMismatchTrap, gnRProtectSwitchFaultTrap=gnRProtectSwitchFaultTrap, gnMdmCfgXTable=gnMdmCfgXTable, gnRstCfgTestActivate=gnRstCfgTestActivate, gnGenXWaySideLoopback=gnGenXWaySideLoopback, addressesPeerIPAddress=addressesPeerIPAddress, gnRExternalAlarm4OnTrap=gnRExternalAlarm4OnTrap, gnRFUExtremeTemperatureClearedTrap=gnRFUExtremeTemperatureClearedTrap, gnGigabitEthernetCfgPhyLoopback=gnGigabitEthernetCfgPhyLoopback, gnOduMonIntervalXEvent=gnOduMonIntervalXEvent, gnWscStatBitRateSupport=gnWscStatBitRateSupport, clusterSystemType=clusterSystemType, gnAgnInternalDownloadOperation=gnAgnInternalDownloadOperation, gnLptCfgEXCThresh=gnLptCfgEXCThresh, gnOduMonCurrXMinXpi=gnOduMonCurrXMinXpi, gnGenIdcStatInterfaceConnector=gnGenIdcStatInterfaceConnector, gnSSMCfgPrimaryClockQuality=gnSSMCfgPrimaryClockQuality, gnFastEthernetMonPrivateAlignmentErrors=gnFastEthernetMonPrivateAlignmentErrors, clusterFloorNum=clusterFloorNum, gnRFUExtremeTemperatureTrap=gnRFUExtremeTemperatureTrap, gnMstMonCurrLastDayUAS=gnMstMonCurrLastDayUAS, gnTribStmProtectType=gnTribStmProtectType, gnGenMrmcXQam=gnGenMrmcXQam, gnGenRemoteConnection=gnGenRemoteConnection, gnMstCfgSDThresh=gnMstCfgSDThresh, gnOduCfgXXpiPerfMonThresh=gnOduCfgXXpiPerfMonThresh, gnSSMCfg=gnSSMCfg, gnLptFarEndMonCurrLastDaySES=gnLptFarEndMonCurrLastDaySES, gnMstMon=gnMstMon, gnUnits=gnUnits, gnAccessCfg=gnAccessCfg, gnRODUSynthLockTrap=gnRODUSynthLockTrap, gnLLOSTrap=gnLLOSTrap, gnGenIdcStatBoardType=gnGenIdcStatBoardType, xcDrawerXCConnector=xcDrawerXCConnector, gnMdmDefectBlocks=gnMdmDefectBlocks, gnLptMonIntervalBBE=gnLptMonIntervalBBE, gnWSLOSTrap=gnWSLOSTrap, gnRstStatEntry=gnRstStatEntry, gnOduMonIntervalCombinedXRLThresh2Exceed=gnOduMonIntervalCombinedXRLThresh2Exceed, gnEthStatisticPkts64OctetMsb=gnEthStatisticPkts64OctetMsb, gnTribCfgOscillationGuardTime=gnTribCfgOscillationGuardTime, gnLInternalDownloadOkTrap=gnLInternalDownloadOkTrap, gnOduCfgMaxRxFreqNumber=gnOduCfgMaxRxFreqNumber, gnSoftwareVersionEntry=gnSoftwareVersionEntry, gnOduMonDayXMinRL=gnOduMonDayXMinRL, gnGenXMuxLicense=gnGenXMuxLicense, gnRstMonIntervalTable=gnRstMonIntervalTable, gnEthStatisticPkts512to1023OctetMsb=gnEthStatisticPkts512to1023OctetMsb, gnMdmAcmMonCurrXMinConstellation=gnMdmAcmMonCurrXMinConstellation, gnEthStatisticEntry=gnEthStatisticEntry, gnPdhMonCurrLastDayUAS=gnPdhMonCurrLastDayUAS, gnOduMonDayXMinTL=gnOduMonDayXMinTL, gnLptStatReceivedJ2=gnLptStatReceivedJ2, nplus1StandardPMCurrCarrierId=nplus1StandardPMCurrCarrierId, gnOduMonDayCombinedXId=gnOduMonDayCombinedXId, gnGenDrawerXEntry=gnGenDrawerXEntry, gnRstCfgRstEXCThresh=gnRstCfgRstEXCThresh, protectionNplus1ProtectionMethod=protectionNplus1ProtectionMethod, gnMdmCfgXIfLoopback=gnMdmCfgXIfLoopback, gnOduCfgXMinTxFreqNumber=gnOduCfgXMinTxFreqNumber, gnLSFPOkTrap=gnLSFPOkTrap, gnOduMonCurrXRLThresh2Exceed=gnOduMonCurrXRLThresh2Exceed, gnRNoTIMTrap=gnRNoTIMTrap, gnPdhMonDayES=gnPdhMonDayES, gnOduStatusFahrenheitTemp=gnOduStatusFahrenheitTemp, gnRNoSDTrap=gnRNoSDTrap, gnRODUTxLevelInRangeTrap=gnRODUTxLevelInRangeTrap)
mibBuilder.exportSymbols("CERAGON-MIB", gnGenLinkId=gnGenLinkId, gnTrailCfgExpectedJ2=gnTrailCfgExpectedJ2, gnAgnInBandMngXChannelNeighborIP=gnAgnInBandMngXChannelNeighborIP, gnMuxStatXNumOfIfOnClass2=gnMuxStatXNumOfIfOnClass2, gnOduCfgXId=gnOduCfgXId, gnHitLessCfgTable=gnHitLessCfgTable, gnGenCfgDeviceId=gnGenCfgDeviceId, gnMdmAcmStatXTable=gnMdmAcmStatXTable, gnOduCfgXOduLogPeriod=gnOduCfgXOduLogPeriod, gnHptMonCurrLastDayBBE=gnHptMonCurrLastDayBBE, gnSoftwareDrawerId=gnSoftwareDrawerId, gnSoftwareDrawerVersionModemFile=gnSoftwareDrawerVersionModemFile, gnAgnFileTransfertftpBlockCount=gnAgnFileTransfertftpBlockCount, gnMstCfgEntry=gnMstCfgEntry, gnGigabitEthernetCfgClassifierFirstPrioUDP=gnGigabitEthernetCfgClassifierFirstPrioUDP, gnLExternalAlarm5OnTrap=gnLExternalAlarm5OnTrap, gnRstMonCurrLastDayIDF=gnRstMonCurrLastDayIDF, gnAgnFileTransferServerIP=gnAgnFileTransferServerIP, gnSoftwareVersionBootSoftVer=gnSoftwareVersionBootSoftVer, gnAgnInBandMngEthernetMask=gnAgnInBandMngEthernetMask, gnAgnInBandMng=gnAgnInBandMng, gnHptCfgTug3Structure1=gnHptCfgTug3Structure1, gnAgnPrvtCmd=gnAgnPrvtCmd, nplus1StandardPMCurrFSRD=nplus1StandardPMCurrFSRD, gnMdmAcmMonIntervalXIdx=gnMdmAcmMonIntervalXIdx, gnEthStatisticDroppedPacketsLsb=gnEthStatisticDroppedPacketsLsb, gnMstMonCurrTable=gnMstMonCurrTable, gnLptFarEndMonCurrTable=gnLptFarEndMonCurrTable, nplus1StandardPMCurrLastDayPSAC=nplus1StandardPMCurrLastDayPSAC, gnIDUTrap=gnIDUTrap, gnRNoLopTrap=gnRNoLopTrap, gnAgnLogFileEntry=gnAgnLogFileEntry, gnOduStatusEntry=gnOduStatusEntry, gnRstMonIntervalUAS=gnRstMonIntervalUAS, gnLRdiTrap=gnLRdiTrap, gnHptFarEndMonIntervalBBE=gnHptFarEndMonIntervalBBE, gnLNoRdiTrap=gnLNoRdiTrap, gnRExternalAlarm7OffTrap=gnRExternalAlarm7OffTrap, carrierProtectionTable=carrierProtectionTable, gnOduCfgXLoopbackOption=gnOduCfgXLoopbackOption, gnMdmAcmMonIntervalXEntry=gnMdmAcmMonIntervalXEntry, gnAgnInBandMngPppMask=gnAgnInBandMngPppMask, gnMuxCfgXEntry=gnMuxCfgXEntry, gnOduMonDayXEntry=gnOduMonDayXEntry, auxiliaryDrawerBoardReset=auxiliaryDrawerBoardReset, gnOduMonDayCombinedXMinRL=gnOduMonDayCombinedXMinRL, gnMdmCfgXId=gnMdmCfgXId, gnIDUTrapCleared=gnIDUTrapCleared, gnSoftwareVersionMrmcVer=gnSoftwareVersionMrmcVer, gnPdhMonIntervalIDF=gnPdhMonIntervalIDF, gnGenCfgODUSerialNumber=gnGenCfgODUSerialNumber, gnAgnNTPCfg=gnAgnNTPCfg, gnWscStatChNumber=gnWscStatChNumber, gnOduCfgRealTxFreqNumber=gnOduCfgRealTxFreqNumber, gnOduMonCurrDiversityXEntry=gnOduMonCurrDiversityXEntry, gnOduMonCurrCombinedXRLThresh1Exceed=gnOduMonCurrCombinedXRLThresh1Exceed, gnOduCfgXRefRsl=gnOduCfgXRefRsl, nplus1StandardPMCurrLastDayFSRC=nplus1StandardPMCurrLastDayFSRC, gnMuxStatXTable=gnMuxStatXTable, gnGenXTempLicenseTimer=gnGenXTempLicenseTimer, gnGenIdcStatRightDrawerStatus=gnGenIdcStatRightDrawerStatus, gnUcCfgEntry=gnUcCfgEntry, powerInputLedStatus=powerInputLedStatus, gnOduStatusReceiveLevel=gnOduStatusReceiveLevel, gnOduMonCurrDayMinRL=gnOduMonCurrDayMinRL, carrierProtectionLoopback=carrierProtectionLoopback, gnSoftwareDrawerVersionRfuFpgaVersion=gnSoftwareDrawerVersionRfuFpgaVersion, gnSoftwareDrawerVersionMUX=gnSoftwareDrawerVersionMUX, gnOduCfgFreqPlanStandard=gnOduCfgFreqPlanStandard, gnMstFarEndMonIntervalIdx=gnMstFarEndMonIntervalIdx, gnOduMonCurrXMinRL=gnOduMonCurrXMinRL, gnOduCfgForceRmtMuteTx=gnOduCfgForceRmtMuteTx, gnAgnInBandMngNetworkElementType=gnAgnInBandMngNetworkElementType, gnHptFarEndMonIntervalIdx=gnHptFarEndMonIntervalIdx, gnOduMonCurrDiversityXDayMinRL=gnOduMonCurrDiversityXDayMinRL, gnOduMonIntervalDiversityXRLThresh1Exceed=gnOduMonIntervalDiversityXRLThresh1Exceed, gnHptFarEndMonDayEntry=gnHptFarEndMonDayEntry, gnOduCfgXRLPerfMonThresh1=gnOduCfgXRLPerfMonThresh1, gnMstFarEndMonDayIdx=gnMstFarEndMonDayIdx, gnAgnNTPCfgSummerAdjEnd=gnAgnNTPCfgSummerAdjEnd, gnOduCfgXATPCStatus=gnOduCfgXATPCStatus, gnEncryptionSkTimerElapsed=gnEncryptionSkTimerElapsed, gnGenMostSevereAlarm=gnGenMostSevereAlarm, gnLptFarEndMonDayBBE=gnLptFarEndMonDayBBE, gnOduMonitor=gnOduMonitor, gnGeneral=gnGeneral, gnHitLessCfgManualSwitch=gnHitLessCfgManualSwitch, gnAgnLogFileOduSynthesizerVCOLock=gnAgnLogFileOduSynthesizerVCOLock, gnMdmCfgXEntry=gnMdmCfgXEntry, gnNMS=gnNMS, gnLExternalAlarm8OnTrap=gnLExternalAlarm8OnTrap, gnLExternalAlarm6OffTrap=gnLExternalAlarm6OffTrap, gnEthStatisticRadioTransmitFramesLsb=gnEthStatisticRadioTransmitFramesLsb, gnRstMonCurrTable=gnRstMonCurrTable, gnOduMonCurrXDayMinRL=gnOduMonCurrXDayMinRL, gnSoftwareDrawerVersionODUPostResetVersion=gnSoftwareDrawerVersionODUPostResetVersion, gnAccess=gnAccess, gnOduCfgRLPerfMonThresh1=gnOduCfgRLPerfMonThresh1, gnMdmAcmMonDayXIDF=gnMdmAcmMonDayXIDF, gnEowStatEowLeftSupport=gnEowStatEowLeftSupport, gnApplicFileFirmware=gnApplicFileFirmware, gnSSMStat=gnSSMStat, gnAccessCfgTable=gnAccessCfgTable, gnLptMonCurrLastDayES=gnLptMonCurrLastDayES, gnAgnInternalDownloadTable=gnAgnInternalDownloadTable, gnLptMonIntervalUAS=gnLptMonIntervalUAS, gnEncryptionSyncLosTrap=gnEncryptionSyncLosTrap, gnAgnInternalDownloadBytesCount=gnAgnInternalDownloadBytesCount, gnEthStatisticRadioReceivedCrcFramesMsb=gnEthStatisticRadioReceivedCrcFramesMsb, gnRODUPowerOkTrap=gnRODUPowerOkTrap, gnGenCfgPrimaryClockSource=gnGenCfgPrimaryClockSource, carrierProtectionLineFraming=carrierProtectionLineFraming, gnHptMonDayES=gnHptMonDayES, gnAgnCurrentAlarmId=gnAgnCurrentAlarmId, gnSoftwareVersionMUXPostResetVersion=gnSoftwareVersionMUXPostResetVersion, gnOduCfgXFreqPlanStandard=gnOduCfgXFreqPlanStandard, gnGigabitEthernetMonDayEntry=gnGigabitEthernetMonDayEntry, gnGenMrmcXScriptType=gnGenMrmcXScriptType, powerInputStatus=powerInputStatus, nplus1StandardPMCurrTable=nplus1StandardPMCurrTable, gnEowStatEowRightSupport=gnEowStatEowRightSupport, gnPdhMonIntervalTable=gnPdhMonIntervalTable, gnRFUDelayCalibrationFailure1Trap=gnRFUDelayCalibrationFailure1Trap, gnAgnCurrentAlarmSeverity=gnAgnCurrentAlarmSeverity, gnLinkGroupingProtectionFaultTrap=gnLinkGroupingProtectionFaultTrap, gnVlanEthernetStatMaxVlanId=gnVlanEthernetStatMaxVlanId, gnACCESSTrap=gnACCESSTrap, gnProtectUnitMode=gnProtectUnitMode, gnAgnMgrEntry=gnAgnMgrEntry, gnLExternalAlarm5OffTrap=gnLExternalAlarm5OffTrap, gnGenCfgTrapOption=gnGenCfgTrapOption, gnEncryptionEventReportCleared=gnEncryptionEventReportCleared, gnMstCfgTable=gnMstCfgTable, gnHptCfgTrailPT3=gnHptCfgTrailPT3, gnUcCfgEnable=gnUcCfgEnable, gnMstFarEndMonIntervalTable=gnMstFarEndMonIntervalTable, gnRCableFaultTrap=gnRCableFaultTrap, gnHptFarEndMonDayTable=gnHptFarEndMonDayTable, gnRFUDelayCalibrationFailure2Trap=gnRFUDelayCalibrationFailure2Trap, gnTrailCfgTransmittedJ2=gnTrailCfgTransmittedJ2, gnTrailCfgTrailName=gnTrailCfgTrailName, gnOduMonIntervalEvent=gnOduMonIntervalEvent, gnRODURxLevelInRangeTrap=gnRODURxLevelInRangeTrap, gnOduMonIntervalCombinedXTable=gnOduMonIntervalCombinedXTable, gnMuxStatXMuxSerialNumber=gnMuxStatXMuxSerialNumber, gnEthStatisticPkts256to511OctetMsb=gnEthStatisticPkts256to511OctetMsb, gnHitLessStatEntry=gnHitLessStatEntry, gnSoftwareVersionMuxAlteraVer=gnSoftwareVersionMuxAlteraVer, gnODUtoODUCableFaultTrap=gnODUtoODUCableFaultTrap, gnRFUDelayCalibrationFailure2ClearedTrap=gnRFUDelayCalibrationFailure2ClearedTrap, gnRstCfgEntry=gnRstCfgEntry, gnEowStatTable=gnEowStatTable, gnEncryptionWillTurnOffOnNextRest=gnEncryptionWillTurnOffOnNextRest, gnMultiRadioProblemOKTrap=gnMultiRadioProblemOKTrap, gnAgnLogFileValidEntries=gnAgnLogFileValidEntries, gnOduMonDayMaxRL=gnOduMonDayMaxRL, gnOduMonCurrDiversityXDayRLThresh2Exceed=gnOduMonCurrDiversityXDayRLThresh2Exceed, gnCluster=gnCluster, gnHptCfgTrailPT2=gnHptCfgTrailPT2, gnMdmBytesCorrected=gnMdmBytesCorrected, gnOduMonDayDiversityXRLThresh1Exceed=gnOduMonDayDiversityXRLThresh1Exceed, gnLptMonDayES=gnLptMonDayES, gnAgnOutRelayAlarmTable=gnAgnOutRelayAlarmTable, gnMUXCfgXTempLicenseTimer=gnMUXCfgXTempLicenseTimer, gnAgnInterLinkId=gnAgnInterLinkId, gnHptMonCurrLastDayES=gnHptMonCurrLastDayES, gnHptStatFarEndCurrentBer=gnHptStatFarEndCurrentBer, gnGigabitEthernetCfgSchedulerQueue4Weight=gnGigabitEthernetCfgSchedulerQueue4Weight, gnOduMonDayXXpiThreshExceed=gnOduMonDayXXpiThreshExceed, gnGenIdcCfgEowCascadeStatus=gnGenIdcCfgEowCascadeStatus, gnFastEthernetStat=gnFastEthernetStat, gnPdhMonDayBBE=gnPdhMonDayBBE, gnLTestRunningTrap=gnLTestRunningTrap, gnGenRemoteDistance=gnGenRemoteDistance, gnOduMonIntervalMaxTL=gnOduMonIntervalMaxTL, gnPdhMonDayIDF=gnPdhMonDayIDF, gnAgnInBandMngXChannelEntry=gnAgnInBandMngXChannelEntry, gnSSMStatClockUnitType=gnSSMStatClockUnitType, gnAgnInBandMngXChannelIfIndex=gnAgnInBandMngXChannelIfIndex, gnHitLessCfgDiversityType=gnHitLessCfgDiversityType, gnLProtectCableFaultTrap=gnLProtectCableFaultTrap, gnAgnCurrentAlarmCounter=gnAgnCurrentAlarmCounter, gnLNoUnqTrap=gnLNoUnqTrap, gnLProtectSwitchOkTrap=gnLProtectSwitchOkTrap, gnGenIdcStatHitlessSupport=gnGenIdcStatHitlessSupport, gnGigabitEthernetMonIntervalIdx=gnGigabitEthernetMonIntervalIdx, nplus1StandardPMIntervalEntry=nplus1StandardPMIntervalEntry, gnMdmCfgXAcmOperationMode=gnMdmCfgXAcmOperationMode, gnAgn=gnAgn, gnAgnLogFileLastDemodBytesCorrected=gnAgnLogFileLastDemodBytesCorrected, gnOduMonCurrXTable=gnOduMonCurrXTable, gnOduMonDayXIdx=gnOduMonDayXIdx, gnLODURxLevelInRangeTrap=gnLODURxLevelInRangeTrap, gnTribCfgLowPathIndex=gnTribCfgLowPathIndex, gnGenCfgSlipIp=gnGenCfgSlipIp, gnHptCfgTable=gnHptCfgTable, gnGenCfgF1DataChanConnector=gnGenCfgF1DataChanConnector, gnGenStatDeviceFanStatus=gnGenStatDeviceFanStatus, gnGenCarrierXEntry=gnGenCarrierXEntry, gnFastEthernetCfg=gnFastEthernetCfg, gnGenIdcStatLeftDrawerStatus=gnGenIdcStatLeftDrawerStatus, nplus1StandardPMCurrLastDayGroupNum=nplus1StandardPMCurrLastDayGroupNum, gnOduMonCurrDayRLThresh1Exceed=gnOduMonCurrDayRLThresh1Exceed, gnMstFarEndMonCurrLastDayUAS=gnMstFarEndMonCurrLastDayUAS, gnRstCfgTable=gnRstCfgTable, gnTribStmMspWaitToRestoreTime=gnTribStmMspWaitToRestoreTime, gnOduMonCurrCombinedXDayRLThresh1Exceed=gnOduMonCurrCombinedXDayRLThresh1Exceed, gnAccessCfgSDThresh=gnAccessCfgSDThresh, gnGenXResetPerfMon=gnGenXResetPerfMon, gnSoftwareVersionODUPostResetVersion=gnSoftwareVersionODUPostResetVersion, gnGenIdcCfgOperation=gnGenIdcCfgOperation, gnAgnLogFileTimeT=gnAgnLogFileTimeT, gnAgnNTPCfgOffsetFromUTC=gnAgnNTPCfgOffsetFromUTC, gnAgnPrvtCmdStat=gnAgnPrvtCmdStat, gnOduCfgATPCStatus=gnOduCfgATPCStatus, gnFastEthernetMonPrivateTable=gnFastEthernetMonPrivateTable, gnRLoopbackOnTrap=gnRLoopbackOnTrap, gnMstMonIntervalEntry=gnMstMonIntervalEntry, gnOduMonIntervalDiversityXMaxRL=gnOduMonIntervalDiversityXMaxRL, carrierProtectionRadioStatus=carrierProtectionRadioStatus, gnGenDrawerXDeviceIDUStatus=gnGenDrawerXDeviceIDUStatus, gnMstMonDayEntry=gnMstMonDayEntry, gnOduMonIntervalCombinedXRLThresh1Exceed=gnOduMonIntervalCombinedXRLThresh1Exceed, gnLSystemOkTrap=gnLSystemOkTrap, gnEthStatisticAFrameReceivedOkMsb=gnEthStatisticAFrameReceivedOkMsb, gnPdhMonIntervalIdx=gnPdhMonIntervalIdx, gnOduCfgOduModel=gnOduCfgOduModel, gnAgnInBandMngRingIpMask=gnAgnInBandMngRingIpMask, gnLExternalAlarm6OnTrap=gnLExternalAlarm6OnTrap, gnOduMonCurrXDayRLThresh2Exceed=gnOduMonCurrXDayRLThresh2Exceed, gnTribStmProtectCurrentState=gnTribStmProtectCurrentState, gnSDHTrapCleared=gnSDHTrapCleared, gnRIDUExtremeTempTrap=gnRIDUExtremeTempTrap, gnAgnInBandMngXChannelStatus=gnAgnInBandMngXChannelStatus, gnGenXAesMkeyMode=gnGenXAesMkeyMode, gnNeighborInBandXEntry=gnNeighborInBandXEntry, gnLptMonCurrLastDayUAS=gnLptMonCurrLastDayUAS, gnAgnLogFileData=gnAgnLogFileData, gnHptMonCurrBBE=gnHptMonCurrBBE, gnLPamOkTrap=gnLPamOkTrap, gnTribCfgWaitToRestoreTime=gnTribCfgWaitToRestoreTime, gnMuxStatXIfLeds=gnMuxStatXIfLeds, gnAgnInterLinkSoftware=gnAgnInterLinkSoftware, gnLptMonDayBBE=gnLptMonDayBBE, gnAgnInterLinkDestination=gnAgnInterLinkDestination, gnRstMonCurrLastDaySES=gnRstMonCurrLastDaySES, gnAgnSNMPCfgReadCommunity=gnAgnSNMPCfgReadCommunity, gnMstStatReceivedS1=gnMstStatReceivedS1, gnLProtectCableOkTrap=gnLProtectCableOkTrap, gnAgnExternAlarm=gnAgnExternAlarm, gnWscCfgTable=gnWscCfgTable, gnVlanEthernetStatEntry=gnVlanEthernetStatEntry, gnAgnInBandMngEnable=gnAgnInBandMngEnable, gnOduStatusXRslCombined=gnOduStatusXRslCombined)
mibBuilder.exportSymbols("CERAGON-MIB", gnLInvTrap=gnLInvTrap, gnFastEthernetCfgEntry=gnFastEthernetCfgEntry, gnGenDrawerXTable=gnGenDrawerXTable, gnHptStatStatus=gnHptStatStatus, gnAgnInBandMngMainGNEInterface=gnAgnInBandMngMainGNEInterface, gnGenXProductType=gnGenXProductType, gnLExternalAlarm3OnTrap=gnLExternalAlarm3OnTrap, gnGenXRadioSide=gnGenXRadioSide, gnAgnLogFileMaxEntries=gnAgnLogFileMaxEntries, gnOduCfgXOduModel=gnOduCfgXOduModel, gnTempLicenseClearedTrap=gnTempLicenseClearedTrap, gnOduMonCurrDayMaxRL=gnOduMonCurrDayMaxRL, linkGroupingExtraTrafficAdmin=linkGroupingExtraTrafficAdmin, gnMstMonCurrUAS=gnMstMonCurrUAS, gnGenIdcCfgTable=gnGenIdcCfgTable, gnGenMibVersion=gnGenMibVersion, gnGigabitEthernetStatSpeedAndDuplexSupport=gnGigabitEthernetStatSpeedAndDuplexSupport, gnEthStatisticAFrameTransmittedOkMsb=gnEthStatisticAFrameTransmittedOkMsb, gnLInbandTrap=gnLInbandTrap, gnRModemOkTrap=gnRModemOkTrap, gnMdmStatXModemWorkTime=gnMdmStatXModemWorkTime, gnGenXId=gnGenXId, gnGenMrmcXBandWidth=gnGenMrmcXBandWidth, gnTribCfgLowPathSide=gnTribCfgLowPathSide, gnLModemOkTrap=gnLModemOkTrap, gnLNoSDTrap=gnLNoSDTrap, gnGenXCarrierSerialNumber=gnGenXCarrierSerialNumber, gnLExternalAlarm3OffTrap=gnLExternalAlarm3OffTrap, gnFastEthernetMonPrivateFcsErrors=gnFastEthernetMonPrivateFcsErrors, gnSSMStatStatus=gnSSMStatStatus, gnOduMonCurrXMaxXpi=gnOduMonCurrXMaxXpi, gnOduMonDayXMinXpi=gnOduMonDayXMinXpi, gnAgnOutRelayAlarmEntry=gnAgnOutRelayAlarmEntry, gnHptFarEndMonCurrLastDayES=gnHptFarEndMonCurrLastDayES, gnAccessStatEntry=gnAccessStatEntry, gnOduMonCurrXDayMinXpi=gnOduMonCurrXDayMinXpi, gnOduCfgEntry=gnOduCfgEntry, gnRLOSTrap=gnRLOSTrap, gnOduMonDayXMaxTL=gnOduMonDayXMaxTL, gnEthStatisticBroadcastPktsMsb=gnEthStatisticBroadcastPktsMsb, nplus1StandardPMIntervalCarrierId=nplus1StandardPMIntervalCarrierId, gnOduMonCurrXId=gnOduMonCurrXId, clusterIDCRole=clusterIDCRole, gnEthStatisticOversizePktsMsb=gnEthStatisticOversizePktsMsb, gnHptFarEndMonDayIdx=gnHptFarEndMonDayIdx, nplus1StandardPMCurrLastDayPSAD=nplus1StandardPMCurrLastDayPSAD, gnAgnLogFileId=gnAgnLogFileId, auxiliaryDrawerSerialNumber=auxiliaryDrawerSerialNumber, gnMdmCfgXPrbsTest=gnMdmCfgXPrbsTest, nplus1StandardPMIntervalGroupNum=nplus1StandardPMIntervalGroupNum, gnMdmAcmMonCurrXId=gnMdmAcmMonCurrXId, gnRstMonIntervalEntry=gnRstMonIntervalEntry, gnEthStatisticMulticastPktsMsb=gnEthStatisticMulticastPktsMsb, carrierProtectionLinkGroupNum=carrierProtectionLinkGroupNum, gnOduMonCurrXDayMaxTL=gnOduMonCurrXDayMaxTL, gnLptFarEndMonDayUAS=gnLptFarEndMonDayUAS, gnOduMonIntervalCombinedXIdx=gnOduMonIntervalCombinedXIdx, gnHptCfgExpectedJ1=gnHptCfgExpectedJ1, gnMdmAcmMonitorX=gnMdmAcmMonitorX, gnTrailPassThrough=gnTrailPassThrough, gnHitLessStatModeStatus=gnHitLessStatModeStatus, gnMdmStatXModemFWPostVer=gnMdmStatXModemFWPostVer, gnMdmDemodStatus=gnMdmDemodStatus, gnPdhMonCurrCV=gnPdhMonCurrCV, topologiesOptionsName=topologiesOptionsName, gnGigabitEthernetCfgEntry=gnGigabitEthernetCfgEntry, gnOduCfgXRfuMode=gnOduCfgXRfuMode, gnApplicFileSize=gnApplicFileSize, gnLptMonCurrUAS=gnLptMonCurrUAS, gnEthStatisticAFrameReceivedOkLsb=gnEthStatisticAFrameReceivedOkLsb, gnTribCfgProtectionOptions=gnTribCfgProtectionOptions, gnTrailCfg=gnTrailCfg, gnAgnLogFileValid=gnAgnLogFileValid, gnUc=gnUc, protectionGroupsProtectionAdmin=protectionGroupsProtectionAdmin, gnTribCfgKLM=gnTribCfgKLM, auxiliaryDrawerBoardFWVersion=auxiliaryDrawerBoardFWVersion, gnOduMonDayXMaxRL=gnOduMonDayXMaxRL, gnGenIdcStatLeds=gnGenIdcStatLeds, gnOduMonDayDiversityXTable=gnOduMonDayDiversityXTable, topologiesOptionsEntry=topologiesOptionsEntry, gnRIntralinkOkTrap=gnRIntralinkOkTrap, gnLptFarEndMonIntervalUAS=gnLptFarEndMonIntervalUAS, gnOduStatusCelsiusTemp=gnOduStatusCelsiusTemp, gnNeighborInBandXTable=gnNeighborInBandXTable, gnMstMonCurrEntry=gnMstMonCurrEntry, gnMstStatStatus=gnMstStatStatus, gnLCableFaultTrap=gnLCableFaultTrap, gnRstStatReceivedJ0=gnRstStatReceivedJ0, gnSoftwareVersionTable=gnSoftwareVersionTable, gnGenXWaysideChannel=gnGenXWaysideChannel, gnProtectCfgId=gnProtectCfgId, gnOduMonCurrRLThresh1Exceed=gnOduMonCurrRLThresh1Exceed, gnGigabitEthernetMonDayIDF=gnGigabitEthernetMonDayIDF, gnGenCfgAlarmSeverity=gnGenCfgAlarmSeverity, gnFastEthernetCfgDynamicBand=gnFastEthernetCfgDynamicBand, gnGenAddAlarmExtToTraps=gnGenAddAlarmExtToTraps, gnHitLessStatTable=gnHitLessStatTable, gnGigabitEthernetCfgAcmMuteOnMinConstellation=gnGigabitEthernetCfgAcmMuteOnMinConstellation, gnHptCfgTug3Structure2=gnHptCfgTug3Structure2, nplus1StandardPMDayFSRD=nplus1StandardPMDayFSRD, gnAgnFileTransferDestination=gnAgnFileTransferDestination, gnUcCfgTable=gnUcCfgTable, gnEowCfgTable=gnEowCfgTable, gnMdmCfgXHwReset=gnMdmCfgXHwReset, gnWsc=gnWsc, gnODUTrap=gnODUTrap, gnRExternalAlarm3OnTrap=gnRExternalAlarm3OnTrap, gnMuxStatXId=gnMuxStatXId, gnSoftwareDrawerVersionModemFilePostResetVersion=gnSoftwareDrawerVersionModemFilePostResetVersion, gnProtectCfgType=gnProtectCfgType, gnSoftwareVersionSfdVer=gnSoftwareVersionSfdVer, topologiesOptionsTable=topologiesOptionsTable, nplus1ProtectingTable=nplus1ProtectingTable, gnRstMon=gnRstMon, gnSoftwareDrawerVersionEntry=gnSoftwareDrawerVersionEntry, gnHptFarEndMonDayUAS=gnHptFarEndMonDayUAS, gnHitLessStatId=gnHitLessStatId, gnAgnLogFileDevicePowerSupply=gnAgnLogFileDevicePowerSupply, gnMdmAcmMonDayXMaxConstellation=gnMdmAcmMonDayXMaxConstellation, gnOduMonIntervalXEntry=gnOduMonIntervalXEntry, gnAgnInternalDownloadAction=gnAgnInternalDownloadAction, gnRFUPowerFailureClearedTrap=gnRFUPowerFailureClearedTrap, gnAccessCfgEntry=gnAccessCfgEntry, gnMuxStatXBoardType=gnMuxStatXBoardType, gnRIDUPowerOkTrap=gnRIDUPowerOkTrap, gnLExternalAlarm8OffTrap=gnLExternalAlarm8OffTrap, gnGenXEowStatus=gnGenXEowStatus, gnOduMonIntervalXMinXpi=gnOduMonIntervalXMinXpi, gnRTftpFaultTrap=gnRTftpFaultTrap, gnOduStatusTable=gnOduStatusTable, gnTrailPassThroughName=gnTrailPassThroughName, gnAgnInternalDownloadId=gnAgnInternalDownloadId, gnNeighborIpTable=gnNeighborIpTable, gnOduCfgTransmitterFrequency=gnOduCfgTransmitterFrequency, gnLExternalAlarm7OffTrap=gnLExternalAlarm7OffTrap, gnGenModemType=gnGenModemType, gnGenXPrbsTest=gnGenXPrbsTest, gnAgnInternalDownloadStatus=gnAgnInternalDownloadStatus, gnGenXModemType=gnGenXModemType, gnRExternalAlarm1OnTrap=gnRExternalAlarm1OnTrap, gnSSMCfgSecondaryClockQuality=gnSSMCfgSecondaryClockQuality, membersCarrierId=membersCarrierId, gnAgnLogFileTime=gnAgnLogFileTime, gnApplicFileEntry=gnApplicFileEntry, gnMdmStatXModemScriptPostVer=gnMdmStatXModemScriptPostVer, gnLPamTrap=gnLPamTrap, gnRExternalAlarm5OffTrap=gnRExternalAlarm5OffTrap, gnRstStatTable=gnRstStatTable, gnAccessCfgRunPrbs=gnAccessCfgRunPrbs, gnOduMonIntervalIdx=gnOduMonIntervalIdx, gnIDU=gnIDU, gnEncryptionTechCardWasDetectedCleared=gnEncryptionTechCardWasDetectedCleared, gnApplicFileDssSupport=gnApplicFileDssSupport, gnGenCfgSlipModemConnection=gnGenCfgSlipModemConnection, gnAgnOutRelayAlarmIndex=gnAgnOutRelayAlarmIndex, gnRstMonCurrLastDayBBE=gnRstMonCurrLastDayBBE, gnRstCfgTransparencyB1Chan=gnRstCfgTransparencyB1Chan, gnApplicFileSubType=gnApplicFileSubType, gnOduMonCurrCombinedXMaxRL=gnOduMonCurrCombinedXMaxRL, gnRLopTrap=gnRLopTrap, gnMdmAcmMonIntervalXMinConstellation=gnMdmAcmMonIntervalXMinConstellation, gnLODUExtremeTempTrap=gnLODUExtremeTempTrap, gnODUtoODUCableOkTrap=gnODUtoODUCableOkTrap, gnGenXTempLicenseEnable=gnGenXTempLicenseEnable, gnProtect=gnProtect, nplus1StandardPMCurrValidIntervals=nplus1StandardPMCurrValidIntervals, gnProtectCfgMultiRadioBlock=gnProtectCfgMultiRadioBlock, gnAgnInternalDownloadEntry=gnAgnInternalDownloadEntry, gnOduMonIntervalCombinedXId=gnOduMonIntervalCombinedXId, gnMstFarEndMonCurrBBE=gnMstFarEndMonCurrBBE, gnOduCfgXForceRmtMuteTx=gnOduCfgXForceRmtMuteTx, gnRSystemFaultTrap=gnRSystemFaultTrap, gnProtectCfgUserCommand=gnProtectCfgUserCommand, gnGigabitEthernetStatTable=gnGigabitEthernetStatTable, gnMdmAcmStatXRoundedThroughput=gnMdmAcmStatXRoundedThroughput, gnOduMonCurrXDayMaxXpi=gnOduMonCurrXDayMaxXpi, gnAgnLogFileDeviceFanStatus=gnAgnLogFileDeviceFanStatus, gnRExternalAlarm3OffTrap=gnRExternalAlarm3OffTrap, gnTrailCfgWaitToRestoreTime=gnTrailCfgWaitToRestoreTime, gnOduMonIntervalXMaxRL=gnOduMonIntervalXMaxRL, gnOduCfgRefRsl=gnOduCfgRefRsl, gnFastEthernetCfgTable=gnFastEthernetCfgTable, gnVlanEthernetStatVlanPriority=gnVlanEthernetStatVlanPriority, clusterPeerIPLastChangeTime=clusterPeerIPLastChangeTime, gnHptCfgSDThresh=gnHptCfgSDThresh, gnRNoAisTrap=gnRNoAisTrap, gnRHitlessRadioLofTrap=gnRHitlessRadioLofTrap, gnGenCfgDeviceResetPerfMon=gnGenCfgDeviceResetPerfMon, gnSoftwareDrawerVersionTable=gnSoftwareDrawerVersionTable, gnOduMonIntervalDiversityXIdx=gnOduMonIntervalDiversityXIdx, nplus1ProtectingProtectedLinkRx=nplus1ProtectingProtectedLinkRx, gnMdmAcmMonIntervalXTable=gnMdmAcmMonIntervalXTable, gnLIDUPowerOkTrap=gnLIDUPowerOkTrap, gnGenStatDeviceRSTStatus=gnGenStatDeviceRSTStatus, gnEncryptionPowerUpSelfTestFail=gnEncryptionPowerUpSelfTestFail, gnGeneralMrmcXEntry=gnGeneralMrmcXEntry, gnProtectXEntry=gnProtectXEntry, gnOduMonCurrCombinedXDayMaxRL=gnOduMonCurrCombinedXDayMaxRL, gnSpiCfgTable=gnSpiCfgTable, nplus1StandardPMDayPSAC=nplus1StandardPMDayPSAC, gnLIntralinkOkTrap=gnLIntralinkOkTrap, gnMstStatEntry=gnMstStatEntry, gnAgnInBandMngFiberChannel=gnAgnInBandMngFiberChannel, nplus1StandardPMDayFSRC=nplus1StandardPMDayFSRC, gnGenRxFreqNumLocalRemote=gnGenRxFreqNumLocalRemote, primeIDCSynchronizeClockInCluster=primeIDCSynchronizeClockInCluster, gnTrailCfgProtectionUserCommand=gnTrailCfgProtectionUserCommand, gnMdmAcmStatXSupportedThroughput=gnMdmAcmStatXSupportedThroughput, nplus1ProtectingEntry=nplus1ProtectingEntry, gnRstCfgTransparencyJ0=gnRstCfgTransparencyJ0, gnOduStatusXOduSWVer=gnOduStatusXOduSWVer, gnLHitlessCableDisconnectTrap=gnLHitlessCableDisconnectTrap, gnMuxStatXAesAdmin=gnMuxStatXAesAdmin, gnOduMonCurrMaxRL=gnOduMonCurrMaxRL, gnOduMonIntervalXTLThresh1Exceed=gnOduMonIntervalXTLThresh1Exceed, gnGenStatDeviceId=gnGenStatDeviceId, gnGenStatDevicePowerSupply=gnGenStatDevicePowerSupply, gnGenIdcCfgHeartbeatPeriod=gnGenIdcCfgHeartbeatPeriod, gnEthStatisticCRCAlignErrorsMsb=gnEthStatisticCRCAlignErrorsMsb, gnGeneralMrmcXTable=gnGeneralMrmcXTable, gnGigabitEthernetMonIntervalEntry=gnGigabitEthernetMonIntervalEntry, gnTribCfgProtectionUserCommand=gnTribCfgProtectionUserCommand, gnEthStatisticRadioTransmitFramesMsb=gnEthStatisticRadioTransmitFramesMsb, gnOduCfgXUnfadedReferenceRsl=gnOduCfgXUnfadedReferenceRsl, gnMdmAcmStatXEntry=gnMdmAcmStatXEntry, gnMdmCfgTable=gnMdmCfgTable, nplus1StandardPMIntervalTable=nplus1StandardPMIntervalTable, gnSSMCfgSecondaryClockSource=gnSSMCfgSecondaryClockSource, gnLUnqTrap=gnLUnqTrap, gnGenXInterfacesLeds=gnGenXInterfacesLeds, protectionTable=protectionTable, gnAuxGeneralId=gnAuxGeneralId, gnUcCfgRouting=gnUcCfgRouting, gnRstMonCurrLastDayES=gnRstMonCurrLastDayES, gnMstStatTable=gnMstStatTable, gnAgnLogFileModStatus=gnAgnLogFileModStatus, gnOduMonCurrCombinedXRLThresh2Exceed=gnOduMonCurrCombinedXRLThresh2Exceed, gnOduStatusXMinTransmitLevel=gnOduStatusXMinTransmitLevel, gnOduStatusXRfuAddress=gnOduStatusXRfuAddress, gnLExternalAlarm1OnTrap=gnLExternalAlarm1OnTrap, gnHitLessCfgEntry=gnHitLessCfgEntry, gnHptCfgTransparencyJ1=gnHptCfgTransparencyJ1, gnOduMonIntervalCombinedXEntry=gnOduMonIntervalCombinedXEntry, gnMstMonIntervalBBE=gnMstMonIntervalBBE, gnRstMonDaySES=gnRstMonDaySES, gnGenXActNumOfInterfaceOnClass1=gnGenXActNumOfInterfaceOnClass1, nplus1StandardPMDayGroupNum=nplus1StandardPMDayGroupNum, gnAgnNTPCfgProtocolType=gnAgnNTPCfgProtocolType, gnMstMonCurrLastDayES=gnMstMonCurrLastDayES, gnLptStatKLM=gnLptStatKLM, gnGenStatDeviceTable=gnGenStatDeviceTable, gnGenIdcStatXpicSupport=gnGenIdcStatXpicSupport, gnHptMon=gnHptMon)
mibBuilder.exportSymbols("CERAGON-MIB", gnAgnLogFileDate=gnAgnLogFileDate, gnOduMonDayXId=gnOduMonDayXId, gnGigabitEthernetMonCurrIDF=gnGigabitEthernetMonCurrIDF, gnRNoConfMismatchTrap=gnRNoConfMismatchTrap, gnGenDrawerXId=gnGenDrawerXId, gnLptFarEndMonDaySES=gnLptFarEndMonDaySES, gnNeighborIpEntry=gnNeighborIpEntry, gnGenXDefectBlocks=gnGenXDefectBlocks, gnEowStatId=gnEowStatId, gnRNoLOSTrap=gnRNoLOSTrap, gnRstMonDayIDF=gnRstMonDayIDF, gnOID=gnOID, gnMstMonCurrLastDayBBE=gnMstMonCurrLastDayBBE, gnMstStatCurrentBer=gnMstStatCurrentBer, gnAgnInBandMngXChannelTable=gnAgnInBandMngXChannelTable, gnLptFarEndMonIntervalIdx=gnLptFarEndMonIntervalIdx, gnOduMonIntervalXIDF=gnOduMonIntervalXIDF, gnLODUPowerOkTrap=gnLODUPowerOkTrap, nplus1ProtectingGroupId=nplus1ProtectingGroupId, gnMdmStatXBoardType=gnMdmStatXBoardType, gnMuxStatXNumOfIfOnClass1=gnMuxStatXNumOfIfOnClass1, gnSoftwareIDCVersionControl=gnSoftwareIDCVersionControl, gnOduMonIntervalXMaxTL=gnOduMonIntervalXMaxTL, gnTribStmMspType=gnTribStmMspType, gnEthStatisticIfOutOctetsMsb=gnEthStatisticIfOutOctetsMsb, gnOduCfgXForceRmtMaxTx=gnOduCfgXForceRmtMaxTx, gnGenCfgSubProductType=gnGenCfgSubProductType, gnLptStatFarEndCurrentBer=gnLptStatFarEndCurrentBer, backplaneSlotMappingEntry=backplaneSlotMappingEntry, gnAgnCurrentAlarmLastChange=gnAgnCurrentAlarmLastChange, gnAgnNTPCfgUpdateInterval=gnAgnNTPCfgUpdateInterval, gnRInternalDownloadOkTrap=gnRInternalDownloadOkTrap, gnAccessCfgTest=gnAccessCfgTest, gnOduMonIntervalXId=gnOduMonIntervalXId, gnRstMonCurrLastDayOFS=gnRstMonCurrLastDayOFS, backplaneSlotMappingUnitType=backplaneSlotMappingUnitType, gnOduCfgXFreqDevider=gnOduCfgXFreqDevider, gnTrailCfgEntry=gnTrailCfgEntry, gnOduMonCurrXMse=gnOduMonCurrXMse, gnHitLessCfgEventCounterCommand=gnHitLessCfgEventCounterCommand, gnGeneralXTable=gnGeneralXTable, gnOduMonDayDiversityXRLThresh2Exceed=gnOduMonDayDiversityXRLThresh2Exceed, gnLptFarEndMonCurrLastDayBBE=gnLptFarEndMonCurrLastDayBBE, gnRCableOkTrap=gnRCableOkTrap, gnHptMonDayBBE=gnHptMonDayBBE, gnSSMCfgSSMMode=gnSSMCfgSSMMode, gnRstMonCurrEntry=gnRstMonCurrEntry, gnOduMonCurrXRLThresh1Exceed=gnOduMonCurrXRLThresh1Exceed, gnEowCfgEowCascadeEnable=gnEowCfgEowCascadeEnable, gnMdmStatXId=gnMdmStatXId, gnODU=gnODU, gnTrailCfgBERConsAction=gnTrailCfgBERConsAction, gnRstMonDayBBE=gnRstMonDayBBE, gnHptMonDaySES=gnHptMonDaySES, gnOduMonCurrDiversityXMinRL=gnOduMonCurrDiversityXMinRL, gnGenCarrierXTable=gnGenCarrierXTable, gnTribCfgEntry=gnTribCfgEntry, gnEncryptionEventReport=gnEncryptionEventReport, gnProtectXTable=gnProtectXTable, gnAccessStatValidIntervals=gnAccessStatValidIntervals, gnFirstOID=gnFirstOID, gnRNoRdiTrap=gnRNoRdiTrap, gnFastEthernetStatEntry=gnFastEthernetStatEntry, gnNeighborMateIP=gnNeighborMateIP, gnOduStatusXTransmitLevel=gnOduStatusXTransmitLevel, gnAgnLogFileAction=gnAgnLogFileAction, gnLptMonIntervalEntry=gnLptMonIntervalEntry, gnMuxCfgXWsLoopback=gnMuxCfgXWsLoopback, gnLIDUExtremeTempTrap=gnLIDUExtremeTempTrap, gnRProtectCableFaultTrap=gnRProtectCableFaultTrap, gnGenCfgDeviceOperation=gnGenCfgDeviceOperation, gnRstStatStatus=gnRstStatStatus, gnMuxCfgXId=gnMuxCfgXId, gnEthStatisticRadioReceivedFramesMsb=gnEthStatisticRadioReceivedFramesMsb, linkGroupingGroupId=linkGroupingGroupId, gnLTftpFaultTrap=gnLTftpFaultTrap, gnGenDrawerXSlot1Status=gnGenDrawerXSlot1Status, gnRInternalDownloadFaultTrap=gnRInternalDownloadFaultTrap, linkGroupingGroupAdmin=linkGroupingGroupAdmin, nplus1StandardPMCurrTimeElapsed=nplus1StandardPMCurrTimeElapsed, gnGenCarrierXId=gnGenCarrierXId, gnGenIdcCfgIDUSerialNumber=gnGenIdcCfgIDUSerialNumber, gnMstMonCurrBBE=gnMstMonCurrBBE, gnGenLastCfgTimeandDate=gnGenLastCfgTimeandDate, gnGigabitEthernetCfgSpeedAndDuplex=gnGigabitEthernetCfgSpeedAndDuplex, xcDrawerBoardFWVersion=xcDrawerBoardFWVersion, gnOduMonIntervalDiversityXId=gnOduMonIntervalDiversityXId, gnLptFarEndMonCurrLastDayES=gnLptFarEndMonCurrLastDayES, gnEncryptionConditionalTestFail=gnEncryptionConditionalTestFail, gnOduMonDayXRLThresh2Exceed=gnOduMonDayXRLThresh2Exceed, gnMuxStatXBoardConnector=gnMuxStatXBoardConnector, nplus1ProtectingProtectedLinkTx=nplus1ProtectingProtectedLinkTx, gnLSDTrap=gnLSDTrap, gnNeighborRemoteRadioIP=gnNeighborRemoteRadioIP, gnOduMonIntervalRLThresh2Exceed=gnOduMonIntervalRLThresh2Exceed, gnMstFarEndMonDayTable=gnMstFarEndMonDayTable, gnOduCfgMaxTxLevel=gnOduCfgMaxTxLevel, linkGroupingTable=linkGroupingTable, gnRstStatBERCur=gnRstStatBERCur, gnGigabitEthernetMon=gnGigabitEthernetMon, gnRstCfgMngByteLocation=gnRstCfgMngByteLocation, gnHptMonCurrTable=gnHptMonCurrTable, gnHptCfgEXCThresh=gnHptCfgEXCThresh, gnPdhMonCurrLastDayCV=gnPdhMonCurrLastDayCV, gnRLOFTrap=gnRLOFTrap, gnPdhMonIntervalBBE=gnPdhMonIntervalBBE, gnRstMonIntervalBBE=gnRstMonIntervalBBE, gnOduMonCurrXMaxRL=gnOduMonCurrXMaxRL, gnOduMonCurrMinTL=gnOduMonCurrMinTL, gnRstCfgTransparencyDCCR=gnRstCfgTransparencyDCCR, gnAgnFileTransferFileName=gnAgnFileTransferFileName, gnAdminPasswordInDefaultStateCleared=gnAdminPasswordInDefaultStateCleared, xcDrawerLedsStatus=xcDrawerLedsStatus, nplus1StandardPMDayIDF=nplus1StandardPMDayIDF, gnSoftwareDrawerVersionModemScript=gnSoftwareDrawerVersionModemScript, gnLTIMTrap=gnLTIMTrap, gnAgnInBandMngPppIp=gnAgnInBandMngPppIp, gnFastEthernetCfgDuplexMode=gnFastEthernetCfgDuplexMode, gnGenIdcCfgSerialPPPAdminStatus=gnGenIdcCfgSerialPPPAdminStatus, gnPdhMonCurrUAS=gnPdhMonCurrUAS, gnHitLessCfgSwitchingMode=gnHitLessCfgSwitchingMode, gnRLomTrap=gnRLomTrap, gnProtectCfgEntry=gnProtectCfgEntry, gnSystem=gnSystem, gnFastEthernetMonStdHiEntry=gnFastEthernetMonStdHiEntry, gnProtectXId=gnProtectXId, gnGigabitEthernetMonIntervalPacketErrorRate=gnGigabitEthernetMonIntervalPacketErrorRate, gnRLoopbackOffTrap=gnRLoopbackOffTrap, gnGigabitEthernetMonDayTable=gnGigabitEthernetMonDayTable, gnLptFarEndMonDayIdx=gnLptFarEndMonDayIdx, gnOduMonIntervalMinRL=gnOduMonIntervalMinRL, gnOduCfgXChannelBandwidth=gnOduCfgXChannelBandwidth, gnEthStatisticIfInUcastPktsMsb=gnEthStatisticIfInUcastPktsMsb, gnRHeartBeatTrap=gnRHeartBeatTrap, gnTrailCfgHoldOffTime=gnTrailCfgHoldOffTime, gnREXCTrap=gnREXCTrap, gnFastEthernetStatStatus=gnFastEthernetStatStatus, gnOduMonIntervalTable=gnOduMonIntervalTable, gnRstMonDayES=gnRstMonDayES, gnGigabitEthernetMonCurrDayIDF=gnGigabitEthernetMonCurrDayIDF, gnOduMonIntervalEntry=gnOduMonIntervalEntry, gnMdmStatXScriptType=gnMdmStatXScriptType, nplus1StandardPMCurrLastDayIDF=nplus1StandardPMCurrLastDayIDF, xcDrawerEntry=xcDrawerEntry, gnGenDrawerXName=gnGenDrawerXName, gnLossOfProtectionClearedTrap=gnLossOfProtectionClearedTrap, gnOduMonIntervalXRLThresh2Exceed=gnOduMonIntervalXRLThresh2Exceed, gnGenIdcStatFanStatus=gnGenIdcStatFanStatus, gnTrailCfgTable=gnTrailCfgTable, gnOduMonDayMaxTL=gnOduMonDayMaxTL, gnPdhMonDaySES=gnPdhMonDaySES, gnGigabitEthernetMonDayIdx=gnGigabitEthernetMonDayIdx, gnRNoSlmTrap=gnRNoSlmTrap, gnRRemoteCommFaultTrap=gnRRemoteCommFaultTrap, gnGigabitEthernetCfgClearStatistics=gnGigabitEthernetCfgClearStatistics, gnLptFarEndMonDayEntry=gnLptFarEndMonDayEntry, gnLODUSynthLockTrap=gnLODUSynthLockTrap, gnRFUFanFailureClearedTrap=gnRFUFanFailureClearedTrap, gnUcStatId=gnUcStatId, gnGenSystemWorkTime=gnGenSystemWorkTime, gnLEXCTrap=gnLEXCTrap, gnNeighborIP=gnNeighborIP, gnSubrack=gnSubrack, gnTrailCfgMismatchJ2=gnTrailCfgMismatchJ2, gnOduCfgXRslRouteToConnector=gnOduCfgXRslRouteToConnector, gnMdmMonitorX=gnMdmMonitorX, nplus1ProtectingRequestedLinkTx=nplus1ProtectingRequestedLinkTx, backplaneSlotMappingSubDrawerId=backplaneSlotMappingSubDrawerId, gnMUXCfgXTempLicenseEnable=gnMUXCfgXTempLicenseEnable, gnRFURxLevelPathOutOfRangeClearedTrap=gnRFURxLevelPathOutOfRangeClearedTrap, gnLScmOkTrap=gnLScmOkTrap, gnApplicFileName=gnApplicFileName, gnAgnCurrentAlarmTimeT=gnAgnCurrentAlarmTimeT, gnAgnInBandMngRingIpSubnet=gnAgnInBandMngRingIpSubnet, gnMdmAcmMonCurrXEntry=gnMdmAcmMonCurrXEntry, gnSoftwareVersionIDUPostResetVersion=gnSoftwareVersionIDUPostResetVersion, gnSSM=gnSSM, gnOduCfgXRealTxFreqNumber=gnOduCfgXRealTxFreqNumber, gnOduCfgXAntennaType=gnOduCfgXAntennaType, gnOduMonCurrMaxTL=gnOduMonCurrMaxTL, gnHptMonIntervalEntry=gnHptMonIntervalEntry, gnLSFPFaultTrap=gnLSFPFaultTrap, gnLptMonCurrEntry=gnLptMonCurrEntry, gnLptMonCurrBBE=gnLptMonCurrBBE, gnMstFarEndMonDayBBE=gnMstFarEndMonDayBBE, gnRstMonDayIdx=gnRstMonDayIdx, gnEthStatisticDroppedPacketsMsb=gnEthStatisticDroppedPacketsMsb, gnAgnNTPCfgSummerAdjStart=gnAgnNTPCfgSummerAdjStart, gnAgnMgrAlarmGroupMask=gnAgnMgrAlarmGroupMask, nplus1StandardPMCurrPSAC=nplus1StandardPMCurrPSAC, gnMstCfgEXCThresh=gnMstCfgEXCThresh, gnGenStatDeviceLeds=gnGenStatDeviceLeds, gnGenCfgActivateChanLoopback=gnGenCfgActivateChanLoopback, gnMdmStatXIfLoopbackTimeOut=gnMdmStatXIfLoopbackTimeOut, backplaneSlotMappingUnitNumber=backplaneSlotMappingUnitNumber, gnDiskCapacityData=gnDiskCapacityData, gnAccessCfgLoopbackOption=gnAccessCfgLoopbackOption, linkGroupingEntry=linkGroupingEntry, gnMstFarEndMonDayES=gnMstFarEndMonDayES, gnHptFarEndMonCurrLastDaySES=gnHptFarEndMonCurrLastDaySES, gnOduMonIntervalXIdx=gnOduMonIntervalXIdx, gnAgnLogFileDemodStatus=gnAgnLogFileDemodStatus, gnAgnInExternAlarmSeverity=gnAgnInExternAlarmSeverity, gnAgnFileTransfer=gnAgnFileTransfer, gnOduMonDayCombinedXRLThresh2Exceed=gnOduMonDayCombinedXRLThresh2Exceed, gnLptCfgSDThresh=gnLptCfgSDThresh, gnRExternalAlarm2OnTrap=gnRExternalAlarm2OnTrap, gnLptStatCurrentBer=gnLptStatCurrentBer, gnGenCfgSecondaryClockSource=gnGenCfgSecondaryClockSource, gnMstFarEndMonCurrEntry=gnMstFarEndMonCurrEntry, gnRstCfgE1waysideChannel=gnRstCfgE1waysideChannel, gnGenIdcStatEowExistence=gnGenIdcStatEowExistence, gnOduMonCurrDiversityXRLThresh1Exceed=gnOduMonCurrDiversityXRLThresh1Exceed, gnMdmModStatus=gnMdmModStatus, gnLNoLOFTrap=gnLNoLOFTrap, gnOduMonCurrCombinedXId=gnOduMonCurrCombinedXId, gnHptStatReceivedJ1=gnHptStatReceivedJ1, clusterPrimeIPAddress=clusterPrimeIPAddress, gnAgnCurrentAlarm=gnAgnCurrentAlarm, gnRstMonDayOFS=gnRstMonDayOFS, gnAgnCurrentAlarmUnit=gnAgnCurrentAlarmUnit, gnAgnCurrentAlarmTable=gnAgnCurrentAlarmTable, gnGenIdcCfgXpicMode=gnGenIdcCfgXpicMode, backplaneSlotMappingTable=backplaneSlotMappingTable, gnOduMonIntervalXRLThresh1Exceed=gnOduMonIntervalXRLThresh1Exceed, auxiliaryDrawerAuxCardType=auxiliaryDrawerAuxCardType, gnGigabitEthernetCfgClassifierGroupVlanSet=gnGigabitEthernetCfgClassifierGroupVlanSet, nplus1ProtectingRequestedLinkRx=nplus1ProtectingRequestedLinkRx, gnOduCfgAntennaType=gnOduCfgAntennaType, gnLODUTxLevelOutOfRangeTrap=gnLODUTxLevelOutOfRangeTrap, xcDrawerBoardHWVersion=xcDrawerBoardHWVersion, gnProtectionLockoutClearededTrap=gnProtectionLockoutClearededTrap, gnLSlmTrap=gnLSlmTrap, gnGigabitEthernetCfgSchedulerQueue3Weight=gnGigabitEthernetCfgSchedulerQueue3Weight, powerInputEntry=powerInputEntry, gnOduStatusXCelsiusTemp=gnOduStatusXCelsiusTemp, gnAgnInBandMngTribChannel=gnAgnInBandMngTribChannel, gnPdhMonCurrLastDayBBE=gnPdhMonCurrLastDayBBE, carrierProtectionLoopbackTimer=carrierProtectionLoopbackTimer, gnOduMonCurrDayTLThresh1Exceed=gnOduMonCurrDayTLThresh1Exceed, standardProtectionRevertiveLink=standardProtectionRevertiveLink, gnOduCfgXxpicClockMode=gnOduCfgXxpicClockMode, gnGigabitEthernetMonDayPacketErrorRate=gnGigabitEthernetMonDayPacketErrorRate, gnMdmCfgXLatencyType=gnMdmCfgXLatencyType, gnEthStatisticUndersizePktsMsb=gnEthStatisticUndersizePktsMsb, gnLptMon=gnLptMon, gnEthStatisticRadioSyncUnlockEventsLsb=gnEthStatisticRadioSyncUnlockEventsLsb, gnRODUPowerFailTrap=gnRODUPowerFailTrap, gnGenDrawerXDeviceLeds=gnGenDrawerXDeviceLeds, gnRTIMTrap=gnRTIMTrap, gnPdhMonDayTable=gnPdhMonDayTable, gnODUTrapCleared=gnODUTrapCleared, gnOduCfgOduLoopSupport=gnOduCfgOduLoopSupport, gnLNoAisTrap=gnLNoAisTrap)
mibBuilder.exportSymbols("CERAGON-MIB", gnRstCfgExpectedJ0=gnRstCfgExpectedJ0, gnGigabitEthernetCfgClassifierPrioBitSource=gnGigabitEthernetCfgClassifierPrioBitSource, gnGenStatDeviceCable=gnGenStatDeviceCable, gnLptFarEndMonCurrEntry=gnLptFarEndMonCurrEntry, gnGenXBytesCorrected=gnGenXBytesCorrected, gnHptCfgTransmittedJ1=gnHptCfgTransmittedJ1, gnGenXLinkId=gnGenXLinkId, gnGenIdcCfgWaySideConnector=gnGenIdcCfgWaySideConnector, nplus1StandardPMIntervalIDF=nplus1StandardPMIntervalIDF, gnGigabitEthernetCfgSchedulerPriorityOption=gnGigabitEthernetCfgSchedulerPriorityOption, gnOduMonCurrDayMinTL=gnOduMonCurrDayMinTL, gnRFUXPICClockFailureClearedTrap=gnRFUXPICClockFailureClearedTrap, gnGenIdcCfgId=gnGenIdcCfgId, gnMstMonDayTable=gnMstMonDayTable, gnRstStatClearLoopTimer=gnRstStatClearLoopTimer, gnLptCfgEntry=gnLptCfgEntry, gnAgnFileTransferODCVersionControl=gnAgnFileTransferODCVersionControl, gnOduCfgXRealRxFreqNumber=gnOduCfgXRealRxFreqNumber, gnSoftwareDrawerVersionModemScriptPostResetVersion=gnSoftwareDrawerVersionModemScriptPostResetVersion, gnNeighborInBandXId=gnNeighborInBandXId, gnTribCfgProtection=gnTribCfgProtection, gnApplicFileVersion=gnApplicFileVersion, gnLExternalAlarm2OnTrap=gnLExternalAlarm2OnTrap, gnUcCfgChNumber=gnUcCfgChNumber, gnPdhMon=gnPdhMon, gnGenDrawerXSlot2Status=gnGenDrawerXSlot2Status, gnAgnLogFileLastDemodDefectBlocks=gnAgnLogFileLastDemodDefectBlocks, gnNeighborIpRemoteIfIndex=gnNeighborIpRemoteIfIndex, gnGenIdcStatDryContact=gnGenIdcStatDryContact, gnOduStatusClearLoopTimer=gnOduStatusClearLoopTimer, gnGenCfgActivateLoopback=gnGenCfgActivateLoopback, gnGenXOperation=gnGenXOperation, membersProtectionPriorityLevel=membersProtectionPriorityLevel, gnFastEthernetCfgAutoNegotiation=gnFastEthernetCfgAutoNegotiation, powerInputTable=powerInputTable, gnAgnInBandMngRadioChannel=gnAgnInBandMngRadioChannel, gnOduCfgXMaxTxFreqNumber=gnOduCfgXMaxTxFreqNumber, gnLLoopbackOnTrap=gnLLoopbackOnTrap, gnGenCfgCLLI=gnGenCfgCLLI, gnOduMonIntervalMinTL=gnOduMonIntervalMinTL, gnLptFarEndMonIntervalBBE=gnLptFarEndMonIntervalBBE, gnOduCfgMinTxFreqNumber=gnOduCfgMinTxFreqNumber, gnLODUTxLevelInRangeTrap=gnLODUTxLevelInRangeTrap, gnRLocTrap=gnRLocTrap, topologiesOptionsMembersCarriers=topologiesOptionsMembersCarriers, gnFastEthernetMonStdHiInOctetsHC=gnFastEthernetMonStdHiInOctetsHC, gnOduStatusXRfuFwVer=gnOduStatusXRfuFwVer, gnMstFarEndMonCurrUAS=gnMstFarEndMonCurrUAS, gnOduMonCurrXMinTL=gnOduMonCurrXMinTL, gnAccessStatPrbsBer=gnAccessStatPrbsBer, gnOduStatusXRslDiversity=gnOduStatusXRslDiversity, gnAgnNTPCfgSummerAdjOffset=gnAgnNTPCfgSummerAdjOffset, topologiesOptionsGroupTopology=topologiesOptionsGroupTopology, gnRExternalAlarm5OnTrap=gnRExternalAlarm5OnTrap, gnGenStatDeviceDryContact=gnGenStatDeviceDryContact, gnMdmStatXModemSerialNumber=gnMdmStatXModemSerialNumber, gnMdm=gnMdm, gnLLoopbackOffTrap=gnLLoopbackOffTrap, gnLRemoteCommOkTrap=gnLRemoteCommOkTrap, gnNoSignalReceivedFromODUTrap=gnNoSignalReceivedFromODUTrap, gnGenFeatureSupport=gnGenFeatureSupport, gnEthStatisticAFrameTransmittedOkLsb=gnEthStatisticAFrameTransmittedOkLsb, gnFastEthernetCfgForceSpeed=gnFastEthernetCfgForceSpeed, gnAgnFileTransferProtocol=gnAgnFileTransferProtocol, gnTrailPassThroughEntry=gnTrailPassThroughEntry, gnMdmAcmMonIntervalXIDF=gnMdmAcmMonIntervalXIDF, gnOduCfgXMaxRxFreqNumber=gnOduCfgXMaxRxFreqNumber, clusterIPBase=clusterIPBase, gnAccessCfgLongCableOption=gnAccessCfgLongCableOption, gnRODUTxLevelOutOfRangeTrap=gnRODUTxLevelOutOfRangeTrap, gnOduMonCurrCombinedXEntry=gnOduMonCurrCombinedXEntry, gnLastDummyParam=gnLastDummyParam, gnVlanEthernetStatTable=gnVlanEthernetStatTable, gnGenChannelBandwidth=gnGenChannelBandwidth, gnHptMonDayTable=gnHptMonDayTable, gnAgnInterLinkAction=gnAgnInterLinkAction, gnSoftwareVersionWSPostResetVersion=gnSoftwareVersionWSPostResetVersion, gnPdhMonCurrSES=gnPdhMonCurrSES, gnHptMonCurrEntry=gnHptMonCurrEntry, gnWscCfgChNumber=gnWscCfgChNumber, gnAgnInterLinkBlockCount=gnAgnInterLinkBlockCount, gnLHitlessRadioLofOKTrap=gnLHitlessRadioLofOKTrap, gnAgnMgrId=gnAgnMgrId, gnEthStatisticPkts65to127OctetMsb=gnEthStatisticPkts65to127OctetMsb, gnGenCfgMiddleMediumConnector=gnGenCfgMiddleMediumConnector, gnGenXStandardOrg=gnGenXStandardOrg, carrierProtectionCarrierId=carrierProtectionCarrierId, gnOduMonCurrDiversityXDayMaxRL=gnOduMonCurrDiversityXDayMaxRL, gnOduMonCurrCombinedXMinRL=gnOduMonCurrCombinedXMinRL, gnLptMonIntervalIdx=gnLptMonIntervalIdx, gnOduMonCurrDiversityXRLThresh2Exceed=gnOduMonCurrDiversityXRLThresh2Exceed, gnLSystemFaultTrap=gnLSystemFaultTrap, gnLHitlessRadioLofTrap=gnLHitlessRadioLofTrap, gnGenXClearCounters=gnGenXClearCounters, gnAccessTrapCleared=gnAccessTrapCleared, gnApplicFileCompressed=gnApplicFileCompressed, gnLModemFailTrap=gnLModemFailTrap, gnGenIdcCfgClearLoopTimeout=gnGenIdcCfgClearLoopTimeout, gnAccessCfgLineCoding=gnAccessCfgLineCoding, gnGenIdcStatTable=gnGenIdcStatTable, powerInputAdmin=powerInputAdmin, gnHptCfgTug3Structure3=gnHptCfgTug3Structure3, gnTrailCfgOscillationGuardTime=gnTrailCfgOscillationGuardTime, gnOduCfgXOperation=gnOduCfgXOperation, gnMstMonDaySES=gnMstMonDaySES, gnMdmAcmMonCurrXIDF=gnMdmAcmMonCurrXIDF, ceragon=ceragon, gnGenIdcStatEowSupport=gnGenIdcStatEowSupport, gnRExternalAlarm1OffTrap=gnRExternalAlarm1OffTrap, gnOduCfgXOduLog=gnOduCfgXOduLog, gnAgnSNMPCfgTrapCommunity=gnAgnSNMPCfgTrapCommunity, cluster=cluster, gnOduMonIntervalCombinedXMinRL=gnOduMonIntervalCombinedXMinRL)
