#
# PySNMP MIB module EES-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EES-POWER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibIdentifier, enterprises, NotificationType, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Counter64, Gauge32, Unsigned32, IpAddress, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "enterprises", "NotificationType", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Counter64", "Gauge32", "Unsigned32", "IpAddress", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
ees = MibIdentifier((1, 3, 6, 1, 4, 1, 6302))
pysmi_global = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2)).setLabel("global")
powerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6302, 2, 1))
if mibBuilder.loadTexts: powerMIB.setLastUpdated('200406161934Z')
if mibBuilder.loadTexts: powerMIB.setOrganization(' Emerson Energy Systems (EES)')
class Status(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("normal", 2), ("observation", 3), ("warning", 4), ("minor", 5), ("major", 6), ("unmanaged", 7), ("restricted", 8), ("testing", 9), ("disabled", 10))

class StatusChange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("activated", 1), ("deactivated", 2))

ident = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1))
identManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identManufacturer.setStatus('current')
identModel = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identModel.setStatus('current')
identControllerFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identControllerFirmwareVersion.setStatus('current')
identName = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identName.setStatus('current')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2))
systemStatus = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 1), Status()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatus.setStatus('current')
systemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVoltage.setStatus('current')
systemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCurrent.setStatus('current')
systemUsedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUsedCapacity.setStatus('current')
psBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 5))
psBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryVoltage.setStatus('current')
psBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryCurrent.setStatus('current')
psInput = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6))
psInputLineAVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psInputLineAVoltage.setStatus('current')
psInputLineBVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psInputLineBVoltage.setStatus('current')
psInputLineCVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psInputLineCVoltage.setStatus('current')
psTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 7))
psTemperature1 = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTemperature1.setStatus('current')
psTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTemperature2.setStatus('current')
psStatusCommunication = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("interrupt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatusCommunication.setStatus('current')
psStatusBatteryMode = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("FloatCharging", 2), ("ShortTest", 3), ("BCForTest", 4), ("ManualTesting", 5), ("PlanTesting", 6), ("ACFailTesting", 7), ("ACFail", 8), ("ManualBC", 9), ("AutoBC", 10), ("CyclicBC", 11), ("MasterBC", 12), ("MasterBT", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatusBatteryMode.setStatus('current')
psSMNumber = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10))
psSMACNumber = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSMACNumber.setStatus('current')
psSMBATNumber = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSMBATNumber.setStatus('current')
psSMIONumber = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSMIONumber.setStatus('current')
alarmLastTrapNo = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLastTrapNo.setStatus('current')
alarmTrapTable = MibTable((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4), )
if mibBuilder.loadTexts: alarmTrapTable.setStatus('current')
alarmTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1), ).setIndexNames((0, "EES-POWER-MIB", "alarmTrapNo"))
if mibBuilder.loadTexts: alarmTrapEntry.setStatus('current')
alarmTrapNo = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTrapNo.setStatus('current')
alarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTime.setStatus('current')
alarmStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 3), StatusChange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatusChange.setStatus('current')
alarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 4), Status()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverity.setStatus('current')
alarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDescription.setStatus('current')
alarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmType.setStatus('current')
powerEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 5))
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6302, 2, 1, 5, 1)).setObjects(("EES-POWER-MIB", "alarmTrapNo"), ("EES-POWER-MIB", "alarmTime"), ("EES-POWER-MIB", "alarmStatusChange"), ("EES-POWER-MIB", "alarmSeverity"), ("EES-POWER-MIB", "alarmDescription"), ("EES-POWER-MIB", "alarmType"))
if mibBuilder.loadTexts: alarmTrap.setStatus('current')
mibBuilder.exportSymbols("EES-POWER-MIB", psStatusCommunication=psStatusCommunication, alarmLastTrapNo=alarmLastTrapNo, alarmType=alarmType, psInputLineCVoltage=psInputLineCVoltage, psSMIONumber=psSMIONumber, alarmTrapTable=alarmTrapTable, systemVoltage=systemVoltage, psBatteryCurrent=psBatteryCurrent, ident=ident, powerEvents=powerEvents, psSMBATNumber=psSMBATNumber, powerMIB=powerMIB, identName=identName, identModel=identModel, psTemperature=psTemperature, Status=Status, systemStatus=systemStatus, psTemperature2=psTemperature2, alarmTime=alarmTime, psSMNumber=psSMNumber, psInputLineAVoltage=psInputLineAVoltage, psInputLineBVoltage=psInputLineBVoltage, alarmTrapEntry=alarmTrapEntry, identControllerFirmwareVersion=identControllerFirmwareVersion, PYSNMP_MODULE_ID=powerMIB, identManufacturer=identManufacturer, StatusChange=StatusChange, alarmStatusChange=alarmStatusChange, systemCurrent=systemCurrent, alarmDescription=alarmDescription, psTemperature1=psTemperature1, pysmi_global=pysmi_global, psBatteryVoltage=psBatteryVoltage, alarmTrap=alarmTrap, psStatusBatteryMode=psStatusBatteryMode, psBattery=psBattery, psInput=psInput, alarmTrapNo=alarmTrapNo, psSMACNumber=psSMACNumber, ees=ees, alarmSeverity=alarmSeverity, systemUsedCapacity=systemUsedCapacity, system=system)
