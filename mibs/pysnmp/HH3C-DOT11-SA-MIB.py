#
# PySNMP MIB module HH3C-DOT11-SA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DOT11-SA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
Hh3cDot11SaIntfDevType, Hh3cDot11ObjectIDType, hh3cDot11, Hh3cDot11ChannelScopeType, Hh3cDot11RadioScopeType = mibBuilder.importSymbols("HH3C-DOT11-REF-MIB", "Hh3cDot11SaIntfDevType", "Hh3cDot11ObjectIDType", "hh3cDot11", "Hh3cDot11ChannelScopeType", "Hh3cDot11RadioScopeType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Integer32, Gauge32, IpAddress, Counter64, TimeTicks, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Integer32", "Gauge32", "IpAddress", "Counter64", "TimeTicks", "MibIdentifier", "Unsigned32")
DateAndTime, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TruthValue", "DisplayString")
hh3cDot11Sa = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13))
hh3cDot11Sa.setRevisions(('2011-08-26 20:00',))
if mibBuilder.loadTexts: hh3cDot11Sa.setLastUpdated('201108262000Z')
if mibBuilder.loadTexts: hh3cDot11Sa.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cDot11SaCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1))
hh3cDot11SaStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2))
hh3cDot11SaNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3))
hh3cDot11SaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1), )
if mibBuilder.loadTexts: hh3cDot11SaCfgTable.setStatus('current')
hh3cDot11SaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1), ).setIndexNames((0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaCfgRadioType"))
if mibBuilder.loadTexts: hh3cDot11SaCfgEntry.setStatus('current')
hh3cDot11SaCfgRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot11bg", 1), ("dot11a", 2))))
if mibBuilder.loadTexts: hh3cDot11SaCfgRadioType.setStatus('current')
hh3cDot11SaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaEnable.setStatus('current')
hh3cDot11SaRptDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("microwave", 0), ("microwaveInverter", 1), ("bluetooth", 2), ("fixedFreqOthers", 3), ("fixedFreqCordlessPhone", 4), ("fixedFreqVideo", 5), ("fixedFreqAudio", 6), ("freqHopperOthers", 7), ("freqHopperCordlessBase", 8), ("freqHopperCordlessNetwork", 9), ("freqHopperXbox", 10), ("genericInterferer", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaRptDevType.setStatus('current')
hh3cDot11SaTrapDevEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaTrapDevEnable.setStatus('current')
hh3cDot11SaTrapDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("microwave", 0), ("microwaveInverter", 1), ("bluetooth", 2), ("fixedFreqOthers", 3), ("fixedFreqCordlessPhone", 4), ("fixedFreqVideo", 5), ("fixedFreqAudio", 6), ("freqHopperOthers", 7), ("freqHopperCordlessBase", 8), ("freqHopperCordlessNetwork", 9), ("freqHopperXbox", 10), ("genericInterferer", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaTrapDevType.setStatus('current')
hh3cDot11SaTrapAQEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaTrapAQEnable.setStatus('current')
hh3cDot11SaTrapAQThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaTrapAQThreshold.setStatus('current')
hh3cDot11SaDrivenRRMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaDrivenRRMEnable.setStatus('current')
hh3cDot11SaDrivenRRMSnt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SaDrivenRRMSnt.setStatus('current')
hh3cDot11SaRtFFTDataTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1), )
if mibBuilder.loadTexts: hh3cDot11SaRtFFTDataTable.setStatus('current')
hh3cDot11SaRtFFTDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1), ).setIndexNames((0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaAPID"), (0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaRadioID"), (0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaRtDataGroupID"), (0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaFrequency"))
if mibBuilder.loadTexts: hh3cDot11SaRtFFTDataEntry.setStatus('current')
hh3cDot11SaAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 1), Hh3cDot11ObjectIDType())
if mibBuilder.loadTexts: hh3cDot11SaAPID.setStatus('current')
hh3cDot11SaRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 2), Hh3cDot11RadioScopeType())
if mibBuilder.loadTexts: hh3cDot11SaRadioID.setStatus('current')
hh3cDot11SaRtDataGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cDot11SaRtDataGroupID.setStatus('current')
hh3cDot11SaFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 4), Integer32())
if mibBuilder.loadTexts: hh3cDot11SaFrequency.setStatus('current')
hh3cDot11SaRtFreqPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaRtFreqPower.setStatus('current')
hh3cDot11SaRtFreqMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaRtFreqMaxPower.setStatus('current')
hh3cDot11SaRtFreqDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaRtFreqDutyCycle.setStatus('current')
hh3cDot11SaRtFreqDataSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaRtFreqDataSeqNo.setStatus('current')
hh3cDot11SaIntfDevTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2), )
if mibBuilder.loadTexts: hh3cDot11SaIntfDevTable.setStatus('current')
hh3cDot11SaIntfDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1), ).setIndexNames((0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaAPID"), (0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaRadioID"), (0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaDevID"))
if mibBuilder.loadTexts: hh3cDot11SaIntfDevEntry.setStatus('current')
hh3cDot11SaDevID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDot11SaDevID.setStatus('current')
hh3cDot11SaDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1, 2), Hh3cDot11SaIntfDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaDevType.setStatus('current')
hh3cDot11SaDevSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaDevSI.setStatus('current')
hh3cDot11SaDevRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaDevRSSI.setStatus('current')
hh3cDot11SaDevDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaDevDutyCycle.setStatus('current')
hh3cDot11SaDevAffectedChls = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaDevAffectedChls.setStatus('current')
hh3cDot11SaDevDetectedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaDevDetectedTime.setStatus('current')
hh3cDot11SaAirQualityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3), )
if mibBuilder.loadTexts: hh3cDot11SaAirQualityTable.setStatus('current')
hh3cDot11SaAirQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1), ).setIndexNames((0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaAPID"), (0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaRadioID"), (0, "HH3C-DOT11-SA-MIB", "hh3cDot11SaChlNum"))
if mibBuilder.loadTexts: hh3cDot11SaAirQualityEntry.setStatus('current')
hh3cDot11SaChlNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1, 1), Hh3cDot11ChannelScopeType())
if mibBuilder.loadTexts: hh3cDot11SaChlNum.setStatus('current')
hh3cDot11SaAvgQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaAvgQuality.setStatus('current')
hh3cDot11SaMinQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaMinQuality.setStatus('current')
hh3cDot11SaIntfDevNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaIntfDevNum.setStatus('current')
hh3cDot11SaWiFiUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaWiFiUtil.setStatus('current')
hh3cDot11SaNonWiFiUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaNonWiFiUtil.setStatus('current')
hh3cDot11SaNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SaNoiseFloor.setStatus('current')
hh3cDot11SaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 0))
hh3cDot11SaIntfDevDetected = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 0, 1)).setObjects(("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapAPID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapRadioID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapDevID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapIntfDevType"), ("HH3C-DOT11-SA-MIB", "hh3cDot11APTrapDevSI"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapDevRSSI"), ("HH3C-DOT11-SA-MIB", "hh3cDot11APTrapDevDC"), ("HH3C-DOT11-SA-MIB", "hh3cDot11APTrapDevChls"), ("HH3C-DOT11-SA-MIB", "hh3cDot11APTrapDevDctTime"))
if mibBuilder.loadTexts: hh3cDot11SaIntfDevDetected.setStatus('current')
hh3cDot11SaIntfDevDisappear = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 0, 2)).setObjects(("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapAPID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapRadioID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapDevID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapIntfDevType"))
if mibBuilder.loadTexts: hh3cDot11SaIntfDevDisappear.setStatus('current')
hh3cDot11SaChlQltLow = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 0, 3)).setObjects(("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapAPID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapRadioID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapChlNum"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapChlQlt"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapChlIntfNum"))
if mibBuilder.loadTexts: hh3cDot11SaChlQltLow.setStatus('current')
hh3cDot11SaChlQltRecover = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 0, 4)).setObjects(("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapAPID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapRadioID"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapChlNum"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapChlQlt"), ("HH3C-DOT11-SA-MIB", "hh3cDot11SaTrapChlIntfNum"))
if mibBuilder.loadTexts: hh3cDot11SaChlQltRecover.setStatus('current')
hh3cDot11SaTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1))
hh3cDot11SaTrapAPID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 1), Hh3cDot11ObjectIDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapAPID.setStatus('current')
hh3cDot11SaTrapRadioID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 2), Hh3cDot11RadioScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapRadioID.setStatus('current')
hh3cDot11SaTrapDevID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapDevID.setStatus('current')
hh3cDot11SaTrapIntfDevType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 4), Hh3cDot11SaIntfDevType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapIntfDevType.setStatus('current')
hh3cDot11APTrapDevSI = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11APTrapDevSI.setStatus('current')
hh3cDot11SaTrapDevRSSI = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapDevRSSI.setStatus('current')
hh3cDot11APTrapDevDC = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11APTrapDevDC.setStatus('current')
hh3cDot11APTrapDevChls = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11APTrapDevChls.setStatus('current')
hh3cDot11APTrapDevDctTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 9), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11APTrapDevDctTime.setStatus('current')
hh3cDot11SaTrapChlNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 10), Hh3cDot11ChannelScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapChlNum.setStatus('current')
hh3cDot11SaTrapChlQlt = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapChlQlt.setStatus('current')
hh3cDot11SaTrapChlIntfNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 13, 3, 1, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11SaTrapChlIntfNum.setStatus('current')
mibBuilder.exportSymbols("HH3C-DOT11-SA-MIB", hh3cDot11SaEnable=hh3cDot11SaEnable, hh3cDot11SaTrapAQThreshold=hh3cDot11SaTrapAQThreshold, hh3cDot11SaDrivenRRMSnt=hh3cDot11SaDrivenRRMSnt, hh3cDot11SaNotifyGroup=hh3cDot11SaNotifyGroup, hh3cDot11SaStatusGroup=hh3cDot11SaStatusGroup, hh3cDot11SaAPID=hh3cDot11SaAPID, hh3cDot11SaTrapDevID=hh3cDot11SaTrapDevID, hh3cDot11SaRtFFTDataTable=hh3cDot11SaRtFFTDataTable, PYSNMP_MODULE_ID=hh3cDot11Sa, hh3cDot11SaIntfDevNum=hh3cDot11SaIntfDevNum, hh3cDot11SaDevDutyCycle=hh3cDot11SaDevDutyCycle, hh3cDot11SaRadioID=hh3cDot11SaRadioID, hh3cDot11SaTraps=hh3cDot11SaTraps, hh3cDot11SaDevAffectedChls=hh3cDot11SaDevAffectedChls, hh3cDot11SaTrapRadioID=hh3cDot11SaTrapRadioID, hh3cDot11SaTrapAPID=hh3cDot11SaTrapAPID, hh3cDot11SaTrapDevEnable=hh3cDot11SaTrapDevEnable, hh3cDot11SaAvgQuality=hh3cDot11SaAvgQuality, hh3cDot11SaRtFreqDutyCycle=hh3cDot11SaRtFreqDutyCycle, hh3cDot11SaCfgGroup=hh3cDot11SaCfgGroup, hh3cDot11SaChlNum=hh3cDot11SaChlNum, hh3cDot11SaTrapChlQlt=hh3cDot11SaTrapChlQlt, hh3cDot11APTrapDevSI=hh3cDot11APTrapDevSI, hh3cDot11SaTrapChlNum=hh3cDot11SaTrapChlNum, hh3cDot11SaCfgEntry=hh3cDot11SaCfgEntry, hh3cDot11SaAirQualityEntry=hh3cDot11SaAirQualityEntry, hh3cDot11SaTrapVars=hh3cDot11SaTrapVars, hh3cDot11SaDevType=hh3cDot11SaDevType, hh3cDot11SaNonWiFiUtil=hh3cDot11SaNonWiFiUtil, hh3cDot11SaRtDataGroupID=hh3cDot11SaRtDataGroupID, hh3cDot11SaDrivenRRMEnable=hh3cDot11SaDrivenRRMEnable, hh3cDot11SaMinQuality=hh3cDot11SaMinQuality, hh3cDot11SaTrapDevType=hh3cDot11SaTrapDevType, hh3cDot11SaRtFreqMaxPower=hh3cDot11SaRtFreqMaxPower, hh3cDot11SaDevID=hh3cDot11SaDevID, hh3cDot11SaTrapAQEnable=hh3cDot11SaTrapAQEnable, hh3cDot11SaIntfDevTable=hh3cDot11SaIntfDevTable, hh3cDot11SaNoiseFloor=hh3cDot11SaNoiseFloor, hh3cDot11SaTrapIntfDevType=hh3cDot11SaTrapIntfDevType, hh3cDot11SaDevSI=hh3cDot11SaDevSI, hh3cDot11SaIntfDevDisappear=hh3cDot11SaIntfDevDisappear, hh3cDot11SaWiFiUtil=hh3cDot11SaWiFiUtil, hh3cDot11SaFrequency=hh3cDot11SaFrequency, hh3cDot11SaRptDevType=hh3cDot11SaRptDevType, hh3cDot11SaRtFreqDataSeqNo=hh3cDot11SaRtFreqDataSeqNo, hh3cDot11SaRtFFTDataEntry=hh3cDot11SaRtFFTDataEntry, hh3cDot11SaRtFreqPower=hh3cDot11SaRtFreqPower, hh3cDot11SaTrapChlIntfNum=hh3cDot11SaTrapChlIntfNum, hh3cDot11SaAirQualityTable=hh3cDot11SaAirQualityTable, hh3cDot11SaCfgTable=hh3cDot11SaCfgTable, hh3cDot11SaChlQltLow=hh3cDot11SaChlQltLow, hh3cDot11SaChlQltRecover=hh3cDot11SaChlQltRecover, hh3cDot11SaTrapDevRSSI=hh3cDot11SaTrapDevRSSI, hh3cDot11SaDevDetectedTime=hh3cDot11SaDevDetectedTime, hh3cDot11SaCfgRadioType=hh3cDot11SaCfgRadioType, hh3cDot11SaIntfDevEntry=hh3cDot11SaIntfDevEntry, hh3cDot11SaIntfDevDetected=hh3cDot11SaIntfDevDetected, hh3cDot11SaDevRSSI=hh3cDot11SaDevRSSI, hh3cDot11APTrapDevDC=hh3cDot11APTrapDevDC, hh3cDot11APTrapDevDctTime=hh3cDot11APTrapDevDctTime, hh3cDot11Sa=hh3cDot11Sa, hh3cDot11APTrapDevChls=hh3cDot11APTrapDevChls)
