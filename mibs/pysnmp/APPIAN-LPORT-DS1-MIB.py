#
# PySNMP MIB module APPIAN-LPORT-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-LPORT-DS1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisRingId, acChassisCurrentTime = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisRingId", "acChassisCurrentTime")
acLport, AcAdminStatus, AcNodeId = mibBuilder.importSymbols("APPIAN-SMI-MIB", "acLport", "AcAdminStatus", "AcNodeId")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, MibIdentifier, IpAddress, TimeTicks, Bits, Counter32, Integer32, iso, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "MibIdentifier", "IpAddress", "TimeTicks", "Bits", "Counter32", "Integer32", "iso", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue")
acLogicalDs1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2))
if mibBuilder.loadTexts: acLogicalDs1.setLastUpdated('0008210000Z')
if mibBuilder.loadTexts: acLogicalDs1.setOrganization('Appian Communications, Inc.')
acLogicalDs1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1), )
if mibBuilder.loadTexts: acLogicalDs1ConfigTable.setStatus('current')
acLogicalDs1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1ConfigEntry.setStatus('current')
acLogicalDs1ConfigNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ConfigNodeId.setStatus('current')
acLogicalDs1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ConfigIndex.setStatus('current')
acLogicalDs1ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 3), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigAdminStatus.setStatus('current')
acLogicalDs1ConfigTimeElapsedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedInterval.setStatus('current')
acLogicalDs1ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidIntervals.setStatus('current')
acLogicalDs1ConfigTimeElapsedDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedDay.setStatus('current')
acLogicalDs1ConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidDays.setStatus('current')
acLogicalDs1ConfigTimeElapsedFarEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedFarEndInterval.setStatus('current')
acLogicalDs1ConfigValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidFarEndIntervals.setStatus('current')
acLogicalDs1ConfigTimeElapsedFarEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedFarEndDay.setStatus('current')
acLogicalDs1ConfigValidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidFarEndDays.setStatus('current')
acLogicalDs1ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ds1SendNoCode", 1), ("ds1SendLineCode", 2), ("ds1SendPayloadCode", 3), ("ds1SendResetCode", 4), ("ds1SendQRS", 5), ("ds1Send511Pattern", 6), ("ds1Send3in24Pattern", 7), ("ds1SendOtherTestPattern", 8))).clone('ds1SendNoCode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigSendCode.setStatus('current')
acLogicalDs1ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigCircuitIdentifier.setStatus('current')
acLogicalDs1ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ds1NoLoop", 1), ("ds1PayloadLoop", 2), ("ds1LineLoop", 3), ("ds1OtherLoop", 4), ("ds1InwardLoop", 5), ("ds1DualLoop", 6))).clone('ds1NoLoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigLoopbackConfig.setStatus('current')
acLogicalDs1ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatus.setStatus('current')
acLogicalDs1ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTransmitClockSource.setStatus('current')
acLogicalDs1ConfigInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidIntervals.setStatus('current')
acLogicalDs1ConfigInvalidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidDays.setStatus('current')
acLogicalDs1ConfigInvalidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidFarEndIntervals.setStatus('current')
acLogicalDs1ConfigInvalidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidFarEndDays.setStatus('current')
acLogicalDs1ConfigLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatusLastChange.setStatus('current')
acLogicalDs1ConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatusChangeTrapEnable.setStatus('current')
acLogicalDs1ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigLoopbackStatus.setStatus('current')
acLogicalDs1ConfigVTNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigVTNumber.setStatus('current')
acLogicalDs1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2), )
if mibBuilder.loadTexts: acLogicalDs1IntervalTable.setStatus('current')
acLogicalDs1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1IntervalNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1IntervalIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1IntervalNumber"))
if mibBuilder.loadTexts: acLogicalDs1IntervalEntry.setStatus('current')
acLogicalDs1IntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1IntervalNodeId.setStatus('current')
acLogicalDs1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1IntervalIndex.setStatus('current')
acLogicalDs1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1IntervalNumber.setStatus('current')
acLogicalDs1IntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalValidStats.setStatus('current')
acLogicalDs1IntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1IntervalResetStats.setStatus('current')
acLogicalDs1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalESs.setStatus('current')
acLogicalDs1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalSESs.setStatus('current')
acLogicalDs1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalSEFSs.setStatus('current')
acLogicalDs1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalUASs.setStatus('current')
acLogicalDs1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalCSSs.setStatus('current')
acLogicalDs1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalPCVs.setStatus('current')
acLogicalDs1IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalLESs.setStatus('current')
acLogicalDs1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalBESs.setStatus('current')
acLogicalDs1IntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalDMs.setStatus('current')
acLogicalDs1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalLCVs.setStatus('current')
acLogicalDs1DayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3), )
if mibBuilder.loadTexts: acLogicalDs1DayTable.setStatus('current')
acLogicalDs1DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1DayNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1DayIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1DayNumber"))
if mibBuilder.loadTexts: acLogicalDs1DayEntry.setStatus('current')
acLogicalDs1DayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1DayNodeId.setStatus('current')
acLogicalDs1DayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1DayIndex.setStatus('current')
acLogicalDs1DayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1DayNumber.setStatus('current')
acLogicalDs1DayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayValidStats.setStatus('current')
acLogicalDs1DayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1DayResetStats.setStatus('current')
acLogicalDs1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayESs.setStatus('current')
acLogicalDs1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DaySESs.setStatus('current')
acLogicalDs1DaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DaySEFSs.setStatus('current')
acLogicalDs1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayUASs.setStatus('current')
acLogicalDs1DayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayCSSs.setStatus('current')
acLogicalDs1DayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayPCVs.setStatus('current')
acLogicalDs1DayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayLESs.setStatus('current')
acLogicalDs1DayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayBESs.setStatus('current')
acLogicalDs1DayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayDMs.setStatus('current')
acLogicalDs1DayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayLCVs.setStatus('current')
acLogicalDs1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4), )
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalTable.setStatus('current')
acLogicalDs1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndIntervalNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndIntervalIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndIntervalNumber"))
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalEntry.setStatus('current')
acLogicalDs1FarEndIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalNodeId.setStatus('current')
acLogicalDs1FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalIndex.setStatus('current')
acLogicalDs1FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalNumber.setStatus('current')
acLogicalDs1FarEndIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalValidStats.setStatus('current')
acLogicalDs1FarEndIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalResetStats.setStatus('current')
acLogicalDs1FarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalESs.setStatus('current')
acLogicalDs1FarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalSESs.setStatus('current')
acLogicalDs1FarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalSEFSs.setStatus('current')
acLogicalDs1FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalUASs.setStatus('current')
acLogicalDs1FarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalCSSs.setStatus('current')
acLogicalDs1FarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalLESs.setStatus('current')
acLogicalDs1FarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalPCVs.setStatus('current')
acLogicalDs1FarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalBESs.setStatus('current')
acLogicalDs1FarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalDMs.setStatus('current')
acLogicalDs1FarEndDayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5), )
if mibBuilder.loadTexts: acLogicalDs1FarEndDayTable.setStatus('current')
acLogicalDs1FarEndDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndDayNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndDayIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndDayNumber"))
if mibBuilder.loadTexts: acLogicalDs1FarEndDayEntry.setStatus('current')
acLogicalDs1FarEndDayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayNodeId.setStatus('current')
acLogicalDs1FarEndDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayIndex.setStatus('current')
acLogicalDs1FarEndDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayNumber.setStatus('current')
acLogicalDs1FarEndDayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayValidStats.setStatus('current')
acLogicalDs1FarEndDayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayResetStats.setStatus('current')
acLogicalDs1FarEndDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayESs.setStatus('current')
acLogicalDs1FarEndDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDaySESs.setStatus('current')
acLogicalDs1FarEndDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDaySEFSs.setStatus('current')
acLogicalDs1FarEndDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayUASs.setStatus('current')
acLogicalDs1FarEndDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayCSSs.setStatus('current')
acLogicalDs1FarEndDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayLESs.setStatus('current')
acLogicalDs1FarEndDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayPCVs.setStatus('current')
acLogicalDs1FarEndDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayBESs.setStatus('current')
acLogicalDs1FarEndDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayDMs.setStatus('current')
acLogicalDs1ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6), )
if mibBuilder.loadTexts: acLogicalDs1ThresholdTable.setStatus('current')
acLogicalDs1ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ThresholdEntry.setStatus('current')
acLogicalDs1ThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNodeId.setStatus('current')
acLogicalDs1ThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ThresholdIndex.setStatus('current')
acLogicalDs1ThresholdNEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalESs.setStatus('current')
acLogicalDs1ThresholdNEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalSESs.setStatus('current')
acLogicalDs1ThresholdNEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalSEFSs.setStatus('current')
acLogicalDs1ThresholdNEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalUASs.setStatus('current')
acLogicalDs1ThresholdNEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalCSSs.setStatus('current')
acLogicalDs1ThresholdNEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalPCVs.setStatus('current')
acLogicalDs1ThresholdNEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalLESs.setStatus('current')
acLogicalDs1ThresholdNEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalBESs.setStatus('current')
acLogicalDs1ThresholdNEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalDMs.setStatus('current')
acLogicalDs1ThresholdNEIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalLCVs.setStatus('current')
acLogicalDs1ThresholdNEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayESs.setStatus('current')
acLogicalDs1ThresholdNEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDaySESs.setStatus('current')
acLogicalDs1ThresholdNEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDaySEFSs.setStatus('current')
acLogicalDs1ThresholdNEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayUASs.setStatus('current')
acLogicalDs1ThresholdNEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayCSSs.setStatus('current')
acLogicalDs1ThresholdNEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayPCVs.setStatus('current')
acLogicalDs1ThresholdNEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayLESs.setStatus('current')
acLogicalDs1ThresholdNEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayBESs.setStatus('current')
acLogicalDs1ThresholdNEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayDMs.setStatus('current')
acLogicalDs1ThresholdNEDayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayLCVs.setStatus('current')
acLogicalDs1ThresholdFEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalESs.setStatus('current')
acLogicalDs1ThresholdFEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalSESs.setStatus('current')
acLogicalDs1ThresholdFEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalSEFSs.setStatus('current')
acLogicalDs1ThresholdFEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalUASs.setStatus('current')
acLogicalDs1ThresholdFEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalCSSs.setStatus('current')
acLogicalDs1ThresholdFEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalLESs.setStatus('current')
acLogicalDs1ThresholdFEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalPCVs.setStatus('current')
acLogicalDs1ThresholdFEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalBESs.setStatus('current')
acLogicalDs1ThresholdFEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalDMs.setStatus('current')
acLogicalDs1ThresholdFEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayESs.setStatus('current')
acLogicalDs1ThresholdFEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDaySESs.setStatus('current')
acLogicalDs1ThresholdFEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDaySEFSs.setStatus('current')
acLogicalDs1ThresholdFEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayUASs.setStatus('current')
acLogicalDs1ThresholdFEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayCSSs.setStatus('current')
acLogicalDs1ThresholdFEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayLESs.setStatus('current')
acLogicalDs1ThresholdFEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayPCVs.setStatus('current')
acLogicalDs1ThresholdFEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayBESs.setStatus('current')
acLogicalDs1ThresholdFEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayDMs.setStatus('current')
acLogicalDs1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0))
acLogicalDs1LineStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigLineStatus"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigLineStatusLastChange"))
if mibBuilder.loadTexts: acLogicalDs1LineStatusChangeTrap.setStatus('current')
acLogicalDs1StatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1StatsResetTrap.setStatus('current')
acLogicalDs1CfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1CfgErrorTrap.setStatus('current')
acLogicalDs1LinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1LinkDownTrap.setStatus('current')
acLogicalDs1LinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1LinkUpTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 7)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 8)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalSESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 9)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 10)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalUASsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 11)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalCSSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 12)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalPCVsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 13)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalLESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 14)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalBESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 15)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalDMsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEIntervalLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 16)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalLCVsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 17)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 18)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDaySESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 19)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDaySEFSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 20)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayUASsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 21)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayCSSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 22)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayPCVsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 23)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayLESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 24)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayBESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 25)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayDMsTrap.setStatus('current')
acLogicalDs1ExceededThresholdNEDayLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 26)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayLCVsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 27)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 28)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalSESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 29)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 30)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalUASsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 31)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalCSSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 32)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalLESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 33)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalPCVsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 34)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalBESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 35)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalDMsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 36)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 37)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDaySESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 38)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDaySEFSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 39)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayUASsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 40)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayCSSsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 41)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayLESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 42)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayPCVsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 43)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayBESsTrap.setStatus('current')
acLogicalDs1ExceededThresholdFEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 44)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayDMsTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-LPORT-DS1-MIB", acLogicalDs1FarEndIntervalPCVs=acLogicalDs1FarEndIntervalPCVs, acLogicalDs1ExceededThresholdFEDayPCVsTrap=acLogicalDs1ExceededThresholdFEDayPCVsTrap, acLogicalDs1IntervalLCVs=acLogicalDs1IntervalLCVs, acLogicalDs1ExceededThresholdNEDayBESsTrap=acLogicalDs1ExceededThresholdNEDayBESsTrap, acLogicalDs1ExceededThresholdNEDayCSSsTrap=acLogicalDs1ExceededThresholdNEDayCSSsTrap, acLogicalDs1ThresholdFEDayESs=acLogicalDs1ThresholdFEDayESs, acLogicalDs1IntervalValidStats=acLogicalDs1IntervalValidStats, acLogicalDs1ExceededThresholdNEDayESsTrap=acLogicalDs1ExceededThresholdNEDayESsTrap, acLogicalDs1ThresholdNEDayCSSs=acLogicalDs1ThresholdNEDayCSSs, acLogicalDs1FarEndIntervalSEFSs=acLogicalDs1FarEndIntervalSEFSs, acLogicalDs1ThresholdFEIntervalSESs=acLogicalDs1ThresholdFEIntervalSESs, acLogicalDs1StatsResetTrap=acLogicalDs1StatsResetTrap, acLogicalDs1ThresholdFEIntervalLESs=acLogicalDs1ThresholdFEIntervalLESs, acLogicalDs1IntervalDMs=acLogicalDs1IntervalDMs, acLogicalDs1ExceededThresholdNEDayUASsTrap=acLogicalDs1ExceededThresholdNEDayUASsTrap, acLogicalDs1DayCSSs=acLogicalDs1DayCSSs, acLogicalDs1ConfigTimeElapsedFarEndDay=acLogicalDs1ConfigTimeElapsedFarEndDay, acLogicalDs1FarEndIntervalSESs=acLogicalDs1FarEndIntervalSESs, acLogicalDs1ThresholdNodeId=acLogicalDs1ThresholdNodeId, acLogicalDs1ConfigInvalidFarEndIntervals=acLogicalDs1ConfigInvalidFarEndIntervals, acLogicalDs1FarEndDayValidStats=acLogicalDs1FarEndDayValidStats, acLogicalDs1=acLogicalDs1, acLogicalDs1FarEndDayResetStats=acLogicalDs1FarEndDayResetStats, acLogicalDs1ThresholdNEIntervalSESs=acLogicalDs1ThresholdNEIntervalSESs, acLogicalDs1ThresholdNEDaySEFSs=acLogicalDs1ThresholdNEDaySEFSs, acLogicalDs1FarEndDayPCVs=acLogicalDs1FarEndDayPCVs, acLogicalDs1ThresholdIndex=acLogicalDs1ThresholdIndex, acLogicalDs1ThresholdNEDayUASs=acLogicalDs1ThresholdNEDayUASs, acLogicalDs1ExceededThresholdNEDayLESsTrap=acLogicalDs1ExceededThresholdNEDayLESsTrap, acLogicalDs1ConfigAdminStatus=acLogicalDs1ConfigAdminStatus, acLogicalDs1IntervalNumber=acLogicalDs1IntervalNumber, acLogicalDs1ConfigLoopbackConfig=acLogicalDs1ConfigLoopbackConfig, acLogicalDs1ThresholdFEIntervalDMs=acLogicalDs1ThresholdFEIntervalDMs, acLogicalDs1ThresholdNEIntervalPCVs=acLogicalDs1ThresholdNEIntervalPCVs, acLogicalDs1ExceededThresholdNEDayLCVsTrap=acLogicalDs1ExceededThresholdNEDayLCVsTrap, acLogicalDs1DayESs=acLogicalDs1DayESs, acLogicalDs1ExceededThresholdFEIntervalUASsTrap=acLogicalDs1ExceededThresholdFEIntervalUASsTrap, acLogicalDs1FarEndDayBESs=acLogicalDs1FarEndDayBESs, acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap=acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap, acLogicalDs1ExceededThresholdFEIntervalLESsTrap=acLogicalDs1ExceededThresholdFEIntervalLESsTrap, acLogicalDs1DaySESs=acLogicalDs1DaySESs, acLogicalDs1ConfigInvalidDays=acLogicalDs1ConfigInvalidDays, acLogicalDs1DayEntry=acLogicalDs1DayEntry, acLogicalDs1IntervalPCVs=acLogicalDs1IntervalPCVs, acLogicalDs1IntervalEntry=acLogicalDs1IntervalEntry, acLogicalDs1ThresholdNEDaySESs=acLogicalDs1ThresholdNEDaySESs, acLogicalDs1ConfigTable=acLogicalDs1ConfigTable, acLogicalDs1IntervalBESs=acLogicalDs1IntervalBESs, acLogicalDs1FarEndIntervalDMs=acLogicalDs1FarEndIntervalDMs, acLogicalDs1IntervalCSSs=acLogicalDs1IntervalCSSs, acLogicalDs1ThresholdFEIntervalPCVs=acLogicalDs1ThresholdFEIntervalPCVs, acLogicalDs1ThresholdNEDayBESs=acLogicalDs1ThresholdNEDayBESs, acLogicalDs1ConfigTransmitClockSource=acLogicalDs1ConfigTransmitClockSource, acLogicalDs1ConfigNodeId=acLogicalDs1ConfigNodeId, acLogicalDs1FarEndDayNodeId=acLogicalDs1FarEndDayNodeId, acLogicalDs1ExceededThresholdFEDayLESsTrap=acLogicalDs1ExceededThresholdFEDayLESsTrap, acLogicalDs1ExceededThresholdFEIntervalBESsTrap=acLogicalDs1ExceededThresholdFEIntervalBESsTrap, acLogicalDs1ThresholdFEDayDMs=acLogicalDs1ThresholdFEDayDMs, acLogicalDs1ConfigInvalidFarEndDays=acLogicalDs1ConfigInvalidFarEndDays, acLogicalDs1ThresholdNEDayESs=acLogicalDs1ThresholdNEDayESs, acLogicalDs1ExceededThresholdFEDaySEFSsTrap=acLogicalDs1ExceededThresholdFEDaySEFSsTrap, acLogicalDs1FarEndDaySEFSs=acLogicalDs1FarEndDaySEFSs, acLogicalDs1IntervalSESs=acLogicalDs1IntervalSESs, acLogicalDs1FarEndDayUASs=acLogicalDs1FarEndDayUASs, acLogicalDs1ExceededThresholdNEDaySESsTrap=acLogicalDs1ExceededThresholdNEDaySESsTrap, acLogicalDs1ThresholdNEIntervalBESs=acLogicalDs1ThresholdNEIntervalBESs, acLogicalDs1ConfigLineStatusLastChange=acLogicalDs1ConfigLineStatusLastChange, acLogicalDs1FarEndDayLESs=acLogicalDs1FarEndDayLESs, acLogicalDs1ThresholdNEIntervalSEFSs=acLogicalDs1ThresholdNEIntervalSEFSs, acLogicalDs1ExceededThresholdFEIntervalDMsTrap=acLogicalDs1ExceededThresholdFEIntervalDMsTrap, acLogicalDs1ThresholdNEDayDMs=acLogicalDs1ThresholdNEDayDMs, acLogicalDs1ThresholdNEIntervalDMs=acLogicalDs1ThresholdNEIntervalDMs, acLogicalDs1ThresholdNEDayPCVs=acLogicalDs1ThresholdNEDayPCVs, acLogicalDs1ExceededThresholdNEIntervalCSSsTrap=acLogicalDs1ExceededThresholdNEIntervalCSSsTrap, acLogicalDs1FarEndIntervalNumber=acLogicalDs1FarEndIntervalNumber, acLogicalDs1LineStatusChangeTrap=acLogicalDs1LineStatusChangeTrap, acLogicalDs1FarEndIntervalBESs=acLogicalDs1FarEndIntervalBESs, acLogicalDs1ThresholdFEDayBESs=acLogicalDs1ThresholdFEDayBESs, acLogicalDs1CfgErrorTrap=acLogicalDs1CfgErrorTrap, acLogicalDs1ThresholdFEDayPCVs=acLogicalDs1ThresholdFEDayPCVs, PYSNMP_MODULE_ID=acLogicalDs1, acLogicalDs1DayNumber=acLogicalDs1DayNumber, acLogicalDs1ExceededThresholdNEIntervalPCVsTrap=acLogicalDs1ExceededThresholdNEIntervalPCVsTrap, acLogicalDs1ConfigValidFarEndDays=acLogicalDs1ConfigValidFarEndDays, acLogicalDs1FarEndDayESs=acLogicalDs1FarEndDayESs, acLogicalDs1ConfigEntry=acLogicalDs1ConfigEntry, acLogicalDs1ExceededThresholdFEIntervalSESsTrap=acLogicalDs1ExceededThresholdFEIntervalSESsTrap, acLogicalDs1DayValidStats=acLogicalDs1DayValidStats, acLogicalDs1ConfigValidDays=acLogicalDs1ConfigValidDays, acLogicalDs1ExceededThresholdNEDaySEFSsTrap=acLogicalDs1ExceededThresholdNEDaySEFSsTrap, acLogicalDs1ExceededThresholdNEDayDMsTrap=acLogicalDs1ExceededThresholdNEDayDMsTrap, acLogicalDs1ExceededThresholdNEDayPCVsTrap=acLogicalDs1ExceededThresholdNEDayPCVsTrap, acLogicalDs1ExceededThresholdFEIntervalCSSsTrap=acLogicalDs1ExceededThresholdFEIntervalCSSsTrap, acLogicalDs1DayBESs=acLogicalDs1DayBESs, acLogicalDs1ThresholdFEIntervalBESs=acLogicalDs1ThresholdFEIntervalBESs, acLogicalDs1IntervalLESs=acLogicalDs1IntervalLESs, acLogicalDs1FarEndDayNumber=acLogicalDs1FarEndDayNumber, acLogicalDs1ThresholdNEIntervalUASs=acLogicalDs1ThresholdNEIntervalUASs, acLogicalDs1ConfigTimeElapsedFarEndInterval=acLogicalDs1ConfigTimeElapsedFarEndInterval, acLogicalDs1ExceededThresholdNEIntervalSESsTrap=acLogicalDs1ExceededThresholdNEIntervalSESsTrap, acLogicalDs1FarEndIntervalIndex=acLogicalDs1FarEndIntervalIndex, acLogicalDs1FarEndIntervalUASs=acLogicalDs1FarEndIntervalUASs, acLogicalDs1ThresholdNEIntervalLESs=acLogicalDs1ThresholdNEIntervalLESs, acLogicalDs1ConfigIndex=acLogicalDs1ConfigIndex, acLogicalDs1FarEndIntervalResetStats=acLogicalDs1FarEndIntervalResetStats, acLogicalDs1FarEndDayCSSs=acLogicalDs1FarEndDayCSSs, acLogicalDs1DayDMs=acLogicalDs1DayDMs, acLogicalDs1DayIndex=acLogicalDs1DayIndex, acLogicalDs1FarEndIntervalLESs=acLogicalDs1FarEndIntervalLESs, acLogicalDs1FarEndDaySESs=acLogicalDs1FarEndDaySESs, acLogicalDs1IntervalUASs=acLogicalDs1IntervalUASs, acLogicalDs1ExceededThresholdFEIntervalESsTrap=acLogicalDs1ExceededThresholdFEIntervalESsTrap, acLogicalDs1DayNodeId=acLogicalDs1DayNodeId, acLogicalDs1FarEndIntervalESs=acLogicalDs1FarEndIntervalESs, acLogicalDs1LinkUpTrap=acLogicalDs1LinkUpTrap, acLogicalDs1ConfigTimeElapsedInterval=acLogicalDs1ConfigTimeElapsedInterval, acLogicalDs1DayUASs=acLogicalDs1DayUASs, acLogicalDs1IntervalTable=acLogicalDs1IntervalTable, acLogicalDs1FarEndDayIndex=acLogicalDs1FarEndDayIndex, acLogicalDs1ThresholdFEDaySESs=acLogicalDs1ThresholdFEDaySESs, acLogicalDs1ExceededThresholdFEDayBESsTrap=acLogicalDs1ExceededThresholdFEDayBESsTrap, acLogicalDs1DaySEFSs=acLogicalDs1DaySEFSs, acLogicalDs1ThresholdFEDaySEFSs=acLogicalDs1ThresholdFEDaySEFSs, acLogicalDs1IntervalResetStats=acLogicalDs1IntervalResetStats, acLogicalDs1ThresholdNEDayLESs=acLogicalDs1ThresholdNEDayLESs, acLogicalDs1IntervalNodeId=acLogicalDs1IntervalNodeId, acLogicalDs1FarEndIntervalValidStats=acLogicalDs1FarEndIntervalValidStats, acLogicalDs1ThresholdFEIntervalUASs=acLogicalDs1ThresholdFEIntervalUASs, acLogicalDs1ConfigSendCode=acLogicalDs1ConfigSendCode, acLogicalDs1ExceededThresholdFEDayDMsTrap=acLogicalDs1ExceededThresholdFEDayDMsTrap, acLogicalDs1ThresholdNEIntervalCSSs=acLogicalDs1ThresholdNEIntervalCSSs, acLogicalDs1FarEndIntervalCSSs=acLogicalDs1FarEndIntervalCSSs, acLogicalDs1ExceededThresholdFEDayUASsTrap=acLogicalDs1ExceededThresholdFEDayUASsTrap, acLogicalDs1DayPCVs=acLogicalDs1DayPCVs, acLogicalDs1ConfigCircuitIdentifier=acLogicalDs1ConfigCircuitIdentifier, acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap=acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap, acLogicalDs1DayLCVs=acLogicalDs1DayLCVs, acLogicalDs1ThresholdFEDayUASs=acLogicalDs1ThresholdFEDayUASs, acLogicalDs1FarEndDayDMs=acLogicalDs1FarEndDayDMs, acLogicalDs1ThresholdFEDayLESs=acLogicalDs1ThresholdFEDayLESs, acLogicalDs1ExceededThresholdNEIntervalLCVsTrap=acLogicalDs1ExceededThresholdNEIntervalLCVsTrap, acLogicalDs1ConfigLoopbackStatus=acLogicalDs1ConfigLoopbackStatus, acLogicalDs1ExceededThresholdFEDayCSSsTrap=acLogicalDs1ExceededThresholdFEDayCSSsTrap, acLogicalDs1ThresholdFEIntervalSEFSs=acLogicalDs1ThresholdFEIntervalSEFSs, acLogicalDs1ThresholdNEIntervalESs=acLogicalDs1ThresholdNEIntervalESs, acLogicalDs1ThresholdFEDayCSSs=acLogicalDs1ThresholdFEDayCSSs, acLogicalDs1ExceededThresholdFEDayESsTrap=acLogicalDs1ExceededThresholdFEDayESsTrap, acLogicalDs1ConfigInvalidIntervals=acLogicalDs1ConfigInvalidIntervals, acLogicalDs1FarEndIntervalEntry=acLogicalDs1FarEndIntervalEntry, acLogicalDs1Traps=acLogicalDs1Traps, acLogicalDs1DayTable=acLogicalDs1DayTable, acLogicalDs1ExceededThresholdNEIntervalLESsTrap=acLogicalDs1ExceededThresholdNEIntervalLESsTrap, acLogicalDs1DayResetStats=acLogicalDs1DayResetStats, acLogicalDs1ConfigValidIntervals=acLogicalDs1ConfigValidIntervals, acLogicalDs1ThresholdNEIntervalLCVs=acLogicalDs1ThresholdNEIntervalLCVs, acLogicalDs1ConfigLineStatusChangeTrapEnable=acLogicalDs1ConfigLineStatusChangeTrapEnable, acLogicalDs1ConfigValidFarEndIntervals=acLogicalDs1ConfigValidFarEndIntervals, acLogicalDs1LinkDownTrap=acLogicalDs1LinkDownTrap, acLogicalDs1ExceededThresholdNEIntervalUASsTrap=acLogicalDs1ExceededThresholdNEIntervalUASsTrap, acLogicalDs1ExceededThresholdFEIntervalPCVsTrap=acLogicalDs1ExceededThresholdFEIntervalPCVsTrap, acLogicalDs1ExceededThresholdNEIntervalBESsTrap=acLogicalDs1ExceededThresholdNEIntervalBESsTrap, acLogicalDs1ThresholdNEDayLCVs=acLogicalDs1ThresholdNEDayLCVs, acLogicalDs1IntervalIndex=acLogicalDs1IntervalIndex, acLogicalDs1ExceededThresholdFEDaySESsTrap=acLogicalDs1ExceededThresholdFEDaySESsTrap, acLogicalDs1FarEndIntervalNodeId=acLogicalDs1FarEndIntervalNodeId, acLogicalDs1ExceededThresholdNEIntervalDMsTrap=acLogicalDs1ExceededThresholdNEIntervalDMsTrap, acLogicalDs1ExceededThresholdNEIntervalESsTrap=acLogicalDs1ExceededThresholdNEIntervalESsTrap, acLogicalDs1ConfigLineStatus=acLogicalDs1ConfigLineStatus, acLogicalDs1ThresholdTable=acLogicalDs1ThresholdTable, acLogicalDs1ThresholdFEIntervalCSSs=acLogicalDs1ThresholdFEIntervalCSSs, acLogicalDs1ThresholdFEIntervalESs=acLogicalDs1ThresholdFEIntervalESs, acLogicalDs1FarEndDayEntry=acLogicalDs1FarEndDayEntry, acLogicalDs1ThresholdEntry=acLogicalDs1ThresholdEntry, acLogicalDs1FarEndDayTable=acLogicalDs1FarEndDayTable, acLogicalDs1ConfigTimeElapsedDay=acLogicalDs1ConfigTimeElapsedDay, acLogicalDs1DayLESs=acLogicalDs1DayLESs, acLogicalDs1IntervalESs=acLogicalDs1IntervalESs, acLogicalDs1ConfigVTNumber=acLogicalDs1ConfigVTNumber, acLogicalDs1FarEndIntervalTable=acLogicalDs1FarEndIntervalTable, acLogicalDs1IntervalSEFSs=acLogicalDs1IntervalSEFSs)
