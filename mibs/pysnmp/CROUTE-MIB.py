#
# PySNMP MIB module CROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CROUTE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:12:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, Counter32, MibIdentifier, ModuleIdentity, iso, IpAddress, NotificationType, TimeTicks, Bits, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "Counter32", "MibIdentifier", "ModuleIdentity", "iso", "IpAddress", "NotificationType", "TimeTicks", "Bits", "Integer32", "Counter64")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetNum(Integer32):
    pass

croute = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31))
ipRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1))
ipGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 1))
ipGlobalsBOOTPRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("backup", 3), ("activeBackup", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalsBOOTPRelayStatus.setStatus('mandatory')
ipGlobalsICMPErrMsgEnable = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalsICMPErrMsgEnable.setStatus('mandatory')
ipGlobalsARPInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 1, 3), Integer32().clone(14400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalsARPInactiveTimeout.setStatus('mandatory')
ipInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 1, 2), )
if mibBuilder.loadTexts: ipInterfaceTable.setStatus('mandatory')
ipInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1), ).setIndexNames((0, "CROUTE-MIB", "ipInterfaceAddr"))
if mibBuilder.loadTexts: ipInterfaceEntry.setStatus('mandatory')
ipInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceAddr.setStatus('mandatory')
ipInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceNetMask.setStatus('mandatory')
ipInterfaceLowerIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceLowerIfAlias.setStatus('mandatory')
ipInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nBMA", 2), ("ptp", 3))).clone('broadcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceType.setStatus('mandatory')
ipInterfaceForwardIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceForwardIpBroadcast.setStatus('mandatory')
ipInterfaceBroadcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceBroadcastAddr.setStatus('mandatory')
ipInterfaceProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProxyArp.setStatus('mandatory')
ipInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceStatus.setStatus('mandatory')
ipInterfaceMainRouterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceMainRouterAddr.setStatus('mandatory')
ipInterfaceARPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceARPServerStatus.setStatus('mandatory')
ipInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceName.setStatus('mandatory')
ipInterfaceNetbiosRebroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3), ("disable", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceNetbiosRebroadcast.setStatus('mandatory')
ipInterfaceIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceIcmpRedirects.setStatus('mandatory')
ripGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 3))
ripGlobalsRIPEnable = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripGlobalsRIPEnable.setStatus('mandatory')
ripGlobalsLeakOSPFIntoRIP = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripGlobalsLeakOSPFIntoRIP.setStatus('mandatory')
ripGlobalsLeakStaticIntoRIP = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripGlobalsLeakStaticIntoRIP.setStatus('mandatory')
ripInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 1, 4), )
if mibBuilder.loadTexts: ripInterfaceTable.setStatus('mandatory')
ripInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1), ).setIndexNames((0, "CROUTE-MIB", "ripInterfaceAddr"))
if mibBuilder.loadTexts: ripInterfaceEntry.setStatus('mandatory')
ripInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInterfaceAddr.setStatus('mandatory')
ripInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripInterfaceMetric.setStatus('mandatory')
ripInterfaceSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poisonReverse", 1), ("splitHorizon", 2), ("none", 3))).clone('splitHorizon')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripInterfaceSplitHorizon.setStatus('mandatory')
ripInterfaceAcceptDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripInterfaceAcceptDefaultRoute.setStatus('mandatory')
ripInterfaceSendDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripInterfaceSendDefaultRoute.setStatus('mandatory')
ripInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInterfaceState.setStatus('mandatory')
ripInterfaceSendMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("defaultOnly", 2), ("doNotSend", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripInterfaceSendMode.setStatus('mandatory')
ripInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripInterfaceVersion.setStatus('mandatory')
ospfGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 5))
ospfGlobalsLeakRIPIntoOSPF = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfGlobalsLeakRIPIntoOSPF.setStatus('mandatory')
ospfGlobalsLeakStaticIntoOSPF = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfGlobalsLeakStaticIntoOSPF.setStatus('mandatory')
ospfGlobalsLeakDirectIntoOSPF = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfGlobalsLeakDirectIntoOSPF.setStatus('mandatory')
relayTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 1, 6), )
if mibBuilder.loadTexts: relayTable.setStatus('mandatory')
relayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 1, 6, 1), ).setIndexNames((0, "CROUTE-MIB", "relayVlIndex"))
if mibBuilder.loadTexts: relayEntry.setStatus('mandatory')
relayVlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayVlIndex.setStatus('mandatory')
relayVlPrimaryServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayVlPrimaryServerAddr.setStatus('mandatory')
relayVlSeconderyServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayVlSeconderyServerAddr.setStatus('mandatory')
relayVlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 6, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayVlStatus.setStatus('mandatory')
relayVlRelayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 6, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayVlRelayAddr.setStatus('mandatory')
ipAccessGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 7))
ipAccessControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlEnable.setStatus('mandatory')
ipAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 1, 8), )
if mibBuilder.loadTexts: ipAccessControlTable.setStatus('mandatory')
ipAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1), ).setIndexNames((0, "CROUTE-MIB", "ipAccessControlIndex"))
if mibBuilder.loadTexts: ipAccessControlEntry.setStatus('mandatory')
ipAccessControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAccessControlIndex.setStatus('mandatory')
ipAccessControlSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlSrcAddr.setStatus('mandatory')
ipAccessControlSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlSrcMask.setStatus('mandatory')
ipAccessControlDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlDstAddr.setStatus('mandatory')
ipAccessControlDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlDstMask.setStatus('mandatory')
ipAccessControlOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("block", 2), ("blockAndReport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlOperation.setStatus('mandatory')
ipAccessControlActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wire-speed", 1), ("regular", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlActivation.setStatus('mandatory')
ipAccessControlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 256))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("none", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlProtocol.setStatus('mandatory')
ipAccessControlApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(21, 23, 25, 80, 110, 161, 162, 65536, 65537))).clone(namedValues=NamedValues(("ftp", 21), ("telnet", 23), ("smtp", 25), ("http", 80), ("pop3", 110), ("snmp", 161), ("snmpTrap", 162), ("above1023", 65536), ("none", 65537)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlApplication.setStatus('mandatory')
ipAccessControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 8, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessControlStatus.setStatus('mandatory')
ipRedundancyGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 9))
ipRedundancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("inactive", 3), ("active", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRedundancyStatus.setStatus('mandatory')
ipRedundancyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 9, 2), Integer32().clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRedundancyTimeout.setStatus('mandatory')
ipRedundancyPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 9, 3), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRedundancyPollingInterval.setStatus('mandatory')
ipShortcutGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 10))
ipShortcutARPServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipShortcutARPServerStatus.setStatus('mandatory')
ipMulticastInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 1, 11), )
if mibBuilder.loadTexts: ipMulticastInterfaceTable.setStatus('mandatory')
ipMulticastInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 1, 11, 1), ).setIndexNames((0, "CROUTE-MIB", "ipMulticastInterfaceIfIndex"))
if mibBuilder.loadTexts: ipMulticastInterfaceEntry.setStatus('mandatory')
ipMulticastInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMulticastInterfaceIfIndex.setStatus('mandatory')
ipMulticastInterfaceSendAll = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMulticastInterfaceSendAll.setStatus('mandatory')
ipMulticastInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMulticastInterfaceState.setStatus('mandatory')
ipMulticastInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 11, 1, 4), RowStatus().clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMulticastInterfaceStatus.setStatus('mandatory')
ipEZ2RouteMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 13))
ipEZ2BoostRouterTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 1), )
if mibBuilder.loadTexts: ipEZ2BoostRouterTable.setStatus('mandatory')
ipEZ2BoostRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 1, 1), ).setIndexNames((0, "CROUTE-MIB", "ipEZ2BoostRouterSlot"), (0, "CROUTE-MIB", "ipEZ2BoostRouterBRAddress"))
if mibBuilder.loadTexts: ipEZ2BoostRouterEntry.setStatus('mandatory')
ipEZ2BoostRouterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipEZ2BoostRouterSlot.setStatus('mandatory')
ipEZ2BoostRouterBRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipEZ2BoostRouterBRAddress.setStatus('mandatory')
ipEZ2BoostRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipEZ2BoostRouterType.setStatus('mandatory')
ipEZ2BoostRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEZ2BoostRouterStatus.setStatus('mandatory')
ipEZ2RControlTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 2), )
if mibBuilder.loadTexts: ipEZ2RControlTable.setStatus('mandatory')
ipEZ2RControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 2, 1), ).setIndexNames((0, "CROUTE-MIB", "ipEZ2RControlSlot"))
if mibBuilder.loadTexts: ipEZ2RControlEntry.setStatus('mandatory')
ipEZ2RControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipEZ2RControlSlot.setStatus('mandatory')
ipEZ2RControlBoostedRoutersTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9999999)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEZ2RControlBoostedRoutersTimeout.setStatus('mandatory')
ipEZ2RControlHostsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 9999999)).clone(14400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEZ2RControlHostsTimeout.setStatus('mandatory')
ipEZ2RControlAutoLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEZ2RControlAutoLearnMode.setStatus('mandatory')
ipVRRP = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 1, 14))
ipVRRPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipVRRPAdminStatus.setStatus('mandatory')
ipxRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 2))
ipxCircTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 2, 1), )
if mibBuilder.loadTexts: ipxCircTable.setStatus('mandatory')
ipxCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1), ).setIndexNames((0, "CROUTE-MIB", "ipxCircIndex"))
if mibBuilder.loadTexts: ipxCircEntry.setStatus('mandatory')
ipxCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircIndex.setStatus('mandatory')
ipxCircNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 2), NetNum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircNetNumber.setStatus('mandatory')
ipxCircLowerIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircLowerIfAlias.setStatus('mandatory')
ipxCircEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("novell", 2), ("ethernet", 3), ("llc", 4), ("snap", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircEncapsulation.setStatus('mandatory')
ipxCircNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircNetbios.setStatus('mandatory')
ipxCircStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircStatus.setStatus('mandatory')
ipxCircRipUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 7), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircRipUpdate.setStatus('mandatory')
ipxCircRipAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 8), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircRipAgeMultiplier.setStatus('mandatory')
ipxCircRipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircRipStatus.setStatus('mandatory')
ipxCircSapUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 10), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircSapUpdate.setStatus('mandatory')
ipxCircSapAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 11), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircSapAgeMultiplier.setStatus('mandatory')
ipxCircGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircGetNearestServerReply.setStatus('mandatory')
ipxCircSapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircSapStatus.setStatus('mandatory')
ipxCircRipState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircRipState.setStatus('mandatory')
ipxCircSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircSapState.setStatus('mandatory')
ipxDestTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 2, 2), )
if mibBuilder.loadTexts: ipxDestTable.setStatus('mandatory')
ipxDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1), ).setIndexNames((0, "CROUTE-MIB", "ipxDestNetNum"))
if mibBuilder.loadTexts: ipxDestEntry.setStatus('mandatory')
ipxDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 1), NetNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestNetNum.setStatus('mandatory')
ipxDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestProtocol.setStatus('mandatory')
ipxDestTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestTicks.setStatus('mandatory')
ipxDestHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestHopCount.setStatus('mandatory')
ipxDestNextHopCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopCircIndex.setStatus('mandatory')
ipxDestNextHopNICAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 6), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopNICAddress.setStatus('mandatory')
ipxDestNextHopNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 7), NetNum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopNetNum.setStatus('mandatory')
ipxDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestStatus.setStatus('mandatory')
ipxDestAge = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestAge.setStatus('mandatory')
ipxServTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 2, 3), )
if mibBuilder.loadTexts: ipxServTable.setStatus('mandatory')
ipxServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1), ).setIndexNames((0, "CROUTE-MIB", "ipxServType"), (0, "CROUTE-MIB", "ipxServName"))
if mibBuilder.loadTexts: ipxServEntry.setStatus('mandatory')
ipxServType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServType.setStatus('mandatory')
ipxServName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServName.setStatus('mandatory')
ipxServProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServProtocol.setStatus('mandatory')
ipxServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 4), NetNum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServNetNum.setStatus('mandatory')
ipxServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServNode.setStatus('mandatory')
ipxServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServSocket.setStatus('mandatory')
ipxServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServHopCount.setStatus('mandatory')
ipxServStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServStatus.setStatus('mandatory')
ipxServAge = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServAge.setStatus('mandatory')
ipxAccessGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 2, 4))
ipxAccessControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAccessControlEnable.setStatus('mandatory')
ipxAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 2, 5), )
if mibBuilder.loadTexts: ipxAccessControlTable.setStatus('mandatory')
ipxAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 2, 5, 1), ).setIndexNames((0, "CROUTE-MIB", "ipxAccessControlIndex"))
if mibBuilder.loadTexts: ipxAccessControlEntry.setStatus('mandatory')
ipxAccessControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAccessControlIndex.setStatus('mandatory')
ipxAccessControlSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 5, 1, 2), NetNum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAccessControlSrcAddr.setStatus('mandatory')
ipxAccessControlDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 5, 1, 3), NetNum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAccessControlDstAddr.setStatus('mandatory')
ipxAccessControlOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("block", 2), ("blockAndReport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAccessControlOperation.setStatus('mandatory')
ipxAccessControlActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wire-speed", 1), ("regular", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAccessControlActivation.setStatus('mandatory')
ipxAccessControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAccessControlStatus.setStatus('mandatory')
ipxSapFilterGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 2, 6))
ipxSapFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterEnable.setStatus('mandatory')
ipxSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 2, 7), )
if mibBuilder.loadTexts: ipxSapFilterTable.setStatus('mandatory')
ipxSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1), ).setIndexNames((0, "CROUTE-MIB", "ipxSapFilterID"))
if mibBuilder.loadTexts: ipxSapFilterEntry.setStatus('mandatory')
ipxSapFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFilterID.setStatus('mandatory')
ipxSapFilterCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterCircIndex.setStatus('mandatory')
ipxSapFilterServiceNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 3), NetNum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterServiceNetNumber.setStatus('mandatory')
ipxSapFilterServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterServiceType.setStatus('mandatory')
ipxSapFilterServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterServerName.setStatus('mandatory')
ipxSapFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterDirection.setStatus('mandatory')
ipxSapFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterAction.setStatus('mandatory')
ipxSapFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 2, 7, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapFilterStatus.setStatus('mandatory')
layer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 3))
vlConfTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 3, 1), )
if mibBuilder.loadTexts: vlConfTable.setStatus('mandatory')
vlConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 3, 1, 1), ).setIndexNames((0, "CROUTE-MIB", "vlConfIndex"))
if mibBuilder.loadTexts: vlConfEntry.setStatus('mandatory')
vlConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlConfIndex.setStatus('mandatory')
vlConfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlConfAlias.setStatus('mandatory')
vlConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 3, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlConfStatus.setStatus('mandatory')
vlBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 3, 2), )
if mibBuilder.loadTexts: vlBridgeTable.setStatus('mandatory')
vlBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 3, 2, 1), ).setIndexNames((0, "CROUTE-MIB", "vlBridgeProtocol"), (0, "CROUTE-MIB", "vlBridgeGroupIndex"), (0, "CROUTE-MIB", "vlBridgeIndex"))
if mibBuilder.loadTexts: vlBridgeEntry.setStatus('mandatory')
vlBridgeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("dec", 2), ("netBios", 3), ("appleTalk", 4), ("sna", 5), ("ipx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlBridgeProtocol.setStatus('mandatory')
vlBridgeGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlBridgeGroupIndex.setStatus('mandatory')
vlBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlBridgeIndex.setStatus('mandatory')
vlBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 3, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlBridgeStatus.setStatus('mandatory')
layer2Globals = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 3, 3))
layer2GlobalsBridgeEnable = MibScalar((1, 3, 6, 1, 4, 1, 81, 31, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("backup", 3), ("activeBackup", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer2GlobalsBridgeEnable.setStatus('mandatory')
routeGroupMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 4))
routeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 4, 1), )
if mibBuilder.loadTexts: routeGroupTable.setStatus('mandatory')
routeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 4, 1, 1), ).setIndexNames((0, "CROUTE-MIB", "routeGroupId"))
if mibBuilder.loadTexts: routeGroupEntry.setStatus('mandatory')
routeGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeGroupId.setStatus('mandatory')
routeGroupRouteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 21, 255))).clone(namedValues=NamedValues(("secondLayer", 1), ("ez2route", 3), ("router", 5), ("routerAndWebSwitch", 21), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeGroupRouteMode.setStatus('mandatory')
drLayer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 5))
drVlConfTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 5, 1), )
if mibBuilder.loadTexts: drVlConfTable.setStatus('mandatory')
drVlConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 5, 1, 1), ).setIndexNames((0, "CROUTE-MIB", "drVlConfSlot"), (0, "CROUTE-MIB", "drVlConfIndex"))
if mibBuilder.loadTexts: drVlConfEntry.setStatus('mandatory')
drVlConfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drVlConfSlot.setStatus('mandatory')
drVlConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drVlConfIndex.setStatus('mandatory')
drVlConfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drVlConfAlias.setStatus('mandatory')
drVlConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 5, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drVlConfStatus.setStatus('mandatory')
drIpRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 6))
drIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 6, 1), )
if mibBuilder.loadTexts: drIpInterfaceTable.setStatus('mandatory')
drIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1), ).setIndexNames((0, "CROUTE-MIB", "drIpInterfaceSlot"), (0, "CROUTE-MIB", "drIpInterfaceAddr"))
if mibBuilder.loadTexts: drIpInterfaceEntry.setStatus('mandatory')
drIpInterfaceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drIpInterfaceSlot.setStatus('mandatory')
drIpInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drIpInterfaceAddr.setStatus('mandatory')
drIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceNetMask.setStatus('mandatory')
drIpInterfaceLowerIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceLowerIfAlias.setStatus('mandatory')
drIpInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nBMA", 2), ("ptp", 3))).clone('broadcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceType.setStatus('mandatory')
drIpInterfaceForwardIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceForwardIpBroadcast.setStatus('mandatory')
drIpInterfaceBroadcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceBroadcastAddr.setStatus('mandatory')
drIpInterfaceProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceProxyArp.setStatus('mandatory')
drIpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceStatus.setStatus('mandatory')
drIpInterfaceMainRouterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceMainRouterAddr.setStatus('mandatory')
drIpInterfaceARPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceARPServerStatus.setStatus('mandatory')
drIpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceName.setStatus('mandatory')
drIpInterfaceNetbiosRebroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3), ("disable", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceNetbiosRebroadcast.setStatus('mandatory')
drIpInterfaceIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drIpInterfaceIcmpRedirects.setStatus('mandatory')
drStaticCidr = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 31, 7))
drStaticCidrTable = MibTable((1, 3, 6, 1, 4, 1, 81, 31, 7, 1), )
if mibBuilder.loadTexts: drStaticCidrTable.setStatus('mandatory')
drStaticCidrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1), ).setIndexNames((0, "CROUTE-MIB", "drStaticCidrEntID"), (0, "CROUTE-MIB", "drStaticCidrDest"), (0, "CROUTE-MIB", "drStaticCidrMask"), (0, "CROUTE-MIB", "drStaticCidrTos"), (0, "CROUTE-MIB", "drStaticCidrNextHop"))
if mibBuilder.loadTexts: drStaticCidrEntry.setStatus('mandatory')
drStaticCidrEntID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drStaticCidrEntID.setStatus('mandatory')
drStaticCidrDest = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drStaticCidrDest.setStatus('mandatory')
drStaticCidrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drStaticCidrMask.setStatus('mandatory')
drStaticCidrTos = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drStaticCidrTos.setStatus('mandatory')
drStaticCidrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drStaticCidrNextHop.setStatus('mandatory')
drStaticCidrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticCidrIfIndex.setStatus('mandatory')
drStaticCidrType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticCidrType.setStatus('mandatory')
drStaticCidrMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticCidrMetric1.setStatus('mandatory')
drStaticCidrPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticCidrPrecedence.setStatus('mandatory')
drStaticCidrCRPType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("routingFWLB", 1), ("bridgingFWLB", 2), ("regularStatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticCidrCRPType.setStatus('mandatory')
drStaticCidrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drStaticCidrOperStatus.setStatus('mandatory')
drStaticCidrName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticCidrName.setStatus('mandatory')
drStaticOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 13), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticOwner.setStatus('mandatory')
drStaticCidrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 31, 7, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drStaticCidrStatus.setStatus('mandatory')
mibBuilder.exportSymbols("CROUTE-MIB", vlConfIndex=vlConfIndex, NetNum=NetNum, ipxAccessControlDstAddr=ipxAccessControlDstAddr, ipxCircRipAgeMultiplier=ipxCircRipAgeMultiplier, ipxServNode=ipxServNode, ipxServAge=ipxServAge, ipxAccessGlobals=ipxAccessGlobals, relayVlSeconderyServerAddr=relayVlSeconderyServerAddr, drIpInterfaceIcmpRedirects=drIpInterfaceIcmpRedirects, ipAccessControlProtocol=ipAccessControlProtocol, ipEZ2RControlBoostedRoutersTimeout=ipEZ2RControlBoostedRoutersTimeout, ipAccessControlActivation=ipAccessControlActivation, ipVRRPAdminStatus=ipVRRPAdminStatus, ipxCircStatus=ipxCircStatus, ipxRoute=ipxRoute, ipxAccessControlEntry=ipxAccessControlEntry, ipxSapFilterServerName=ipxSapFilterServerName, drStaticOwner=drStaticOwner, ripInterfaceAcceptDefaultRoute=ripInterfaceAcceptDefaultRoute, drStaticCidrTable=drStaticCidrTable, drStaticCidrCRPType=drStaticCidrCRPType, relayVlIndex=relayVlIndex, ipInterfaceMainRouterAddr=ipInterfaceMainRouterAddr, ipInterfaceAddr=ipInterfaceAddr, ripGlobals=ripGlobals, relayEntry=relayEntry, ipEZ2BoostRouterEntry=ipEZ2BoostRouterEntry, drStaticCidrNextHop=drStaticCidrNextHop, vlBridgeTable=vlBridgeTable, ipVRRP=ipVRRP, drStaticCidrStatus=drStaticCidrStatus, ipGlobalsICMPErrMsgEnable=ipGlobalsICMPErrMsgEnable, ipxSapFilterEntry=ipxSapFilterEntry, ipAccessControlSrcMask=ipAccessControlSrcMask, vlBridgeEntry=vlBridgeEntry, ipInterfaceNetMask=ipInterfaceNetMask, ipShortcutGlobals=ipShortcutGlobals, layer2=layer2, ipxCircSapStatus=ipxCircSapStatus, drIpInterfaceSlot=drIpInterfaceSlot, drStaticCidrMask=drStaticCidrMask, drStaticCidrType=drStaticCidrType, ipEZ2RControlHostsTimeout=ipEZ2RControlHostsTimeout, ipxCircTable=ipxCircTable, ipEZ2BoostRouterTable=ipEZ2BoostRouterTable, ipxSapFilterTable=ipxSapFilterTable, ipxServStatus=ipxServStatus, ipxServProtocol=ipxServProtocol, routeGroupRouteMode=routeGroupRouteMode, ipMulticastInterfaceTable=ipMulticastInterfaceTable, ripInterfaceMetric=ripInterfaceMetric, ospfGlobals=ospfGlobals, ripGlobalsLeakOSPFIntoRIP=ripGlobalsLeakOSPFIntoRIP, ipxCircGetNearestServerReply=ipxCircGetNearestServerReply, ipxCircIndex=ipxCircIndex, ipxDestNetNum=ipxDestNetNum, ipxDestAge=ipxDestAge, vlConfStatus=vlConfStatus, drStaticCidrOperStatus=drStaticCidrOperStatus, relayTable=relayTable, ripInterfaceSendDefaultRoute=ripInterfaceSendDefaultRoute, ipInterfaceForwardIpBroadcast=ipInterfaceForwardIpBroadcast, drVlConfEntry=drVlConfEntry, ipMulticastInterfaceIfIndex=ipMulticastInterfaceIfIndex, ipEZ2BoostRouterType=ipEZ2BoostRouterType, ipxAccessControlActivation=ipxAccessControlActivation, ipAccessControlTable=ipAccessControlTable, routeGroupMgmt=routeGroupMgmt, drVlConfSlot=drVlConfSlot, ipRedundancyTimeout=ipRedundancyTimeout, ipxAccessControlStatus=ipxAccessControlStatus, drStaticCidrIfIndex=drStaticCidrIfIndex, ipInterfaceProxyArp=ipInterfaceProxyArp, ipInterfaceType=ipInterfaceType, ipGlobals=ipGlobals, drIpInterfaceEntry=drIpInterfaceEntry, ipxDestTable=ipxDestTable, drStaticCidrDest=drStaticCidrDest, ipxSapFilterEnable=ipxSapFilterEnable, ospfGlobalsLeakDirectIntoOSPF=ospfGlobalsLeakDirectIntoOSPF, ipxServNetNum=ipxServNetNum, drVlConfAlias=drVlConfAlias, vlConfTable=vlConfTable, drLayer2=drLayer2, ipInterfaceNetbiosRebroadcast=ipInterfaceNetbiosRebroadcast, ipxDestNextHopCircIndex=ipxDestNextHopCircIndex, ipMulticastInterfaceStatus=ipMulticastInterfaceStatus, ipInterfaceTable=ipInterfaceTable, ipEZ2RouteMgmt=ipEZ2RouteMgmt, ipxCircSapUpdate=ipxCircSapUpdate, ipxServName=ipxServName, ipxServSocket=ipxServSocket, vlBridgeProtocol=vlBridgeProtocol, ipGlobalsARPInactiveTimeout=ipGlobalsARPInactiveTimeout, drIpInterfaceForwardIpBroadcast=drIpInterfaceForwardIpBroadcast, ipEZ2BoostRouterBRAddress=ipEZ2BoostRouterBRAddress, ipEZ2RControlAutoLearnMode=ipEZ2RControlAutoLearnMode, drIpInterfaceBroadcastAddr=drIpInterfaceBroadcastAddr, drIpInterfaceAddr=drIpInterfaceAddr, ipInterfaceName=ipInterfaceName, ipRoute=ipRoute, ipAccessControlDstMask=ipAccessControlDstMask, drIpInterfaceProxyArp=drIpInterfaceProxyArp, RowStatus=RowStatus, croute=croute, ipRedundancyPollingInterval=ipRedundancyPollingInterval, relayVlStatus=relayVlStatus, drIpInterfaceARPServerStatus=drIpInterfaceARPServerStatus, routeGroupId=routeGroupId, ipxCircRipStatus=ipxCircRipStatus, ripInterfaceState=ripInterfaceState, ipxAccessControlEnable=ipxAccessControlEnable, ipAccessControlDstAddr=ipAccessControlDstAddr, ripInterfaceEntry=ripInterfaceEntry, ipShortcutARPServerStatus=ipShortcutARPServerStatus, ipxCircSapState=ipxCircSapState, layer2GlobalsBridgeEnable=layer2GlobalsBridgeEnable, ipAccessControlApplication=ipAccessControlApplication, drVlConfStatus=drVlConfStatus, drIpInterfaceNetbiosRebroadcast=drIpInterfaceNetbiosRebroadcast, ripInterfaceSendMode=ripInterfaceSendMode, vlConfEntry=vlConfEntry, ipxServHopCount=ipxServHopCount, drIpRoute=drIpRoute, ripGlobalsLeakStaticIntoRIP=ripGlobalsLeakStaticIntoRIP, ipInterfaceBroadcastAddr=ipInterfaceBroadcastAddr, ripInterfaceVersion=ripInterfaceVersion, ipxCircLowerIfAlias=ipxCircLowerIfAlias, ipGlobalsBOOTPRelayStatus=ipGlobalsBOOTPRelayStatus, drIpInterfaceLowerIfAlias=drIpInterfaceLowerIfAlias, drStaticCidr=drStaticCidr, ipxCircRipState=ipxCircRipState, ipxAccessControlOperation=ipxAccessControlOperation, ipAccessControlEnable=ipAccessControlEnable, drIpInterfaceTable=drIpInterfaceTable, ipxSapFilterServiceNetNumber=ipxSapFilterServiceNetNumber, ipxCircEncapsulation=ipxCircEncapsulation, vlBridgeStatus=vlBridgeStatus, ipAccessGlobals=ipAccessGlobals, ipxSapFilterCircIndex=ipxSapFilterCircIndex, ipxAccessControlIndex=ipxAccessControlIndex, ipEZ2BoostRouterStatus=ipEZ2BoostRouterStatus, ipInterfaceEntry=ipInterfaceEntry, drIpInterfaceType=drIpInterfaceType, ripInterfaceAddr=ripInterfaceAddr, ipxDestTicks=ipxDestTicks, drStaticCidrEntID=drStaticCidrEntID, ipxSapFilterDirection=ipxSapFilterDirection, ipEZ2RControlTable=ipEZ2RControlTable, drStaticCidrEntry=drStaticCidrEntry, ipInterfaceARPServerStatus=ipInterfaceARPServerStatus, ipEZ2RControlEntry=ipEZ2RControlEntry, drIpInterfaceNetMask=drIpInterfaceNetMask, ipMulticastInterfaceSendAll=ipMulticastInterfaceSendAll, drStaticCidrTos=drStaticCidrTos, relayVlRelayAddr=relayVlRelayAddr, relayVlPrimaryServerAddr=relayVlPrimaryServerAddr, ipInterfaceStatus=ipInterfaceStatus, ripGlobalsRIPEnable=ripGlobalsRIPEnable, ipxDestNextHopNICAddress=ipxDestNextHopNICAddress, vlConfAlias=vlConfAlias, ipxServType=ipxServType, ipRedundancyGlobals=ipRedundancyGlobals, ipxCircSapAgeMultiplier=ipxCircSapAgeMultiplier, ipRedundancyStatus=ipRedundancyStatus, ipxDestEntry=ipxDestEntry, ipInterfaceIcmpRedirects=ipInterfaceIcmpRedirects, ipEZ2RControlSlot=ipEZ2RControlSlot, drVlConfTable=drVlConfTable, ospfGlobalsLeakRIPIntoOSPF=ospfGlobalsLeakRIPIntoOSPF, drStaticCidrPrecedence=drStaticCidrPrecedence, vlBridgeIndex=vlBridgeIndex, drVlConfIndex=drVlConfIndex, ipxServEntry=ipxServEntry, ipxSapFilterServiceType=ipxSapFilterServiceType, routeGroupEntry=routeGroupEntry, ipAccessControlOperation=ipAccessControlOperation, vlBridgeGroupIndex=vlBridgeGroupIndex, ipxDestProtocol=ipxDestProtocol, ipxSapFilterGlobals=ipxSapFilterGlobals, ripInterfaceTable=ripInterfaceTable, ipAccessControlIndex=ipAccessControlIndex, drStaticCidrName=drStaticCidrName, ipAccessControlStatus=ipAccessControlStatus, ipEZ2BoostRouterSlot=ipEZ2BoostRouterSlot, drIpInterfaceName=drIpInterfaceName, ipxDestNextHopNetNum=ipxDestNextHopNetNum, ipxSapFilterID=ipxSapFilterID, drIpInterfaceMainRouterAddr=drIpInterfaceMainRouterAddr, ipxCircRipUpdate=ipxCircRipUpdate, layer2Globals=layer2Globals, ipAccessControlEntry=ipAccessControlEntry, ipxCircNetNumber=ipxCircNetNumber, ipxCircEntry=ipxCircEntry, ospfGlobalsLeakStaticIntoOSPF=ospfGlobalsLeakStaticIntoOSPF, ipMulticastInterfaceState=ipMulticastInterfaceState, ipxServTable=ipxServTable, ipxSapFilterAction=ipxSapFilterAction, ipxDestHopCount=ipxDestHopCount, drIpInterfaceStatus=drIpInterfaceStatus, ipxDestStatus=ipxDestStatus, drStaticCidrMetric1=drStaticCidrMetric1, ipxAccessControlTable=ipxAccessControlTable, ipInterfaceLowerIfAlias=ipInterfaceLowerIfAlias, ipxAccessControlSrcAddr=ipxAccessControlSrcAddr, ripInterfaceSplitHorizon=ripInterfaceSplitHorizon, ipMulticastInterfaceEntry=ipMulticastInterfaceEntry, ipxCircNetbios=ipxCircNetbios, routeGroupTable=routeGroupTable, ipAccessControlSrcAddr=ipAccessControlSrcAddr, ipxSapFilterStatus=ipxSapFilterStatus)
