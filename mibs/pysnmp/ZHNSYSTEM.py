#
# PySNMP MIB module ZHNSYSTEM (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNSYSTEM
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, NotificationType, ObjectIdentity, Counter32, iso, Counter64, IpAddress, MibIdentifier, TimeTicks, Gauge32, Integer32, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "NotificationType", "ObjectIdentity", "Counter32", "iso", "Counter64", "IpAddress", "MibIdentifier", "TimeTicks", "Gauge32", "Integer32", "enterprises", "Bits")
DisplayString, TextualConvention, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "MacAddress")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhnSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2))
zhnSystem.setRevisions(('2012-07-13 12:00', '2012-07-06 12:00', '2012-05-18 12:00', '2012-05-16 12:00', '2012-04-12 00:00', '2012-02-03 12:00', '2012-01-19 14:20', '2011-09-09 01:00', '2011-01-05 01:00', '2009-05-20 01:00', '2008-08-25 01:00', '2007-11-26 01:00', '2007-03-15 01:00', '2006-10-17 01:00',))
if mibBuilder.loadTexts: zhnSystem.setLastUpdated('201207131200Z')
if mibBuilder.loadTexts: zhnSystem.setOrganization('Zhone Technologies MIB Working Group Other information about group editing the MIB')
zhnSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1))
zhnSystemGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1))
zhnSystemBoardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2))
zhnSystemPldObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 3))
zhnSystemRadioObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 4))
zhnSystemEthernetLikeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5))
zhnSystemTempSensorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6))
zhnSystemSNMPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7))
zhnSystemTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8))
zhnSystemSyslogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9))
zhnSystemSNTPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10))
zhnSystemUserLoginObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 11))
zhnSystemPowerSheddingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 12))
zhnSystemFirewallObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 13))
zhnSystemDNSClientObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 14))
zhnSystemDNSProxyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15))
zhnSystemWanBackupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16))
zhnSystemTr69cObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17))
class WFNT(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("baseStation", 1), ("mesh", 2))

class ELTYPE(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("ethernet", 1), ("efm", 2), ("shdsl", 3), ("docsis", 4), ("wimax", 5))

class ELSUBTYPE(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0))
    namedValues = NamedValues(("none", 0))

class LPT(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("in", 1), ("out", 2))

class UPT(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ac", 1), ("dc", 2))

class TCSI(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("loop", 1), ("local", 2), ("pwe", 3))

class LTRI(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("ethernet", 1), ("internal", 2), ("shdsl", 3))

class CSMI(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("adaptive", 1), ("differential", 2), ("synchronous", 3), ("dslAdaptive", 4), ("loop", 5))

class SEI(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class CMI(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("normal", 1), ("differential", 2))

class CDA(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("noAction", 0), ("save", 1), ("resetToDefaults", 2))

class RBT(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noAction", 0), ("reboot", 1))

class SCS(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("uplink", 1), ("ds1", 2), ("ieee1588", 3))

class ETCS(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("internal", 1), ("systemClock", 2))

class SysFirmwareAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noAction", 0), ("restoreAltFirmware", 1))

class SysAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class SysLogLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7))

class SysLogMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("remote", 2), ("both", 3))

class SysSntpTimeZones(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75))
    namedValues = NamedValues(("unknown", 0), ("abu", 1), ("adelaide", 2), ("alaska", 3), ("almaty", 4), ("amsterdam", 5), ("arizona", 6), ("astana", 7), ("athens", 8), ("atlantic", 9), ("auckland", 10), ("azores", 11), ("baghdad", 12), ("baku", 13), ("bangkok", 14), ("beijing", 15), ("belgrade", 16), ("bogota", 17), ("brasilia", 18), ("brisbane", 19), ("brussels", 20), ("bucharest", 21), ("buenos", 22), ("cairo", 23), ("canberra", 24), ("cape", 25), ("caracas", 26), ("casablanca", 27), ("central", 28), ("centraltime", 29), ("chennai", 30), ("chihuahua", 31), ("darwin", 32), ("eastern", 33), ("ekaterinburg", 34), ("fiji", 35), ("greenland", 36), ("greenwich", 37), ("guadalajara", 38), ("guam", 39), ("harare", 40), ("hawaii", 41), ("helsinki", 42), ("hobart", 43), ("indiana", 44), ("international", 45), ("irkutsk", 46), ("islamabad", 47), ("jerusalem", 48), ("kabul", 49), ("kathmandu", 50), ("krasnoyarsk", 51), ("kuala", 52), ("kuwait", 53), ("magadan", 54), ("midatlantic", 55), ("midway", 56), ("moscow", 57), ("mountain", 58), ("nairobi", 59), ("newfoundland", 60), ("osaka", 61), ("pacific", 62), ("perth", 63), ("rangoon", 64), ("santiago", 65), ("sarajevo", 66), ("saskatchewan", 67), ("seoul", 68), ("solomon", 69), ("sri", 70), ("taipei", 71), ("tehran", 72), ("vladivostok", 73), ("west", 74), ("yakutsk", 75))

class IPInterfaceAddressingTypeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class BasicAddressingTypeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

modelNumber = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelNumber.setStatus('current')
macBaseAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBaseAddress.setStatus('current')
numberOfMacAddresses = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfMacAddresses.setStatus('current')
wifiNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 4), WFNT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wifiNetworkType.setStatus('current')
locationLatitude = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationLatitude.setStatus('current')
locationLongitude = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationLongitude.setStatus('current')
zhnSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnSystemAction.setStatus('current')
zhnSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnSysLocation.setStatus('current')
zhnSysContact = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnSysContact.setStatus('current')
sysTransmitClockSource = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 11), TCSI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTransmitClockSource.setStatus('current')
sysLocalTimingReference = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 12), LTRI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalTimingReference.setStatus('current')
sysSynchronizationMode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 13), CSMI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSynchronizationMode.setStatus('current')
sysSynchronousEthernet = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 14), SEI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSynchronousEthernet.setStatus('current')
sysClockMode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 15), CMI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClockMode.setStatus('current')
sysCfgDBAction = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 16), CDA()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCfgDBAction.setStatus('current')
sysSoftwareReboot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 17), RBT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSoftwareReboot.setStatus('current')
sysSystemClockSource = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 18), SCS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemClockSource.setStatus('current')
sysEthernetTransmitClockSource = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 19), ETCS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEthernetTransmitClockSource.setStatus('current')
sysDs1ClockSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDs1ClockSourcePort.setStatus('current')
sysBootloaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootloaderVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysAltFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAltFirmwareVersion.setStatus('current')
sysRestoreAltFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 24), SysFirmwareAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestoreAltFirmwareVersion.setStatus('current')
sysSnmpProvisioningLock = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSnmpProvisioningLock.setStatus('current')
sysSnmpProvisioningChange = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSnmpProvisioningChange.setStatus('current')
numberOfBoards = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfBoards.setStatus('current')
boardDescriptorTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 2), )
if mibBuilder.loadTexts: boardDescriptorTable.setStatus('current')
boardDescriptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 2, 1), ).setIndexNames((0, "ZHNSYSTEM", "boardIndex"))
if mibBuilder.loadTexts: boardDescriptorEntry.setStatus('current')
boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: boardIndex.setStatus('current')
boardName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardName.setStatus('current')
boardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPartNumber.setStatus('current')
boardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSerialNumber.setStatus('current')
boardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardRevision.setStatus('current')
numberOfPlds = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPlds.setStatus('current')
pldDescriptorTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 3, 2), )
if mibBuilder.loadTexts: pldDescriptorTable.setStatus('current')
pldDescriptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 3, 2, 1), ).setIndexNames((0, "ZHNSYSTEM", "pldIndex"))
if mibBuilder.loadTexts: pldDescriptorEntry.setStatus('current')
pldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: pldIndex.setStatus('current')
pldName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldName.setStatus('current')
pldVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldVersion.setStatus('current')
numberOfRadios = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfRadios.setStatus('current')
numberOfEthernetLikeInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfEthernetLikeInterfaces.setStatus('current')
ethernetlikeInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2), )
if mibBuilder.loadTexts: ethernetlikeInterfaceTable.setStatus('current')
ethernetlikeInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1), ).setIndexNames((0, "ZHNSYSTEM", "etherIndex"))
if mibBuilder.loadTexts: ethernetlikeInterfaceEntry.setStatus('current')
etherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: etherIndex.setStatus('current')
etherName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherName.setStatus('current')
etherType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1, 3), ELTYPE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherType.setStatus('current')
etherSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1, 4), ELSUBTYPE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherSubtype.setStatus('current')
etherNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherNumberOfPorts.setStatus('current')
etherLinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1, 6), LPT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherLinePower.setStatus('current')
etherPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPowerPairs.setStatus('current')
numberOfTemperatureSensors = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfTemperatureSensors.setStatus('current')
temperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6, 2), )
if mibBuilder.loadTexts: temperatureSensorTable.setStatus('current')
temperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6, 2, 1), ).setIndexNames((0, "ZHNSYSTEM", "temperatureSensorIndex"))
if mibBuilder.loadTexts: temperatureSensorEntry.setStatus('current')
temperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: temperatureSensorIndex.setStatus('current')
temperatureSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorName.setStatus('current')
temperatureSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorMaximum.setStatus('current')
temperatureSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorMinimum.setStatus('current')
powerSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 1, 5), UPT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyType.setStatus('current')
numberOfCommunities = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfCommunities.setStatus('current')
zhnCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 2), )
if mibBuilder.loadTexts: zhnCommunityTable.setStatus('current')
zhnCommunityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 2, 1), ).setIndexNames((0, "ZHNSYSTEM", "communityName"))
if mibBuilder.loadTexts: zhnCommunityTableEntry.setStatus('current')
communityName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: communityName.setStatus('current')
communityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityType.setStatus('current')
communityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityRowStatus.setStatus('current')
numberOfTrapManagers = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfTrapManagers.setStatus('current')
zhnDefaultTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnDefaultTrapCommunity.setStatus('current')
zhnTrapTypeLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnTrapTypeLinkUpDown.setStatus('current')
zhnTrapTypeAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnTrapTypeAuthFailure.setStatus('current')
zhnTrapTypeConfigChange = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnTrapTypeConfigChange.setStatus('current')
zhnTrapManagerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 6), )
if mibBuilder.loadTexts: zhnTrapManagerInfoTable.setStatus('current')
zhnTrapManagerInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 6, 1), ).setIndexNames((0, "ZHNSYSTEM", "trapDestination"))
if mibBuilder.loadTexts: zhnTrapManagerInfoTableEntry.setStatus('current')
trapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestination.setStatus('current')
trapCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunityName.setStatus('current')
trapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
trapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPort.setStatus('current')
trapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapRowStatus.setStatus('current')
zhnTrapTypeColdStart = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnTrapTypeColdStart.setStatus('current')
zhnTrapTypeWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnTrapTypeWarmStart.setStatus('current')
zhnTrapTypeEnterprise = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnTrapTypeEnterprise.setStatus('current')
zhnFixedCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 3), )
if mibBuilder.loadTexts: zhnFixedCommunityTable.setStatus('current')
zhnFixedCommunityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 3, 1), ).setIndexNames((0, "ZHNSYSTEM", "communityType"))
if mibBuilder.loadTexts: zhnFixedCommunityTableEntry.setStatus('current')
fixedCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 3, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedCommunityName.setStatus('current')
fixedCommunityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedCommunityType.setStatus('current')
fixedCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 7, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedCommunityRowStatus.setStatus('current')
sysLogAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9, 1), SysAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogAdminStatus.setStatus('current')
sysLogLocalLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9, 2), SysLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogLocalLogLevel.setStatus('current')
sysLogRemoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9, 3), SysLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogRemoteLogLevel.setStatus('current')
sysLogDisplayLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9, 4), SysLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogDisplayLogLevel.setStatus('current')
sysLogMode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9, 5), SysLogMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogMode.setStatus('current')
sysLogRemoteServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogRemoteServerAddress.setStatus('current')
sysLogRemoteServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 9, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogRemoteServerPort.setStatus('current')
sntpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 1), SysAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpAdminStatus.setStatus('current')
sntpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 2), SysAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpOperStatus.setStatus('current')
sntpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServer1.setStatus('current')
sntpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServer2.setStatus('current')
sntpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServer3.setStatus('current')
sntpServer4 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServer4.setStatus('current')
sntpServer5 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServer5.setStatus('current')
sntpLocalTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 8), SysSntpTimeZones()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpLocalTimeZone.setStatus('current')
sntpCurrentDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 10, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpCurrentDateAndTime.setStatus('current')
adminUserName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminUserName.setStatus('current')
adminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPassword.setStatus('current')
supportUserName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportUserName.setStatus('current')
supportPassword = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 11, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supportPassword.setStatus('current')
userUserName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 11, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUserName.setStatus('current')
userPassword = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 11, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
powerSheddingAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 12, 1), SysAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSheddingAdminStatus.setStatus('current')
powerSheddingShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 12, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSheddingShutdownDelay.setStatus('current')
powerSheddingRestoreDelay = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 12, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSheddingRestoreDelay.setStatus('current')
sysFirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFirewallEnable.setStatus('current')
sysFirewallTcpSynCookies = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 13, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirewallTcpSynCookies.setStatus('current')
sysDNSAddressingType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 14, 1), IPInterfaceAddressingTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDNSAddressingType.setStatus('current')
sysDNSDHCPSource = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 14, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDNSDHCPSource.setStatus('current')
sysDNSPrimaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 14, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDNSPrimaryIPAddress.setStatus('current')
sysDNSSecondaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 14, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDNSSecondaryIPAddress.setStatus('current')
zhnDnsProxyHostMaxHostEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnDnsProxyHostMaxHostEntries.setStatus('current')
zhnDnsProxyHostTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15, 2), )
if mibBuilder.loadTexts: zhnDnsProxyHostTable.setStatus('current')
zhnDnsProxyHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15, 2, 1), ).setIndexNames((0, "ZHNSYSTEM", "dnsProxyHostIndex"))
if mibBuilder.loadTexts: zhnDnsProxyHostEntry.setStatus('current')
dnsProxyHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: dnsProxyHostIndex.setStatus('current')
dnsProxyHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProxyHostIPAddress.setStatus('current')
dnsProxyHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProxyHostName.setStatus('current')
dnsProxyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 15, 2, 1, 4), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsProxyRowStatus.setStatus('current')
failoverTimer = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failoverTimer.setStatus('current')
restoralTimer = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restoralTimer.setStatus('current')
backupDataVlan = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupDataVlan.setStatus('current')
cellularPinNumber = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellularPinNumber.setStatus('current')
cellularDataNumber = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellularDataNumber.setStatus('current')
atInitCommands = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atInitCommands.setStatus('current')
accessPointName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPointName.setStatus('current')
chapPapUsername = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chapPapUsername.setStatus('current')
chapPapPassword = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chapPapPassword.setStatus('current')
connectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionTimeout.setStatus('current')
backupIpAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 11), BasicAddressingTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupIpAddressMode.setStatus('current')
backupIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupIpAddress.setStatus('current')
backupDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupDefaultGateway.setStatus('current')
backupSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupSubnetMask.setStatus('current')
backupPrimaryDns = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupPrimaryDns.setStatus('current')
backupSecondaryDns = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 16, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupSecondaryDns.setStatus('current')
sysTr69cConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 1))
sysTr69cServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2))
sysTr69cConfigLoggingSOAP = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cConfigLoggingSOAP.setStatus('current')
sysTr69cConfigConnectionRequestAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cConfigConnectionRequestAuthentication.setStatus('current')
sysTr69cServerURL = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerURL.setStatus('current')
sysTr69cServerLastConnectedURL = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTr69cServerLastConnectedURL.setStatus('current')
sysTr69cServerUsername = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerUsername.setStatus('current')
sysTr69cServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerPassword.setStatus('current')
sysTr69cServerPeriodicInformEnable = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerPeriodicInformEnable.setStatus('current')
sysTr69cServerPeriodicInformInterval = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerPeriodicInformInterval.setStatus('current')
sysTr69cServerParameterKey = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTr69cServerParameterKey.setStatus('current')
sysTr69cServerBoundIfName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerBoundIfName.setStatus('current')
sysTr69cServerConnectionRequestURL = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTr69cServerConnectionRequestURL.setStatus('current')
sysTr69cServerConnectionRequestUsername = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerConnectionRequestUsername.setStatus('current')
sysTr69cServerConnectionRequestPassword = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerConnectionRequestPassword.setStatus('current')
sysTr69cServerUpgradesManaged = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 1, 17, 2, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTr69cServerUpgradesManaged.setStatus('current')
zhnSystemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2))
zhnSystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1))
zhnSystemCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 2))
zhnSystemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 2, 1)).setObjects(("ZHNSYSTEM", "zhnSystemActiveGroup"), ("ZHNSYSTEM", "zhnSystemTablesItems"), ("ZHNSYSTEM", "zhnSystemConfigItems"), ("ZHNSYSTEM", "zhnSyslogConfigGroup"), ("ZHNSYSTEM", "zhnSntpConfigGroup"), ("ZHNSYSTEM", "zhnUserLoginGroup"), ("ZHNSYSTEM", "zhnPowerSheddingGroup"), ("ZHNSYSTEM", "zhnSystemFirewallGroup"), ("ZHNSYSTEM", "zhnSystemDNSClientGroup"), ("ZHNSYSTEM", "zhnSystemDNSProxyHostGroup"), ("ZHNSYSTEM", "zhnSystemWanBackupGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemCompliance = zhnSystemCompliance.setStatus('current')
zhnSystemActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 1)).setObjects(("ZHNSYSTEM", "modelNumber"), ("ZHNSYSTEM", "macBaseAddress"), ("ZHNSYSTEM", "numberOfMacAddresses"), ("ZHNSYSTEM", "numberOfBoards"), ("ZHNSYSTEM", "numberOfPlds"), ("ZHNSYSTEM", "numberOfRadios"), ("ZHNSYSTEM", "wifiNetworkType"), ("ZHNSYSTEM", "numberOfEthernetLikeInterfaces"), ("ZHNSYSTEM", "numberOfTemperatureSensors"), ("ZHNSYSTEM", "powerSupplyType"), ("ZHNSYSTEM", "sysBootloaderVersion"), ("ZHNSYSTEM", "sysFirmwareVersion"), ("ZHNSYSTEM", "sysAltFirmwareVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemActiveGroup = zhnSystemActiveGroup.setStatus('current')
zhnSystemTablesItems = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 2)).setObjects(("ZHNSYSTEM", "boardName"), ("ZHNSYSTEM", "boardPartNumber"), ("ZHNSYSTEM", "boardSerialNumber"), ("ZHNSYSTEM", "boardRevision"), ("ZHNSYSTEM", "pldName"), ("ZHNSYSTEM", "pldVersion"), ("ZHNSYSTEM", "etherName"), ("ZHNSYSTEM", "etherType"), ("ZHNSYSTEM", "etherSubtype"), ("ZHNSYSTEM", "etherNumberOfPorts"), ("ZHNSYSTEM", "etherLinePower"), ("ZHNSYSTEM", "etherPowerPairs"), ("ZHNSYSTEM", "temperatureSensorName"), ("ZHNSYSTEM", "temperatureSensorMaximum"), ("ZHNSYSTEM", "temperatureSensorMinimum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemTablesItems = zhnSystemTablesItems.setStatus('current')
zhnSystemConfigItems = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 3)).setObjects(("ZHNSYSTEM", "locationLatitude"), ("ZHNSYSTEM", "locationLongitude"), ("ZHNSYSTEM", "zhnSystemAction"), ("ZHNSYSTEM", "zhnSysLocation"), ("ZHNSYSTEM", "zhnSysContact"), ("ZHNSYSTEM", "sysTransmitClockSource"), ("ZHNSYSTEM", "sysLocalTimingReference"), ("ZHNSYSTEM", "sysSynchronizationMode"), ("ZHNSYSTEM", "sysSynchronousEthernet"), ("ZHNSYSTEM", "sysClockMode"), ("ZHNSYSTEM", "sysCfgDBAction"), ("ZHNSYSTEM", "sysSoftwareReboot"), ("ZHNSYSTEM", "sysRestoreAltFirmwareVersion"), ("ZHNSYSTEM", "sysSnmpProvisioningLock"), ("ZHNSYSTEM", "sysSnmpProvisioningChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemConfigItems = zhnSystemConfigItems.setStatus('current')
zhnSystemTrapItems = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 4)).setObjects(("ZHNSYSTEM", "numberOfTrapManagers"), ("ZHNSYSTEM", "zhnDefaultTrapCommunity"), ("ZHNSYSTEM", "zhnTrapTypeLinkUpDown"), ("ZHNSYSTEM", "zhnTrapTypeAuthFailure"), ("ZHNSYSTEM", "zhnTrapTypeConfigChange"), ("ZHNSYSTEM", "trapCommunityName"), ("ZHNSYSTEM", "trapVersion"), ("ZHNSYSTEM", "trapPort"), ("ZHNSYSTEM", "trapRowStatus"), ("ZHNSYSTEM", "zhnTrapTypeColdStart"), ("ZHNSYSTEM", "zhnTrapTypeWarmStart"), ("ZHNSYSTEM", "zhnTrapTypeEnterprise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemTrapItems = zhnSystemTrapItems.setStatus('current')
zhnSystemCommunityItems = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 5)).setObjects(("ZHNSYSTEM", "numberOfCommunities"), ("ZHNSYSTEM", "communityType"), ("ZHNSYSTEM", "communityRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemCommunityItems = zhnSystemCommunityItems.setStatus('current')
zhnSystemFixedCommunityItems = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 6)).setObjects(("ZHNSYSTEM", "fixedCommunityName"), ("ZHNSYSTEM", "fixedCommunityType"), ("ZHNSYSTEM", "fixedCommunityRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemFixedCommunityItems = zhnSystemFixedCommunityItems.setStatus('current')
zhnSystemClockingItems = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 7)).setObjects(("ZHNSYSTEM", "sysSystemClockSource"), ("ZHNSYSTEM", "sysEthernetTransmitClockSource"), ("ZHNSYSTEM", "sysDs1ClockSourcePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemClockingItems = zhnSystemClockingItems.setStatus('current')
zhnSyslogConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 8)).setObjects(("ZHNSYSTEM", "sysLogAdminStatus"), ("ZHNSYSTEM", "sysLogLocalLogLevel"), ("ZHNSYSTEM", "sysLogRemoteLogLevel"), ("ZHNSYSTEM", "sysLogDisplayLogLevel"), ("ZHNSYSTEM", "sysLogMode"), ("ZHNSYSTEM", "sysLogRemoteServerAddress"), ("ZHNSYSTEM", "sysLogRemoteServerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSyslogConfigGroup = zhnSyslogConfigGroup.setStatus('current')
zhnSntpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 9)).setObjects(("ZHNSYSTEM", "sntpAdminStatus"), ("ZHNSYSTEM", "sntpOperStatus"), ("ZHNSYSTEM", "sntpServer1"), ("ZHNSYSTEM", "sntpServer2"), ("ZHNSYSTEM", "sntpServer3"), ("ZHNSYSTEM", "sntpServer4"), ("ZHNSYSTEM", "sntpServer5"), ("ZHNSYSTEM", "sntpLocalTimeZone"), ("ZHNSYSTEM", "sntpCurrentDateAndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSntpConfigGroup = zhnSntpConfigGroup.setStatus('current')
zhnUserLoginGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 10)).setObjects(("ZHNSYSTEM", "adminUserName"), ("ZHNSYSTEM", "adminPassword"), ("ZHNSYSTEM", "supportUserName"), ("ZHNSYSTEM", "supportPassword"), ("ZHNSYSTEM", "userUserName"), ("ZHNSYSTEM", "userPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnUserLoginGroup = zhnUserLoginGroup.setStatus('current')
zhnPowerSheddingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 11)).setObjects(("ZHNSYSTEM", "powerSheddingAdminStatus"), ("ZHNSYSTEM", "powerSheddingShutdownDelay"), ("ZHNSYSTEM", "powerSheddingRestoreDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnPowerSheddingGroup = zhnPowerSheddingGroup.setStatus('current')
zhnSystemFirewallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 12)).setObjects(("ZHNSYSTEM", "sysFirewallEnable"), ("ZHNSYSTEM", "sysFirewallTcpSynCookies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemFirewallGroup = zhnSystemFirewallGroup.setStatus('current')
zhnSystemDNSClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 13)).setObjects(("ZHNSYSTEM", "sysDNSAddressingType"), ("ZHNSYSTEM", "sysDNSDHCPSource"), ("ZHNSYSTEM", "sysDNSPrimaryIPAddress"), ("ZHNSYSTEM", "sysDNSSecondaryIPAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemDNSClientGroup = zhnSystemDNSClientGroup.setStatus('current')
zhnSystemDNSProxyHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 14)).setObjects(("ZHNSYSTEM", "zhnDnsProxyHostMaxHostEntries"), ("ZHNSYSTEM", "dnsProxyHostIPAddress"), ("ZHNSYSTEM", "dnsProxyHostName"), ("ZHNSYSTEM", "dnsProxyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemDNSProxyHostGroup = zhnSystemDNSProxyHostGroup.setStatus('current')
zhnSystemWanBackupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 15)).setObjects(("ZHNSYSTEM", "failoverTimer"), ("ZHNSYSTEM", "restoralTimer"), ("ZHNSYSTEM", "backupDataVlan"), ("ZHNSYSTEM", "cellularPinNumber"), ("ZHNSYSTEM", "cellularDataNumber"), ("ZHNSYSTEM", "atInitCommands"), ("ZHNSYSTEM", "accessPointName"), ("ZHNSYSTEM", "chapPapUsername"), ("ZHNSYSTEM", "chapPapPassword"), ("ZHNSYSTEM", "connectionTimeout"), ("ZHNSYSTEM", "backupIpAddressMode"), ("ZHNSYSTEM", "backupIpAddress"), ("ZHNSYSTEM", "backupDefaultGateway"), ("ZHNSYSTEM", "backupSubnetMask"), ("ZHNSYSTEM", "backupPrimaryDns"), ("ZHNSYSTEM", "backupSecondaryDns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemWanBackupGroup = zhnSystemWanBackupGroup.setStatus('current')
zhnSystemTr69cGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 2, 2, 1, 16)).setObjects(("ZHNSYSTEM", "sysTr69cConfigLoggingSOAP"), ("ZHNSYSTEM", "sysTr69cConfigConnectionRequestAuthentication"), ("ZHNSYSTEM", "sysTr69cServerURL"), ("ZHNSYSTEM", "sysTr69cServerLastConnectedURL"), ("ZHNSYSTEM", "sysTr69cServerUsername"), ("ZHNSYSTEM", "sysTr69cServerPassword"), ("ZHNSYSTEM", "sysTr69cServerPeriodicInformEnable"), ("ZHNSYSTEM", "sysTr69cServerPeriodicInformInterval"), ("ZHNSYSTEM", "sysTr69cServerParameterKey"), ("ZHNSYSTEM", "sysTr69cServerBoundIfName"), ("ZHNSYSTEM", "sysTr69cServerConnectionRequestURL"), ("ZHNSYSTEM", "sysTr69cServerConnectionRequestUsername"), ("ZHNSYSTEM", "sysTr69cServerConnectionRequestPassword"), ("ZHNSYSTEM", "sysTr69cServerUpgradesManaged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnSystemTr69cGroup = zhnSystemTr69cGroup.setStatus('current')
mibBuilder.exportSymbols("ZHNSYSTEM", boardPartNumber=boardPartNumber, zhnDefaultTrapCommunity=zhnDefaultTrapCommunity, numberOfTemperatureSensors=numberOfTemperatureSensors, supportUserName=supportUserName, sysTransmitClockSource=sysTransmitClockSource, macBaseAddress=macBaseAddress, userUserName=userUserName, pldIndex=pldIndex, LPT=LPT, zhnSystemFirewallGroup=zhnSystemFirewallGroup, zhnSystemActiveGroup=zhnSystemActiveGroup, zhnTrapTypeEnterprise=zhnTrapTypeEnterprise, zhnSystemSNMPObjects=zhnSystemSNMPObjects, zhnSystemTablesItems=zhnSystemTablesItems, zhnFixedCommunityTableEntry=zhnFixedCommunityTableEntry, sysDNSDHCPSource=sysDNSDHCPSource, sysTr69cServerURL=sysTr69cServerURL, sysTr69cServerBoundIfName=sysTr69cServerBoundIfName, sysFirewallEnable=sysFirewallEnable, TCSI=TCSI, pldName=pldName, ethernetlikeInterfaceTable=ethernetlikeInterfaceTable, trapPort=trapPort, temperatureSensorName=temperatureSensorName, sysSynchronizationMode=sysSynchronizationMode, zhnSystemTr69cGroup=zhnSystemTr69cGroup, temperatureSensorMaximum=temperatureSensorMaximum, zhnSystemConfigItems=zhnSystemConfigItems, numberOfCommunities=numberOfCommunities, sysSnmpProvisioningLock=sysSnmpProvisioningLock, sysLogMode=sysLogMode, CDA=CDA, etherPowerPairs=etherPowerPairs, backupDataVlan=backupDataVlan, numberOfPlds=numberOfPlds, numberOfBoards=numberOfBoards, PYSNMP_MODULE_ID=zhnSystem, SysLogMode=SysLogMode, sysFirmwareVersion=sysFirmwareVersion, sysLogRemoteServerPort=sysLogRemoteServerPort, adminPassword=adminPassword, supportPassword=supportPassword, SysLogLevel=SysLogLevel, boardDescriptorTable=boardDescriptorTable, fixedCommunityName=fixedCommunityName, zhnSystemTrapItems=zhnSystemTrapItems, zhnSystemTrapObjects=zhnSystemTrapObjects, zhnSystemCompliances=zhnSystemCompliances, sysClockMode=sysClockMode, sntpServer4=sntpServer4, etherName=etherName, zhnSystemSyslogObjects=zhnSystemSyslogObjects, accessPointName=accessPointName, sysAltFirmwareVersion=sysAltFirmwareVersion, atInitCommands=atInitCommands, sysRestoreAltFirmwareVersion=sysRestoreAltFirmwareVersion, zhnSystem=zhnSystem, restoralTimer=restoralTimer, boardDescriptorEntry=boardDescriptorEntry, backupIpAddressMode=backupIpAddressMode, zhnSystemPowerSheddingObjects=zhnSystemPowerSheddingObjects, temperatureSensorIndex=temperatureSensorIndex, zhnCommunityTable=zhnCommunityTable, zhnSystemFixedCommunityItems=zhnSystemFixedCommunityItems, sysLocalTimingReference=sysLocalTimingReference, zhnTrapTypeConfigChange=zhnTrapTypeConfigChange, sysBootloaderVersion=sysBootloaderVersion, backupSecondaryDns=backupSecondaryDns, WFNT=WFNT, powerSheddingAdminStatus=powerSheddingAdminStatus, zhnSystemPldObjects=zhnSystemPldObjects, sysLogLocalLogLevel=sysLogLocalLogLevel, boardName=boardName, sysDNSSecondaryIPAddress=sysDNSSecondaryIPAddress, modelNumber=modelNumber, trapVersion=trapVersion, userPassword=userPassword, backupIpAddress=backupIpAddress, zhnSystemRadioObjects=zhnSystemRadioObjects, sysLogAdminStatus=sysLogAdminStatus, etherSubtype=etherSubtype, communityType=communityType, chapPapUsername=chapPapUsername, sysTr69cServerConnectionRequestUsername=sysTr69cServerConnectionRequestUsername, trapRowStatus=trapRowStatus, temperatureSensorEntry=temperatureSensorEntry, zhnSystemWanBackupObjects=zhnSystemWanBackupObjects, zhnTrapTypeColdStart=zhnTrapTypeColdStart, zhnSystemAction=zhnSystemAction, zhnDnsProxyHostTable=zhnDnsProxyHostTable, dnsProxyRowStatus=dnsProxyRowStatus, sysTr69cServerPassword=sysTr69cServerPassword, zhnSystemDNSProxyHostGroup=zhnSystemDNSProxyHostGroup, zhnDnsProxyHostEntry=zhnDnsProxyHostEntry, zhnSntpConfigGroup=zhnSntpConfigGroup, sysEthernetTransmitClockSource=sysEthernetTransmitClockSource, numberOfTrapManagers=numberOfTrapManagers, zhnTrapManagerInfoTable=zhnTrapManagerInfoTable, sysLogDisplayLogLevel=sysLogDisplayLogLevel, SysAdminStatus=SysAdminStatus, boardIndex=boardIndex, dnsProxyHostIndex=dnsProxyHostIndex, sysSoftwareReboot=sysSoftwareReboot, IPInterfaceAddressingTypeValues=IPInterfaceAddressingTypeValues, zhnSystemWanBackupGroup=zhnSystemWanBackupGroup, zhnSystemUserLoginObjects=zhnSystemUserLoginObjects, powerSheddingShutdownDelay=powerSheddingShutdownDelay, trapDestination=trapDestination, zhnSystemDNSProxyObjects=zhnSystemDNSProxyObjects, zhnSystemEthernetLikeObjects=zhnSystemEthernetLikeObjects, SysFirmwareAction=SysFirmwareAction, zhnSystemGeneralObjects=zhnSystemGeneralObjects, communityRowStatus=communityRowStatus, zhnFixedCommunityTable=zhnFixedCommunityTable, zhnPowerSheddingGroup=zhnPowerSheddingGroup, pldDescriptorEntry=pldDescriptorEntry, sntpOperStatus=sntpOperStatus, ELSUBTYPE=ELSUBTYPE, chapPapPassword=chapPapPassword, etherType=etherType, sysTr69cServerConnectionRequestURL=sysTr69cServerConnectionRequestURL, communityName=communityName, locationLatitude=locationLatitude, temperatureSensorMinimum=temperatureSensorMinimum, dnsProxyHostIPAddress=dnsProxyHostIPAddress, sysTr69cConfigLoggingSOAP=sysTr69cConfigLoggingSOAP, sysTr69cConfigConnectionRequestAuthentication=sysTr69cConfigConnectionRequestAuthentication, zhnSystemCompliance=zhnSystemCompliance, ethernetlikeInterfaceEntry=ethernetlikeInterfaceEntry, zhnCommunityTableEntry=zhnCommunityTableEntry, cellularDataNumber=cellularDataNumber, zhnSystemCommunityItems=zhnSystemCommunityItems, sysDs1ClockSourcePort=sysDs1ClockSourcePort, zhnSystemTempSensorObjects=zhnSystemTempSensorObjects, ELTYPE=ELTYPE, BasicAddressingTypeValues=BasicAddressingTypeValues, ETCS=ETCS, adminUserName=adminUserName, sysSnmpProvisioningChange=sysSnmpProvisioningChange, sysFirewallTcpSynCookies=sysFirewallTcpSynCookies, backupSubnetMask=backupSubnetMask, CSMI=CSMI, sysSynchronousEthernet=sysSynchronousEthernet, zhnTrapTypeWarmStart=zhnTrapTypeWarmStart, zhnSystemBoardObjects=zhnSystemBoardObjects, backupDefaultGateway=backupDefaultGateway, LTRI=LTRI, failoverTimer=failoverTimer, boardSerialNumber=boardSerialNumber, cellularPinNumber=cellularPinNumber, sysCfgDBAction=sysCfgDBAction, boardRevision=boardRevision, pldDescriptorTable=pldDescriptorTable, SEI=SEI, sysTr69cServerLastConnectedURL=sysTr69cServerLastConnectedURL, sysTr69cServerPeriodicInformEnable=sysTr69cServerPeriodicInformEnable, zhnSystemTr69cObjects=zhnSystemTr69cObjects, sysTr69cServerConnectionRequestPassword=sysTr69cServerConnectionRequestPassword, sysTr69cConfigObjects=sysTr69cConfigObjects, sysTr69cServerPeriodicInformInterval=sysTr69cServerPeriodicInformInterval, sysTr69cServerUsername=sysTr69cServerUsername, SysSntpTimeZones=SysSntpTimeZones, temperatureSensorTable=temperatureSensorTable, sysTr69cServerUpgradesManaged=sysTr69cServerUpgradesManaged, sysSystemClockSource=sysSystemClockSource, etherLinePower=etherLinePower, powerSheddingRestoreDelay=powerSheddingRestoreDelay, zhnSystemFirewallObjects=zhnSystemFirewallObjects, zhnTrapTypeLinkUpDown=zhnTrapTypeLinkUpDown, UPT=UPT, zhnSystemDNSClientObjects=zhnSystemDNSClientObjects, fixedCommunityRowStatus=fixedCommunityRowStatus, dnsProxyHostName=dnsProxyHostName, sntpServer5=sntpServer5, connectionTimeout=connectionTimeout, sysTr69cServerObjects=sysTr69cServerObjects, CMI=CMI, sntpServer1=sntpServer1, zhnSyslogConfigGroup=zhnSyslogConfigGroup, etherNumberOfPorts=etherNumberOfPorts, trapCommunityName=trapCommunityName, sntpServer3=sntpServer3, zhnSystemObjects=zhnSystemObjects, SCS=SCS, numberOfMacAddresses=numberOfMacAddresses, zhnTrapManagerInfoTableEntry=zhnTrapManagerInfoTableEntry, powerSupplyType=powerSupplyType, sntpAdminStatus=sntpAdminStatus, sntpServer2=sntpServer2, zhnDnsProxyHostMaxHostEntries=zhnDnsProxyHostMaxHostEntries, zhnSystemGroups=zhnSystemGroups, sysDNSAddressingType=sysDNSAddressingType, zhnTrapTypeAuthFailure=zhnTrapTypeAuthFailure, zhnUserLoginGroup=zhnUserLoginGroup, backupPrimaryDns=backupPrimaryDns, etherIndex=etherIndex, numberOfRadios=numberOfRadios, zhnSysLocation=zhnSysLocation, zhnSystemClockingItems=zhnSystemClockingItems, locationLongitude=locationLongitude, RBT=RBT, wifiNetworkType=wifiNetworkType, zhnSysContact=zhnSysContact, numberOfEthernetLikeInterfaces=numberOfEthernetLikeInterfaces, sysLogRemoteLogLevel=sysLogRemoteLogLevel, zhnSystemDNSClientGroup=zhnSystemDNSClientGroup, sysTr69cServerParameterKey=sysTr69cServerParameterKey, zhnSystemSNTPObjects=zhnSystemSNTPObjects, pldVersion=pldVersion, sysLogRemoteServerAddress=sysLogRemoteServerAddress, sntpCurrentDateAndTime=sntpCurrentDateAndTime, fixedCommunityType=fixedCommunityType, sntpLocalTimeZone=sntpLocalTimeZone, sysDNSPrimaryIPAddress=sysDNSPrimaryIPAddress, zhnSystemConformance=zhnSystemConformance)
