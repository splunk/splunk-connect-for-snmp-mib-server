#
# PySNMP MIB module PDN-MPE-DEVICE-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-MPE-DEVICE-CONTROL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:30:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
pdn_mpe, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-mpe")
ResetStates, = mibBuilder.importSymbols("PDN-TC", "ResetStates")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, TimeTicks, IpAddress, ModuleIdentity, Bits, Unsigned32, MibIdentifier, ObjectIdentity, Counter64, NotificationType, Gauge32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "IpAddress", "ModuleIdentity", "Bits", "Unsigned32", "MibIdentifier", "ObjectIdentity", "Counter64", "NotificationType", "Gauge32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
mpeDevControl = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10))
mpeDevControl.setRevisions(('1902-04-29 00:00', '1902-04-09 09:05', '1900-11-21 18:00', '1900-10-26 14:00', '1900-10-18 18:30', '1900-10-06 18:00',))
if mibBuilder.loadTexts: mpeDevControl.setLastUpdated('0204290000Z')
if mibBuilder.loadTexts: mpeDevControl.setOrganization('Paradyne Corporation MIB Working Group')
mpeDevControlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1))
mpeDevControlMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 2))
mpeDevControlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 3))
mpeDevHwControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 1))
mpeDevFileXferConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2))
mpeDevFirmwareControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 3))
mpeDevTestControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 4))
mpeDevControlMIBTrapsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 2, 0))
if mibBuilder.loadTexts: mpeDevControlMIBTrapsV2.setStatus('current')
mpeDevControlTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 1, 1), )
if mibBuilder.loadTexts: mpeDevControlTable.setStatus('current')
mpeDevControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: mpeDevControlEntry.setStatus('current')
mpeDevControlReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 1, 1, 1, 1), ResetStates()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevControlReset.setStatus('current')
mpeDevControlSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 1, 2), )
if mibBuilder.loadTexts: mpeDevControlSelfTestTable.setStatus('current')
mpeDevControlSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: mpeDevControlSelfTestEntry.setStatus('current')
mpeDevControlExtendedSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("enableExtendSelfTestAndReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeDevControlExtendedSelfTest.setStatus('current')
mpeDevControlTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 4, 3), )
if mibBuilder.loadTexts: mpeDevControlTestTable.setStatus('current')
mpeDevControlTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 4, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: mpeDevControlTestEntry.setStatus('current')
mpeDevControlTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lampTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeDevControlTestType.setStatus('current')
mpeDevControlTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevControlTestStatus.setStatus('current')
mpeDevControlTestCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeDevControlTestCmd.setStatus('current')
mpeDevFileXferConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1), )
if mibBuilder.loadTexts: mpeDevFileXferConfigTable.setStatus('current')
mpeDevFileXferConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: mpeDevFileXferConfigEntry.setStatus('current')
mpeDevFileXferFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferFileName.setStatus('current')
mpeDevFileXferCopyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferCopyProtocol.setStatus('current')
mpeDevFileXferFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("firmware", 1), ("config", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferFileType.setStatus('current')
mpeDevFileXferServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferServerIpAddress.setStatus('current')
mpeDevFileXferUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferUserName.setStatus('current')
mpeDevFileXferUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferUserPassword.setStatus('current')
mpeDevFileXferOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("put", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferOperation.setStatus('current')
mpeDevFileXferPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFileXferPktsSent.setStatus('current')
mpeDevFileXferPktsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFileXferPktsRecv.setStatus('current')
mpeDevFileXferOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFileXferOctetsSent.setStatus('current')
mpeDevFileXferOctetsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFileXferOctetsRecv.setStatus('current')
mpeDevFileXferOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferOwnerString.setStatus('current')
mpeDevFileXferStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("failure", 3), ("inprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFileXferStatus.setStatus('current')
mpeDevFileXferErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFileXferErrorStatus.setStatus('current')
mpeDevFileXferSendEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferSendEvent.setStatus('current')
mpeDevFileXferRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferRowStatus.setStatus('current')
mpeDevFileXferXferTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFileXferXferTime.setStatus('current')
mpeDevFileXferFileFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFileXferFileFormat.setStatus('current')
mpeDevFirmwareControlTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 3, 1), )
if mibBuilder.loadTexts: mpeDevFirmwareControlTable.setStatus('current')
mpeDevFirmwareControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFirmwareControlIndex"))
if mibBuilder.loadTexts: mpeDevFirmwareControlEntry.setStatus('current')
mpeDevFirmwareControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFirmwareControlIndex.setStatus('current')
mpeDevFirmwareControlRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFirmwareControlRelease.setStatus('current')
mpeDevFirmwareControlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeDevFirmwareControlOperStatus.setStatus('current')
mpeDevFirmwareControlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpeDevFirmwareControlAdminStatus.setStatus('current')
mpeDevFileXferEvent = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 2, 0, 1)).setObjects(("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferStatus"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferErrorStatus"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferOperation"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferFileType"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferFileName"))
if mibBuilder.loadTexts: mpeDevFileXferEvent.setStatus('current')
mpeDevHwControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 3, 1)).setObjects(("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevControlReset"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevControlExtendedSelfTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpeDevHwControlGroup = mpeDevHwControlGroup.setStatus('current')
mpeDevFileXferConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 3, 2)).setObjects(("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferFileName"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferCopyProtocol"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferFileType"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferServerIpAddress"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferUserName"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferUserPassword"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferOperation"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferPktsSent"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferPktsRecv"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferOctetsSent"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferOctetsRecv"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferOwnerString"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferStatus"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferErrorStatus"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferSendEvent"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferRowStatus"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferXferTime"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferFileFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpeDevFileXferConfigGroup = mpeDevFileXferConfigGroup.setStatus('current')
mpeDevFirmwareControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 3, 3)).setObjects(("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFirmwareControlIndex"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFirmwareControlRelease"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFirmwareControlOperStatus"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFirmwareControlAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpeDevFirmwareControlGroup = mpeDevFirmwareControlGroup.setStatus('current')
mpeDevTestControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 3, 4)).setObjects(("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevControlTestType"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevControlTestStatus"), ("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevControlTestCmd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpeDevTestControlGroup = mpeDevTestControlGroup.setStatus('current')
mpeDevFileXferEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 10, 3, 5)).setObjects(("PDN-MPE-DEVICE-CONTROL-MIB", "mpeDevFileXferEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpeDevFileXferEventGroup = mpeDevFileXferEventGroup.setStatus('current')
mibBuilder.exportSymbols("PDN-MPE-DEVICE-CONTROL-MIB", mpeDevControlMIBTraps=mpeDevControlMIBTraps, mpeDevControlTestType=mpeDevControlTestType, mpeDevControlExtendedSelfTest=mpeDevControlExtendedSelfTest, mpeDevFileXferConfigEntry=mpeDevFileXferConfigEntry, mpeDevControlTestCmd=mpeDevControlTestCmd, mpeDevControlMIBGroups=mpeDevControlMIBGroups, mpeDevFileXferOwnerString=mpeDevFileXferOwnerString, mpeDevHwControlGroup=mpeDevHwControlGroup, mpeDevHwControl=mpeDevHwControl, mpeDevFileXferServerIpAddress=mpeDevFileXferServerIpAddress, mpeDevFirmwareControlTable=mpeDevFirmwareControlTable, mpeDevControlTestTable=mpeDevControlTestTable, mpeDevFirmwareControlRelease=mpeDevFirmwareControlRelease, mpeDevControlEntry=mpeDevControlEntry, PYSNMP_MODULE_ID=mpeDevControl, mpeDevControlTestStatus=mpeDevControlTestStatus, mpeDevFileXferEvent=mpeDevFileXferEvent, mpeDevControlTestEntry=mpeDevControlTestEntry, mpeDevFileXferConfigGroup=mpeDevFileXferConfigGroup, mpeDevControl=mpeDevControl, mpeDevFileXferFileName=mpeDevFileXferFileName, mpeDevFileXferFileFormat=mpeDevFileXferFileFormat, mpeDevControlReset=mpeDevControlReset, mpeDevFirmwareControlEntry=mpeDevFirmwareControlEntry, mpeDevControlTable=mpeDevControlTable, mpeDevControlMIBObjects=mpeDevControlMIBObjects, mpeDevFileXferPktsRecv=mpeDevFileXferPktsRecv, mpeDevFirmwareControlOperStatus=mpeDevFirmwareControlOperStatus, mpeDevTestControl=mpeDevTestControl, mpeDevFileXferOperation=mpeDevFileXferOperation, mpeDevFileXferUserName=mpeDevFileXferUserName, mpeDevFirmwareControlAdminStatus=mpeDevFirmwareControlAdminStatus, mpeDevFileXferPktsSent=mpeDevFileXferPktsSent, mpeDevFileXferStatus=mpeDevFileXferStatus, mpeDevFileXferOctetsSent=mpeDevFileXferOctetsSent, mpeDevFileXferErrorStatus=mpeDevFileXferErrorStatus, mpeDevFirmwareControlGroup=mpeDevFirmwareControlGroup, mpeDevTestControlGroup=mpeDevTestControlGroup, mpeDevFileXferRowStatus=mpeDevFileXferRowStatus, mpeDevFileXferUserPassword=mpeDevFileXferUserPassword, mpeDevFileXferSendEvent=mpeDevFileXferSendEvent, mpeDevControlSelfTestTable=mpeDevControlSelfTestTable, mpeDevFileXferOctetsRecv=mpeDevFileXferOctetsRecv, mpeDevControlMIBTrapsV2=mpeDevControlMIBTrapsV2, mpeDevFirmwareControlIndex=mpeDevFirmwareControlIndex, mpeDevFileXferCopyProtocol=mpeDevFileXferCopyProtocol, mpeDevFirmwareControl=mpeDevFirmwareControl, mpeDevControlSelfTestEntry=mpeDevControlSelfTestEntry, mpeDevFileXferConfig=mpeDevFileXferConfig, mpeDevFileXferXferTime=mpeDevFileXferXferTime, mpeDevFileXferFileType=mpeDevFileXferFileType, mpeDevFileXferEventGroup=mpeDevFileXferEventGroup, mpeDevFileXferConfigTable=mpeDevFileXferConfigTable)
