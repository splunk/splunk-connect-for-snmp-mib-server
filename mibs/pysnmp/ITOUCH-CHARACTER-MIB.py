#
# PySNMP MIB module ITOUCH-CHARACTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-CHARACTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
AddressType, DateTime, iTouch = mibBuilder.importSymbols("ITOUCH-MIB", "AddressType", "DateTime", "iTouch")
charPortIndex, = mibBuilder.importSymbols("RFC1316-MIB", "charPortIndex")
rs232OutSigState, rs232PortIndex, rs232InSigState = mibBuilder.importSymbols("RFC1317-MIB", "rs232OutSigState", "rs232PortIndex", "rs232InSigState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysLocation, = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation")
Unsigned32, NotificationType, iso, Counter64, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, ModuleIdentity, Counter32, NotificationType, Bits, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "iso", "Counter64", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Counter32", "NotificationType", "Bits", "Gauge32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
characterDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 2))
xCharacter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13))
xBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 1))
xQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 2))
xMenu = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 3))
xNetLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 4))
xDial = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 5))
xSessionLog = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 6))
xCcl = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 7))
xBroadcastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 8))
basicBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicBroadcast.setStatus('mandatory')
basicErrorReport = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicErrorReport.setStatus('mandatory')
basicLock = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLock.setStatus('mandatory')
basicInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicInactivityTimer.setStatus('mandatory')
basicPasswordRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPasswordRetryLimit.setStatus('mandatory')
basicPrivilegedPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPrivilegedPassword.setStatus('mandatory')
basicLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLoginPassword.setStatus('mandatory')
basicLoginPrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLoginPrompt.setStatus('mandatory')
basicWelcome = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicWelcome.setStatus('mandatory')
basicActivePorts = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActivePorts.setStatus('mandatory')
basicActivePortsHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActivePortsHigh.setStatus('mandatory')
basicActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveUsers.setStatus('mandatory')
basicActiveUsersHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveUsersHigh.setStatus('mandatory')
basicSessions = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessions.setStatus('mandatory')
basicSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessionsHigh.setStatus('mandatory')
basicSessionsLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSessionsLimit.setStatus('mandatory')
basicPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 17), )
if mibBuilder.loadTexts: basicPortTable.setStatus('mandatory')
basicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicPortIndex"))
if mibBuilder.loadTexts: basicPortEntry.setStatus('mandatory')
basicPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortIndex.setStatus('mandatory')
basicPortDefaultDestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("preferred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestAction.setStatus('mandatory')
basicPortDefaultDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lat", 1), ("telnet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestProtocol.setStatus('mandatory')
basicPortDefaultDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestName.setStatus('mandatory')
basicPortDefaultDestLATNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestLATNodeName.setStatus('mandatory')
basicPortDefaultDestLATPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestLATPortName.setStatus('mandatory')
basicPortAutoConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAutoConnect.setStatus('mandatory')
basicPortAutoLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAutoLogin.setStatus('mandatory')
basicPortBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortBroadcast.setStatus('mandatory')
basicPortConnectResume = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortConnectResume.setStatus('mandatory')
basicPortDialup = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDialup.setStatus('mandatory')
basicPortIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortIdleTimeout.setStatus('mandatory')
basicPortInactivityLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortInactivityLogout.setStatus('mandatory')
basicPortLossNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLossNotification.setStatus('mandatory')
basicPortMessageCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortMessageCodes.setStatus('mandatory')
basicPortMultisessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortMultisessions.setStatus('mandatory')
basicPortDefaultUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultUserName.setStatus('mandatory')
basicPortVerification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortVerification.setStatus('mandatory')
basicPortDefaultProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 13))).clone(namedValues=NamedValues(("lat", 1), ("telnet", 2), ("anylat", 3), ("anytelnet", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultProtocol.setStatus('mandatory')
basicPortLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLogins.setStatus('mandatory')
basicPortRemoteSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortRemoteSessions.setStatus('mandatory')
basicPortIdleTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortIdleTimeouts.setStatus('mandatory')
basicPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("idle", 1), ("local", 2), ("waitInput", 3), ("executingCommand", 4), ("connecting", 5), ("checkConnect", 6), ("waitOutput", 7), ("connected", 8), ("disconnecting", 9), ("disconnect", 10), ("suspended", 11), ("locked", 12), ("permanent", 13), ("loginWait", 14), ("retryConnect", 15), ("connectWait", 16), ("logout", 17), ("login", 18), ("waitSession", 19), ("reset", 20), ("testServiceWait", 21), ("testServiceOut", 22), ("connectPassword", 23), ("waitLogout", 24), ("waitQueue", 25), ("cancelQueue", 26), ("autobaud", 27), ("available", 28), ("checkModem", 29), ("slip", 30), ("signalWait", 31), ("scriptSearch", 32), ("scriptLoad", 33), ("scriptRun", 34), ("dialback1", 35), ("dialback2", 36), ("dialback3", 37), ("xremote", 38), ("ppp", 39), ("cslip", 40), ("arapInit", 41), ("cclAnswer", 42), ("cclOriginate", 43), ("cclHangup", 44), ("kerberos", 45), ("securID", 46), ("arapUser", 47), ("arapDialback", 48), ("arapSearch", 49), ("arapLoad", 50), ("arapRead", 51), ("arapDialDone", 52), ("arapExit", 53), ("arapEnabling", 54), ("arapConnecting", 55), ("cclLoading", 56), ("cclLoadError", 57), ("cclLoadWaiting", 58), ("cclExecute", 59), ("cclDone", 60), ("apd", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortStatus.setStatus('mandatory')
basicPortLastInCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLastInCharacter.setStatus('mandatory')
basicPortLastOutCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLastOutCharacter.setStatus('mandatory')
basicPortActiveUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortActiveUserName.setStatus('mandatory')
basicPortDefaultSessionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("interactive", 1), ("binary", 2), ("binaryWithFlow", 3), ("transparent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultSessionMode.setStatus('mandatory')
basicPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortZero.setStatus('mandatory')
basicPortZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortZeroTime.setStatus('mandatory')
basicPortUnixCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("primary", 3), ("only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortUnixCommands.setStatus('mandatory')
basicPortSessionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("interactive", 1), ("binary", 2), ("binaryWithFlow", 3), ("transparent", 4), ("noActiveSessions", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortSessionMode.setStatus('mandatory')
basicPortRemoteDisconnectNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortRemoteDisconnectNotify.setStatus('mandatory')
basicPortDefaultDestControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestControlled.setStatus('mandatory')
basicPortControlledPortLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledPortLogin.setStatus('mandatory')
basicPortControlledPortLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledPortLogout.setStatus('mandatory')
basicPortControlledSessionInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledSessionInitialize.setStatus('mandatory')
basicPortControlledSessionTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledSessionTerminate.setStatus('mandatory')
basicPortRloginTransparentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortRloginTransparentMode.setStatus('mandatory')
basicPortLoginDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLoginDuration.setStatus('mandatory')
basicPortOutboundSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortOutboundSecurity.setStatus('mandatory')
basicPortXonTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortXonTimer.setStatus('mandatory')
basicPortDefaultDedicatedSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDedicatedSessionType.setStatus('mandatory')
basicPortIdleTimeReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortIdleTimeReceive.setStatus('mandatory')
basicPortIdleTimeTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortIdleTimeTransmit.setStatus('mandatory')
basicPortZeroDisconnectSession = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortZeroDisconnectSession.setStatus('mandatory')
basicPortConsolePort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortConsolePort.setStatus('mandatory')
basicPortLoginPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLoginPassword.setStatus('mandatory')
basicPortSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortSensor.setStatus('mandatory')
basicPortAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmControl.setStatus('mandatory')
basicPortCommandLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortCommandLogging.setStatus('mandatory')
basicPortBreakSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortBreakSequence.setStatus('mandatory')
basicPortTl1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("hml", 2), ("mml", 3), ("mmlNoEcho", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortTl1Mode.setStatus('mandatory')
basicPortTl1Console = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortTl1Console.setStatus('mandatory')
basicPortFallThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortFallThrough.setStatus('mandatory')
basicPortCommandLoggingSuppressControlCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortCommandLoggingSuppressControlCharacters.setStatus('mandatory')
basicPortDataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDataLogging.setStatus('mandatory')
basicPortDataLoggingSuppressControlCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDataLoggingSuppressControlCharacters.setStatus('mandatory')
basicPortOnboardSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortOnboardSecurity.setStatus('mandatory')
basicPortFallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortFallBack.setStatus('mandatory')
basicPortAlarmMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMaster.setStatus('mandatory')
basicPortAlarmMasterAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterAccounting.setStatus('mandatory')
basicPortAlarmMasterAudibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterAudibleAlarm.setStatus('mandatory')
basicPortAlarmMasterFixTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterFixTime.setStatus('mandatory')
basicPortAlarmMasterLcdDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterLcdDisplayString.setStatus('mandatory')
basicPortAlarmMasterReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterReboot.setStatus('mandatory')
basicPortAlarmMasterUpdateFirmwareHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmwareHost.setStatus('mandatory')
basicPortAlarmMasterUpdateFirmwareFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmwareFileName.setStatus('mandatory')
basicPortAlarmMasterUpdateFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmware.setStatus('mandatory')
basicPortAlarmMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortAlarmMasterStatus.setStatus('mandatory')
basicPortAlarmMasterFaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterFaultSeverity.setStatus('mandatory')
basicPortPowerMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMaster.setStatus('mandatory')
basicPortPowerMasterTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 100, 200, 300, 400, 500, 600, 700, 800, 900))).clone(namedValues=NamedValues(("none", 1), ("oneHundred", 100), ("twoHundred", 200), ("threeHundred", 300), ("fourHundred", 400), ("fiveHundred", 500), ("sixHundred", 600), ("sevenHundred", 700), ("eightHundred", 800), ("nineHundred", 900))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMasterTimeDelay.setStatus('mandatory')
basicPortPowerMasterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMasterSwitch.setStatus('mandatory')
basicPortPowerMasterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterModel.setStatus('mandatory')
basicPortPowerMasterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterSerialNumber.setStatus('mandatory')
basicPortPowerMasterFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterFirmware.setStatus('mandatory')
basicPortLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLockout.setStatus('mandatory')
basicPortAsciiToTrapTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslation.setStatus('mandatory')
basicPortAsciiToTrapTranslationTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('cleared')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationTrapSeverity.setStatus('mandatory')
basicPortAsciiToTrapTranslationMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationMessages.setStatus('mandatory')
basicPortAsciiToTrapTranslationLastMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationLastMessage.setStatus('mandatory')
basicPortPowerMasterAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMasterAlarmSeverity.setStatus('mandatory')
basicPortPowerMasterDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterDeviceStatus.setStatus('mandatory')
basicSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 18), )
if mibBuilder.loadTexts: basicSerialPortTable.setStatus('mandatory')
basicSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicSerialPortIndex"))
if mibBuilder.loadTexts: basicSerialPortEntry.setStatus('mandatory')
basicSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSerialPortIndex.setStatus('mandatory')
basicSerialPortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("localSwitch", 2), ("sendRemote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBreak.setStatus('mandatory')
basicSerialPortInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortInterrupts.setStatus('mandatory')
basicSerialPortNoLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortNoLoss.setStatus('mandatory')
basicSerialPortPause = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPause.setStatus('mandatory')
basicSerialPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPrompt.setStatus('mandatory')
basicSerialPortTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansi", 1), ("hardcopy", 2), ("softcopy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortTerminalType.setStatus('mandatory')
basicSerialPortTypeaheadLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortTypeaheadLimit.setStatus('mandatory')
basicSerialPortBackwardSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBackwardSwitch.setStatus('mandatory')
basicSerialPortForwardSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortForwardSwitch.setStatus('mandatory')
basicSerialPortLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLocalSwitch.setStatus('mandatory')
basicSerialPortModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortModemControl.setStatus('mandatory')
basicSerialPortSignalCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortSignalCheck.setStatus('mandatory')
basicSerialPortDSRLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDSRLogout.setStatus('mandatory')
basicSerialPortDSRObserve = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDSRObserve.setStatus('mandatory')
basicSerialPortDCDTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDCDTimeout.setStatus('mandatory')
basicSerialPortDTRAssert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("always", 1), ("onConnectionOrRing", 2), ("onConnection", 3), ("onRing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDTRAssert.setStatus('mandatory')
basicSerialPortLimitedCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLimitedCommands.setStatus('mandatory')
basicSerialPortLimitedView = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLimitedView.setStatus('mandatory')
basicSerialPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPassword.setStatus('mandatory')
basicSerialPortLineEditor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditor.setStatus('mandatory')
basicSerialPortLineEditorBackspace = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorBackspace.setStatus('mandatory')
basicSerialPortLineEditorBeginning = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorBeginning.setStatus('mandatory')
basicSerialPortLineEditorCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorCancel.setStatus('mandatory')
basicSerialPortLineEditorDeleteBeginning = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteBeginning.setStatus('mandatory')
basicSerialPortLineEditorDeleteLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteLine.setStatus('mandatory')
basicSerialPortLineEditorEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorEnd.setStatus('mandatory')
basicSerialPortLineEditorForward = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorForward.setStatus('mandatory')
basicSerialPortLineEditorInsertToggle = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorInsertToggle.setStatus('mandatory')
basicSerialPortLineEditorNextLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorNextLine.setStatus('mandatory')
basicSerialPortLineEditorPreviousLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorPreviousLine.setStatus('mandatory')
basicSerialPortLineEditorQuotingCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorQuotingCharacter.setStatus('mandatory')
basicSerialPortLineEditorRedisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorRedisplay.setStatus('mandatory')
basicSerialPortQuadartReceiveDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortQuadartReceiveDiscard.setStatus('mandatory')
basicSerialPortAPDProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAPDProtocols.setStatus('mandatory')
basicSerialPortAPDTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAPDTimeout.setStatus('mandatory')
basicSerialPortAPDDefaultProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAPDDefaultProtocol.setStatus('mandatory')
basicSerialPortUsernameCharSet = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("seven-bit", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortUsernameCharSet.setStatus('mandatory')
basicSerialPortAutoHangup = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAutoHangup.setStatus('mandatory')
basicSerialPortCommandSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 16384)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortCommandSize.setStatus('mandatory')
basicSerialPortAutoProtocolDetectPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAutoProtocolDetectPrompt.setStatus('mandatory')
basicSerialPortUsernamePrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25)).clone('Enter username>')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortUsernamePrompt.setStatus('mandatory')
basicSerialPortPasswordPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25)).clone('Enter user password>')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPasswordPrompt.setStatus('mandatory')
basicSerialPortAutoProtocolDetectSecurityInteractiveOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAutoProtocolDetectSecurityInteractiveOnly.setStatus('mandatory')
basicSerialPortDedicatedUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDedicatedUserData.setStatus('mandatory')
basicSerialPortIpAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortIpAutoDiscovery.setStatus('deprecated')
basicSerialPortDedicatedKickStartData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDedicatedKickStartData.setStatus('mandatory')
basicSerialPortBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ms250", 1), ("ms500", 2), ("ms750", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBreakLength.setStatus('mandatory')
basicSerialPortRotaryRoundRobin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortRotaryRoundRobin.setStatus('mandatory')
basicSerialPortWelcomeBeforeAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortWelcomeBeforeAuthentication.setStatus('mandatory')
basicSerialPortGatewayAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortGatewayAutoDiscovery.setStatus('deprecated')
basicSerialPortSubnetAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortSubnetAutoDiscovery.setStatus('deprecated')
basicSerialPortRaiseLowerDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortRaiseLowerDtr.setStatus('mandatory')
basicSerialPortRaiseControlDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortRaiseControlDtr.setStatus('mandatory')
basicSerialPortIpConfigureBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortIpConfigureBootp.setStatus('deprecated')
basicConsoleLogoutDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicConsoleLogoutDisconnect.setStatus('mandatory')
basicControlledPorts = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlledPorts.setStatus('mandatory')
basicPortSessionTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 21), )
if mibBuilder.loadTexts: basicPortSessionTable.setStatus('mandatory')
basicPortSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicPortPortIndex"), (0, "ITOUCH-CHARACTER-MIB", "basicPortSessIndex"))
if mibBuilder.loadTexts: basicPortSessEntry.setStatus('mandatory')
basicPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPortIndex.setStatus('mandatory')
basicPortSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortSessIndex.setStatus('mandatory')
basicSessControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessControlled.setStatus('mandatory')
basicPortSessEncryption = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortSessEncryption.setStatus('mandatory')
basicTemperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fahrenheit", 1), ("celcius", 2))).clone('fahrenheit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureUnits.setStatus('mandatory')
basicEnvironmentalManagerCircuitBreaker = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicEnvironmentalManagerCircuitBreaker.setStatus('mandatory')
basicContactClosureOrAlarmInputTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 25), )
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputTable.setStatus('mandatory')
basicContactClosureOrAlarmInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputIndex"))
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputEntry.setStatus('mandatory')
basicContactClosureOrAlarmInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputValue.setStatus('mandatory')
basicContactClosureOrAlarmInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputName.setStatus('mandatory')
basicContactClosureOrAlarmInputTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputTrapEnable.setStatus('mandatory')
basicContactClosureOrAlarmInputFaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputFaultSeverity.setStatus('mandatory')
basicContactClosureOrAlarmInputFaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputFaultState.setStatus('mandatory')
basicContactClosureOrAlarmInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputStatus.setStatus('mandatory')
basicContactClosureOrAlarmInputZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputZone.setStatus('mandatory')
basicContactClosureOrAlarmInputRelatedEquipment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputRelatedEquipment.setStatus('mandatory')
basicContactClosureOrAlarmInputSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputSiteId.setStatus('mandatory')
basicContactClosureOrAlarmInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputIndex.setStatus('mandatory')
basicContactClosureOrAlarmInputManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputManufacturer.setStatus('mandatory')
basicContactClosureOrAlarmInputModel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputModel.setStatus('mandatory')
basicPowerOutletTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 26), )
if mibBuilder.loadTexts: basicPowerOutletTable.setStatus('mandatory')
basicPowerOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicPowerOutletIndex"))
if mibBuilder.loadTexts: basicPowerOutletEntry.setStatus('mandatory')
basicPowerOutletOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletOnOff.setStatus('mandatory')
basicPowerOutletReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletReboot.setStatus('mandatory')
basicPowerOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletName.setStatus('mandatory')
basicPowerOutletRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerOutletRedundant.setStatus('mandatory')
basicPowerOutletConsoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletConsoleName.setStatus('mandatory')
basicPowerOutletHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletHighCurrent.setStatus('mandatory')
basicPowerOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerOutletIndex.setStatus('mandatory')
basicTemperatureHumiditySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 1, 27))
basicTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1), )
if mibBuilder.loadTexts: basicTemperatureSensorTable.setStatus('mandatory')
basicTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicTemperatureSensorIndex"))
if mibBuilder.loadTexts: basicTemperatureSensorEntry.setStatus('mandatory')
basicTempTrapHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTempTrapHighThreshold.setStatus('mandatory')
basicTempTrapLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTempTrapLowThreshold.setStatus('mandatory')
basicTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureSensor.setStatus('mandatory')
basicTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureValue.setStatus('mandatory')
basicTemperatureAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureAlarmSeverity.setStatus('mandatory')
basicTemperatureAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicTemperatureAlarmStatus.setStatus('mandatory')
basicTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicTemperatureSensorIndex.setStatus('mandatory')
basicHumiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2), )
if mibBuilder.loadTexts: basicHumiditySensorTable.setStatus('mandatory')
basicHumiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicHumiditySensorIndex"))
if mibBuilder.loadTexts: basicHumiditySensorEntry.setStatus('mandatory')
basicHumidityTrapHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityTrapHighThreshold.setStatus('mandatory')
basicHumidityTrapLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityTrapLowThreshold.setStatus('mandatory')
basicHumiditySensor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumiditySensor.setStatus('mandatory')
basicHumidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityValue.setStatus('mandatory')
basicHumidityAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityAlarmSeverity.setStatus('mandatory')
basicHumidityAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHumidityAlarmStatus.setStatus('mandatory')
basicHumiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHumiditySensorIndex.setStatus('mandatory')
basicControlSignalTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 28), )
if mibBuilder.loadTexts: basicControlSignalTable.setStatus('mandatory')
basicControlSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 28, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicControlSignalIndex"))
if mibBuilder.loadTexts: basicControlSignalEntry.setStatus('mandatory')
basicControlSignalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlSignalValue.setStatus('mandatory')
basicControlSignalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 28, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlSignalIndex.setStatus('mandatory')
basicPowerAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerAlarmTimer.setStatus('mandatory')
basicControlOutputTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 30), )
if mibBuilder.loadTexts: basicControlOutputTable.setStatus('mandatory')
basicControlOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicControlOutputIndex"))
if mibBuilder.loadTexts: basicControlOutputEntry.setStatus('mandatory')
basicControlOutputSignalDtrRts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputSignalDtrRts.setStatus('mandatory')
basicControlOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputName.setStatus('mandatory')
basicControlOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlOutputIndex.setStatus('mandatory')
basicPowerStatusFuseA = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerStatusFuseA.setStatus('mandatory')
basicPowerStatusFuseB = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerStatusFuseB.setStatus('mandatory')
basicPowerSupplyStatusA = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerSupplyStatusA.setStatus('mandatory')
basicPowerSupplyStatusB = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerSupplyStatusB.setStatus('mandatory')
basicPortTrapTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 35), )
if mibBuilder.loadTexts: basicPortTrapTable.setStatus('mandatory')
basicPortTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicPortTrapIndex"), (0, "ITOUCH-CHARACTER-MIB", "basicPortSignalName"))
if mibBuilder.loadTexts: basicPortTrapEntry.setStatus('mandatory')
basicPortTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortTrapIndex.setStatus('mandatory')
basicPortSignalName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortSignalName.setStatus('mandatory')
basicPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortTrapStatus.setStatus('mandatory')
basicAlarmMasterInputTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 36), )
if mibBuilder.loadTexts: basicAlarmMasterInputTable.setStatus('mandatory')
basicAlarmMasterInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputPort"), (0, "ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputSlot"), (0, "ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputPoint"))
if mibBuilder.loadTexts: basicAlarmMasterInputEntry.setStatus('mandatory')
basicAlarmMasterInputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputPort.setStatus('mandatory')
basicAlarmMasterInputSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputSlot.setStatus('mandatory')
basicAlarmMasterInputPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputPoint.setStatus('mandatory')
basicAlarmMasterInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputName.setStatus('mandatory')
basicAlarmMasterInputTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputTrapEnable.setStatus('mandatory')
basicAlarmMasterControlOutputSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterControlOutputSignal.setStatus('mandatory')
basicAlarmMasterInputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputEnable.setStatus('mandatory')
basicAlarmMasterInputDebounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputDebounceInterval.setStatus('mandatory')
basicAlarmMasterInputFaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputFaultSeverity.setStatus('mandatory')
basicAlarmMasterInputFaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('closed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputFaultState.setStatus('mandatory')
basicAlarmMasterInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputStatus.setStatus('mandatory')
basicAlarmMasterInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputValue.setStatus('mandatory')
basicAlarmMasterDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterDisplay.setStatus('mandatory')
basicPowerMasterOutletTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 37), )
if mibBuilder.loadTexts: basicPowerMasterOutletTable.setStatus('mandatory')
basicPowerMasterOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicPowerMasterPortIndex"), (0, "ITOUCH-CHARACTER-MIB", "basicPowerMasterOutletIndex"))
if mibBuilder.loadTexts: basicPowerMasterOutletEntry.setStatus('mandatory')
basicPowerMasterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerMasterPortIndex.setStatus('mandatory')
basicPowerMasterOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerMasterOutletIndex.setStatus('mandatory')
basicPowerMasterOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerMasterOutletName.setStatus('mandatory')
basicPowerMasterOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerMasterOutletState.setStatus('mandatory')
basicPowerMasterOutletAmperageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerMasterOutletAmperageStatus.setStatus('mandatory')
basicControlOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 38), )
if mibBuilder.loadTexts: basicControlOutputRelayTable.setStatus('mandatory')
basicControlOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "basicControlOutputRelayIndex"))
if mibBuilder.loadTexts: basicControlOutputRelayEntry.setStatus('mandatory')
basicControlOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlOutputRelayIndex.setStatus('mandatory')
basicControlOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputRelayName.setStatus('mandatory')
basicControlOutputRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputRelayState.setStatus('mandatory')
basicControlOutputRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlOutputRelayStatus.setStatus('mandatory')
basicAutoProtocolDetectMessage = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('AutoProtocolDetect - Begin protocol or enter 4 returns for interactive mode.')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAutoProtocolDetectMessage.setStatus('mandatory')
queueLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueLimit.setStatus('mandatory')
queueHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueHigh.setStatus('mandatory')
queueNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueNumber.setStatus('mandatory')
queueTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 2, 4), )
if mibBuilder.loadTexts: queueTable.setStatus('mandatory')
queueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "queueJob"))
if mibBuilder.loadTexts: queueEntry.setStatus('mandatory')
queueJob = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueJob.setStatus('mandatory')
queueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueStatus.setStatus('mandatory')
queueSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueSourceName.setStatus('mandatory')
queueServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServiceName.setStatus('mandatory')
queueServicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServicePortIndex.setStatus('mandatory')
queueServicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServicePortName.setStatus('mandatory')
queuePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 2, 5), )
if mibBuilder.loadTexts: queuePortTable.setStatus('mandatory')
queuePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "queuePortIndex"))
if mibBuilder.loadTexts: queuePortEntry.setStatus('mandatory')
queuePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortIndex.setStatus('mandatory')
queuePortQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuePortQueuing.setStatus('mandatory')
menuNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuNumber.setStatus('mandatory')
menuContinuePrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuContinuePrompt.setStatus('mandatory')
menuSelectionPrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuSelectionPrompt.setStatus('mandatory')
menuTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 3, 4), )
if mibBuilder.loadTexts: menuTable.setStatus('mandatory')
menuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "menuIndex"))
if mibBuilder.loadTexts: menuEntry.setStatus('mandatory')
menuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuIndex.setStatus('mandatory')
menuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuStatus.setStatus('mandatory')
menuText = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuText.setStatus('mandatory')
menuCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuCommand.setStatus('mandatory')
menuPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 3, 5), )
if mibBuilder.loadTexts: menuPortTable.setStatus('mandatory')
menuPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "menuPortIndex"))
if mibBuilder.loadTexts: menuPortEntry.setStatus('mandatory')
menuPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuPortIndex.setStatus('mandatory')
menuPortMenuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("privileged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortMenuStatus.setStatus('mandatory')
menuPortNestedMenuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortNestedMenuStatus.setStatus('mandatory')
menuPortNestedMenuPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortNestedMenuPrivilege.setStatus('mandatory')
menuPortNestedTopLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortNestedTopLevel.setStatus('mandatory')
menuNestedName = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('NESTMENU.TXT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedName.setStatus('mandatory')
menuNestedScriptMaximum = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 204800)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedScriptMaximum.setStatus('mandatory')
menuNestedSystemName = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedSystemName.setStatus('mandatory')
menuNestedEthernet = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedEthernet.setStatus('mandatory')
netLoginNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginNumber.setStatus('mandatory')
netLoginServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 4, 2), )
if mibBuilder.loadTexts: netLoginServerTable.setStatus('mandatory')
netLoginServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "netLoginServerName"))
if mibBuilder.loadTexts: netLoginServerEntry.setStatus('mandatory')
netLoginServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginServerName.setStatus('mandatory')
netLoginServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerStatus.setStatus('mandatory')
netLoginServerPath = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerPath.setStatus('mandatory')
netLoginServerSeparator = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerSeparator.setStatus('mandatory')
netLoginPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 4, 3), )
if mibBuilder.loadTexts: netLoginPortTable.setStatus('mandatory')
netLoginPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "netLoginPortIndex"))
if mibBuilder.loadTexts: netLoginPortEntry.setStatus('mandatory')
netLoginPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortIndex.setStatus('mandatory')
netLoginPortScriptUse = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortScriptUse.setStatus('mandatory')
netLoginPortScriptEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortScriptEcho.setStatus('mandatory')
netLoginPortLoaderAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 4), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderAddressType.setStatus('mandatory')
netLoginPortLoaderAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderAddress.setStatus('mandatory')
netLoginPortLoaderFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderFile.setStatus('mandatory')
netLoginPortExecuteFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortExecuteFile.setStatus('mandatory')
dialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 5, 1), )
if mibBuilder.loadTexts: dialPortTable.setStatus('mandatory')
dialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "dialPortIndex"))
if mibBuilder.loadTexts: dialPortEntry.setStatus('mandatory')
dialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialPortIndex.setStatus('mandatory')
dialPortDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialback.setStatus('mandatory')
dialPortDialbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialbackTimeout.setStatus('mandatory')
dialPortDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("query", 2), ("slip", 3), ("ppp", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialout.setStatus('mandatory')
dialPortDialbackNoUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialbackNoUsername.setStatus('mandatory')
sessionLogLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogLimit.setStatus('mandatory')
sessionLogTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 6, 2), )
if mibBuilder.loadTexts: sessionLogTable.setStatus('mandatory')
sessionLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "sessionLogIndex"))
if mibBuilder.loadTexts: sessionLogEntry.setStatus('mandatory')
sessionLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogIndex.setStatus('mandatory')
sessionLogConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogConnectionID.setStatus('mandatory')
sessionLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogPort.setStatus('mandatory')
sessionLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 13, 14, 15))).clone(namedValues=NamedValues(("login", 1), ("connectLocal", 2), ("connectRemote", 3), ("disconnect", 4), ("rCPConnect", 5), ("rCPDisconnect", 6), ("x25Connect", 13), ("x25Disconnect", 14), ("processDefined", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogEvent.setStatus('mandatory')
sessionLogEventDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("none", 1), ("protocolBadCircuit", 2), ("protocolBadCredits", 3), ("protocolBadStartOrRun", 4), ("protocolBadRange", 5), ("duplicateQueueID", 6), ("noUsers", 7), ("noServiceResourced", 8), ("serviceUserDisconnect", 9), ("serviceUnavailable", 10), ("serverUserDisconnect", 11), ("noNodeResources", 12), ("systemShutdown", 13), ("nodeUserdisconnect", 14), ("badCircuitTimer", 15), ("badServiceClass", 16), ("badMessageOrSlot", 17), ("timeout", 18), ("noProgress", 19), ("serviceNotOnPort", 20), ("noSuchPort", 21), ("badPassword", 22), ("serviceBusy", 23), ("noSuchService", 24), ("serviceDisabled", 25), ("notInQueue", 26), ("noImmeditatAccess", 27), ("accessDenied", 28), ("protocolBadSolicit", 29), ("protocolBadReasonCode", 30), ("unsupportedTest", 31), ("domainTooLong", 32), ("noSuchNode", 33), ("noSuchServiceOnNode", 34), ("rejectService", 35), ("internetConnectDisabled", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogEventDetail.setStatus('mandatory')
sessionLogUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogUserName.setStatus('mandatory')
sessionLogRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogRemoteName.setStatus('mandatory')
sessionLogConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 8), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogConnectTime.setStatus('mandatory')
sessionLogDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 9), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogDisconnectTime.setStatus('mandatory')
sessionLogInCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogInCharacters.setStatus('mandatory')
sessionLogOutCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogOutCharacters.setStatus('mandatory')
sessionLogVerboseEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15))).clone(namedValues=NamedValues(("login", 1), ("connectLocal", 2), ("connectRemote", 3), ("disconnect", 4), ("connectRcp", 5), ("disconnectRcp", 6), ("telnetMaint", 7), ("xremote", 8), ("xprinter", 9), ("lpd", 12), ("connectX25", 13), ("disconnectX25", 14), ("userDefined", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogVerboseEvent.setStatus('mandatory')
sessionLogX25Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25Direction.setStatus('mandatory')
sessionLogVerboseMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogVerboseMessage.setStatus('mandatory')
sessionLogX25CallerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25CallerAddress.setStatus('mandatory')
sessionLogX25CalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25CalledAddress.setStatus('mandatory')
sessionLogX25DisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25DisconnectCause.setStatus('mandatory')
sessionLogX25DisconnectDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25DisconnectDiagnostic.setStatus('mandatory')
sessionLogHostType = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("unix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostType.setStatus('mandatory')
sessionLogHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostAddress.setStatus('mandatory')
sessionLogVerbose = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogVerbose.setStatus('mandatory')
sessionLogPriority = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogPriority.setStatus('mandatory')
sessionLogEmpty = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogEmpty.setStatus('mandatory')
sessionLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8), ("user", 9))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogFacility.setStatus('mandatory')
sessionLogReliable = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogReliable.setStatus('mandatory')
sessionLogHostSecondaryType = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("unix", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostSecondaryType.setStatus('mandatory')
sessionLogHostSecondaryAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostSecondaryAddress.setStatus('mandatory')
sessionLogZeroAccountingAll = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroAccountingAll.setStatus('mandatory')
sessionLogZeroCommandLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroCommandLogging.setStatus('mandatory')
sessionLogTl1AutonomousLogSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogTl1AutonomousLogSize.setStatus('mandatory')
sessionLogTl1CommandLogSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogTl1CommandLogSize.setStatus('mandatory')
sessionLogZeroDataLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroDataLogging.setStatus('mandatory')
sessionLogZeroAlarmLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroAlarmLogging.setStatus('mandatory')
cclParsedScriptTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 7, 1), )
if mibBuilder.loadTexts: cclParsedScriptTable.setStatus('mandatory')
cclParsedScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 7, 1, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "cclScriptName"))
if mibBuilder.loadTexts: cclParsedScriptEntry.setStatus('mandatory')
cclScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cclScriptName.setStatus('mandatory')
cclScriptControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("refresh", 1), ("delete", 2))).clone('refresh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cclScriptControl.setStatus('mandatory')
cclPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 7, 2), )
if mibBuilder.loadTexts: cclPortTable.setStatus('mandatory')
cclPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 7, 2, 1), ).setIndexNames((0, "RFC1316-MIB", "charPortIndex"))
if mibBuilder.loadTexts: cclPortEntry.setStatus('mandatory')
cclPortCclName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cclPortCclName.setStatus('mandatory')
cclPortModemAudible = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cclPortModemAudible.setStatus('mandatory')
broadcastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 8, 1), )
if mibBuilder.loadTexts: broadcastGroupTable.setStatus('mandatory')
broadcastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1), ).setIndexNames((0, "ITOUCH-CHARACTER-MIB", "broadcastGroupIndex"))
if mibBuilder.loadTexts: broadcastGroupEntry.setStatus('mandatory')
broadcastGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastGroupIndex.setStatus('mandatory')
broadcastGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupStatus.setStatus('mandatory')
broadcastGroupMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupMaster.setStatus('mandatory')
broadcastGroupSlaves = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlaves.setStatus('mandatory')
broadcastGroupSlavesBroadcastOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlavesBroadcastOnly.setStatus('mandatory')
broadcastGroupSlaveTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65554))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlaveTcpPort.setStatus('mandatory')
broadcastGroupSlaveTcpBroadcastOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlaveTcpBroadcastOnly.setStatus('mandatory')
contactClosureChanged = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30)).setObjects(("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputValue"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputName"), ("SNMPv2-MIB", "sysLocation"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputIndex"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputStatus"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputZone"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputRelatedEquipment"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputSiteId"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputManufacturer"), ("ITOUCH-CHARACTER-MIB", "basicContactClosureOrAlarmInputModel"))
powerAlarmFuseBankA = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,31)).setObjects(("ITOUCH-CHARACTER-MIB", "basicPowerStatusFuseA"), ("SNMPv2-MIB", "sysLocation"))
powerAlarmFuseBankB = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,32)).setObjects(("ITOUCH-CHARACTER-MIB", "basicPowerStatusFuseB"), ("SNMPv2-MIB", "sysLocation"))
powerSupplyAlarmA = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,33)).setObjects(("ITOUCH-CHARACTER-MIB", "basicPowerSupplyStatusA"), ("SNMPv2-MIB", "sysLocation"))
powerSupplyAlarmB = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,34)).setObjects(("ITOUCH-CHARACTER-MIB", "basicPowerSupplyStatusB"), ("SNMPv2-MIB", "sysLocation"))
portInputSignalChange = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,35)).setObjects(("RFC1317-MIB", "rs232InSigState"), ("SNMPv2-MIB", "sysLocation"), ("RFC1317-MIB", "rs232PortIndex"))
portOutputSignalChange = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,36)).setObjects(("RFC1317-MIB", "rs232OutSigState"), ("SNMPv2-MIB", "sysLocation"), ("RFC1317-MIB", "rs232PortIndex"))
humidityThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,37)).setObjects(("ITOUCH-CHARACTER-MIB", "basicHumidityValue"), ("SNMPv2-MIB", "sysLocation"), ("ITOUCH-CHARACTER-MIB", "basicHumiditySensorIndex"), ("ITOUCH-CHARACTER-MIB", "basicHumidityAlarmStatus"))
temperatureThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,38)).setObjects(("ITOUCH-CHARACTER-MIB", "basicTemperatureValue"), ("SNMPv2-MIB", "sysLocation"), ("ITOUCH-CHARACTER-MIB", "basicTemperatureSensorIndex"), ("ITOUCH-CHARACTER-MIB", "basicTemperatureAlarmStatus"))
alarmMasterNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,39)).setObjects(("ITOUCH-CHARACTER-MIB", "basicPortIndex"), ("SNMPv2-MIB", "sysLocation"), ("ITOUCH-CHARACTER-MIB", "basicPortAlarmMasterStatus"))
alarmMasterInputStateChange = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,41)).setObjects(("ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputValue"), ("ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputName"), ("SNMPv2-MIB", "sysLocation"), ("ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputPort"), ("ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputStatus"), ("ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputSlot"), ("ITOUCH-CHARACTER-MIB", "basicAlarmMasterInputPoint"))
asciiToTrapTranslation = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,42)).setObjects(("ITOUCH-CHARACTER-MIB", "basicPortAsciiToTrapTranslationTrapSeverity"), ("ITOUCH-CHARACTER-MIB", "basicPortAsciiToTrapTranslationLastMessage"))
powerMasterNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,43)).setObjects(("ITOUCH-CHARACTER-MIB", "basicPortIndex"), ("SNMPv2-MIB", "sysLocation"), ("ITOUCH-CHARACTER-MIB", "basicPortPowerMasterDeviceStatus"))
mibBuilder.exportSymbols("ITOUCH-CHARACTER-MIB", basicSerialPortLimitedView=basicSerialPortLimitedView, queueHigh=queueHigh, queueEntry=queueEntry, basicAlarmMasterInputStatus=basicAlarmMasterInputStatus, queueStatus=queueStatus, basicPortDefaultDedicatedSessionType=basicPortDefaultDedicatedSessionType, basicPortZero=basicPortZero, basicSerialPortDedicatedKickStartData=basicSerialPortDedicatedKickStartData, basicSerialPortUsernamePrompt=basicSerialPortUsernamePrompt, menuNestedName=menuNestedName, basicAlarmMasterDisplay=basicAlarmMasterDisplay, sessionLogX25CalledAddress=sessionLogX25CalledAddress, basicPortDefaultDestLATPortName=basicPortDefaultDestLATPortName, menuPortNestedMenuPrivilege=menuPortNestedMenuPrivilege, basicHumidityAlarmSeverity=basicHumidityAlarmSeverity, basicPowerMasterOutletName=basicPowerMasterOutletName, basicSerialPortIndex=basicSerialPortIndex, alarmMasterInputStateChange=alarmMasterInputStateChange, sessionLogTable=sessionLogTable, netLoginServerSeparator=netLoginServerSeparator, basicSessions=basicSessions, sessionLogVerboseMessage=sessionLogVerboseMessage, basicPortOnboardSecurity=basicPortOnboardSecurity, basicAlarmMasterControlOutputSignal=basicAlarmMasterControlOutputSignal, sessionLogVerboseEvent=sessionLogVerboseEvent, dialPortEntry=dialPortEntry, xCcl=xCcl, netLoginPortTable=netLoginPortTable, basicPowerMasterOutletTable=basicPowerMasterOutletTable, basicTemperatureSensorTable=basicTemperatureSensorTable, broadcastGroupIndex=broadcastGroupIndex, basicTemperatureAlarmStatus=basicTemperatureAlarmStatus, basicPowerOutletEntry=basicPowerOutletEntry, basicTemperatureUnits=basicTemperatureUnits, basicSerialPortNoLoss=basicSerialPortNoLoss, basicLoginPassword=basicLoginPassword, queueJob=queueJob, basicSerialPortWelcomeBeforeAuthentication=basicSerialPortWelcomeBeforeAuthentication, cclPortTable=cclPortTable, basicSerialPortLineEditorDeleteLine=basicSerialPortLineEditorDeleteLine, basicAlarmMasterInputDebounceInterval=basicAlarmMasterInputDebounceInterval, basicSerialPortGatewayAutoDiscovery=basicSerialPortGatewayAutoDiscovery, basicTempTrapHighThreshold=basicTempTrapHighThreshold, basicContactClosureOrAlarmInputStatus=basicContactClosureOrAlarmInputStatus, basicSerialPortRaiseControlDtr=basicSerialPortRaiseControlDtr, dialPortDialout=dialPortDialout, broadcastGroupEntry=broadcastGroupEntry, basicPowerOutletOnOff=basicPowerOutletOnOff, basicPortControlledPortLogout=basicPortControlledPortLogout, basicPortPowerMasterDeviceStatus=basicPortPowerMasterDeviceStatus, xBroadcastGroup=xBroadcastGroup, basicControlOutputEntry=basicControlOutputEntry, powerSupplyAlarmA=powerSupplyAlarmA, sessionLogX25DisconnectCause=sessionLogX25DisconnectCause, sessionLogX25DisconnectDiagnostic=sessionLogX25DisconnectDiagnostic, broadcastGroupSlaveTcpBroadcastOnly=broadcastGroupSlaveTcpBroadcastOnly, sessionLogEntry=sessionLogEntry, basicSerialPortLocalSwitch=basicSerialPortLocalSwitch, netLoginServerEntry=netLoginServerEntry, basicContactClosureOrAlarmInputValue=basicContactClosureOrAlarmInputValue, basicPortDataLoggingSuppressControlCharacters=basicPortDataLoggingSuppressControlCharacters, broadcastGroupSlavesBroadcastOnly=broadcastGroupSlavesBroadcastOnly, powerSupplyAlarmB=powerSupplyAlarmB, basicPortRemoteSessions=basicPortRemoteSessions, sessionLogTl1CommandLogSize=sessionLogTl1CommandLogSize, basicPortIdleTimeReceive=basicPortIdleTimeReceive, sessionLogZeroDataLogging=sessionLogZeroDataLogging, basicContactClosureOrAlarmInputIndex=basicContactClosureOrAlarmInputIndex, basicPortAutoLogin=basicPortAutoLogin, queuePortQueuing=queuePortQueuing, basicSerialPortLineEditorDeleteBeginning=basicSerialPortLineEditorDeleteBeginning, basicEnvironmentalManagerCircuitBreaker=basicEnvironmentalManagerCircuitBreaker, basicSerialPortBackwardSwitch=basicSerialPortBackwardSwitch, basicPortDefaultDestName=basicPortDefaultDestName, basicAlarmMasterInputSlot=basicAlarmMasterInputSlot, basicPortAlarmMasterUpdateFirmwareFileName=basicPortAlarmMasterUpdateFirmwareFileName, basicPowerStatusFuseA=basicPowerStatusFuseA, basicSerialPortLineEditorCancel=basicSerialPortLineEditorCancel, basicContactClosureOrAlarmInputFaultState=basicContactClosureOrAlarmInputFaultState, basicPortControlledPortLogin=basicPortControlledPortLogin, basicPortSessEntry=basicPortSessEntry, basicSerialPortLineEditor=basicSerialPortLineEditor, basicActivePortsHigh=basicActivePortsHigh, sessionLogPriority=sessionLogPriority, netLoginServerName=netLoginServerName, basicPortBreakSequence=basicPortBreakSequence, netLoginPortIndex=netLoginPortIndex, basicPortInactivityLogout=basicPortInactivityLogout, basicPortIdleTimeout=basicPortIdleTimeout, basicPortStatus=basicPortStatus, basicSerialPortIpConfigureBootp=basicSerialPortIpConfigureBootp, queueLimit=queueLimit, basicLock=basicLock, characterDep=characterDep, basicPortCommandLoggingSuppressControlCharacters=basicPortCommandLoggingSuppressControlCharacters, basicPowerMasterOutletState=basicPowerMasterOutletState, sessionLogTl1AutonomousLogSize=sessionLogTl1AutonomousLogSize, basicPowerMasterPortIndex=basicPowerMasterPortIndex, dialPortDialback=dialPortDialback, sessionLogHostSecondaryType=sessionLogHostSecondaryType, basicContactClosureOrAlarmInputManufacturer=basicContactClosureOrAlarmInputManufacturer, basicControlSignalValue=basicControlSignalValue, basicContactClosureOrAlarmInputTrapEnable=basicContactClosureOrAlarmInputTrapEnable, basicPortSignalName=basicPortSignalName, basicPortZeroTime=basicPortZeroTime, basicTemperatureHumiditySensor=basicTemperatureHumiditySensor, menuStatus=menuStatus, basicTemperatureAlarmSeverity=basicTemperatureAlarmSeverity, xCharacter=xCharacter, basicSerialPortDTRAssert=basicSerialPortDTRAssert, basicPortTrapTable=basicPortTrapTable, basicAlarmMasterInputValue=basicAlarmMasterInputValue, basicPortSessionMode=basicPortSessionMode, basicSessionsHigh=basicSessionsHigh, netLoginServerTable=netLoginServerTable, basicPortControlledSessionTerminate=basicPortControlledSessionTerminate, sessionLogConnectionID=sessionLogConnectionID, basicContactClosureOrAlarmInputRelatedEquipment=basicContactClosureOrAlarmInputRelatedEquipment, basicPortTrapStatus=basicPortTrapStatus, sessionLogEvent=sessionLogEvent, basicControlSignalEntry=basicControlSignalEntry, basicAlarmMasterInputEnable=basicAlarmMasterInputEnable, sessionLogLimit=sessionLogLimit, basicSerialPortRotaryRoundRobin=basicSerialPortRotaryRoundRobin, basicPortAsciiToTrapTranslationMessages=basicPortAsciiToTrapTranslationMessages, menuCommand=menuCommand, basicPortAsciiToTrapTranslation=basicPortAsciiToTrapTranslation, basicSerialPortLineEditorRedisplay=basicSerialPortLineEditorRedisplay, basicControlOutputTable=basicControlOutputTable, basicPowerSupplyStatusB=basicPowerSupplyStatusB, basicPortDefaultDestLATNodeName=basicPortDefaultDestLATNodeName, basicContactClosureOrAlarmInputModel=basicContactClosureOrAlarmInputModel, menuContinuePrompt=menuContinuePrompt, xBasic=xBasic, basicPortLossNotification=basicPortLossNotification, netLoginPortScriptEcho=netLoginPortScriptEcho, basicPortLoginDuration=basicPortLoginDuration, dialPortTable=dialPortTable, basicPortAlarmControl=basicPortAlarmControl, basicPortPowerMasterSerialNumber=basicPortPowerMasterSerialNumber, cclParsedScriptTable=cclParsedScriptTable, basicPortBroadcast=basicPortBroadcast, humidityThresholdExceeded=humidityThresholdExceeded, basicTemperatureSensorIndex=basicTemperatureSensorIndex, basicHumiditySensorIndex=basicHumiditySensorIndex, menuPortEntry=menuPortEntry, basicSerialPortLineEditorBeginning=basicSerialPortLineEditorBeginning, menuNestedSystemName=menuNestedSystemName, basicSerialPortLineEditorNextLine=basicSerialPortLineEditorNextLine, netLoginPortScriptUse=netLoginPortScriptUse, sessionLogOutCharacters=sessionLogOutCharacters, basicSerialPortSignalCheck=basicSerialPortSignalCheck, queueServicePortIndex=queueServicePortIndex, menuPortTable=menuPortTable, basicSessionsLimit=basicSessionsLimit, broadcastGroupMaster=broadcastGroupMaster, basicPowerMasterOutletEntry=basicPowerMasterOutletEntry, basicAlarmMasterInputName=basicAlarmMasterInputName, basicPowerSupplyStatusA=basicPowerSupplyStatusA, basicContactClosureOrAlarmInputFaultSeverity=basicContactClosureOrAlarmInputFaultSeverity, basicSerialPortForwardSwitch=basicSerialPortForwardSwitch, basicPortPowerMaster=basicPortPowerMaster, basicPortLogins=basicPortLogins, menuSelectionPrompt=menuSelectionPrompt, netLoginServerPath=netLoginServerPath, basicControlOutputRelayTable=basicControlOutputRelayTable, basicPortConsolePort=basicPortConsolePort, basicPowerOutletRedundant=basicPowerOutletRedundant, xQueue=xQueue, basicPortPowerMasterAlarmSeverity=basicPortPowerMasterAlarmSeverity, basicPortPowerMasterModel=basicPortPowerMasterModel, xSessionLog=xSessionLog, basicPortDataLogging=basicPortDataLogging, basicPowerOutletTable=basicPowerOutletTable, basicPortFallThrough=basicPortFallThrough, menuNestedScriptMaximum=menuNestedScriptMaximum, basicPowerOutletIndex=basicPowerOutletIndex, netLoginPortExecuteFile=netLoginPortExecuteFile, basicSerialPortLineEditorBackspace=basicSerialPortLineEditorBackspace, basicPortDefaultProtocol=basicPortDefaultProtocol, sessionLogVerbose=sessionLogVerbose, cclParsedScriptEntry=cclParsedScriptEntry, basicPortLoginPassword=basicPortLoginPassword, basicSerialPortBreak=basicSerialPortBreak, basicPortFallBack=basicPortFallBack, basicPortIdleTimeTransmit=basicPortIdleTimeTransmit, menuText=menuText, basicPowerMasterOutletIndex=basicPowerMasterOutletIndex, sessionLogZeroAccountingAll=sessionLogZeroAccountingAll, basicTemperatureSensorEntry=basicTemperatureSensorEntry, basicPortXonTimer=basicPortXonTimer, queuePortEntry=queuePortEntry, basicHumiditySensor=basicHumiditySensor, sessionLogDisconnectTime=sessionLogDisconnectTime, sessionLogEmpty=sessionLogEmpty, basicContactClosureOrAlarmInputSiteId=basicContactClosureOrAlarmInputSiteId, basicActivePorts=basicActivePorts, menuNumber=menuNumber, sessionLogRemoteName=sessionLogRemoteName, basicSerialPortEntry=basicSerialPortEntry, basicActiveUsers=basicActiveUsers, basicControlOutputRelayState=basicControlOutputRelayState, asciiToTrapTranslation=asciiToTrapTranslation, basicPortAlarmMasterLcdDisplayString=basicPortAlarmMasterLcdDisplayString, xMenu=xMenu, basicPasswordRetryLimit=basicPasswordRetryLimit, portOutputSignalChange=portOutputSignalChange, queueSourceName=queueSourceName, basicSerialPortLineEditorEnd=basicSerialPortLineEditorEnd, sessionLogInCharacters=sessionLogInCharacters, powerMasterNotResponding=powerMasterNotResponding, temperatureThresholdExceeded=temperatureThresholdExceeded, basicSerialPortIpAutoDiscovery=basicSerialPortIpAutoDiscovery, basicPortRemoteDisconnectNotify=basicPortRemoteDisconnectNotify, basicPortCommandLogging=basicPortCommandLogging, broadcastGroupStatus=broadcastGroupStatus, basicBroadcast=basicBroadcast, basicAlarmMasterInputFaultState=basicAlarmMasterInputFaultState, basicControlOutputRelayIndex=basicControlOutputRelayIndex, basicSerialPortLineEditorInsertToggle=basicSerialPortLineEditorInsertToggle, basicPortPortIndex=basicPortPortIndex, basicPowerStatusFuseB=basicPowerStatusFuseB, sessionLogZeroCommandLogging=sessionLogZeroCommandLogging, sessionLogFacility=sessionLogFacility, basicTempTrapLowThreshold=basicTempTrapLowThreshold, basicPortTl1Console=basicPortTl1Console, basicPortSessEncryption=basicPortSessEncryption, basicContactClosureOrAlarmInputEntry=basicContactClosureOrAlarmInputEntry, basicSerialPortAPDTimeout=basicSerialPortAPDTimeout, basicHumidityTrapLowThreshold=basicHumidityTrapLowThreshold, xDial=xDial, xNetLogin=xNetLogin, basicPortActiveUserName=basicPortActiveUserName, basicHumidityValue=basicHumidityValue, netLoginPortLoaderAddressType=netLoginPortLoaderAddressType, basicPowerMasterOutletAmperageStatus=basicPowerMasterOutletAmperageStatus, basicPortPowerMasterSwitch=basicPortPowerMasterSwitch, basicInactivityTimer=basicInactivityTimer, basicSerialPortAutoProtocolDetectPrompt=basicSerialPortAutoProtocolDetectPrompt, basicPortTrapEntry=basicPortTrapEntry, basicSessControlled=basicSessControlled, dialPortDialbackNoUsername=dialPortDialbackNoUsername, netLoginPortLoaderAddress=netLoginPortLoaderAddress, basicPortDefaultDestProtocol=basicPortDefaultDestProtocol, basicSerialPortCommandSize=basicSerialPortCommandSize, basicSerialPortTerminalType=basicSerialPortTerminalType, basicAlarmMasterInputPort=basicAlarmMasterInputPort, basicPortPowerMasterTimeDelay=basicPortPowerMasterTimeDelay, basicPortVerification=basicPortVerification, powerAlarmFuseBankB=powerAlarmFuseBankB, basicPortIdleTimeouts=basicPortIdleTimeouts, basicAlarmMasterInputEntry=basicAlarmMasterInputEntry, dialPortDialbackTimeout=dialPortDialbackTimeout, basicHumidityAlarmStatus=basicHumidityAlarmStatus)
mibBuilder.exportSymbols("ITOUCH-CHARACTER-MIB", basicAlarmMasterInputTrapEnable=basicAlarmMasterInputTrapEnable, basicPowerOutletReboot=basicPowerOutletReboot, basicSerialPortAutoProtocolDetectSecurityInteractiveOnly=basicSerialPortAutoProtocolDetectSecurityInteractiveOnly, basicControlSignalTable=basicControlSignalTable, basicPortTable=basicPortTable, basicControlOutputRelayStatus=basicControlOutputRelayStatus, dialPortIndex=dialPortIndex, menuEntry=menuEntry, basicWelcome=basicWelcome, basicPowerOutletHighCurrent=basicPowerOutletHighCurrent, queueNumber=queueNumber, basicPortDefaultUserName=basicPortDefaultUserName, broadcastGroupSlaves=broadcastGroupSlaves, menuPortNestedMenuStatus=menuPortNestedMenuStatus, basicActiveUsersHigh=basicActiveUsersHigh, sessionLogEventDetail=sessionLogEventDetail, basicContactClosureOrAlarmInputZone=basicContactClosureOrAlarmInputZone, basicPortIndex=basicPortIndex, basicTemperatureSensor=basicTemperatureSensor, basicPortDefaultSessionMode=basicPortDefaultSessionMode, basicPortMessageCodes=basicPortMessageCodes, sessionLogIndex=sessionLogIndex, sessionLogUserName=sessionLogUserName, basicAlarmMasterInputPoint=basicAlarmMasterInputPoint, basicSerialPortSubnetAutoDiscovery=basicSerialPortSubnetAutoDiscovery, sessionLogZeroAlarmLogging=sessionLogZeroAlarmLogging, powerAlarmFuseBankA=powerAlarmFuseBankA, portInputSignalChange=portInputSignalChange, basicPortAlarmMasterUpdateFirmwareHost=basicPortAlarmMasterUpdateFirmwareHost, basicSerialPortUsernameCharSet=basicSerialPortUsernameCharSet, basicErrorReport=basicErrorReport, basicSerialPortDSRLogout=basicSerialPortDSRLogout, basicPowerOutletName=basicPowerOutletName, menuIndex=menuIndex, basicPortAlarmMasterFixTime=basicPortAlarmMasterFixTime, basicPortDefaultDestAction=basicPortDefaultDestAction, basicSerialPortBreakLength=basicSerialPortBreakLength, contactClosureChanged=contactClosureChanged, basicSerialPortPause=basicSerialPortPause, basicControlSignalIndex=basicControlSignalIndex, basicPortAlarmMasterReboot=basicPortAlarmMasterReboot, basicHumiditySensorEntry=basicHumiditySensorEntry, cclPortEntry=cclPortEntry, basicAlarmMasterInputTable=basicAlarmMasterInputTable, basicPortTl1Mode=basicPortTl1Mode, sessionLogHostAddress=sessionLogHostAddress, queueTable=queueTable, basicControlOutputSignalDtrRts=basicControlOutputSignalDtrRts, cclScriptName=cclScriptName, menuPortMenuStatus=menuPortMenuStatus, basicPortZeroDisconnectSession=basicPortZeroDisconnectSession, basicSerialPortModemControl=basicSerialPortModemControl, basicSerialPortQuadartReceiveDiscard=basicSerialPortQuadartReceiveDiscard, basicSerialPortPassword=basicSerialPortPassword, basicControlOutputName=basicControlOutputName, menuPortNestedTopLevel=menuPortNestedTopLevel, basicPortEntry=basicPortEntry, basicLoginPrompt=basicLoginPrompt, basicSerialPortDSRObserve=basicSerialPortDSRObserve, basicPortLastInCharacter=basicPortLastInCharacter, basicSerialPortLineEditorForward=basicSerialPortLineEditorForward, basicPortMultisessions=basicPortMultisessions, basicPortAsciiToTrapTranslationLastMessage=basicPortAsciiToTrapTranslationLastMessage, cclPortCclName=cclPortCclName, queueServiceName=queueServiceName, sessionLogConnectTime=sessionLogConnectTime, queuePortIndex=queuePortIndex, alarmMasterNotResponding=alarmMasterNotResponding, sessionLogReliable=sessionLogReliable, basicPortConnectResume=basicPortConnectResume, basicPortDialup=basicPortDialup, basicPortSessionTable=basicPortSessionTable, basicPortTrapIndex=basicPortTrapIndex, sessionLogHostType=sessionLogHostType, basicSerialPortAutoHangup=basicSerialPortAutoHangup, menuPortIndex=menuPortIndex, sessionLogX25Direction=sessionLogX25Direction, basicSerialPortDedicatedUserData=basicSerialPortDedicatedUserData, menuNestedEthernet=menuNestedEthernet, basicSerialPortRaiseLowerDtr=basicSerialPortRaiseLowerDtr, broadcastGroupSlaveTcpPort=broadcastGroupSlaveTcpPort, basicSerialPortTable=basicSerialPortTable, sessionLogX25CallerAddress=sessionLogX25CallerAddress, basicPortRloginTransparentMode=basicPortRloginTransparentMode, basicPortAlarmMasterStatus=basicPortAlarmMasterStatus, basicPowerAlarmTimer=basicPowerAlarmTimer, basicSerialPortLineEditorQuotingCharacter=basicSerialPortLineEditorQuotingCharacter, basicPortDefaultDestControlled=basicPortDefaultDestControlled, basicContactClosureOrAlarmInputName=basicContactClosureOrAlarmInputName, basicPortUnixCommands=basicPortUnixCommands, netLoginNumber=netLoginNumber, basicContactClosureOrAlarmInputTable=basicContactClosureOrAlarmInputTable, basicPortAlarmMasterFaultSeverity=basicPortAlarmMasterFaultSeverity, basicPortOutboundSecurity=basicPortOutboundSecurity, basicSerialPortLineEditorPreviousLine=basicSerialPortLineEditorPreviousLine, basicPortLockout=basicPortLockout, basicSerialPortDCDTimeout=basicSerialPortDCDTimeout, cclScriptControl=cclScriptControl, netLoginPortEntry=netLoginPortEntry, basicHumiditySensorTable=basicHumiditySensorTable, basicHumidityTrapHighThreshold=basicHumidityTrapHighThreshold, basicConsoleLogoutDisconnect=basicConsoleLogoutDisconnect, basicSerialPortLimitedCommands=basicSerialPortLimitedCommands, basicControlOutputRelayName=basicControlOutputRelayName, basicControlOutputIndex=basicControlOutputIndex, sessionLogHostSecondaryAddress=sessionLogHostSecondaryAddress, basicSerialPortAPDProtocols=basicSerialPortAPDProtocols, basicPortLastOutCharacter=basicPortLastOutCharacter, basicSerialPortInterrupts=basicSerialPortInterrupts, basicSerialPortPrompt=basicSerialPortPrompt, basicSerialPortPasswordPrompt=basicSerialPortPasswordPrompt, queueServicePortName=queueServicePortName, basicPortAlarmMaster=basicPortAlarmMaster, netLoginPortLoaderFile=netLoginPortLoaderFile, cclPortModemAudible=cclPortModemAudible, netLoginServerStatus=netLoginServerStatus, basicPortAlarmMasterAccounting=basicPortAlarmMasterAccounting, basicControlledPorts=basicControlledPorts, basicPortPowerMasterFirmware=basicPortPowerMasterFirmware, basicPortControlledSessionInitialize=basicPortControlledSessionInitialize, basicPortAlarmMasterAudibleAlarm=basicPortAlarmMasterAudibleAlarm, basicSerialPortAPDDefaultProtocol=basicSerialPortAPDDefaultProtocol, basicTemperatureValue=basicTemperatureValue, basicControlOutputRelayEntry=basicControlOutputRelayEntry, basicPrivilegedPassword=basicPrivilegedPassword, basicPortSessIndex=basicPortSessIndex, basicPortAlarmMasterUpdateFirmware=basicPortAlarmMasterUpdateFirmware, basicPortAutoConnect=basicPortAutoConnect, basicAutoProtocolDetectMessage=basicAutoProtocolDetectMessage, broadcastGroupTable=broadcastGroupTable, basicSerialPortTypeaheadLimit=basicSerialPortTypeaheadLimit, basicPortSensor=basicPortSensor, queuePortTable=queuePortTable, basicPortAsciiToTrapTranslationTrapSeverity=basicPortAsciiToTrapTranslationTrapSeverity, sessionLogPort=sessionLogPort, basicPowerOutletConsoleName=basicPowerOutletConsoleName, menuTable=menuTable, basicAlarmMasterInputFaultSeverity=basicAlarmMasterInputFaultSeverity)
