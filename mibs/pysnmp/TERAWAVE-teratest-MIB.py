#
# PySNMP MIB module TERAWAVE-teratest-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teratest-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, IpAddress, Gauge32, ModuleIdentity, Unsigned32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, NotificationType, enterprises, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "IpAddress", "Gauge32", "ModuleIdentity", "Unsigned32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "NotificationType", "enterprises", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 14))
teraTestTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 14, 1), )
if mibBuilder.loadTexts: teraTestTable.setStatus('mandatory')
teraTestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1), ).setIndexNames((0, "TERAWAVE-teratest-MIB", "teraTestSourceSlot"), (0, "TERAWAVE-teratest-MIB", "teraTestIndex"))
if mibBuilder.loadTexts: teraTestTableEntry.setStatus('mandatory')
teraTestSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestSourceSlot.setStatus('mandatory')
teraTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 2), Counter32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestIndex.setStatus('mandatory')
teraTestTargetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetIfIndex.setStatus('mandatory')
teraTestTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetVpi.setStatus('mandatory')
teraTestTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetVci.setStatus('mandatory')
teraTestTargetDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetDirection.setStatus('mandatory')
teraTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestType.setStatus('mandatory')
teraTestMoreInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestMoreInfo.setStatus('mandatory')
teraTestResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestResultTimeStamp.setStatus('mandatory')
teraTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestResult.setStatus('mandatory')
teraTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("unkown", 2), ("timeout", 3), ("manualStop", 4), ("portFail", 5), ("invalidTarget", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestCode.setStatus('mandatory')
teraTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInService", 1), ("active", 2), ("inProgress", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestRowStatus.setStatus('mandatory')
teraTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("send", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestAction.setStatus('mandatory')
teraTestCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 14, 2), )
if mibBuilder.loadTexts: teraTestCapabilityTable.setStatus('mandatory')
teraTestCapabilityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1), ).setIndexNames((0, "TERAWAVE-teratest-MIB", "teraTestSourceSlot"))
if mibBuilder.loadTexts: teraTestCapabilityTableEntry.setStatus('mandatory')
teraTestIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestIndexNext.setStatus('mandatory')
teraTestTableMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1, 2), Counter32().subtype(subtypeSpec=ValueRangeConstraint(10, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestTableMaxSize.setStatus('mandatory')
teraTestCapabilityTypeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestCapabilityTypeBits.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-teratest-MIB", teraTestTableEntry=teraTestTableEntry, teraTestMoreInfo=teraTestMoreInfo, teraTestCapabilityTableEntry=teraTestCapabilityTableEntry, teraTestTableMaxSize=teraTestTableMaxSize, teraTestIndex=teraTestIndex, teraTestTargetDirection=teraTestTargetDirection, teraTestSourceSlot=teraTestSourceSlot, teraTestTable=teraTestTable, teraTestTargetVci=teraTestTargetVci, teraTestResultTimeStamp=teraTestResultTimeStamp, teraTestCode=teraTestCode, teraTestIndexNext=teraTestIndexNext, teraTestTargetIfIndex=teraTestTargetIfIndex, teraTestType=teraTestType, teraTestGroup=teraTestGroup, teraTestCapabilityTable=teraTestCapabilityTable, terawave=terawave, teraTestResult=teraTestResult, teraTestTargetVpi=teraTestTargetVpi, teraTestCapabilityTypeBits=teraTestCapabilityTypeBits, teraTestRowStatus=teraTestRowStatus, teraTestAction=teraTestAction)
