#
# PySNMP MIB module SHIVA-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SHIVA-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:55:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
tIP, = mibBuilder.importSymbols("SHIVA-MIB", "tIP")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Integer32, TimeTicks, ObjectIdentity, Counter64, Bits, IpAddress, iso, MibIdentifier, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Integer32", "TimeTicks", "ObjectIdentity", "Counter64", "Bits", "IpAddress", "iso", "MibIdentifier", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tARPClearCache = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tARPClearCache.setStatus('mandatory')
tIPClearRedirects = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tIPClearRedirects.setStatus('mandatory')
tUDPChecksums = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tUDPChecksums.setStatus('mandatory')
tIPBroadCastFill = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ones", 1), ("zeroes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tIPBroadCastFill.setStatus('mandatory')
tTimeServerTable = MibTable((1, 3, 6, 1, 4, 1, 166, 4, 3, 5), )
if mibBuilder.loadTexts: tTimeServerTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 5, 1) + (1000, ), Integer32())
tTimeServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 166, 4, 3, 5, 1), ).setIndexNames((0, "SHIVA-IP-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: tTimeServerEntry.setStatus('mandatory')
tTimeServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tTimeServerAddress.setStatus('mandatory')
tNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 166, 4, 3, 6), )
if mibBuilder.loadTexts: tNameServerTable.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 6, 1) + (1001, ), Integer32())
tNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 166, 4, 3, 6, 1), ).setIndexNames((0, "SHIVA-IP-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: tNameServerEntry.setStatus('mandatory')
tNameServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNameServerAddress.setStatus('mandatory')
tBootServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBootServerAddress.setStatus('mandatory')
tSerialIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 166, 4, 3, 8), )
if mibBuilder.loadTexts: tSerialIpAddressTable.setStatus('mandatory')
tSerialIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 166, 4, 3, 8, 1), ).setIndexNames((0, "SHIVA-IP-MIB", "tSerialIpAddressIndex"))
if mibBuilder.loadTexts: tSerialIpAddressEntry.setStatus('mandatory')
tSerialIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSerialIpAddressIndex.setStatus('mandatory')
tSerialIpAddressLocalDefaultAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tSerialIpAddressLocalDefaultAddress.setStatus('mandatory')
tSerialIpAddressRemoteDefaultAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tSerialIpAddressRemoteDefaultAddress.setStatus('deprecated')
tSerialIpAddressLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tSerialIpAddressLocalAddress.setStatus('deprecated')
tSerialIpAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 3, 8, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tSerialIpAddressRemoteAddress.setStatus('mandatory')
tAcceptAnyClientAddr = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tAcceptAnyClientAddr.setStatus('mandatory')
tNumIpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNumIpRoutes.setStatus('mandatory')
tUseConfiguredUserAddr = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tUseConfiguredUserAddr.setStatus('mandatory')
tUseConfiguredPortAddr = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tUseConfiguredPortAddr.setStatus('deprecated')
tUseDHCPAddr = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tUseDHCPAddr.setStatus('mandatory')
tHomeIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHomeIPAddr.setStatus('mandatory')
tUsePoolAddr = MibScalar((1, 3, 6, 1, 4, 1, 166, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tUsePoolAddr.setStatus('mandatory')
mibBuilder.exportSymbols("SHIVA-IP-MIB", tARPClearCache=tARPClearCache, tSerialIpAddressRemoteDefaultAddress=tSerialIpAddressRemoteDefaultAddress, tIPBroadCastFill=tIPBroadCastFill, tAcceptAnyClientAddr=tAcceptAnyClientAddr, tSerialIpAddressRemoteAddress=tSerialIpAddressRemoteAddress, tUDPChecksums=tUDPChecksums, tSerialIpAddressLocalAddress=tSerialIpAddressLocalAddress, tUseConfiguredUserAddr=tUseConfiguredUserAddr, pysmiFakeCol1001=pysmiFakeCol1001, tUseDHCPAddr=tUseDHCPAddr, tBootServerAddress=tBootServerAddress, tNumIpRoutes=tNumIpRoutes, tSerialIpAddressEntry=tSerialIpAddressEntry, tSerialIpAddressLocalDefaultAddress=tSerialIpAddressLocalDefaultAddress, tNameServerAddress=tNameServerAddress, tTimeServerTable=tTimeServerTable, tSerialIpAddressTable=tSerialIpAddressTable, tUsePoolAddr=tUsePoolAddr, tTimeServerEntry=tTimeServerEntry, pysmiFakeCol1000=pysmiFakeCol1000, tHomeIPAddr=tHomeIPAddr, tTimeServerAddress=tTimeServerAddress, tSerialIpAddressIndex=tSerialIpAddressIndex, tNameServerEntry=tNameServerEntry, tUseConfiguredPortAddr=tUseConfiguredPortAddr, tIPClearRedirects=tIPClearRedirects, tNameServerTable=tNameServerTable)
