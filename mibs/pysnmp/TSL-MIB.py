#
# PySNMP MIB module TSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TSL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, iso, Opaque, Bits, ModuleIdentity, enterprises, ObjectIdentity, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, MibIdentifier, Counter32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "iso", "Opaque", "Bits", "ModuleIdentity", "enterprises", "ObjectIdentity", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "MibIdentifier", "Counter32", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

tslMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6853))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 6853, 2))
alarmIdent = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIdent.setStatus('mandatory')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 6853, 2, 2), )
if mibBuilder.loadTexts: alarmTable.setStatus('mandatory')
alarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1), ).setIndexNames((0, "TSL-MIB", "alarmTableIndex"))
if mibBuilder.loadTexts: alarmEntry.setStatus('mandatory')
alarmTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTableIndex.setStatus('mandatory')
alarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 1), ("gpi", 2), ("outputFail", 3), ("psuFail", 4), ("currentAlarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmType.setStatus('mandatory')
alarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIndex.setStatus('mandatory')
alarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmText.setStatus('mandatory')
alarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('mandatory')
alarmPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normallyOpen", 2), ("normallyClosed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmPolarity.setStatus('mandatory')
alarmData = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 7), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmData.setStatus('optional')
alarmTotal = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTotal.setStatus('mandatory')
alarmLocation = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmLocation.setStatus('mandatory')
alarmEqptTemp = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptTemp.setStatus('optional')
alarmEqptTempHi = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmEqptTempHi.setStatus('optional')
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,4)).setObjects(("TSL-MIB", "alarmTableIndex"), ("TSL-MIB", "alarmType"), ("TSL-MIB", "alarmIndex"), ("TSL-MIB", "alarmText"), ("TSL-MIB", "alarmState"), ("TSL-MIB", "alarmPolarity"), ("TSL-MIB", "alarmData"))
alarmEqptTempHiTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,5)).setObjects(("TSL-MIB", "alarmEqptTemp"))
alarmEqptTempOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,6)).setObjects(("TSL-MIB", "alarmEqptTemp"))
mdu12 = MibIdentifier((1, 3, 6, 1, 4, 1, 6853, 3))
mdu12Ident = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdu12Ident.setStatus('mandatory')
mduPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("simultaneous", 1), ("sequential", 2), ("delayed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduPowerOn.setStatus('mandatory')
mduSeqDelay = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduSeqDelay.setStatus('mandatory')
mduOutputTable = MibTable((1, 3, 6, 1, 4, 1, 6853, 3, 4), )
if mibBuilder.loadTexts: mduOutputTable.setStatus('mandatory')
mduOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1), ).setIndexNames((0, "TSL-MIB", "mduOutputIndex"))
if mibBuilder.loadTexts: mduOutputEntry.setStatus('mandatory')
mduOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputIndex.setStatus('mandatory')
mduOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("locked-Off", 3), ("locked-On", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputState.setStatus('mandatory')
mduOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputDelay.setStatus('mandatory')
mduOutputlowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputlowerCurrent.setStatus('mandatory')
mduOutputupperCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputupperCurrent.setStatus('mandatory')
mduOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputCurrent.setStatus('mandatory')
mduOutputpowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputpowerFactor.setStatus('mandatory')
mduOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputVA.setStatus('mandatory')
mduOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputWatts.setStatus('mandatory')
mduOutputCal = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputCal.setStatus('mandatory')
mduPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("totalLoss", 1), ("input1OK", 2), ("input2OK", 3), ("allOk", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduPowerStatus.setStatus('mandatory')
mduVoltageCal = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduVoltageCal.setStatus('mandatory')
mduVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduVoltage.setStatus('mandatory')
mduVoltageFloor = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduVoltageFloor.setStatus('mandatory')
mduVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduVoltageLimit.setStatus('mandatory')
mduTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduTotalCurrent.setStatus('mandatory')
mduCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduCurrentLimit.setStatus('mandatory')
mduAuxRly1 = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduAuxRly1.setStatus('mandatory')
mduAuxRly2 = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduAuxRly2.setStatus('mandatory')
mduPowerStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,7)).setObjects(("TSL-MIB", "mduPowerStatus"))
mduVoltageStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,8)).setObjects(("TSL-MIB", "mduVoltage"))
mduTotalCurrentStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,9)).setObjects(("TSL-MIB", "mduTotalCurrent"))
mibBuilder.exportSymbols("TSL-MIB", alarmEqptTemp=alarmEqptTemp, mduCurrentLimit=mduCurrentLimit, alarmTable=alarmTable, mdu12Ident=mdu12Ident, alarmEntry=alarmEntry, mduOutputVA=mduOutputVA, alarmType=alarmType, alarmIndex=alarmIndex, mdu12=mdu12, alarmIdent=alarmIdent, mduOutputEntry=mduOutputEntry, mduOutputlowerCurrent=mduOutputlowerCurrent, alarmText=alarmText, tslMIB=tslMIB, mduAuxRly1=mduAuxRly1, mduVoltageLimit=mduVoltageLimit, mduOutputCal=mduOutputCal, mduVoltage=mduVoltage, mduOutputTable=mduOutputTable, mduOutputDelay=mduOutputDelay, alarmTableIndex=alarmTableIndex, mduPowerStatusTrap=mduPowerStatusTrap, mduSeqDelay=mduSeqDelay, alarmTrap=alarmTrap, mduTotalCurrentStatusTrap=mduTotalCurrentStatusTrap, DisplayString=DisplayString, mduOutputWatts=mduOutputWatts, alarmState=alarmState, alarmTotal=alarmTotal, mduOutputIndex=mduOutputIndex, mduTotalCurrent=mduTotalCurrent, alarmEqptTempHi=alarmEqptTempHi, alarm=alarm, alarmLocation=alarmLocation, mduOutputupperCurrent=mduOutputupperCurrent, alarmData=alarmData, mduPowerOn=mduPowerOn, mduOutputState=mduOutputState, alarmEqptTempHiTrap=alarmEqptTempHiTrap, alarmEqptTempOkTrap=alarmEqptTempOkTrap, mduOutputpowerFactor=mduOutputpowerFactor, mduPowerStatus=mduPowerStatus, alarmPolarity=alarmPolarity, mduOutputCurrent=mduOutputCurrent, mduAuxRly2=mduAuxRly2, mduVoltageCal=mduVoltageCal, mduVoltageFloor=mduVoltageFloor, mduVoltageStatusTrap=mduVoltageStatusTrap)
