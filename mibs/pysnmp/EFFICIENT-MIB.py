#
# PySNMP MIB module EFFICIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EFFICIENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, ObjectIdentity, Bits, Integer32, enterprises, TimeTicks, NotificationType, IpAddress, iso, ModuleIdentity, Counter64, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "ObjectIdentity", "Bits", "Integer32", "enterprises", "TimeTicks", "NotificationType", "IpAddress", "iso", "ModuleIdentity", "Counter64", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
efficient = MibIdentifier((1, 3, 6, 1, 4, 1, 763))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1))
mib_extensions = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2)).setLabel("mib-extensions")
xMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3))
modem5010 = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1, 5010))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1, 5010, 1))
router = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1, 5010, 2))
atu_R = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1, 5010, 2, 1)).setLabel("atu-R")
atu_C = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1, 5010, 2, 2)).setLabel("atu-C")
modem5621 = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1, 5621))
iad8600 = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 1, 8600))
mibRouter5660 = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 1))
mibIad8600 = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2))
iad8600Info = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 1))
iad8600Voice = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 2))
iad8600Data = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 3))
iad8600Wan = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 4))
iad8600System = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 5))
iad8600SystemCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 5, 1))
iad8600SystemTrapDest = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 5, 2))
iad8600DataPppAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 2, 2, 3, 1))
iad8600SystemGetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 763, 2, 2, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iad8600SystemGetCommunityString.setStatus('mandatory')
iad8600SystemTrapDestAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 763, 2, 2, 5, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iad8600SystemTrapDestAddr1.setStatus('mandatory')
iad8600SystemTrapDestAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 763, 2, 2, 5, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iad8600SystemTrapDestAddr2.setStatus('mandatory')
iad8600SystemTrapDestAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 763, 2, 2, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iad8600SystemTrapDestAddr3.setStatus('mandatory')
iad8600SystemTrapDestAddr4 = MibScalar((1, 3, 6, 1, 4, 1, 763, 2, 2, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iad8600SystemTrapDestAddr4.setStatus('mandatory')
iad8600DataPppAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 763, 2, 2, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iad8600DataPppAuthUsername.setStatus('mandatory')
iad8600DataPppAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 763, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iad8600DataPppAuthPassword.setStatus('mandatory')
modem = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 1))
adsl = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 2))
atm = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 3))
ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 4))
pppoe = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 4, 4))
nvram = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 5))
nvsys = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 5, 1))
nvatm = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 5, 2))
nvwlan = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 5, 3))
nvsntp = MibIdentifier((1, 3, 6, 1, 4, 1, 763, 3, 5, 4))
modemClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemClearCounters.setStatus('current')
modemPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemPartNumber.setStatus('current')
modemConfigPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemConfigPartNumber.setStatus('current')
modemBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemBuildNumber.setStatus('current')
modemFirmwareVersion1 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemFirmwareVersion1.setStatus('current')
modemFirmwareVersion2 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemFirmwareVersion2.setStatus('current')
modemFirmwareVersion3 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemFirmwareVersion3.setStatus('current')
modemReboot = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("save", 0), ("reboot", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: modemReboot.setStatus('current')
modemIsBridge = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bridge", 1), ("rtr", 2), ("brtr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIsBridge.setStatus('current')
modemNVRAMVersion = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemNVRAMVersion.setStatus('current')
modemMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemMacAddress.setStatus('current')
modemLANIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemLANIpAddress.setStatus('current')
modemLANMask = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemLANMask.setStatus('current')
adslTrainedPath = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslTrainedPath.setStatus('current')
adslTrainedMode = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslTrainedMode.setStatus('current')
atmVcl2_Table = MibTable((1, 3, 6, 1, 4, 1, 763, 3, 3, 1), ).setLabel("atmVcl2-Table")
if mibBuilder.loadTexts: atmVcl2_Table.setStatus('mandatory')
atmVclEntry2 = MibTableRow((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1), ).setIndexNames((0, "EFFICIENT-MIB", "ifIndex"), (0, "EFFICIENT-MIB", "ifIndex"), (0, "EFFICIENT-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmVclEntry2.setStatus('mandatory')
atmVcl2Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmVcl2Vpi.setStatus('optional')
atmVcl2Vci = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmVcl2Vci.setStatus('optional')
atmVcl2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 2048))).clone(namedValues=NamedValues(("none", 0), ("bridged1483", 1), ("pppoavcmux", 2), ("pppoallc", 4), ("pppoe", 8), ("routed1483", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2Protocol.setStatus('current')
atmVcl2RxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 4), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2RxRate.setStatus('current')
atmVcl2TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 5), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2TxRate.setStatus('current')
atmVcl2TxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 6), Gauge32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2TxPDUs.setStatus('current')
atmVcl2RxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 7), Gauge32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2RxPDUs.setStatus('current')
atmVcl2TxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 8), Gauge32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2TxErrs.setStatus('current')
atmVcl2RxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 9), Gauge32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2RxErrs.setStatus('current')
atmVcl2PCR = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVcl2PCR.setStatus('current')
atmVcl2SCR = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2SCR.setStatus('current')
atmVcl2RxSdu = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2RxSdu.setStatus('current')
atmVcl2TxSdu = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcl2TxSdu.setStatus('current')
pppConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pppConnect.setStatus('current')
pppDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 4, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pppDisconnect.setStatus('current')
pppTable = MibTable((1, 3, 6, 1, 4, 1, 763, 3, 4, 3), )
if mibBuilder.loadTexts: pppTable.setStatus('mandatory')
pppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 763, 3, 4, 3, 1), ).setIndexNames((0, "EFFICIENT-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppEntry.setStatus('mandatory')
pppLCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCPState.setStatus('current')
pppIPCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIPCPState.setStatus('current')
pppAUTHState = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppAUTHState.setStatus('current')
pppLCPOldState = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCPOldState.setStatus('current')
pppIPCPOldState = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIPCPOldState.setStatus('current')
pppAUTHOldState = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppAUTHOldState.setStatus('current')
pppoeTable = MibTable((1, 3, 6, 1, 4, 1, 763, 3, 4, 4, 1), )
if mibBuilder.loadTexts: pppoeTable.setStatus('mandatory')
pppoeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 763, 3, 4, 4, 1, 1), ).setIndexNames((0, "EFFICIENT-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppoeEntry.setStatus('mandatory')
pppoeAccessConcentratorName = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeAccessConcentratorName.setStatus('current')
pppoeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 4, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeServiceName.setStatus('current')
nvatmVccTable = MibTable((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 1), )
if mibBuilder.loadTexts: nvatmVccTable.setStatus('mandatory')
nvatmVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 1, 1), ).setIndexNames((0, "EFFICIENT-MIB", "vccIndex"))
if mibBuilder.loadTexts: nvatmVccEntry.setStatus('mandatory')
vccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: vccIndex.setStatus('current')
nvatmVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvatmVccVpi.setStatus('optional')
nvatmVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvatmVccVci.setStatus('optional')
nvatmVccAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvatmVccAalType.setStatus('current')
nvatmVccEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("llc", 1), ("vcm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvatmVccEncType.setStatus('current')
nvatmVccPoeTable = MibTable((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 2), )
if mibBuilder.loadTexts: nvatmVccPoeTable.setStatus('mandatory')
nvatmVccPoeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 2, 1), ).setIndexNames((0, "EFFICIENT-MIB", "vccIndex"), (0, "EFFICIENT-MIB", "poeIndex"))
if mibBuilder.loadTexts: nvatmVccPoeEntry.setStatus('mandatory')
vccIndex2 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: vccIndex2.setStatus('current')
poeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: poeIndex.setStatus('current')
pppUsrUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppUsrUsername.setStatus('current')
pppUsrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppUsrPassword.setStatus('current')
nvwlanMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanMacAddress.setStatus('current')
nvwlanChannel = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanChannel.setStatus('current')
nvwlanSsid = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanSsid.setStatus('current')
nvwlanSecurity = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("w64", 1), ("w128", 2), ("wpa", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanSecurity.setStatus('current')
nvwlanKey = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanKey.setStatus('current')
nvwlanK64_1 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 6), OctetString()).setLabel("nvwlanK64-1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanK64_1.setStatus('current')
nvwlanK64_2 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 7), OctetString()).setLabel("nvwlanK64-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanK64_2.setStatus('current')
nvwlanK64_3 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 8), OctetString()).setLabel("nvwlanK64-3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanK64_3.setStatus('current')
nvwlanK64_4 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 9), OctetString()).setLabel("nvwlanK64-4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanK64_4.setStatus('current')
nvwlanK128 = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanK128.setStatus('current')
nvwlanWpaAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tkip", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanWpaAlgorithm.setStatus('current')
nvwlanWpaKey = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanWpaKey.setStatus('current')
nvwlanWpaRenewal = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 13), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanWpaRenewal.setStatus('current')
nvwlanRate = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("auto", 0), ("r54", 1), ("r48", 2), ("r36", 3), ("r24", 4), ("r18", 5), ("r12", 6), ("r11", 7), ("r9", 8), ("r5", 9), ("r2", 10), ("r1", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanRate.setStatus('current')
nvwlanRts = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanRts.setStatus('current')
nvwlanFragmentation = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanFragmentation.setStatus('current')
nvwlanLocale = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanLocale.setStatus('current')
nvwlanEnableFilters = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanEnableFilters.setStatus('current')
nvwlanFilterIsDeny = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanFilterIsDeny.setStatus('current')
nvwlanDisableSsidBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanDisableSsidBroadcast.setStatus('current')
nvwlanDisabled = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanDisabled.setStatus('current')
nvwlanSharedKeyAuth = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanSharedKeyAuth.setStatus('current')
nvwlanInitialSetup = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanInitialSetup.setStatus('current')
nvwlanFiltTable = MibTable((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 24), )
if mibBuilder.loadTexts: nvwlanFiltTable.setStatus('mandatory')
nvwlanFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 24, 1), ).setIndexNames((0, "EFFICIENT-MIB", "filtIndex"))
if mibBuilder.loadTexts: nvwlanFiltEntry.setStatus('mandatory')
filtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: filtIndex.setStatus('current')
nvwlanFiltUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanFiltUsername.setStatus('current')
nvwlanFiltMac = MibTableColumn((1, 3, 6, 1, 4, 1, 763, 3, 5, 3, 24, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvwlanFiltMac.setStatus('current')
nvSntpPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSntpPrimaryServer.setStatus('current')
nvSntpBackupServer = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSntpBackupServer.setStatus('current')
nvSntpTimezone = MibScalar((1, 3, 6, 1, 4, 1, 763, 3, 5, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSntpTimezone.setStatus('current')
mibBuilder.exportSymbols("EFFICIENT-MIB", efficient=efficient, nvsntp=nvsntp, mibRouter5660=mibRouter5660, pppoeServiceName=pppoeServiceName, xMIB=xMIB, iad8600SystemTrapDestAddr1=iad8600SystemTrapDestAddr1, pppDisconnect=pppDisconnect, nvwlan=nvwlan, atmVcl2TxSdu=atmVcl2TxSdu, bridge=bridge, mibIad8600=mibIad8600, nvatmVccEncType=nvatmVccEncType, modemBuildNumber=modemBuildNumber, nvwlanK64_1=nvwlanK64_1, iad8600SystemTrapDestAddr2=iad8600SystemTrapDestAddr2, iad8600Voice=iad8600Voice, nvatm=nvatm, nvwlanFilterIsDeny=nvwlanFilterIsDeny, modemMacAddress=modemMacAddress, iad8600Info=iad8600Info, atmVcl2Vpi=atmVcl2Vpi, nvwlanEnableFilters=nvwlanEnableFilters, modemLANMask=modemLANMask, nvwlanRate=nvwlanRate, modemFirmwareVersion1=modemFirmwareVersion1, nvwlanK64_4=nvwlanK64_4, iad8600Wan=iad8600Wan, iad8600DataPppAuthUsername=iad8600DataPppAuthUsername, nvwlanWpaKey=nvwlanWpaKey, nvwlanSharedKeyAuth=nvwlanSharedKeyAuth, atmVcl2_Table=atmVcl2_Table, modemIsBridge=modemIsBridge, pppLCPState=pppLCPState, modemNVRAMVersion=modemNVRAMVersion, modem5621=modem5621, nvatmVccAalType=nvatmVccAalType, nvwlanWpaAlgorithm=nvwlanWpaAlgorithm, atmVcl2SCR=atmVcl2SCR, atmVcl2TxRate=atmVcl2TxRate, nvwlanFiltMac=nvwlanFiltMac, nvatmVccPoeTable=nvatmVccPoeTable, atmVcl2TxPDUs=atmVcl2TxPDUs, atm=atm, nvwlanFiltTable=nvwlanFiltTable, pppAUTHOldState=pppAUTHOldState, mib_extensions=mib_extensions, vccIndex2=vccIndex2, pppEntry=pppEntry, nvwlanK64_2=nvwlanK64_2, modem5010=modem5010, pppAUTHState=pppAUTHState, nvwlanSecurity=nvwlanSecurity, nvwlanMacAddress=nvwlanMacAddress, nvwlanChannel=nvwlanChannel, nvwlanFiltEntry=nvwlanFiltEntry, filtIndex=filtIndex, modemLANIpAddress=modemLANIpAddress, pppoe=pppoe, atmVcl2TxErrs=atmVcl2TxErrs, adsl=adsl, iad8600Data=iad8600Data, nvwlanInitialSetup=nvwlanInitialSetup, product=product, pppIPCPState=pppIPCPState, nvwlanDisabled=nvwlanDisabled, ppp=ppp, modemConfigPartNumber=modemConfigPartNumber, iad8600SystemGetCommunityString=iad8600SystemGetCommunityString, pppoeAccessConcentratorName=pppoeAccessConcentratorName, atmVcl2Vci=atmVcl2Vci, nvatmVccVpi=nvatmVccVpi, nvwlanWpaRenewal=nvwlanWpaRenewal, atmVcl2Protocol=atmVcl2Protocol, nvwlanFragmentation=nvwlanFragmentation, vccIndex=vccIndex, poeIndex=poeIndex, nvatmVccEntry=nvatmVccEntry, pppUsrUsername=pppUsrUsername, modemFirmwareVersion2=modemFirmwareVersion2, nvwlanSsid=nvwlanSsid, iad8600DataPppAuthPassword=iad8600DataPppAuthPassword, nvram=nvram, atmVcl2RxErrs=atmVcl2RxErrs, pppIPCPOldState=pppIPCPOldState, nvwlanK64_3=nvwlanK64_3, nvatmVccTable=nvatmVccTable, modemReboot=modemReboot, iad8600SystemTrapDestAddr3=iad8600SystemTrapDestAddr3, nvwlanKey=nvwlanKey, atmVcl2RxSdu=atmVcl2RxSdu, nvatmVccPoeEntry=nvatmVccPoeEntry, iad8600=iad8600, pppoeTable=pppoeTable, router=router, nvwlanLocale=nvwlanLocale, nvSntpPrimaryServer=nvSntpPrimaryServer, atmVcl2PCR=atmVcl2PCR, iad8600SystemTrapDest=iad8600SystemTrapDest, iad8600System=iad8600System, nvwlanK128=nvwlanK128, nvwlanDisableSsidBroadcast=nvwlanDisableSsidBroadcast, atu_R=atu_R, pppUsrPassword=pppUsrPassword, nvsys=nvsys, nvatmVccVci=nvatmVccVci, iad8600SystemTrapDestAddr4=iad8600SystemTrapDestAddr4, nvSntpTimezone=nvSntpTimezone, pppLCPOldState=pppLCPOldState, nvwlanFiltUsername=nvwlanFiltUsername, atmVcl2RxPDUs=atmVcl2RxPDUs, nvwlanRts=nvwlanRts, modemPartNumber=modemPartNumber, adslTrainedMode=adslTrainedMode, modemFirmwareVersion3=modemFirmwareVersion3, modemClearCounters=modemClearCounters, atmVclEntry2=atmVclEntry2, nvSntpBackupServer=nvSntpBackupServer, modem=modem, iad8600SystemCommunity=iad8600SystemCommunity, atmVcl2RxRate=atmVcl2RxRate, atu_C=atu_C, pppoeEntry=pppoeEntry, pppTable=pppTable, pppConnect=pppConnect, adslTrainedPath=adslTrainedPath, iad8600DataPppAuth=iad8600DataPppAuth)
