#
# PySNMP MIB module CABH-CDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CABH-CDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
clabProjCableHome, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjCableHome")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, MibIdentifier, Bits, ObjectIdentity, Integer32, Counter32, Unsigned32, IpAddress, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "MibIdentifier", "Bits", "ObjectIdentity", "Integer32", "Counter32", "Unsigned32", "IpAddress", "ModuleIdentity", "iso")
DisplayString, PhysAddress, TruthValue, TextualConvention, RowStatus, DateAndTime, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TruthValue", "TextualConvention", "RowStatus", "DateAndTime", "TimeStamp")
cabhCdpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4))
if mibBuilder.loadTexts: cabhCdpMib.setLastUpdated('200412160000Z')
if mibBuilder.loadTexts: cabhCdpMib.setOrganization('CableLabs Broadband Access Department')
cabhCdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1))
cabhCdpBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1))
cabhCdpAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2))
cabhCdpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3))
cabhCdpSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpSetToFactory.setStatus('current')
cabhCdpLanTransCurCount = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpLanTransCurCount.setStatus('current')
cabhCdpLanTransThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65533))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpLanTransThreshold.setStatus('current')
cabhCdpLanTransAction = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("noAssignment", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpLanTransAction.setStatus('current')
cabhCdpWanDataIpAddrCount = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpWanDataIpAddrCount.setStatus('current')
cabhCdpLastSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpLastSetToFactory.setStatus('current')
cabhCdpTimeOffsetSelection = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useDhcpOption2", 1), ("useSnmpSetOffset", 2))).clone('useDhcpOption2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpTimeOffsetSelection.setStatus('current')
cabhCdpSnmpSetTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-43200, 46800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpSnmpSetTimeOffset.setStatus('current')
cabhCdpDaylightSavingTimeEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpDaylightSavingTimeEnable.setStatus('current')
cabhCdpLanAddrTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1), )
if mibBuilder.loadTexts: cabhCdpLanAddrTable.setStatus('current')
cabhCdpLanAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1), ).setIndexNames((0, "CABH-CDP-MIB", "cabhCdpLanAddrIpType"), (0, "CABH-CDP-MIB", "cabhCdpLanAddrIp"))
if mibBuilder.loadTexts: cabhCdpLanAddrEntry.setStatus('current')
cabhCdpLanAddrIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cabhCdpLanAddrIpType.setStatus('current')
cabhCdpLanAddrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cabhCdpLanAddrIp.setStatus('current')
cabhCdpLanAddrClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCdpLanAddrClientID.setStatus('current')
cabhCdpLanAddrLeaseCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpLanAddrLeaseCreateTime.setStatus('current')
cabhCdpLanAddrLeaseExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpLanAddrLeaseExpireTime.setStatus('current')
cabhCdpLanAddrMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mgmtReservationInactive", 1), ("mgmtReservationActive", 2), ("dynamicInactive", 3), ("dynamicActive", 4), ("psReservationInactive", 5), ("psReservationActive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpLanAddrMethod.setStatus('current')
cabhCdpLanAddrHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpLanAddrHostName.setStatus('current')
cabhCdpLanAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCdpLanAddrRowStatus.setStatus('current')
cabhCdpWanDataAddrTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2), )
if mibBuilder.loadTexts: cabhCdpWanDataAddrTable.setStatus('current')
cabhCdpWanDataAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1), ).setIndexNames((0, "CABH-CDP-MIB", "cabhCdpWanDataAddrIndex"))
if mibBuilder.loadTexts: cabhCdpWanDataAddrEntry.setStatus('current')
cabhCdpWanDataAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cabhCdpWanDataAddrIndex.setStatus('current')
cabhCdpWanDataAddrClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCdpWanDataAddrClientId.setStatus('current')
cabhCdpWanDataAddrIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpWanDataAddrIpType.setStatus('current')
cabhCdpWanDataAddrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpWanDataAddrIp.setStatus('current')
cabhCdpWanDataAddrRenewalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpWanDataAddrRenewalTime.setStatus('deprecated')
cabhCdpWanDataAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCdpWanDataAddrRowStatus.setStatus('current')
cabhCdpWanDataAddrLeaseCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpWanDataAddrLeaseCreateTime.setStatus('current')
cabhCdpWanDataAddrLeaseExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpWanDataAddrLeaseExpireTime.setStatus('current')
cabhCdpWanDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 3), )
if mibBuilder.loadTexts: cabhCdpWanDnsServerTable.setStatus('current')
cabhCdpWanDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 3, 1), ).setIndexNames((0, "CABH-CDP-MIB", "cabhCdpWanDnsServerOrder"))
if mibBuilder.loadTexts: cabhCdpWanDnsServerEntry.setStatus('current')
cabhCdpWanDnsServerOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3))))
if mibBuilder.loadTexts: cabhCdpWanDnsServerOrder.setStatus('current')
cabhCdpWanDnsServerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 3, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpWanDnsServerIpType.setStatus('current')
cabhCdpWanDnsServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpWanDnsServerIp.setStatus('current')
cabhCdpLanPoolStartType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 1), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpLanPoolStartType.setStatus('current')
cabhCdpLanPoolStart = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 2), InetAddress().clone(hexValue="c0a8000a")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpLanPoolStart.setStatus('current')
cabhCdpLanPoolEndType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpLanPoolEndType.setStatus('current')
cabhCdpLanPoolEnd = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 4), InetAddress().clone(hexValue="c0a800fe")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpLanPoolEnd.setStatus('current')
cabhCdpServerNetworkNumberType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 5), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerNetworkNumberType.setStatus('current')
cabhCdpServerNetworkNumber = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 6), InetAddress().clone(hexValue="c0a80000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerNetworkNumber.setStatus('current')
cabhCdpServerSubnetMaskType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 7), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerSubnetMaskType.setStatus('current')
cabhCdpServerSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 8), InetAddress().clone(hexValue="ffffff00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerSubnetMask.setStatus('current')
cabhCdpServerTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-86400, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerTimeOffset.setStatus('current')
cabhCdpServerRouterType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 10), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerRouterType.setStatus('current')
cabhCdpServerRouter = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 11), InetAddress().clone(hexValue="c0a80001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerRouter.setStatus('current')
cabhCdpServerDnsAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 12), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerDnsAddressType.setStatus('current')
cabhCdpServerDnsAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerDnsAddress.setStatus('current')
cabhCdpServerSyslogAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 14), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerSyslogAddressType.setStatus('current')
cabhCdpServerSyslogAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 15), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerSyslogAddress.setStatus('current')
cabhCdpServerDomainName = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerDomainName.setStatus('current')
cabhCdpServerTTL = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerTTL.setStatus('current')
cabhCdpServerInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(68, 4096), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerInterfaceMTU.setStatus('current')
cabhCdpServerVendorSpecific = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerVendorSpecific.setStatus('current')
cabhCdpServerLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 20), Unsigned32().clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerLeaseTime.setStatus('current')
cabhCdpServerDhcpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 21), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpServerDhcpAddressType.setStatus('current')
cabhCdpServerDhcpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 22), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpServerDhcpAddress.setStatus('current')
cabhCdpServerControl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restoreConfig", 1), ("commitConfig", 2))).clone('restoreConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerControl.setStatus('current')
cabhCdpServerCommitStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commitSucceeded", 1), ("commitNeeded", 2), ("commitFailed", 3))).clone('commitSucceeded')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCdpServerCommitStatus.setStatus('current')
cabhCdpServerUseCableDataNwDnsAddr = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 1, 3, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCdpServerUseCableDataNwDnsAddr.setStatus('current')
cabhCdpNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 2))
cabhCdpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 2, 0))
cabhCdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 3))
cabhCdpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 3, 1))
cabhCdpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 3, 2))
cabhCdpBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 3, 1, 3)).setObjects(("CABH-CDP-MIB", "cabhCdpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhCdpBasicCompliance = cabhCdpBasicCompliance.setStatus('current')
cabhCdpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 4, 3, 2, 1)).setObjects(("CABH-CDP-MIB", "cabhCdpSetToFactory"), ("CABH-CDP-MIB", "cabhCdpLanTransCurCount"), ("CABH-CDP-MIB", "cabhCdpLanTransThreshold"), ("CABH-CDP-MIB", "cabhCdpLanTransAction"), ("CABH-CDP-MIB", "cabhCdpWanDataIpAddrCount"), ("CABH-CDP-MIB", "cabhCdpLastSetToFactory"), ("CABH-CDP-MIB", "cabhCdpTimeOffsetSelection"), ("CABH-CDP-MIB", "cabhCdpSnmpSetTimeOffset"), ("CABH-CDP-MIB", "cabhCdpDaylightSavingTimeEnable"), ("CABH-CDP-MIB", "cabhCdpLanAddrClientID"), ("CABH-CDP-MIB", "cabhCdpLanAddrLeaseCreateTime"), ("CABH-CDP-MIB", "cabhCdpLanAddrLeaseExpireTime"), ("CABH-CDP-MIB", "cabhCdpLanAddrMethod"), ("CABH-CDP-MIB", "cabhCdpLanAddrHostName"), ("CABH-CDP-MIB", "cabhCdpLanAddrRowStatus"), ("CABH-CDP-MIB", "cabhCdpWanDataAddrClientId"), ("CABH-CDP-MIB", "cabhCdpWanDataAddrIpType"), ("CABH-CDP-MIB", "cabhCdpWanDataAddrIp"), ("CABH-CDP-MIB", "cabhCdpWanDataAddrRowStatus"), ("CABH-CDP-MIB", "cabhCdpWanDataAddrLeaseCreateTime"), ("CABH-CDP-MIB", "cabhCdpWanDataAddrLeaseExpireTime"), ("CABH-CDP-MIB", "cabhCdpWanDnsServerIpType"), ("CABH-CDP-MIB", "cabhCdpWanDnsServerIp"), ("CABH-CDP-MIB", "cabhCdpLanPoolStartType"), ("CABH-CDP-MIB", "cabhCdpLanPoolStart"), ("CABH-CDP-MIB", "cabhCdpLanPoolEndType"), ("CABH-CDP-MIB", "cabhCdpLanPoolEnd"), ("CABH-CDP-MIB", "cabhCdpServerNetworkNumberType"), ("CABH-CDP-MIB", "cabhCdpServerNetworkNumber"), ("CABH-CDP-MIB", "cabhCdpServerSubnetMaskType"), ("CABH-CDP-MIB", "cabhCdpServerSubnetMask"), ("CABH-CDP-MIB", "cabhCdpServerTimeOffset"), ("CABH-CDP-MIB", "cabhCdpServerRouterType"), ("CABH-CDP-MIB", "cabhCdpServerRouter"), ("CABH-CDP-MIB", "cabhCdpServerDnsAddressType"), ("CABH-CDP-MIB", "cabhCdpServerDnsAddress"), ("CABH-CDP-MIB", "cabhCdpServerSyslogAddressType"), ("CABH-CDP-MIB", "cabhCdpServerSyslogAddress"), ("CABH-CDP-MIB", "cabhCdpServerDomainName"), ("CABH-CDP-MIB", "cabhCdpServerTTL"), ("CABH-CDP-MIB", "cabhCdpServerInterfaceMTU"), ("CABH-CDP-MIB", "cabhCdpServerVendorSpecific"), ("CABH-CDP-MIB", "cabhCdpServerLeaseTime"), ("CABH-CDP-MIB", "cabhCdpServerDhcpAddressType"), ("CABH-CDP-MIB", "cabhCdpServerDhcpAddress"), ("CABH-CDP-MIB", "cabhCdpServerControl"), ("CABH-CDP-MIB", "cabhCdpServerCommitStatus"), ("CABH-CDP-MIB", "cabhCdpServerUseCableDataNwDnsAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhCdpGroup = cabhCdpGroup.setStatus('current')
mibBuilder.exportSymbols("CABH-CDP-MIB", cabhCdpSetToFactory=cabhCdpSetToFactory, cabhCdpLanPoolStartType=cabhCdpLanPoolStartType, cabhCdpWanDataAddrLeaseExpireTime=cabhCdpWanDataAddrLeaseExpireTime, cabhCdpWanDataAddrRowStatus=cabhCdpWanDataAddrRowStatus, cabhCdpLanAddrIp=cabhCdpLanAddrIp, cabhCdpWanDnsServerTable=cabhCdpWanDnsServerTable, cabhCdpServerSyslogAddress=cabhCdpServerSyslogAddress, cabhCdpServerLeaseTime=cabhCdpServerLeaseTime, cabhCdpGroups=cabhCdpGroups, cabhCdpServerDhcpAddress=cabhCdpServerDhcpAddress, PYSNMP_MODULE_ID=cabhCdpMib, cabhCdpServerUseCableDataNwDnsAddr=cabhCdpServerUseCableDataNwDnsAddr, cabhCdpLanAddrLeaseCreateTime=cabhCdpLanAddrLeaseCreateTime, cabhCdpWanDataAddrEntry=cabhCdpWanDataAddrEntry, cabhCdpLanTransCurCount=cabhCdpLanTransCurCount, cabhCdpBasicCompliance=cabhCdpBasicCompliance, cabhCdpLanAddrHostName=cabhCdpLanAddrHostName, cabhCdpServerTimeOffset=cabhCdpServerTimeOffset, cabhCdpWanDataIpAddrCount=cabhCdpWanDataIpAddrCount, cabhCdpServerSubnetMaskType=cabhCdpServerSubnetMaskType, cabhCdpServerDhcpAddressType=cabhCdpServerDhcpAddressType, cabhCdpCompliances=cabhCdpCompliances, cabhCdpGroup=cabhCdpGroup, cabhCdpServerNetworkNumber=cabhCdpServerNetworkNumber, cabhCdpBase=cabhCdpBase, cabhCdpLanAddrRowStatus=cabhCdpLanAddrRowStatus, cabhCdpServerRouter=cabhCdpServerRouter, cabhCdpLanPoolStart=cabhCdpLanPoolStart, cabhCdpServerDnsAddressType=cabhCdpServerDnsAddressType, cabhCdpWanDnsServerIp=cabhCdpWanDnsServerIp, cabhCdpLanPoolEnd=cabhCdpLanPoolEnd, cabhCdpServerNetworkNumberType=cabhCdpServerNetworkNumberType, cabhCdpConformance=cabhCdpConformance, cabhCdpDaylightSavingTimeEnable=cabhCdpDaylightSavingTimeEnable, cabhCdpWanDnsServerOrder=cabhCdpWanDnsServerOrder, cabhCdpLanAddrEntry=cabhCdpLanAddrEntry, cabhCdpServerInterfaceMTU=cabhCdpServerInterfaceMTU, cabhCdpServerCommitStatus=cabhCdpServerCommitStatus, cabhCdpLanAddrLeaseExpireTime=cabhCdpLanAddrLeaseExpireTime, cabhCdpSnmpSetTimeOffset=cabhCdpSnmpSetTimeOffset, cabhCdpServerDnsAddress=cabhCdpServerDnsAddress, cabhCdpServerRouterType=cabhCdpServerRouterType, cabhCdpWanDataAddrClientId=cabhCdpWanDataAddrClientId, cabhCdpWanDnsServerEntry=cabhCdpWanDnsServerEntry, cabhCdpLanPoolEndType=cabhCdpLanPoolEndType, cabhCdpServerControl=cabhCdpServerControl, cabhCdpLanTransAction=cabhCdpLanTransAction, cabhCdpServerSubnetMask=cabhCdpServerSubnetMask, cabhCdpNotifications=cabhCdpNotifications, cabhCdpLanAddrIpType=cabhCdpLanAddrIpType, cabhCdpServerSyslogAddressType=cabhCdpServerSyslogAddressType, cabhCdpLanAddrTable=cabhCdpLanAddrTable, cabhCdpWanDataAddrIndex=cabhCdpWanDataAddrIndex, cabhCdpTimeOffsetSelection=cabhCdpTimeOffsetSelection, cabhCdpMib=cabhCdpMib, cabhCdpObjects=cabhCdpObjects, cabhCdpLanAddrClientID=cabhCdpLanAddrClientID, cabhCdpLanTransThreshold=cabhCdpLanTransThreshold, cabhCdpWanDataAddrIpType=cabhCdpWanDataAddrIpType, cabhCdpWanDataAddrIp=cabhCdpWanDataAddrIp, cabhCdpWanDataAddrRenewalTime=cabhCdpWanDataAddrRenewalTime, cabhCdpAddr=cabhCdpAddr, cabhCdpWanDnsServerIpType=cabhCdpWanDnsServerIpType, cabhCdpServerDomainName=cabhCdpServerDomainName, cabhCdpWanDataAddrTable=cabhCdpWanDataAddrTable, cabhCdpServerTTL=cabhCdpServerTTL, cabhCdpLanAddrMethod=cabhCdpLanAddrMethod, cabhCdpLastSetToFactory=cabhCdpLastSetToFactory, cabhCdpServerVendorSpecific=cabhCdpServerVendorSpecific, cabhCdpNotification=cabhCdpNotification, cabhCdpServer=cabhCdpServer, cabhCdpWanDataAddrLeaseCreateTime=cabhCdpWanDataAddrLeaseCreateTime)
