#
# PySNMP MIB module ADTX-RAID-AVCL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTX-RAID-AVCL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:59:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adtx, adtxProducts = mibBuilder.importSymbols("ADTX-SMI", "adtx", "adtxProducts")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, IpAddress, Counter64, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, MibIdentifier, iso, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "IpAddress", "Counter64", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "MibIdentifier", "iso", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class AvcString(DisplayString):
    pass

class AvcLongString(OctetString):
    pass

class AvcCounter(Counter32):
    pass

class AvcInteger(Integer32):
    pass

avc = MibIdentifier((1, 3, 6, 1, 4, 1, 2653, 3, 1))
avcl = MibIdentifier((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1))
avclVersion = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 1), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclVersion.setStatus('mandatory')
avclOS = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 2), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclOS.setStatus('mandatory')
avclHost = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 3), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclHost.setStatus('mandatory')
avclNumOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 4), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclNumOfDevices.setStatus('mandatory')
avclEventInfo = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 5), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclEventInfo.setStatus('mandatory')
avclDeviceInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6), )
if mibBuilder.loadTexts: avclDeviceInformationTable.setStatus('mandatory')
avclDeviceInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1), ).setIndexNames((0, "ADTX-RAID-AVCL-MIB", "avclDeviceIndex"))
if mibBuilder.loadTexts: avclDeviceInformationEntry.setStatus('mandatory')
avclDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 1), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceIndex.setStatus('mandatory')
avclDeviceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 2), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceIP.setStatus('mandatory')
avclDeviceSystemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 3), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSystemVersion.setStatus('mandatory')
avclDeviceManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 4), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceManufacturer.setStatus('mandatory')
avclDeviceProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 5), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceProductName.setStatus('mandatory')
avclDeviceRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 6), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRevisionLevel.setStatus('mandatory')
avclDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 7), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSerialNumber.setStatus('mandatory')
avclDeviceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 8), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDate.setStatus('mandatory')
avclDeviceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 9), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceTime.setStatus('mandatory')
avclDeviceAssignedSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 10), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceAssignedSpare.setStatus('mandatory')
avclDeviceInitiatorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 11), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceInitiatorMode.setStatus('mandatory')
avclDeviceInstantCopyLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 12), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceInstantCopyLicense.setStatus('mandatory')
avclDeviceMirroringLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 13), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceMirroringLicense.setStatus('mandatory')
avclDeviceWWNInfoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 14), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceWWNInfoCount.setStatus('mandatory')
avclDeviceWWNInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 15), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceWWNInfo.setStatus('mandatory')
avclDeviceSurfaceSchedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 16), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSurfaceSchedMode.setStatus('mandatory')
avclDeviceSurfaceSchedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 17), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSurfaceSchedTime.setStatus('mandatory')
avclDeviceSurfaceVerifyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 18), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSurfaceVerifyDuration.setStatus('mandatory')
avclDeviceICSourceLU = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 19), AvcInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICSourceLU.setStatus('mandatory')
avclDeviceICTargetLU = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 20), AvcInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICTargetLU.setStatus('mandatory')
avclDeviceICFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 21), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICFlag.setStatus('mandatory')
avclDeviceICProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 22), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICProgress.setStatus('mandatory')
avclDeviceICPairWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 23), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICPairWWN.setStatus('mandatory')
avclDeviceRegHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 24), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRegHostCount.setStatus('mandatory')
avclDeviceRegHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 25), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRegHosts.setStatus('mandatory')
avclDeviceLuToMirrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 26), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceLuToMirrorCount.setStatus('mandatory')
avclDeviceLunsToMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 27), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceLunsToMirror.setStatus('mandatory')
avclDeviceRaidGrpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 28), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpCount.setStatus('mandatory')
avclDeviceRaidGrpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 29), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsState.setStatus('mandatory')
avclDeviceRaidGrpsDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 30), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsDriveCount.setStatus('mandatory')
avclDeviceRaidGrpsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 31), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsSize.setStatus('mandatory')
avclDeviceRaidGrpsLuUnderSurfaceVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 32), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsLuUnderSurfaceVerify.setStatus('mandatory')
avclDeviceRaidGrpsSurfaceVerifyProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 33), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsSurfaceVerifyProgress.setStatus('mandatory')
avclDeviceRaidGrpsInitReconProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 34), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsInitReconProgress.setStatus('mandatory')
avclDeviceRaidGrpsFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 35), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsFreeSpace.setStatus('mandatory')
avclDeviceSpareCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 36), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSpareCount.setStatus('mandatory')
avclDeviceSparesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 37), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSparesState.setStatus('mandatory')
avclDeviceSparesRaidGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 38), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSparesRaidGrpNumber.setStatus('mandatory')
avclDeviceVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 39), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumeCount.setStatus('mandatory')
avclDeviceVolumesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 40), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesState.setStatus('mandatory')
avclDeviceVolumesRaidGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 41), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesRaidGrpNumber.setStatus('mandatory')
avclDeviceVolumesRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 42), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesRaidLevel.setStatus('mandatory')
avclDeviceVolumesSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 43), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesSize.setStatus('mandatory')
avclDeviceVolumesInitProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 44), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesInitProgress.setStatus('mandatory')
avclDeviceVolumesNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 45), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesNickname.setStatus('mandatory')
avclDeviceDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 46), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDriveCount.setStatus('mandatory')
avclDeviceDrivesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 47), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDrivesState.setStatus('mandatory')
avclDeviceDrivesUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 48), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDrivesUsageType.setStatus('mandatory')
avclDeviceDrivesRaidGrpOrSpareNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 49), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDrivesRaidGrpOrSpareNumber.setStatus('mandatory')
avclDeviceComponentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 50), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentCount.setStatus('mandatory')
avclDeviceComponentsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 51), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentsType.setStatus('mandatory')
avclDeviceComponentsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 52), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentsState.setStatus('mandatory')
avclDeviceComponentsInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 53), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentsInstanceNumber.setStatus('mandatory')
daemonEvent = NotificationType((1, 3, 6, 1, 4, 1, 2653) + (0,1)).setObjects(("ADTX-RAID-AVCL-MIB", "avclEventInfo"))
mibBuilder.exportSymbols("ADTX-RAID-AVCL-MIB", avclDeviceSurfaceVerifyDuration=avclDeviceSurfaceVerifyDuration, avclDeviceSpareCount=avclDeviceSpareCount, avclDeviceVolumesRaidLevel=avclDeviceVolumesRaidLevel, avclDeviceDrivesUsageType=avclDeviceDrivesUsageType, avclDeviceSystemVersion=avclDeviceSystemVersion, avclDeviceComponentsState=avclDeviceComponentsState, avcl=avcl, avclDeviceDate=avclDeviceDate, avclDeviceICPairWWN=avclDeviceICPairWWN, avclDeviceVolumesState=avclDeviceVolumesState, avclDeviceVolumesRaidGrpNumber=avclDeviceVolumesRaidGrpNumber, avclDeviceSparesRaidGrpNumber=avclDeviceSparesRaidGrpNumber, avclDeviceRaidGrpsSurfaceVerifyProgress=avclDeviceRaidGrpsSurfaceVerifyProgress, avclDeviceICFlag=avclDeviceICFlag, AvcCounter=AvcCounter, avclDeviceVolumeCount=avclDeviceVolumeCount, avclDeviceDriveCount=avclDeviceDriveCount, avclOS=avclOS, avclDeviceICTargetLU=avclDeviceICTargetLU, avclDeviceComponentCount=avclDeviceComponentCount, avclNumOfDevices=avclNumOfDevices, avclDeviceRaidGrpCount=avclDeviceRaidGrpCount, avclDeviceSurfaceSchedMode=avclDeviceSurfaceSchedMode, avclDeviceRaidGrpsState=avclDeviceRaidGrpsState, avclDeviceRaidGrpsSize=avclDeviceRaidGrpsSize, avclDeviceComponentsInstanceNumber=avclDeviceComponentsInstanceNumber, avclDeviceIP=avclDeviceIP, avclDeviceVolumesNickname=avclDeviceVolumesNickname, avclDeviceICSourceLU=avclDeviceICSourceLU, avclDeviceComponentsType=avclDeviceComponentsType, avclDeviceProductName=avclDeviceProductName, avclDeviceLunsToMirror=avclDeviceLunsToMirror, avclEventInfo=avclEventInfo, AvcInteger=AvcInteger, avclDeviceICProgress=avclDeviceICProgress, avclDeviceRegHosts=avclDeviceRegHosts, avclDeviceDrivesState=avclDeviceDrivesState, avc=avc, avclDeviceAssignedSpare=avclDeviceAssignedSpare, avclDeviceRaidGrpsInitReconProgress=avclDeviceRaidGrpsInitReconProgress, AvcString=AvcString, avclDeviceSurfaceSchedTime=avclDeviceSurfaceSchedTime, avclDeviceVolumesSize=avclDeviceVolumesSize, avclVersion=avclVersion, avclDeviceInformationTable=avclDeviceInformationTable, avclDeviceInitiatorMode=avclDeviceInitiatorMode, avclDeviceWWNInfoCount=avclDeviceWWNInfoCount, AvcLongString=AvcLongString, avclDeviceSparesState=avclDeviceSparesState, avclDeviceSerialNumber=avclDeviceSerialNumber, avclDeviceInformationEntry=avclDeviceInformationEntry, avclDeviceManufacturer=avclDeviceManufacturer, avclDeviceVolumesInitProgress=avclDeviceVolumesInitProgress, avclDeviceRevisionLevel=avclDeviceRevisionLevel, avclDeviceRaidGrpsLuUnderSurfaceVerify=avclDeviceRaidGrpsLuUnderSurfaceVerify, avclHost=avclHost, avclDeviceRegHostCount=avclDeviceRegHostCount, avclDeviceRaidGrpsDriveCount=avclDeviceRaidGrpsDriveCount, avclDeviceTime=avclDeviceTime, avclDeviceWWNInfo=avclDeviceWWNInfo, daemonEvent=daemonEvent, avclDeviceIndex=avclDeviceIndex, avclDeviceMirroringLicense=avclDeviceMirroringLicense, avclDeviceLuToMirrorCount=avclDeviceLuToMirrorCount, avclDeviceDrivesRaidGrpOrSpareNumber=avclDeviceDrivesRaidGrpOrSpareNumber, avclDeviceRaidGrpsFreeSpace=avclDeviceRaidGrpsFreeSpace, avclDeviceInstantCopyLicense=avclDeviceInstantCopyLicense)
