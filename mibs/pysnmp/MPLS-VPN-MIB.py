#
# PySNMP MIB module MPLS-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-VPN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
bgp4PathAttrPeer, bgp4PathAttrIpAddrPrefix, bgp4PathAttrIpAddrPrefixLen = mibBuilder.importSymbols("BGP4-MIB", "bgp4PathAttrPeer", "bgp4PathAttrIpAddrPrefix", "bgp4PathAttrIpAddrPrefixLen")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, ModuleIdentity, Bits, Integer32, Gauge32, experimental, MibIdentifier, TimeTicks, ObjectIdentity, Counter32, Unsigned32, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Bits", "Integer32", "Gauge32", "experimental", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Counter32", "Unsigned32", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TruthValue, DisplayString, TimeStamp, StorageType, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeStamp", "StorageType", "RowStatus", "TextualConvention")
VPNId, = mibBuilder.importSymbols("VPN-TC-STD-MIB", "VPNId")
mplsVpnMIB = ModuleIdentity((1, 3, 6, 1, 3, 118))
mplsVpnMIB.setRevisions(('2011-03-26 12:00', '2001-02-28 12:00', '2002-01-26 12:00', '2001-11-13 12:00', '2001-10-15 12:00', '2001-10-05 12:00', '2001-07-17 12:00', '2001-07-10 12:00', '2001-06-19 12:00', '2001-05-30 12:00', '2000-09-30 12:00',))
if mibBuilder.loadTexts: mplsVpnMIB.setLastUpdated('201103261200Z')
if mibBuilder.loadTexts: mplsVpnMIB.setOrganization('Provider Provisioned Virtual Private Networks Working Group.')
class MplsVpnName(TextualConvention, OctetString):
    reference = "RFC 2685 [VPN-RFC2685] Fox B., et al, 'Virtual Private Networks Identifier', September 1999."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class MplsVpnRouteDistinguisher(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

mplsVpnNotifications = MibIdentifier((1, 3, 6, 1, 3, 118, 0))
mplsVpnObjects = MibIdentifier((1, 3, 6, 1, 3, 118, 1))
mplsVpnScalars = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 1))
mplsVpnConf = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 2))
mplsVpnPerf = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 3))
mplsVpnRoute = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 4))
mplsVpnConformance = MibIdentifier((1, 3, 6, 1, 3, 118, 3))
mplsVpnConfiguredVrfs = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnConfiguredVrfs.setStatus('current')
mplsVpnActiveVrfs = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnActiveVrfs.setStatus('current')
mplsVpnConnectedInterfaces = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnConnectedInterfaces.setStatus('current')
mplsVpnNotificationEnable = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsVpnNotificationEnable.setStatus('current')
mplsVpnVrfConfMaxPossibleRoutes = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfConfMaxPossibleRoutes.setStatus('current')
mplsVpnVrfConfRouteMaxThreshTime = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 6), Unsigned32().clone(600)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfConfRouteMaxThreshTime.setStatus('current')
mplsVpnIfConfTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 1), )
if mibBuilder.loadTexts: mplsVpnIfConfTable.setStatus('current')
mplsVpnIfConfEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnIfConfIndex"))
if mibBuilder.loadTexts: mplsVpnIfConfEntry.setStatus('current')
mplsVpnIfConfIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mplsVpnIfConfIndex.setStatus('current')
mplsVpnIfLabelEdgeType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("providerEdge", 1), ("customerEdge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnIfLabelEdgeType.setStatus('current')
mplsVpnIfVpnClassification = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("carrierOfCarrier", 1), ("enterprise", 2), ("interProvider", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnIfVpnClassification.setStatus('current')
mplsVpnIfVpnRouteDistProtocol = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 4), Bits().clone(namedValues=NamedValues(("none", 0), ("bgp", 1), ("ospf", 2), ("rip", 3), ("isis", 4), ("other", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnIfVpnRouteDistProtocol.setStatus('current')
mplsVpnIfConfStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnIfConfStorageType.setStatus('current')
mplsVpnIfConfRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnIfConfRowStatus.setStatus('current')
mplsVpnVrfTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 2), )
if mibBuilder.loadTexts: mplsVpnVrfTable.setStatus('current')
mplsVpnVrfEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"))
if mibBuilder.loadTexts: mplsVpnVrfEntry.setStatus('current')
mplsVpnVrfName = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 1), MplsVpnName())
if mibBuilder.loadTexts: mplsVpnVrfName.setStatus('current')
mplsVpnVrfVpnId = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 2), VPNId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfVpnId.setStatus('current')
mplsVpnVrfDescription = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfDescription.setStatus('current')
mplsVpnVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 4), MplsVpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteDistinguisher.setStatus('current')
mplsVpnVrfCreationTime = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfCreationTime.setStatus('current')
mplsVpnVrfOperStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfOperStatus.setStatus('current')
mplsVpnVrfActiveInterfaces = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfActiveInterfaces.setStatus('current')
mplsVpnVrfAssociatedInterfaces = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfAssociatedInterfaces.setStatus('current')
mplsVpnVrfConfMidRouteThreshold = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfMidRouteThreshold.setStatus('current')
mplsVpnVrfConfHighRouteThreshold = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfHighRouteThreshold.setStatus('current')
mplsVpnVrfConfMaxRoutes = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfMaxRoutes.setStatus('current')
mplsVpnVrfConfLastChanged = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfConfLastChanged.setStatus('current')
mplsVpnVrfConfRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfRowStatus.setStatus('current')
mplsVpnVrfConfStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 14), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfStorageType.setStatus('current')
mplsVpnVrfRouteTargetTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 3), )
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetTable.setStatus('current')
mplsVpnVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 3, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteTargetIndex"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteTargetType"))
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetEntry.setStatus('current')
mplsVpnVrfRouteTargetIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetIndex.setStatus('current')
mplsVpnVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("import", 1), ("export", 2), ("both", 3))))
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetType.setStatus('current')
mplsVpnVrfRouteTarget = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 4), MplsVpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteTarget.setStatus('current')
mplsVpnVrfRouteTargetDescr = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetDescr.setStatus('current')
mplsVpnVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetRowStatus.setStatus('current')
mplsVpnVrfBgpNbrAddrTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 4), )
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrAddrTable.setStatus('current')
mplsVpnVrfBgpNbrAddrEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 4, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnIfConfIndex"), (0, "MPLS-VPN-MIB", "mplsVpnVrfBgpNbrIndex"))
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrAddrEntry.setStatus('current')
mplsVpnVrfBgpNbrIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrIndex.setStatus('current')
mplsVpnVrfBgpNbrRole = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ce", 1), ("pe", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrRole.setStatus('current')
mplsVpnVrfBgpNbrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrType.setStatus('current')
mplsVpnVrfBgpNbrAddr = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrAddr.setStatus('current')
mplsVpnVrfBgpNbrRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrRowStatus.setStatus('current')
mplsVpnVrfBgpNbrStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrStorageType.setStatus('current')
mplsVpnVrfBgpNbrPrefixTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 5), )
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrPrefixTable.setStatus('current')
mplsVpnVrfBgpNbrPrefixEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 5, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "BGP4-MIB", "bgp4PathAttrIpAddrPrefix"), (0, "BGP4-MIB", "bgp4PathAttrIpAddrPrefixLen"), (0, "BGP4-MIB", "bgp4PathAttrPeer"))
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrPrefixEntry.setStatus('current')
mplsVpnVrfBgpPAtrPeer = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 1), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrPeer.setStatus('current')
mplsVpnVrfBgpPAtrIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrIpAddrPrefixLen.setStatus('current')
mplsVpnVrfBgpPAtrIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20)))
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrIpAddrPrefix.setStatus('current')
mplsVpnVrfBgpPAtrOrigin = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrOrigin.setStatus('current')
mplsVpnVrfBgpPAtrASPathSegment = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrASPathSegment.setStatus('current')
mplsVpnVrfBgpPAtrNextHop = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrNextHop.setStatus('current')
mplsVpnVrfBgpPAtrMultiExitDisc = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrMultiExitDisc.setStatus('current')
mplsVpnVrfBgpPAtrLocalPref = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrLocalPref.setStatus('current')
mplsVpnVrfBgpPAtrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRrouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrAtomicAggregate.setStatus('current')
mplsVpnVrfBgpPAtrAggregatorAS = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrAggregatorAS.setStatus('current')
mplsVpnVrfBgpPAtrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrAggregatorAddr.setStatus('current')
mplsVpnVrfBgpPAtrCalcLocalPref = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrCalcLocalPref.setStatus('current')
mplsVpnVrfBgpPAtrBest = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrBest.setStatus('current')
mplsVpnVrfBgpPAtrUnknown = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPAtrUnknown.setStatus('current')
mplsVpnVrfSecTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 6), )
if mibBuilder.loadTexts: mplsVpnVrfSecTable.setStatus('current')
mplsVpnVrfSecEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 6, 1), )
mplsVpnVrfEntry.registerAugmentions(("MPLS-VPN-MIB", "mplsVpnVrfSecEntry"))
mplsVpnVrfSecEntry.setIndexNames(*mplsVpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsVpnVrfSecEntry.setStatus('current')
mplsVpnVrfSecIllegalLblVltns = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfSecIllegalLblVltns.setStatus('current')
mplsVpnVrfSecIllegalLblRcvThrsh = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfSecIllegalLblRcvThrsh.setStatus('current')
mplsVpnVrfPerfTable = MibTable((1, 3, 6, 1, 3, 118, 1, 3, 1), )
if mibBuilder.loadTexts: mplsVpnVrfPerfTable.setStatus('current')
mplsVpnVrfPerfEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 3, 1, 1), )
mplsVpnVrfEntry.registerAugmentions(("MPLS-VPN-MIB", "mplsVpnVrfPerfEntry"))
mplsVpnVrfPerfEntry.setIndexNames(*mplsVpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsVpnVrfPerfEntry.setStatus('current')
mplsVpnVrfPerfRoutesAdded = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfPerfRoutesAdded.setStatus('current')
mplsVpnVrfPerfRoutesDeleted = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfPerfRoutesDeleted.setStatus('current')
mplsVpnVrfPerfCurrNumRoutes = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfPerfCurrNumRoutes.setStatus('current')
mplsVpnVrfRouteTable = MibTable((1, 3, 6, 1, 3, 118, 1, 4, 1), )
if mibBuilder.loadTexts: mplsVpnVrfRouteTable.setStatus('current')
mplsVpnVrfRouteEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 4, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteDest"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteMask"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteTos"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteNextHop"))
if mibBuilder.loadTexts: mplsVpnVrfRouteEntry.setStatus('current')
mplsVpnVrfRouteDest = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 1), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfRouteDest.setStatus('current')
mplsVpnVrfRouteDestAddrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteDestAddrType.setStatus('current')
mplsVpnVrfRouteMask = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfRouteMask.setStatus('current')
mplsVpnVrfRouteMaskAddrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMaskAddrType.setStatus('current')
mplsVpnVrfRouteTos = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 5), Unsigned32())
if mibBuilder.loadTexts: mplsVpnVrfRouteTos.setStatus('current')
mplsVpnVrfRouteNextHop = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteNextHop.setStatus('current')
mplsVpnVrfRouteNextHopAddrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteNextHopAddrType.setStatus('current')
mplsVpnVrfRouteIfIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteIfIndex.setStatus('current')
mplsVpnVrfRouteType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteType.setStatus('current')
mplsVpnVrfRouteProto = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteProto.setStatus('current')
mplsVpnVrfRouteAge = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfRouteAge.setStatus('current')
mplsVpnVrfRouteInfo = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 12), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteInfo.setStatus('current')
mplsVpnVrfRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteNextHopAS.setStatus('current')
mplsVpnVrfRouteMetric1 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric1.setStatus('current')
mplsVpnVrfRouteMetric2 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric2.setStatus('current')
mplsVpnVrfRouteMetric3 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric3.setStatus('current')
mplsVpnVrfRouteMetric4 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric4.setStatus('current')
mplsVpnVrfRouteMetric5 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric5.setStatus('current')
mplsVpnVrfRouteRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteRowStatus.setStatus('current')
mplsVpnVrfRouteStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 20), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteStorageType.setStatus('current')
mplsVrfIfUp = NotificationType((1, 3, 6, 1, 3, 118, 0, 1)).setObjects(("MPLS-VPN-MIB", "mplsVpnIfConfRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfOperStatus"))
if mibBuilder.loadTexts: mplsVrfIfUp.setStatus('current')
mplsVrfIfDown = NotificationType((1, 3, 6, 1, 3, 118, 0, 2)).setObjects(("MPLS-VPN-MIB", "mplsVpnIfConfRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfOperStatus"))
if mibBuilder.loadTexts: mplsVrfIfDown.setStatus('current')
mplsNumVrfRouteMidThreshExceeded = NotificationType((1, 3, 6, 1, 3, 118, 0, 3)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfPerfCurrNumRoutes"), ("MPLS-VPN-MIB", "mplsVpnVrfConfMidRouteThreshold"))
if mibBuilder.loadTexts: mplsNumVrfRouteMidThreshExceeded.setStatus('current')
mplsNumVrfRouteMaxThreshExceeded = NotificationType((1, 3, 6, 1, 3, 118, 0, 4)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfPerfCurrNumRoutes"), ("MPLS-VPN-MIB", "mplsVpnVrfConfHighRouteThreshold"))
if mibBuilder.loadTexts: mplsNumVrfRouteMaxThreshExceeded.setStatus('current')
mplsNumVrfSecIllglLblThrshExcd = NotificationType((1, 3, 6, 1, 3, 118, 0, 5)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfSecIllegalLblVltns"))
if mibBuilder.loadTexts: mplsNumVrfSecIllglLblThrshExcd.setStatus('current')
mplsVpnGroups = MibIdentifier((1, 3, 6, 1, 3, 118, 3, 1))
mplsVpnCompliances = MibIdentifier((1, 3, 6, 1, 3, 118, 3, 2))
mplsVpnModuleCompliance = ModuleCompliance((1, 3, 6, 1, 3, 118, 3, 2, 1)).setObjects(("MPLS-VPN-MIB", "mplsVpnScalarGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfGroup"), ("MPLS-VPN-MIB", "mplsVpnIfGroup"), ("MPLS-VPN-MIB", "mplsVpnPerfGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteTargetGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPrefixGroup"), ("MPLS-VPN-MIB", "mplsVpnSecGroup"), ("MPLS-VPN-MIB", "mplsVpnNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnModuleCompliance = mplsVpnModuleCompliance.setStatus('current')
mplsVpnScalarGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 1)).setObjects(("MPLS-VPN-MIB", "mplsVpnConfiguredVrfs"), ("MPLS-VPN-MIB", "mplsVpnActiveVrfs"), ("MPLS-VPN-MIB", "mplsVpnConnectedInterfaces"), ("MPLS-VPN-MIB", "mplsVpnNotificationEnable"), ("MPLS-VPN-MIB", "mplsVpnVrfConfMaxPossibleRoutes"), ("MPLS-VPN-MIB", "mplsVpnVrfConfRouteMaxThreshTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnScalarGroup = mplsVpnScalarGroup.setStatus('current')
mplsVpnVrfGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 2)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfVpnId"), ("MPLS-VPN-MIB", "mplsVpnVrfDescription"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteDistinguisher"), ("MPLS-VPN-MIB", "mplsVpnVrfCreationTime"), ("MPLS-VPN-MIB", "mplsVpnVrfOperStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfActiveInterfaces"), ("MPLS-VPN-MIB", "mplsVpnVrfAssociatedInterfaces"), ("MPLS-VPN-MIB", "mplsVpnVrfConfMidRouteThreshold"), ("MPLS-VPN-MIB", "mplsVpnVrfConfHighRouteThreshold"), ("MPLS-VPN-MIB", "mplsVpnVrfConfMaxRoutes"), ("MPLS-VPN-MIB", "mplsVpnVrfConfLastChanged"), ("MPLS-VPN-MIB", "mplsVpnVrfConfRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfConfStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfGroup = mplsVpnVrfGroup.setStatus('current')
mplsVpnIfGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 3)).setObjects(("MPLS-VPN-MIB", "mplsVpnIfLabelEdgeType"), ("MPLS-VPN-MIB", "mplsVpnIfVpnClassification"), ("MPLS-VPN-MIB", "mplsVpnIfVpnRouteDistProtocol"), ("MPLS-VPN-MIB", "mplsVpnIfConfStorageType"), ("MPLS-VPN-MIB", "mplsVpnIfConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnIfGroup = mplsVpnIfGroup.setStatus('current')
mplsVpnPerfGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 4)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfPerfRoutesAdded"), ("MPLS-VPN-MIB", "mplsVpnVrfPerfRoutesDeleted"), ("MPLS-VPN-MIB", "mplsVpnVrfPerfCurrNumRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnPerfGroup = mplsVpnPerfGroup.setStatus('current')
mplsVpnVrfBgpNbrGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 5)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrRole"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrType"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrAddr"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfBgpNbrGroup = mplsVpnVrfBgpNbrGroup.setStatus('current')
mplsVpnVrfBgpPrefixGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 6)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrOrigin"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrASPathSegment"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrNextHop"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrMultiExitDisc"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrLocalPref"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrAtomicAggregate"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrAggregatorAS"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrAggregatorAddr"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrCalcLocalPref"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrBest"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPAtrUnknown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfBgpPrefixGroup = mplsVpnVrfBgpPrefixGroup.setStatus('current')
mplsVpnSecGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 7)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfSecIllegalLblVltns"), ("MPLS-VPN-MIB", "mplsVpnVrfSecIllegalLblRcvThrsh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnSecGroup = mplsVpnSecGroup.setStatus('current')
mplsVpnVrfRouteGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 8)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfRouteDestAddrType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMaskAddrType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteNextHop"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteNextHopAddrType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteIfIndex"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteProto"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteAge"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteInfo"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteNextHopAS"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric1"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric2"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric3"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric4"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric5"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfRouteGroup = mplsVpnVrfRouteGroup.setStatus('current')
mplsVpnVrfRouteTargetGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 9)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfRouteTargetDescr"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteTarget"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfRouteTargetGroup = mplsVpnVrfRouteTargetGroup.setStatus('current')
mplsVpnNotificationGroup = NotificationGroup((1, 3, 6, 1, 3, 118, 3, 1, 10)).setObjects(("MPLS-VPN-MIB", "mplsVrfIfUp"), ("MPLS-VPN-MIB", "mplsVrfIfDown"), ("MPLS-VPN-MIB", "mplsNumVrfRouteMidThreshExceeded"), ("MPLS-VPN-MIB", "mplsNumVrfRouteMaxThreshExceeded"), ("MPLS-VPN-MIB", "mplsNumVrfSecIllglLblThrshExcd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnNotificationGroup = mplsVpnNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("MPLS-VPN-MIB", PYSNMP_MODULE_ID=mplsVpnMIB, mplsVpnIfConfStorageType=mplsVpnIfConfStorageType, mplsVpnVrfBgpNbrPrefixTable=mplsVpnVrfBgpNbrPrefixTable, mplsVpnConformance=mplsVpnConformance, mplsVpnCompliances=mplsVpnCompliances, mplsNumVrfRouteMidThreshExceeded=mplsNumVrfRouteMidThreshExceeded, mplsVpnVrfGroup=mplsVpnVrfGroup, mplsVpnVrfRouteNextHop=mplsVpnVrfRouteNextHop, mplsVpnVrfSecTable=mplsVpnVrfSecTable, mplsVpnVrfConfRowStatus=mplsVpnVrfConfRowStatus, mplsVpnVrfBgpPAtrAggregatorAddr=mplsVpnVrfBgpPAtrAggregatorAddr, mplsVpnVrfRouteProto=mplsVpnVrfRouteProto, mplsVpnVrfConfStorageType=mplsVpnVrfConfStorageType, mplsVpnActiveVrfs=mplsVpnActiveVrfs, mplsVpnVrfDescription=mplsVpnVrfDescription, mplsVpnVrfBgpPAtrMultiExitDisc=mplsVpnVrfBgpPAtrMultiExitDisc, mplsVpnVrfBgpPAtrLocalPref=mplsVpnVrfBgpPAtrLocalPref, mplsVpnVrfSecIllegalLblVltns=mplsVpnVrfSecIllegalLblVltns, mplsVpnVrfRouteTargetEntry=mplsVpnVrfRouteTargetEntry, mplsVpnVrfConfLastChanged=mplsVpnVrfConfLastChanged, mplsVpnVrfActiveInterfaces=mplsVpnVrfActiveInterfaces, mplsVpnVrfConfMidRouteThreshold=mplsVpnVrfConfMidRouteThreshold, mplsVpnVrfPerfRoutesDeleted=mplsVpnVrfPerfRoutesDeleted, mplsNumVrfSecIllglLblThrshExcd=mplsNumVrfSecIllglLblThrshExcd, mplsVpnVrfRouteInfo=mplsVpnVrfRouteInfo, mplsNumVrfRouteMaxThreshExceeded=mplsNumVrfRouteMaxThreshExceeded, mplsVpnPerfGroup=mplsVpnPerfGroup, mplsVpnVrfBgpNbrGroup=mplsVpnVrfBgpNbrGroup, mplsVpnVrfRouteNextHopAddrType=mplsVpnVrfRouteNextHopAddrType, mplsVpnVrfRouteMetric4=mplsVpnVrfRouteMetric4, mplsVpnObjects=mplsVpnObjects, mplsVpnVrfBgpPAtrAggregatorAS=mplsVpnVrfBgpPAtrAggregatorAS, mplsVpnVrfRouteTargetGroup=mplsVpnVrfRouteTargetGroup, mplsVpnVrfRouteTargetIndex=mplsVpnVrfRouteTargetIndex, mplsVpnSecGroup=mplsVpnSecGroup, mplsVpnVrfAssociatedInterfaces=mplsVpnVrfAssociatedInterfaces, mplsVpnVrfBgpPAtrAtomicAggregate=mplsVpnVrfBgpPAtrAtomicAggregate, mplsVpnVrfPerfEntry=mplsVpnVrfPerfEntry, mplsVpnScalars=mplsVpnScalars, mplsVpnGroups=mplsVpnGroups, mplsVpnPerf=mplsVpnPerf, mplsVpnVrfSecEntry=mplsVpnVrfSecEntry, mplsVpnIfGroup=mplsVpnIfGroup, mplsVpnVrfBgpPAtrCalcLocalPref=mplsVpnVrfBgpPAtrCalcLocalPref, mplsVpnVrfBgpNbrRowStatus=mplsVpnVrfBgpNbrRowStatus, mplsVpnVrfRouteMask=mplsVpnVrfRouteMask, mplsVpnConf=mplsVpnConf, mplsVpnNotificationEnable=mplsVpnNotificationEnable, mplsVpnConnectedInterfaces=mplsVpnConnectedInterfaces, mplsVpnVrfOperStatus=mplsVpnVrfOperStatus, mplsVpnIfVpnClassification=mplsVpnIfVpnClassification, mplsVpnVrfBgpNbrRole=mplsVpnVrfBgpNbrRole, mplsVpnVrfBgpPAtrNextHop=mplsVpnVrfBgpPAtrNextHop, mplsVpnVrfConfHighRouteThreshold=mplsVpnVrfConfHighRouteThreshold, mplsVpnVrfRouteTargetRowStatus=mplsVpnVrfRouteTargetRowStatus, mplsVpnVrfRouteTargetType=mplsVpnVrfRouteTargetType, mplsVpnVrfRouteStorageType=mplsVpnVrfRouteStorageType, mplsVpnIfConfIndex=mplsVpnIfConfIndex, mplsVpnVrfRouteTarget=mplsVpnVrfRouteTarget, mplsVpnVrfRouteMaskAddrType=mplsVpnVrfRouteMaskAddrType, mplsVpnVrfCreationTime=mplsVpnVrfCreationTime, mplsVpnVrfRouteMetric5=mplsVpnVrfRouteMetric5, mplsVpnVrfPerfRoutesAdded=mplsVpnVrfPerfRoutesAdded, mplsVpnVrfBgpPAtrBest=mplsVpnVrfBgpPAtrBest, mplsVpnVrfBgpPAtrOrigin=mplsVpnVrfBgpPAtrOrigin, mplsVpnVrfRouteIfIndex=mplsVpnVrfRouteIfIndex, mplsVpnVrfBgpPAtrUnknown=mplsVpnVrfBgpPAtrUnknown, mplsVpnVrfBgpNbrIndex=mplsVpnVrfBgpNbrIndex, mplsVpnVrfPerfTable=mplsVpnVrfPerfTable, mplsVpnVrfRouteGroup=mplsVpnVrfRouteGroup, mplsVpnIfConfEntry=mplsVpnIfConfEntry, mplsVpnVrfRouteDestAddrType=mplsVpnVrfRouteDestAddrType, mplsVpnVrfTable=mplsVpnVrfTable, mplsVpnVrfRouteType=mplsVpnVrfRouteType, mplsVpnVrfRouteDistinguisher=mplsVpnVrfRouteDistinguisher, mplsVpnVrfRouteEntry=mplsVpnVrfRouteEntry, mplsVpnModuleCompliance=mplsVpnModuleCompliance, mplsVpnVrfBgpPAtrIpAddrPrefix=mplsVpnVrfBgpPAtrIpAddrPrefix, mplsVpnVrfSecIllegalLblRcvThrsh=mplsVpnVrfSecIllegalLblRcvThrsh, mplsVpnMIB=mplsVpnMIB, mplsVpnVrfRouteTargetTable=mplsVpnVrfRouteTargetTable, mplsVpnIfConfTable=mplsVpnIfConfTable, mplsVpnVrfBgpNbrPrefixEntry=mplsVpnVrfBgpNbrPrefixEntry, mplsVpnIfConfRowStatus=mplsVpnIfConfRowStatus, mplsVpnIfVpnRouteDistProtocol=mplsVpnIfVpnRouteDistProtocol, mplsVpnRoute=mplsVpnRoute, mplsVpnVrfEntry=mplsVpnVrfEntry, mplsVpnVrfRouteMetric2=mplsVpnVrfRouteMetric2, mplsVrfIfUp=mplsVrfIfUp, mplsVpnVrfBgpPAtrPeer=mplsVpnVrfBgpPAtrPeer, mplsVpnVrfRouteTargetDescr=mplsVpnVrfRouteTargetDescr, mplsVpnVrfBgpPAtrASPathSegment=mplsVpnVrfBgpPAtrASPathSegment, mplsVpnIfLabelEdgeType=mplsVpnIfLabelEdgeType, mplsVpnVrfRouteMetric1=mplsVpnVrfRouteMetric1, mplsVpnVrfBgpNbrAddrEntry=mplsVpnVrfBgpNbrAddrEntry, mplsVrfIfDown=mplsVrfIfDown, mplsVpnScalarGroup=mplsVpnScalarGroup, mplsVpnNotifications=mplsVpnNotifications, mplsVpnVrfRouteTos=mplsVpnVrfRouteTos, mplsVpnVrfBgpPrefixGroup=mplsVpnVrfBgpPrefixGroup, mplsVpnVrfRouteTable=mplsVpnVrfRouteTable, mplsVpnVrfBgpNbrType=mplsVpnVrfBgpNbrType, mplsVpnVrfConfMaxPossibleRoutes=mplsVpnVrfConfMaxPossibleRoutes, mplsVpnVrfBgpNbrAddrTable=mplsVpnVrfBgpNbrAddrTable, mplsVpnVrfName=mplsVpnVrfName, MplsVpnName=MplsVpnName, MplsVpnRouteDistinguisher=MplsVpnRouteDistinguisher, mplsVpnVrfRouteAge=mplsVpnVrfRouteAge, mplsVpnVrfBgpPAtrIpAddrPrefixLen=mplsVpnVrfBgpPAtrIpAddrPrefixLen, mplsVpnVrfRouteMetric3=mplsVpnVrfRouteMetric3, mplsVpnVrfPerfCurrNumRoutes=mplsVpnVrfPerfCurrNumRoutes, mplsVpnVrfConfRouteMaxThreshTime=mplsVpnVrfConfRouteMaxThreshTime, mplsVpnVrfBgpNbrAddr=mplsVpnVrfBgpNbrAddr, mplsVpnVrfVpnId=mplsVpnVrfVpnId, mplsVpnVrfRouteRowStatus=mplsVpnVrfRouteRowStatus, mplsVpnVrfBgpNbrStorageType=mplsVpnVrfBgpNbrStorageType, mplsVpnConfiguredVrfs=mplsVpnConfiguredVrfs, mplsVpnVrfRouteNextHopAS=mplsVpnVrfRouteNextHopAS, mplsVpnNotificationGroup=mplsVpnNotificationGroup, mplsVpnVrfRouteDest=mplsVpnVrfRouteDest, mplsVpnVrfConfMaxRoutes=mplsVpnVrfConfMaxRoutes)
