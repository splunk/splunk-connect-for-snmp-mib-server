#
# PySNMP MIB module IBM-LES-LECS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-LES-LECS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
AtmPrivateAddrEsi, AtmVccTrafficType, AtmSelector, Bandwidth, mssServerLanE = mibBuilder.importSymbols("NWAYSMSS-MIB", "AtmPrivateAddrEsi", "AtmVccTrafficType", "AtmSelector", "Bandwidth", "mssServerLanE")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, MibIdentifier, Counter32, ObjectIdentity, IpAddress, Integer32, NotificationType, Counter64, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "MibIdentifier", "Counter32", "ObjectIdentity", "IpAddress", "Integer32", "NotificationType", "Counter64", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
ibmLesLecsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2))
ibmLesLecsConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1))
ibmLesLecsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2))
ibmLesLecsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 1))
ibmLesLecsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 2))
lesLecsConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: lesLecsConfTable.setStatus('mandatory')
lesLecsConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1), ).setIndexNames((0, "IBM-LES-LECS-MIB", "lesLecsAtmDevNum"))
if mibBuilder.loadTexts: lesLecsConfEntry.setStatus('mandatory')
lesLecsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecsOperStatus.setStatus('mandatory')
lesLecsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsAdminStatus.setStatus('mandatory')
lesLecsAtmDevNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecsAtmDevNum.setStatus('mandatory')
lesLecsAtmDevLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecsAtmDevLineSpeed.setStatus('mandatory')
lesLecsUseBurnedInEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsUseBurnedInEsi.setStatus('mandatory')
lesLecsConfiguredEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 6), AtmPrivateAddrEsi()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsConfiguredEsi.setStatus('mandatory')
lesLecsConfiguredSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 7), AtmSelector()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsConfiguredSelector.setStatus('mandatory')
configDirectVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 8), AtmVccTrafficType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDirectVccType.setStatus('mandatory')
configDirectPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 9), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDirectPcr.setStatus('mandatory')
configDirectScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 10), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDirectScr.setStatus('mandatory')
lesLecsConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsConfRowStatus.setStatus('mandatory')
ibmLesLecsCConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 1, 1))
ibmLesLecsMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 2, 1))
mibBuilder.exportSymbols("IBM-LES-LECS-MIB", configDirectScr=configDirectScr, lesLecsUseBurnedInEsi=lesLecsUseBurnedInEsi, ibmLesLecsMIBCompliances=ibmLesLecsMIBCompliances, lesLecsConfiguredSelector=lesLecsConfiguredSelector, configDirectPcr=configDirectPcr, ibmLesLecsMIBConformance=ibmLesLecsMIBConformance, lesLecsAtmDevLineSpeed=lesLecsAtmDevLineSpeed, ibmLesLecsCConfGroup=ibmLesLecsCConfGroup, lesLecsOperStatus=lesLecsOperStatus, configDirectVccType=configDirectVccType, lesLecsAdminStatus=lesLecsAdminStatus, lesLecsAtmDevNum=lesLecsAtmDevNum, ibmLesLecsMIB=ibmLesLecsMIB, lesLecsConfEntry=lesLecsConfEntry, lesLecsConfiguredEsi=lesLecsConfiguredEsi, lesLecsConfTable=lesLecsConfTable, lesLecsConfRowStatus=lesLecsConfRowStatus, ibmLesLecsMIBCompliance=ibmLesLecsMIBCompliance, ibmLesLecsConfGroup=ibmLesLecsConfGroup, ibmLesLecsMIBGroups=ibmLesLecsMIBGroups)
