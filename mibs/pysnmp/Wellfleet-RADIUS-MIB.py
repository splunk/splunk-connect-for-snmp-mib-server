#
# PySNMP MIB module Wellfleet-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-RADIUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, TimeTicks, Counter32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Gauge32, Bits, IpAddress, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Gauge32", "Bits", "IpAddress", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfRadiusGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfRadiusGroup")
wfRadiusTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1), )
if mibBuilder.loadTexts: wfRadiusTable.setStatus('mandatory')
wfRadiusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1), ).setIndexNames((0, "Wellfleet-RADIUS-MIB", "wfRadiusSlot"))
if mibBuilder.loadTexts: wfRadiusEntry.setStatus('mandatory')
wfRadiusDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusDelete.setStatus('mandatory')
wfRadiusAuthDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusAuthDisable.setStatus('mandatory')
wfRadiusAcctDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusAcctDisable.setStatus('mandatory')
wfRadiusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusSlot.setStatus('mandatory')
wfRadiusClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusClientIpAddress.setStatus('mandatory')
wfRadiusAcctDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("incoming", 2), ("outgoing", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusAcctDirection.setStatus('mandatory')
wfRadiusDebugMsgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("nodebug", 4))).clone('nodebug')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusDebugMsgLevel.setStatus('mandatory')
wfRadiusCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusCfgMask.setStatus('mandatory')
wfRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2), )
if mibBuilder.loadTexts: wfRadiusServerTable.setStatus('mandatory')
wfRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1), ).setIndexNames((0, "Wellfleet-RADIUS-MIB", "wfRadiusServerIpAddress"))
if mibBuilder.loadTexts: wfRadiusServerEntry.setStatus('mandatory')
wfRadiusServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerDelete.setStatus('mandatory')
wfRadiusServerDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerDisable.setStatus('mandatory')
wfRadiusServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusServerIpAddress.setStatus('mandatory')
wfRadiusServerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authonly", 1), ("acctonly", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerMode.setStatus('mandatory')
wfRadiusServerAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusServerAuthState.setStatus('mandatory')
wfRadiusServerAuthUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 6), Integer32().clone(1645)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerAuthUdpPort.setStatus('mandatory')
wfRadiusServerAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerAuthType.setStatus('mandatory')
wfRadiusServerAcctState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusServerAcctState.setStatus('mandatory')
wfRadiusServerAcctUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 9), Integer32().clone(1646)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerAcctUdpPort.setStatus('mandatory')
wfRadiusServerAcctType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerAcctType.setStatus('mandatory')
wfRadiusPrimarySecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusPrimarySecret.setStatus('mandatory')
wfRadiusServerResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerResponseTimeout.setStatus('mandatory')
wfRadiusServerRetryMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerRetryMax.setStatus('mandatory')
wfRadiusServerResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerResetTimer.setStatus('mandatory')
wfRadiusServerAutomaticReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRadiusServerAutomaticReset.setStatus('mandatory')
wfRadiusStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3), )
if mibBuilder.loadTexts: wfRadiusStatsTable.setStatus('mandatory')
wfRadiusStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1), ).setIndexNames((0, "Wellfleet-RADIUS-MIB", "wfRadiusStatsSlot"), (0, "Wellfleet-RADIUS-MIB", "wfRadiusStatsIpAddress"))
if mibBuilder.loadTexts: wfRadiusStatsEntry.setStatus('mandatory')
wfRadiusStatsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsIpAddress.setStatus('mandatory')
wfRadiusStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsSlot.setStatus('mandatory')
wfRadiusStatsAuthReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthReqCount.setStatus('mandatory')
wfRadiusStatsAuthReqOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthReqOutstanding.setStatus('mandatory')
wfRadiusStatsAuthRespSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthRespSucc.setStatus('mandatory')
wfRadiusStatsAuthRespFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthRespFail.setStatus('mandatory')
wfRadiusStatsAuthNoResp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthNoResp.setStatus('mandatory')
wfRadiusStatsAuthRespInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthRespInvalid.setStatus('mandatory')
wfRadiusStatsAuthRespTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthRespTimeouts.setStatus('mandatory')
wfRadiusStatsAuthAltServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAuthAltServerRetries.setStatus('mandatory')
wfRadiusStatsAcctReqStart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAcctReqStart.setStatus('mandatory')
wfRadiusStatsAcctReqStop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAcctReqStop.setStatus('mandatory')
wfRadiusStatsAcctRespTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAcctRespTimeouts.setStatus('mandatory')
wfRadiusStatsAcctRespFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAcctRespFailed.setStatus('mandatory')
wfRadiusStatsAcctAltServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAcctAltServerRetries.setStatus('mandatory')
wfRadiusStatsAcctResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 22, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRadiusStatsAcctResponse.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-RADIUS-MIB", wfRadiusStatsIpAddress=wfRadiusStatsIpAddress, wfRadiusServerIpAddress=wfRadiusServerIpAddress, wfRadiusStatsAcctRespFailed=wfRadiusStatsAcctRespFailed, wfRadiusStatsAcctReqStart=wfRadiusStatsAcctReqStart, wfRadiusServerRetryMax=wfRadiusServerRetryMax, wfRadiusStatsAuthReqCount=wfRadiusStatsAuthReqCount, wfRadiusServerTable=wfRadiusServerTable, wfRadiusPrimarySecret=wfRadiusPrimarySecret, wfRadiusServerResponseTimeout=wfRadiusServerResponseTimeout, wfRadiusStatsEntry=wfRadiusStatsEntry, wfRadiusServerAcctUdpPort=wfRadiusServerAcctUdpPort, wfRadiusServerAuthUdpPort=wfRadiusServerAuthUdpPort, wfRadiusServerResetTimer=wfRadiusServerResetTimer, wfRadiusServerEntry=wfRadiusServerEntry, wfRadiusSlot=wfRadiusSlot, wfRadiusStatsSlot=wfRadiusStatsSlot, wfRadiusServerAcctType=wfRadiusServerAcctType, wfRadiusServerAuthState=wfRadiusServerAuthState, wfRadiusStatsTable=wfRadiusStatsTable, wfRadiusStatsAcctRespTimeouts=wfRadiusStatsAcctRespTimeouts, wfRadiusClientIpAddress=wfRadiusClientIpAddress, wfRadiusServerAcctState=wfRadiusServerAcctState, wfRadiusServerAuthType=wfRadiusServerAuthType, wfRadiusTable=wfRadiusTable, wfRadiusDebugMsgLevel=wfRadiusDebugMsgLevel, wfRadiusAcctDirection=wfRadiusAcctDirection, wfRadiusStatsAuthReqOutstanding=wfRadiusStatsAuthReqOutstanding, wfRadiusStatsAcctReqStop=wfRadiusStatsAcctReqStop, wfRadiusDelete=wfRadiusDelete, wfRadiusStatsAuthRespInvalid=wfRadiusStatsAuthRespInvalid, wfRadiusAcctDisable=wfRadiusAcctDisable, wfRadiusEntry=wfRadiusEntry, wfRadiusStatsAuthRespTimeouts=wfRadiusStatsAuthRespTimeouts, wfRadiusServerMode=wfRadiusServerMode, wfRadiusStatsAcctResponse=wfRadiusStatsAcctResponse, wfRadiusStatsAuthRespSucc=wfRadiusStatsAuthRespSucc, wfRadiusAuthDisable=wfRadiusAuthDisable, wfRadiusStatsAuthNoResp=wfRadiusStatsAuthNoResp, wfRadiusServerAutomaticReset=wfRadiusServerAutomaticReset, wfRadiusServerDisable=wfRadiusServerDisable, wfRadiusStatsAcctAltServerRetries=wfRadiusStatsAcctAltServerRetries, wfRadiusStatsAuthAltServerRetries=wfRadiusStatsAuthAltServerRetries, wfRadiusCfgMask=wfRadiusCfgMask, wfRadiusStatsAuthRespFail=wfRadiusStatsAuthRespFail, wfRadiusServerDelete=wfRadiusServerDelete)
