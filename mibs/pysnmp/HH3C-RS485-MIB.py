#
# PySNMP MIB module HH3C-RS485-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RS485-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Counter64, Unsigned32, Integer32, Gauge32, Counter32, IpAddress, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Counter64", "Unsigned32", "Integer32", "Gauge32", "Counter32", "IpAddress", "NotificationType", "ModuleIdentity")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hh3cRS485 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 109))
if mibBuilder.loadTexts: hh3cRS485.setLastUpdated('200910210000Z')
if mibBuilder.loadTexts: hh3cRS485.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cRS485Properties = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1))
hh3cRS485PropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1), )
if mibBuilder.loadTexts: hh3cRS485PropertiesTable.setStatus('current')
hh3cRS485PropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cRS485PropertiesEntry.setStatus('current')
hh3cRS485RawSessionNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRS485RawSessionNextIndex.setStatus('current')
hh3cRS485BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("bautRate300", 1), ("bautRate600", 2), ("bautRate1200", 3), ("bautRate2400", 4), ("bautRate4800", 5), ("bautRate9600", 6), ("bautRate19200", 7), ("bautRate38400", 8), ("bautRate57600", 9), ("bautRate115200", 10))).clone('bautRate9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485BaudRate.setStatus('current')
hh3cRS485DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("five", 1), ("six", 2), ("seven", 3), ("eight", 4))).clone('eight')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485DataBits.setStatus('current')
hh3cRS485Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485Parity.setStatus('current')
hh3cRS485StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndHalf", 3))).clone('one')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485StopBits.setStatus('current')
hh3cRS485FlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("xonOrxoff", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485FlowControl.setStatus('current')
hh3cRS485TXCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRS485TXCharacters.setStatus('current')
hh3cRS485RXCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRS485RXCharacters.setStatus('current')
hh3cRS485TXErrCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRS485TXErrCharacters.setStatus('current')
hh3cRS485RXErrCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRS485RXErrCharacters.setStatus('current')
hh3cRS485ResetCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("counting", 1), ("clear", 2))).clone('counting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485ResetCharacters.setStatus('current')
hh3cRS485RawSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2))
hh3cRS485RawSessionSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 1))
hh3cRS485RawSessionMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRS485RawSessionMaxNum.setStatus('current')
hh3cRS485RawSessionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2), )
if mibBuilder.loadTexts: hh3cRS485RawSessionTable.setStatus('current')
hh3cRS485RawSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-RS485-MIB", "hh3cRS485SessionIndex"))
if mibBuilder.loadTexts: hh3cRS485RawSessionEntry.setStatus('current')
hh3cRS485SessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cRS485SessionIndex.setStatus('current')
hh3cRS485SessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tcpClient", 2), ("tcpServer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485SessionType.setStatus('current')
hh3cRS485SessionAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRS485SessionAddType.setStatus('current')
hh3cRS485SessionRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRS485SessionRemoteIP.setStatus('current')
hh3cRS485SessionRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRS485SessionRemotePort.setStatus('current')
hh3cRS485SessionLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRS485SessionLocalPort.setStatus('current')
hh3cRS485SessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRS485SessionStatus.setStatus('current')
hh3cRS485RawSessionErrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 3), )
if mibBuilder.loadTexts: hh3cRS485RawSessionErrInfoTable.setStatus('current')
hh3cRS485RawSessionErrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-RS485-MIB", "hh3cRS485SessionIndex"))
if mibBuilder.loadTexts: hh3cRS485RawSessionErrInfoEntry.setStatus('current')
hh3cRS485RawSessionErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 109, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRS485RawSessionErrInfo.setStatus('current')
mibBuilder.exportSymbols("HH3C-RS485-MIB", hh3cRS485TXErrCharacters=hh3cRS485TXErrCharacters, hh3cRS485TXCharacters=hh3cRS485TXCharacters, hh3cRS485RawSessionErrInfoEntry=hh3cRS485RawSessionErrInfoEntry, hh3cRS485PropertiesEntry=hh3cRS485PropertiesEntry, hh3cRS485RXCharacters=hh3cRS485RXCharacters, hh3cRS485=hh3cRS485, hh3cRS485RawSessionMaxNum=hh3cRS485RawSessionMaxNum, hh3cRS485SessionRemotePort=hh3cRS485SessionRemotePort, hh3cRS485RawSessionSummary=hh3cRS485RawSessionSummary, hh3cRS485RawSessionNextIndex=hh3cRS485RawSessionNextIndex, hh3cRS485BaudRate=hh3cRS485BaudRate, hh3cRS485RawSessionErrInfoTable=hh3cRS485RawSessionErrInfoTable, hh3cRS485Properties=hh3cRS485Properties, hh3cRS485SessionRemoteIP=hh3cRS485SessionRemoteIP, hh3cRS485RXErrCharacters=hh3cRS485RXErrCharacters, hh3cRS485RawSessionEntry=hh3cRS485RawSessionEntry, hh3cRS485PropertiesTable=hh3cRS485PropertiesTable, hh3cRS485Parity=hh3cRS485Parity, hh3cRS485ResetCharacters=hh3cRS485ResetCharacters, hh3cRS485SessionStatus=hh3cRS485SessionStatus, hh3cRS485DataBits=hh3cRS485DataBits, hh3cRS485SessionAddType=hh3cRS485SessionAddType, hh3cRS485RawSessions=hh3cRS485RawSessions, hh3cRS485RawSessionTable=hh3cRS485RawSessionTable, hh3cRS485SessionLocalPort=hh3cRS485SessionLocalPort, hh3cRS485RawSessionErrInfo=hh3cRS485RawSessionErrInfo, hh3cRS485SessionIndex=hh3cRS485SessionIndex, PYSNMP_MODULE_ID=hh3cRS485, hh3cRS485FlowControl=hh3cRS485FlowControl, hh3cRS485StopBits=hh3cRS485StopBits, hh3cRS485SessionType=hh3cRS485SessionType)
