#
# PySNMP MIB module DNOS-BOXSERVICES-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-BOXSERVICES-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:36:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, MibIdentifier, Unsigned32, Counter64, IpAddress, Bits, TimeTicks, ModuleIdentity, iso, Integer32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibIdentifier", "Unsigned32", "Counter64", "IpAddress", "Bits", "TimeTicks", "ModuleIdentity", "iso", "Integer32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fastPathBoxServices = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43))
fastPathBoxServices.setRevisions(('2011-01-26 00:00', '2008-02-22 00:00',))
if mibBuilder.loadTexts: fastPathBoxServices.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathBoxServices.setOrganization('Dell, Inc.')
class BoxsTemperatureStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("low", 0), ("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notpresent", 5), ("notoperational", 6))

boxServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1))
boxServicesNormalTempRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesNormalTempRangeMin.setStatus('current')
boxServicesNormalTempRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesNormalTempRangeMax.setStatus('current')
boxServicesTemperatureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesTemperatureTrapEnable.setStatus('current')
boxServicesPSMStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesPSMStateTrapEnable.setStatus('current')
boxServicesFanStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesFanStateTrapEnable.setStatus('current')
boxsPwrUsageHistoryUnitSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsPwrUsageHistoryUnitSampleInterval.setStatus('current')
boxsPwrUsageHistoryUnitMaxSamples = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsPwrUsageHistoryUnitMaxSamples.setStatus('current')
boxServicesThermalShutdownSensor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxServicesThermalShutdownSensor.setStatus('current')
boxServicesThermalShutdownTemperature = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxServicesThermalShutdownTemperature.setStatus('current')
boxServicesFansTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6), )
if mibBuilder.loadTexts: boxServicesFansTable.setStatus('current')
boxServicesFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1), ).setIndexNames((0, "DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesFansIndex"))
if mibBuilder.loadTexts: boxServicesFansEntry.setStatus('current')
boxServicesFansIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFansIndex.setStatus('current')
boxServicesFanItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2), ("fixedAC", 3), ("removableDC", 4), ("fixedDC", 5), ("removableAC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanItemType.setStatus('current')
boxServicesFanItemState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notpresent", 1), ("operational", 2), ("failed", 3), ("powering", 4), ("nopower", 5), ("notpowering", 6), ("incompatible", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanItemState.setStatus('current')
boxServicesFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanSpeed.setStatus('current')
boxServicesFanDutyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanDutyLevel.setStatus('current')
boxServicesPowSuppliesTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7), )
if mibBuilder.loadTexts: boxServicesPowSuppliesTable.setStatus('current')
boxServicesPowSuppliesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1), ).setIndexNames((0, "DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesPowSupplyIndex"))
if mibBuilder.loadTexts: boxServicesPowSuppliesEntry.setStatus('current')
boxServicesPowSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyIndex.setStatus('current')
boxServicesPowSupplyItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2), ("fixedAC", 3), ("removableDC", 4), ("fixedDC", 5), ("removableAC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyItemType.setStatus('current')
boxServicesPowSupplyItemState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notpresent", 1), ("operational", 2), ("failed", 3), ("powering", 4), ("nopower", 5), ("notpowering", 6), ("incompatible", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyItemState.setStatus('current')
boxsUnitPwrUsageHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9), )
if mibBuilder.loadTexts: boxsUnitPwrUsageHistoryTable.setStatus('current')
boxsUnitPwrUsageHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1), ).setIndexNames((0, "DNOS-BOXSERVICES-PRIVATE-MIB", "boxsPwrUsageHistoryUnitIndex"), (0, "DNOS-BOXSERVICES-PRIVATE-MIB", "boxsPwrUsageHistoryUnitSampleIndex"))
if mibBuilder.loadTexts: boxsUnitPwrUsageHistoryEntry.setStatus('current')
boxsPwrUsageHistoryUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: boxsPwrUsageHistoryUnitIndex.setStatus('current')
boxsPwrUsageHistoryUnitSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: boxsPwrUsageHistoryUnitSampleIndex.setStatus('current')
boxsPwrUsageHistoryUnitSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxsPwrUsageHistoryUnitSampleTime.setStatus('current')
boxsPwrUsageHistoryUnitPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxsPwrUsageHistoryUnitPowerConsumption.setStatus('current')
boxsPwrUsageHistoryStackPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxsPwrUsageHistoryStackPowerConsumption.setStatus('current')
boxServicesTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8), )
if mibBuilder.loadTexts: boxServicesTempSensorsTable.setStatus('current')
boxServicesTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1), ).setIndexNames((0, "DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesUnitIndex"), (0, "DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesTempSensorIndex"))
if mibBuilder.loadTexts: boxServicesTempSensorsEntry.setStatus('current')
boxServicesUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesUnitIndex.setStatus('current')
boxServicesTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorIndex.setStatus('current')
boxServicesTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2), ("fixedAC", 3), ("removableDC", 4), ("fixedDC", 5), ("removableAC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorType.setStatus('current')
boxServicesTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notpresent", 5), ("notoperational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorState.setStatus('obsolete')
boxServicesTempSensorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorTemperature.setStatus('current')
boxServicesTempUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 15), )
if mibBuilder.loadTexts: boxServicesTempUnitTable.setStatus('current')
boxServicesTempUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 15, 1), ).setIndexNames((0, "DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesTempUnitIndex"))
if mibBuilder.loadTexts: boxServicesTempUnitEntry.setStatus('current')
boxServicesTempUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: boxServicesTempUnitIndex.setStatus('current')
boxServicesTempUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 15, 1, 2), BoxsTemperatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempUnitState.setStatus('current')
boxServicesTempUnitTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempUnitTemperature.setStatus('current')
boxServicesNotificationsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2))
boxsItemStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("insertion", 1), ("removal", 2), ("becomeoperational", 3), ("failure", 4), ("losepower", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsItemStateChangeEvent.setStatus('current')
boxsTemperatureChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abovethreshold", 1), ("belowthreshold", 2), ("withinnormalrange", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsTemperatureChangeEvent.setStatus('current')
boxsTemperatureStatusCurrentEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2, 3), BoxsTemperatureStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsTemperatureStatusCurrentEvent.setStatus('current')
boxsTemperatureStatusPreviousEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2, 4), BoxsTemperatureStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsTemperatureStatusPreviousEvent.setStatus('current')
fastPathBoxServicesTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0))
boxsFanStateChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 1)).setObjects(("DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesFansIndex"), ("DNOS-BOXSERVICES-PRIVATE-MIB", "boxsItemStateChangeEvent"))
if mibBuilder.loadTexts: boxsFanStateChange.setStatus('current')
boxsPowSupplyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 2)).setObjects(("DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesPowSupplyIndex"), ("DNOS-BOXSERVICES-PRIVATE-MIB", "boxsItemStateChangeEvent"))
if mibBuilder.loadTexts: boxsPowSupplyStateChange.setStatus('current')
boxsTemperatureChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 3)).setObjects(("DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesTempSensorIndex"), ("DNOS-BOXSERVICES-PRIVATE-MIB", "boxsTemperatureChangeEvent"))
if mibBuilder.loadTexts: boxsTemperatureChange.setStatus('obsolete')
boxsThermalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 4)).setObjects(("DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesThermalShutdownSensor"), ("DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesThermalShutdownTemperature"))
if mibBuilder.loadTexts: boxsThermalShutdown.setStatus('current')
boxsTemperatureStateChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 5)).setObjects(("DNOS-BOXSERVICES-PRIVATE-MIB", "boxServicesTempUnitIndex"), ("DNOS-BOXSERVICES-PRIVATE-MIB", "boxsTemperatureStatusCurrentEvent"), ("DNOS-BOXSERVICES-PRIVATE-MIB", "boxsTemperatureStatusPreviousEvent"))
if mibBuilder.loadTexts: boxsTemperatureStateChange.setStatus('current')
boxsLocatorLedConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 4))
boxsLocatorLedUnit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsLocatorLedUnit.setStatus('current')
boxsLocatorLedTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 4, 2), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsLocatorLedTime.setStatus('current')
boxsLocatorLedEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsLocatorLedEnable.setStatus('current')
mibBuilder.exportSymbols("DNOS-BOXSERVICES-PRIVATE-MIB", boxServicesTempSensorState=boxServicesTempSensorState, boxServicesFanSpeed=boxServicesFanSpeed, boxsTemperatureChange=boxsTemperatureChange, boxsPwrUsageHistoryUnitSampleInterval=boxsPwrUsageHistoryUnitSampleInterval, boxServicesUnitIndex=boxServicesUnitIndex, boxsPwrUsageHistoryUnitSampleTime=boxsPwrUsageHistoryUnitSampleTime, boxServicesThermalShutdownSensor=boxServicesThermalShutdownSensor, boxsTemperatureStatusPreviousEvent=boxsTemperatureStatusPreviousEvent, boxsThermalShutdown=boxsThermalShutdown, boxServicesFanStateTrapEnable=boxServicesFanStateTrapEnable, boxServicesTempUnitTable=boxServicesTempUnitTable, boxServicesNotificationsGroup=boxServicesNotificationsGroup, boxServicesFanItemType=boxServicesFanItemType, boxServicesTempSensorType=boxServicesTempSensorType, boxServicesFansEntry=boxServicesFansEntry, boxServicesTempUnitEntry=boxServicesTempUnitEntry, boxServicesPowSuppliesTable=boxServicesPowSuppliesTable, boxServicesFansIndex=boxServicesFansIndex, boxServicesPSMStateTrapEnable=boxServicesPSMStateTrapEnable, boxsLocatorLedTime=boxsLocatorLedTime, boxsLocatorLedConfigGroup=boxsLocatorLedConfigGroup, boxServicesTemperatureTrapEnable=boxServicesTemperatureTrapEnable, boxServicesPowSupplyItemState=boxServicesPowSupplyItemState, boxServicesNormalTempRangeMin=boxServicesNormalTempRangeMin, boxServicesFanItemState=boxServicesFanItemState, boxServicesPowSupplyIndex=boxServicesPowSupplyIndex, boxsUnitPwrUsageHistoryEntry=boxsUnitPwrUsageHistoryEntry, boxServicesNormalTempRangeMax=boxServicesNormalTempRangeMax, boxsPowSupplyStateChange=boxsPowSupplyStateChange, boxsPwrUsageHistoryUnitSampleIndex=boxsPwrUsageHistoryUnitSampleIndex, boxServicesPowSuppliesEntry=boxServicesPowSuppliesEntry, boxsPwrUsageHistoryUnitIndex=boxsPwrUsageHistoryUnitIndex, boxsFanStateChange=boxsFanStateChange, fastPathBoxServices=fastPathBoxServices, boxServicesTempSensorIndex=boxServicesTempSensorIndex, BoxsTemperatureStatus=BoxsTemperatureStatus, boxsItemStateChangeEvent=boxsItemStateChangeEvent, boxsLocatorLedUnit=boxsLocatorLedUnit, boxsTemperatureChangeEvent=boxsTemperatureChangeEvent, PYSNMP_MODULE_ID=fastPathBoxServices, boxServicesThermalShutdownTemperature=boxServicesThermalShutdownTemperature, boxServicesTempUnitIndex=boxServicesTempUnitIndex, boxsPwrUsageHistoryStackPowerConsumption=boxsPwrUsageHistoryStackPowerConsumption, boxsUnitPwrUsageHistoryTable=boxsUnitPwrUsageHistoryTable, fastPathBoxServicesTraps=fastPathBoxServicesTraps, boxsTemperatureStateChange=boxsTemperatureStateChange, boxServicesTempUnitTemperature=boxServicesTempUnitTemperature, boxServicesGroup=boxServicesGroup, boxsPwrUsageHistoryUnitPowerConsumption=boxsPwrUsageHistoryUnitPowerConsumption, boxServicesTempUnitState=boxServicesTempUnitState, boxsLocatorLedEnable=boxsLocatorLedEnable, boxServicesPowSupplyItemType=boxServicesPowSupplyItemType, boxServicesTempSensorsTable=boxServicesTempSensorsTable, boxsTemperatureStatusCurrentEvent=boxsTemperatureStatusCurrentEvent, boxsPwrUsageHistoryUnitMaxSamples=boxsPwrUsageHistoryUnitMaxSamples, boxServicesTempSensorsEntry=boxServicesTempSensorsEntry, boxServicesFanDutyLevel=boxServicesFanDutyLevel, boxServicesFansTable=boxServicesFansTable, boxServicesTempSensorTemperature=boxServicesTempSensorTemperature)
