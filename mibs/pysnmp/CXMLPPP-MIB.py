#
# PySNMP MIB module CXMLPPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXMLPPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
cxMLPPP, SapIndex, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxMLPPP", "SapIndex", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, ObjectIdentity, TimeTicks, IpAddress, NotificationType, Gauge32, MibIdentifier, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "ObjectIdentity", "TimeTicks", "IpAddress", "NotificationType", "Gauge32", "MibIdentifier", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mlpppNbSmallBufs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 1), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppNbSmallBufs.setStatus('mandatory')
mlpppSmallBufSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 2), Integer32().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppSmallBufSize.setStatus('mandatory')
mlpppNbLargeBufs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppNbLargeBufs.setStatus('mandatory')
mlpppLargeBufSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 4), Integer32().clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLargeBufSize.setStatus('mandatory')
mlpppSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 40), DisplayString().clone('1.00')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppSoftwareVersion.setStatus('mandatory')
mlpppNbActiveUSap = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppNbActiveUSap.setStatus('mandatory')
mlpppNbActiveLSap = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppNbActiveLSap.setStatus('mandatory')
mlpppNbActiveBundle = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppNbActiveBundle.setStatus('mandatory')
mlpppNbSmallBufsFree = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppNbSmallBufsFree.setStatus('mandatory')
mlpppNbLargeBufsFree = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppNbLargeBufsFree.setStatus('mandatory')
mlpppMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppMibLevel.setStatus('mandatory')
mlpppLSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50), )
if mibBuilder.loadTexts: mlpppLSapTable.setStatus('mandatory')
mlpppLSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1), ).setIndexNames((0, "CXMLPPP-MIB", "mlpppLSapNumber"))
if mibBuilder.loadTexts: mlpppLSapEntry.setStatus('mandatory')
mlpppLSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapNumber.setStatus('mandatory')
mlpppLSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapRowStatus.setStatus('mandatory')
mlpppLSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapAlias.setStatus('mandatory')
mlpppLSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapCompanionAlias.setStatus('mandatory')
mlpppLSapLinkUSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLinkUSapNumber.setStatus('mandatory')
mlpppLSapDialEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 12), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapDialEntry.setStatus('mandatory')
mlpppLSapLcInitialMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcInitialMRU.setStatus('mandatory')
mlpppLSapLcTransmitACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone('FFFFFFFF')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcTransmitACCMap.setStatus('mandatory')
mlpppLSapLcMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 16), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcMaxConfigure.setStatus('mandatory')
mlpppLSapLcMaxTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 17), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcMaxTerminate.setStatus('mandatory')
mlpppLSapLcMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 18), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcMaxFailure.setStatus('mandatory')
mlpppLSapLcRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 19), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcRestartTimer.setStatus('mandatory')
mlpppLSapLcProtFieldComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcProtFieldComp.setStatus('mandatory')
mlpppLSapLcACFieldComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcACFieldComp.setStatus('mandatory')
mlpppLSapLcMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLcMagicNumber.setStatus('mandatory')
mlpppLSapLinkControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("stop", 3), ("start", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppLSapLinkControl.setStatus('mandatory')
mlpppLSapClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 30), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mlpppLSapClearStats.setStatus('mandatory')
mlpppLSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-used", 1), ("unbound", 2), ("bound", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapState.setStatus('mandatory')
mlpppLSapPhysNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pif-attached", 1), ("pif-detached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapPhysNetStatus.setStatus('mandatory')
mlpppLSapVirtNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vif-attached", 1), ("vif-detached", 2), ("vif-up", 3), ("vif-down", 4), ("vif-finished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapVirtNetStatus.setStatus('mandatory')
mlpppLSapLsBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsBadAddresses.setStatus('mandatory')
mlpppLSapLsBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsBadControls.setStatus('mandatory')
mlpppLSapLsPacketTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsPacketTooLongs.setStatus('mandatory')
mlpppLSapLsBadFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsBadFCSs.setStatus('mandatory')
mlpppLSapLsLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsLocalMRU.setStatus('mandatory')
mlpppLSapLsRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsRemoteMRU.setStatus('mandatory')
mlpppLSapLsLocalToPeerACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone('FFFFFFFF')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsLocalToPeerACCMap.setStatus('mandatory')
mlpppLSapLsPeerToLocalACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone('FFFFFFFF')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsPeerToLocalACCMap.setStatus('mandatory')
mlpppLSapLsLocalToRemoteProtComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsLocalToRemoteProtComp.setStatus('mandatory')
mlpppLSapLsRemoteToLocalProtComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsRemoteToLocalProtComp.setStatus('mandatory')
mlpppLSapLsLocalToRemoteACComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsLocalToRemoteACComp.setStatus('mandatory')
mlpppLSapLsRemoteToLocalACComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapLsRemoteToLocalACComp.setStatus('mandatory')
mlpppLSapNbBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapNbBytesSent.setStatus('mandatory')
mlpppLSapNbBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 50, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppLSapNbBytesReceived.setStatus('mandatory')
mlpppUSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51), )
if mibBuilder.loadTexts: mlpppUSapTable.setStatus('mandatory')
mlpppUSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1), ).setIndexNames((0, "CXMLPPP-MIB", "mlpppUSapNumber"))
if mibBuilder.loadTexts: mlpppUSapEntry.setStatus('mandatory')
mlpppUSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapNumber.setStatus('mandatory')
mlpppUSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapRowStatus.setStatus('mandatory')
mlpppUSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapAlias.setStatus('mandatory')
mlpppUSapLcInitialMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapLcInitialMRRU.setStatus('mandatory')
mlpppUSapLcSeqFieldComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapLcSeqFieldComp.setStatus('mandatory')
mlpppUSapLcUseBACP = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapLcUseBACP.setStatus('mandatory')
mlpppUSapTransmitWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapTransmitWindow.setStatus('mandatory')
mlpppUSapGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabledos", 3), ("retrigger", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapGenerator.setStatus('mandatory')
mlpppUSapGeneratorLinkUSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapGeneratorLinkUSap.setStatus('mandatory')
mlpppUSapGeneratorFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4096)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapGeneratorFrameSize.setStatus('mandatory')
mlpppUSapGeneratorNumberOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapGeneratorNumberOfFrames.setStatus('mandatory')
mlpppUSapGeneratorInterFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 60000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapGeneratorInterFrameDelay.setStatus('mandatory')
mlpppUSapGeneratorFramePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowpri", 1), ("medpri", 2), ("highpri", 3), ("veryhighpri", 4))).clone('lowpri')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapGeneratorFramePriority.setStatus('mandatory')
mlpppUSapClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 30), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mlpppUSapClearStats.setStatus('mandatory')
mlpppUSapMlpppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppUSapMlpppMode.setStatus('mandatory')
mlpppUSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-used", 1), ("unbound", 2), ("bound", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapState.setStatus('mandatory')
mlpppUSapNbPPPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapNbPPPLink.setStatus('mandatory')
mlpppUSapLsLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapLsLocalMRRU.setStatus('mandatory')
mlpppUSapLsRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapLsRemoteMRRU.setStatus('mandatory')
mlpppUSapLsLocalToRemoteSeqFieldComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapLsLocalToRemoteSeqFieldComp.setStatus('mandatory')
mlpppUSapLsRemoteToLocalSeqFieldComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapLsRemoteToLocalSeqFieldComp.setStatus('mandatory')
mlpppUSapNbPPPLinkUP = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapNbPPPLinkUP.setStatus('mandatory')
mlpppUsapMlpNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ncp-up", 1), ("ncp-down", 2), ("ncp-na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUsapMlpNcpState.setStatus('mandatory')
mlpppUsapGenNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ncp-up", 1), ("ncp-down", 2), ("ncp-na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUsapGenNcpState.setStatus('mandatory')
mlpppUsapBapNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ncp-up", 1), ("ncp-down", 2), ("ncp-na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUsapBapNcpState.setStatus('mandatory')
mlpppUsapFrNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ncp-up", 1), ("ncp-down", 2), ("ncp-na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUsapFrNcpState.setStatus('mandatory')
mlpppUsapIpNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ncp-up", 1), ("ncp-down", 2), ("ncp-na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUsapIpNcpState.setStatus('mandatory')
mlpppUSapNbBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapNbBytesSent.setStatus('mandatory')
mlpppUSapNbBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 51, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppUSapNbBytesReceived.setStatus('mandatory')
mibBuilder.exportSymbols("CXMLPPP-MIB", mlpppLSapLcTransmitACCMap=mlpppLSapLcTransmitACCMap, mlpppLSapLsRemoteToLocalProtComp=mlpppLSapLsRemoteToLocalProtComp, mlpppUSapGeneratorLinkUSap=mlpppUSapGeneratorLinkUSap, mlpppLSapLcProtFieldComp=mlpppLSapLcProtFieldComp, mlpppLSapTable=mlpppLSapTable, mlpppUSapAlias=mlpppUSapAlias, mlpppNbActiveUSap=mlpppNbActiveUSap, mlpppLSapEntry=mlpppLSapEntry, mlpppUSapGeneratorFrameSize=mlpppUSapGeneratorFrameSize, mlpppLSapLcInitialMRU=mlpppLSapLcInitialMRU, mlpppLSapLsPacketTooLongs=mlpppLSapLsPacketTooLongs, mlpppUSapTransmitWindow=mlpppUSapTransmitWindow, mlpppLSapState=mlpppLSapState, mlpppUSapLsLocalToRemoteSeqFieldComp=mlpppUSapLsLocalToRemoteSeqFieldComp, mlpppUSapMlpppMode=mlpppUSapMlpppMode, mlpppLSapNbBytesReceived=mlpppLSapNbBytesReceived, mlpppLSapLsLocalToPeerACCMap=mlpppLSapLsLocalToPeerACCMap, mlpppLSapLsLocalMRU=mlpppLSapLsLocalMRU, mlpppUsapFrNcpState=mlpppUsapFrNcpState, mlpppLSapCompanionAlias=mlpppLSapCompanionAlias, mlpppUSapLsLocalMRRU=mlpppUSapLsLocalMRRU, mlpppLSapLsLocalToRemoteACComp=mlpppLSapLsLocalToRemoteACComp, mlpppLSapLinkUSapNumber=mlpppLSapLinkUSapNumber, mlpppSmallBufSize=mlpppSmallBufSize, mlpppUSapLcInitialMRRU=mlpppUSapLcInitialMRRU, mlpppLSapLsRemoteToLocalACComp=mlpppLSapLsRemoteToLocalACComp, mlpppUSapRowStatus=mlpppUSapRowStatus, mlpppUsapGenNcpState=mlpppUsapGenNcpState, mlpppUSapGenerator=mlpppUSapGenerator, mlpppLSapLsBadAddresses=mlpppLSapLsBadAddresses, mlpppLSapLsRemoteMRU=mlpppLSapLsRemoteMRU, mlpppUSapTable=mlpppUSapTable, mlpppSoftwareVersion=mlpppSoftwareVersion, mlpppUSapLcUseBACP=mlpppUSapLcUseBACP, mlpppNbSmallBufs=mlpppNbSmallBufs, mlpppMibLevel=mlpppMibLevel, mlpppLSapLcACFieldComp=mlpppLSapLcACFieldComp, mlpppLSapLcMaxTerminate=mlpppLSapLcMaxTerminate, mlpppLSapVirtNetStatus=mlpppLSapVirtNetStatus, mlpppNbActiveLSap=mlpppNbActiveLSap, mlpppLSapLsBadControls=mlpppLSapLsBadControls, mlpppUsapBapNcpState=mlpppUsapBapNcpState, mlpppUSapEntry=mlpppUSapEntry, mlpppNbActiveBundle=mlpppNbActiveBundle, mlpppLSapDialEntry=mlpppLSapDialEntry, mlpppUSapLcSeqFieldComp=mlpppUSapLcSeqFieldComp, mlpppNbLargeBufsFree=mlpppNbLargeBufsFree, mlpppLSapLinkControl=mlpppLSapLinkControl, mlpppLSapNumber=mlpppLSapNumber, mlpppNbSmallBufsFree=mlpppNbSmallBufsFree, mlpppNbLargeBufs=mlpppNbLargeBufs, mlpppUSapNbPPPLinkUP=mlpppUSapNbPPPLinkUP, mlpppUSapNumber=mlpppUSapNumber, mlpppLSapAlias=mlpppLSapAlias, mlpppUSapClearStats=mlpppUSapClearStats, mlpppLSapLcMaxConfigure=mlpppLSapLcMaxConfigure, mlpppLSapPhysNetStatus=mlpppLSapPhysNetStatus, mlpppUSapLsRemoteMRRU=mlpppUSapLsRemoteMRRU, mlpppLSapNbBytesSent=mlpppLSapNbBytesSent, mlpppUSapNbPPPLink=mlpppUSapNbPPPLink, mlpppLSapLcMagicNumber=mlpppLSapLcMagicNumber, mlpppUSapNbBytesReceived=mlpppUSapNbBytesReceived, mlpppLSapLsPeerToLocalACCMap=mlpppLSapLsPeerToLocalACCMap, mlpppUSapGeneratorInterFrameDelay=mlpppUSapGeneratorInterFrameDelay, mlpppUsapMlpNcpState=mlpppUsapMlpNcpState, mlpppLSapClearStats=mlpppLSapClearStats, mlpppLSapRowStatus=mlpppLSapRowStatus, mlpppUSapGeneratorNumberOfFrames=mlpppUSapGeneratorNumberOfFrames, mlpppUSapState=mlpppUSapState, mlpppLSapLsBadFCSs=mlpppLSapLsBadFCSs, mlpppUSapGeneratorFramePriority=mlpppUSapGeneratorFramePriority, mlpppUSapNbBytesSent=mlpppUSapNbBytesSent, mlpppLSapLsLocalToRemoteProtComp=mlpppLSapLsLocalToRemoteProtComp, mlpppUSapLsRemoteToLocalSeqFieldComp=mlpppUSapLsRemoteToLocalSeqFieldComp, mlpppLSapLcMaxFailure=mlpppLSapLcMaxFailure, mlpppLSapLcRestartTimer=mlpppLSapLcRestartTimer, mlpppLargeBufSize=mlpppLargeBufSize, mlpppUsapIpNcpState=mlpppUsapIpNcpState)
