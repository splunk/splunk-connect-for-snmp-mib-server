#
# PySNMP MIB module Wellfleet-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, iso, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, ObjectIdentity, NotificationType, Integer32, ModuleIdentity, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "iso", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "ObjectIdentity", "NotificationType", "Integer32", "ModuleIdentity", "Unsigned32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfHardwareConfig, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfHardwareConfig")
wfHwBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 1, 1))
wfHwBpIdOpt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 16, 32, 34, 36, 5000, 16640, 16896, 17152, 20480, 20736, 20992, 24576, 26368))).clone(namedValues=NamedValues(("acefn", 1), ("aceln", 2), ("acecn", 3), ("afn", 4), ("in", 5), ("an", 16), ("arn", 32), ("fbr4slot", 34), ("lite", 36), ("sys5000", 5000), ("freln", 16640), ("frecn", 16896), ("frerbln", 17152), ("asn", 20480), ("asnzcable", 20736), ("asnbcable", 20992), ("sn", 24576), ("v15k", 26368)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBpIdOpt.setStatus('mandatory')
wfHwBpRev = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBpRev.setStatus('mandatory')
wfHwBpSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBpSerialNumber.setStatus('mandatory')
wfBCNPwrSupply1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply1.setStatus('mandatory')
wfBCNPwrSupply2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply2.setStatus('mandatory')
wfBCNPwrSupply3 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply3.setStatus('mandatory')
wfBCNPwrSupply4 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply4.setStatus('mandatory')
wfBCNFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNFanStatus.setStatus('mandatory')
wfBCNTemperature = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("caution", 2), ("notpresent", 3), ("fail", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNTemperature.setStatus('mandatory')
wfBCNTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("caution", 2), ("notpresent", 3), ("fail", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNTemperature2.setStatus('mandatory')
wfFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("high", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFanSpeed.setStatus('mandatory')
wfHwTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 1, 2), )
if mibBuilder.loadTexts: wfHwTable.setStatus('mandatory')
wfHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1), ).setIndexNames((0, "Wellfleet-HARDWARE-MIB", "wfHwSlot"))
if mibBuilder.loadTexts: wfHwEntry.setStatus('mandatory')
wfHwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSlot.setStatus('mandatory')
wfHwModIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 16, 17, 24, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 80, 81, 88, 89, 104, 112, 113, 114, 116, 117, 118, 119, 120, 132, 156, 160, 161, 162, 164, 165, 168, 169, 176, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 216, 217, 224, 225, 232, 233, 234, 235, 236, 237, 238, 239, 256, 508, 509, 510, 511, 513, 512, 767, 777, 787, 778, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 4096, 4097, 4098, 4099, 4352, 4353, 4354, 4608, 4609, 4610, 4864, 5120, 5121, 5376, 5377, 5378, 6144, 6145, 6400, 6401, 8448, 8500, 24848, 24849, 24864, 24880, 24896, 24912, 524288, 524544, 1048799, 1048798, 1048831, 1048830, 1048823, 1048822, 1048815, 1048814, 1048807, 1048806, 1048827, 1048826, 1048811, 1048810, 1048763, 1048762), SingleValueConstraint(1048747, 1048746, 1048832, 1048833, 1048834, 1048835, 1048836, 1048837, 1048863, 1048864, 1048865, 1048866, 1048867, 1048868, 1048869, 1048895, 1048896, 1048897, 1048898, 1048899, 1048900, 1048901, 1048927, 1048928, 1048929, 1048930, 1048931, 1048932, 1048933, 1048959, 1048960, 1048961, 1048962, 1048963, 1048964, 1048965, 1048991, 1049089, 1049090, 1049091, 1049092, 1049093, 1049094, 1049095, 1049119, 1049217, 1049218, 1049219, 1049220, 1049221, 1049222, 1049223, 1049247, 1049344, 1049376))).clone(namedValues=NamedValues(("enet1", 1), ("enet2", 8), ("sync1", 16), ("sync1a", 17), ("t11", 24), ("dse1", 32), ("dse1a", 33), ("dst416", 40), ("sst416a", 41), ("dst4", 42), ("sst4a", 43), ("sst416", 44), ("stok416", 45), ("sst4", 46), ("stok4", 47), ("floppy", 48), ("necfloppy", 49), ("t12", 56), ("t12a", 57), ("st1", 58), ("t156k", 60), ("e1", 61), ("st156k", 62), ("se1", 63), ("t12n", 64), ("st1n", 65), ("t156kn", 66), ("st156kn", 67), ("e1n", 68), ("se1n", 69), ("sync", 80), ("sync2a", 81), ("cmcfddi", 88), ("iphfddi", 89), ("dt", 104), ("dsde1", 112), ("dsde1a", 113), ("enet", 114), ("dse2", 116), ("dse2a", 117), ("sse", 118), ("ssea", 119), ("dsde10bt", 120), ("enet3", 132), ("dsde2", 156), ("oldqenf", 160), ("denf", 161), ("qenf", 162), ("qef", 164), ("def", 165), ("mct1", 168), ("smct1", 169), ("dtok", 176), ("mce1", 184), ("smce1", 185), ("mce1ii75", 188), ("smce1ii75", 189), ("mce1ii120", 190), ("smce1ii120", 191), ("wffddi2m", 192), ("wffddi1m", 193), ("wffddi2s", 194), ("wffddi1s", 195), ("wffddi2mf", 196), ("wffddi1mf", 197), ("wffddi2sf", 198), ("wffddi1sf", 199), ("fmdset", 200), ("fmdst", 201), ("fmdse", 202), ("fmsst", 203), ("fmsse", 204), ("fnsdse", 208), ("fnsdsdt", 216), ("fnsdst", 217), ("dhssi", 224), ("shssi", 225), ("esafnf", 232), ("esafdsenf", 233), ("esafssenf", 234), ("esafdenf", 235), ("esaf", 236), ("esafdse", 237), ("esafsse", 238), ("esafde", 239), ("qtok", 256), ("m5380", 508), ("m5580", 509), ("m5780", 510), ("asn", 511), ("sn", 513), ("m5782", 512), ("arn", 767), ("fbrcpu", 777), ("lite", 787), ("fbr2pmccarrier", 778), ("anseds", 1024), ("ansedst", 1025), ("ansedsh", 1026), ("ansedsi", 1027), ("ansedsti", 1028), ("ansedshi", 1029), ("ansets", 1030), ("ansetst", 1031), ("ansetsh", 1032), ("andeds", 1033), ("andedst", 1034), ("andedsh", 1035), ("andstx", 1036), ("andst", 1037), ("andsti", 1038), ("antst", 1039), ("antstx", 1040), ("ansdsedst", 1041), ("ansdsedstx", 1042), ("ansedsi2", 1043), ("ansedsti2", 1044), ("ansedshi2", 1045), ("andsti2", 1046), ("ansedsg", 1047), ("ansedsgx", 1048), ("ansetsg", 1049), ("andedsg", 1050), ("ansedsgi", 1051), ("ansetsgx", 1052), ("andedsgx", 1053), ("ansedsgix", 1054), ("ansedsx", 1055), ("ansetsx", 1056), ("andedsx", 1057), ("ansedstx", 1058), ("ansetstx", 1059), ("andedstx", 1060), ("andsti2x", 1061), ("ansedsi2x", 1062), ("ansedsti2x", 1063), ("ansedi", 1064), ("ansedsu", 1066), ("ansedsu2", 1067), ("andstu", 1068), ("andstu2", 1069), ("ansedstu", 1070), ("ansedstu2", 1071), ("ansedshu", 1072), ("ansedshu2", 1073), ("ansedsgu", 1074), ("ansedsu2x", 1075), ("andstu2x", 1076), ("ansedstu2x", 1077), ("ansedshu2x", 1078), ("ansedsgu2x", 1079), ("ansedsv", 1080), ("andstv", 1081), ("ansedstv", 1082), ("ansedshv", 1083), ("ansedsgv", 1084), ("ansedsvx", 1085), ("andstvx", 1086), ("ansedstvx", 1087), ("ansedshvx", 1088), ("ansedsgvx", 1089), ("ansedsc", 1090), ("andstc", 1091), ("ansedstc", 1092), ("ansedshc", 1093), ("ansedsgc", 1094), ("ansedscx", 1095), ("andstcx", 1096), ("ansedstcx", 1097), ("ansedshcx", 1098), ("ansedsgcx", 1099), ("ansedsf", 1100), ("ansedsf2", 1101), ("andstf", 1102), ("andstf2", 1103), ("ansedstf", 1104), ("ansedstf2", 1105), ("ansedshf", 1106), ("ansedshf2", 1107), ("ansedsgf", 1108), ("ansedsf2x", 1109), ("andstf2x", 1110), ("ansedstf2x", 1111), ("ansedshf2x", 1112), ("ansedsgf2x", 1113), ("ansedsfx", 1114), ("andstfx", 1115), ("ansedstfx", 1116), ("ansedshfx", 1117), ("ansedsgfx", 1118), ("ansedsj", 1119), ("ansedsj2", 1120), ("andstj", 1121), ("andstj2", 1122), ("ansedstj", 1123), ("ansedstj2", 1124), ("ansedshj", 1125), ("ansedshj2", 1126), ("ansedsgj", 1127), ("ansedsj2x", 1128), ("andstj2x", 1129), ("ansedstj2x", 1130), ("ansedshj2x", 1131), ("ansedsgj2x", 1132), ("ansedsjx", 1133), ("andstjx", 1134), ("ansedstjx", 1135), ("ansedshjx", 1136), ("ansedsgjx", 1137), ("atmalc", 4096), ("atmalctaxi100", 4097), ("atmalcsonetmm", 4098), ("atmalcsonetsm", 4099), ("osync", 4352), ("comp", 4353), ("comp128", 4354), ("atmcoc3mm", 4608), ("atmcoc3sm", 4609), ("atmcoc3utp5", 4610), ("de100", 4864), ("atmcds3", 5120), ("atmce3", 5121), ("qmct1rj48", 5376), ("qmct1db15", 5377), ("qmct1ds0a", 5378), ("sqe100", 6144), ("sqe100fx", 6145), ("gigenet", 6400), ("gigenetlx", 6401), ("srml", 8448), ("fvoip", 8500), ("hds3", 24848), ("arm", 24849), ("dmcoc3", 24864), ("atmoc12", 24880), ("sspcons", 24896), ("sspenet", 24912), ("atm5000ah", 524288), ("atm5000bh", 524544), ("qe", 1048799), ("qehwf", 1048798), ("qefddi2m", 1048831), ("qefddi2mhwf", 1048830), ("qefddi2s", 1048823), ("qefddi2shwf", 1048822), ("qefddi1m", 1048815), ("qefddi1mhwf", 1048814), ("qefddi1s", 1048807), ("qefddi1shwf", 1048806), ("qecddi2stp", 1048827), ("qecddi2stphwf", 1048826), ("qecddi1stp", 1048811), ("qecddi1stphwf", 1048810), ("qecddi2utp", 1048763), ("qecddi2utphwf", 1048762)) + NamedValues(("qecddi1utp", 1048747), ("qecddi1utphwf", 1048746), ("enet3atm", 1048832), ("enet3enet", 1048833), ("enet3fddi", 1048834), ("enet3tok", 1048835), ("enet3tokf", 1048836), ("enet3sync", 1048837), ("enet3only", 1048863), ("fddiatm", 1048864), ("fddienet", 1048865), ("fddifddi", 1048866), ("fdditok", 1048867), ("fdditokf", 1048868), ("fddisync", 1048869), ("fddionly", 1048895), ("tok3atm", 1048896), ("tok3enet", 1048897), ("tok3fddi", 1048898), ("tok3tok", 1048899), ("tok3tokf", 1048900), ("tok3sync", 1048901), ("tok3only", 1048927), ("tokf3atm", 1048928), ("tokf3enet", 1048929), ("tokf3fddi", 1048930), ("tokf3tok", 1048931), ("tokf3tokf", 1048932), ("tokf3sync", 1048933), ("tokf3only", 1048959), ("enet3datm", 1048960), ("enet3denet", 1048961), ("enet3dfddi", 1048962), ("enet3dtok", 1048963), ("enet3dtokf", 1048964), ("enet3dsync", 1048965), ("enet3donly", 1048991), ("chipcomfenet", 1049089), ("chipcomffddi", 1049090), ("chipcomftok", 1049091), ("chipcomftokf", 1049092), ("chipcomfdsync", 1049093), ("chipcomfisdn", 1049094), ("chipcomffddis", 1049095), ("chipcomfonly", 1049119), ("chipcomenet", 1049217), ("chipcomfddi", 1049218), ("chipcomtok", 1049219), ("chipcomtokf", 1049220), ("chipcomdsync", 1049221), ("chipcomisdn", 1049222), ("chipcomfddis", 1049223), ("chipcomonly", 1049247), ("fntsenet", 1049344), ("fntstok", 1049376)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModIdOpt.setStatus('mandatory')
wfHwModRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModRev.setStatus('mandatory')
wfHwModSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModSerialNumber.setStatus('mandatory')
wfHwMotherBdIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 16, 32, 36, 64, 256, 768, 769, 1024, 1025, 1280, 8704, 1536, 1792, 2561, 5632, 5633, 25088, 25344, 25600, 25856, 6656))).clone(namedValues=NamedValues(("sysctrl", 1), ("ace12", 2), ("ace25", 3), ("ace32", 4), ("afn", 5), ("in", 6), ("sysctrl2", 7), ("an", 16), ("arn", 32), ("lite", 36), ("fbr", 64), ("fre", 256), ("fre2", 768), ("o60", 769), ("asn", 1024), ("asn2", 1025), ("are", 1280), ("srmf", 8704), ("are5000", 1536), ("asn5000", 1792), ("sn060", 2561), ("fre2060epci", 5632), ("fre2060e", 5633), ("ssp", 25088), ("ifp", 25344), ("atp", 25600), ("cap", 25856), ("fre4", 6656)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdIdOpt.setStatus('mandatory')
wfHwMotherBdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdRev.setStatus('mandatory')
wfHwMotherBdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdSerialNumber.setStatus('mandatory')
wfHwDaughterBdIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 4352, 4608, 8752, 5888, 5889, 5890, 5891, 25345, 25857))).clone(namedValues=NamedValues(("sysctrl", 1), ("ace68020mhz12", 2), ("ace68020mhz25", 3), ("ace68030mhz32", 4), ("fre68040mhz25", 4352), ("fre68040mhz33", 4608), ("arnv34", 8752), ("hwcomp128pci", 5888), ("hwcomp128", 5889), ("hwcomp256pci", 5890), ("hwcomp256", 5891), ("ifprspdtr", 25345), ("cap3m13dtr", 25857)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDaughterBdIdOpt.setStatus('mandatory')
wfHwDaughterBdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDaughterBdRev.setStatus('mandatory')
wfHwDaughterBdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDaughterBdSerialNumber.setStatus('mandatory')
wfHwBabyBdIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBabyBdIdOpt.setStatus('mandatory')
wfHwBabyBdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBabyBdRev.setStatus('mandatory')
wfHwBabyBdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBabyBdSerialNumber.setStatus('mandatory')
wfHwDiagPromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDiagPromRev.setStatus('mandatory')
wfHwDiagPromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDiagPromDate.setStatus('mandatory')
wfHwDiagPromSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDiagPromSource.setStatus('mandatory')
wfHwBootPromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBootPromRev.setStatus('mandatory')
wfHwBootPromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBootPromDate.setStatus('mandatory')
wfHwBootPromSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBootPromSource.setStatus('mandatory')
wfHwSparePromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSparePromRev.setStatus('mandatory')
wfHwSparePromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSparePromDate.setStatus('mandatory')
wfHwSparePromSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSparePromSource.setStatus('mandatory')
wfHwFileSysPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filesys", 1), ("nofilesys", 2))).clone('nofilesys')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwFileSysPresent.setStatus('mandatory')
wfHwFileSysPresent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filesys", 1), ("nofilesys", 2))).clone('nofilesys')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwFileSysPresent2.setStatus('mandatory')
wfHwConfigServer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwConfigServer.setStatus('mandatory')
wfHwConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwConfigFile.setStatus('mandatory')
wfHwConfigDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwConfigDateAndTime.setStatus('mandatory')
wfHwActiveImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwActiveImageName.setStatus('mandatory')
wfHwActiveImageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwActiveImageSource.setStatus('mandatory')
wfHwActiveImageDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwActiveImageDate.setStatus('mandatory')
wfHwMotherBdMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdMemorySize.setStatus('mandatory')
wfHwFastPacketCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwFastPacketCacheSize.setStatus('mandatory')
wfHwModDaughterBd1IdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1IdOpt.setStatus('mandatory')
wfHwModDaughterBd1AwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1AwRev.setStatus('mandatory')
wfHwModDaughterBd1Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1Rev.setStatus('mandatory')
wfHwModDaughterBd1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1SerialNumber.setStatus('mandatory')
wfHwModDaughterBd2IdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2IdOpt.setStatus('mandatory')
wfHwModDaughterBd2AwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2AwRev.setStatus('mandatory')
wfHwModDaughterBd2Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2Rev.setStatus('mandatory')
wfHwModDaughterBd2SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2SerialNumber.setStatus('mandatory')
wfRASNPwrSupply1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRASNPwrSupply1.setStatus('mandatory')
wfRASNPwrSupply2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRASNPwrSupply2.setStatus('mandatory')
wfPowerSupply1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPowerSupply1.setStatus('mandatory')
wfPowerSupply2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPowerSupply2.setStatus('mandatory')
wfFanStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFanStatus1.setStatus('mandatory')
wfFanStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFanStatus2.setStatus('mandatory')
wfRASNRPSUPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2), ("notapplicable", 3))).clone('notapplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRASNRPSUPresent.setStatus('obsolete')
wfModDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 20))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("notrun", 3), ("notpresent", 4), ("notapplicable", 20))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModDiagStatus.setStatus('mandatory')
wfHwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 1, 7), )
if mibBuilder.loadTexts: wfHwCfgTable.setStatus('mandatory')
wfHwCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 1, 7, 1), ).setIndexNames((0, "Wellfleet-HARDWARE-MIB", "wfHwCfgSlot"))
if mibBuilder.loadTexts: wfHwCfgEntry.setStatus('mandatory')
wfHwCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCfgSlot.setStatus('mandatory')
wfRPSUPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2), ("notapplicable", 3))).clone('notapplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRPSUPresent.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-HARDWARE-MIB", wfBCNPwrSupply1=wfBCNPwrSupply1, wfHwFileSysPresent=wfHwFileSysPresent, wfHwModDaughterBd1Rev=wfHwModDaughterBd1Rev, wfHwDiagPromSource=wfHwDiagPromSource, wfHwFastPacketCacheSize=wfHwFastPacketCacheSize, wfHwTable=wfHwTable, wfBCNPwrSupply2=wfBCNPwrSupply2, wfModDiagStatus=wfModDiagStatus, wfHwDiagPromDate=wfHwDiagPromDate, wfHwBpIdOpt=wfHwBpIdOpt, wfHwEntry=wfHwEntry, wfHwSparePromRev=wfHwSparePromRev, wfFanStatus1=wfFanStatus1, wfBCNPwrSupply4=wfBCNPwrSupply4, wfHwCfgEntry=wfHwCfgEntry, wfHwBabyBdIdOpt=wfHwBabyBdIdOpt, wfHwModDaughterBd1AwRev=wfHwModDaughterBd1AwRev, wfHwModIdOpt=wfHwModIdOpt, wfHwModDaughterBd2IdOpt=wfHwModDaughterBd2IdOpt, wfHwBpSerialNumber=wfHwBpSerialNumber, wfHwSlot=wfHwSlot, wfHwActiveImageSource=wfHwActiveImageSource, wfHwBootPromDate=wfHwBootPromDate, wfHwConfigFile=wfHwConfigFile, wfHwActiveImageDate=wfHwActiveImageDate, wfHwBabyBdSerialNumber=wfHwBabyBdSerialNumber, wfBCNPwrSupply3=wfBCNPwrSupply3, wfHwConfigDateAndTime=wfHwConfigDateAndTime, wfHwModSerialNumber=wfHwModSerialNumber, wfHwMotherBdIdOpt=wfHwMotherBdIdOpt, wfBCNTemperature2=wfBCNTemperature2, wfHwSparePromSource=wfHwSparePromSource, wfHwModDaughterBd2Rev=wfHwModDaughterBd2Rev, wfRASNPwrSupply2=wfRASNPwrSupply2, wfHwModDaughterBd1IdOpt=wfHwModDaughterBd1IdOpt, wfFanStatus2=wfFanStatus2, wfHwDiagPromRev=wfHwDiagPromRev, wfHwCfgSlot=wfHwCfgSlot, wfHwBpRev=wfHwBpRev, wfHwMotherBdMemorySize=wfHwMotherBdMemorySize, wfHwFileSysPresent2=wfHwFileSysPresent2, wfHwModDaughterBd2AwRev=wfHwModDaughterBd2AwRev, wfBCNFanStatus=wfBCNFanStatus, wfHwModDaughterBd1SerialNumber=wfHwModDaughterBd1SerialNumber, wfRPSUPresent=wfRPSUPresent, wfHwModDaughterBd2SerialNumber=wfHwModDaughterBd2SerialNumber, wfHwDaughterBdIdOpt=wfHwDaughterBdIdOpt, wfBCNTemperature=wfBCNTemperature, wfPowerSupply1=wfPowerSupply1, wfRASNRPSUPresent=wfRASNRPSUPresent, wfHwDaughterBdSerialNumber=wfHwDaughterBdSerialNumber, wfHwActiveImageName=wfHwActiveImageName, wfFanSpeed=wfFanSpeed, wfHwBase=wfHwBase, wfPowerSupply2=wfPowerSupply2, wfHwBootPromRev=wfHwBootPromRev, wfHwMotherBdRev=wfHwMotherBdRev, wfHwDaughterBdRev=wfHwDaughterBdRev, wfHwBabyBdRev=wfHwBabyBdRev, wfRASNPwrSupply1=wfRASNPwrSupply1, wfHwConfigServer=wfHwConfigServer, wfHwCfgTable=wfHwCfgTable, wfHwModRev=wfHwModRev, wfHwSparePromDate=wfHwSparePromDate, wfHwMotherBdSerialNumber=wfHwMotherBdSerialNumber, wfHwBootPromSource=wfHwBootPromSource)
