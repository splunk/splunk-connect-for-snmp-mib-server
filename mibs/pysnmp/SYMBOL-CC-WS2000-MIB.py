#
# PySNMP MIB module SYMBOL-CC-WS2000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBOL-CC-WS2000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, ObjectIdentity, enterprises, Unsigned32, IpAddress, Counter32, Bits, Bits, Gauge32, Integer32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "ObjectIdentity", "enterprises", "Unsigned32", "IpAddress", "Counter32", "Bits", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "iso")
TextualConvention, TruthValue, DisplayString, PhysAddress, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "PhysAddress", "TestAndIncr")
moduleid = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 1))
moduleid.setRevisions(('2010-04-24 09:37', '2009-12-30 13:25', '2004-12-10 16:49', '2004-10-28 16:32', '2004-09-08 12:07', '2004-02-04 15:32', '2004-01-06 00:00', '2003-12-11 01:00', '2003-12-11 00:00', '2003-12-02 00:00', '2003-11-26 00:00', '2003-11-25 00:00',))
if mibBuilder.loadTexts: moduleid.setLastUpdated('201004242137Z')
if mibBuilder.loadTexts: moduleid.setOrganization('Symbol WSD (Wireless Infrastructure Division, San Jose)')
class SinglePointer(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class MultiPointer63(Bits):
    namedValues = NamedValues(("null", 0), ("referToEntry001", 1), ("referToEntry002", 2), ("referToEntry003", 3), ("referToEntry004", 4), ("referToEntry005", 5), ("referToEntry006", 6), ("referToEntry007", 7), ("referToEntry008", 8), ("referToEntry009", 9), ("referToEntry010", 10), ("referToEntry011", 11), ("referToEntry012", 12), ("referToEntry013", 13), ("referToEntry014", 14), ("referToEntry015", 15), ("referToEntry016", 16), ("referToEntry017", 17), ("referToEntry018", 18), ("referToEntry019", 19), ("referToEntry020", 20), ("referToEntry021", 21), ("referToEntry022", 22), ("referToEntry023", 23), ("referToEntry024", 24), ("referToEntry025", 25), ("referToEntry026", 26), ("referToEntry027", 27), ("referToEntry028", 28), ("referToEntry029", 29), ("referToEntry030", 30), ("referToEntry031", 31), ("referToEntry032", 32), ("referToEntry033", 33), ("referToEntry034", 34), ("referToEntry035", 35), ("referToEntry036", 36), ("referToEntry037", 37), ("referToEntry038", 38), ("referToEntry039", 39), ("referToEntry040", 40), ("referToEntry041", 41), ("referToEntry042", 42), ("referToEntry043", 43), ("referToEntry044", 44), ("referToEntry045", 45), ("referToEntry046", 46), ("referToEntry047", 47), ("referToEntry048", 48), ("referToEntry049", 49), ("referToEntry050", 50), ("referToEntry051", 51), ("referToEntry052", 52), ("referToEntry053", 53), ("referToEntry054", 54), ("referToEntry055", 55), ("referToEntry056", 56), ("referToEntry057", 57), ("referToEntry058", 58), ("referToEntry059", 59), ("referToEntry060", 60), ("referToEntry061", 61), ("referToEntry062", 62), ("referToEntry063", 63))

class MultiPointer255(Bits):
    namedValues = NamedValues(("null", 0), ("referToEntry001", 1), ("referToEntry002", 2), ("referToEntry003", 3), ("referToEntry004", 4), ("referToEntry005", 5), ("referToEntry006", 6), ("referToEntry007", 7), ("referToEntry008", 8), ("referToEntry009", 9), ("referToEntry010", 10), ("referToEntry011", 11), ("referToEntry012", 12), ("referToEntry013", 13), ("referToEntry014", 14), ("referToEntry015", 15), ("referToEntry016", 16), ("referToEntry017", 17), ("referToEntry018", 18), ("referToEntry019", 19), ("referToEntry020", 20), ("referToEntry021", 21), ("referToEntry022", 22), ("referToEntry023", 23), ("referToEntry024", 24), ("referToEntry025", 25), ("referToEntry026", 26), ("referToEntry027", 27), ("referToEntry028", 28), ("referToEntry029", 29), ("referToEntry030", 30), ("referToEntry031", 31), ("referToEntry032", 32), ("referToEntry033", 33), ("referToEntry034", 34), ("referToEntry035", 35), ("referToEntry036", 36), ("referToEntry037", 37), ("referToEntry038", 38), ("referToEntry039", 39), ("referToEntry040", 40), ("referToEntry041", 41), ("referToEntry042", 42), ("referToEntry043", 43), ("referToEntry044", 44), ("referToEntry045", 45), ("referToEntry046", 46), ("referToEntry047", 47), ("referToEntry048", 48), ("referToEntry049", 49), ("referToEntry050", 50), ("referToEntry051", 51), ("referToEntry052", 52), ("referToEntry053", 53), ("referToEntry054", 54), ("referToEntry055", 55), ("referToEntry056", 56), ("referToEntry057", 57), ("referToEntry058", 58), ("referToEntry059", 59), ("referToEntry060", 60), ("referToEntry061", 61), ("referToEntry062", 62), ("referToEntry063", 63), ("referToEntry064", 64), ("referToEntry065", 65), ("referToEntry066", 66), ("referToEntry067", 67), ("referToEntry068", 68), ("referToEntry069", 69), ("referToEntry070", 70), ("referToEntry071", 71), ("referToEntry072", 72), ("referToEntry073", 73), ("referToEntry074", 74), ("referToEntry075", 75), ("referToEntry076", 76), ("referToEntry077", 77), ("referToEntry078", 78), ("referToEntry079", 79), ("referToEntry080", 80), ("referToEntry081", 81), ("referToEntry082", 82), ("referToEntry083", 83), ("referToEntry084", 84), ("referToEntry085", 85), ("referToEntry086", 86), ("referToEntry087", 87), ("referToEntry088", 88), ("referToEntry089", 89), ("referToEntry090", 90), ("referToEntry091", 91), ("referToEntry092", 92), ("referToEntry093", 93), ("referToEntry094", 94), ("referToEntry095", 95), ("referToEntry096", 96), ("referToEntry097", 97), ("referToEntry098", 98), ("referToEntry099", 99), ("referToEntry100", 100), ("referToEntry101", 101), ("referToEntry102", 102), ("referToEntry103", 103), ("referToEntry104", 104), ("referToEntry105", 105), ("referToEntry106", 106), ("referToEntry107", 107), ("referToEntry108", 108), ("referToEntry109", 109), ("referToEntry110", 110), ("referToEntry111", 111), ("referToEntry112", 112), ("referToEntry113", 113), ("referToEntry114", 114), ("referToEntry115", 115), ("referToEntry116", 116), ("referToEntry117", 117), ("referToEntry118", 118), ("referToEntry119", 119), ("referToEntry120", 120), ("referToEntry121", 121), ("referToEntry122", 122), ("referToEntry123", 123), ("referToEntry124", 124), ("referToEntry125", 125), ("referToEntry126", 126), ("referToEntry127", 127), ("referToEntry128", 128), ("referToEntry129", 129), ("referToEntry130", 130), ("referToEntry131", 131), ("referToEntry132", 132), ("referToEntry133", 133), ("referToEntry134", 134), ("referToEntry135", 135), ("referToEntry136", 136), ("referToEntry137", 137), ("referToEntry138", 138), ("referToEntry139", 139), ("referToEntry140", 140), ("referToEntry141", 141), ("referToEntry142", 142), ("referToEntry143", 143), ("referToEntry144", 144), ("referToEntry145", 145), ("referToEntry146", 146), ("referToEntry147", 147), ("referToEntry148", 148), ("referToEntry149", 149), ("referToEntry150", 150), ("referToEntry151", 151), ("referToEntry152", 152), ("referToEntry153", 153), ("referToEntry154", 154), ("referToEntry155", 155), ("referToEntry156", 156), ("referToEntry157", 157), ("referToEntry158", 158), ("referToEntry159", 159), ("referToEntry160", 160), ("referToEntry161", 161), ("referToEntry162", 162), ("referToEntry163", 163), ("referToEntry164", 164), ("referToEntry165", 165), ("referToEntry166", 166), ("referToEntry167", 167), ("referToEntry168", 168), ("referToEntry169", 169), ("referToEntry170", 170), ("referToEntry171", 171), ("referToEntry172", 172), ("referToEntry173", 173), ("referToEntry174", 174), ("referToEntry175", 175), ("referToEntry176", 176), ("referToEntry177", 177), ("referToEntry178", 178), ("referToEntry179", 179), ("referToEntry180", 180), ("referToEntry181", 181), ("referToEntry182", 182), ("referToEntry183", 183), ("referToEntry184", 184), ("referToEntry185", 185), ("referToEntry186", 186), ("referToEntry187", 187), ("referToEntry188", 188), ("referToEntry189", 189), ("referToEntry190", 190), ("referToEntry191", 191), ("referToEntry192", 192), ("referToEntry193", 193), ("referToEntry194", 194), ("referToEntry195", 195), ("referToEntry196", 196), ("referToEntry197", 197), ("referToEntry198", 198), ("referToEntry199", 199), ("referToEntry200", 200), ("referToEntry201", 201), ("referToEntry202", 202), ("referToEntry203", 203), ("referToEntry204", 204), ("referToEntry205", 205), ("referToEntry206", 206), ("referToEntry207", 207), ("referToEntry208", 208), ("referToEntry209", 209), ("referToEntry210", 210), ("referToEntry211", 211), ("referToEntry212", 212), ("referToEntry213", 213), ("referToEntry214", 214), ("referToEntry215", 215), ("referToEntry216", 216), ("referToEntry217", 217), ("referToEntry218", 218), ("referToEntry219", 219), ("referToEntry220", 220), ("referToEntry221", 221), ("referToEntry222", 222), ("referToEntry223", 223), ("referToEntry224", 224), ("referToEntry225", 225), ("referToEntry226", 226), ("referToEntry227", 227), ("referToEntry228", 228), ("referToEntry229", 229), ("referToEntry230", 230), ("referToEntry231", 231), ("referToEntry232", 232), ("referToEntry233", 233), ("referToEntry234", 234), ("referToEntry235", 235), ("referToEntry236", 236), ("referToEntry237", 237), ("referToEntry238", 238), ("referToEntry239", 239), ("referToEntry240", 240), ("referToEntry241", 241), ("referToEntry242", 242), ("referToEntry243", 243), ("referToEntry244", 244), ("referToEntry245", 245), ("referToEntry246", 246), ("referToEntry247", 247), ("referToEntry248", 248), ("referToEntry249", 249), ("referToEntry250", 250), ("referToEntry251", 251), ("referToEntry252", 252), ("referToEntry253", 253), ("referToEntry254", 254)) + NamedValues(("referToEntry255", 255))

class DoActionNow(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("doActionRightNow", 1), ("idleState", 2))

class RadioType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("radio802dot11A", 1), ("radio802dot11B", 2), ("radio802dot11G", 3), ("radio802dot11FH", 4))

class Password(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class StaticRowEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class PartsPer10k(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class ScaleBy100(Unsigned32):
    pass

class AbbrevRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 6))
    namedValues = NamedValues(("createAndGo", 4), ("destroy", 6))

class DoActionShowProgress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("doActionRightNow", 1), ("idleState", 2))

class HexPassword(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class TransmitRate(Bits):
    namedValues = NamedValues(("null", 0), ("rate1Mb", 1), ("rate2Mb", 2), ("rate5pt5Mb", 3), ("rate6Mb", 4), ("rate9Mb", 5), ("rate11Mb", 6), ("rate12Mb", 7), ("rate18Mb", 8), ("rate22Mb", 9), ("rate24Mb", 10), ("rate36Mb", 11), ("rate48Mb", 12), ("rate54Mb", 13))

class RowStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class DateAndTime(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

symbol = MibIdentifier((1, 3, 6, 1, 4, 1, 388))
wsd = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11))
sysoids = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 1))
ws2000 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 1))
if mibBuilder.loadTexts: ws2000.setStatus('current')
ws2k = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2))
ccAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2))
ccInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1))
ccInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInfoSerialNumber.setStatus('current')
ccInfoCountrySelection = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccInfoCountrySelection.setStatus('current')
ccIdentfication = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3))
ccIdHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIdHwVersion.setStatus('current')
ccIdFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIdFwVersion.setStatus('current')
ccIdSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIdSwVersion.setStatus('current')
ccIdMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIdMibVersion.setStatus('current')
ccIdCliVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIdCliVersion.setStatus('current')
ccIdXmlVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIdXmlVersion.setStatus('current')
ccIdSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIdSerialNumber.setStatus('current')
ccSysDNSRelayMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSysDNSRelayMode.setStatus('current')
ccApSslv2Mode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccApSslv2Mode.setStatus('current')
ccApSshv1Mode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccApSshv1Mode.setStatus('current')
ccApSslWeakCipherSupport = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccApSslWeakCipherSupport.setStatus('current')
ccReset = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 2))
ccResetFactory = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccResetFactory.setStatus('current')
ccResetSwitch = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccResetSwitch.setStatus('current')
ccResetMuCounters = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccResetMuCounters.setStatus('obsolete')
ccResetFactoryExceptIpSnmp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 2, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccResetFactoryExceptIpSnmp.setStatus('current')
ccResetStatCounters = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccResetStatCounters.setStatus('current')
ccLoadFw = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3))
ccLoadFwOperation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspecified", 1), ("ftpFirmwareServerToSwitch", 2), ("tftpFirmwareServerToSwitch", 3), ("cfFirmwareToSwitch", 4), ("sftpFirmwareServerToSwitch", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadFwOperation.setStatus('current')
ccLoadFwInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unspecified", 1), ("wan", 2), ("subnet1", 11), ("subnet2", 12), ("subnet3", 13), ("subnet4", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadFwInterface.setStatus('current')
ccLoadFwServerPath = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadFwServerPath.setStatus('current')
ccLoadFwServerFilename = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadFwServerFilename.setStatus('current')
ccLoadFwStart = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadFwStart.setStatus('current')
ccLoadFwResult = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLoadFwResult.setStatus('current')
ccLoadFwSuccess = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 3, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLoadFwSuccess.setStatus('current')
ccLoadCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4))
ccLoadCfgOperation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unspecified", 1), ("ftpConfigServerToSwitch", 2), ("ftpConfigSwitchToServer", 3), ("tftpConfigServerToSwitch", 4), ("tftpConfigSwitchToServer", 5), ("sftpConfigServerToSwitch", 6), ("sftpConfigSwitchToServer", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadCfgOperation.setStatus('current')
ccLoadCfgServerPath = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadCfgServerPath.setStatus('current')
ccLoadCfgServerFilename = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadCfgServerFilename.setStatus('current')
ccLoadCfgStart = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadCfgStart.setStatus('current')
ccLoadCfgOperationsDone = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLoadCfgOperationsDone.setStatus('current')
ccLoadCfgResult = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLoadCfgResult.setStatus('current')
ccLoadCfgSuccess = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 4, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLoadCfgSuccess.setStatus('current')
ccCfgHist = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 5))
ccCfgHistChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 5, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCfgHistChangeCount.setStatus('current')
ccCfgHistChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 5, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCfgHistChangeTime.setStatus('current')
ccCfgHistSemaphore = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 5, 3), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCfgHistSemaphore.setStatus('current')
ccLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 6))
ccLoadServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadServerIpAddr.setStatus('current')
ccLoadFtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadFtpUsername.setStatus('current')
ccLoadFtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoadFtpPassword.setStatus('current')
ccSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7))
ccSnmpAclViolations = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSnmpAclViolations.setStatus('current')
ccSnmpLastDeniedIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSnmpLastDeniedIpAddr.setStatus('current')
ccSnmpV3EngineId = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSnmpV3EngineId.setStatus('current')
ccSnmpAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4))
ccSnmpAccessV12Table = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1), )
if mibBuilder.loadTexts: ccSnmpAccessV12Table.setStatus('current')
ccSnmpAccessV12Entry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV12Index"))
if mibBuilder.loadTexts: ccSnmpAccessV12Entry.setStatus('current')
ccSnmpAccessV12Index = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSnmpAccessV12Index.setStatus('current')
ccSnmpAccessV12Community = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV12Community.setStatus('current')
ccSnmpAccessV12CustomOid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV12CustomOid.setStatus('current')
ccSnmpAccessV12OidLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("custom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV12OidLimit.setStatus('current')
ccSnmpAccessV12Access = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV12Access.setStatus('current')
ccSnmpAccessV12Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 1, 1, 6), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV12Enable.setStatus('current')
ccSnmpAccessV3Table = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2), )
if mibBuilder.loadTexts: ccSnmpAccessV3Table.setStatus('current')
ccSnmpAccessV3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3Index"))
if mibBuilder.loadTexts: ccSnmpAccessV3Entry.setStatus('current')
ccSnmpAccessV3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSnmpAccessV3Index.setStatus('current')
ccSnmpAccessV3User = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3User.setStatus('current')
ccSnmpAccessV3SecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuth", 1), ("authNoPriv", 2), ("authPriv", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3SecurityLevel.setStatus('current')
ccSnmpAccessV3CustomOid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3CustomOid.setStatus('current')
ccSnmpAccessV3OidLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("custom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3OidLimit.setStatus('current')
ccSnmpAccessV3Access = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3Access.setStatus('current')
ccSnmpAccessV3AuthAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3AuthAlgorithm.setStatus('current')
ccSnmpAccessV3AuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 8), Password().subtype(subtypeSpec=ValueSizeConstraint(8, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3AuthPassword.setStatus('current')
ccSnmpAccessV3PrivacyAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("des", 1), ("aes128", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3PrivacyAlgorithm.setStatus('current')
ccSnmpAccessV3PrivacyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 10), Password().subtype(subtypeSpec=ValueSizeConstraint(8, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3PrivacyPassword.setStatus('current')
ccSnmpAccessV3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 2, 1, 11), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessV3Enable.setStatus('current')
ccSnmpAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 3), )
if mibBuilder.loadTexts: ccSnmpAccessControlTable.setStatus('current')
ccSnmpAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSnmpAccessControlIndex"))
if mibBuilder.loadTexts: ccSnmpAccessControlEntry.setStatus('current')
ccSnmpAccessControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSnmpAccessControlIndex.setStatus('current')
ccSnmpAccessControlStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessControlStartIp.setStatus('current')
ccSnmpAccessControlEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessControlEndIp.setStatus('current')
ccSnmpAccessControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 4, 3, 1, 4), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpAccessControlEnable.setStatus('current')
ccSnmpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5))
ccSnmpTrapSinkV12Table = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1), )
if mibBuilder.loadTexts: ccSnmpTrapSinkV12Table.setStatus('current')
ccSnmpTrapSinkV12Entry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV12Index"))
if mibBuilder.loadTexts: ccSnmpTrapSinkV12Entry.setStatus('current')
ccSnmpTrapSinkV12Index = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSnmpTrapSinkV12Index.setStatus('current')
ccSnmpTrapSinkV12DestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV12DestinationIp.setStatus('current')
ccSnmpTrapSinkV12Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV12Port.setStatus('current')
ccSnmpTrapSinkV12Community = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV12Community.setStatus('current')
ccSnmpTrapSinkV12Version = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpV1", 1), ("snmpV2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV12Version.setStatus('current')
ccSnmpTrapSinkV12Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 1, 1, 6), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV12Enable.setStatus('current')
ccSnmpTrapSinkV3Table = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2), )
if mibBuilder.loadTexts: ccSnmpTrapSinkV3Table.setStatus('current')
ccSnmpTrapSinkV3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3Index"))
if mibBuilder.loadTexts: ccSnmpTrapSinkV3Entry.setStatus('current')
ccSnmpTrapSinkV3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3Index.setStatus('current')
ccSnmpTrapSinkV3DestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3DestinationIp.setStatus('current')
ccSnmpTrapSinkV3Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3Port.setStatus('current')
ccSnmpTrapSinkV3Username = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3Username.setStatus('current')
ccSnmpTrapSinkV3SecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auth", 1), ("authNoPriv", 2), ("authPriv", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3SecurityLevel.setStatus('current')
ccSnmpTrapSinkV3AuthAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3AuthAlgorithm.setStatus('current')
ccSnmpTrapSinkV3AuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 7), Password().subtype(subtypeSpec=ValueSizeConstraint(8, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3AuthPassword.setStatus('current')
ccSnmpTrapSinkV3PrivacyAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("des", 1), ("aes128", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3PrivacyAlgorithm.setStatus('current')
ccSnmpTrapSinkV3PrivacyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 9), Password().subtype(subtypeSpec=ValueSizeConstraint(8, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3PrivacyPassword.setStatus('current')
ccSnmpTrapSinkV3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 7, 5, 2, 1, 10), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSnmpTrapSinkV3Enable.setStatus('current')
ccCompactFlash = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 8))
ccCompactFlashCapacity = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCompactFlashCapacity.setStatus('current')
ccCompactFlashUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCompactFlashUsed.setStatus('current')
ccSumStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 9))
ccSumStatsShortWindow = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 9, 1), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSumStatsShortWindow.setStatus('current')
ccSumStatsShortUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 9, 2), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSumStatsShortUpdateInterval.setStatus('current')
ccSumStatsLongWindow = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 9, 3), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSumStatsLongWindow.setStatus('current')
ccSumStatsLongUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 9, 4), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSumStatsLongUpdateInterval.setStatus('current')
ccMgmtAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10))
ccMgmtAccessToAllow = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 1), Bits().clone(namedValues=NamedValues(("fromLanAppletHttp", 0), ("fromLanAppletHttps", 1), ("fromLanCliTelnet", 2), ("fromLanSsh", 3), ("fromLanSnmp", 4), ("fromWanAppletHttp", 5), ("fromWanAppletHttps", 6), ("fromWanCliTelnet", 7), ("fromWanSsh", 8), ("fromWanSnmp", 9), ("fromWanFtp", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessToAllow.setStatus('current')
ccMgmtAccessAirbeam = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 2))
ccMgmtAccessAirbeamAllow = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessAirbeamAllow.setStatus('current')
ccMgmtAccessAirbeamPassword = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 2, 2), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessAirbeamPassword.setStatus('current')
ccMgmtAccessAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 3))
ccMgmtAccessAdminAuth = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessAdminAuth.setStatus('current')
ccMgmtAccessAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 3, 2), Password().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessAdminPassword.setStatus('current')
ccMgmtAccessAdminAuthRadiusServerIp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessAdminAuthRadiusServerIp.setStatus('current')
ccMgmtAccessAdminAuthRadiusServerPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessAdminAuthRadiusServerPort.setStatus('current')
ccMgmtAccessAdminAuthRadiusSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 3, 6), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessAdminAuthRadiusSharedSecret.setStatus('current')
ccMgmtAccessSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 4))
ccMgmtAccessSshAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 4, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessSshAuthTimeout.setStatus('current')
ccMgmtAccessSshInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessSshInactivityTimeout.setStatus('current')
ccMgmtAccessHttpsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 10, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMgmtAccessHttpsTimeout.setStatus('current')
ccLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 11))
ccLoggingLevel = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0Emergency", 0), ("level1Alert", 1), ("level2Critical", 2), ("level3Errors", 3), ("level4Warnings", 4), ("level5Notice", 5), ("level6Info", 6), ("level7Debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoggingLevel.setStatus('current')
ccLoggingToSyslog = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 11, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoggingToSyslog.setStatus('current')
ccLoggingSyslogServer = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoggingSyslogServer.setStatus('current')
ccLoggingDeleteCoreFile = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 11, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoggingDeleteCoreFile.setStatus('current')
ccLoggingTransferCoreFile = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 11, 5), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLoggingTransferCoreFile.setStatus('current')
ccNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12))
ccNtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtpEnable.setStatus('current')
ccNtp0Server = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtp0Server.setStatus('current')
ccNtp0Port = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtp0Port.setStatus('current')
ccNtp1Server = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtp1Server.setStatus('current')
ccNtp1Port = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtp1Port.setStatus('current')
ccNtp2Server = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtp2Server.setStatus('current')
ccNtp2Port = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtp2Port.setStatus('current')
ccNtpGmtHourOffset = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccNtpGmtHourOffset.setStatus('current')
ccNtpGmtMinuteOffset = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccNtpGmtMinuteOffset.setStatus('current')
ccNtpCurrentDateTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccNtpCurrentDateTime.setStatus('current')
ccNtpSyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 12, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNtpSyncInterval.setStatus('current')
ccDhcpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 14))
ccDhcpOptionsUpdateFwEna = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 14, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDhcpOptionsUpdateFwEna.setStatus('current')
ccDhcpOptionsUpdateCfgEna = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 14, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDhcpOptionsUpdateCfgEna.setStatus('current')
ccDhcpOptionsUpdateInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wan", 1), ("subnet1", 2), ("subnet2", 3), ("subnet3", 4), ("subnet4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDhcpOptionsUpdateInterface.setStatus('current')
ccDhcpOptionsUpdateFwFilename = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 14, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDhcpOptionsUpdateFwFilename.setStatus('current')
ccDhcpOptionsUpdateCfgFilename = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 14, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDhcpOptionsUpdateCfgFilename.setStatus('current')
ccRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 15))
ccRedundancyAdminState = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("standby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRedundancyAdminState.setStatus('current')
ccRedundancyOperState = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redundancy", 1), ("upgrade", 2), ("standAlone", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRedundancyOperState.setStatus('current')
ccRedundancyHeartbeatInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("port5", 5), ("port6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRedundancyHeartbeatInterface.setStatus('current')
ccRedundancyHeartbeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 15, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRedundancyHeartbeatInterval.setStatus('current')
ccRedundancyRevertDelay = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 15, 5), Unsigned32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRedundancyRevertDelay.setStatus('current')
ccRedundancyOperMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 15, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRedundancyOperMode.setStatus('current')
ccCertMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16))
ccCertMgntSelfCerts = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1))
ccCertMgntSelfCertsReqTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1), )
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqTable.setStatus('current')
ccCertMgntSelfCertsReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqIndex"))
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqEntry.setStatus('current')
ccCertMgntSelfCertsReqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqIndex.setStatus('current')
ccCertMgntSelfCertsReqKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqKeyId.setStatus('current')
ccCertMgntSelfCertsReqSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqSubject.setStatus('current')
ccCertMgntSelfCertsReqDept = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqDept.setStatus('current')
ccCertMgntSelfCertsReqOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqOrg.setStatus('current')
ccCertMgntSelfCertsReqCity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqCity.setStatus('current')
ccCertMgntSelfCertsReqState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqState.setStatus('current')
ccCertMgntSelfCertsReqPostal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqPostal.setStatus('current')
ccCertMgntSelfCertsReqCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqCountry.setStatus('current')
ccCertMgntSelfCertsReqEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqEmail.setStatus('current')
ccCertMgntSelfCertsReqDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqDomain.setStatus('current')
ccCertMgntSelfCertsReqIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqIp.setStatus('current')
ccCertMgntSelfCertsReqSigAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cryptoMd5Rsa", 1), ("cryptoSha1Rsa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqSigAlgo.setStatus('current')
ccCertMgntSelfCertsReqKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keylen512", 1), ("keylen1024", 2), ("keylen2048", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqKeyLen.setStatus('current')
ccCertMgntSelfCertsReqGenReq = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 15), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqGenReq.setStatus('current')
ccCertMgntSelfCertsReqCertReqStr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqCertReqStr.setStatus('current')
ccCertMgntSelfCertsReqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 1, 1, 17), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsReqRowStatus.setStatus('current')
ccCertMgntSelfCertsIdName = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsIdName.setStatus('current')
ccCertMgntSelfCertsSignedStr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedStr.setStatus('current')
ccCertMgntSelfCertsSignedImport = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 4), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedImport.setStatus('current')
ccCertMgntSelfCertsSignedTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5), )
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedTable.setStatus('current')
ccCertMgntSelfCertsSignedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedIndex"))
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedEntry.setStatus('current')
ccCertMgntSelfCertsSignedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedIndex.setStatus('current')
ccCertMgntSelfCertsSignedKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedKeyId.setStatus('current')
ccCertMgntSelfCertsSignedIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedIssuerName.setStatus('current')
ccCertMgntSelfCertsSignedSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedSubject.setStatus('current')
ccCertMgntSelfCertsSignedSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedSerialNumber.setStatus('current')
ccCertMgntSelfCertsSignedExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedExpiry.setStatus('current')
ccCertMgntSelfCertsSignedDeleteRow = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCertMgntSelfCertsSignedDeleteRow.setStatus('current')
ccCACerts = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2))
ccCACertsStr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCACertsStr.setStatus('current')
ccCACertsImport = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 2), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCACertsImport.setStatus('current')
ccCACertsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3), )
if mibBuilder.loadTexts: ccCACertsTable.setStatus('current')
ccCACertsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccCACertsIndex"))
if mibBuilder.loadTexts: ccCACertsEntry.setStatus('current')
ccCACertsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccCACertsIndex.setStatus('current')
ccCACertsKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCACertsKeyId.setStatus('current')
ccCACertsIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCACertsIssuerName.setStatus('current')
ccCACertsSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCACertsSubject.setStatus('current')
ccCACertsSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCACertsSerialNumber.setStatus('current')
ccCACertsExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCACertsExpiry.setStatus('current')
ccCACertsDeleteRow = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 2, 16, 2, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCACertsDeleteRow.setStatus('current')
ccNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3))
ccPortalAdopted = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortalLastMac"))
if mibBuilder.loadTexts: ccPortalAdopted.setStatus('current')
ccPortalUnAdopted = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 2)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortalLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastReason"))
if mibBuilder.loadTexts: ccPortalUnAdopted.setStatus('current')
ccPortalDenied = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 3)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortalLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastReason"))
if mibBuilder.loadTexts: ccPortalDenied.setStatus('current')
ccMuAssociated = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 4)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccMuLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastPortal"))
if mibBuilder.loadTexts: ccMuAssociated.setStatus('current')
ccMuUnAssociated = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 5)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccMuLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastPortal"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastReason"))
if mibBuilder.loadTexts: ccMuUnAssociated.setStatus('current')
ccMuDenied = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 6)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccMuLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastPortal"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastReason"))
if mibBuilder.loadTexts: ccMuDenied.setStatus('current')
ccConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 7)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeTime"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeCount"))
if mibBuilder.loadTexts: ccConfigChange.setStatus('current')
ccSnmpAclViolation = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 8)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccSnmpLastDeniedIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAclViolations"))
if mibBuilder.loadTexts: ccSnmpAclViolation.setStatus('current')
ccPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 9)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortStatus"))
if mibBuilder.loadTexts: ccPortStatusChange.setStatus('current')
ccCfAlmostFull = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 10)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccCompactFlashCapacity"), ("SYMBOL-CC-WS2000-MIB", "ccCompactFlashUsed"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlCfAlmostFullThreshold"))
if mibBuilder.loadTexts: ccCfAlmostFull.setStatus('current')
ccFirewallUnderAttack = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 11)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlFirewallUnderAttackDescription"))
if mibBuilder.loadTexts: ccFirewallUnderAttack.setStatus('current')
ccRadarDetected = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 12)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRadarDetectedPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRadarDetectedChannel"))
if mibBuilder.loadTexts: ccRadarDetected.setStatus('current')
ccSumStatsMu = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 13)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsDescr"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdMu"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsUnits"), ("SYMBOL-CC-WS2000-MIB", "ccMuMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuIpAddr"))
if mibBuilder.loadTexts: ccSumStatsMu.setStatus('current')
ccSumStatsPortal = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 14)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsIndex"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdPortals"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsUnits"), ("SYMBOL-CC-WS2000-MIB", "ccPortalIndex"), ("SYMBOL-CC-WS2000-MIB", "ccPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalName"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLocation"))
if mibBuilder.loadTexts: ccSumStatsPortal.setStatus('current')
ccSumStatsWlan = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 15)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsDescr"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdWlans"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsUnits"), ("SYMBOL-CC-WS2000-MIB", "ccWlanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWlanName"), ("SYMBOL-CC-WS2000-MIB", "ccWlanEssid"))
if mibBuilder.loadTexts: ccSumStatsWlan.setStatus('current')
ccSumStatsSwitch = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 16)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsDescr"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsUnits"))
if mibBuilder.loadTexts: ccSumStatsSwitch.setStatus('current')
ccLanVlanActivated = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 17)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlLanVlanActivatedVlanId"))
if mibBuilder.loadTexts: ccLanVlanActivated.setStatus('current')
ccDhcpOptionsFileTransferStatus = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 18)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlDhcpOptionsFileTransferStatusRequested"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwResult"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgResult"))
if mibBuilder.loadTexts: ccDhcpOptionsFileTransferStatus.setStatus('current')
ccRedundancyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 19)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccRedundancyOperState"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRedundancyPreviousOperState"))
if mibBuilder.loadTexts: ccRedundancyStateChange.setStatus('current')
ccTrapCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000))
ccTrapCtrlEnableTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 1), )
if mibBuilder.loadTexts: ccTrapCtrlEnableTable.setStatus('current')
ccTrapCtrlEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccTrapCtrlEnableIndex"))
if mibBuilder.loadTexts: ccTrapCtrlEnableEntry.setStatus('current')
ccTrapCtrlEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("trapCtrlPortalAdopted", 1), ("trapCtrlPortalUnAdopted", 2), ("trapCtrlPortalDeniedAdoption", 3), ("trapCtrlMuAssociated", 4), ("trapCtrlMuUnAssociated", 5), ("trapCtrlMuDeniedAssociation", 6), ("trapCtrlSnmpAuthFailure", 7), ("trapCtrlSnmpAclViolation", 8), ("trapCtrlSnmpColdStart", 9), ("trapCtrlSnmpConfigChanged", 10), ("trapCtrlCfAlmostFull", 11), ("trapCtrlPortStatusChange", 12), ("trapCtrlDenialofService", 13), ("trapCtrlMuAuthDenied", 14), ("trapCtrlRadarDetected", 15), ("trapCtrlRogueApDetected", 16)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlEnableIndex.setStatus('current')
ccTrapCtrlEnableName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTrapCtrlEnableName.setStatus('current')
ccTrapCtrlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlEnable.setStatus('current')
ccTrapCtrlDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2))
ccTrapCtrlPortalAdopted = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 1))
if mibBuilder.loadTexts: ccTrapCtrlPortalAdopted.setStatus('current')
ccTrapCtrlPortalUnAdopted = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 2))
if mibBuilder.loadTexts: ccTrapCtrlPortalUnAdopted.setStatus('current')
ccTrapCtrlPortalDenied = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 3))
if mibBuilder.loadTexts: ccTrapCtrlPortalDenied.setStatus('current')
ccTrapCtrlMuAssociated = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 4))
if mibBuilder.loadTexts: ccTrapCtrlMuAssociated.setStatus('current')
ccTrapCtrlMuUnAssociated = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 5))
if mibBuilder.loadTexts: ccTrapCtrlMuUnAssociated.setStatus('current')
ccTrapCtrlMuDenied = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 6))
if mibBuilder.loadTexts: ccTrapCtrlMuDenied.setStatus('current')
ccTrapCtrlConfigChange = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 7))
if mibBuilder.loadTexts: ccTrapCtrlConfigChange.setStatus('current')
ccTrapCtrlSnmpAclViolation = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 8))
if mibBuilder.loadTexts: ccTrapCtrlSnmpAclViolation.setStatus('current')
ccTrapCtrlPortStatusChange = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 9))
if mibBuilder.loadTexts: ccTrapCtrlPortStatusChange.setStatus('current')
ccTrapCtrlCfAlmostFull = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 10))
ccTrapCtrlCfAlmostFullThreshold = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 10, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlCfAlmostFullThreshold.setStatus('current')
ccTrapCtrlFirewallUnderAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 11))
ccTrapCtrlFirewallUnderAttackDescription = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlFirewallUnderAttackDescription.setStatus('current')
ccTrapCtrlFirewallUnderAttackRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 11, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlFirewallUnderAttackRateLimit.setStatus('current')
ccTrapCtrlRadarDetected = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 12))
ccTrapCtrlRadarDetectedPortalMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 12, 1), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlRadarDetectedPortalMac.setStatus('current')
ccTrapCtrlRadarDetectedChannel = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 12, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlRadarDetectedChannel.setStatus('current')
ccTrapCtrlSumStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13))
ccTrapCtrlSumStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1), )
if mibBuilder.loadTexts: ccTrapCtrlSumStatsTable.setStatus('current')
ccTrapCtrlSumStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsIndex"))
if mibBuilder.loadTexts: ccTrapCtrlSumStatsEntry.setStatus('current')
ccTrapCtrlSumStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("unusedTimestamp", 1), ("unusedNumPkts", 2), ("thresholdsPktsPerSec", 3), ("unusedPktsPerSecTx", 4), ("unusedPktsPerSecRx", 5), ("thresholdsThroughput", 6), ("unusedThroughputTx", 7), ("unusedThroughputRx", 8), ("thresholdsAvgBitSpeed", 9), ("thresholdsAvgMuSignal", 10), ("thresholdsAvgMuNoise", 11), ("thresholdsAvgMuSnr", 12), ("thresholdsPctNUcastPkts", 13), ("thresholdsPpmTxWithRetires", 14), ("thresholdsPpmTxDropped", 15), ("thresholdsTxAvgRetries", 16), ("thresholdsPpmRxUndecrypt", 17), ("thresholdsTotalMus", 18), ("thresholdsPctRfUtil", 19), ("thresholdsPctDropped", 20)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsIndex.setStatus('current')
ccTrapCtrlSumStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsDescr.setStatus('current')
ccTrapCtrlSumStatsUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsUnits.setStatus('current')
ccTrapCtrlSumStatsCanBeSetMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsCanBeSetMu.setStatus('current')
ccTrapCtrlSumStatsThresholdMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsThresholdMu.setStatus('current')
ccTrapCtrlSumStatsCanBeSetPortal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsCanBeSetPortal.setStatus('current')
ccTrapCtrlSumStatsThresholdPortals = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsThresholdPortals.setStatus('current')
ccTrapCtrlSumStatsCanBeSetWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsCanBeSetWlan.setStatus('current')
ccTrapCtrlSumStatsThresholdWlans = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsThresholdWlans.setStatus('current')
ccTrapCtrlSumStatsCanBeSetSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsCanBeSetSwitch.setStatus('current')
ccTrapCtrlSumStatsThresholdSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsThresholdSwitch.setStatus('current')
ccTrapCtrlSumStatsMinPktsForTrap = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 13, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTrapCtrlSumStatsMinPktsForTrap.setStatus('current')
ccTrapCtrlSumStatsPortal = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 14))
if mibBuilder.loadTexts: ccTrapCtrlSumStatsPortal.setStatus('current')
ccTrapCtrlSumStatsWlan = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 15))
if mibBuilder.loadTexts: ccTrapCtrlSumStatsWlan.setStatus('current')
ccTrapCtrlSumStatsSwitch = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 16))
if mibBuilder.loadTexts: ccTrapCtrlSumStatsSwitch.setStatus('current')
ccTrapCtrlLanVlanActivated = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 17))
ccTrapCtrlLanVlanActivatedVlanId = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 17, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlLanVlanActivatedVlanId.setStatus('current')
ccTrapCtrlDhcpOptionsFileTransferStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 18))
ccTrapCtrlDhcpOptionsFileTransferStatusRequested = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 18, 1), Bits().clone(namedValues=NamedValues(("dhcpRequestedFwLoad", 0), ("dhcpRequestedCfgLoad", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlDhcpOptionsFileTransferStatusRequested.setStatus('current')
ccTrapCtrlRedundancyStateChange = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 19))
ccTrapCtrlRedundancyPreviousOperState = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 3, 1000, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standAlone", 1), ("redundantPrimary", 2), ("redundantStandby", 3), ("redundantUpgrade", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccTrapCtrlRedundancyPreviousOperState.setStatus('current')
ccRf = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4))
ccAp = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1))
ccApTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1), )
if mibBuilder.loadTexts: ccApTable.setStatus('current')
ccApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccApIndex"))
if mibBuilder.loadTexts: ccApEntry.setStatus('current')
ccApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccApIndex.setStatus('current')
ccApNicMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApNicMac.setStatus('current')
ccApModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApModelNumber.setStatus('current')
ccApSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApSerialNumber.setStatus('current')
ccApPcbRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApPcbRevision.setStatus('current')
ccApBootLoaderRev = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApBootLoaderRev.setStatus('current')
ccApWispVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApWispVersion.setStatus('current')
ccApRuntimeFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApRuntimeFwVersion.setStatus('current')
ccApNumPortals = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApNumPortals.setStatus('current')
ccApPointersToPortals = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 1, 1, 1, 10), MultiPointer255()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApPointersToPortals.setStatus('current')
ccPortal = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2))
ccPortalTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1), )
if mibBuilder.loadTexts: ccPortalTable.setStatus('current')
ccPortalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalEntry.setStatus('current')
ccPortalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccPortalIndex.setStatus('current')
ccPortalPointerToAp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 2), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalPointerToAp.setStatus('current')
ccPortalPointersToWlans = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 3), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalPointersToWlans.setStatus('current')
ccPortalName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalName.setStatus('current')
ccPortalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalLocation.setStatus('current')
ccPortalOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("undefined00", 0), ("undefined01", 1), ("undefined02", 2), ("undefined03", 3), ("undefined04", 4), ("undefined05", 5), ("undefined06", 6), ("undefined07", 7), ("undefined08", 8), ("undefined09", 9), ("undefined10", 10), ("undefined11", 11), ("externalSecondaryAntInstalled", 12), ("internalSecondaryAntInstalled", 13), ("externalPrimaryAntInstalled", 14), ("internalPrimaryAntInstalled", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalOptions.setStatus('current')
ccPortalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalMac.setStatus('current')
ccPortalNumberOfEss = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalNumberOfEss.setStatus('current')
ccPortalNumberOfBss = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalNumberOfBss.setStatus('current')
ccPortalAssociatedMus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalAssociatedMus.setStatus('current')
ccPortalRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 11), RadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRadioType.setStatus('current')
ccPortalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161))).clone(namedValues=NamedValues(("ieee802dot11bChannel01", 1), ("ieee802dot11bChannel02", 2), ("ieee802dot11bChannel03", 3), ("ieee802dot11bChannel04", 4), ("ieee802dot11bChannel05", 5), ("ieee802dot11bChannel06", 6), ("ieee802dot11bChannel07", 7), ("ieee802dot11bChannel08", 8), ("ieee802dot11bChannel09", 9), ("ieee802dot11bChannel10", 10), ("ieee802dot11bChannel11", 11), ("ieee802dot11bChannel12", 12), ("ieee802dot11bChannel13", 13), ("ieee802dot11bChannel14", 14), ("ieee802dot11aChannel036", 36), ("ieee802dot11aChannel040", 40), ("ieee802dot11aChannel044", 44), ("ieee802dot11aChannel048", 48), ("ieee802dot11aChannel052", 52), ("ieee802dot11aChannel056", 56), ("ieee802dot11aChannel060", 60), ("ieee802dot11aChannel064", 64), ("ieee802dot11aChannel149", 149), ("ieee802dot11aChannel153", 153), ("ieee802dot11aChannel157", 157), ("ieee802dot11aChannel161", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalChannel.setStatus('current')
ccPortalTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('milli-Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPowerLevel.setStatus('current')
ccPortalLastAdoption = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalLastAdoption.setStatus('current')
ccPortalState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portalUpAndWaitingForConfig", 1), ("portalReceivingConfig", 2), ("portalUpAndAdopted", 3), ("portalDeniedAdoptionDueToAcl", 4), ("portalBroken", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalState.setStatus('current')
ccPortalBackgroundNoiseNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalBackgroundNoiseNumSamples.setStatus('current')
ccPortalBackgroundNoiseBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 17), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalBackgroundNoiseBest.setStatus('current')
ccPortalBackgroundNoiseWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 18), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalBackgroundNoiseWorst.setStatus('current')
ccPortalBackgroundNoiseSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 19), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalBackgroundNoiseSum.setStatus('current')
ccPortalBackgroundNoiseSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 1, 1, 20), Counter64()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalBackgroundNoiseSumSquares.setStatus('current')
ccPortalLastMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalLastMac.setStatus('current')
ccPortalLastReason = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("aclViolation", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalLastReason.setStatus('current')
ccPortalAdoptionTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 4), )
if mibBuilder.loadTexts: ccPortalAdoptionTable.setStatus('current')
ccPortalAdoptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalAdoptionIndex"))
if mibBuilder.loadTexts: ccPortalAdoptionEntry.setStatus('current')
ccPortalAdoptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccPortalAdoptionIndex.setStatus('current')
ccPortalAdoptionStartMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 4, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalAdoptionStartMac.setStatus('current')
ccPortalAdoptionEndMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 4, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalAdoptionEndMac.setStatus('current')
ccPortalAdoptionWlanPointers = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 4, 1, 4), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalAdoptionWlanPointers.setStatus('current')
ccPortalAdoptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 4, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalAdoptionRowStatus.setStatus('current')
ccPortalSystemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5), )
if mibBuilder.loadTexts: ccPortalSystemStatsTable.setStatus('current')
ccPortalSystemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalSystemStatsEntry.setStatus('current')
ccPortalSystemStatsBeaconsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsBeaconsTx.setStatus('current')
ccPortalSystemStatsBeaconsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsBeaconsTxOctets.setStatus('current')
ccPortalSystemStatsProbeReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeReqRx.setStatus('current')
ccPortalSystemStatsProbeReqRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeReqRxOctets.setStatus('current')
ccPortalSystemStatsProbeRespRetriesNone = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeRespRetriesNone.setStatus('current')
ccPortalSystemStatsProbeRespRetries1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeRespRetries1.setStatus('current')
ccPortalSystemStatsProbeRespRetries2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeRespRetries2.setStatus('current')
ccPortalSystemStatsProbeRespRetries3OrMore = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeRespRetries3OrMore.setStatus('current')
ccPortalSystemStatsProbeRespRetriesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeRespRetriesFailed.setStatus('current')
ccPortalSystemStatsProbeRespTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSystemStatsProbeRespTxOctets.setStatus('current')
ccPortalSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6), )
if mibBuilder.loadTexts: ccPortalSettingsTable.setStatus('current')
ccPortalSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalSettingsEntry.setStatus('current')
ccPortalSettingsName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsName.setStatus('current')
ccPortalSettingsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsLocation.setStatus('current')
ccPortalSettingsAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDiversity", 1), ("primaryOnly", 2), ("secondaryOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsAntenna.setStatus('current')
ccPortalSettingsShortPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsShortPreamble.setStatus('current')
ccPortalSettingsUniSpread = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsUniSpread.setStatus('current')
ccPortalSettingsRtsThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsRtsThresh.setStatus('current')
ccPortalSettingsBeaconInt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsBeaconInt.setStatus('current')
ccPortalSettingsDtimPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDtimPrd.setStatus('current')
ccPortalSettingsSecBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsSecBeacon.setStatus('current')
ccPortalSettingsPriWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 10), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsPriWlan.setStatus('current')
ccPortalSettingsBasicRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 11), TransmitRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsBasicRates.setStatus('current')
ccPortalSettingsSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 12), TransmitRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsSupportedRates.setStatus('current')
ccPortalSettingsBGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modeBandG", 1), ("modeG", 2), ("modeB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsBGMode.setStatus('current')
ccPortalSettingsAdoptedWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 14), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSettingsAdoptedWlan.setStatus('current')
ccPortalSettingsDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 6, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDetector.setStatus('current')
ccPortalCfgRadioTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7), )
if mibBuilder.loadTexts: ccPortalCfgRadioTable.setStatus('current')
ccPortalCfgRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalCfgRadioEntry.setStatus('current')
ccPortalCfgRadioDesPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDesPlacement.setStatus('current')
ccPortalCfgRadioPosChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 2), Bits().clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 12), ("achannel40", 13), ("achannel44", 14), ("achannel48", 15), ("achannel52", 16), ("achannel56", 17), ("achannel60", 18), ("achannel64", 19), ("achannel149", 20), ("achannel153", 21), ("achannel157", 22), ("achannel161", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioPosChannel.setStatus('current')
ccPortalCfgRadioDesChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDesChannel.setStatus('current')
ccPortalCfgRadioPosPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioPosPowerLevel.setStatus('current')
ccPortalCfgRadioDesPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDesPowerLevel.setStatus('current')
ccPortalCfgRadioDesPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDesPowerInMW.setStatus('current')
ccPortalCfgRadioSet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 7), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioSet.setStatus('current')
ccPortalCfgRadioReset = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 8), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioReset.setStatus('current')
ccPortalCfgRadioPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioPlacement.setStatus('current')
ccPortalCfgRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioChannel.setStatus('current')
ccPortalCfgRadioPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioPowerLevel.setStatus('current')
ccPortalCfgRadioPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioPowerInMW.setStatus('current')
ccPortalSettingsDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8), )
if mibBuilder.loadTexts: ccPortalSettingsDefaultTable.setStatus('current')
ccPortalSettingsDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultIndex"))
if mibBuilder.loadTexts: ccPortalSettingsDefaultEntry.setStatus('current')
ccPortalSettingsDefaultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radioA", 1), ("radioB", 2), ("radioG", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccPortalSettingsDefaultIndex.setStatus('current')
ccPortalSettingsDefaultAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDiversity", 1), ("primaryOnly", 2), ("secondaryOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultAntenna.setStatus('current')
ccPortalSettingsDefaultShortPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultShortPreamble.setStatus('current')
ccPortalSettingsDefaultUniSpread = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultUniSpread.setStatus('current')
ccPortalSettingsDefaultRtsThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultRtsThresh.setStatus('current')
ccPortalSettingsDefaultBeaconInt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultBeaconInt.setStatus('current')
ccPortalSettingsDefaultDtimPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultDtimPrd.setStatus('current')
ccPortalSettingsDefaultSecBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultSecBeacon.setStatus('current')
ccPortalSettingsDefaultPriWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 9), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultPriWlan.setStatus('current')
ccPortalSettingsDefaultBasicRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 10), TransmitRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultBasicRates.setStatus('current')
ccPortalSettingsDefaultSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 11), TransmitRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultSupportedRates.setStatus('current')
ccPortalSettingsDefaultBGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modeBandG", 1), ("modeG", 2), ("modeB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalSettingsDefaultBGMode.setStatus('current')
ccPortalCfgRadioDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9), )
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultTable.setStatus('current')
ccPortalCfgRadioDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultIndex"))
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultEntry.setStatus('current')
ccPortalCfgRadioDefaultDesPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultDesPlacement.setStatus('current')
ccPortalCfgRadioDefaultPosChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 2), Bits().clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 12), ("achannel40", 13), ("achannel44", 14), ("achannel48", 15), ("achannel52", 16), ("achannel56", 17), ("achannel60", 18), ("achannel64", 19), ("achannel149", 20), ("achannel153", 21), ("achannel157", 22), ("achannel161", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultPosChannel.setStatus('current')
ccPortalCfgRadioDefaultDesChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultDesChannel.setStatus('current')
ccPortalCfgRadioDefaultPosPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultPosPowerLevel.setStatus('current')
ccPortalCfgRadioDefaultDesPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultDesPowerLevel.setStatus('current')
ccPortalCfgRadioDefaultDesPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultDesPowerInMW.setStatus('current')
ccPortalCfgRadioDefaultSet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 7), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultSet.setStatus('current')
ccPortalCfgRadioDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 8), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultReset.setStatus('current')
ccPortalCfgRadioDefaultPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultPlacement.setStatus('current')
ccPortalCfgRadioDefaultChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultChannel.setStatus('current')
ccPortalCfgRadioDefaultPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultPowerLevel.setStatus('current')
ccPortalCfgRadioDefaultPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 9, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalCfgRadioDefaultPowerInMW.setStatus('current')
cc802dt1xPortAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 10))
cc802dt1xPortAuthLogin = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc802dt1xPortAuthLogin.setStatus('current')
cc802dt1xPortAuthPass = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 10, 2), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc802dt1xPortAuthPass.setStatus('current')
cc802dt1xPortAuthSetAp300 = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 10, 3), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc802dt1xPortAuthSetAp300.setStatus('current')
ccPortalRfSum = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100))
ccPortalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1), )
if mibBuilder.loadTexts: ccPortalStatsTable.setStatus('current')
ccPortalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalStatsEntry.setStatus('current')
ccPortalTxPktsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsUcast.setStatus('current')
ccPortalRxPktsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsUcast.setStatus('current')
ccPortalRxPktsNUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsNUcast.setStatus('current')
ccPortalTxOctetsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsUcast.setStatus('current')
ccPortalRxOctetsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsUcast.setStatus('current')
ccPortalRxOctetsNUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsNUcast.setStatus('current')
ccPortalRxUndecryptablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxUndecryptablePkts.setStatus('current')
ccPortalLastActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalLastActivity.setStatus('current')
ccPortalRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2), )
if mibBuilder.loadTexts: ccPortalRxPktsTable.setStatus('current')
ccPortalRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalRxPktsEntry.setStatus('current')
ccPortalRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt1Mb.setStatus('current')
ccPortalRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt2Mb.setStatus('current')
ccPortalRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt5pt5Mb.setStatus('current')
ccPortalRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt6Mb.setStatus('current')
ccPortalRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt9Mb.setStatus('current')
ccPortalRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt11Mb.setStatus('current')
ccPortalRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt12Mb.setStatus('current')
ccPortalRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt18Mb.setStatus('current')
ccPortalRxPktsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt22Mb.setStatus('current')
ccPortalRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt24Mb.setStatus('current')
ccPortalRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt36Mb.setStatus('current')
ccPortalRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt48Mb.setStatus('current')
ccPortalRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxPktsAt54Mb.setStatus('current')
ccPortalTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3), )
if mibBuilder.loadTexts: ccPortalTxPktsTable.setStatus('current')
ccPortalTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalTxPktsEntry.setStatus('current')
ccPortalTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt1Mb.setStatus('current')
ccPortalTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt2Mb.setStatus('current')
ccPortalTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt5pt5Mb.setStatus('current')
ccPortalTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt6Mb.setStatus('current')
ccPortalTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt9Mb.setStatus('current')
ccPortalTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt11Mb.setStatus('current')
ccPortalTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt12Mb.setStatus('current')
ccPortalTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt18Mb.setStatus('current')
ccPortalTxPktsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt22Mb.setStatus('current')
ccPortalTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt24Mb.setStatus('current')
ccPortalTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt36Mb.setStatus('current')
ccPortalTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt48Mb.setStatus('current')
ccPortalTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxPktsAt54Mb.setStatus('current')
ccPortalRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4), )
if mibBuilder.loadTexts: ccPortalRxOctetsTable.setStatus('current')
ccPortalRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalRxOctetsEntry.setStatus('current')
ccPortalRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt1Mb.setStatus('current')
ccPortalRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt2Mb.setStatus('current')
ccPortalRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt5pt5Mb.setStatus('current')
ccPortalRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt6Mb.setStatus('current')
ccPortalRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt9Mb.setStatus('current')
ccPortalRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt11Mb.setStatus('current')
ccPortalRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt12Mb.setStatus('current')
ccPortalRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt18Mb.setStatus('current')
ccPortalRxOctetsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt22Mb.setStatus('current')
ccPortalRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt24Mb.setStatus('current')
ccPortalRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt36Mb.setStatus('current')
ccPortalRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt48Mb.setStatus('current')
ccPortalRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalRxOctetsAt54Mb.setStatus('current')
ccPortalTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5), )
if mibBuilder.loadTexts: ccPortalTxOctetsTable.setStatus('current')
ccPortalTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalTxOctetsEntry.setStatus('current')
ccPortalTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt1Mb.setStatus('current')
ccPortalTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt2Mb.setStatus('current')
ccPortalTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt5pt5Mb.setStatus('current')
ccPortalTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt6Mb.setStatus('current')
ccPortalTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt9Mb.setStatus('current')
ccPortalTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt11Mb.setStatus('current')
ccPortalTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt12Mb.setStatus('current')
ccPortalTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt18Mb.setStatus('current')
ccPortalTxOctetsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt22Mb.setStatus('current')
ccPortalTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt24Mb.setStatus('current')
ccPortalTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt36Mb.setStatus('current')
ccPortalTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt48Mb.setStatus('current')
ccPortalTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxOctetsAt54Mb.setStatus('current')
ccPortalTxRetriesPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6), )
if mibBuilder.loadTexts: ccPortalTxRetriesPktsTable.setStatus('current')
ccPortalTxRetriesPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalTxRetriesPktsEntry.setStatus('current')
ccPortalTxRetriesPktsNone = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPktsNone.setStatus('current')
ccPortalTxRetriesPkts01 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts01.setStatus('current')
ccPortalTxRetriesPkts02 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts02.setStatus('current')
ccPortalTxRetriesPkts03 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts03.setStatus('current')
ccPortalTxRetriesPkts04 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts04.setStatus('current')
ccPortalTxRetriesPkts05 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts05.setStatus('current')
ccPortalTxRetriesPkts06 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts06.setStatus('current')
ccPortalTxRetriesPkts07 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts07.setStatus('current')
ccPortalTxRetriesPkts08 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts08.setStatus('current')
ccPortalTxRetriesPkts09 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts09.setStatus('current')
ccPortalTxRetriesPkts10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts10.setStatus('current')
ccPortalTxRetriesPkts11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts11.setStatus('current')
ccPortalTxRetriesPkts12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts12.setStatus('current')
ccPortalTxRetriesPkts13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts13.setStatus('current')
ccPortalTxRetriesPkts14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts14.setStatus('current')
ccPortalTxRetriesPkts15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPkts15.setStatus('current')
ccPortalTxRetriesPktsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesPktsFailed.setStatus('current')
ccPortalTxRetriesOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7), )
if mibBuilder.loadTexts: ccPortalTxRetriesOctetsTable.setStatus('current')
ccPortalTxRetriesOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalTxRetriesOctetsEntry.setStatus('current')
ccPortalTxRetriesOctetsNone = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctetsNone.setStatus('current')
ccPortalTxRetriesOctets01 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets01.setStatus('current')
ccPortalTxRetriesOctets02 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets02.setStatus('current')
ccPortalTxRetriesOctets03 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets03.setStatus('current')
ccPortalTxRetriesOctets04 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets04.setStatus('current')
ccPortalTxRetriesOctets05 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets05.setStatus('current')
ccPortalTxRetriesOctets06 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets06.setStatus('current')
ccPortalTxRetriesOctets07 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets07.setStatus('current')
ccPortalTxRetriesOctets08 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets08.setStatus('current')
ccPortalTxRetriesOctets09 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets09.setStatus('current')
ccPortalTxRetriesOctets10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets10.setStatus('current')
ccPortalTxRetriesOctets11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets11.setStatus('current')
ccPortalTxRetriesOctets12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets12.setStatus('current')
ccPortalTxRetriesOctets13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets13.setStatus('current')
ccPortalTxRetriesOctets14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets14.setStatus('current')
ccPortalTxRetriesOctets15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctets15.setStatus('current')
ccPortalTxRetriesOctetsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalTxRetriesOctetsFailed.setStatus('current')
ccPortalSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8), )
if mibBuilder.loadTexts: ccPortalSigStatsTable.setStatus('current')
ccPortalSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalSigStatsEntry.setStatus('current')
ccPortalSigStatsNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsNumPkts.setStatus('current')
ccPortalSigStatsSignalBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSignalBest.setStatus('current')
ccPortalSigStatsSignalWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSignalWorst.setStatus('current')
ccPortalSigStatsSignalSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSignalSum.setStatus('current')
ccPortalSigStatsSignalSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 5), Counter64()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSignalSumSquares.setStatus('current')
ccPortalSigStatsSignalMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSignalMostRecent.setStatus('current')
ccPortalSigStatsNoiseBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsNoiseBest.setStatus('current')
ccPortalSigStatsNoiseWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 8), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsNoiseWorst.setStatus('current')
ccPortalSigStatsNoiseSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsNoiseSum.setStatus('current')
ccPortalSigStatsNoiseSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 10), Counter64()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsNoiseSumSquares.setStatus('current')
ccPortalSigStatsNoiseMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsNoiseMostRecent.setStatus('current')
ccPortalSigStatsSnrBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSnrBest.setStatus('current')
ccPortalSigStatsSnrWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 13), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSnrWorst.setStatus('current')
ccPortalSigStatsSnrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 14), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSnrSum.setStatus('current')
ccPortalSigStatsSnrSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 15), Counter64()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSnrSumSquares.setStatus('current')
ccPortalSigStatsSnrMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 8, 1, 16), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSigStatsSnrMostRecent.setStatus('current')
ccPortalSumStatsShortTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9), )
if mibBuilder.loadTexts: ccPortalSumStatsShortTable.setStatus('current')
ccPortalSumStatsShortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalSumStatsShortEntry.setStatus('current')
ccPortalSumStatsShortTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortTimestamp.setStatus('current')
ccPortalSumStatsShortNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortNumPkts.setStatus('current')
ccPortalSumStatsShortPktsPerSec100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 3), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPktsPerSec100.setStatus('current')
ccPortalSumStatsShortPktsPerSecTx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 4), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPktsPerSecTx100.setStatus('current')
ccPortalSumStatsShortPktsPerSecRx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 5), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPktsPerSecRx100.setStatus('current')
ccPortalSumStatsShortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 6), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortThroughput.setStatus('current')
ccPortalSumStatsShortThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 7), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortThroughputTx.setStatus('current')
ccPortalSumStatsShortThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 8), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortThroughputRx.setStatus('current')
ccPortalSumStatsShortAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 9), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortAvgBitSpeed.setStatus('current')
ccPortalSumStatsShortAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortAvgMuSignal.setStatus('current')
ccPortalSumStatsShortAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortAvgMuNoise.setStatus('current')
ccPortalSumStatsShortAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortAvgMuSnr.setStatus('current')
ccPortalSumStatsShortPp10kNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 13), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPp10kNUcastPkts.setStatus('current')
ccPortalSumStatsShortPp10kTxWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 14), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPp10kTxWithRetries.setStatus('current')
ccPortalSumStatsShortPp10kTxMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 15), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPp10kTxMaxRetries.setStatus('current')
ccPortalSumStatsShortTxAvgRetries100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 16), ScaleBy100()).setUnits('average x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortTxAvgRetries100.setStatus('current')
ccPortalSumStatsShortPp10kRxUndecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 17), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPp10kRxUndecrypt.setStatus('current')
ccPortalSumStatsShortTotalMus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('number of MUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortTotalMus.setStatus('current')
ccPortalSumStatsShortPp10kRfUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 9, 1, 19), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsShortPp10kRfUtil.setStatus('current')
ccPortalSumStatsLongTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10), )
if mibBuilder.loadTexts: ccPortalSumStatsLongTable.setStatus('current')
ccPortalSumStatsLongEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccPortalSumStatsLongEntry.setStatus('current')
ccPortalSumStatsLongTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongTimestamp.setStatus('current')
ccPortalSumStatsLongNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongNumPkts.setStatus('current')
ccPortalSumStatsLongPktsPerSec100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 3), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPktsPerSec100.setStatus('current')
ccPortalSumStatsLongPktsPerSecTx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 4), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPktsPerSecTx100.setStatus('current')
ccPortalSumStatsLongPktsPerSecRx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 5), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPktsPerSecRx100.setStatus('current')
ccPortalSumStatsLongThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 6), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongThroughput.setStatus('current')
ccPortalSumStatsLongThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 7), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongThroughputTx.setStatus('current')
ccPortalSumStatsLongThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 8), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongThroughputRx.setStatus('current')
ccPortalSumStatsLongAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 9), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongAvgBitSpeed.setStatus('current')
ccPortalSumStatsLongAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongAvgMuSignal.setStatus('current')
ccPortalSumStatsLongAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongAvgMuNoise.setStatus('current')
ccPortalSumStatsLongAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongAvgMuSnr.setStatus('current')
ccPortalSumStatsLongPp10kNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 13), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPp10kNUcastPkts.setStatus('current')
ccPortalSumStatsLongPp10kTxWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 14), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPp10kTxWithRetries.setStatus('current')
ccPortalSumStatsLongPp10kTxMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 15), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPp10kTxMaxRetries.setStatus('current')
ccPortalSumStatsLongTxAvgRetries100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 16), ScaleBy100()).setUnits('average x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongTxAvgRetries100.setStatus('current')
ccPortalSumStatsLongPp10kRxUndecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 17), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPp10kRxUndecrypt.setStatus('current')
ccPortalSumStatsLongTotalMus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('number of MUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongTotalMus.setStatus('current')
ccPortalSumStatsLongPp10kRfUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 2, 100, 10, 1, 19), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortalSumStatsLongPp10kRfUtil.setStatus('current')
ccAssociation = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 3))
ccAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 3, 1), )
if mibBuilder.loadTexts: ccAssociationTable.setStatus('current')
ccAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 3, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccAssociationEntry.setStatus('current')
ccAssociationFirstAssociate = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 3, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAssociationFirstAssociate.setStatus('current')
ccAssociationLastAssociate = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 3, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAssociationLastAssociate.setStatus('current')
ccAssociationCountAssociates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAssociationCountAssociates.setStatus('current')
ccMus = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4))
ccMuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1), )
if mibBuilder.loadTexts: ccMuInfoTable.setStatus('current')
ccMuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuInfoEntry.setStatus('current')
ccMuMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuMac.setStatus('current')
ccMuWlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuWlanIndex.setStatus('current')
ccMuWlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuWlanName.setStatus('current')
ccMuIsDataReady = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuIsDataReady.setStatus('current')
ccMuPortalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuPortalIndex.setStatus('current')
ccMuPortalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuPortalMac.setStatus('current')
ccMuSymbolRogueApEna = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSymbolRogueApEna.setStatus('current')
ccMuIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuIpAddr.setStatus('current')
ccMuType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("voice", 2), ("accessPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuType.setStatus('current')
ccMuRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 10), RadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRadioType.setStatus('current')
ccMuSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 11), Bits().clone(namedValues=NamedValues(("supports1Mb", 0), ("supports2Mb", 1), ("supports5dot5Mb", 2), ("supports6Mb", 3), ("supports9Mb", 4), ("supports11Mb", 5), ("supports12Mb", 6), ("supports18Mb", 7), ("supports22Mb", 8), ("supports24Mb", 9), ("supports36Mb", 10), ("supports48Mb", 11), ("supports54Mb", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSupportedRates.setStatus('current')
ccMuPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("continuousAccessMode", 1), ("powerSavePolling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuPowerMode.setStatus('current')
ccMuAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("eap802dot1x", 2), ("kerberos", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuAuthenticationMethod.setStatus('current')
ccMuEncryptionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("wep40", 2), ("wep128", 3), ("keyGuardMCM", 4), ("wpaTKIP", 5), ("wpa2AesCcmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuEncryptionMethod.setStatus('current')
ccMuVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuVlanId.setStatus('current')
ccMuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2), )
if mibBuilder.loadTexts: ccMuStatsTable.setStatus('current')
ccMuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuStatsEntry.setStatus('current')
ccMuTxPktsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsUcast.setStatus('current')
ccMuRxPktsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsUcast.setStatus('current')
ccMuRxPktsNUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsNUcast.setStatus('obsolete')
ccMuTxOctetsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsUcast.setStatus('current')
ccMuRxOctetsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsUcast.setStatus('current')
ccMuRxOctetsNUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsNUcast.setStatus('obsolete')
ccMuRxUndecryptablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxUndecryptablePkts.setStatus('current')
ccMuRxRssiNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxRssiNumPkts.setStatus('current')
ccMuRxRssiSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxRssiSum.setStatus('current')
ccMuRxRssiSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxRssiSumSquares.setStatus('current')
ccMuRxRssiMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxRssiMostRecent.setStatus('current')
ccMuLastActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuLastActivity.setStatus('current')
ccMuRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3), )
if mibBuilder.loadTexts: ccMuRxPktsTable.setStatus('current')
ccMuRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuRxPktsEntry.setStatus('current')
ccMuRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt1Mb.setStatus('current')
ccMuRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt2Mb.setStatus('current')
ccMuRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt5pt5Mb.setStatus('current')
ccMuRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt6Mb.setStatus('current')
ccMuRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt9Mb.setStatus('current')
ccMuRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt11Mb.setStatus('current')
ccMuRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt12Mb.setStatus('current')
ccMuRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt18Mb.setStatus('current')
ccMuRxPktsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt22Mb.setStatus('current')
ccMuRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt24Mb.setStatus('current')
ccMuRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt36Mb.setStatus('current')
ccMuRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt48Mb.setStatus('current')
ccMuRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxPktsAt54Mb.setStatus('current')
ccMuTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4), )
if mibBuilder.loadTexts: ccMuTxPktsTable.setStatus('current')
ccMuTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuTxPktsEntry.setStatus('current')
ccMuTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt1Mb.setStatus('current')
ccMuTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt2Mb.setStatus('current')
ccMuTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt5pt5Mb.setStatus('current')
ccMuTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt6Mb.setStatus('current')
ccMuTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt9Mb.setStatus('current')
ccMuTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt11Mb.setStatus('current')
ccMuTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt12Mb.setStatus('current')
ccMuTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt18Mb.setStatus('current')
ccMuTxPktsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt22Mb.setStatus('current')
ccMuTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt24Mb.setStatus('current')
ccMuTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt36Mb.setStatus('current')
ccMuTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt48Mb.setStatus('current')
ccMuTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxPktsAt54Mb.setStatus('current')
ccMuRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5), )
if mibBuilder.loadTexts: ccMuRxOctetsTable.setStatus('current')
ccMuRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuRxOctetsEntry.setStatus('current')
ccMuRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt1Mb.setStatus('current')
ccMuRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt2Mb.setStatus('current')
ccMuRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt5pt5Mb.setStatus('current')
ccMuRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt6Mb.setStatus('current')
ccMuRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt9Mb.setStatus('current')
ccMuRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt11Mb.setStatus('current')
ccMuRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt12Mb.setStatus('current')
ccMuRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt18Mb.setStatus('current')
ccMuRxOctetsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt22Mb.setStatus('current')
ccMuRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt24Mb.setStatus('current')
ccMuRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt36Mb.setStatus('current')
ccMuRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt48Mb.setStatus('current')
ccMuRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuRxOctetsAt54Mb.setStatus('current')
ccMuTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6), )
if mibBuilder.loadTexts: ccMuTxOctetsTable.setStatus('current')
ccMuTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuTxOctetsEntry.setStatus('current')
ccMuTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt1Mb.setStatus('current')
ccMuTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt2Mb.setStatus('current')
ccMuTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt5pt5Mb.setStatus('current')
ccMuTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt6Mb.setStatus('current')
ccMuTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt9Mb.setStatus('current')
ccMuTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt11Mb.setStatus('current')
ccMuTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt12Mb.setStatus('current')
ccMuTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt18Mb.setStatus('current')
ccMuTxOctetsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt22Mb.setStatus('current')
ccMuTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt24Mb.setStatus('current')
ccMuTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt36Mb.setStatus('current')
ccMuTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt48Mb.setStatus('current')
ccMuTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxOctetsAt54Mb.setStatus('current')
ccMuTxRetriesTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7), )
if mibBuilder.loadTexts: ccMuTxRetriesTable.setStatus('current')
ccMuTxRetriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuTxRetriesEntry.setStatus('current')
ccMuTxRetriesNone = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesNone.setStatus('current')
ccMuTxRetries01 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries01.setStatus('current')
ccMuTxRetries02 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries02.setStatus('current')
ccMuTxRetries03 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries03.setStatus('current')
ccMuTxRetries04 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries04.setStatus('current')
ccMuTxRetries05 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries05.setStatus('current')
ccMuTxRetries06 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries06.setStatus('current')
ccMuTxRetries07 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries07.setStatus('current')
ccMuTxRetries08 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries08.setStatus('current')
ccMuTxRetries09 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries09.setStatus('current')
ccMuTxRetries10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries10.setStatus('current')
ccMuTxRetries11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries11.setStatus('current')
ccMuTxRetries12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries12.setStatus('current')
ccMuTxRetries13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries13.setStatus('current')
ccMuTxRetries14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries14.setStatus('current')
ccMuTxRetries15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetries15.setStatus('current')
ccMuTxRetriesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesFailed.setStatus('current')
ccMuTxRetriesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesTotal.setStatus('current')
ccMuTxRetriesMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesMostRecent.setStatus('current')
ccMuLastMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuLastMac.setStatus('current')
ccMuLastReason = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("success", 1), ("aclViolation", 2), ("timeout", 3), ("associationFailed", 4), ("authenticationFailedOn802dot1x", 5), ("kerberosWrongUsername", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuLastReason.setStatus('current')
ccMuLastPortal = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuLastPortal.setStatus('current')
ccMuRfSum = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100))
ccMuTxRetriesOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1), )
if mibBuilder.loadTexts: ccMuTxRetriesOctetsTable.setStatus('current')
ccMuTxRetriesOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuTxRetriesOctetsEntry.setStatus('current')
ccMuTxRetriesOctetsNone = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctetsNone.setStatus('current')
ccMuTxRetriesOctets01 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets01.setStatus('current')
ccMuTxRetriesOctets02 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets02.setStatus('current')
ccMuTxRetriesOctets03 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets03.setStatus('current')
ccMuTxRetriesOctets04 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets04.setStatus('current')
ccMuTxRetriesOctets05 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets05.setStatus('current')
ccMuTxRetriesOctets06 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets06.setStatus('current')
ccMuTxRetriesOctets07 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets07.setStatus('current')
ccMuTxRetriesOctets08 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets08.setStatus('current')
ccMuTxRetriesOctets09 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets09.setStatus('current')
ccMuTxRetriesOctets10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets10.setStatus('current')
ccMuTxRetriesOctets11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets11.setStatus('current')
ccMuTxRetriesOctets12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets12.setStatus('current')
ccMuTxRetriesOctets13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets13.setStatus('current')
ccMuTxRetriesOctets14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets14.setStatus('current')
ccMuTxRetriesOctets15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctets15.setStatus('current')
ccMuTxRetriesOctetsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuTxRetriesOctetsFailed.setStatus('current')
ccMuSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2), )
if mibBuilder.loadTexts: ccMuSigStatsTable.setStatus('current')
ccMuSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuSigStatsEntry.setStatus('current')
ccMuSigStatsNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsNumPkts.setStatus('current')
ccMuSigStatsSignalBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSignalBest.setStatus('current')
ccMuSigStatsSignalWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSignalWorst.setStatus('current')
ccMuSigStatsSignalSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSignalSum.setStatus('current')
ccMuSigStatsSignalSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 5), Counter64()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSignalSumSquares.setStatus('current')
ccMuSigStatsSignalMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSignalMostRecent.setStatus('current')
ccMuSigStatsNoiseBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsNoiseBest.setStatus('current')
ccMuSigStatsNoiseWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 8), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsNoiseWorst.setStatus('current')
ccMuSigStatsNoiseSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsNoiseSum.setStatus('current')
ccMuSigStatsNoiseSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 10), Counter64()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsNoiseSumSquares.setStatus('current')
ccMuSigStatsNoiseMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsNoiseMostRecent.setStatus('current')
ccMuSigStatsSnrBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSnrBest.setStatus('current')
ccMuSigStatsSnrWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 13), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSnrWorst.setStatus('current')
ccMuSigStatsSnrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 14), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSnrSum.setStatus('current')
ccMuSigStatsSnrSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 15), Counter64()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSnrSumSquares.setStatus('current')
ccMuSigStatsSnrMostRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 2, 1, 16), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSigStatsSnrMostRecent.setStatus('current')
ccMuSumStatsShortTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3), )
if mibBuilder.loadTexts: ccMuSumStatsShortTable.setStatus('current')
ccMuSumStatsShortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuSumStatsShortEntry.setStatus('current')
ccMuSumStatsShortTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortTimestamp.setStatus('current')
ccMuSumStatsShortNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortNumPkts.setStatus('current')
ccMuSumStatsShortPktsPerSec100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 3), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortPktsPerSec100.setStatus('current')
ccMuSumStatsShortPktsPerSecTx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 4), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortPktsPerSecTx100.setStatus('current')
ccMuSumStatsShortPktsPerSecRx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 5), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortPktsPerSecRx100.setStatus('current')
ccMuSumStatsShortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 6), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortThroughput.setStatus('current')
ccMuSumStatsShortThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 7), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortThroughputTx.setStatus('current')
ccMuSumStatsShortThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 8), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortThroughputRx.setStatus('current')
ccMuSumStatsShortAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 9), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortAvgBitSpeed.setStatus('current')
ccMuSumStatsShortAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortAvgMuSignal.setStatus('current')
ccMuSumStatsShortAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortAvgMuNoise.setStatus('current')
ccMuSumStatsShortAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortAvgMuSnr.setStatus('current')
ccMuSumStatsShortPp10kNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 13), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortPp10kNUcastPkts.setStatus('current')
ccMuSumStatsShortPp10kTxWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 14), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortPp10kTxWithRetries.setStatus('current')
ccMuSumStatsShortPp10kDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 15), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortPp10kDropped.setStatus('current')
ccMuSumStatsShortTxAvgRetries100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 16), ScaleBy100()).setUnits('average x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortTxAvgRetries100.setStatus('current')
ccMuSumStatsShortPp10kRxUndecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 3, 1, 17), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsShortPp10kRxUndecrypt.setStatus('current')
ccMuSumStatsLongTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4), )
if mibBuilder.loadTexts: ccMuSumStatsLongTable.setStatus('current')
ccMuSumStatsLongEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: ccMuSumStatsLongEntry.setStatus('current')
ccMuSumStatsLongTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongTimestamp.setStatus('current')
ccMuSumStatsLongNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongNumPkts.setStatus('current')
ccMuSumStatsLongPktsPerSec100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 3), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongPktsPerSec100.setStatus('current')
ccMuSumStatsLongPktsPerSecTx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 4), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongPktsPerSecTx100.setStatus('current')
ccMuSumStatsLongPktsPerSecRx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 5), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongPktsPerSecRx100.setStatus('current')
ccMuSumStatsLongThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 6), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongThroughput.setStatus('current')
ccMuSumStatsLongThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 7), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongThroughputTx.setStatus('current')
ccMuSumStatsLongThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 8), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongThroughputRx.setStatus('current')
ccMuSumStatsLongAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 9), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongAvgBitSpeed.setStatus('current')
ccMuSumStatsLongAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongAvgMuSignal.setStatus('current')
ccMuSumStatsLongAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongAvgMuNoise.setStatus('current')
ccMuSumStatsLongAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongAvgMuSnr.setStatus('current')
ccMuSumStatsLongPp10kNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 13), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongPp10kNUcastPkts.setStatus('current')
ccMuSumStatsLongPp10kTxWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 14), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongPp10kTxWithRetries.setStatus('current')
ccMuSumStatsLongPp10kDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 15), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongPp10kDropped.setStatus('current')
ccMuSumStatsLongTxAvgRetries100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 16), ScaleBy100()).setUnits('average x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongTxAvgRetries100.setStatus('current')
ccMuSumStatsLongPp10kRxUndecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 4, 100, 4, 1, 17), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMuSumStatsLongPp10kRxUndecrypt.setStatus('current')
ccWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5))
ccWlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1), )
if mibBuilder.loadTexts: ccWlanTable.setStatus('current')
ccWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanEntry.setStatus('current')
ccWlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1001))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWlanIndex.setStatus('current')
ccWlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanName.setStatus('current')
ccWlanEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanEssid.setStatus('current')
ccWlanSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 4), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanSubnet.setStatus('current')
ccWlanPortalsAdopted = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 5), MultiPointer255()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanPortalsAdopted.setStatus('current')
ccWlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 6), StaticRowEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanEnable.setStatus('current')
ccWlanDisallowMuToMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanDisallowMuToMu.setStatus('current')
ccWlanVoicePrioritization = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanVoicePrioritization.setStatus('current')
ccWlanAnswerBroadcastEss = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAnswerBroadcastEss.setStatus('current')
ccWlanMulticastAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 10), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanMulticastAddr1.setStatus('current')
ccWlanMulticastAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 11), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanMulticastAddr2.setStatus('current')
ccWlanMuAclDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowAllMusExceptThoseMatchingAclRules", 1), ("denyAllMusExceptThoseMatchingAclRules", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanMuAclDefault.setStatus('current')
ccWlanAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authNone", 1), ("auth802dot1xEap", 2), ("authKerberos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthentication.setStatus('current')
ccWlanEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cryptoNone", 1), ("cryptoWep40", 2), ("cryptoWep104", 3), ("cryptoKeyguardMcm", 4), ("cryptoWpaTkip", 5), ("cryptoWpa2Ccmp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanEncryption.setStatus('current')
ccWlanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanWeight.setStatus('current')
ccWlanAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2))
ccWlanAuthEapTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1), )
if mibBuilder.loadTexts: ccWlanAuthEapTable.setStatus('current')
ccWlanAuthEapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanAuthEapEntry.setStatus('current')
ccWlanAuthEapReauthenticationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapReauthenticationEnable.setStatus('current')
ccWlanAuthEapReauthenticationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapReauthenticationPeriod.setStatus('current')
ccWlanAuthEapReauthenticationMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapReauthenticationMaxRetries.setStatus('current')
ccWlanAuthEapRadius1Server = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadius1Server.setStatus('current')
ccWlanAuthEapRadius1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadius1Port.setStatus('current')
ccWlanAuthEapRadius1SharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 6), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadius1SharedSecret.setStatus('current')
ccWlanAuthEapRadius2Server = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadius2Server.setStatus('current')
ccWlanAuthEapRadius2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadius2Port.setStatus('current')
ccWlanAuthEapRadius2SharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 9), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadius2SharedSecret.setStatus('current')
ccWlanAuthEapMuQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapMuQuietPeriod.setStatus('current')
ccWlanAuthEapMuTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapMuTimeout.setStatus('current')
ccWlanAuthEapMuTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapMuTxPeriod.setStatus('current')
ccWlanAuthEapMuMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapMuMaxRetries.setStatus('current')
ccWlanAuthEapServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapServerTimeout.setStatus('current')
ccWlanAuthEapServerMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapServerMaxRetries.setStatus('current')
ccWlanAuthEapRadiusAcctMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadiusAcctMode.setStatus('current')
ccWlanAuthEapRadiusAcctMuTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadiusAcctMuTimeout.setStatus('current')
ccWlanAuthEapRadiusAcctMuRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapRadiusAcctMuRetries.setStatus('current')
ccWlanAuthEapSyslogMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapSyslogMode.setStatus('current')
ccWlanAuthEapSyslogSeverIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthEapSyslogSeverIp.setStatus('current')
ccWlanAuthKerberosTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2), )
if mibBuilder.loadTexts: ccWlanAuthKerberosTable.setStatus('current')
ccWlanAuthKerberosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanAuthKerberosEntry.setStatus('current')
ccWlanAuthKerberosRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosRealmName.setStatus('current')
ccWlanAuthKerberosUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosUsername.setStatus('current')
ccWlanAuthKerberosPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 3), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosPassword.setStatus('current')
ccWlanAuthKerberosKdcServerIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosKdcServerIp1.setStatus('current')
ccWlanAuthKerberosKdcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosKdcPort1.setStatus('current')
ccWlanAuthKerberosKdcServerIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosKdcServerIp2.setStatus('current')
ccWlanAuthKerberosKdcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosKdcPort2.setStatus('current')
ccWlanAuthKerberosKdcServerIpR = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosKdcServerIpR.setStatus('current')
ccWlanAuthKerberosKdcPortR = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanAuthKerberosKdcPortR.setStatus('current')
ccWlanCrypto = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3))
ccWlanCryptoWepTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1), )
if mibBuilder.loadTexts: ccWlanCryptoWepTable.setStatus('current')
ccWlanCryptoWepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanCryptoWepEntry.setStatus('current')
ccWlanCryptoWepPassKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1, 1, 1), Password().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWepPassKey.setStatus('current')
ccWlanCryptoWepKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWepKey1.setStatus('current')
ccWlanCryptoWepKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWepKey2.setStatus('current')
ccWlanCryptoWepKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWepKey3.setStatus('current')
ccWlanCryptoWepKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWepKey4.setStatus('current')
ccWlanCryptoWepKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWepKeyToUse.setStatus('current')
ccWlanCryptoWpaTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 2), )
if mibBuilder.loadTexts: ccWlanCryptoWpaTable.setStatus('current')
ccWlanCryptoWpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanCryptoWpaEntry.setStatus('current')
ccWlanCryptoWpaBcastKeyRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaBcastKeyRotation.setStatus('current')
ccWlanCryptoWpaKeyRotationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaKeyRotationInterval.setStatus('current')
ccWlanCryptoWpaKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use128bitKey", 1), ("useAsciiPassPhrase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaKeyToUse.setStatus('current')
ccWlanCryptoWpaPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaPassphrase.setStatus('current')
ccWlanCryptoWpaKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaKey.setStatus('current')
ccWlanCryptoKeyguardTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3), )
if mibBuilder.loadTexts: ccWlanCryptoKeyguardTable.setStatus('current')
ccWlanCryptoKeyguardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanCryptoKeyguardEntry.setStatus('current')
ccWlanCryptoKeyguardPasskey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoKeyguardPasskey.setStatus('current')
ccWlanCryptoKeyguardKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoKeyguardKey1.setStatus('current')
ccWlanCryptoKeyguardKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoKeyguardKey2.setStatus('current')
ccWlanCryptoKeyguardKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoKeyguardKey3.setStatus('current')
ccWlanCryptoKeyguardKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoKeyguardKey4.setStatus('current')
ccWlanCryptoKeyguardKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoKeyguardKeyToUse.setStatus('current')
ccWlanCryptoWpaTwoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4), )
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoTable.setStatus('current')
ccWlanCryptoWpaTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoEntry.setStatus('current')
ccWlanCryptoWpaTwoBcastKeyRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoBcastKeyRotation.setStatus('current')
ccWlanCryptoWpaTwoKeyRotationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoKeyRotationInterval.setStatus('current')
ccWlanCryptoWpaTwoKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useAsciiPassphrase", 1), ("use128bitKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoKeyToUse.setStatus('current')
ccWlanCryptoWpaTwoPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 4), Password().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoPassphrase.setStatus('current')
ccWlanCryptoWpaTwoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoKey.setStatus('current')
ccWlanCryptoWpaTwoAllowTkipClient = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoAllowTkipClient.setStatus('current')
ccWlanCryptoWpaTwoFastRoamPreAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoFastRoamPreAuth.setStatus('current')
ccWlanCryptoWpaTwoFastRoamKeyCache = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 3, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanCryptoWpaTwoFastRoamKeyCache.setStatus('current')
ccWlanMuAclTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 4), )
if mibBuilder.loadTexts: ccWlanMuAclTable.setStatus('current')
ccWlanMuAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccWlanMuAclIndex"))
if mibBuilder.loadTexts: ccWlanMuAclEntry.setStatus('current')
ccWlanMuAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWlanMuAclIndex.setStatus('current')
ccWlanMuAclStartingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 4, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanMuAclStartingMac.setStatus('current')
ccWlanMuAclEndingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 4, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanMuAclEndingMac.setStatus('current')
ccWlanMuAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 4, 1, 4), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanMuAclRowStatus.setStatus('current')
ccWlanBwShareMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("roundRobin", 2), ("weightedRoundRobin", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanBwShareMode.setStatus('current')
ccWlanQosMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 6), )
if mibBuilder.loadTexts: ccWlanQosMonitorTable.setStatus('current')
ccWlanQosMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 6, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: ccWlanQosMonitorEntry.setStatus('current')
ccWlanQosMonitorSent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanQosMonitorSent.setStatus('current')
ccWlanQosMonitorDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanQosMonitorDropped.setStatus('current')
ccWlanRfSum = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100))
ccWlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1), )
if mibBuilder.loadTexts: ccWlanStatsTable.setStatus('current')
ccWlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanStatsEntry.setStatus('current')
ccWlanTxPktsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsUcast.setStatus('current')
ccWlanRxPktsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsUcast.setStatus('current')
ccWlanRxPktsNUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsNUcast.setStatus('current')
ccWlanTxOctetsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsUcast.setStatus('current')
ccWlanRxOctetsUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsUcast.setStatus('current')
ccWlanRxOctetsNUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsNUcast.setStatus('current')
ccWlanRxUndecryptablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxUndecryptablePkts.setStatus('current')
ccWlanLastActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanLastActivity.setStatus('current')
ccWlanRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2), )
if mibBuilder.loadTexts: ccWlanRxPktsTable.setStatus('current')
ccWlanRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanRxPktsEntry.setStatus('current')
ccWlanRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt1Mb.setStatus('current')
ccWlanRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt2Mb.setStatus('current')
ccWlanRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt5pt5Mb.setStatus('current')
ccWlanRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt6Mb.setStatus('current')
ccWlanRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt9Mb.setStatus('current')
ccWlanRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt11Mb.setStatus('current')
ccWlanRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt12Mb.setStatus('current')
ccWlanRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt18Mb.setStatus('current')
ccWlanRxPktsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt22Mb.setStatus('current')
ccWlanRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt24Mb.setStatus('current')
ccWlanRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt36Mb.setStatus('current')
ccWlanRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt48Mb.setStatus('current')
ccWlanRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxPktsAt54Mb.setStatus('current')
ccWlanTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3), )
if mibBuilder.loadTexts: ccWlanTxPktsTable.setStatus('current')
ccWlanTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanTxPktsEntry.setStatus('current')
ccWlanTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt1Mb.setStatus('current')
ccWlanTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt2Mb.setStatus('current')
ccWlanTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt5pt5Mb.setStatus('current')
ccWlanTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt6Mb.setStatus('current')
ccWlanTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt9Mb.setStatus('current')
ccWlanTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt11Mb.setStatus('current')
ccWlanTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt12Mb.setStatus('current')
ccWlanTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt18Mb.setStatus('current')
ccWlanTxPktsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt22Mb.setStatus('current')
ccWlanTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt24Mb.setStatus('current')
ccWlanTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt36Mb.setStatus('current')
ccWlanTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt48Mb.setStatus('current')
ccWlanTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxPktsAt54Mb.setStatus('current')
ccWlanRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4), )
if mibBuilder.loadTexts: ccWlanRxOctetsTable.setStatus('current')
ccWlanRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanRxOctetsEntry.setStatus('current')
ccWlanRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt1Mb.setStatus('current')
ccWlanRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt2Mb.setStatus('current')
ccWlanRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt5pt5Mb.setStatus('current')
ccWlanRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt6Mb.setStatus('current')
ccWlanRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt9Mb.setStatus('current')
ccWlanRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt11Mb.setStatus('current')
ccWlanRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt12Mb.setStatus('current')
ccWlanRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt18Mb.setStatus('current')
ccWlanRxOctetsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt22Mb.setStatus('current')
ccWlanRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt24Mb.setStatus('current')
ccWlanRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt36Mb.setStatus('current')
ccWlanRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt48Mb.setStatus('current')
ccWlanRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanRxOctetsAt54Mb.setStatus('current')
ccWlanTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5), )
if mibBuilder.loadTexts: ccWlanTxOctetsTable.setStatus('current')
ccWlanTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanTxOctetsEntry.setStatus('current')
ccWlanTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt1Mb.setStatus('current')
ccWlanTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt2Mb.setStatus('current')
ccWlanTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt5pt5Mb.setStatus('current')
ccWlanTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt6Mb.setStatus('current')
ccWlanTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt9Mb.setStatus('current')
ccWlanTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt11Mb.setStatus('current')
ccWlanTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt12Mb.setStatus('current')
ccWlanTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt18Mb.setStatus('current')
ccWlanTxOctetsAt22Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt22Mb.setStatus('current')
ccWlanTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt24Mb.setStatus('current')
ccWlanTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt36Mb.setStatus('current')
ccWlanTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt48Mb.setStatus('current')
ccWlanTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxOctetsAt54Mb.setStatus('current')
ccWlanTxRetriesPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6), )
if mibBuilder.loadTexts: ccWlanTxRetriesPktsTable.setStatus('current')
ccWlanTxRetriesPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanTxRetriesPktsEntry.setStatus('current')
ccWlanTxRetriesPktsNone = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPktsNone.setStatus('current')
ccWlanTxRetriesPkts01 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts01.setStatus('current')
ccWlanTxRetriesPkts02 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts02.setStatus('current')
ccWlanTxRetriesPkts03 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts03.setStatus('current')
ccWlanTxRetriesPkts04 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts04.setStatus('current')
ccWlanTxRetriesPkts05 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts05.setStatus('current')
ccWlanTxRetriesPkts06 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts06.setStatus('current')
ccWlanTxRetriesPkts07 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts07.setStatus('current')
ccWlanTxRetriesPkts08 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts08.setStatus('current')
ccWlanTxRetriesPkts09 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts09.setStatus('current')
ccWlanTxRetriesPkts10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts10.setStatus('current')
ccWlanTxRetriesPkts11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts11.setStatus('current')
ccWlanTxRetriesPkts12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts12.setStatus('current')
ccWlanTxRetriesPkts13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts13.setStatus('current')
ccWlanTxRetriesPkts14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts14.setStatus('current')
ccWlanTxRetriesPkts15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPkts15.setStatus('current')
ccWlanTxRetriesPktsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesPktsFailed.setStatus('current')
ccWlanTxRetriesOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7), )
if mibBuilder.loadTexts: ccWlanTxRetriesOctetsTable.setStatus('current')
ccWlanTxRetriesOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanTxRetriesOctetsEntry.setStatus('current')
ccWlanTxRetriesOctetsNone = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctetsNone.setStatus('current')
ccWlanTxRetriesOctets01 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets01.setStatus('current')
ccWlanTxRetriesOctets02 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets02.setStatus('current')
ccWlanTxRetriesOctets03 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets03.setStatus('current')
ccWlanTxRetriesOctets04 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets04.setStatus('current')
ccWlanTxRetriesOctets05 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets05.setStatus('current')
ccWlanTxRetriesOctets06 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets06.setStatus('current')
ccWlanTxRetriesOctets07 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets07.setStatus('current')
ccWlanTxRetriesOctets08 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets08.setStatus('current')
ccWlanTxRetriesOctets09 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets09.setStatus('current')
ccWlanTxRetriesOctets10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets10.setStatus('current')
ccWlanTxRetriesOctets11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets11.setStatus('current')
ccWlanTxRetriesOctets12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets12.setStatus('current')
ccWlanTxRetriesOctets13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets13.setStatus('current')
ccWlanTxRetriesOctets14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets14.setStatus('current')
ccWlanTxRetriesOctets15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctets15.setStatus('current')
ccWlanTxRetriesOctetsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanTxRetriesOctetsFailed.setStatus('current')
ccWlanSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8), )
if mibBuilder.loadTexts: ccWlanSigStatsTable.setStatus('current')
ccWlanSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanSigStatsEntry.setStatus('current')
ccWlanSigStatsNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsNumPkts.setStatus('current')
ccWlanSigStatsSignalBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSignalBest.setStatus('current')
ccWlanSigStatsSignalWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSignalWorst.setStatus('current')
ccWlanSigStatsSignalSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSignalSum.setStatus('current')
ccWlanSigStatsSignalSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 5), Counter64()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSignalSumSquares.setStatus('current')
ccWlanSigStatsNoiseBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsNoiseBest.setStatus('current')
ccWlanSigStatsNoiseWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsNoiseWorst.setStatus('current')
ccWlanSigStatsNoiseSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 8), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsNoiseSum.setStatus('current')
ccWlanSigStatsNoiseSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 9), Counter64()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsNoiseSumSquares.setStatus('current')
ccWlanSigStatsSnrBest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 10), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSnrBest.setStatus('current')
ccWlanSigStatsSnrWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 11), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSnrWorst.setStatus('current')
ccWlanSigStatsSnrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSnrSum.setStatus('current')
ccWlanSigStatsSnrSumSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 8, 1, 13), Counter64()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSigStatsSnrSumSquares.setStatus('current')
ccWlanSumStatsShortTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9), )
if mibBuilder.loadTexts: ccWlanSumStatsShortTable.setStatus('current')
ccWlanSumStatsShortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanSumStatsShortEntry.setStatus('current')
ccWlanSumStatsShortTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortTimestamp.setStatus('current')
ccWlanSumStatsShortNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortNumPkts.setStatus('current')
ccWlanSumStatsShortPktsPerSec100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 3), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortPktsPerSec100.setStatus('current')
ccWlanSumStatsShortPktsPerSecTx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 4), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortPktsPerSecTx100.setStatus('current')
ccWlanSumStatsShortPktsPerSecRx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 5), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortPktsPerSecRx100.setStatus('current')
ccWlanSumStatsShortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 6), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortThroughput.setStatus('current')
ccWlanSumStatsShortThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 7), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortThroughputTx.setStatus('current')
ccWlanSumStatsShortThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 8), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortThroughputRx.setStatus('current')
ccWlanSumStatsShortAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 9), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortAvgBitSpeed.setStatus('current')
ccWlanSumStatsShortAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortAvgMuSignal.setStatus('current')
ccWlanSumStatsShortAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortAvgMuNoise.setStatus('current')
ccWlanSumStatsShortAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortAvgMuSnr.setStatus('current')
ccWlanSumStatsShortPp10kNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 13), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortPp10kNUcastPkts.setStatus('current')
ccWlanSumStatsShortPp10kTxWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 14), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortPp10kTxWithRetries.setStatus('current')
ccWlanSumStatsShortPp10kDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 15), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortPp10kDropped.setStatus('current')
ccWlanSumStatsShortTxAvgRetries100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 16), ScaleBy100()).setUnits('average x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortTxAvgRetries100.setStatus('current')
ccWlanSumStatsShortPp10kRxUndecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 17), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortPp10kRxUndecrypt.setStatus('current')
ccWlanSumStatsShortTotalMus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('number of MUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsShortTotalMus.setStatus('current')
ccWlanSumStatsShortSkip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 9, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanSumStatsShortSkip1.setStatus('obsolete')
ccWlanSumStatsLongTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10), )
if mibBuilder.loadTexts: ccWlanSumStatsLongTable.setStatus('current')
ccWlanSumStatsLongEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: ccWlanSumStatsLongEntry.setStatus('current')
ccWlanSumStatsLongTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongTimestamp.setStatus('current')
ccWlanSumStatsLongNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongNumPkts.setStatus('current')
ccWlanSumStatsLongPktsPerSec100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 3), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongPktsPerSec100.setStatus('current')
ccWlanSumStatsLongPktsPerSecTx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 4), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongPktsPerSecTx100.setStatus('current')
ccWlanSumStatsLongPktsPerSecRx100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 5), ScaleBy100()).setUnits('pkts per sec x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongPktsPerSecRx100.setStatus('current')
ccWlanSumStatsLongThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 6), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongThroughput.setStatus('current')
ccWlanSumStatsLongThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 7), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongThroughputTx.setStatus('current')
ccWlanSumStatsLongThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 8), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongThroughputRx.setStatus('current')
ccWlanSumStatsLongAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 9), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongAvgBitSpeed.setStatus('current')
ccWlanSumStatsLongAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongAvgMuSignal.setStatus('current')
ccWlanSumStatsLongAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongAvgMuNoise.setStatus('current')
ccWlanSumStatsLongAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongAvgMuSnr.setStatus('current')
ccWlanSumStatsLongPp10kNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 13), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongPp10kNUcastPkts.setStatus('current')
ccWlanSumStatsLongPp10kTxWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 14), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongPp10kTxWithRetries.setStatus('current')
ccWlanSumStatsLongPp10kDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 15), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongPp10kDropped.setStatus('current')
ccWlanSumStatsLongTxAvgRetries100 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 16), ScaleBy100()).setUnits('average x100').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongTxAvgRetries100.setStatus('current')
ccWlanSumStatsLongPp10kRxUndecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 17), PartsPer10k()).setUnits('parts-per-10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongPp10kRxUndecrypt.setStatus('current')
ccWlanSumStatsLongTotalMus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('number of MUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWlanSumStatsLongTotalMus.setStatus('current')
ccWlanSumStatsLongSkip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 4, 5, 100, 10, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWlanSumStatsLongSkip1.setStatus('obsolete')
ccSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5))
ccWan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1))
ccWanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1), )
if mibBuilder.loadTexts: ccWanTable.setStatus('current')
ccWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanIndex"))
if mibBuilder.loadTexts: ccWanEntry.setStatus('current')
ccWanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanIndex.setStatus('current')
ccWanDhcpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanDhcpEnable.setStatus('current')
ccWanDhcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanDhcpIpAddr.setStatus('current')
ccWanDhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanDhcpSubnetMask.setStatus('current')
ccWanDhcpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanDhcpDefaultGateway.setStatus('current')
ccWanDhcpPrimaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanDhcpPrimaryDnsServer.setStatus('current')
ccWanDhcpSecondaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanDhcpSecondaryDnsServer.setStatus('current')
ccWanSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanSubnetMask.setStatus('current')
ccWanDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanDefaultGateway.setStatus('current')
ccWanPrimaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanPrimaryDnsServer.setStatus('current')
ccWanSecondaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanSecondaryDnsServer.setStatus('current')
ccWanPppoeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2), )
if mibBuilder.loadTexts: ccWanPppoeTable.setStatus('current')
ccWanPppoeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanIndex"))
if mibBuilder.loadTexts: ccWanPppoeEntry.setStatus('current')
ccWanPppoeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2, 1, 1), StaticRowEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanPppoeEnable.setStatus('current')
ccWanPppoeUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanPppoeUsername.setStatus('current')
ccWanPppoePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanPppoePassword.setStatus('current')
ccWanPppoeKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanPppoeKeepAlive.setStatus('current')
ccWanPppoeIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanPppoeIdleTime.setStatus('current')
ccWanPppoeAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("papOrChap", 2), ("pap", 3), ("chap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanPppoeAuthType.setStatus('current')
ccWanIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 3), )
if mibBuilder.loadTexts: ccWanIpAddrTable.setStatus('current')
ccWanIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccWanIpAddrIndex"))
if mibBuilder.loadTexts: ccWanIpAddrEntry.setStatus('current')
ccWanIpAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanIpAddrIndex.setStatus('current')
ccWanIpAddrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 3, 1, 2), StaticRowEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanIpAddrEnable.setStatus('current')
ccWanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanIpAddr.setStatus('current')
ccWanFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4))
ccWanFirewallGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanFirewallGlobalEnable.setStatus('current')
ccWanFirewallTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 2), )
if mibBuilder.loadTexts: ccWanFirewallTable.setStatus('current')
ccWanFirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanIndex"))
if mibBuilder.loadTexts: ccWanFirewallEntry.setStatus('current')
ccWanFirewallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("fwIpSpoofing", 1), ("fwPingOfDeath", 2), ("fwLandAttack", 3), ("fwReassemblyAttack", 4), ("fwSynFloodAttack", 5), ("fwSourceRouting", 6), ("fwWinnukeAttack", 7), ("fwFtpBounceAttack", 8), ("fwIpUnalignedTimestamp", 9), ("fwIpSequenceNumberPrediction", 10), ("fwMimeFloodAttack", 11)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanFirewallIndex.setStatus('current')
ccWanFirewallDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanFirewallDescription.setStatus('current')
ccWanFirewallAlwaysEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanFirewallAlwaysEnabled.setStatus('current')
ccWanFirewallEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanFirewallEnable.setStatus('current')
ccWanFirewallMimeFloodMaxHeaderLength = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanFirewallMimeFloodMaxHeaderLength.setStatus('current')
ccWanFirewallMimeFloodMaxHeaders = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanFirewallMimeFloodMaxHeaders.setStatus('current')
ccWanNatTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 4, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatTimeout.setStatus('current')
ccWanNat = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5))
ccWanNatLowestUnusedSlot = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanNatLowestUnusedSlot.setStatus('current')
ccWanNatTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2), )
if mibBuilder.loadTexts: ccWanNatTable.setStatus('current')
ccWanNatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanNatIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccWanNatWanIpAddress"))
if mibBuilder.loadTexts: ccWanNatEntry.setStatus('current')
ccWanNatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanNatIndex.setStatus('current')
ccWanNatWanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanNatWanIpAddress.setStatus('current')
ccWanNatType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("natNone", 1), ("nat1to1", 2), ("nat1toMany", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatType.setStatus('current')
ccWanNat1to1IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNat1to1IpAddr.setStatus('current')
ccWanNatInboundDefaultEna = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundDefaultEna.setStatus('current')
ccWanNatInboundDefaultIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundDefaultIp.setStatus('current')
ccWanNatInboundTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3), )
if mibBuilder.loadTexts: ccWanNatInboundTable.setStatus('current')
ccWanNatInboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanNatIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccWanNatWanIpAddress"), (0, "SYMBOL-CC-WS2000-MIB", "ccWanNatInboundIndex"))
if mibBuilder.loadTexts: ccWanNatInboundEntry.setStatus('current')
ccWanNatInboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanNatInboundIndex.setStatus('current')
ccWanNatInboundName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundName.setStatus('current')
ccWanNatInboundTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("all", 1), ("tcp", 2), ("udp", 3), ("icmp", 4), ("ah", 5), ("esp", 6), ("gre", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundTransport.setStatus('current')
ccWanNatInboundStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundStartPort.setStatus('current')
ccWanNatInboundEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundEndPort.setStatus('current')
ccWanNatInboundIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundIpAddr.setStatus('current')
ccWanNatInboundTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundTranslationPort.setStatus('current')
ccWanNatInboundRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 3, 1, 8), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatInboundRowStatus.setStatus('current')
ccWanNatOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 4), )
if mibBuilder.loadTexts: ccWanNatOutboundTable.setStatus('current')
ccWanNatOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanNatIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccWanNatWanIpAddress"), (0, "SYMBOL-CC-WS2000-MIB", "ccWanNatOutboundSubnetIndex"))
if mibBuilder.loadTexts: ccWanNatOutboundEntry.setStatus('current')
ccWanNatOutboundSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanNatOutboundSubnetIndex.setStatus('current')
ccWanNatOutboundEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatOutboundEnable.setStatus('current')
ccWanNatOutboundPossibleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 4, 1, 3), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanNatOutboundPossibleIpAddr.setStatus('current')
ccWanNatOutboundIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 5, 4, 1, 4), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanNatOutboundIpAddr.setStatus('current')
ccWanVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6))
ccWanVpnTunnelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4))
ccWanVpnTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1), )
if mibBuilder.loadTexts: ccWanVpnTable.setStatus('current')
ccWanVpnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanVpnIndex"))
if mibBuilder.loadTexts: ccWanVpnEntry.setStatus('current')
ccWanVpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccWanVpnIndex.setStatus('current')
ccWanVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnName.setStatus('current')
ccWanVpnLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 3), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnLocalSubnet.setStatus('current')
ccWanVpnLocalWanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 4), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnLocalWanIp.setStatus('current')
ccWanVpnRemoteSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnRemoteSubnet.setStatus('current')
ccWanVpnRemoteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnRemoteSubnetMask.setStatus('current')
ccWanVpnRemoteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnRemoteGateway.setStatus('current')
ccWanVpnKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyExchange.setStatus('current')
ccWanVpnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnRowStatus.setStatus('current')
ccWanVpnKeyManualTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2), )
if mibBuilder.loadTexts: ccWanVpnKeyManualTable.setStatus('current')
ccWanVpnKeyManualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1), )
ccWanVpnEntry.registerAugmentions(("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualEntry"))
ccWanVpnKeyManualEntry.setIndexNames(*ccWanVpnEntry.getIndexNames())
if mibBuilder.loadTexts: ccWanVpnKeyManualEntry.setStatus('current')
ccWanVpnKeyManualAhAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha1", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualAhAuth.setStatus('current')
ccWanVpnKeyManualInAhAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 2), HexPassword().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualInAhAuthKey.setStatus('current')
ccWanVpnKeyManualOutAhAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 3), HexPassword().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualOutAhAuthKey.setStatus('current')
ccWanVpnKeyManualInAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualInAhSpi.setStatus('current')
ccWanVpnKeyManualOutAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualOutAhSpi.setStatus('current')
ccWanVpnKeyManualEspType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("esp", 2), ("espWithAuthentication", 3))).clone('esp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualEspType.setStatus('current')
ccWanVpnKeyManualEspEncrypAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("des", 1), ("des3", 2), ("aes128bit", 3), ("aes192bit", 4), ("aes256bit", 5))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualEspEncrypAlg.setStatus('current')
ccWanVpnKeyManualInEspEncrypKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 8), HexPassword().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualInEspEncrypKey.setStatus('current')
ccWanVpnKeyManualOutEspEncrypKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 9), HexPassword().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualOutEspEncrypKey.setStatus('current')
ccWanVpnKeyManualEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha1", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualEspAuthAlg.setStatus('current')
ccWanVpnKeyManualInEspAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 11), HexPassword().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualInEspAuthKey.setStatus('current')
ccWanVpnKeyManualOutEspAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 12), HexPassword().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualOutEspAuthKey.setStatus('current')
ccWanVpnKeyManualInEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualInEspSpi.setStatus('current')
ccWanVpnKeyManualOutEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyManualOutEspSpi.setStatus('current')
ccWanVpnKeyAutoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3), )
if mibBuilder.loadTexts: ccWanVpnKeyAutoTable.setStatus('current')
ccWanVpnKeyAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1), )
ccWanVpnEntry.registerAugmentions(("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoEntry"))
ccWanVpnKeyAutoEntry.setIndexNames(*ccWanVpnEntry.getIndexNames())
if mibBuilder.loadTexts: ccWanVpnKeyAutoEntry.setStatus('current')
ccWanVpnKeyAutoUsePerfectSecrecy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoUsePerfectSecrecy.setStatus('current')
ccWanVpnKeyAutoAhAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha1", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoAhAuth.setStatus('current')
ccWanVpnKeyAutoEspType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("esp", 2), ("espWithAuthentication", 3))).clone('esp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoEspType.setStatus('current')
ccWanVpnKeyAutoEspEncrypAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("des", 1), ("des3", 2), ("aes128bit", 3), ("aes196bit", 4), ("aes256bit", 5))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoEspEncrypAlg.setStatus('current')
ccWanVpnKeyAutoEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha1", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoEspAuthAlg.setStatus('current')
ccWanVpnKeyAutoIkeOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeOperationMode.setStatus('current')
ccWanVpnKeyAutoIkeLocalIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("fqdn", 2), ("ufqdn", 3))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeLocalIdType.setStatus('current')
ccWanVpnKeyAutoIkeLocalIdData = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 8), DisplayString().clone('?')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeLocalIdData.setStatus('current')
ccWanVpnKeyAutoIkeRemoteIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("fqdn", 2), ("ufqdn", 3))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeRemoteIdType.setStatus('current')
ccWanVpnKeyAutoIkeRemoteIdData = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 10), DisplayString().clone('?')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeRemoteIdData.setStatus('current')
ccWanVpnKeyAutoIkeAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psk", 1), ("rsa", 2))).clone('psk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeAuthType.setStatus('current')
ccWanVpnKeyAutoIkeAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha1", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeAuthAlg.setStatus('current')
ccWanVpnKeyAutoIkeAuthPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 13), Password().clone('?')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeAuthPassphrase.setStatus('current')
ccWanVpnKeyAutoIkeEncrypAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("des", 1), ("des3", 2), ("aes128bit", 3), ("aes196bit", 4), ("aes256bit", 5))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeEncrypAlg.setStatus('current')
ccWanVpnKeyAutoIkeXauthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("generic", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeXauthMode.setStatus('current')
ccWanVpnKeyAutoIkeXauthUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 16), DisplayString().clone('?')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeXauthUsername.setStatus('current')
ccWanVpnKeyAutoIkeXauthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 17), Password().clone('?')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeXauthPassword.setStatus('current')
ccWanVpnKeyAutoIkeKeyLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 4294967295))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeKeyLifetime.setStatus('current')
ccWanVpnKeyAutoIkeDiffieHelmanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group1length768bit", 1), ("group2length1024bit", 2))).clone('group1length768bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanVpnKeyAutoIkeDiffieHelmanGroup.setStatus('current')
ccWanVpnTunnelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5))
ccWanVpnSaTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1), )
if mibBuilder.loadTexts: ccWanVpnSaTable.setStatus('current')
ccWanVpnSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanVpnSaTunnelName"))
if mibBuilder.loadTexts: ccWanVpnSaEntry.setStatus('current')
ccWanVpnSaTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnSaTunnelName.setStatus('current')
ccWanVpnSaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("nonActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnSaStatus.setStatus('current')
ccWanVpnSaInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnSaInSpi.setStatus('current')
ccWanVpnSaOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnSaOutSpi.setStatus('current')
ccWanVpnSaLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnSaLifetime.setStatus('current')
ccWanVpnSaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnSaTxBytes.setStatus('current')
ccWanVpnSaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnSaRxBytes.setStatus('current')
ccWanVpnIkeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 2), )
if mibBuilder.loadTexts: ccWanVpnIkeTable.setStatus('current')
ccWanVpnIkeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanVpnIkeTunnelName"))
if mibBuilder.loadTexts: ccWanVpnIkeEntry.setStatus('current')
ccWanVpnIkeTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnIkeTunnelName.setStatus('current')
ccWanVpnIkeState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnIkeState.setStatus('current')
ccWanVpnIkeRemainingLife = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 6, 5, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanVpnIkeRemainingLife.setStatus('current')
ccWanContentBlock = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7))
ccWanContentBlockSmtp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 1), Bits().clone(namedValues=NamedValues(("blockSmtpHelo", 0), ("blockSmtpMail", 1), ("blockSmtpRcpt", 2), ("blockSmtpData", 3), ("blockSmtpQuit", 4), ("blockSmtpSend", 5), ("blockSmtpSaml", 6), ("blockSmtpReset", 7), ("blockSmtpVrfy", 8), ("blockSmtpExpn", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanContentBlockSmtp.setStatus('current')
ccWanContentBlockFtp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 2), Bits().clone(namedValues=NamedValues(("blockFtpStoringFiles", 0), ("blockFtpRetrievingFiles", 1), ("blockFtpDirectoryList", 2), ("blockFtpCreateDirectory", 3), ("blockFtpChangeDirectory", 4), ("blockFtpPassiveOperation", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanContentBlockFtp.setStatus('current')
ccWanContentBlockHttp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 3), Bits().clone(namedValues=NamedValues(("blockHttpWebProxy", 0), ("blockHttpActiveX", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanContentBlockHttp.setStatus('current')
ccWanContentBlockOutUrlTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 4), )
if mibBuilder.loadTexts: ccWanContentBlockOutUrlTable.setStatus('current')
ccWanContentBlockOutUrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWanContentBlockOutUrlIndex"))
if mibBuilder.loadTexts: ccWanContentBlockOutUrlEntry.setStatus('current')
ccWanContentBlockOutUrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccWanContentBlockOutUrlIndex.setStatus('current')
ccWanContentBlockOutUrlExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanContentBlockOutUrlExtension.setStatus('current')
ccWanContentBlockOutUrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 1, 7, 4, 1, 3), StaticRowEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccWanContentBlockOutUrlRowStatus.setStatus('current')
ccPort = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2))
ccPortTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1), )
if mibBuilder.loadTexts: ccPortTable.setStatus('current')
ccPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortIndex"))
if mibBuilder.loadTexts: ccPortEntry.setStatus('current')
ccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccPortIndex.setStatus('current')
ccPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wanPort", 1), ("lanPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortType.setStatus('current')
ccPortPoeEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortPoeEquipped.setStatus('current')
ccPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortStatus.setStatus('current')
ccPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortDuplex.setStatus('current')
ccPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPortSpeed.setStatus('current')
ccLan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4))
ccSubnet = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2))
ccSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1), )
if mibBuilder.loadTexts: ccSubnetTable.setStatus('current')
ccSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetIndex"))
if mibBuilder.loadTexts: ccSubnetEntry.setStatus('current')
ccSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSubnetIndex.setStatus('current')
ccSubnetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 2), StaticRowEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetEnable.setStatus('current')
ccSubnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetName.setStatus('current')
ccSubnetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetIpAddress.setStatus('current')
ccSubnetIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetIpSubnetMask.setStatus('current')
ccSubnetPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("null", 0), ("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("port5", 5), ("port6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetPortMembers.setStatus('current')
ccSubnetWlanMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 7), Bits().clone(namedValues=NamedValues(("null", 0), ("wlan1", 1), ("wlan2", 2), ("wlan3", 3), ("wlan4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetWlanMembers.setStatus('current')
ccSubnetDhcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcpClient", 1), ("dhcpServer", 2), ("dhcpNone", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpState.setStatus('current')
ccSubnetDhcpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSubnetDhcpIpAddress.setStatus('current')
ccSubnetDhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSubnetDhcpSubnetMask.setStatus('current')
ccSubnetDhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2), )
if mibBuilder.loadTexts: ccSubnetDhcpServerTable.setStatus('current')
ccSubnetDhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetIndex"))
if mibBuilder.loadTexts: ccSubnetDhcpServerEntry.setStatus('current')
ccSubnetDhcpServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 1), StaticRowEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSubnetDhcpServerEnable.setStatus('current')
ccSubnetDhcpServerPoolStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerPoolStart.setStatus('current')
ccSubnetDhcpServerPoolEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerPoolEnd.setStatus('current')
ccSubnetDhcpServerPrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerPrimaryDns.setStatus('current')
ccSubnetDhcpServerSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerSecondaryDns.setStatus('current')
ccSubnetDhcpServerDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerDefaultGateway.setStatus('current')
ccSubnetDhcpServerLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerLeaseTime.setStatus('current')
ccSubnetDhcpServerWinsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerWinsServer.setStatus('current')
ccSubnetDhcpServerDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetDhcpServerDomainName.setStatus('current')
ccSubnetDhcpServerStaticMapTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 3), )
if mibBuilder.loadTexts: ccSubnetDhcpServerStaticMapTable.setStatus('current')
ccSubnetDhcpServerStaticMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerStaticMapMac"))
if mibBuilder.loadTexts: ccSubnetDhcpServerStaticMapEntry.setStatus('current')
ccSubnetDhcpServerStaticMapMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 3, 1, 1), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccSubnetDhcpServerStaticMapMac.setStatus('current')
ccSubnetDhcpServerStaticMapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccSubnetDhcpServerStaticMapIpAddr.setStatus('current')
ccSubnetDhcpServerStaticMapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 3, 1, 3), AbbrevRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccSubnetDhcpServerStaticMapEnable.setStatus('current')
ccSubnetAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4))
ccSubnetAccessTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 1), )
if mibBuilder.loadTexts: ccSubnetAccessTable.setStatus('current')
ccSubnetAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetIndex"), (0, "SYMBOL-CC-WS2000-MIB", "ccSubnetAccessDestIndex"))
if mibBuilder.loadTexts: ccSubnetAccessEntry.setStatus('current')
ccSubnetAccessDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSubnetAccessDestIndex.setStatus('current')
ccSubnetAccessDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destSubnet", 1), ("destWan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSubnetAccessDestType.setStatus('current')
ccSubnetAccessDestPtrToDest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 1, 1, 3), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSubnetAccessDestPtrToDest.setStatus('current')
ccSubnetAccessRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleType.setStatus('current')
ccSubnetAccessPtrToRules = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 1, 1, 5), MultiPointer255()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSubnetAccessPtrToRules.setStatus('current')
ccSubnetAccessRuleTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2), )
if mibBuilder.loadTexts: ccSubnetAccessRuleTable.setStatus('current')
ccSubnetAccessRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleIndex"))
if mibBuilder.loadTexts: ccSubnetAccessRuleEntry.setStatus('current')
ccSubnetAccessRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSubnetAccessRuleIndex.setStatus('current')
ccSubnetAccessRuleSrcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 2), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleSrcPtr.setStatus('current')
ccSubnetAccessRuleDestPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 3), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleDestPtr.setStatus('current')
ccSubnetAccessRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleName.setStatus('current')
ccSubnetAccessRuleTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("all", 1), ("tcp", 2), ("udp", 3), ("icmp", 4), ("ah", 5), ("esp", 6), ("gre", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleTransport.setStatus('current')
ccSubnetAccessRuleStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleStartPort.setStatus('current')
ccSubnetAccessRuleEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleEndPort.setStatus('current')
ccSubnetAccessRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 2, 1, 8), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessRuleRowStatus.setStatus('current')
ccSubnetAccessAdvInTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3), )
if mibBuilder.loadTexts: ccSubnetAccessAdvInTable.setStatus('current')
ccSubnetAccessAdvInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInIndex"))
if mibBuilder.loadTexts: ccSubnetAccessAdvInEntry.setStatus('current')
ccSubnetAccessAdvInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSubnetAccessAdvInIndex.setStatus('current')
ccSubnetAccessAdvInSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInSrcIp.setStatus('current')
ccSubnetAccessAdvInSrcIpLength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInSrcIpLength.setStatus('current')
ccSubnetAccessAdvInDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInDestIp.setStatus('current')
ccSubnetAccessAdvInDestIpLength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInDestIpLength.setStatus('current')
ccSubnetAccessAdvInTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("all", 1), ("tcp", 2), ("udp", 3), ("icmp", 4), ("ah", 5), ("esp", 6), ("gre", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInTransport.setStatus('current')
ccSubnetAccessAdvInSrcPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInSrcPortStart.setStatus('current')
ccSubnetAccessAdvInSrcPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInSrcPortEnd.setStatus('current')
ccSubnetAccessAdvInDestPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInDestPortStart.setStatus('current')
ccSubnetAccessAdvInDestPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInDestPortEnd.setStatus('current')
ccSubnetAccessAdvInReverseNatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInReverseNatIp.setStatus('current')
ccSubnetAccessAdvInReverseNatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInReverseNatPort.setStatus('current')
ccSubnetAccessAdvInAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInAction.setStatus('current')
ccSubnetAccessAdvInRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 3, 1, 15), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvInRowStatus.setStatus('current')
ccSubnetAccessAdvOutTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4), )
if mibBuilder.loadTexts: ccSubnetAccessAdvOutTable.setStatus('current')
ccSubnetAccessAdvOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutIndex"))
if mibBuilder.loadTexts: ccSubnetAccessAdvOutEntry.setStatus('current')
ccSubnetAccessAdvOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutIndex.setStatus('current')
ccSubnetAccessAdvOutSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutSrcIp.setStatus('current')
ccSubnetAccessAdvOutSrcIpLength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutSrcIpLength.setStatus('current')
ccSubnetAccessAdvOutDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutDestIp.setStatus('current')
ccSubnetAccessAdvOutDestIpLength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutDestIpLength.setStatus('current')
ccSubnetAccessAdvOutTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("all", 1), ("tcp", 2), ("udp", 3), ("icmp", 4), ("ah", 5), ("esp", 6), ("gre", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutTransport.setStatus('current')
ccSubnetAccessAdvOutSrcPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutSrcPortStart.setStatus('current')
ccSubnetAccessAdvOutSrcPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutSrcPortEnd.setStatus('current')
ccSubnetAccessAdvOutDestPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutDestPortStart.setStatus('current')
ccSubnetAccessAdvOutDestPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutDestPortEnd.setStatus('current')
ccSubnetAccessAdvOutReverseNat = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 11), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutReverseNat.setStatus('current')
ccSubnetAccessAdvOutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutAction.setStatus('current')
ccSubnetAccessAdvOutRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 4, 1, 13), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOutRowStatus.setStatus('current')
ccSubnetAccessAdvOverrideMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvOverrideMode.setStatus('current')
ccSubnetAccessAdvImportRules = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 2, 4, 6), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSubnetAccessAdvImportRules.setStatus('current')
ccLanVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3))
ccLanVlanType = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBased", 1), ("userBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLanVlanType.setStatus('current')
ccLanVlanTrunkPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLanVlanTrunkPort.setStatus('current')
ccLanVlanDefaultTag = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLanVlanDefaultTag.setStatus('current')
ccLanVlanTrunked = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3, 4), Bits().clone(namedValues=NamedValues(("noVlansAreTrunked", 0), ("trunkVlan01", 1), ("trunkVlan02", 2), ("trunkVlan03", 3), ("trunkVlan04", 4), ("trunkVlan05", 5), ("trunkVlan06", 6), ("trunkVlan07", 7), ("trunkVlan08", 8), ("trunkVlan09", 9), ("trunkVlan10", 10), ("trunkVlan11", 11), ("trunkVlan12", 12), ("trunkVlan13", 13), ("trunkVlan14", 14), ("trunkVlan15", 15), ("trunkVlan16", 16), ("trunkVlan17", 17), ("trunkVlan18", 18), ("trunkVlan19", 19), ("trunkVlan20", 20), ("trunkVlan21", 21), ("trunkVlan22", 22), ("trunkVlan23", 23), ("trunkVlan24", 24), ("trunkVlan25", 25), ("trunkVlan26", 26), ("trunkVlan27", 27), ("trunkVlan28", 28), ("trunkVlan29", 29), ("trunkVlan30", 30), ("trunkVlan31", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLanVlanTrunked.setStatus('current')
ccLanVlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3, 5), )
if mibBuilder.loadTexts: ccLanVlanTable.setStatus('current')
ccLanVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccSubnetIndex"))
if mibBuilder.loadTexts: ccLanVlanEntry.setStatus('current')
ccLanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 5, 4, 3, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLanVlanId.setStatus('current')
ccRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 6))
ccRouterRip = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1))
ccRouterRipType = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noRip", 1), ("ripV1", 2), ("ripV2withV1compatibility", 3), ("ripV2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRipType.setStatus('current')
ccRouterRipDirection = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("rxOnly", 2), ("txOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRipDirection.setStatus('current')
ccRouterRip2 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 3))
ccRouterRip2AuthType = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRip2AuthType.setStatus('current')
ccRouterRip2SimplePassword = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 3, 2), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRip2SimplePassword.setStatus('current')
ccRouterRip2Md5Key1Id = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRip2Md5Key1Id.setStatus('current')
ccRouterRip2Md5Key1AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 3, 4), Password().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRip2Md5Key1AuthKey.setStatus('current')
ccRouterRip2Md5Key2Id = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRip2Md5Key2Id.setStatus('current')
ccRouterRip2Md5Key2AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 1, 3, 6), Password().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterRip2Md5Key2AuthKey.setStatus('current')
ccRouterRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2), )
if mibBuilder.loadTexts: ccRouterRoutesTable.setStatus('current')
ccRouterRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRouterRoutesIndex"))
if mibBuilder.loadTexts: ccRouterRoutesEntry.setStatus('current')
ccRouterRoutesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRouterRoutesIndex.setStatus('current')
ccRouterRoutesDest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRouterRoutesDest.setStatus('current')
ccRouterRoutesDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRouterRoutesDestMask.setStatus('current')
ccRouterRoutesGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRouterRoutesGateway.setStatus('current')
ccRouterRoutesInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2, 1, 5), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRouterRoutesInterface.setStatus('current')
ccRouterRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRouterRoutesMetric.setStatus('current')
ccRouterUserRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3), )
if mibBuilder.loadTexts: ccRouterUserRoutesTable.setStatus('current')
ccRouterUserRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesIndex"))
if mibBuilder.loadTexts: ccRouterUserRoutesEntry.setStatus('current')
ccRouterUserRoutesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRouterUserRoutesIndex.setStatus('current')
ccRouterUserRoutesDest = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterUserRoutesDest.setStatus('current')
ccRouterUserRoutesDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterUserRoutesDestMask.setStatus('current')
ccRouterUserRoutesGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterUserRoutesGateway.setStatus('current')
ccRouterUserRoutesInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wan", 1), ("subnet1", 2), ("subnet2", 3), ("subnet3", 4), ("subnet4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterUserRoutesInterface.setStatus('current')
ccRouterUserRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterUserRoutesMetric.setStatus('current')
ccRouterUserRoutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 6, 3, 1, 7), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRouterUserRoutesRowStatus.setStatus('current')
ccRap = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7))
ccRapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1))
ccRapControlPollSymbolMus = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 3))
ccRapPollSymbolMusEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapPollSymbolMusEnable.setStatus('current')
ccRapPollSymbolMusInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 3, 2), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapPollSymbolMusInterval.setStatus('current')
ccRapControlOnChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 4))
ccRapOnChannelEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapOnChannelEnable.setStatus('current')
ccRapOnChannelInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 4, 2), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapOnChannelInterval.setStatus('current')
ccRapControlDetectors = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 5))
ccRapDetectorsEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapDetectorsEnable.setStatus('current')
ccRapDetectorsInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 1, 5, 2), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapDetectorsInterval.setStatus('current')
ccRapAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2))
ccRapAuthList = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2))
ccRapAuthAllSymbolMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapAuthAllSymbolMac.setStatus('current')
ccRapAuthTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 2), )
if mibBuilder.loadTexts: ccRapAuthTable.setStatus('current')
ccRapAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRapAuthIndex"))
if mibBuilder.loadTexts: ccRapAuthEntry.setStatus('current')
ccRapAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRapAuthIndex.setStatus('current')
ccRapAuthMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 2, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapAuthMacFilter.setStatus('current')
ccRapAuthEssidFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapAuthEssidFilter.setStatus('current')
ccRapAuthRowExists = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapAuthRowExists.setStatus('current')
ccRapAuthErase = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapAuthErase.setStatus('current')
ccRapAuthCopyAllApproved = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapAuthCopyAllApproved.setStatus('current')
ccRapAuthCopyAllRogue = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 2, 2, 5), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapAuthCopyAllRogue.setStatus('current')
ccRapResults = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3))
ccRapResultsApproved = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1))
ccRapResultsApprovedAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 1), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapResultsApprovedAgeOut.setStatus('current')
ccRapResultsApprovedTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2), )
if mibBuilder.loadTexts: ccRapResultsApprovedTable.setStatus('current')
ccRapResultsApprovedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedIndex"))
if mibBuilder.loadTexts: ccRapResultsApprovedEntry.setStatus('current')
ccRapResultsApprovedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRapResultsApprovedIndex.setStatus('current')
ccRapResultsApprovedApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedApMac.setStatus('current')
ccRapResultsApprovedEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedEssid.setStatus('current')
ccRapResultsApprovedCopyToAuthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapResultsApprovedCopyToAuthTable.setStatus('current')
ccRapResultsApprovedFirstHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedFirstHeard.setStatus('current')
ccRapResultsApprovedLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedLastHeard.setStatus('current')
ccRapResultsApprovedPortalPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 7), MultiPointer255()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedPortalPtr.setStatus('current')
ccRapResultsApprovedHowFound = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("viaSymbolMuPolling", 1), ("viaOnChannelDetection", 2), ("viaDetector", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedHowFound.setStatus('current')
ccRapResultsApprovedHowAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onAuthList", 1), ("viaRadius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedHowAuth.setStatus('current')
ccRapResultsApprovedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsApprovedChannel.setStatus('current')
ccRapResultsApprovedErase = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapResultsApprovedErase.setStatus('current')
ccRapNewApprovedAp = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 1, 4)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedPortalPtr"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedHowFound"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedHowAuth"))
if mibBuilder.loadTexts: ccRapNewApprovedAp.setStatus('current')
ccRapResultsRogue = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2))
ccRapResultsRogueAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 1), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapResultsRogueAgeOut.setStatus('current')
ccRapResultsRogueTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2), )
if mibBuilder.loadTexts: ccRapResultsRogueTable.setStatus('current')
ccRapResultsRogueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueIndex"))
if mibBuilder.loadTexts: ccRapResultsRogueEntry.setStatus('current')
ccRapResultsRogueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRapResultsRogueIndex.setStatus('current')
ccRapResultsRogueApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueApMac.setStatus('current')
ccRapResultsRogueEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueEssid.setStatus('current')
ccRapResultsRogueCopyToAuthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapResultsRogueCopyToAuthTable.setStatus('current')
ccRapResultsRogueFirstHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueFirstHeard.setStatus('current')
ccRapResultsRogueLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueLastHeard.setStatus('current')
ccRapResultsRoguePortalPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 7), MultiPointer255()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRoguePortalPtr.setStatus('current')
ccRapResultsRogueHowFound = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("viaSymbolMuPolling", 1), ("viaOnChannelDetection", 2), ("viaDetector", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueHowFound.setStatus('current')
ccRapResultsRogueClosestPortalPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 9), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueClosestPortalPtr.setStatus('current')
ccRapResultsRogueClosestPortalRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueClosestPortalRssi.setStatus('current')
ccRapResultsRogueChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapResultsRogueChannel.setStatus('current')
ccRapResultsRogueErase = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapResultsRogueErase.setStatus('current')
ccRapNewRogueAp = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 3, 2, 4)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccRapResultsRoguePortalPtr"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueHowFound"))
if mibBuilder.loadTexts: ccRapNewRogueAp.setStatus('current')
ccRapLocate = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4))
ccRapPortalResults = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1))
ccRapPortalResultsApMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapPortalResultsApMac.setStatus('current')
ccRapPortalResultsApEssid = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapPortalResultsApEssid.setStatus('current')
ccRapPortalResultsInProcess = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 3), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapPortalResultsInProcess.setStatus('current')
ccRapPortalResultsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 4), )
if mibBuilder.loadTexts: ccRapPortalResultsTable.setStatus('current')
ccRapPortalResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRapPortalResultsIndex"))
if mibBuilder.loadTexts: ccRapPortalResultsEntry.setStatus('current')
ccRapPortalResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRapPortalResultsIndex.setStatus('current')
ccRapPortalResultsPortalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 4, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapPortalResultsPortalMac.setStatus('current')
ccRapPortalResultsRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapPortalResultsRssi.setStatus('current')
ccRapPollOneMu = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2))
ccRapPollOneMuMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapPollOneMuMac.setStatus('current')
ccRapPollOneMuInProcess = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 2), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRapPollOneMuInProcess.setStatus('current')
ccRapPollOneMuStatus = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSymbolRogueEnabled", 1), ("symbolRogueEnabled", 2), ("notAssociated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapPollOneMuStatus.setStatus('current')
ccRapPollOneMuResultsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 4), )
if mibBuilder.loadTexts: ccRapPollOneMuResultsTable.setStatus('current')
ccRapPollOneMuResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuResultsIndex"))
if mibBuilder.loadTexts: ccRapPollOneMuResultsEntry.setStatus('current')
ccRapPollOneMuResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRapPollOneMuResultsIndex.setStatus('current')
ccRapPollOneMuResultsRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapPollOneMuResultsRssi.setStatus('current')
ccRapPollOneMuResultsEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapPollOneMuResultsEssid.setStatus('current')
ccRapPollOneMuResultsApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 7, 4, 2, 4, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRapPollOneMuResultsApMac.setStatus('current')
ccRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 8))
ccRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1))
ccRadiusDataSource = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("ldap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusDataSource.setStatus('current')
ccRadiusDefaultEapType = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ttls", 1), ("peap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusDefaultEapType.setStatus('current')
ccRadiusAuthTypePeap = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gtc", 1), ("msChap2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusAuthTypePeap.setStatus('current')
ccRadiusAuthTypeTtls = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("md5", 1), ("pap", 2), ("msChap2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusAuthTypeTtls.setStatus('current')
ccRadiusServerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusServerCertificate.setStatus('current')
ccRadiusCACertificate = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusCACertificate.setStatus('current')
ccRadiusClientAuthTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 8), )
if mibBuilder.loadTexts: ccRadiusClientAuthTable.setStatus('current')
ccRadiusClientAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 8, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRadiusClientAuthIndex"))
if mibBuilder.loadTexts: ccRadiusClientAuthEntry.setStatus('current')
ccRadiusClientAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRadiusClientAuthIndex.setStatus('current')
ccRadiusClientAuthIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusClientAuthIpAddr.setStatus('current')
ccRadiusClientAuthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusClientAuthMask.setStatus('current')
ccRadiusClientAuthSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 8, 1, 4), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusClientAuthSharedSecret.setStatus('current')
ccRadiusClientAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 1, 8, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusClientAuthRowStatus.setStatus('current')
ccRadiusProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2))
ccRadiusProxyRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusProxyRetryCount.setStatus('current')
ccRadiusProxyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 10))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusProxyTimeout.setStatus('current')
ccRadiusProxyServerTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3), )
if mibBuilder.loadTexts: ccRadiusProxyServerTable.setStatus('current')
ccRadiusProxyServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRadiusProxyServerIndex"))
if mibBuilder.loadTexts: ccRadiusProxyServerEntry.setStatus('current')
ccRadiusProxyServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccRadiusProxyServerIndex.setStatus('current')
ccRadiusProxyServerPrefixOrSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusProxyServerPrefixOrSuffix.setStatus('current')
ccRadiusProxyServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusProxyServerIp.setStatus('current')
ccRadiusProxyServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusProxyServerPort.setStatus('current')
ccRadiusProxyServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3, 1, 5), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusProxyServerSharedSecret.setStatus('current')
ccRadiusProxyServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 2, 3, 1, 6), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusProxyServerRowStatus.setStatus('current')
ccRadiusLdap = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3))
ccRadiusLdapServerIp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapServerIp.setStatus('current')
ccRadiusLdapServerPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapServerPort.setStatus('current')
ccRadiusLdapLoginAttribute = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapLoginAttribute.setStatus('current')
ccRadiusLdapPasswordAttribute = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapPasswordAttribute.setStatus('current')
ccRadiusLdapBindDistinguishedName = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapBindDistinguishedName.setStatus('current')
ccRadiusLdapBindDistinguishedPassword = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 6), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapBindDistinguishedPassword.setStatus('current')
ccRadiusLdapBaseDistinguishedName = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapBaseDistinguishedName.setStatus('current')
ccRadiusLdapGroupAttribute = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapGroupAttribute.setStatus('current')
ccRadiusLdapGroupFilter = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapGroupFilter.setStatus('current')
ccRadiusLdapGroupMembershipAttribute = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusLdapGroupMembershipAttribute.setStatus('current')
ccRadiusUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4))
ccRadiusUsersGroupTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 1), )
if mibBuilder.loadTexts: ccRadiusUsersGroupTable.setStatus('obsolete')
ccRadiusUsersGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRadiusUsersGroup"))
if mibBuilder.loadTexts: ccRadiusUsersGroupEntry.setStatus('obsolete')
ccRadiusUsersGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccRadiusUsersGroup.setStatus('obsolete')
ccRadiusUsersGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 1, 1, 2), AbbrevRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccRadiusUsersGroupRowStatus.setStatus('obsolete')
ccRadiusUsersGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRadiusUsersGroupId.setStatus('obsolete')
ccRadiusUsersTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 2), )
if mibBuilder.loadTexts: ccRadiusUsersTable.setStatus('current')
ccRadiusUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRadiusUsersId"))
if mibBuilder.loadTexts: ccRadiusUsersEntry.setStatus('current')
ccRadiusUsersId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccRadiusUsersId.setStatus('current')
ccRadiusUsersPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 2, 1, 2), Password().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccRadiusUsersPassword.setStatus('current')
ccRadiusUsersGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 2, 1, 3), Bits().clone(namedValues=NamedValues(("null", 0), ("group1", 1), ("group2", 2), ("group3", 3), ("group4", 4), ("group5", 5), ("group6", 6), ("group7", 7), ("group8", 8), ("group9", 9), ("group10", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccRadiusUsersGroups.setStatus('current')
ccRadiusUsersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 4, 2, 1, 4), AbbrevRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccRadiusUsersRowStatus.setStatus('current')
ccRadiusAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 5))
ccRadiusAccessTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 5, 1), )
if mibBuilder.loadTexts: ccRadiusAccessTable.setStatus('obsolete')
ccRadiusAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 5, 1, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccRadiusUsersGroup"))
if mibBuilder.loadTexts: ccRadiusAccessEntry.setStatus('obsolete')
ccRadiusAccessWlanPtrs = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 2, 8, 5, 1, 1, 2), Bits().clone(namedValues=NamedValues(("null", 0), ("wlan1", 1), ("wlan2", 2), ("wlan3", 3), ("wlan4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRadiusAccessWlanPtrs.setStatus('obsolete')
ccGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000))
ccGroupsV1dot0 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 1))
ccAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 1, 1)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccInfoSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccResetFactory"), ("SYMBOL-CC-WS2000-MIB", "ccResetSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwOperation"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwInterface"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwServerPath"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwStart"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwResult"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgOperation"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgServerPath"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgStart"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgOperationsDone"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgResult"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeCount"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeTime"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistSemaphore"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpLastDeniedIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccSysDNSRelayMode"), ("SYMBOL-CC-WS2000-MIB", "ccApSslv2Mode"), ("SYMBOL-CC-WS2000-MIB", "ccApSshv1Mode"), ("SYMBOL-CC-WS2000-MIB", "ccApSslWeakCipherSupport"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAclViolations"), ("SYMBOL-CC-WS2000-MIB", "ccLoadServerIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFtpUsername"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccAdminGroup = ccAdminGroup.setStatus('current')
ccNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 1, 2)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortalAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccPortalUnAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccPortalDenied"), ("SYMBOL-CC-WS2000-MIB", "ccMuAssociated"), ("SYMBOL-CC-WS2000-MIB", "ccMuUnAssociated"), ("SYMBOL-CC-WS2000-MIB", "ccMuDenied"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAclViolation"), ("SYMBOL-CC-WS2000-MIB", "ccConfigChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccNotificationsGroup = ccNotificationsGroup.setStatus('current')
ccApGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 1, 3)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccApIndex"), ("SYMBOL-CC-WS2000-MIB", "ccApNicMac"), ("SYMBOL-CC-WS2000-MIB", "ccApModelNumber"), ("SYMBOL-CC-WS2000-MIB", "ccApSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccApPcbRevision"), ("SYMBOL-CC-WS2000-MIB", "ccApBootLoaderRev"), ("SYMBOL-CC-WS2000-MIB", "ccApWispVersion"), ("SYMBOL-CC-WS2000-MIB", "ccApRuntimeFwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccApNumPortals"), ("SYMBOL-CC-WS2000-MIB", "ccApPointersToPortals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccApGroup = ccApGroup.setStatus('current')
ccPortalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 1, 4)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortalIndex"), ("SYMBOL-CC-WS2000-MIB", "ccPortalPointerToAp"), ("SYMBOL-CC-WS2000-MIB", "ccPortalPointersToWlans"), ("SYMBOL-CC-WS2000-MIB", "ccPortalOptions"), ("SYMBOL-CC-WS2000-MIB", "ccPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalNumberOfEss"), ("SYMBOL-CC-WS2000-MIB", "ccPortalNumberOfBss"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAssociatedMus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastReason"), ("SYMBOL-CC-WS2000-MIB", "ccPortalName"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLocation"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastAdoption"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRadioType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccPortalGroup = ccPortalGroup.setStatus('current')
ccAssociationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 1, 5)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccAssociationFirstAssociate"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationLastAssociate"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationCountAssociates"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccAssociationGroup = ccAssociationGroup.setStatus('current')
ccMuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 1, 6)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccMuMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuWlanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccMuWlanName"), ("SYMBOL-CC-WS2000-MIB", "ccMuPortalIndex"), ("SYMBOL-CC-WS2000-MIB", "ccMuPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuSymbolRogueApEna"), ("SYMBOL-CC-WS2000-MIB", "ccMuIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccMuType"), ("SYMBOL-CC-WS2000-MIB", "ccMuRadioType"), ("SYMBOL-CC-WS2000-MIB", "ccMuSupportedRates"), ("SYMBOL-CC-WS2000-MIB", "ccMuPowerMode"), ("SYMBOL-CC-WS2000-MIB", "ccMuAuthenticationMethod"), ("SYMBOL-CC-WS2000-MIB", "ccMuEncryptionMethod"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxUndecryptablePkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastActivity"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries01"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries02"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries03"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries04"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries05"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries06"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries07"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries08"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries09"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries10"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries11"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries12"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries13"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries14"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries15"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesNone"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesFailed"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesTotal"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastPortal"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastReason"), ("SYMBOL-CC-WS2000-MIB", "ccMuIsDataReady"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccMuGroup = ccMuGroup.setStatus('current')
ccGroupsV1dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 2))
ccGroupsV1dot5variables = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 2, 1))
for _ccGroupsV1dot5variables_obj in [[("SYMBOL-CC-WS2000-MIB", "ccInfoSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccInfoCountrySelection"), ("SYMBOL-CC-WS2000-MIB", "ccIdHwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdFwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdSwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdMibVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdCliVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdXmlVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccResetFactory"), ("SYMBOL-CC-WS2000-MIB", "ccResetSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccResetFactoryExceptIpSnmp"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwOperation"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwInterface"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwServerPath"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwStart"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwResult"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgOperation"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgServerPath"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgStart"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgOperationsDone"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgResult"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeCount"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeTime"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistSemaphore"), ("SYMBOL-CC-WS2000-MIB", "ccLoadServerIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFtpUsername"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFtpPassword"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAclViolations"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpLastDeniedIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccCompactFlashCapacity"), ("SYMBOL-CC-WS2000-MIB", "ccCompactFlashUsed"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsShortWindow"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsShortUpdateInterval"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsLongWindow"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsLongUpdateInterval"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlCfAlmostFullThreshold"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlFirewallUnderAttackDescription"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlFirewallUnderAttackRateLimit"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRadarDetectedPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRadarDetectedChannel"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsIndex"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsDescr"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsUnits"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetMu"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdMu"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetPortal"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdPortals"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetWlan"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdWlans"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsMinPktsForTrap"), ("SYMBOL-CC-WS2000-MIB", "ccApIndex"), ("SYMBOL-CC-WS2000-MIB", "ccApNicMac"), ("SYMBOL-CC-WS2000-MIB", "ccApModelNumber"), ("SYMBOL-CC-WS2000-MIB", "ccApSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccApPcbRevision"), ("SYMBOL-CC-WS2000-MIB", "ccApBootLoaderRev"), ("SYMBOL-CC-WS2000-MIB", "ccApWispVersion"), ("SYMBOL-CC-WS2000-MIB", "ccApRuntimeFwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccApNumPortals"), ("SYMBOL-CC-WS2000-MIB", "ccApPointersToPortals"), ("SYMBOL-CC-WS2000-MIB", "ccPortalIndex"), ("SYMBOL-CC-WS2000-MIB", "ccPortalPointerToAp"), ("SYMBOL-CC-WS2000-MIB", "ccPortalPointersToWlans"), ("SYMBOL-CC-WS2000-MIB", "ccPortalName"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLocation"), ("SYMBOL-CC-WS2000-MIB", "ccPortalOptions"), ("SYMBOL-CC-WS2000-MIB", "ccPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalNumberOfEss"), ("SYMBOL-CC-WS2000-MIB", "ccPortalNumberOfBss"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAssociatedMus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRadioType"), ("SYMBOL-CC-WS2000-MIB", "ccPortalChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastAdoption"), ("SYMBOL-CC-WS2000-MIB", "ccPortalState"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastReason"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsBeaconsTx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsBeaconsTxOctets"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeReqRx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeReqRxOctets"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetriesNone"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetries1"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetries2"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetriesFailed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespTxOctets"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxUndecryptablePkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastActivity"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPktsNone"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts01"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts02"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts03"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts04"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts05"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts06"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts07"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts08"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts09"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts10"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts11"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts12"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts13"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts14"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts15"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPktsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctetsNone"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets01"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets02"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets03"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets04"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets05"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets06"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets07"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets08"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets09"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets10"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets11"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets12"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets13"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets14"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets15"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctetsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kRfUtil"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kRfUtil"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationFirstAssociate"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationLastAssociate"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationCountAssociates"), ("SYMBOL-CC-WS2000-MIB", "ccMuMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuWlanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccMuWlanName"), ("SYMBOL-CC-WS2000-MIB", "ccMuIsDataReady"), ("SYMBOL-CC-WS2000-MIB", "ccMuPortalIndex"), ("SYMBOL-CC-WS2000-MIB", "ccMuPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuSymbolRogueApEna"), ("SYMBOL-CC-WS2000-MIB", "ccMuIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccMuType"), ("SYMBOL-CC-WS2000-MIB", "ccMuRadioType"), ("SYMBOL-CC-WS2000-MIB", "ccMuSupportedRates"), ("SYMBOL-CC-WS2000-MIB", "ccMuPowerMode"), ("SYMBOL-CC-WS2000-MIB", "ccMuAuthenticationMethod")], [("SYMBOL-CC-WS2000-MIB", "ccMuEncryptionMethod"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxUndecryptablePkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastActivity"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesNone"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries01"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries02"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries03"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries04"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries05"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries06"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries07"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries08"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries09"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries10"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries11"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries12"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries13"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries14"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries15"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesFailed"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesTotal"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastReason"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastPortal"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctetsNone"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets01"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets02"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets03"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets04"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets05"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets06"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets07"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets08"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets09"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets10"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets11"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets12"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets13"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets14"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets15"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctetsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalBest"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalWorst"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrBest"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrWorst"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccWlanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWlanName"), ("SYMBOL-CC-WS2000-MIB", "ccWlanEssid"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSubnet"), ("SYMBOL-CC-WS2000-MIB", "ccWlanPortalsAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccWlanEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWlanDisallowMuToMu"), ("SYMBOL-CC-WS2000-MIB", "ccWlanVoicePrioritization"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAnswerBroadcastEss"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMulticastAddr1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMulticastAddr2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMuAclDefault"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthentication"), ("SYMBOL-CC-WS2000-MIB", "ccWlanEncryption"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapReauthenticationEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapReauthenticationPeriod"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapReauthenticationMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius1Server"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius1Port"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius1SharedSecret"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius2Server"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius2Port"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius2SharedSecret"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuQuietPeriod"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuTxPeriod"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapServerTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapServerMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosRealmName"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosUsername"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosPassword"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcServerIp1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcPort1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcServerIp2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcPort2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcServerIpR"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcPortR"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepPassKey"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey3"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey4"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKeyToUse"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaBcastKeyRotation"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaKeyRotationInterval"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaKeyToUse"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaPassphrase"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaKey"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardPasskey"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey3"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey4"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKeyToUse"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxUndecryptablePkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanLastActivity"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt5pt5Mb")], [("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPktsNone"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts01"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts02"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts03"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts04"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts05"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts06"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts07"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts08"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts09"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts10"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts11"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts12"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts13"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts14"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts15"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPktsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctetsNone"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets01"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets02"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets03"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets04"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets05"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets06"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets07"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets08"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets09"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets10"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets11"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets12"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets13"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets14"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets15"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctetsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalBest"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalWorst"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalSum"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrBest"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrWorst"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrSum"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccWanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpSubnetMask"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpDefaultGateway"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpPrimaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpSecondaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanSubnetMask"), ("SYMBOL-CC-WS2000-MIB", "ccWanDefaultGateway"), ("SYMBOL-CC-WS2000-MIB", "ccWanPrimaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanSecondaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeUsername"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoePassword"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeKeepAlive"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeIdleTime"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeAuthType"), ("SYMBOL-CC-WS2000-MIB", "ccWanIpAddrIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanIpAddrEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallGlobalEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallDescription"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallAlwaysEnabled"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallMimeFloodMaxHeaderLength"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallMimeFloodMaxHeaders"), ("SYMBOL-CC-WS2000-MIB", "ccPortIndex"), ("SYMBOL-CC-WS2000-MIB", "ccPortType"), ("SYMBOL-CC-WS2000-MIB", "ccPortPoeEquipped"), ("SYMBOL-CC-WS2000-MIB", "ccPortStatus"), ("SYMBOL-CC-WS2000-MIB", "ccPortDuplex"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseNumSamples"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPp10kDropped"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPp10kDropped"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetries3OrMore"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kTxMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccPortSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccResetStatCounters")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        ccGroupsV1dot5variables = ccGroupsV1dot5variables.setObjects(*_ccGroupsV1dot5variables_obj)
    else:
        ccGroupsV1dot5variables = ccGroupsV1dot5variables.setObjects(*_ccGroupsV1dot5variables_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroupsV1dot5variables = ccGroupsV1dot5variables.setStatus('current')
ccGroupsV1dot5obsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 2, 2)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccLoadFtpPassword"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccResetMuCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroupsV1dot5obsoleted = ccGroupsV1dot5obsoleted.setStatus('obsolete')
ccGroupsV1dot5notifications = NotificationGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 2, 3)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortStatusChange"), ("SYMBOL-CC-WS2000-MIB", "ccCfAlmostFull"), ("SYMBOL-CC-WS2000-MIB", "ccFirewallUnderAttack"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsMu"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsPortal"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsWlan"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccRadarDetected"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccPortalUnAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccPortalDenied"), ("SYMBOL-CC-WS2000-MIB", "ccMuAssociated"), ("SYMBOL-CC-WS2000-MIB", "ccMuUnAssociated"), ("SYMBOL-CC-WS2000-MIB", "ccMuDenied"), ("SYMBOL-CC-WS2000-MIB", "ccConfigChange"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAclViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroupsV1dot5notifications = ccGroupsV1dot5notifications.setStatus('current')
ccGroupsV2dot0 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 3))
ccGroupsV2dot0variables = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 3, 1))
for _ccGroupsV2dot0variables_obj in [[("SYMBOL-CC-WS2000-MIB", "ccInfoSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccInfoCountrySelection"), ("SYMBOL-CC-WS2000-MIB", "ccIdHwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdFwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdSwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdMibVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdCliVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdXmlVersion"), ("SYMBOL-CC-WS2000-MIB", "ccIdSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccResetFactory"), ("SYMBOL-CC-WS2000-MIB", "ccResetSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccResetFactoryExceptIpSnmp"), ("SYMBOL-CC-WS2000-MIB", "ccResetStatCounters"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwOperation"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwInterface"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwServerPath"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwStart"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwResult"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFwSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgOperation"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgServerPath"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgServerFilename"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgStart"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgOperationsDone"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgResult"), ("SYMBOL-CC-WS2000-MIB", "ccLoadCfgSuccess"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeCount"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistChangeTime"), ("SYMBOL-CC-WS2000-MIB", "ccCfgHistSemaphore"), ("SYMBOL-CC-WS2000-MIB", "ccLoadServerIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFtpUsername"), ("SYMBOL-CC-WS2000-MIB", "ccLoadFtpPassword"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAclViolations"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpLastDeniedIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV12Index"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV12Community"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV12CustomOid"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV12OidLimit"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV12Access"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV12Enable"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3Index"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3SecurityLevel"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3CustomOid"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3OidLimit"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3Access"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3AuthAlgorithm"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3AuthPassword"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3PrivacyAlgorithm"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3PrivacyPassword"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3Enable"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessControlIndex"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessControlStartIp"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessControlEndIp"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessControlEnable"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV12Index"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV12DestinationIp"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV12Port"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV12Community"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV12Version"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV12Enable"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3Index"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3DestinationIp"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3Port"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3Username"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3SecurityLevel"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3AuthAlgorithm"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3AuthPassword"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3PrivacyAlgorithm"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3PrivacyPassword"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpTrapSinkV3Enable"), ("SYMBOL-CC-WS2000-MIB", "ccCompactFlashCapacity"), ("SYMBOL-CC-WS2000-MIB", "ccCompactFlashUsed"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsShortWindow"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsShortUpdateInterval"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsLongWindow"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsLongUpdateInterval"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessToAllow"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessAirbeamAllow"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessAirbeamPassword"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessAdminAuth"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessAdminPassword"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessAdminAuthRadiusServerIp"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessAdminAuthRadiusServerPort"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessAdminAuthRadiusSharedSecret"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessSshAuthTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessSshInactivityTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccLoggingLevel"), ("SYMBOL-CC-WS2000-MIB", "ccLoggingToSyslog"), ("SYMBOL-CC-WS2000-MIB", "ccLoggingSyslogServer"), ("SYMBOL-CC-WS2000-MIB", "ccNtpEnable"), ("SYMBOL-CC-WS2000-MIB", "ccNtp0Server"), ("SYMBOL-CC-WS2000-MIB", "ccNtp0Port"), ("SYMBOL-CC-WS2000-MIB", "ccNtp1Server"), ("SYMBOL-CC-WS2000-MIB", "ccNtp1Port"), ("SYMBOL-CC-WS2000-MIB", "ccNtp2Server"), ("SYMBOL-CC-WS2000-MIB", "ccNtp2Port"), ("SYMBOL-CC-WS2000-MIB", "ccNtpGmtHourOffset"), ("SYMBOL-CC-WS2000-MIB", "ccNtpGmtMinuteOffset"), ("SYMBOL-CC-WS2000-MIB", "ccDhcpOptionsUpdateFwEna"), ("SYMBOL-CC-WS2000-MIB", "ccDhcpOptionsUpdateCfgEna"), ("SYMBOL-CC-WS2000-MIB", "ccDhcpOptionsUpdateInterface"), ("SYMBOL-CC-WS2000-MIB", "ccDhcpOptionsUpdateFwFilename"), ("SYMBOL-CC-WS2000-MIB", "ccDhcpOptionsUpdateCfgFilename"), ("SYMBOL-CC-WS2000-MIB", "ccRedundancyAdminState"), ("SYMBOL-CC-WS2000-MIB", "ccRedundancyOperState"), ("SYMBOL-CC-WS2000-MIB", "ccRedundancyHeartbeatInterval"), ("SYMBOL-CC-WS2000-MIB", "ccRedundancyRevertDelay"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlCfAlmostFullThreshold"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlFirewallUnderAttackDescription"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlFirewallUnderAttackRateLimit"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRadarDetectedPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRadarDetectedChannel"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsIndex"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsDescr"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsUnits"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetMu"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdMu"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetPortal"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdPortals"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetWlan"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdWlans"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsCanBeSetSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsThresholdSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlSumStatsMinPktsForTrap"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlLanVlanActivatedVlanId"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlDhcpOptionsFileTransferStatusRequested"), ("SYMBOL-CC-WS2000-MIB", "ccApIndex"), ("SYMBOL-CC-WS2000-MIB", "ccApNicMac"), ("SYMBOL-CC-WS2000-MIB", "ccApModelNumber"), ("SYMBOL-CC-WS2000-MIB", "ccApSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccApPcbRevision"), ("SYMBOL-CC-WS2000-MIB", "ccApBootLoaderRev"), ("SYMBOL-CC-WS2000-MIB", "ccApWispVersion"), ("SYMBOL-CC-WS2000-MIB", "ccApRuntimeFwVersion"), ("SYMBOL-CC-WS2000-MIB", "ccApNumPortals"), ("SYMBOL-CC-WS2000-MIB", "ccApPointersToPortals"), ("SYMBOL-CC-WS2000-MIB", "ccPortalIndex"), ("SYMBOL-CC-WS2000-MIB", "ccPortalPointerToAp"), ("SYMBOL-CC-WS2000-MIB", "ccPortalPointersToWlans"), ("SYMBOL-CC-WS2000-MIB", "ccPortalName"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLocation"), ("SYMBOL-CC-WS2000-MIB", "ccPortalOptions"), ("SYMBOL-CC-WS2000-MIB", "ccPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalNumberOfEss"), ("SYMBOL-CC-WS2000-MIB", "ccPortalNumberOfBss"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAssociatedMus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRadioType"), ("SYMBOL-CC-WS2000-MIB", "ccPortalChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastAdoption"), ("SYMBOL-CC-WS2000-MIB", "ccPortalState"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseNumSamples"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalBackgroundNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastReason"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAdoptionIndex"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAdoptionStartMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAdoptionEndMac"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAdoptionWlanPointers"), ("SYMBOL-CC-WS2000-MIB", "ccPortalAdoptionRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsBeaconsTx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsBeaconsTxOctets"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeReqRx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeReqRxOctets"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetriesNone"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetries1"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetries2"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetriesFailed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespTxOctets"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxUndecryptablePkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalLastActivity"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalRxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPktsNone"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts01"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts02"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts03"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts04"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts05"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts06"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts07"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts08"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts09"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts10"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts11"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts12"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts13"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts14"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts15"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPktsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctetsNone"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets01"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets02"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets03"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets04")], [("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets05"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets06"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets07"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets08"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets09"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets10"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets11"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets12"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets13"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets14"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctets15"), ("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesOctetsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSignalMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsNoiseMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrBest"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrWorst"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrSum"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSigStatsSnrMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsShortPp10kRfUtil"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kRfUtil"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationFirstAssociate"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationLastAssociate"), ("SYMBOL-CC-WS2000-MIB", "ccAssociationCountAssociates"), ("SYMBOL-CC-WS2000-MIB", "ccMuMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuWlanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccMuWlanName"), ("SYMBOL-CC-WS2000-MIB", "ccMuIsDataReady"), ("SYMBOL-CC-WS2000-MIB", "ccMuPortalIndex"), ("SYMBOL-CC-WS2000-MIB", "ccMuPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuSymbolRogueApEna"), ("SYMBOL-CC-WS2000-MIB", "ccMuIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccMuType"), ("SYMBOL-CC-WS2000-MIB", "ccMuRadioType"), ("SYMBOL-CC-WS2000-MIB", "ccMuSupportedRates"), ("SYMBOL-CC-WS2000-MIB", "ccMuPowerMode"), ("SYMBOL-CC-WS2000-MIB", "ccMuAuthenticationMethod"), ("SYMBOL-CC-WS2000-MIB", "ccMuEncryptionMethod"), ("SYMBOL-CC-WS2000-MIB", "ccMuVlanId"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxUndecryptablePkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxRssiMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastActivity"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuRxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesNone"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries01"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries02"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries03"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries04"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries05"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries06"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries07"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries08"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries09"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries10"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries11"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries12"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries13"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries14"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetries15"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesFailed"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesTotal"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastMac"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastReason"), ("SYMBOL-CC-WS2000-MIB", "ccMuLastPortal"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctetsNone"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets01"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets02"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets03"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets04"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets05"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets06"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets07"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets08"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets09"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets10"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets11"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets12"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets13"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets14"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctets15"), ("SYMBOL-CC-WS2000-MIB", "ccMuTxRetriesOctetsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalBest"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalWorst"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSignalMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsNoiseMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrBest"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrWorst"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrSum"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccMuSigStatsSnrMostRecent"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsShortPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccMuSumStatsLongPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccWlanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWlanName"), ("SYMBOL-CC-WS2000-MIB", "ccWlanEssid"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSubnet"), ("SYMBOL-CC-WS2000-MIB", "ccWlanPortalsAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccWlanEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWlanDisallowMuToMu"), ("SYMBOL-CC-WS2000-MIB", "ccWlanVoicePrioritization"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAnswerBroadcastEss"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMulticastAddr1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMulticastAddr2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMuAclDefault"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthentication"), ("SYMBOL-CC-WS2000-MIB", "ccWlanEncryption"), ("SYMBOL-CC-WS2000-MIB", "ccWlanWeight"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapReauthenticationEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapReauthenticationPeriod"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapReauthenticationMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius1Server"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius1Port"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius1SharedSecret"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius2Server"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius2Port"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadius2SharedSecret")], [("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuQuietPeriod"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuTxPeriod"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapMuMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapServerTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapServerMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosRealmName"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosUsername"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosPassword"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcServerIp1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcPort1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcServerIp2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcPort2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcServerIpR"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthKerberosKdcPortR"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepPassKey"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey3"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey4"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKeyToUse"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaBcastKeyRotation"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaKeyRotationInterval"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaKeyToUse"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaPassphrase"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaKey"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardPasskey"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey2"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey3"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKey4"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoKeyguardKeyToUse"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMuAclIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMuAclStartingMac"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMuAclEndingMac"), ("SYMBOL-CC-WS2000-MIB", "ccWlanMuAclRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccWlanBwShareMode"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsNUcast"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxUndecryptablePkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanLastActivity"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxPktsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanRxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt1Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt2Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt5pt5Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt6Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt9Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt11Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt12Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt18Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt22Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt24Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt36Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt48Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxOctetsAt54Mb"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPktsNone"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts01"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts02"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts03"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts04"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts05"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts06"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts07"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts08"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts09"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts10"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts11"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts12"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts13"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts14"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPkts15"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesPktsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctetsNone"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets01"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets02"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets03"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets04"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets05"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets06"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets07"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets08"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets09"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets10"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets11"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets12"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets13"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets14"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctets15"), ("SYMBOL-CC-WS2000-MIB", "ccWlanTxRetriesOctetsFailed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalBest"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalWorst"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalSum"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSignalSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseBest"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseWorst"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseSum"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsNoiseSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrBest"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrWorst"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrSum"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSigStatsSnrSumSquares"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongTimestamp"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongNumPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPktsPerSec100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPktsPerSecTx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPktsPerSecRx100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongThroughput"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongThroughputTx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongThroughputRx"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgBitSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgMuSignal"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgMuNoise"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongAvgMuSnr"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPp10kNUcastPkts"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPp10kTxWithRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongTxAvgRetries100"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPp10kRxUndecrypt"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongTotalMus"), ("SYMBOL-CC-WS2000-MIB", "ccWanIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpSubnetMask"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpDefaultGateway"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpPrimaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanDhcpSecondaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanSubnetMask"), ("SYMBOL-CC-WS2000-MIB", "ccWanDefaultGateway"), ("SYMBOL-CC-WS2000-MIB", "ccWanPrimaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanSecondaryDnsServer"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeUsername"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoePassword"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeKeepAlive"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeIdleTime"), ("SYMBOL-CC-WS2000-MIB", "ccWanPppoeAuthType"), ("SYMBOL-CC-WS2000-MIB", "ccWanIpAddrIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanIpAddrEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallGlobalEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallDescription"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallAlwaysEnabled"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallMimeFloodMaxHeaderLength"), ("SYMBOL-CC-WS2000-MIB", "ccWanFirewallMimeFloodMaxHeaders"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatWanIpAddress"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatType"), ("SYMBOL-CC-WS2000-MIB", "ccWanNat1to1IpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundDefaultEna"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundDefaultIp"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundName"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundTransport"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundStartPort"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundEndPort"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatOutboundSubnetIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatOutboundPossibleIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatOutboundIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnName"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnLocalSubnet"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnLocalWanIp"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnRemoteSubnet"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnRemoteSubnetMask"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnRemoteGateway"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyExchange"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualAhAuth"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualInAhAuthKey"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualOutAhAuthKey"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualInAhSpi"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualOutAhSpi"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualEspType"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualEspEncrypAlg"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualInEspEncrypKey"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualOutEspEncrypKey"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualEspAuthAlg"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualInEspAuthKey"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualOutEspAuthKey"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualInEspSpi"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyManualOutEspSpi"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoUsePerfectSecrecy"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoAhAuth"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoEspType"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoEspEncrypAlg"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoEspAuthAlg"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeOperationMode"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeLocalIdType"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeLocalIdData"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeRemoteIdType"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeRemoteIdData"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeAuthAlg"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeAuthPassphrase")], [("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeEncrypAlg"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeXauthMode"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeXauthUsername"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeXauthPassword"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeKeyLifetime"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeDiffieHelmanGroup"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnSaTunnelName"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnSaStatus"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnSaInSpi"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnSaOutSpi"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnSaLifetime"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnSaTxBytes"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnSaRxBytes"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnIkeTunnelName"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnIkeState"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnIkeRemainingLife"), ("SYMBOL-CC-WS2000-MIB", "ccWanContentBlockSmtp"), ("SYMBOL-CC-WS2000-MIB", "ccWanContentBlockFtp"), ("SYMBOL-CC-WS2000-MIB", "ccWanContentBlockHttp"), ("SYMBOL-CC-WS2000-MIB", "ccWanContentBlockOutUrlIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanContentBlockOutUrlExtension"), ("SYMBOL-CC-WS2000-MIB", "ccWanContentBlockOutUrlRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccPortIndex"), ("SYMBOL-CC-WS2000-MIB", "ccPortType"), ("SYMBOL-CC-WS2000-MIB", "ccPortPoeEquipped"), ("SYMBOL-CC-WS2000-MIB", "ccPortStatus"), ("SYMBOL-CC-WS2000-MIB", "ccPortDuplex"), ("SYMBOL-CC-WS2000-MIB", "ccPortSpeed"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetIndex"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetEnable"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetName"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetIpAddress"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetIpSubnetMask"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetPortMembers"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetWlanMembers"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpState"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpIpAddress"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpSubnetMask"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerEnable"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerPoolStart"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerPoolEnd"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerPrimaryDns"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerSecondaryDns"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerDefaultGateway"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerLeaseTime"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerStaticMapMac"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerStaticMapIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerStaticMapEnable"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessDestIndex"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleIndex"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessDestType"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessDestPtrToDest"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleName"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleType"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInIndex"), ("SYMBOL-CC-WS2000-MIB", "ccLanVlanType"), ("SYMBOL-CC-WS2000-MIB", "ccLanVlanTrunkPort"), ("SYMBOL-CC-WS2000-MIB", "ccLanVlanDefaultTag"), ("SYMBOL-CC-WS2000-MIB", "ccLanVlanTrunked"), ("SYMBOL-CC-WS2000-MIB", "ccLanVlanId"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRipType"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRipDirection"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRip2AuthType"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRip2SimplePassword"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRip2Md5Key1Id"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRip2Md5Key1AuthKey"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRip2Md5Key2Id"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRip2Md5Key2AuthKey"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRoutesIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRoutesDest"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRoutesDestMask"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRoutesGateway"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRoutesInterface"), ("SYMBOL-CC-WS2000-MIB", "ccRouterRoutesMetric"), ("SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesDest"), ("SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesDestMask"), ("SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesGateway"), ("SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesInterface"), ("SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesMetric"), ("SYMBOL-CC-WS2000-MIB", "ccRouterUserRoutesRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollSymbolMusEnable"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollSymbolMusInterval"), ("SYMBOL-CC-WS2000-MIB", "ccRapOnChannelEnable"), ("SYMBOL-CC-WS2000-MIB", "ccRapOnChannelInterval"), ("SYMBOL-CC-WS2000-MIB", "ccRapDetectorsEnable"), ("SYMBOL-CC-WS2000-MIB", "ccRapDetectorsInterval"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthAllSymbolMac"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthMacFilter"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthEssidFilter"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthRowExists"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthErase"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthCopyAllApproved"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedAgeOut"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedApMac"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedEssid"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedCopyToAuthTable"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedFirstHeard"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedLastHeard"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedPortalPtr"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedHowFound"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedHowAuth"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedErase"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueAgeOut"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueApMac"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueEssid"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueCopyToAuthTable"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueFirstHeard"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueLastHeard"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRoguePortalPtr"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueHowFound"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueClosestPortalPtr"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueClosestPortalRssi"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueErase"), ("SYMBOL-CC-WS2000-MIB", "ccRapPortalResultsApMac"), ("SYMBOL-CC-WS2000-MIB", "ccRapPortalResultsApEssid"), ("SYMBOL-CC-WS2000-MIB", "ccRapPortalResultsInProcess"), ("SYMBOL-CC-WS2000-MIB", "ccRapPortalResultsPortalMac"), ("SYMBOL-CC-WS2000-MIB", "ccRapPortalResultsRssi"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuMac"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuInProcess"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuStatus"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuResultsIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuResultsRssi"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuResultsEssid"), ("SYMBOL-CC-WS2000-MIB", "ccRapPollOneMuResultsApMac"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusDataSource"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusDefaultEapType"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusClientAuthIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusClientAuthIpAddr"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusClientAuthMask"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusClientAuthSharedSecret"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyRetryCount"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyServerIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyServerIp"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyServerPort"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyServerSharedSecret"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapServerIp"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapServerPort"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapLoginAttribute"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapPasswordAttribute"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapBindDistinguishedName"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapBindDistinguishedPassword"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapBaseDistinguishedName"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapGroupAttribute"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapGroupFilter"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusLdapGroupMembershipAttribute"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusUsersId"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusUsersPassword"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusUsersGroups"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusUsersRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccNtpCurrentDateTime"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusAuthTypePeap"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusAuthTypeTtls"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusClientAuthRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyServerPrefixOrSuffix"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInSrcIp"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInSrcIpLength"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInDestIp"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInDestIpLength"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInTransport"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInSrcPortStart"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInSrcPortEnd"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInDestPortStart"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInDestPortEnd"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInAction"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutIndex"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutSrcIp"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutSrcIpLength"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutDestIp"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutDestIpLength"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutTransport"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutSrcPortStart"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutSrcPortEnd"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutDestPortStart"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutDestPortEnd"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutReverseNat"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutAction"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlRedundancyPreviousOperState"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOutRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatLowestUnusedSlot"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessPtrToRules"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleSrcPtr"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleDestPtr"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleTransport"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleStartPort"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleEndPort"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessRuleRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlEnableIndex"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlEnableName"), ("SYMBOL-CC-WS2000-MIB", "ccTrapCtrlEnable"), ("SYMBOL-CC-WS2000-MIB", "ccWlanQosMonitorSent"), ("SYMBOL-CC-WS2000-MIB", "ccWlanQosMonitorDropped"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortPp10kDropped"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusProxyServerRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatOutboundEnable"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueIndex"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongPp10kDropped"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAccessV3User"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpV3EngineId"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqIndex"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqKeyId"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqSubject"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqDept"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqOrg"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqCity"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqState"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqPostal"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqCountry"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqEmail"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqDomain"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqIp"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqSigAlgo"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqKeyLen"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqGenReq"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqCertReqStr"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsReqRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedStr"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedImport"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedIndex"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedKeyId"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedIssuerName"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedSubject"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedExpiry"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsSignedDeleteRow"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsStr"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsImport"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsIndex"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsKeyId"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsIssuerName"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsSubject"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsSerialNumber"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsExpiry"), ("SYMBOL-CC-WS2000-MIB", "ccCACertsDeleteRow"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsName"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsLocation"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsAntenna"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsShortPreamble"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsUniSpread"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsRtsThresh"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsBeaconInt"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDtimPrd"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsSecBeacon"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsPriWlan"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsBasicRates"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsSupportedRates"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsBGMode"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsAdoptedWlan"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDesPlacement")], [("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioPosChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDesChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioPosPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDesPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioPowerInMW"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioSet"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioReset"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioPlacement"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultAntenna"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultShortPreamble"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultUniSpread"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultRtsThresh"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultBeaconInt"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultDtimPrd"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultSecBeacon"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultPriWlan"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultBasicRates"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultSupportedRates"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultBGMode"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultDesPlacement"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultPosChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultDesChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultPosPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultDesPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultSet"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultReset"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultPlacement"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultPowerLevel"), ("SYMBOL-CC-WS2000-MIB", "cc802dt1xPortAuthLogin"), ("SYMBOL-CC-WS2000-MIB", "cc802dt1xPortAuthPass"), ("SYMBOL-CC-WS2000-MIB", "cc802dt1xPortAuthSetAp300"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDefaultIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRapPortalResultsIndex"), ("SYMBOL-CC-WS2000-MIB", "ccRapAuthCopyAllRogue"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSettingsDetector"), ("SYMBOL-CC-WS2000-MIB", "ccRedundancyHeartbeatInterface"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusCACertificate"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusServerCertificate"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerDomainName"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetDhcpServerWinsServer"), ("SYMBOL-CC-WS2000-MIB", "ccCertMgntSelfCertsIdName"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSystemStatsProbeRespRetries3OrMore"), ("SYMBOL-CC-WS2000-MIB", "ccPortalSumStatsLongPp10kTxMaxRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoFastRoamKeyCache"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoFastRoamPreAuth"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoAllowTkipClient"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoKey"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoPassphrase"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoKeyToUse"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoKeyRotationInterval"), ("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWpaTwoBcastKeyRotation"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvOverrideMode"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvImportRules"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapSyslogMode"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapSyslogSeverIp"), ("SYMBOL-CC-WS2000-MIB", "ccMgmtAccessHttpsTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccNtpSyncInterval"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccLoggingDeleteCoreFile"), ("SYMBOL-CC-WS2000-MIB", "ccLoggingTransferCoreFile"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadiusAcctMuRetries"), ("SYMBOL-CC-WS2000-MIB", "ccWanVpnKeyAutoIkeAuthType"), ("SYMBOL-CC-WS2000-MIB", "ccWanNatInboundTranslationPort"), ("SYMBOL-CC-WS2000-MIB", "ccRedundancyOperMode"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsApprovedChannel"), ("SYMBOL-CC-WS2000-MIB", "ccRapResultsRogueChannel"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultDesPowerInMW"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDesPowerInMW"), ("SYMBOL-CC-WS2000-MIB", "ccPortalCfgRadioDefaultPowerInMW"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadiusAcctMode"), ("SYMBOL-CC-WS2000-MIB", "ccWlanAuthEapRadiusAcctMuTimeout"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInReverseNatIp"), ("SYMBOL-CC-WS2000-MIB", "ccSubnetAccessAdvInReverseNatPort")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        ccGroupsV2dot0variables = ccGroupsV2dot0variables.setObjects(*_ccGroupsV2dot0variables_obj)
    else:
        ccGroupsV2dot0variables = ccGroupsV2dot0variables.setObjects(*_ccGroupsV2dot0variables_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroupsV2dot0variables = ccGroupsV2dot0variables.setStatus('current')
ccGroupsV2dot0obsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 3, 2)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsShortSkip1"), ("SYMBOL-CC-WS2000-MIB", "ccWlanSumStatsLongSkip1"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusAccessWlanPtrs"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusUsersGroup"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusUsersGroupRowStatus"), ("SYMBOL-CC-WS2000-MIB", "ccRadiusUsersGroupId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroupsV2dot0obsoleted = ccGroupsV2dot0obsoleted.setStatus('obsolete')
ccGroupsV2dot0notifications = NotificationGroup((1, 3, 6, 1, 4, 1, 388, 11, 2, 1000, 3, 3)).setObjects(("SYMBOL-CC-WS2000-MIB", "ccPortalAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccPortalUnAdopted"), ("SYMBOL-CC-WS2000-MIB", "ccPortalDenied"), ("SYMBOL-CC-WS2000-MIB", "ccMuAssociated"), ("SYMBOL-CC-WS2000-MIB", "ccMuUnAssociated"), ("SYMBOL-CC-WS2000-MIB", "ccMuDenied"), ("SYMBOL-CC-WS2000-MIB", "ccConfigChange"), ("SYMBOL-CC-WS2000-MIB", "ccSnmpAclViolation"), ("SYMBOL-CC-WS2000-MIB", "ccPortStatusChange"), ("SYMBOL-CC-WS2000-MIB", "ccCfAlmostFull"), ("SYMBOL-CC-WS2000-MIB", "ccFirewallUnderAttack"), ("SYMBOL-CC-WS2000-MIB", "ccRadarDetected"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsMu"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsPortal"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsWlan"), ("SYMBOL-CC-WS2000-MIB", "ccSumStatsSwitch"), ("SYMBOL-CC-WS2000-MIB", "ccLanVlanActivated"), ("SYMBOL-CC-WS2000-MIB", "ccDhcpOptionsFileTransferStatus"), ("SYMBOL-CC-WS2000-MIB", "ccRapNewApprovedAp"), ("SYMBOL-CC-WS2000-MIB", "ccRapNewRogueAp"), ("SYMBOL-CC-WS2000-MIB", "ccRedundancyStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroupsV2dot0notifications = ccGroupsV2dot0notifications.setStatus('current')
mibBuilder.exportSymbols("SYMBOL-CC-WS2000-MIB", ccWanIpAddrIndex=ccWanIpAddrIndex, ccRapResultsApprovedLastHeard=ccRapResultsApprovedLastHeard, ccPortEntry=ccPortEntry, ccDhcpOptionsFileTransferStatus=ccDhcpOptionsFileTransferStatus, ccPortalSettingsDefaultShortPreamble=ccPortalSettingsDefaultShortPreamble, ccRadiusProxyServerRowStatus=ccRadiusProxyServerRowStatus, ccCertMgntSelfCertsReqSubject=ccCertMgntSelfCertsReqSubject, ccSnmpAccessControlStartIp=ccSnmpAccessControlStartIp, ccMuSigStatsSignalMostRecent=ccMuSigStatsSignalMostRecent, ccCACertsSubject=ccCACertsSubject, ccRouterRoutesIndex=ccRouterRoutesIndex, ccRapResultsApprovedEssid=ccRapResultsApprovedEssid, ccMuVlanId=ccMuVlanId, ccWlanTxPktsAt36Mb=ccWlanTxPktsAt36Mb, ccWlanSumStatsLongTotalMus=ccWlanSumStatsLongTotalMus, ccMuSumStatsShortNumPkts=ccMuSumStatsShortNumPkts, ccWlanRxOctetsAt11Mb=ccWlanRxOctetsAt11Mb, ccMuTxOctetsAt1Mb=ccMuTxOctetsAt1Mb, ccMgmtAccessHttpsTimeout=ccMgmtAccessHttpsTimeout, ccSubnetDhcpIpAddress=ccSubnetDhcpIpAddress, ccTrapCtrlSumStatsThresholdPortals=ccTrapCtrlSumStatsThresholdPortals, ccTrapCtrlFirewallUnderAttackDescription=ccTrapCtrlFirewallUnderAttackDescription, ccNtpEnable=ccNtpEnable, ccRadiusUsers=ccRadiusUsers, ccWlanCryptoWepTable=ccWlanCryptoWepTable, ccMuSumStatsShortPp10kRxUndecrypt=ccMuSumStatsShortPp10kRxUndecrypt, ccMuSigStatsSignalWorst=ccMuSigStatsSignalWorst, ccWanContentBlockHttp=ccWanContentBlockHttp, ccWlanMuAclRowStatus=ccWlanMuAclRowStatus, ccPortalCfgRadioChannel=ccPortalCfgRadioChannel, ccMuTxRetries11=ccMuTxRetries11, ccRadiusClientAuthRowStatus=ccRadiusClientAuthRowStatus, ccPortalTxPktsAt12Mb=ccPortalTxPktsAt12Mb, ccRapOnChannelInterval=ccRapOnChannelInterval, ccPortalSystemStatsProbeRespRetries2=ccPortalSystemStatsProbeRespRetries2, ccSubnetAccessAdvInSrcIpLength=ccSubnetAccessAdvInSrcIpLength, ccWanNatInboundIpAddr=ccWanNatInboundIpAddr, ccPortalTxPktsAt11Mb=ccPortalTxPktsAt11Mb, ccPortalTxPktsAt1Mb=ccPortalTxPktsAt1Mb, ccMuTxRetries10=ccMuTxRetries10, ccRapPollOneMuResultsEssid=ccRapPollOneMuResultsEssid, ccWlanSumStatsLongThroughputRx=ccWlanSumStatsLongThroughputRx, ccWlanRxOctetsAt54Mb=ccWlanRxOctetsAt54Mb, ccMuRxOctetsAt22Mb=ccMuRxOctetsAt22Mb, ccPortalSettingsDefaultAntenna=ccPortalSettingsDefaultAntenna, ccRapResultsRogueLastHeard=ccRapResultsRogueLastHeard, ccRadiusDefaultEapType=ccRadiusDefaultEapType, ccTrapCtrlSumStatsThresholdSwitch=ccTrapCtrlSumStatsThresholdSwitch, ccWanNatOutboundEntry=ccWanNatOutboundEntry, ccApGroup=ccApGroup, ccMuEncryptionMethod=ccMuEncryptionMethod, ccDhcpOptionsUpdateCfgFilename=ccDhcpOptionsUpdateCfgFilename, ccMuRxPktsAt9Mb=ccMuRxPktsAt9Mb, ccWlanStatsTable=ccWlanStatsTable, ccWlanRxOctetsAt48Mb=ccWlanRxOctetsAt48Mb, ccWlanTxRetriesPktsTable=ccWlanTxRetriesPktsTable, ccCertMgntSelfCertsSignedKeyId=ccCertMgntSelfCertsSignedKeyId, ccPortalRxOctetsUcast=ccPortalRxOctetsUcast, ccWlanSumStatsShortThroughputTx=ccWlanSumStatsShortThroughputTx, ccWanVpnKeyManualInEspAuthKey=ccWanVpnKeyManualInEspAuthKey, ccRapResultsRogueHowFound=ccRapResultsRogueHowFound, ccCertMgntSelfCertsReqCertReqStr=ccCertMgntSelfCertsReqCertReqStr, ccPortalTxOctetsAt48Mb=ccPortalTxOctetsAt48Mb, ccWlanTxPktsAt18Mb=ccWlanTxPktsAt18Mb, ccMuTxPktsAt12Mb=ccMuTxPktsAt12Mb, ccWanDhcpSubnetMask=ccWanDhcpSubnetMask, ccPortalTxRetriesPktsTable=ccPortalTxRetriesPktsTable, ccTrapCtrlPortStatusChange=ccTrapCtrlPortStatusChange, ccSnmpAccessControlEntry=ccSnmpAccessControlEntry, ccWlanSumStatsShortPktsPerSecTx100=ccWlanSumStatsShortPktsPerSecTx100, ccAssociation=ccAssociation, ccWanVpnKeyManualInEspEncrypKey=ccWanVpnKeyManualInEspEncrypKey, ccPortalSumStatsLongPp10kTxMaxRetries=ccPortalSumStatsLongPp10kTxMaxRetries, ccWlanEnable=ccWlanEnable, ccWlanTxOctetsEntry=ccWlanTxOctetsEntry, ccMgmtAccessSshInactivityTimeout=ccMgmtAccessSshInactivityTimeout, ccMuSumStatsLongTxAvgRetries100=ccMuSumStatsLongTxAvgRetries100, ccPortalSystemStatsTable=ccPortalSystemStatsTable, ccPortalCfgRadioDefaultEntry=ccPortalCfgRadioDefaultEntry, ccWlanAuthentication=ccWlanAuthentication, ccWlanSigStatsSnrWorst=ccWlanSigStatsSnrWorst, ccGroupsV1dot5obsoleted=ccGroupsV1dot5obsoleted, ccWlanTxRetriesPktsFailed=ccWlanTxRetriesPktsFailed, ccSnmpAccessV3OidLimit=ccSnmpAccessV3OidLimit, ccSubnetAccessRuleType=ccSubnetAccessRuleType, ccPortalSystemStatsProbeRespRetries3OrMore=ccPortalSystemStatsProbeRespRetries3OrMore, ccPortalCfgRadioSet=ccPortalCfgRadioSet, ccSubnetAccessAdvImportRules=ccSubnetAccessAdvImportRules, ccWanFirewall=ccWanFirewall, ccMuSigStatsNoiseBest=ccMuSigStatsNoiseBest, ccWlanTxPktsAt11Mb=ccWlanTxPktsAt11Mb, ccPortalAdoptionIndex=ccPortalAdoptionIndex, ccAssociationCountAssociates=ccAssociationCountAssociates, ccPortalTxRetriesOctetsNone=ccPortalTxRetriesOctetsNone, ccWanVpnName=ccWanVpnName, RowStatus=RowStatus, ccSumStatsShortUpdateInterval=ccSumStatsShortUpdateInterval, ccPortalSettingsBeaconInt=ccPortalSettingsBeaconInt, ccPortalSettingsDefaultUniSpread=ccPortalSettingsDefaultUniSpread, ccMuSumStatsLongEntry=ccMuSumStatsLongEntry, ccWlanAuthEapMuTxPeriod=ccWlanAuthEapMuTxPeriod, ccPortalRxPktsAt36Mb=ccPortalRxPktsAt36Mb, ccTrapCtrlSumStatsPortal=ccTrapCtrlSumStatsPortal, ccSnmpAccessV3AuthAlgorithm=ccSnmpAccessV3AuthAlgorithm, ccPortalTxRetriesOctets14=ccPortalTxRetriesOctets14, ccPortalTxRetriesOctetsEntry=ccPortalTxRetriesOctetsEntry, ccMgmtAccessAirbeamPassword=ccMgmtAccessAirbeamPassword, ccMuRxPktsAt1Mb=ccMuRxPktsAt1Mb, ccPortalTxOctetsAt54Mb=ccPortalTxOctetsAt54Mb, ccSubnetDhcpServerLeaseTime=ccSubnetDhcpServerLeaseTime, ccSubnetName=ccSubnetName, ccWlanSigStatsSignalWorst=ccWlanSigStatsSignalWorst, ccSnmpAccess=ccSnmpAccess, ccPortalTxRetriesOctets13=ccPortalTxRetriesOctets13, ccPortalTxRetriesOctets02=ccPortalTxRetriesOctets02, ccSubnetDhcpServerDefaultGateway=ccSubnetDhcpServerDefaultGateway, ccWlanTxPktsTable=ccWlanTxPktsTable, ccWlanAuthKerberosKdcPortR=ccWlanAuthKerberosKdcPortR, ccWlanSumStatsLongNumPkts=ccWlanSumStatsLongNumPkts, ccGroupsV1dot5=ccGroupsV1dot5, ccRapPortalResultsApMac=ccRapPortalResultsApMac, ccLoadFwServerPath=ccLoadFwServerPath, ccWanPppoeKeepAlive=ccWanPppoeKeepAlive, ccMuSumStatsShortTable=ccMuSumStatsShortTable, ccWanVpnKeyAutoEspEncrypAlg=ccWanVpnKeyAutoEspEncrypAlg, ccRouterRoutesEntry=ccRouterRoutesEntry, ccSnmpTrapSinkV3SecurityLevel=ccSnmpTrapSinkV3SecurityLevel, ccCertMgntSelfCertsIdName=ccCertMgntSelfCertsIdName, ccRapResultsApprovedErase=ccRapResultsApprovedErase, ccApModelNumber=ccApModelNumber, ccWlanCryptoWepPassKey=ccWlanCryptoWepPassKey, ccTrapCtrlSumStatsWlan=ccTrapCtrlSumStatsWlan, ccSnmpAccessControlEndIp=ccSnmpAccessControlEndIp, ccRedundancyOperMode=ccRedundancyOperMode, ccMuPowerMode=ccMuPowerMode, ccMuRxUndecryptablePkts=ccMuRxUndecryptablePkts, ccWlanRxPktsAt9Mb=ccWlanRxPktsAt9Mb, ccWlanTxOctetsAt5pt5Mb=ccWlanTxOctetsAt5pt5Mb, ccMuIpAddr=ccMuIpAddr, ccSnmpAccessV3Index=ccSnmpAccessV3Index, ccRapResultsApprovedIndex=ccRapResultsApprovedIndex, ccPortalSystemStatsProbeReqRxOctets=ccPortalSystemStatsProbeReqRxOctets, ccMuTxOctetsEntry=ccMuTxOctetsEntry, ccRapResultsRogueTable=ccRapResultsRogueTable, ccWlanTxRetriesPktsNone=ccWlanTxRetriesPktsNone, ccWlanTxPktsAt54Mb=ccWlanTxPktsAt54Mb, ccWlanTxPktsAt1Mb=ccWlanTxPktsAt1Mb, ccWlan=ccWlan, ccRouterRip=ccRouterRip, ccRedundancyHeartbeatInterface=ccRedundancyHeartbeatInterface, ccRouter=ccRouter, ccRapAuthEntry=ccRapAuthEntry, ccMuTxRetriesOctets12=ccMuTxRetriesOctets12, ccWlanSumStatsShortAvgMuSnr=ccWlanSumStatsShortAvgMuSnr, ccMuRxOctetsAt18Mb=ccMuRxOctetsAt18Mb, ccMgmtAccessAdminPassword=ccMgmtAccessAdminPassword, ccWanIpAddrEnable=ccWanIpAddrEnable, ccRadiusLdap=ccRadiusLdap, ccSnmpV3EngineId=ccSnmpV3EngineId, ccPortalRxOctetsAt2Mb=ccPortalRxOctetsAt2Mb, ccMuSumStatsShortTimestamp=ccMuSumStatsShortTimestamp, ccPortalSumStatsShortPp10kTxMaxRetries=ccPortalSumStatsShortPp10kTxMaxRetries, ccLoggingLevel=ccLoggingLevel, ccWlanTxRetriesPkts02=ccWlanTxRetriesPkts02, ccCertMgntSelfCertsReqIndex=ccCertMgntSelfCertsReqIndex, ccTrapCtrlSumStatsIndex=ccTrapCtrlSumStatsIndex, cc802dt1xPortAuthPass=cc802dt1xPortAuthPass, ccMuSumStatsShortPp10kTxWithRetries=ccMuSumStatsShortPp10kTxWithRetries, ccMuSumStatsLongPp10kDropped=ccMuSumStatsLongPp10kDropped, ccWlanEncryption=ccWlanEncryption, ccPortalTxRetriesOctets06=ccPortalTxRetriesOctets06, ccWlanCryptoWpaPassphrase=ccWlanCryptoWpaPassphrase, ccSubnetAccessAdvOutTransport=ccSubnetAccessAdvOutTransport, ccWlanSumStatsLongAvgMuSnr=ccWlanSumStatsLongAvgMuSnr, ccSubnetAccessRuleStartPort=ccSubnetAccessRuleStartPort, ccPortalSumStatsShortPp10kRxUndecrypt=ccPortalSumStatsShortPp10kRxUndecrypt, ccWanNatType=ccWanNatType, PYSNMP_MODULE_ID=moduleid, ccCACertsIssuerName=ccCACertsIssuerName, ccSubnetDhcpServerEntry=ccSubnetDhcpServerEntry, ccMuRxPktsAt2Mb=ccMuRxPktsAt2Mb, ccWlanCryptoWpaTwoKeyRotationInterval=ccWlanCryptoWpaTwoKeyRotationInterval, ccSubnetAccessRuleTable=ccSubnetAccessRuleTable, ccWlanSumStatsLongAvgMuSignal=ccWlanSumStatsLongAvgMuSignal, ccWanPppoeTable=ccWanPppoeTable, ccRapResultsRogueErase=ccRapResultsRogueErase, ccMuSumStatsLongPktsPerSec100=ccMuSumStatsLongPktsPerSec100, ccPortalSettingsTable=ccPortalSettingsTable, ccMuSumStatsLongPp10kNUcastPkts=ccMuSumStatsLongPp10kNUcastPkts, ccSubnetAccessRuleSrcPtr=ccSubnetAccessRuleSrcPtr, ccPortalGroup=ccPortalGroup, ccSubnetAccessAdvInIndex=ccSubnetAccessAdvInIndex, ccWanContentBlockOutUrlIndex=ccWanContentBlockOutUrlIndex, ccCertMgntSelfCertsSignedTable=ccCertMgntSelfCertsSignedTable, ccSnmpAccessV3PrivacyAlgorithm=ccSnmpAccessV3PrivacyAlgorithm, ccSubnetAccessAdvInSrcPortStart=ccSubnetAccessAdvInSrcPortStart, ccRapResults=ccRapResults, ccRedundancyOperState=ccRedundancyOperState, ccWlanCryptoWpaTable=ccWlanCryptoWpaTable, ccWlanTxOctetsAt18Mb=ccWlanTxOctetsAt18Mb, ccWlanTxOctetsAt1Mb=ccWlanTxOctetsAt1Mb, ccPortalSigStatsSignalSumSquares=ccPortalSigStatsSignalSumSquares, ccCfAlmostFull=ccCfAlmostFull, ccPortalTxPktsAt48Mb=ccPortalTxPktsAt48Mb, ccWlanTxPktsAt5pt5Mb=ccWlanTxPktsAt5pt5Mb, ccRapResultsApprovedCopyToAuthTable=ccRapResultsApprovedCopyToAuthTable, ccWlanVoicePrioritization=ccWlanVoicePrioritization, ccWlanRxUndecryptablePkts=ccWlanRxUndecryptablePkts, ccPortalCfgRadioPlacement=ccPortalCfgRadioPlacement, ccPortalRxPktsAt2Mb=ccPortalRxPktsAt2Mb, ccTrapCtrlRadarDetected=ccTrapCtrlRadarDetected, ccMuTxRetriesOctets07=ccMuTxRetriesOctets07, ccMuTxPktsAt18Mb=ccMuTxPktsAt18Mb, ccLanVlanActivated=ccLanVlanActivated, ccRapResultsApprovedTable=ccRapResultsApprovedTable, ccAdmin=ccAdmin, ccReset=ccReset, ccWlanTxOctetsAt48Mb=ccWlanTxOctetsAt48Mb, ccMuRxPktsAt18Mb=ccMuRxPktsAt18Mb, ccWanVpnSaStatus=ccWanVpnSaStatus, ccWlanQosMonitorDropped=ccWlanQosMonitorDropped, ccRadiusUsersRowStatus=ccRadiusUsersRowStatus, ccPortalCfgRadioDefaultPowerInMW=ccPortalCfgRadioDefaultPowerInMW, ccPortalSettingsBGMode=ccPortalSettingsBGMode, ccCertMgntSelfCerts=ccCertMgntSelfCerts, ccPortalTxPktsAt22Mb=ccPortalTxPktsAt22Mb, ccMuSumStatsShortAvgMuSnr=ccMuSumStatsShortAvgMuSnr, ccWlanCryptoWpaKeyToUse=ccWlanCryptoWpaKeyToUse, ccWlanLastActivity=ccWlanLastActivity, ccWanVpnIkeTunnelName=ccWanVpnIkeTunnelName, ccMuTxRetries12=ccMuTxRetries12, ccPortalSumStatsShortThroughputTx=ccPortalSumStatsShortThroughputTx, ccMuSupportedRates=ccMuSupportedRates, ccWanPppoeIdleTime=ccWanPppoeIdleTime, ccPortalSumStatsShortTimestamp=ccPortalSumStatsShortTimestamp, ccNtp2Port=ccNtp2Port, ccMuSumStatsLongPktsPerSecRx100=ccMuSumStatsLongPktsPerSecRx100, ccMuSumStatsShortAvgMuSignal=ccMuSumStatsShortAvgMuSignal, ccCertMgntSelfCertsSignedIssuerName=ccCertMgntSelfCertsSignedIssuerName, ccAssociationGroup=ccAssociationGroup, ccRedundancyStateChange=ccRedundancyStateChange, ccSnmpAccessControlIndex=ccSnmpAccessControlIndex, ccPortalTxRetriesOctetsTable=ccPortalTxRetriesOctetsTable, ccMuRxRssiMostRecent=ccMuRxRssiMostRecent, ccWlanCryptoKeyguardTable=ccWlanCryptoKeyguardTable, ccRadiusAccessTable=ccRadiusAccessTable, ccWanFirewallAlwaysEnabled=ccWanFirewallAlwaysEnabled, ccWanVpnKeyAutoUsePerfectSecrecy=ccWanVpnKeyAutoUsePerfectSecrecy, ccMuTxPktsEntry=ccMuTxPktsEntry, ccMuSigStatsNumPkts=ccMuSigStatsNumPkts, ccSubnetDhcpServerStaticMapEnable=ccSubnetDhcpServerStaticMapEnable, ccApNicMac=ccApNicMac, ccRadiusAccessWlanPtrs=ccRadiusAccessWlanPtrs, ccWlanAuthEapRadius2Server=ccWlanAuthEapRadius2Server)
mibBuilder.exportSymbols("SYMBOL-CC-WS2000-MIB", ccSubnetAccessAdvInSrcPortEnd=ccSubnetAccessAdvInSrcPortEnd, ccMuTxOctetsAt2Mb=ccMuTxOctetsAt2Mb, ccSnmpTrapSinkV12Port=ccSnmpTrapSinkV12Port, ccIdXmlVersion=ccIdXmlVersion, ccWlanSigStatsNoiseWorst=ccWlanSigStatsNoiseWorst, ccMuWlanIndex=ccMuWlanIndex, ccWanVpnKeyAutoIkeRemoteIdData=ccWanVpnKeyAutoIkeRemoteIdData, ccSubnetAccessAdvOutIndex=ccSubnetAccessAdvOutIndex, ccMuTxPktsAt1Mb=ccMuTxPktsAt1Mb, ccPortalSystemStatsBeaconsTxOctets=ccPortalSystemStatsBeaconsTxOctets, RadioType=RadioType, ccPortalSettingsDefaultBGMode=ccPortalSettingsDefaultBGMode, ccMuRxPktsEntry=ccMuRxPktsEntry, ccApRuntimeFwVersion=ccApRuntimeFwVersion, ccLoadCfg=ccLoadCfg, ccWlanAuthEapRadius2Port=ccWlanAuthEapRadius2Port, ccWanVpnKeyAutoIkeXauthUsername=ccWanVpnKeyAutoIkeXauthUsername, ccSnmpTrapSinkV12Version=ccSnmpTrapSinkV12Version, ccWlanSumStatsShortPp10kNUcastPkts=ccWlanSumStatsShortPp10kNUcastPkts, ccRedundancy=ccRedundancy, ccMuTxRetries09=ccMuTxRetries09, ccCertMgntSelfCertsReqKeyId=ccCertMgntSelfCertsReqKeyId, ccMuTxRetriesOctetsFailed=ccMuTxRetriesOctetsFailed, ccWlanEntry=ccWlanEntry, ccWanVpnKeyAutoIkeLocalIdType=ccWanVpnKeyAutoIkeLocalIdType, ccSysDNSRelayMode=ccSysDNSRelayMode, ccMuSumStatsShortPp10kDropped=ccMuSumStatsShortPp10kDropped, ccMuTxRetries03=ccMuTxRetries03, ccMuSumStatsLongPktsPerSecTx100=ccMuSumStatsLongPktsPerSecTx100, ccLoadCfgResult=ccLoadCfgResult, ccSnmpAccessV12Enable=ccSnmpAccessV12Enable, ccWanFirewallIndex=ccWanFirewallIndex, ccWlanTxRetriesOctets05=ccWlanTxRetriesOctets05, ccPortalTxRetriesOctets08=ccPortalTxRetriesOctets08, ccPortalTxRetriesOctets01=ccPortalTxRetriesOctets01, ccPortTable=ccPortTable, ccWlanAuthEapMuMaxRetries=ccWlanAuthEapMuMaxRetries, ccNtpGmtMinuteOffset=ccNtpGmtMinuteOffset, ccWlanRxPktsAt6Mb=ccWlanRxPktsAt6Mb, ccWlanAuthKerberosTable=ccWlanAuthKerberosTable, ccCertMgntSelfCertsReqState=ccCertMgntSelfCertsReqState, ccWanNatInboundStartPort=ccWanNatInboundStartPort, ccRapAuthTable=ccRapAuthTable, ccLoggingDeleteCoreFile=ccLoggingDeleteCoreFile, ccPortalSettingsDefaultDtimPrd=ccPortalSettingsDefaultDtimPrd, ccWanVpnSaLifetime=ccWanVpnSaLifetime, ccWlanTxRetriesOctets09=ccWlanTxRetriesOctets09, ccLoadCfgOperation=ccLoadCfgOperation, ccApPcbRevision=ccApPcbRevision, ccWanNatOutboundTable=ccWanNatOutboundTable, ccSumStatsShortWindow=ccSumStatsShortWindow, ccRapResultsRogueFirstHeard=ccRapResultsRogueFirstHeard, ccResetSwitch=ccResetSwitch, ccRapResultsApprovedHowFound=ccRapResultsApprovedHowFound, wsd=wsd, ccPortalSettingsDefaultEntry=ccPortalSettingsDefaultEntry, ccTrapCtrlRedundancyPreviousOperState=ccTrapCtrlRedundancyPreviousOperState, ccSubnetAccessAdvInDestIp=ccSubnetAccessAdvInDestIp, ccRadiusUsersGroupTable=ccRadiusUsersGroupTable, ccMuTxOctetsAt48Mb=ccMuTxOctetsAt48Mb, ccWlanSumStatsShortTimestamp=ccWlanSumStatsShortTimestamp, ccRadiusUsersId=ccRadiusUsersId, ccSubnetDhcpServerEnable=ccSubnetDhcpServerEnable, ccRapResultsApprovedFirstHeard=ccRapResultsApprovedFirstHeard, ccMuRxRssiSum=ccMuRxRssiSum, ccWlanSigStatsTable=ccWlanSigStatsTable, ccPortalTxPktsAt18Mb=ccPortalTxPktsAt18Mb, ccRedundancyAdminState=ccRedundancyAdminState, ccPortalTxRetriesPkts06=ccPortalTxRetriesPkts06, ccIdMibVersion=ccIdMibVersion, ccMuWlanName=ccMuWlanName, ccDhcpOptionsUpdateInterface=ccDhcpOptionsUpdateInterface, ccCertMgntSelfCertsSignedEntry=ccCertMgntSelfCertsSignedEntry, ccPortalBackgroundNoiseWorst=ccPortalBackgroundNoiseWorst, ccPortalRxOctetsAt18Mb=ccPortalRxOctetsAt18Mb, ccWlanTxRetriesPkts05=ccWlanTxRetriesPkts05, ccCertMgntSelfCertsSignedStr=ccCertMgntSelfCertsSignedStr, ccWlanTxRetriesOctets13=ccWlanTxRetriesOctets13, ccTrapCtrlDhcpOptionsFileTransferStatus=ccTrapCtrlDhcpOptionsFileTransferStatus, ccTrapCtrlSumStats=ccTrapCtrlSumStats, ccMuRxOctetsNUcast=ccMuRxOctetsNUcast, ccTrapCtrlPortalAdopted=ccTrapCtrlPortalAdopted, ccSnmpAccessV12Community=ccSnmpAccessV12Community, ccWlanSigStatsSignalSumSquares=ccWlanSigStatsSignalSumSquares, ccPortalSettingsDefaultTable=ccPortalSettingsDefaultTable, ccMgmtAccessAdminAuthRadiusSharedSecret=ccMgmtAccessAdminAuthRadiusSharedSecret, ccRadiusLdapGroupAttribute=ccRadiusLdapGroupAttribute, ccConfigChange=ccConfigChange, ccPortalTxRetriesPktsEntry=ccPortalTxRetriesPktsEntry, ccMuSigStatsTable=ccMuSigStatsTable, ccWlanSumStatsShortNumPkts=ccWlanSumStatsShortNumPkts, ccMuRxPktsAt36Mb=ccMuRxPktsAt36Mb, ws2k=ws2k, SinglePointer=SinglePointer, ccWanVpnKeyManualInAhAuthKey=ccWanVpnKeyManualInAhAuthKey, ccGroupsV2dot0=ccGroupsV2dot0, ccWanVpnSaTunnelName=ccWanVpnSaTunnelName, ccWlanRxPktsAt5pt5Mb=ccWlanRxPktsAt5pt5Mb, ccRapControlDetectors=ccRapControlDetectors, ccRapResultsRogue=ccRapResultsRogue, ccMuRxPktsAt12Mb=ccMuRxPktsAt12Mb, ccWlanTxOctetsUcast=ccWlanTxOctetsUcast, ccTrapCtrlLanVlanActivatedVlanId=ccTrapCtrlLanVlanActivatedVlanId, ccWlanAuthEapMuQuietPeriod=ccWlanAuthEapMuQuietPeriod, ccWlanSumStatsLongPp10kNUcastPkts=ccWlanSumStatsLongPp10kNUcastPkts, ccWanPppoeEnable=ccWanPppoeEnable, ccSubnet=ccSubnet, ccPortalCfgRadioDefaultReset=ccPortalCfgRadioDefaultReset, ccWlanAuthEapReauthenticationMaxRetries=ccWlanAuthEapReauthenticationMaxRetries, ccRadiusUsersGroupRowStatus=ccRadiusUsersGroupRowStatus, ccWlanCryptoKeyguardKey3=ccWlanCryptoKeyguardKey3, ccPortalTxRetriesPktsNone=ccPortalTxRetriesPktsNone, ccPortalTxRetriesPkts05=ccPortalTxRetriesPkts05, ccWlanSumStatsLongPktsPerSecTx100=ccWlanSumStatsLongPktsPerSecTx100, ccRadiusCACertificate=ccRadiusCACertificate, ccRapResultsApproved=ccRapResultsApproved, ccSnmp=ccSnmp, ccPortalTxOctetsAt1Mb=ccPortalTxOctetsAt1Mb, ccPortalTxOctetsAt24Mb=ccPortalTxOctetsAt24Mb, ccRapNewApprovedAp=ccRapNewApprovedAp, ccMuTxRetriesOctets14=ccMuTxRetriesOctets14, ccWanVpnKeyAutoIkeXauthMode=ccWanVpnKeyAutoIkeXauthMode, ccSnmpTrapSinkV3Entry=ccSnmpTrapSinkV3Entry, ccPortalSystemStatsProbeRespRetriesFailed=ccPortalSystemStatsProbeRespRetriesFailed, ccMuRxOctetsAt12Mb=ccMuRxOctetsAt12Mb, ccPortalAdoptionStartMac=ccPortalAdoptionStartMac, ccPortalTxRetriesPkts13=ccPortalTxRetriesPkts13, ccTrapCtrlCfAlmostFull=ccTrapCtrlCfAlmostFull, ccMuTxRetriesOctets09=ccMuTxRetriesOctets09, ccCACertsStr=ccCACertsStr, ccTrapCtrlSumStatsTable=ccTrapCtrlSumStatsTable, ccWlanAuthEapReauthenticationEnable=ccWlanAuthEapReauthenticationEnable, ccSubnetWlanMembers=ccSubnetWlanMembers, ccSubnetAccessAdvInDestPortEnd=ccSubnetAccessAdvInDestPortEnd, MultiPointer63=MultiPointer63, ccSwitch=ccSwitch, ccSubnetAccessAdvOutDestIp=ccSubnetAccessAdvOutDestIp, ccWanFirewallEnable=ccWanFirewallEnable, ccApBootLoaderRev=ccApBootLoaderRev, ccWlanCryptoWpaTwoPassphrase=ccWlanCryptoWpaTwoPassphrase, ccPortalSumStatsShortTable=ccPortalSumStatsShortTable, ccRadiusAccess=ccRadiusAccess, ccRouterUserRoutesRowStatus=ccRouterUserRoutesRowStatus, ccRadiusUsersGroup=ccRadiusUsersGroup, ccRouterUserRoutesDestMask=ccRouterUserRoutesDestMask, ccWlanTxRetriesPkts07=ccWlanTxRetriesPkts07, ccWlanRxOctetsAt12Mb=ccWlanRxOctetsAt12Mb, ccWanFirewallTable=ccWanFirewallTable, ccMuRxPktsNUcast=ccMuRxPktsNUcast, ccRapResultsApprovedChannel=ccRapResultsApprovedChannel, ccWanIndex=ccWanIndex, ccRadiusLdapPasswordAttribute=ccRadiusLdapPasswordAttribute, ccLoadFwResult=ccLoadFwResult, ccWanVpnKeyManualOutAhSpi=ccWanVpnKeyManualOutAhSpi, ccNtp2Server=ccNtp2Server, ccMuSumStatsLongThroughputRx=ccMuSumStatsLongThroughputRx, ccPortIndex=ccPortIndex, ccMuRxPktsAt22Mb=ccMuRxPktsAt22Mb, AbbrevRowStatus=AbbrevRowStatus, ccWanNatOutboundPossibleIpAddr=ccWanNatOutboundPossibleIpAddr, ccSubnetTable=ccSubnetTable, ccWanVpnKeyAutoIkeDiffieHelmanGroup=ccWanVpnKeyAutoIkeDiffieHelmanGroup, ccPortSpeed=ccPortSpeed, ccPortalAssociatedMus=ccPortalAssociatedMus, ccMuSigStatsNoiseWorst=ccMuSigStatsNoiseWorst, ccMuSigStatsSnrSumSquares=ccMuSigStatsSnrSumSquares, ccRapResultsRogueEssid=ccRapResultsRogueEssid, ccPortalSumStatsLongNumPkts=ccPortalSumStatsLongNumPkts, ccMuAssociated=ccMuAssociated, ccSubnetDhcpServerPoolStart=ccSubnetDhcpServerPoolStart, ccPortalTxOctetsAt5pt5Mb=ccPortalTxOctetsAt5pt5Mb, ccWanVpnTable=ccWanVpnTable, ccMgmtAccessAdminAuth=ccMgmtAccessAdminAuth, ccWlanCryptoWepKey1=ccWlanCryptoWepKey1, ccSnmpAccessV3SecurityLevel=ccSnmpAccessV3SecurityLevel, ccWlanSumStatsLongAvgMuNoise=ccWlanSumStatsLongAvgMuNoise, ccPortDuplex=ccPortDuplex, ccSnmpTrapSinkV3PrivacyPassword=ccSnmpTrapSinkV3PrivacyPassword, ccSubnetAccessAdvInTransport=ccSubnetAccessAdvInTransport, ccMgmtAccessAirbeamAllow=ccMgmtAccessAirbeamAllow, ccMuTxPktsAt11Mb=ccMuTxPktsAt11Mb, ccWlanSigStatsSnrBest=ccWlanSigStatsSnrBest, ccWlanCrypto=ccWlanCrypto, ccSnmpAccessV3User=ccSnmpAccessV3User, ccWlanSigStatsNoiseBest=ccWlanSigStatsNoiseBest, ccRouterUserRoutesTable=ccRouterUserRoutesTable, ccTrapCtrlSumStatsThresholdWlans=ccTrapCtrlSumStatsThresholdWlans, ccSnmpAccessV3CustomOid=ccSnmpAccessV3CustomOid, ccNtp0Port=ccNtp0Port, ccWlanTable=ccWlanTable, ccSubnetDhcpServerStaticMapIpAddr=ccSubnetDhcpServerStaticMapIpAddr, ccPortalTxOctetsAt2Mb=ccPortalTxOctetsAt2Mb, ccPortalTxRetriesOctets04=ccPortalTxRetriesOctets04, ccPortalSigStatsEntry=ccPortalSigStatsEntry, ccSnmpTrapSinkV3DestinationIp=ccSnmpTrapSinkV3DestinationIp, ccWlanIndex=ccWlanIndex, ccRouterRoutesGateway=ccRouterRoutesGateway, ccWlanCryptoWpaTwoKeyToUse=ccWlanCryptoWpaTwoKeyToUse, ccRapNewRogueAp=ccRapNewRogueAp, ccMuSumStatsLongThroughput=ccMuSumStatsLongThroughput, ccPortalTxRetriesPkts12=ccPortalTxRetriesPkts12, ccWanVpnSaTable=ccWanVpnSaTable, ccSubnetAccessAdvInDestIpLength=ccSubnetAccessAdvInDestIpLength, ccMuRxOctetsAt54Mb=ccMuRxOctetsAt54Mb, ccWanNatInboundEndPort=ccWanNatInboundEndPort, ccWanVpnKeyManualOutEspSpi=ccWanVpnKeyManualOutEspSpi, ccApSslv2Mode=ccApSslv2Mode, ccWanVpnIkeEntry=ccWanVpnIkeEntry, ccRapAuthList=ccRapAuthList, ccTrapCtrlCfAlmostFullThreshold=ccTrapCtrlCfAlmostFullThreshold, ccRapPortalResultsRssi=ccRapPortalResultsRssi, ccPortalSettingsBasicRates=ccPortalSettingsBasicRates, ccMgmtAccessAdmin=ccMgmtAccessAdmin, ccMuRfSum=ccMuRfSum, ccPortalCfgRadioTable=ccPortalCfgRadioTable, ccSnmpTrapSinkV3Username=ccSnmpTrapSinkV3Username, ccMuSumStatsShortPktsPerSec100=ccMuSumStatsShortPktsPerSec100, ccWanNatInboundName=ccWanNatInboundName, ccWlanTxRetriesOctets14=ccWlanTxRetriesOctets14, ccNtpGmtHourOffset=ccNtpGmtHourOffset, ccMuTxOctetsAt22Mb=ccMuTxOctetsAt22Mb, ccWlanTxRetriesOctets07=ccWlanTxRetriesOctets07, ccPortalCfgRadioDefaultDesPowerLevel=ccPortalCfgRadioDefaultDesPowerLevel, ccMuRxOctetsEntry=ccMuRxOctetsEntry, ccSnmpAccessV3Enable=ccSnmpAccessV3Enable, ccCACertsTable=ccCACertsTable, ccPortalCfgRadioPowerInMW=ccPortalCfgRadioPowerInMW, ccWlanCryptoWpaTwoFastRoamKeyCache=ccWlanCryptoWpaTwoFastRoamKeyCache, ccRadiusClientAuthIndex=ccRadiusClientAuthIndex, ccWanVpnKeyManualEspType=ccWanVpnKeyManualEspType, ccNtp1Port=ccNtp1Port, ccWlanTxPktsAt24Mb=ccWlanTxPktsAt24Mb, ccCertMgntSelfCertsReqIp=ccCertMgntSelfCertsReqIp, ccNtpCurrentDateTime=ccNtpCurrentDateTime, ccPortalIndex=ccPortalIndex, ccWlanCryptoKeyguardPasskey=ccWlanCryptoKeyguardPasskey, ccTrapCtrlDetails=ccTrapCtrlDetails, ccMuTxOctetsAt18Mb=ccMuTxOctetsAt18Mb, ccPortalSumStatsShortPp10kNUcastPkts=ccPortalSumStatsShortPp10kNUcastPkts, ccPortalStatsEntry=ccPortalStatsEntry, ccPort=ccPort, ccWlanAuthKerberosKdcPort2=ccWlanAuthKerberosKdcPort2, ccPortalCfgRadioDefaultSet=ccPortalCfgRadioDefaultSet, ccMuSumStatsLongThroughputTx=ccMuSumStatsLongThroughputTx, ccTrapCtrlEnableEntry=ccTrapCtrlEnableEntry, ccMuTxOctetsAt6Mb=ccMuTxOctetsAt6Mb, ccWlanTxRetriesOctets12=ccWlanTxRetriesOctets12, ccRapPollOneMu=ccRapPollOneMu, ccMuLastMac=ccMuLastMac, ccWlanRxOctetsAt1Mb=ccWlanRxOctetsAt1Mb, ccMuTxOctetsAt9Mb=ccMuTxOctetsAt9Mb, ccWlanTxRetriesOctets01=ccWlanTxRetriesOctets01, ccMuTxRetriesOctets04=ccMuTxRetriesOctets04, ccWanNatWanIpAddress=ccWanNatWanIpAddress)
mibBuilder.exportSymbols("SYMBOL-CC-WS2000-MIB", ccMuSigStatsNoiseSumSquares=ccMuSigStatsNoiseSumSquares, ccWanSubnetMask=ccWanSubnetMask, ccIdFwVersion=ccIdFwVersion, ccMuTxRetriesOctets13=ccMuTxRetriesOctets13, ccWlanSumStatsShortEntry=ccWlanSumStatsShortEntry, ccMuTxRetries08=ccMuTxRetries08, ccRouterUserRoutesIndex=ccRouterUserRoutesIndex, ccWlanAuthEapEntry=ccWlanAuthEapEntry, ccMuSumStatsShortAvgBitSpeed=ccMuSumStatsShortAvgBitSpeed, ccSnmpTrapSinkV12Enable=ccSnmpTrapSinkV12Enable, ccPortalRxOctetsAt12Mb=ccPortalRxOctetsAt12Mb, ccWanVpnRemoteSubnetMask=ccWanVpnRemoteSubnetMask, ccSnmpAccessV3PrivacyPassword=ccSnmpAccessV3PrivacyPassword, ccWanFirewallMimeFloodMaxHeaderLength=ccWanFirewallMimeFloodMaxHeaderLength, ccPortalSumStatsShortAvgMuSignal=ccPortalSumStatsShortAvgMuSignal, ccMuTxRetries14=ccMuTxRetries14, ccWlanAuthEapServerTimeout=ccWlanAuthEapServerTimeout, ccMuSumStatsLongTable=ccMuSumStatsLongTable, ccMuSigStatsSignalSum=ccMuSigStatsSignalSum, ccWlanTxOctetsAt11Mb=ccWlanTxOctetsAt11Mb, ccWanVpnLocalWanIp=ccWanVpnLocalWanIp, ccSnmpAccessV12Index=ccSnmpAccessV12Index, ccPortalSumStatsShortTotalMus=ccPortalSumStatsShortTotalMus, ccMuTxRetriesMostRecent=ccMuTxRetriesMostRecent, ccMuSigStatsSnrSum=ccMuSigStatsSnrSum, ccTrapCtrlSumStatsCanBeSetWlan=ccTrapCtrlSumStatsCanBeSetWlan, DoActionShowProgress=DoActionShowProgress, ccMuTxRetriesOctets01=ccMuTxRetriesOctets01, ccWlanSigStatsSignalBest=ccWlanSigStatsSignalBest, ccPortalSystemStatsEntry=ccPortalSystemStatsEntry, ccLoadFwStart=ccLoadFwStart, ccApEntry=ccApEntry, ccPortalCfgRadioDefaultPowerLevel=ccPortalCfgRadioDefaultPowerLevel, ccWlanSumStatsShortThroughput=ccWlanSumStatsShortThroughput, ccWlanRxOctetsAt2Mb=ccWlanRxOctetsAt2Mb, ccWlanSumStatsLongTimestamp=ccWlanSumStatsLongTimestamp, ccWanIpAddrTable=ccWanIpAddrTable, ccPortalSystemStatsBeaconsTx=ccPortalSystemStatsBeaconsTx, ccPortalRxPktsAt5pt5Mb=ccPortalRxPktsAt5pt5Mb, ccWan=ccWan, ccPortalSigStatsNoiseSum=ccPortalSigStatsNoiseSum, ccWlanMuAclStartingMac=ccWlanMuAclStartingMac, ccWlanTxOctetsAt22Mb=ccWlanTxOctetsAt22Mb, ccRadiusProxy=ccRadiusProxy, ccRouterRipType=ccRouterRipType, ccMuRxOctetsAt1Mb=ccMuRxOctetsAt1Mb, ccRadiusProxyServerPrefixOrSuffix=ccRadiusProxyServerPrefixOrSuffix, ccPortalSumStatsLongPktsPerSecTx100=ccPortalSumStatsLongPktsPerSecTx100, ccPortalTxPktsUcast=ccPortalTxPktsUcast, ccWlanQosMonitorTable=ccWlanQosMonitorTable, ccWlanSumStatsLongPp10kRxUndecrypt=ccWlanSumStatsLongPp10kRxUndecrypt, ccRapPollOneMuResultsTable=ccRapPollOneMuResultsTable, ccPortalTxRetriesOctetsFailed=ccPortalTxRetriesOctetsFailed, ccPortalRxPktsUcast=ccPortalRxPktsUcast, ccWanDhcpDefaultGateway=ccWanDhcpDefaultGateway, ccWanNatInboundTransport=ccWanNatInboundTransport, ccPortalRxPktsAt12Mb=ccPortalRxPktsAt12Mb, ccCertMgntSelfCertsReqEntry=ccCertMgntSelfCertsReqEntry, ccPortalCfgRadioDefaultDesPowerInMW=ccPortalCfgRadioDefaultDesPowerInMW, ccMuRxPktsAt5pt5Mb=ccMuRxPktsAt5pt5Mb, ccWlanTxRetriesPkts14=ccWlanTxRetriesPkts14, ccMuStatsEntry=ccMuStatsEntry, ccWlanTxRetriesPkts10=ccWlanTxRetriesPkts10, ccWlanRxPktsUcast=ccWlanRxPktsUcast, ccWanVpnKeyManualOutEspEncrypKey=ccWanVpnKeyManualOutEspEncrypKey, ccPortalTxRetriesPkts02=ccPortalTxRetriesPkts02, ccPortalRxPktsAt9Mb=ccPortalRxPktsAt9Mb, ccPortalCfgRadioPosChannel=ccPortalCfgRadioPosChannel, ccMuSumStatsLongNumPkts=ccMuSumStatsLongNumPkts, ccWanNatInboundRowStatus=ccWanNatInboundRowStatus, ccSubnetDhcpServerDomainName=ccSubnetDhcpServerDomainName, ccCfgHist=ccCfgHist, ccMuSigStatsSignalSumSquares=ccMuSigStatsSignalSumSquares, ccPortalSumStatsLongPp10kRxUndecrypt=ccPortalSumStatsLongPp10kRxUndecrypt, ccSumStatsSwitch=ccSumStatsSwitch, ccPortalState=ccPortalState, ccWlanMuAclDefault=ccWlanMuAclDefault, ccWlanMuAclIndex=ccWlanMuAclIndex, MultiPointer255=MultiPointer255, ccCompactFlashUsed=ccCompactFlashUsed, ccSubnetAccessAdvInRowStatus=ccSubnetAccessAdvInRowStatus, ccWanVpnSaRxBytes=ccWanVpnSaRxBytes, ccWlanCryptoWepKeyToUse=ccWlanCryptoWepKeyToUse, ccWanVpnKeyManualEspEncrypAlg=ccWanVpnKeyManualEspEncrypAlg, ccRouterRip2Md5Key2Id=ccRouterRip2Md5Key2Id, ccWanPppoeUsername=ccWanPppoeUsername, ccDhcpOptionsUpdateFwFilename=ccDhcpOptionsUpdateFwFilename, ccWanContentBlockOutUrlTable=ccWanContentBlockOutUrlTable, ccPortalSumStatsShortAvgMuSnr=ccPortalSumStatsShortAvgMuSnr, ccLoadCfgStart=ccLoadCfgStart, ccMuTxRetriesOctets02=ccMuTxRetriesOctets02, ccRouterRoutesInterface=ccRouterRoutesInterface, ccWlanTxOctetsAt9Mb=ccWlanTxOctetsAt9Mb, ccPortalStatsTable=ccPortalStatsTable, ccWanVpnKeyManualOutEspAuthKey=ccWanVpnKeyManualOutEspAuthKey, ccRapControlPollSymbolMus=ccRapControlPollSymbolMus, ccCfgHistSemaphore=ccCfgHistSemaphore, ccWanNatInboundTable=ccWanNatInboundTable, ccWlanCryptoWepKey4=ccWlanCryptoWepKey4, ccMuSumStatsShortPktsPerSecRx100=ccMuSumStatsShortPktsPerSecRx100, ccPortalTxOctetsEntry=ccPortalTxOctetsEntry, ccPortalTxRetriesOctets15=ccPortalTxRetriesOctets15, ccPortalCfgRadioReset=ccPortalCfgRadioReset, ccMuTxRetriesOctets11=ccMuTxRetriesOctets11, ccWanVpnKeyAutoTable=ccWanVpnKeyAutoTable, ccPortalNumberOfBss=ccPortalNumberOfBss, ccRapPortalResultsEntry=ccRapPortalResultsEntry, ccWlanTxRetriesPkts06=ccWlanTxRetriesPkts06, ccRapResultsApprovedHowAuth=ccRapResultsApprovedHowAuth, ccMuTxPktsTable=ccMuTxPktsTable, ccWlanTxOctetsAt54Mb=ccWlanTxOctetsAt54Mb, ccLoadFwSuccess=ccLoadFwSuccess, ccPortalCfgRadioPosPowerLevel=ccPortalCfgRadioPosPowerLevel, ccWanVpnKeyAutoIkeXauthPassword=ccWanVpnKeyAutoIkeXauthPassword, ccPortalSigStatsNoiseBest=ccPortalSigStatsNoiseBest, ccWlanTxRetriesOctetsTable=ccWlanTxRetriesOctetsTable, ccWlanCryptoWpaTwoKey=ccWlanCryptoWpaTwoKey, ccSnmpTrapSinkV3PrivacyAlgorithm=ccSnmpTrapSinkV3PrivacyAlgorithm, ccRapPollOneMuResultsEntry=ccRapPollOneMuResultsEntry, ccSnmpAccessV3Entry=ccSnmpAccessV3Entry, ccWlanTxOctetsAt36Mb=ccWlanTxOctetsAt36Mb, ccTrapCtrlMuUnAssociated=ccTrapCtrlMuUnAssociated, ccRadiusLdapGroupFilter=ccRadiusLdapGroupFilter, ccSubnetDhcpSubnetMask=ccSubnetDhcpSubnetMask, ccWlanRxPktsNUcast=ccWlanRxPktsNUcast, ccInfoSerialNumber=ccInfoSerialNumber, ccPortalRxOctetsNUcast=ccPortalRxOctetsNUcast, ccMuRxOctetsAt6Mb=ccMuRxOctetsAt6Mb, ccPortalTxRetriesOctets09=ccPortalTxRetriesOctets09, ccWlanTxRetriesOctets08=ccWlanTxRetriesOctets08, ccWlanTxRetriesOctets15=ccWlanTxRetriesOctets15, ccResetStatCounters=ccResetStatCounters, ccWlanSumStatsShortPp10kDropped=ccWlanSumStatsShortPp10kDropped, ccWanTable=ccWanTable, ccRapAuthIndex=ccRapAuthIndex, ccWlanAuthKerberosKdcServerIp1=ccWlanAuthKerberosKdcServerIp1, ccSubnetAccessAdvOutReverseNat=ccSubnetAccessAdvOutReverseNat, ccLoadFwOperation=ccLoadFwOperation, ccLanVlanTable=ccLanVlanTable, ccWlanAuthKerberosKdcServerIp2=ccWlanAuthKerberosKdcServerIp2, ccWlanTxRetriesOctets10=ccWlanTxRetriesOctets10, ccPortalLastReason=ccPortalLastReason, ccCertMgntSelfCertsReqOrg=ccCertMgntSelfCertsReqOrg, ccTrapCtrlConfigChange=ccTrapCtrlConfigChange, ccFirewallUnderAttack=ccFirewallUnderAttack, ccWanVpnKeyAutoIkeKeyLifetime=ccWanVpnKeyAutoIkeKeyLifetime, ccLanVlanTrunked=ccLanVlanTrunked, ccResetFactoryExceptIpSnmp=ccResetFactoryExceptIpSnmp, ccPortalTxOctetsAt18Mb=ccPortalTxOctetsAt18Mb, ccPortalSigStatsSignalWorst=ccPortalSigStatsSignalWorst, ccRapPortalResultsIndex=ccRapPortalResultsIndex, ccWlanSumStatsLongTable=ccWlanSumStatsLongTable, ccApSerialNumber=ccApSerialNumber, ccPortalRxOctetsAt11Mb=ccPortalRxOctetsAt11Mb, ccWanIpAddr=ccWanIpAddr, ccLan=ccLan, ccWlanRxPktsAt11Mb=ccWlanRxPktsAt11Mb, ccCompactFlashCapacity=ccCompactFlashCapacity, ccWanFirewallDescription=ccWanFirewallDescription, ccCertMgntSelfCertsReqSigAlgo=ccCertMgntSelfCertsReqSigAlgo, ccWanVpnEntry=ccWanVpnEntry, ccSubnetAccessAdvInReverseNatIp=ccSubnetAccessAdvInReverseNatIp, ccSubnetAccessRuleEntry=ccSubnetAccessRuleEntry, ccWlanRxOctetsEntry=ccWlanRxOctetsEntry, ccRapPollOneMuResultsIndex=ccRapPollOneMuResultsIndex, ccWlanSigStatsNumPkts=ccWlanSigStatsNumPkts, ccPortalSumStatsLongAvgMuSnr=ccPortalSumStatsLongAvgMuSnr, ccWlanEssid=ccWlanEssid, ccWanNatEntry=ccWanNatEntry, ScaleBy100=ScaleBy100, ccPortal=ccPortal, ccLoadFwServerFilename=ccLoadFwServerFilename, ccTrapCtrlEnableName=ccTrapCtrlEnableName, ccSnmpLastDeniedIpAddr=ccSnmpLastDeniedIpAddr, DoActionNow=DoActionNow, ccPortalTxPktsTable=ccPortalTxPktsTable, ccWanVpnKeyAutoIkeOperationMode=ccWanVpnKeyAutoIkeOperationMode, ccWanPppoeAuthType=ccWanPppoeAuthType, ccRapPollOneMuMac=ccRapPollOneMuMac, ccRapResultsRogueClosestPortalPtr=ccRapResultsRogueClosestPortalPtr, ccCertMgntSelfCertsReqGenReq=ccCertMgntSelfCertsReqGenReq, PartsPer10k=PartsPer10k, ccPortalCfgRadioPowerLevel=ccPortalCfgRadioPowerLevel, ccSnmpAccessV3Access=ccSnmpAccessV3Access, ccWlanSumStatsShortSkip1=ccWlanSumStatsShortSkip1, ccMus=ccMus, ccWlanMulticastAddr1=ccWlanMulticastAddr1, ccApPointersToPortals=ccApPointersToPortals, ccWlanSigStatsNoiseSum=ccWlanSigStatsNoiseSum, ccPortalCfgRadioDefaultChannel=ccPortalCfgRadioDefaultChannel, ccLoadCfgOperationsDone=ccLoadCfgOperationsDone, ccMuTxRetries01=ccMuTxRetries01, ccCACertsSerialNumber=ccCACertsSerialNumber, ccWlanRxOctetsAt6Mb=ccWlanRxOctetsAt6Mb, ccSubnetAccessDestIndex=ccSubnetAccessDestIndex, HexPassword=HexPassword, ccWanVpnIndex=ccWanVpnIndex, ccMuSumStatsLongTimestamp=ccMuSumStatsLongTimestamp, ccPortStatus=ccPortStatus, ccPortalCfgRadioDefaultDesPlacement=ccPortalCfgRadioDefaultDesPlacement, ccWanFirewallMimeFloodMaxHeaders=ccWanFirewallMimeFloodMaxHeaders, ccMgmtAccessSsh=ccMgmtAccessSsh, ccSubnetAccessAdvOutEntry=ccSubnetAccessAdvOutEntry, ccSubnetAccessAdvInTable=ccSubnetAccessAdvInTable, ccWlanMuAclTable=ccWlanMuAclTable, ccPortalAdoptionRowStatus=ccPortalAdoptionRowStatus, ccWanVpnIkeTable=ccWanVpnIkeTable, ccSnmpAccessControlEnable=ccSnmpAccessControlEnable, ccMuTxRetriesOctets10=ccMuTxRetriesOctets10, ccRadiusClientAuthMask=ccRadiusClientAuthMask, ccMuDenied=ccMuDenied, ccSumStatsLongUpdateInterval=ccSumStatsLongUpdateInterval, StaticRowEnable=StaticRowEnable, ccRadiusClientAuthTable=ccRadiusClientAuthTable, ccPortalLocation=ccPortalLocation, ccSubnetAccessAdvOutTable=ccSubnetAccessAdvOutTable, ccMuRadioType=ccMuRadioType, ccMuTxPktsUcast=ccMuTxPktsUcast, ccCertMgntSelfCertsReqEmail=ccCertMgntSelfCertsReqEmail, ccPortalSumStatsLongTxAvgRetries100=ccPortalSumStatsLongTxAvgRetries100, ccMgmtAccessAdminAuthRadiusServerIp=ccMgmtAccessAdminAuthRadiusServerIp, ccPortalSumStatsShortAvgBitSpeed=ccPortalSumStatsShortAvgBitSpeed, ccMuTxRetriesOctets05=ccMuTxRetriesOctets05, ccMuRxOctetsAt9Mb=ccMuRxOctetsAt9Mb, ccPortalSettingsDefaultRtsThresh=ccPortalSettingsDefaultRtsThresh, ccPortalTxPktsAt54Mb=ccPortalTxPktsAt54Mb, ccMuSigStatsNoiseSum=ccMuSigStatsNoiseSum, ccPortalCfgRadioDefaultPlacement=ccPortalCfgRadioDefaultPlacement, ccPortalSigStatsSignalSum=ccPortalSigStatsSignalSum, ccWanVpnKeyManualInAhSpi=ccWanVpnKeyManualInAhSpi, ccRapAuthCopyAllApproved=ccRapAuthCopyAllApproved, ccTrapCtrlRadarDetectedChannel=ccTrapCtrlRadarDetectedChannel, ccMuTxOctetsAt24Mb=ccMuTxOctetsAt24Mb, ccPortalAdoptionTable=ccPortalAdoptionTable, ccWlanCryptoKeyguardKeyToUse=ccWlanCryptoKeyguardKeyToUse, ccWlanCryptoWepKey3=ccWlanCryptoWepKey3, ccPortalSystemStatsProbeRespRetries1=ccPortalSystemStatsProbeRespRetries1, ccMuTxOctetsAt11Mb=ccMuTxOctetsAt11Mb, ccGroupsV1dot0=ccGroupsV1dot0, ccSumStatsMu=ccSumStatsMu, ccRapPortalResultsPortalMac=ccRapPortalResultsPortalMac, ccWanContentBlockFtp=ccWanContentBlockFtp, ccWlanSumStatsShortAvgBitSpeed=ccWlanSumStatsShortAvgBitSpeed, ccCompactFlash=ccCompactFlash, ccMuSumStatsLongAvgMuSignal=ccMuSumStatsLongAvgMuSignal, ccMuTxPktsAt36Mb=ccMuTxPktsAt36Mb, ccMuPortalIndex=ccMuPortalIndex, ccPortalTxRetriesOctets03=ccPortalTxRetriesOctets03, ccRadarDetected=ccRadarDetected, ccSnmpTrapSinkV3Enable=ccSnmpTrapSinkV3Enable, ccIdHwVersion=ccIdHwVersion, ccWlanTxRetriesPkts01=ccWlanTxRetriesPkts01, ccSubnetDhcpServerSecondaryDns=ccSubnetDhcpServerSecondaryDns, ccMgmtAccess=ccMgmtAccess)
mibBuilder.exportSymbols("SYMBOL-CC-WS2000-MIB", ccSnmpTrapSinkV12Entry=ccSnmpTrapSinkV12Entry, ccCACertsImport=ccCACertsImport, ccPortalBackgroundNoiseNumSamples=ccPortalBackgroundNoiseNumSamples, ccPortalTxRetriesPkts07=ccPortalTxRetriesPkts07, ccWlanAnswerBroadcastEss=ccWlanAnswerBroadcastEss, ccTrapCtrlPortalUnAdopted=ccTrapCtrlPortalUnAdopted, ccWlanTxOctetsAt24Mb=ccWlanTxOctetsAt24Mb, ccRadiusClientAuthIpAddr=ccRadiusClientAuthIpAddr, ccWlanTxRetriesOctets11=ccWlanTxRetriesOctets11, ccPortalTxPktsAt24Mb=ccPortalTxPktsAt24Mb, ccSnmpAccessV12OidLimit=ccSnmpAccessV12OidLimit, ccPortalSumStatsLongThroughputTx=ccPortalSumStatsLongThroughputTx, ccSubnetAccessAdvOutSrcIpLength=ccSubnetAccessAdvOutSrcIpLength, ccRf=ccRf, ccMuRxPktsAt48Mb=ccMuRxPktsAt48Mb, ccWlanTxRetriesPkts15=ccWlanTxRetriesPkts15, ccPortStatusChange=ccPortStatusChange, ccPortalSigStatsSignalMostRecent=ccPortalSigStatsSignalMostRecent, ccWlanTxRetriesOctets04=ccWlanTxRetriesOctets04, ccWlanCryptoWpaTwoBcastKeyRotation=ccWlanCryptoWpaTwoBcastKeyRotation, ccRadiusLdapBindDistinguishedName=ccRadiusLdapBindDistinguishedName, ccWlanTxPktsAt2Mb=ccWlanTxPktsAt2Mb, ccMuStatsTable=ccMuStatsTable, DateAndTime=DateAndTime, ccLoadCfgServerPath=ccLoadCfgServerPath, ccSumStatsPortal=ccSumStatsPortal, symbol=symbol, ccWlanQosMonitorEntry=ccWlanQosMonitorEntry, ccTrapCtrlLanVlanActivated=ccTrapCtrlLanVlanActivated, ccWlanRxOctetsAt18Mb=ccWlanRxOctetsAt18Mb, ccPortalSumStatsLongPp10kTxWithRetries=ccPortalSumStatsLongPp10kTxWithRetries, ccMuTxPktsAt9Mb=ccMuTxPktsAt9Mb, ccWlanSumStatsLongSkip1=ccWlanSumStatsLongSkip1, ccRadiusAuthTypeTtls=ccRadiusAuthTypeTtls, ccWlanRxPktsAt22Mb=ccWlanRxPktsAt22Mb, ccWanNatInboundDefaultIp=ccWanNatInboundDefaultIp, ccWlanSumStatsLongPktsPerSecRx100=ccWlanSumStatsLongPktsPerSecRx100, ccPortalSigStatsSnrSum=ccPortalSigStatsSnrSum, ccWlanBwShareMode=ccWlanBwShareMode, ccPortalSumStatsShortPktsPerSecRx100=ccPortalSumStatsShortPktsPerSecRx100, ccLanVlan=ccLanVlan, ccCertMgntSelfCertsSignedDeleteRow=ccCertMgntSelfCertsSignedDeleteRow, ccRapResultsApprovedEntry=ccRapResultsApprovedEntry, ccWlanSigStatsSnrSum=ccWlanSigStatsSnrSum, ccRadiusProxyServerPort=ccRadiusProxyServerPort, ccIdCliVersion=ccIdCliVersion, ccRapPortalResultsApEssid=ccRapPortalResultsApEssid, ccWlanTxRetriesPkts04=ccWlanTxRetriesPkts04, ccMuAuthenticationMethod=ccMuAuthenticationMethod, ccWlanTxRetriesPkts11=ccWlanTxRetriesPkts11, ccLoadFtpUsername=ccLoadFtpUsername, ccPortalRxOctetsAt48Mb=ccPortalRxOctetsAt48Mb, ccWanDhcpIpAddr=ccWanDhcpIpAddr, ccMuSumStatsLongPp10kRxUndecrypt=ccMuSumStatsLongPp10kRxUndecrypt, ccPortalTxOctetsAt9Mb=ccPortalTxOctetsAt9Mb, ccWlanAuthEapTable=ccWlanAuthEapTable, ccIdSerialNumber=ccIdSerialNumber, ccMuSigStatsSignalBest=ccMuSigStatsSignalBest, ccWanVpnKeyAutoIkeAuthAlg=ccWanVpnKeyAutoIkeAuthAlg, ccPortalRxOctetsAt22Mb=ccPortalRxOctetsAt22Mb, ccRadiusDataSource=ccRadiusDataSource, ccRapResultsApprovedAgeOut=ccRapResultsApprovedAgeOut, ccTrapCtrlEnableIndex=ccTrapCtrlEnableIndex, ccPortalRxPktsAt22Mb=ccPortalRxPktsAt22Mb, ccSubnetAccessDestPtrToDest=ccSubnetAccessDestPtrToDest, ccCertMgnt=ccCertMgnt, ccWlanTxOctetsAt2Mb=ccWlanTxOctetsAt2Mb, ccPortalRadioType=ccPortalRadioType, ccRouterRip2Md5Key1Id=ccRouterRip2Md5Key1Id, cc802dt1xPortAuthLogin=cc802dt1xPortAuthLogin, ccPortalTxPowerLevel=ccPortalTxPowerLevel, ccWlanSumStatsShortAvgMuNoise=ccWlanSumStatsShortAvgMuNoise, ccMuTxOctetsUcast=ccMuTxOctetsUcast, ccWlanCryptoWpaTwoAllowTkipClient=ccWlanCryptoWpaTwoAllowTkipClient, ccMuRxOctetsAt48Mb=ccMuRxOctetsAt48Mb, ccWlanTxPktsAt9Mb=ccWlanTxPktsAt9Mb, ccWlanPortalsAdopted=ccWlanPortalsAdopted, ccSubnetAccessAdvOutSrcPortStart=ccSubnetAccessAdvOutSrcPortStart, ccWanContentBlockOutUrlRowStatus=ccWanContentBlockOutUrlRowStatus, ccWanVpnRowStatus=ccWanVpnRowStatus, ccPortalSumStatsLongPp10kNUcastPkts=ccPortalSumStatsLongPp10kNUcastPkts, ccSnmpAccessV12Table=ccSnmpAccessV12Table, ccMuTxRetries13=ccMuTxRetries13, ccAssociationTable=ccAssociationTable, ccPortalTxRetriesPkts08=ccPortalTxRetriesPkts08, ccMgmtAccessAdminAuthRadiusServerPort=ccMgmtAccessAdminAuthRadiusServerPort, ccPortalPointerToAp=ccPortalPointerToAp, ccPortalMac=ccPortalMac, ccWanNatInboundTranslationPort=ccWanNatInboundTranslationPort, ccPortalRxOctetsAt36Mb=ccPortalRxOctetsAt36Mb, ccWlanSumStatsLongTxAvgRetries100=ccWlanSumStatsLongTxAvgRetries100, ccCertMgntSelfCertsReqCountry=ccCertMgntSelfCertsReqCountry, ccNtp=ccNtp, ccPortalSystemStatsProbeRespTxOctets=ccPortalSystemStatsProbeRespTxOctets, ccLoggingToSyslog=ccLoggingToSyslog, ccPortalLastMac=ccPortalLastMac, ccWlanAuthEapRadiusAcctMuRetries=ccWlanAuthEapRadiusAcctMuRetries, ccPortalSumStatsShortPp10kTxWithRetries=ccPortalSumStatsShortPp10kTxWithRetries, Password=Password, ccSubnetAccessAdvInReverseNatPort=ccSubnetAccessAdvInReverseNatPort, ccWlanCryptoKeyguardKey1=ccWlanCryptoKeyguardKey1, ccPortalSettingsPriWlan=ccPortalSettingsPriWlan, ccWlanTxRetriesPkts03=ccWlanTxRetriesPkts03, ccRapPollOneMuResultsRssi=ccRapPollOneMuResultsRssi, ccPortalSumStatsLongAvgMuSignal=ccPortalSumStatsLongAvgMuSignal, ccRapAuthRowExists=ccRapAuthRowExists, ccPortalTxRetriesOctets12=ccPortalTxRetriesOctets12, ccTrapCtrlSumStatsMinPktsForTrap=ccTrapCtrlSumStatsMinPktsForTrap, ccSnmpTrapSinkV12Index=ccSnmpTrapSinkV12Index, ccWlanCryptoWepEntry=ccWlanCryptoWepEntry, ccWlanTxOctetsAt6Mb=ccWlanTxOctetsAt6Mb, ccPortalSigStatsNumPkts=ccPortalSigStatsNumPkts, ccApWispVersion=ccApWispVersion, ccPortalSigStatsSnrBest=ccPortalSigStatsSnrBest, ccSubnetAccessAdvInEntry=ccSubnetAccessAdvInEntry, ccApTable=ccApTable, ccRadiusUsersEntry=ccRadiusUsersEntry, ccPortalAdopted=ccPortalAdopted, ccWanDhcpSecondaryDnsServer=ccWanDhcpSecondaryDnsServer, ccPortalEntry=ccPortalEntry, ccDhcpOptions=ccDhcpOptions, ccApNumPortals=ccApNumPortals, ccMuTxRetriesOctetsEntry=ccMuTxRetriesOctetsEntry, ccRapResultsRogueAgeOut=ccRapResultsRogueAgeOut, ccLanVlanTrunkPort=ccLanVlanTrunkPort, ccWlanTxRetriesOctets03=ccWlanTxRetriesOctets03, ccWlanCryptoWpaKey=ccWlanCryptoWpaKey, ccPortalTxOctetsAt22Mb=ccPortalTxOctetsAt22Mb, ccMuTxRetriesOctets06=ccMuTxRetriesOctets06, ccWlanRxOctetsTable=ccWlanRxOctetsTable, ccLanVlanId=ccLanVlanId, ccWlanTxPktsAt22Mb=ccWlanTxPktsAt22Mb, ccPortalSumStatsShortPktsPerSecTx100=ccPortalSumStatsShortPktsPerSecTx100, ccRouterRoutesDest=ccRouterRoutesDest, ccMuRxOctetsAt5pt5Mb=ccMuRxOctetsAt5pt5Mb, ccMuRxOctetsAt24Mb=ccMuRxOctetsAt24Mb, ccPortalTxRetriesPkts10=ccPortalTxRetriesPkts10, ccTrapCtrlMuAssociated=ccTrapCtrlMuAssociated, ccSubnetAccessRuleEndPort=ccSubnetAccessRuleEndPort, ccWlanCryptoKeyguardKey4=ccWlanCryptoKeyguardKey4, ccRadiusProxyRetryCount=ccRadiusProxyRetryCount, ccTrapCtrlSnmpAclViolation=ccTrapCtrlSnmpAclViolation, ccPortalRxPktsNUcast=ccPortalRxPktsNUcast, ccMuRxPktsAt54Mb=ccMuRxPktsAt54Mb, ccRedundancyRevertDelay=ccRedundancyRevertDelay, ccTrapCtrlSumStatsSwitch=ccTrapCtrlSumStatsSwitch, ccSumStats=ccSumStats, ccMuRxPktsAt6Mb=ccMuRxPktsAt6Mb, ccWlanSumStatsLongAvgBitSpeed=ccWlanSumStatsLongAvgBitSpeed, ccPortalSigStatsSnrWorst=ccPortalSigStatsSnrWorst, ccTrapCtrlSumStatsCanBeSetSwitch=ccTrapCtrlSumStatsCanBeSetSwitch, ccWanPppoeEntry=ccWanPppoeEntry, ccCfgHistChangeTime=ccCfgHistChangeTime, ccWanVpnKeyManualEntry=ccWanVpnKeyManualEntry, ccRadiusProxyTimeout=ccRadiusProxyTimeout, ccPortalRxPktsEntry=ccPortalRxPktsEntry, ccWanNatTable=ccWanNatTable, ccWanPrimaryDnsServer=ccWanPrimaryDnsServer, ccRadiusUsersPassword=ccRadiusUsersPassword, ccSnmpAclViolation=ccSnmpAclViolation, ccPortalSigStatsTable=ccPortalSigStatsTable, ccPortalRxPktsAt11Mb=ccPortalRxPktsAt11Mb, ccMuTxRetries04=ccMuTxRetries04, ccSubnetAccessAdvInDestPortStart=ccSubnetAccessAdvInDestPortStart, ccWlanSumStatsLongEntry=ccWlanSumStatsLongEntry, ccGroups=ccGroups, ccRadiusLdapLoginAttribute=ccRadiusLdapLoginAttribute, ccWlanSumStatsShortPktsPerSec100=ccWlanSumStatsShortPktsPerSec100, ccWlanQosMonitorSent=ccWlanQosMonitorSent, ccWanVpnTunnelStatus=ccWanVpnTunnelStatus, ccGroupsV1dot5variables=ccGroupsV1dot5variables, ccCACerts=ccCACerts, ccPortalTxOctetsTable=ccPortalTxOctetsTable, moduleid=moduleid, ccPortalCfgRadioDesChannel=ccPortalCfgRadioDesChannel, ccMuTxRetriesTotal=ccMuTxRetriesTotal, ccWlanSumStatsLongPktsPerSec100=ccWlanSumStatsLongPktsPerSec100, ccLoadCfgServerFilename=ccLoadCfgServerFilename, ccRapResultsRogueApMac=ccRapResultsRogueApMac, ccPortalSettingsName=ccPortalSettingsName, ccSnmpTraps=ccSnmpTraps, ccPortalSumStatsLongPktsPerSecRx100=ccPortalSumStatsLongPktsPerSecRx100, ccSubnetAccessEntry=ccSubnetAccessEntry, ccSubnetDhcpServerStaticMapEntry=ccSubnetDhcpServerStaticMapEntry, ccPortalCfgRadioDefaultTable=ccPortalCfgRadioDefaultTable, ccWlanAuthEapRadius1Port=ccWlanAuthEapRadius1Port, ccMuTxRetriesFailed=ccMuTxRetriesFailed, ccCertMgntSelfCertsReqDept=ccCertMgntSelfCertsReqDept, ccAssociationLastAssociate=ccAssociationLastAssociate, ccWlanTxRetriesPktsEntry=ccWlanTxRetriesPktsEntry, ccRadiusProxyServerTable=ccRadiusProxyServerTable, ccRapPollOneMuInProcess=ccRapPollOneMuInProcess, ccLanVlanType=ccLanVlanType, ccCertMgntSelfCertsReqCity=ccCertMgntSelfCertsReqCity, ccRadiusUsersGroupId=ccRadiusUsersGroupId, ccMuSumStatsLongAvgMuSnr=ccMuSumStatsLongAvgMuSnr, ccWlanRxOctetsAt36Mb=ccWlanRxOctetsAt36Mb, ccWanNatIndex=ccWanNatIndex, ccCACertsIndex=ccCACertsIndex, ccPortalSumStatsShortPp10kRfUtil=ccPortalSumStatsShortPp10kRfUtil, ccWlanRxOctetsNUcast=ccWlanRxOctetsNUcast, ccGroupsV1dot5notifications=ccGroupsV1dot5notifications, ccWlanAuthEapReauthenticationPeriod=ccWlanAuthEapReauthenticationPeriod, ccWlanSumStatsLongThroughput=ccWlanSumStatsLongThroughput, ccGroupsV2dot0variables=ccGroupsV2dot0variables, ccWanNatInboundEntry=ccWanNatInboundEntry, ccMuSymbolRogueApEna=ccMuSymbolRogueApEna, ccWlanAuth=ccWlanAuth, ccPortalRxPktsAt24Mb=ccPortalRxPktsAt24Mb, ccPortalTxRetriesPkts09=ccPortalTxRetriesPkts09, ccRadiusLdapServerPort=ccRadiusLdapServerPort, ccInfoCountrySelection=ccInfoCountrySelection, ccWanVpnKeyAutoAhAuth=ccWanVpnKeyAutoAhAuth, ccSnmpTrapSinkV3Index=ccSnmpTrapSinkV3Index, ccWlanRxOctetsAt5pt5Mb=ccWlanRxOctetsAt5pt5Mb, ccPortalSystemStatsProbeReqRx=ccPortalSystemStatsProbeReqRx, ccCertMgntSelfCertsReqTable=ccCertMgntSelfCertsReqTable, ccMuType=ccMuType, ccResetFactory=ccResetFactory, ccRadiusLdapGroupMembershipAttribute=ccRadiusLdapGroupMembershipAttribute, ccWanNatInboundIndex=ccWanNatInboundIndex, ccPortalAdoptionEntry=ccPortalAdoptionEntry, ccMuIsDataReady=ccMuIsDataReady, ccRadiusAuthTypePeap=ccRadiusAuthTypePeap, ccIdSwVersion=ccIdSwVersion, ccWlanAuthKerberosRealmName=ccWlanAuthKerberosRealmName, ccWlanRxPktsAt1Mb=ccWlanRxPktsAt1Mb, ccTrapCtrl=ccTrapCtrl, ccWlanAuthKerberosEntry=ccWlanAuthKerberosEntry, ccPortalSettingsDefaultBeaconInt=ccPortalSettingsDefaultBeaconInt, ccSubnetAccessRuleDestPtr=ccSubnetAccessRuleDestPtr, ccMuRxOctetsAt2Mb=ccMuRxOctetsAt2Mb, ccSubnetDhcpServerWinsServer=ccSubnetDhcpServerWinsServer, ccCfgHistChangeCount=ccCfgHistChangeCount, ccPortalRxOctetsAt6Mb=ccPortalRxOctetsAt6Mb, ccWanNatOutboundEnable=ccWanNatOutboundEnable, ccWlanRxPktsAt54Mb=ccWlanRxPktsAt54Mb, ccPortType=ccPortType, ccRadius=ccRadius, ccRapResultsRoguePortalPtr=ccRapResultsRoguePortalPtr, ccWanVpnLocalSubnet=ccWanVpnLocalSubnet, ccCACertsExpiry=ccCACertsExpiry, ccMuTxPktsAt2Mb=ccMuTxPktsAt2Mb, ccWanVpnKeyManualEspAuthAlg=ccWanVpnKeyManualEspAuthAlg, ccMuTxPktsAt24Mb=ccMuTxPktsAt24Mb, ccWlanSumStatsLongPp10kTxWithRetries=ccWlanSumStatsLongPp10kTxWithRetries, ccMuTxPktsAt54Mb=ccMuTxPktsAt54Mb, ccCACertsKeyId=ccCACertsKeyId, ccSnmpAccessV3Table=ccSnmpAccessV3Table, ccPortalRxPktsAt1Mb=ccPortalRxPktsAt1Mb, ccSnmpTrapSinkV3Port=ccSnmpTrapSinkV3Port, ccRapLocate=ccRapLocate, ccSubnetIndex=ccSubnetIndex, cc802dt1xPortAuth=cc802dt1xPortAuth)
mibBuilder.exportSymbols("SYMBOL-CC-WS2000-MIB", ccPortalTxPktsAt2Mb=ccPortalTxPktsAt2Mb, ccAp=ccAp, ccWlanAuthEapMuTimeout=ccWlanAuthEapMuTimeout, ccRapPollOneMuStatus=ccRapPollOneMuStatus, ccPortalSumStatsLongThroughput=ccPortalSumStatsLongThroughput, ccSubnetAccessAdvInAction=ccSubnetAccessAdvInAction, ccSubnetAccessRuleTransport=ccSubnetAccessRuleTransport, ccSubnetAccessAdvOutAction=ccSubnetAccessAdvOutAction, ccWlanRxPktsTable=ccWlanRxPktsTable, ccPortalRxOctetsEntry=ccPortalRxOctetsEntry, ccCertMgntSelfCertsReqPostal=ccCertMgntSelfCertsReqPostal, ccMuTxRetries06=ccMuTxRetries06, ccWlanCryptoWpaTwoFastRoamPreAuth=ccWlanCryptoWpaTwoFastRoamPreAuth, ccWlanRxPktsAt18Mb=ccWlanRxPktsAt18Mb, ccSubnetAccessAdvOverrideMode=ccSubnetAccessAdvOverrideMode, ccNtpSyncInterval=ccNtpSyncInterval, ccSnmpAclViolations=ccSnmpAclViolations, ccDhcpOptionsUpdateFwEna=ccDhcpOptionsUpdateFwEna, ccApSslWeakCipherSupport=ccApSslWeakCipherSupport, ccWanVpnKeyAutoEntry=ccWanVpnKeyAutoEntry, ccPortalAdoptionEndMac=ccPortalAdoptionEndMac, ccSubnetIpSubnetMask=ccSubnetIpSubnetMask, ccPortalUnAdopted=ccPortalUnAdopted, ccWlanSumStatsShortTable=ccWlanSumStatsShortTable, ccMuMac=ccMuMac, ccSubnetDhcpServerPoolEnd=ccSubnetDhcpServerPoolEnd, ccWlanSumStatsShortThroughputRx=ccWlanSumStatsShortThroughputRx, ccMgmtAccessSshAuthTimeout=ccMgmtAccessSshAuthTimeout, ccMuSumStatsLongPp10kTxWithRetries=ccMuSumStatsLongPp10kTxWithRetries, ccMuTxPktsAt5pt5Mb=ccMuTxPktsAt5pt5Mb, ccRouterRip2AuthType=ccRouterRip2AuthType, ccPortalSystemStatsProbeRespRetriesNone=ccPortalSystemStatsProbeRespRetriesNone, ccPortalSettingsDetector=ccPortalSettingsDetector, ccPortalRxOctetsAt1Mb=ccPortalRxOctetsAt1Mb, ccWlanTxRetriesOctets02=ccWlanTxRetriesOctets02, ccWlanAuthEapRadius2SharedSecret=ccWlanAuthEapRadius2SharedSecret, ccPortalSumStatsShortPktsPerSec100=ccPortalSumStatsShortPktsPerSec100, ccRadiusServerCertificate=ccRadiusServerCertificate, ccWlanMuAclEndingMac=ccWlanMuAclEndingMac, ccWanVpnKeyManualInEspSpi=ccWanVpnKeyManualInEspSpi, ccWanVpnSaTxBytes=ccWanVpnSaTxBytes, ccTrapCtrlMuDenied=ccTrapCtrlMuDenied, ccRouterRip2Md5Key2AuthKey=ccRouterRip2Md5Key2AuthKey, ccWanVpnKeyAutoIkeAuthPassphrase=ccWanVpnKeyAutoIkeAuthPassphrase, ccApIndex=ccApIndex, ccMuRxOctetsTable=ccMuRxOctetsTable, ccSubnetAccessRuleName=ccSubnetAccessRuleName, ccLoadFw=ccLoadFw, ccRedundancyHeartbeatInterval=ccRedundancyHeartbeatInterval, ccMuInfoEntry=ccMuInfoEntry, ccPortalRxPktsAt48Mb=ccPortalRxPktsAt48Mb, ccPortalSigStatsNoiseSumSquares=ccPortalSigStatsNoiseSumSquares, ccMuRxPktsTable=ccMuRxPktsTable, ccTrapCtrlFirewallUnderAttack=ccTrapCtrlFirewallUnderAttack, ccRadiusClientAuthSharedSecret=ccRadiusClientAuthSharedSecret, ccWlanSigStatsEntry=ccWlanSigStatsEntry, ccLanVlanDefaultTag=ccLanVlanDefaultTag, ccPortalSettingsSupportedRates=ccPortalSettingsSupportedRates, ccSubnetEntry=ccSubnetEntry, ccRapAuthAllSymbolMac=ccRapAuthAllSymbolMac, ccNtp1Server=ccNtp1Server, ccWanVpnKeyAutoEspType=ccWanVpnKeyAutoEspType, ccWanVpnRemoteGateway=ccWanVpnRemoteGateway, ccRapResultsRogueIndex=ccRapResultsRogueIndex, ccPortalSumStatsLongAvgMuNoise=ccPortalSumStatsLongAvgMuNoise, ccPortalSigStatsNoiseMostRecent=ccPortalSigStatsNoiseMostRecent, ccPortalTxRetriesOctets05=ccPortalTxRetriesOctets05, ccMuSumStatsLongAvgBitSpeed=ccMuSumStatsLongAvgBitSpeed, ccMgmtAccessToAllow=ccMgmtAccessToAllow, ccRapAuth=ccRapAuth, ccWlanAuthKerberosUsername=ccWlanAuthKerberosUsername, ccPortalSumStatsLongTotalMus=ccPortalSumStatsLongTotalMus, ccPortalTxRetriesPkts04=ccPortalTxRetriesPkts04, ccTrapCtrlPortalDenied=ccTrapCtrlPortalDenied, ccPortalRxOctetsAt5pt5Mb=ccPortalRxOctetsAt5pt5Mb, ccSubnetPortMembers=ccSubnetPortMembers, ccSubnetAccessRuleIndex=ccSubnetAccessRuleIndex, ccWlanTxPktsAt48Mb=ccWlanTxPktsAt48Mb, ccPortalAdoptionWlanPointers=ccPortalAdoptionWlanPointers, ccMuTxOctetsAt12Mb=ccMuTxOctetsAt12Mb, ccTrapCtrlDhcpOptionsFileTransferStatusRequested=ccTrapCtrlDhcpOptionsFileTransferStatusRequested, ccPortalSettingsDtimPrd=ccPortalSettingsDtimPrd, ccTrapCtrlEnable=ccTrapCtrlEnable, ccGroupsV2dot0notifications=ccGroupsV2dot0notifications, ccMuSumStatsShortThroughputTx=ccMuSumStatsShortThroughputTx, ccWanEntry=ccWanEntry, ccMuSigStatsSnrBest=ccMuSigStatsSnrBest, ccWlanAuthEapServerMaxRetries=ccWlanAuthEapServerMaxRetries, ccMuSumStatsShortPp10kNUcastPkts=ccMuSumStatsShortPp10kNUcastPkts, ccPortalTxRetriesOctets11=ccPortalTxRetriesOctets11, ccPortalSumStatsLongTable=ccPortalSumStatsLongTable, ccMuSigStatsNoiseMostRecent=ccMuSigStatsNoiseMostRecent, ccSubnetDhcpServerTable=ccSubnetDhcpServerTable, ccMuSumStatsShortPktsPerSecTx100=ccMuSumStatsShortPktsPerSecTx100, ccWlanAuthEapRadiusAcctMode=ccWlanAuthEapRadiusAcctMode, ccPortalSigStatsSnrSumSquares=ccPortalSigStatsSnrSumSquares, ccMuTxOctetsTable=ccMuTxOctetsTable, ccMuSigStatsSnrWorst=ccMuSigStatsSnrWorst, ccWlanSumStatsShortPktsPerSecRx100=ccWlanSumStatsShortPktsPerSecRx100, ccWanContentBlockOutUrlExtension=ccWanContentBlockOutUrlExtension, ccWanNatTimeout=ccWanNatTimeout, ccSubnetAccessAdvOutDestIpLength=ccSubnetAccessAdvOutDestIpLength, ccWanVpnKeyAutoIkeAuthType=ccWanVpnKeyAutoIkeAuthType, ccWanVpnKeyAutoIkeLocalIdData=ccWanVpnKeyAutoIkeLocalIdData, ccMuTxRetriesTable=ccMuTxRetriesTable, ccWlanSumStatsShortTxAvgRetries100=ccWlanSumStatsShortTxAvgRetries100, ccPortalDenied=ccPortalDenied, ccPortalSigStatsSnrMostRecent=ccPortalSigStatsSnrMostRecent, ccMuRxPktsAt24Mb=ccMuRxPktsAt24Mb, ccWanFirewallEntry=ccWanFirewallEntry, ccPortalTxOctetsAt11Mb=ccPortalTxOctetsAt11Mb, ccRapDetectorsEnable=ccRapDetectorsEnable, ccMuRxRssiSumSquares=ccMuRxRssiSumSquares, ccWlanAuthKerberosKdcServerIpR=ccWlanAuthKerberosKdcServerIpR, ccWlanCryptoKeyguardKey2=ccWlanCryptoKeyguardKey2, ccSubnetAccess=ccSubnetAccess, ccRouterUserRoutesDest=ccRouterUserRoutesDest, ccLoggingTransferCoreFile=ccLoggingTransferCoreFile, ccRapResultsApprovedApMac=ccRapResultsApprovedApMac, ccMuTxRetriesOctets15=ccMuTxRetriesOctets15, ccWlanSigStatsSnrSumSquares=ccWlanSigStatsSnrSumSquares, ccWanVpnSaInSpi=ccWanVpnSaInSpi, ccPortalSettingsDefaultBasicRates=ccPortalSettingsDefaultBasicRates, ccPortalCfgRadioDefaultPosPowerLevel=ccPortalCfgRadioDefaultPosPowerLevel, ccWanVpnTunnelConfig=ccWanVpnTunnelConfig, ccWanVpnKeyManualTable=ccWanVpnKeyManualTable, ccMuSumStatsShortEntry=ccMuSumStatsShortEntry, ccRouterRoutesTable=ccRouterRoutesTable, ccRapControl=ccRapControl, ccNtp0Server=ccNtp0Server, ccWanDefaultGateway=ccWanDefaultGateway, ccPortalLastActivity=ccPortalLastActivity, ccPortalCfgRadioDesPlacement=ccPortalCfgRadioDesPlacement, ccPortalSettingsDefaultSupportedRates=ccPortalSettingsDefaultSupportedRates, ccMuLastReason=ccMuLastReason, ccRadiusLdapBindDistinguishedPassword=ccRadiusLdapBindDistinguishedPassword, ccWlanAuthEapRadius1SharedSecret=ccWlanAuthEapRadius1SharedSecret, ccGroupsV2dot0obsoleted=ccGroupsV2dot0obsoleted, ccMuSumStatsLongAvgMuNoise=ccMuSumStatsLongAvgMuNoise, ccWlanAuthEapRadius1Server=ccWlanAuthEapRadius1Server, ccRadiusAccessEntry=ccRadiusAccessEntry, ccCertMgntSelfCertsReqDomain=ccCertMgntSelfCertsReqDomain, ccMuTxPktsAt48Mb=ccMuTxPktsAt48Mb, ccSumStatsWlan=ccSumStatsWlan, ccRapResultsApprovedPortalPtr=ccRapResultsApprovedPortalPtr, ccRapPollSymbolMusEnable=ccRapPollSymbolMusEnable, ccLanVlanEntry=ccLanVlanEntry, ccRapResultsRogueChannel=ccRapResultsRogueChannel, ccPortalSumStatsLongTimestamp=ccPortalSumStatsLongTimestamp, ccAssociationFirstAssociate=ccAssociationFirstAssociate, ccPortalTxRetriesPkts15=ccPortalTxRetriesPkts15, ccRadiusProxyServerIndex=ccRadiusProxyServerIndex, ccMuTxOctetsAt54Mb=ccMuTxOctetsAt54Mb, ccPortalNumberOfEss=ccPortalNumberOfEss, ccWanContentBlockOutUrlEntry=ccWanContentBlockOutUrlEntry, ccPortalRxPktsAt18Mb=ccPortalRxPktsAt18Mb, ccPortalBackgroundNoiseBest=ccPortalBackgroundNoiseBest, ccWanPppoePassword=ccWanPppoePassword, ccPortalSigStatsSignalBest=ccPortalSigStatsSignalBest, ccNotifications=ccNotifications, ccPortalTxOctetsAt12Mb=ccPortalTxOctetsAt12Mb, ccRouterUserRoutesMetric=ccRouterUserRoutesMetric, ccWlanRxPktsAt24Mb=ccWlanRxPktsAt24Mb, ccLoad=ccLoad, ccSnmpTrapSinkV3Table=ccSnmpTrapSinkV3Table, ccPortalSumStatsLongPp10kRfUtil=ccPortalSumStatsLongPp10kRfUtil, ccRadiusLdapBaseDistinguishedName=ccRadiusLdapBaseDistinguishedName, ccMuInfoTable=ccMuInfoTable, cc802dt1xPortAuthSetAp300=cc802dt1xPortAuthSetAp300, ccWlanRxOctetsAt24Mb=ccWlanRxOctetsAt24Mb, ccWlanSumStatsShortPp10kRxUndecrypt=ccWlanSumStatsShortPp10kRxUndecrypt, ccMuRxPktsAt11Mb=ccMuRxPktsAt11Mb, ccMuTxRetriesNone=ccMuTxRetriesNone, ccWlanRxPktsAt2Mb=ccWlanRxPktsAt2Mb, ccWanNatOutboundSubnetIndex=ccWanNatOutboundSubnetIndex, ccRadiusUsersGroups=ccRadiusUsersGroups, ccWlanTxRetriesOctets06=ccWlanTxRetriesOctets06, ccRadiusClientAuthEntry=ccRadiusClientAuthEntry, ccSnmpTrapSinkV3AuthPassword=ccSnmpTrapSinkV3AuthPassword, ccSubnetAccessPtrToRules=ccSubnetAccessPtrToRules, ccWanVpnSaOutSpi=ccWanVpnSaOutSpi, ccRouterUserRoutesGateway=ccRouterUserRoutesGateway, ccSnmpTrapSinkV12Community=ccSnmpTrapSinkV12Community, ccWanVpnSaEntry=ccWanVpnSaEntry, ccTrapCtrlRadarDetectedPortalMac=ccTrapCtrlRadarDetectedPortalMac, ccWlanAuthEapRadiusAcctMuTimeout=ccWlanAuthEapRadiusAcctMuTimeout, ccWanContentBlock=ccWanContentBlock, ccWlanTxRetriesPkts09=ccWlanTxRetriesPkts09, ccRapResultsRogueEntry=ccRapResultsRogueEntry, ccRadiusProxyServerEntry=ccRadiusProxyServerEntry, ccPortalSumStatsShortThroughputRx=ccPortalSumStatsShortThroughputRx, ccWlanCryptoWpaTwoTable=ccWlanCryptoWpaTwoTable, ccRouterRip2Md5Key1AuthKey=ccRouterRip2Md5Key1AuthKey, ccRouterUserRoutesEntry=ccRouterUserRoutesEntry, ccWanVpnIkeRemainingLife=ccWanVpnIkeRemainingLife, ccPortalSettingsEntry=ccPortalSettingsEntry, ccSubnetIpAddress=ccSubnetIpAddress, ccPortalSumStatsLongEntry=ccPortalSumStatsLongEntry, ccMuTxRetriesOctetsNone=ccMuTxRetriesOctetsNone, ccPortalSumStatsShortAvgMuNoise=ccPortalSumStatsShortAvgMuNoise, ccPortalTxPktsAt9Mb=ccPortalTxPktsAt9Mb, ccWlanRxPktsAt12Mb=ccWlanRxPktsAt12Mb, ccWanNat=ccWanNat, ccSubnetAccessAdvOutDestPortStart=ccSubnetAccessAdvOutDestPortStart, ccMuPortalMac=ccMuPortalMac, ccWlanTxOctetsAt12Mb=ccWlanTxOctetsAt12Mb, ccSubnetDhcpServerStaticMapMac=ccSubnetDhcpServerStaticMapMac, ccWanVpnKeyManualOutAhAuthKey=ccWanVpnKeyManualOutAhAuthKey, ccCertMgntSelfCertsSignedImport=ccCertMgntSelfCertsSignedImport, ccWlanRxOctetsUcast=ccWlanRxOctetsUcast, ccPortalSumStatsShortTxAvgRetries100=ccPortalSumStatsShortTxAvgRetries100, ccWlanAuthEapSyslogMode=ccWlanAuthEapSyslogMode, ccRap=ccRap, ccRouterRip2SimplePassword=ccRouterRip2SimplePassword, ccPortalSumStatsLongAvgBitSpeed=ccPortalSumStatsLongAvgBitSpeed, ccRadiusUsersTable=ccRadiusUsersTable, ccWlanSigStatsSignalSum=ccWlanSigStatsSignalSum, ccMuGroup=ccMuGroup, ccWlanTxPktsAt12Mb=ccWlanTxPktsAt12Mb, ccRouterUserRoutesInterface=ccRouterUserRoutesInterface, ccWanNatOutboundIpAddr=ccWanNatOutboundIpAddr, ccPortalSumStatsShortThroughput=ccPortalSumStatsShortThroughput, ccSnmpAccessV12Access=ccSnmpAccessV12Access, ccWlanTxRetriesPkts08=ccWlanTxRetriesPkts08, ccRapAuthErase=ccRapAuthErase, ccWanNat1to1IpAddr=ccWanNat1to1IpAddr, ccWanSecondaryDnsServer=ccWanSecondaryDnsServer, ccSubnetAccessAdvOutDestPortEnd=ccSubnetAccessAdvOutDestPortEnd, ccPortalRxUndecryptablePkts=ccPortalRxUndecryptablePkts, ccWlanMulticastAddr2=ccWlanMulticastAddr2, ccCertMgntSelfCertsSignedSerialNumber=ccCertMgntSelfCertsSignedSerialNumber, ccLoadCfgSuccess=ccLoadCfgSuccess, ccWlanCryptoWpaKeyRotationInterval=ccWlanCryptoWpaKeyRotationInterval, ccMuSumStatsShortThroughput=ccMuSumStatsShortThroughput, ccPortalName=ccPortalName, ccPortalLastAdoption=ccPortalLastAdoption, ccWlanRxPktsAt36Mb=ccWlanRxPktsAt36Mb, ccPortalRxOctetsAt24Mb=ccPortalRxOctetsAt24Mb, ccLoadFwInterface=ccLoadFwInterface, ccMuRxOctetsAt11Mb=ccMuRxOctetsAt11Mb, ccPortalSumStatsShortEntry=ccPortalSumStatsShortEntry, ccPortalTxRetriesOctets07=ccPortalTxRetriesOctets07, ccRadiusServer=ccRadiusServer, ccPortalCfgRadioDefaultDesChannel=ccPortalCfgRadioDefaultDesChannel, ccDhcpOptionsUpdateCfgEna=ccDhcpOptionsUpdateCfgEna, ccMuTxRetriesOctets08=ccMuTxRetriesOctets08, ccLoggingSyslogServer=ccLoggingSyslogServer, ccPortalSigStatsNoiseWorst=ccPortalSigStatsNoiseWorst, ccSubnetEnable=ccSubnetEnable, ccMgmtAccessAirbeam=ccMgmtAccessAirbeam, ccRouterRoutesMetric=ccRouterRoutesMetric, ccMuSigStatsEntry=ccMuSigStatsEntry, ccMuTxPktsAt22Mb=ccMuTxPktsAt22Mb, ccTrapCtrlSumStatsDescr=ccTrapCtrlSumStatsDescr)
mibBuilder.exportSymbols("SYMBOL-CC-WS2000-MIB", ccWlanCryptoWepKey2=ccWlanCryptoWepKey2, ccMuSigStatsSnrMostRecent=ccMuSigStatsSnrMostRecent, ccLoadServerIpAddr=ccLoadServerIpAddr, ccTrapCtrlSumStatsEntry=ccTrapCtrlSumStatsEntry, ccPortalCfgRadioDefaultPosChannel=ccPortalCfgRadioDefaultPosChannel, ccMuRxPktsUcast=ccMuRxPktsUcast, ccRadiusLdapServerIp=ccRadiusLdapServerIp, ccPortalTxRetriesPkts03=ccPortalTxRetriesPkts03, ccPortalBackgroundNoiseSum=ccPortalBackgroundNoiseSum, ccWlanTxRetriesOctetsEntry=ccWlanTxRetriesOctetsEntry, ccRadiusProxyServerIp=ccRadiusProxyServerIp, ccSubnetDhcpServerPrimaryDns=ccSubnetDhcpServerPrimaryDns, ccWlanTxRetriesPkts12=ccWlanTxRetriesPkts12, ccLogging=ccLogging, ccWlanCryptoKeyguardEntry=ccWlanCryptoKeyguardEntry, ccWlanCryptoWpaEntry=ccWlanCryptoWpaEntry, ccMuTxRetriesOctets03=ccMuTxRetriesOctets03, ccTrapCtrlFirewallUnderAttackRateLimit=ccTrapCtrlFirewallUnderAttackRateLimit, ccPortalRxPktsAt54Mb=ccPortalRxPktsAt54Mb, ccPortalTxRetriesPkts14=ccPortalTxRetriesPkts14, ccWlanCryptoWpaBcastKeyRotation=ccWlanCryptoWpaBcastKeyRotation, ccMuTxRetries02=ccMuTxRetries02, ccPortalSettingsRtsThresh=ccPortalSettingsRtsThresh, ccRapResultsRogueCopyToAuthTable=ccRapResultsRogueCopyToAuthTable, ccSubnetAccessAdvOutSrcIp=ccSubnetAccessAdvOutSrcIp, ccWlanSumStatsShortPp10kTxWithRetries=ccWlanSumStatsShortPp10kTxWithRetries, ccRapControlOnChannel=ccRapControlOnChannel, ccTrapCtrlEnableTable=ccTrapCtrlEnableTable, ccPortalSettingsAdoptedWlan=ccPortalSettingsAdoptedWlan, ccRapPollOneMuResultsApMac=ccRapPollOneMuResultsApMac, ccPortalCfgRadioEntry=ccPortalCfgRadioEntry, ccCertMgntSelfCertsReqKeyLen=ccCertMgntSelfCertsReqKeyLen, ccWanVpn=ccWanVpn, ccWlanTxRetriesOctetsNone=ccWlanTxRetriesOctetsNone, ccWlanRfSum=ccWlanRfSum, ccResetMuCounters=ccResetMuCounters, ccSubnetAccessAdvOutSrcPortEnd=ccSubnetAccessAdvOutSrcPortEnd, ccPortalTxPktsAt6Mb=ccPortalTxPktsAt6Mb, ccPortalTxPktsAt36Mb=ccPortalTxPktsAt36Mb, ccPortalRfSum=ccPortalRfSum, ccWlanStatsEntry=ccWlanStatsEntry, ccWlanSumStatsLongThroughputTx=ccWlanSumStatsLongThroughputTx, ccPortalCfgRadioDesPowerLevel=ccPortalCfgRadioDesPowerLevel, ccWlanName=ccWlanName, ccTrapCtrlRedundancyStateChange=ccTrapCtrlRedundancyStateChange, ccPortalChannel=ccPortalChannel, ccPortalTxOctetsAt36Mb=ccPortalTxOctetsAt36Mb, ccPortalSettingsDefaultPriWlan=ccPortalSettingsDefaultPriWlan, ccRapAuthMacFilter=ccRapAuthMacFilter, ccWanVpnKeyAutoIkeRemoteIdType=ccWanVpnKeyAutoIkeRemoteIdType, ccMuTxRetriesEntry=ccMuTxRetriesEntry, ccPortalTxPktsEntry=ccPortalTxPktsEntry, ccRapResultsRogueClosestPortalRssi=ccRapResultsRogueClosestPortalRssi, ccSubnetDhcpServerStaticMapTable=ccSubnetDhcpServerStaticMapTable, ccWlanSumStatsLongPp10kDropped=ccWlanSumStatsLongPp10kDropped, sysoids=sysoids, ccWanVpnKeyAutoEspAuthAlg=ccWanVpnKeyAutoEspAuthAlg, ccMuSumStatsShortThroughputRx=ccMuSumStatsShortThroughputRx, ccMuTxOctetsAt5pt5Mb=ccMuTxOctetsAt5pt5Mb, ccWlanTxPktsEntry=ccWlanTxPktsEntry, ccPortalSettingsSecBeacon=ccPortalSettingsSecBeacon, ccRapDetectorsInterval=ccRapDetectorsInterval, ccCertMgntSelfCertsReqRowStatus=ccCertMgntSelfCertsReqRowStatus, ccWlanTxOctetsTable=ccWlanTxOctetsTable, ccWlanSumStatsShortTotalMus=ccWlanSumStatsShortTotalMus, ccPortalRxOctetsTable=ccPortalRxOctetsTable, ccMuLastActivity=ccMuLastActivity, ccPortalPointersToWlans=ccPortalPointersToWlans, ccWlanSigStatsNoiseSumSquares=ccWlanSigStatsNoiseSumSquares, ccPortalTable=ccPortalTable, ccMuSumStatsShortTxAvgRetries100=ccMuSumStatsShortTxAvgRetries100, ccWanVpnIkeState=ccWanVpnIkeState, ccWanIpAddrEntry=ccWanIpAddrEntry, ccSubnetAccessDestType=ccSubnetAccessDestType, ccWanNatLowestUnusedSlot=ccWanNatLowestUnusedSlot, ccPortalSettingsDefaultIndex=ccPortalSettingsDefaultIndex, ccSumStatsLongWindow=ccSumStatsLongWindow, ccRapPortalResultsInProcess=ccRapPortalResultsInProcess, ccPortalSumStatsShortNumPkts=ccPortalSumStatsShortNumPkts, ccSnmpTrapSinkV12Table=ccSnmpTrapSinkV12Table, ccMuTxRetriesOctetsTable=ccMuTxRetriesOctetsTable, ccSubnetAccessTable=ccSubnetAccessTable, ccMuTxRetries15=ccMuTxRetries15, ccPortalTxOctetsUcast=ccPortalTxOctetsUcast, ccIdentfication=ccIdentfication, ccWanVpnKeyExchange=ccWanVpnKeyExchange, ccRadiusUsersGroupEntry=ccRadiusUsersGroupEntry, ws2000=ws2000, ccWlanTxPktsUcast=ccWlanTxPktsUcast, ccPortalSumStatsLongThroughputRx=ccPortalSumStatsLongThroughputRx, ccWlanRxPktsEntry=ccWlanRxPktsEntry, ccMuUnAssociated=ccMuUnAssociated, ccPortalTxOctetsAt6Mb=ccPortalTxOctetsAt6Mb, ccTrapCtrlSumStatsCanBeSetPortal=ccTrapCtrlSumStatsCanBeSetPortal, ccWlanAuthEapSyslogSeverIp=ccWlanAuthEapSyslogSeverIp, ccCertMgntSelfCertsSignedSubject=ccCertMgntSelfCertsSignedSubject, ccPortalSettingsLocation=ccPortalSettingsLocation, ccPortalBackgroundNoiseSumSquares=ccPortalBackgroundNoiseSumSquares, ccPortPoeEquipped=ccPortPoeEquipped, ccCACertsDeleteRow=ccCACertsDeleteRow, ccPortalTxPktsAt5pt5Mb=ccPortalTxPktsAt5pt5Mb, ccMuTxRetries05=ccMuTxRetries05, ccPortalSettingsShortPreamble=ccPortalSettingsShortPreamble, ccSnmpAccessV12Entry=ccSnmpAccessV12Entry, ccWlanDisallowMuToMu=ccWlanDisallowMuToMu, ccWanDhcpEnable=ccWanDhcpEnable, ccPortalCfgRadioDesPowerInMW=ccPortalCfgRadioDesPowerInMW, ccWlanRxPktsAt48Mb=ccWlanRxPktsAt48Mb, ccPortalRxPktsAt6Mb=ccPortalRxPktsAt6Mb, ccWanVpnKeyManualAhAuth=ccWanVpnKeyManualAhAuth, ccPortalTxRetriesPkts11=ccPortalTxRetriesPkts11, ccSnmpTrapSinkV3AuthAlgorithm=ccSnmpTrapSinkV3AuthAlgorithm, ccMuTxPktsAt6Mb=ccMuTxPktsAt6Mb, ccWlanWeight=ccWlanWeight, ccWlanAuthKerberosPassword=ccWlanAuthKerberosPassword, ccSnmpAccessControlTable=ccSnmpAccessControlTable, ccWlanMuAclEntry=ccWlanMuAclEntry, ccRouterRipDirection=ccRouterRipDirection, ccAssociationEntry=ccAssociationEntry, ccWlanAuthKerberosKdcPort1=ccWlanAuthKerberosKdcPort1, ccPortalTxRetriesPktsFailed=ccPortalTxRetriesPktsFailed, ccTrapCtrlSumStatsThresholdMu=ccTrapCtrlSumStatsThresholdMu, ccPortalSettingsAntenna=ccPortalSettingsAntenna, ccMuRxOctetsAt36Mb=ccMuRxOctetsAt36Mb, ccMuSumStatsShortAvgMuNoise=ccMuSumStatsShortAvgMuNoise, ccPortalOptions=ccPortalOptions, ccCertMgntSelfCertsSignedExpiry=ccCertMgntSelfCertsSignedExpiry, ccPortalTxRetriesPkts01=ccPortalTxRetriesPkts01, ccWlanSumStatsShortAvgMuSignal=ccWlanSumStatsShortAvgMuSignal, ccSnmpTrapSinkV12DestinationIp=ccSnmpTrapSinkV12DestinationIp, ccWanVpnRemoteSubnet=ccWanVpnRemoteSubnet, ccRapAuthEssidFilter=ccRapAuthEssidFilter, ccWlanTxPktsAt6Mb=ccWlanTxPktsAt6Mb, ccPortalRxPktsTable=ccPortalRxPktsTable, ccWlanTxRetriesPkts13=ccWlanTxRetriesPkts13, ccWlanRxOctetsAt22Mb=ccWlanRxOctetsAt22Mb, ccPortalRxOctetsAt9Mb=ccPortalRxOctetsAt9Mb, ccWanFirewallGlobalEnable=ccWanFirewallGlobalEnable, ccTrapCtrlSumStatsUnits=ccTrapCtrlSumStatsUnits, ccPortalSettingsDefaultSecBeacon=ccPortalSettingsDefaultSecBeacon, ccWanVpnKeyAutoIkeEncrypAlg=ccWanVpnKeyAutoIkeEncrypAlg, ccRapPollSymbolMusInterval=ccRapPollSymbolMusInterval, ccWanContentBlockSmtp=ccWanContentBlockSmtp, ccLoadFtpPassword=ccLoadFtpPassword, ccSubnetAccessAdvOutRowStatus=ccSubnetAccessAdvOutRowStatus, ccInfo=ccInfo, ccRouterRoutesDestMask=ccRouterRoutesDestMask, ccRapPortalResults=ccRapPortalResults, ccRapOnChannelEnable=ccRapOnChannelEnable, ccSnmpAccessV12CustomOid=ccSnmpAccessV12CustomOid, ccApSshv1Mode=ccApSshv1Mode, ccPortalSumStatsLongPktsPerSec100=ccPortalSumStatsLongPktsPerSec100, ccMuRxRssiNumPkts=ccMuRxRssiNumPkts, ccWlanRxOctetsAt9Mb=ccWlanRxOctetsAt9Mb, ccRapAuthCopyAllRogue=ccRapAuthCopyAllRogue, ccMuTxRetries07=ccMuTxRetries07, ccWlanCryptoWpaTwoEntry=ccWlanCryptoWpaTwoEntry, ccWanNatInboundDefaultEna=ccWanNatInboundDefaultEna, ccCertMgntSelfCertsSignedIndex=ccCertMgntSelfCertsSignedIndex, ccPortalSettingsUniSpread=ccPortalSettingsUniSpread, ccMuRxOctetsUcast=ccMuRxOctetsUcast, ccRouterRip2=ccRouterRip2, ccWlanSubnet=ccWlanSubnet, ccTrapCtrlSumStatsCanBeSetMu=ccTrapCtrlSumStatsCanBeSetMu, TransmitRate=TransmitRate, ccCACertsEntry=ccCACertsEntry, ccMuTxOctetsAt36Mb=ccMuTxOctetsAt36Mb, ccRapPortalResultsTable=ccRapPortalResultsTable, ccNotificationsGroup=ccNotificationsGroup, ccSubnetAccessAdvInSrcIp=ccSubnetAccessAdvInSrcIp, ccPortalTxRetriesOctets10=ccPortalTxRetriesOctets10, ccMuLastPortal=ccMuLastPortal, ccWlanTxRetriesOctetsFailed=ccWlanTxRetriesOctetsFailed, ccRadiusProxyServerSharedSecret=ccRadiusProxyServerSharedSecret, ccSnmpAccessV3AuthPassword=ccSnmpAccessV3AuthPassword, ccSubnetAccessRuleRowStatus=ccSubnetAccessRuleRowStatus, ccSubnetDhcpState=ccSubnetDhcpState, ccWanDhcpPrimaryDnsServer=ccWanDhcpPrimaryDnsServer, ccPortalRxOctetsAt54Mb=ccPortalRxOctetsAt54Mb, ccAdminGroup=ccAdminGroup)
