#
# PySNMP MIB module STAND-ALONE-ETHERNET-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STAND-ALONE-ETHERNET-SWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
Timeout, = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
IpAddress, ModuleIdentity, TimeTicks, NotificationType, MibIdentifier, Bits, Unsigned32, enterprises, Counter64, ObjectIdentity, iso, Gauge32, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "TimeTicks", "NotificationType", "MibIdentifier", "Bits", "Unsigned32", "enterprises", "Counter64", "ObjectIdentity", "iso", "Gauge32", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
grandjunction = MibIdentifier((1, 3, 6, 1, 4, 1, 437))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1))
fastLink = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1))
seriesG2xx = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2))
series2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3))
sysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1))
sysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3))
netMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4))
upgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6))
bandwidthUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7))
bridgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8))
esModuleBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1))
sysInfoFwdEngineRevision = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoFwdEngineRevision.setStatus('mandatory')
sysInfoBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoBoardRevision.setStatus('mandatory')
sysInfoTotalNumberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoTotalNumberOfPorts.setStatus('mandatory')
sysInfoNumberOfSwitchPorts = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoNumberOfSwitchPorts.setStatus('mandatory')
sysInfoNumberOfSharedPorts = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoNumberOfSharedPorts.setStatus('mandatory')
sysInfoNumberOfInstalledModules = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoNumberOfInstalledModules.setStatus('mandatory')
sysInfoBuffersUsed = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoBuffersUsed.setStatus('mandatory')
sysInfoMaxBuffers = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoMaxBuffers.setStatus('mandatory')
sysInfoUtilDisplay = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoUtilDisplay.setStatus('mandatory')
sysInfoAddrCapacity = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoAddrCapacity.setStatus('mandatory')
sysInfoRestrictedStaticAddrCapacity = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRestrictedStaticAddrCapacity.setStatus('mandatory')
sysInfoPOSTResult = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoPOSTResult.setStatus('mandatory')
sysInfoPortFailedPOSTMap = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoPortFailedPOSTMap.setStatus('mandatory')
sysInfoPortLinkDisplayMap = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoPortLinkDisplayMap.setStatus('mandatory')
sysInfoPortDisabledDisplayMap = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoPortDisabledDisplayMap.setStatus('mandatory')
sysInfoBroadcastStormLastTime = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoBroadcastStormLastTime.setStatus('mandatory')
sysInfoPortExceedBroadcastStorm = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoPortExceedBroadcastStorm.setStatus('mandatory')
sysInfoRedundantPowerState = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("healthy", 2), ("faulty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRedundantPowerState.setStatus('mandatory')
sysInfoInternalPowerState = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoInternalPowerState.setStatus('mandatory')
sysInfoConfigFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoConfigFileStatus.setStatus('mandatory')
sysInfoImageCapability = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("enterprise", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoImageCapability.setStatus('mandatory')
sysConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigReset.setStatus('mandatory')
sysConfigDefaultReset = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigDefaultReset.setStatus('mandatory')
sysConfigClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigClearPortStats.setStatus('mandatory')
sysConfigAddressViolationAction = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("suspend", 1), ("disable", 2), ("ignore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigAddressViolationAction.setStatus('mandatory')
sysConfigAddressViolationAlert = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigAddressViolationAlert.setStatus('mandatory')
sysConfigSwitchingMode = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("store-and-forward", 1), ("fragmentFree", 2), ("fastForward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigSwitchingMode.setStatus('mandatory')
sysConfigMulticastStoreAndForward = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigMulticastStoreAndForward.setStatus('mandatory')
sysConfigMonitor = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigMonitor.setStatus('mandatory')
sysConfigMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigMonitorPort.setStatus('mandatory')
sysConfigHigherProtocolMonitor = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigHigherProtocolMonitor.setStatus('obsolete')
sysConfigPort25Connector = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("self-sensing", 1), ("rj45", 2), ("aui", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigPort25Connector.setStatus('mandatory')
sysConfigHeuristics = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigHeuristics.setStatus('mandatory')
sysConfigEnableSTP = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigEnableSTP.setStatus('mandatory')
sysConfigStrictSTPTransition = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigStrictSTPTransition.setStatus('deprecated')
sysConfigBroadcastStormAction = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigBroadcastStormAction.setStatus('mandatory')
sysConfigBroadcastStormAlert = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigBroadcastStormAlert.setStatus('mandatory')
sysConfigBroadcastThreshold = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 14400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigBroadcastThreshold.setStatus('mandatory')
sysConfigBroadcastReEnableThreshold = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 14400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigBroadcastReEnableThreshold.setStatus('mandatory')
sysConfig10MbpsEnhancedCongestionControl = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("adaptive", 1), ("disabled", 2), ("moderate-aggressive", 3), ("aggressive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfig10MbpsEnhancedCongestionControl.setStatus('mandatory')
sysConfigNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigNetworkPort.setStatus('mandatory')
sysConfigHalfDuplexBackPressure = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigHalfDuplexBackPressure.setStatus('mandatory')
sysConfigFastEthcParmsPort = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(26, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigFastEthcParmsPort.setStatus('mandatory')
sysConfigTftpServerName = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigTftpServerName.setStatus('mandatory')
sysConfigConfigFileAuto = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigConfigFileAuto.setStatus('mandatory')
sysConfigPortGroupingMode = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge-group", 1), ("vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigPortGroupingMode.setStatus('mandatory')
switchPortTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: switchPortTable.setStatus('mandatory')
swPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "swPortIndex"))
if mibBuilder.loadTexts: swPortEntry.setStatus('mandatory')
swPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortIndex.setStatus('mandatory')
swPortControllerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortControllerRevision.setStatus('mandatory')
swPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortName.setStatus('mandatory')
swPortMediaCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("private-ethernet", 2), ("general-ethernet", 3), ("general-fast-ethernet", 4), ("private-fast-ethernet", 5), ("repeated-fast-ethernet", 6), ("fddi", 7), ("atm", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortMediaCapability.setStatus('mandatory')
swPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortType.setStatus('mandatory')
swPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("rj45", 2), ("bnc", 3), ("aui", 4), ("fiber-sc", 5), ("fiber-st", 6), ("empty", 7), ("group", 8), ("fddi-mic", 10), ("fiber-mtrj", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortConnectorType.setStatus('mandatory')
swPortACR = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortACR.setStatus('deprecated')
swPortFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("auto-negotiate", 3), ("enabled-flow-control", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortFullDuplex.setStatus('mandatory')
swPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("enabled", 1), ("disabled-mgmt", 2), ("suspended-linkbeat", 3), ("suspended-jabber", 4), ("suspended-violation", 5), ("disabled-violation", 7), ("suspended-not-present", 9), ("suspended-not-recognized", 10), ("reset", 11), ("suspended-ringdown", 12), ("suspended-stp", 13), ("disabled-self-test", 14), ("enable-degraded", 15), ("suspended-atm-lane-down", 16), ("suspended-no-vlan", 17), ("disabled-no-vlan", 18), ("suspended-atm-network-down", 19), ("suspended-disl", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortStatus.setStatus('mandatory')
swPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled-mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortAdminStatus.setStatus('mandatory')
swPortLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("enabled", 1), ("disabled-mgmt", 2), ("suspended-linkbeat", 3), ("suspended-jabber", 4), ("suspended-violation", 5), ("disabled-violation", 7), ("suspended-not-present", 9), ("suspended-not-recognized", 10), ("reset", 11), ("suspended-ringdown", 12), ("suspended-stp", 13), ("disabled-self-test", 14), ("enable-degraded", 15), ("suspended-atm-lane-down", 16), ("suspended-no-vlan", 17), ("disabled-no-vlan", 18), ("suspended-atm-network-down", 19), ("suspended-disl", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortLastStatus.setStatus('mandatory')
swPortStatusChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortStatusChanges.setStatus('mandatory')
swPortAddressingSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortAddressingSecurity.setStatus('mandatory')
swPortAddressTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 132))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortAddressTableSize.setStatus('mandatory')
swPortNumberOfLearnedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumberOfLearnedAddresses.setStatus('mandatory')
swPortNumberOfStaticAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumberOfStaticAddresses.setStatus('mandatory')
swPortEraseAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noErase", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortEraseAddresses.setStatus('mandatory')
swPortFloodUnregisteredMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortFloodUnregisteredMulticasts.setStatus('mandatory')
swPortFloodUnknownUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortFloodUnknownUnicasts.setStatus('mandatory')
swPortMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMonitoring.setStatus('mandatory')
swPortSecuredAddressViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortSecuredAddressViolations.setStatus('mandatory')
swPortLinkbeatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkbeat", 1), ("noLinkbeat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortLinkbeatStatus.setStatus('mandatory')
swPortLinkbeatLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortLinkbeatLosses.setStatus('mandatory')
swPortJabberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notJabbering", 1), ("jabbering", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortJabberStatus.setStatus('mandatory')
swPortJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortJabbers.setStatus('mandatory')
swPortClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortClearStatistics.setStatus('mandatory')
swPortBroadcastStormBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notBlocked", 1), ("blocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBroadcastStormBlocked.setStatus('mandatory')
swPortSTPPortFastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSTPPortFastMode.setStatus('mandatory')
swPortHalfDuplexBackPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortHalfDuplexBackPressure.setStatus('obsolete')
swPortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2), ("full-duplex-flow-control", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortDuplexStatus.setStatus('mandatory')
swPortFullDuplexFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortFullDuplexFlowControl.setStatus('obsolete')
swPortEnhancedCongestionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("adaptive", 1), ("disabled", 2), ("moderate-aggressive", 3), ("aggressive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortEnhancedCongestionControl.setStatus('mandatory')
swPortBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBridgePriority.setStatus('mandatory')
swPortBridgePriorityAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBridgePriorityAlternate.setStatus('mandatory')
swPortBridgePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBridgePathCost.setStatus('mandatory')
swPortBridgePathCostAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBridgePathCostAlternate.setStatus('mandatory')
swPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortIfIndex.setStatus('mandatory')
swPortInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInternal.setStatus('mandatory')
switchPortRxStatTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2), )
if mibBuilder.loadTexts: switchPortRxStatTable.setStatus('mandatory')
swPortRxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "swPortRxStatIndex"))
if mibBuilder.loadTexts: swPortRxStatEntry.setStatus('mandatory')
swPortRxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxStatIndex.setStatus('mandatory')
swPortRxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxTotalFrames.setStatus('mandatory')
swPortRxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxTotalOctets.setStatus('mandatory')
swPortRxTotalOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxTotalOctetsWraps.setStatus('mandatory')
swPortRxUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxUnicastFrames.setStatus('mandatory')
swPortRxUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxUnicastOctets.setStatus('mandatory')
swPortRxUnicastOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxUnicastOctetsWraps.setStatus('mandatory')
swPortRxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxBroadcastFrames.setStatus('mandatory')
swPortRxBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxBroadcastOctets.setStatus('mandatory')
swPortRxBroadcastOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxBroadcastOctetsWraps.setStatus('mandatory')
swPortRxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxMulticastFrames.setStatus('mandatory')
swPortRxMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxMulticastOctets.setStatus('mandatory')
swPortRxMulticastOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxMulticastOctetsWraps.setStatus('mandatory')
swPortRxForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxForwardedFrames.setStatus('mandatory')
swPortRxFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxFilteredFrames.setStatus('mandatory')
swPortRxNoBufferDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxNoBufferDiscards.setStatus('mandatory')
swPortRxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxFCSErrors.setStatus('mandatory')
swPortRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxAlignmentErrors.setStatus('mandatory')
swPortRxFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxFrameTooLongs.setStatus('mandatory')
swPortRxRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortRxRunts.setStatus('mandatory')
switchPortTxStatTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3), )
if mibBuilder.loadTexts: switchPortTxStatTable.setStatus('mandatory')
swPortTxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "swPortTxStatIndex"))
if mibBuilder.loadTexts: swPortTxStatEntry.setStatus('mandatory')
swPortTxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxStatIndex.setStatus('mandatory')
swPortTxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxTotalFrames.setStatus('mandatory')
swPortTxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxTotalOctets.setStatus('mandatory')
swPortTxTotalOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxTotalOctetsWraps.setStatus('mandatory')
swPortTxUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxUnicastFrames.setStatus('mandatory')
swPortTxUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxUnicastOctets.setStatus('mandatory')
swPortTxUnicastOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxUnicastOctetsWraps.setStatus('mandatory')
swPortTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxBroadcastFrames.setStatus('mandatory')
swPortTxBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxBroadcastOctets.setStatus('mandatory')
swPortTxBroadcastOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxBroadcastOctetsWraps.setStatus('mandatory')
swPortTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxMulticastFrames.setStatus('mandatory')
swPortTxMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxMulticastOctets.setStatus('mandatory')
swPortTxMulticastOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxMulticastOctetsWraps.setStatus('mandatory')
swPortTxDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxDeferrals.setStatus('mandatory')
swPortTxSingleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxSingleCollisions.setStatus('mandatory')
swPortTxMultipleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxMultipleCollisions.setStatus('mandatory')
swPortTxLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxLateCollisions.setStatus('mandatory')
swPortTxExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxExcessiveCollisions.setStatus('mandatory')
swPortTxExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxExcessiveDeferrals.setStatus('mandatory')
swPortTxExcessiveCollision16s = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxExcessiveCollision16s.setStatus('mandatory')
swPortTxExcessiveCollision4s = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxExcessiveCollision4s.setStatus('mandatory')
swPortTxQueueFullDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxQueueFullDiscards.setStatus('mandatory')
swPortTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxErrors.setStatus('mandatory')
switchPortTxCollTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 4), )
if mibBuilder.loadTexts: switchPortTxCollTable.setStatus('mandatory')
swPortTxCollEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 4, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "swPortTxCollIndex"), (0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "swPortTxCollCount"))
if mibBuilder.loadTexts: swPortTxCollEntry.setStatus('mandatory')
swPortTxCollIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxCollIndex.setStatus('mandatory')
swPortTxCollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxCollCount.setStatus('mandatory')
swPortTxCollFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTxCollFrequencies.setStatus('mandatory')
netMgmtIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtIpAddress.setStatus('mandatory')
netMgmtIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtIpSubnetMask.setStatus('mandatory')
netMgmtDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtDefaultGateway.setStatus('mandatory')
netMgmtEnableAuthenTraps = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtEnableAuthenTraps.setStatus('mandatory')
netMgmtEnableLinkTraps = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtEnableLinkTraps.setStatus('mandatory')
netMgmtConsoleInactTime = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtConsoleInactTime.setStatus('mandatory')
netMgmtConsolePasswordThresh = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtConsolePasswordThresh.setStatus('mandatory')
netMgmtConsoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtConsoleSilentTime.setStatus('mandatory')
netMgmtModemInitString = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtModemInitString.setStatus('mandatory')
netMgmtModemDialString = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtModemDialString.setStatus('mandatory')
netMgmtModemDialDelay = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtModemDialDelay.setStatus('mandatory')
netMgmtModemAutoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtModemAutoAnswer.setStatus('mandatory')
netMgmtSetClientTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 13), )
if mibBuilder.loadTexts: netMgmtSetClientTable.setStatus('mandatory')
netMgmtSetClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 13, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "netMgmtSetClientIndex"))
if mibBuilder.loadTexts: netMgmtSetClientEntry.setStatus('mandatory')
netMgmtSetClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtSetClientIndex.setStatus('mandatory')
netMgmtSetClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtSetClientAddr.setStatus('mandatory')
netMgmtSetClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtSetClientStatus.setStatus('mandatory')
netMgmtSetClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtSetClientName.setStatus('mandatory')
netMgmtTrapClientTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 14), )
if mibBuilder.loadTexts: netMgmtTrapClientTable.setStatus('mandatory')
netMgmtTrapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 14, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "netMgmtTrapClientIndex"))
if mibBuilder.loadTexts: netMgmtTrapClientEntry.setStatus('mandatory')
netMgmtTrapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtTrapClientIndex.setStatus('mandatory')
netMgmtTrapClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtTrapClientAddr.setStatus('mandatory')
netMgmtTrapClientComm = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtTrapClientComm.setStatus('mandatory')
netMgmtTrapClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtTrapClientStatus.setStatus('mandatory')
netMgmtTrapClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtTrapClientName.setStatus('mandatory')
netMgmtCdpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtCdpHoldTime.setStatus('mandatory')
netMgmtCdpTransmissionTime = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtCdpTransmissionTime.setStatus('mandatory')
netMgmtCgmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtCgmpEnable.setStatus('mandatory')
netMgmtCgmpRouterHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtCgmpRouterHoldTime.setStatus('mandatory')
netMgmtVlan = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtVlan.setStatus('mandatory')
netMgmtEnableRIP = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtEnableRIP.setStatus('mandatory')
netMgmtDomainServer1IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtDomainServer1IpAddress.setStatus('mandatory')
netMgmtDomainServer2IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtDomainServer2IpAddress.setStatus('mandatory')
netMgmtDefaultSearchDomain = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtDefaultSearchDomain.setStatus('mandatory')
netMgmtHttpServerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtHttpServerAdminState.setStatus('mandatory')
netMgmtHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtHttpPort.setStatus('mandatory')
upgradeFirmwareSource = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eprom", 1), ("flash", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeFirmwareSource.setStatus('mandatory')
upgradeEPROMRevision = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeEPROMRevision.setStatus('mandatory')
upgradeFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeFlashSize.setStatus('mandatory')
upgradeFlashBankStatus = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeFlashBankStatus.setStatus('mandatory')
upgradeTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeTFTPServerAddress.setStatus('mandatory')
upgradeTFTPLoadFilename = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeTFTPLoadFilename.setStatus('mandatory')
upgradeTFTPInitiate = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgrade", 1), ("noUpgrade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeTFTPInitiate.setStatus('mandatory')
upgradeAutoExecute = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeAutoExecute.setStatus('mandatory')
upgradeTFTPAccept = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeTFTPAccept.setStatus('mandatory')
upgradeTFTPServerName = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeTFTPServerName.setStatus('mandatory')
vlanMaxSupported = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxSupported.setStatus('mandatory')
vlanAllowMembershipOverlap = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAllowMembershipOverlap.setStatus('deprecated')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3), )
if mibBuilder.loadTexts: vlanTable.setStatus('mandatory')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('mandatory')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIndex.setStatus('mandatory')
vlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanName.setStatus('mandatory')
vlanMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMemberPorts.setStatus('mandatory')
vlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpAddress.setStatus('mandatory')
vlanIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpSubnetMask.setStatus('mandatory')
vlanBridgeTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanBridgeTemplate.setStatus('mandatory')
vlanStpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStpAdmin.setStatus('mandatory')
vlanMemberTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 4), )
if mibBuilder.loadTexts: vlanMemberTable.setStatus('mandatory')
vlanMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 4, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "vlanMemberIndex"), (0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "vlanMemberPortIndex"))
if mibBuilder.loadTexts: vlanMemberEntry.setStatus('mandatory')
vlanMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMemberIndex.setStatus('mandatory')
vlanMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMemberPortIndex.setStatus('mandatory')
vlanMemberPortOfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPortOfVlan.setStatus('mandatory')
bridgeTemplateMax = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeTemplateMax.setStatus('mandatory')
bridgeTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 6), )
if mibBuilder.loadTexts: bridgeTemplateTable.setStatus('mandatory')
bridgeTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 6, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "bridgeTemplateIndex"))
if mibBuilder.loadTexts: bridgeTemplateEntry.setStatus('mandatory')
bridgeTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeTemplateIndex.setStatus('mandatory')
bridgeTemplatePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTemplatePriority.setStatus('mandatory')
bridgeTemplateMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 6, 1, 3), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTemplateMaxAge.setStatus('mandatory')
bridgeTemplateHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 6, 1, 4), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTemplateHelloTime.setStatus('mandatory')
bridgeTemplateForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 6, 6, 1, 5), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTemplateForwardDelay.setStatus('mandatory')
bandwidthUsageCurrent = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthUsageCurrent.setStatus('mandatory')
bandwidthUsageMaxPeakEntries = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthUsageMaxPeakEntries.setStatus('mandatory')
bandwidthUsagePeakInterval = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 12, 24, 48, 72, 96, 120, 144, 168))).clone(namedValues=NamedValues(("onehour", 1), ("threehours", 3), ("sixhours", 6), ("twelvehours", 12), ("oneday", 24), ("twodays", 48), ("threedays", 72), ("fourdays", 96), ("fivedays", 120), ("sixdays", 144), ("oneweek", 168)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthUsagePeakInterval.setStatus('mandatory')
bandwidthUsagePeakRestart = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRestart", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthUsagePeakRestart.setStatus('mandatory')
bandwidthUsageCurrentPeakEntry = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthUsageCurrentPeakEntry.setStatus('mandatory')
bandwidthUsagePeakTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 6), )
if mibBuilder.loadTexts: bandwidthUsagePeakTable.setStatus('mandatory')
bandwidthUsagePeakEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 6, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "bandwidthUsagePeakIndex"))
if mibBuilder.loadTexts: bandwidthUsagePeakEntry.setStatus('mandatory')
bandwidthUsagePeakIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthUsagePeakIndex.setStatus('mandatory')
bandwidthUsageStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthUsageStartTime.setStatus('mandatory')
bandwidthUsagePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthUsagePeak.setStatus('mandatory')
bandwidthUsagePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthUsagePeakTime.setStatus('mandatory')
logonIntruder = NotificationType((1, 3, 6, 1, 4, 1, 437, 1, 1, 3) + (0,0)).setObjects(("SNMPv2-MIB", "sysName"))
switchDiagnostic = NotificationType((1, 3, 6, 1, 4, 1, 437, 1, 1, 3) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"))
addressViolation = NotificationType((1, 3, 6, 1, 4, 1, 437, 1, 1, 3) + (0,3)).setObjects(("IF-MIB", "ifIndex"))
broadcastStorm = NotificationType((1, 3, 6, 1, 4, 1, 437, 1, 1, 3) + (0,4)).setObjects(("IF-MIB", "ifIndex"))
rpsFailed = NotificationType((1, 3, 6, 1, 4, 1, 437, 1, 1, 3) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"))
ipAddressChange = NotificationType((1, 3, 6, 1, 4, 1, 437, 1, 1, 3) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"))
bridgeGroupMaxSupported = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupMaxSupported.setStatus('mandatory')
bridgeGroupAllowMembershipOverlap = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupAllowMembershipOverlap.setStatus('mandatory')
bridgeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 3), )
if mibBuilder.loadTexts: bridgeGroupTable.setStatus('mandatory')
bridgeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 3, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "bridgeGroupIndex"))
if mibBuilder.loadTexts: bridgeGroupEntry.setStatus('mandatory')
bridgeGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupIndex.setStatus('mandatory')
bridgeGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupMemberPorts.setStatus('mandatory')
bridgeGroupStpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupStpAdmin.setStatus('mandatory')
bridgeGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 4), )
if mibBuilder.loadTexts: bridgeGroupMemberTable.setStatus('mandatory')
bridgeGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 4, 1), ).setIndexNames((0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "bridgeGroupMemberIndex"), (0, "STAND-ALONE-ETHERNET-SWITCH-MIB", "bridgeGroupMemberPortIndex"))
if mibBuilder.loadTexts: bridgeGroupMemberEntry.setStatus('mandatory')
bridgeGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupMemberIndex.setStatus('mandatory')
bridgeGroupMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupMemberPortIndex.setStatus('mandatory')
bridgeGroupMemberPortOfBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 3, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupMemberPortOfBridgeGroup.setStatus('mandatory')
mibBuilder.exportSymbols("STAND-ALONE-ETHERNET-SWITCH-MIB", swPortRxTotalFrames=swPortRxTotalFrames, swPortTxMulticastOctetsWraps=swPortTxMulticastOctetsWraps, vlanMemberPortOfVlan=vlanMemberPortOfVlan, swPortRxNoBufferDiscards=swPortRxNoBufferDiscards, sysConfigBroadcastThreshold=sysConfigBroadcastThreshold, swPortLastStatus=swPortLastStatus, upgrade=upgrade, sysInfoPortLinkDisplayMap=sysInfoPortLinkDisplayMap, swPortEraseAddresses=swPortEraseAddresses, swPortBridgePathCostAlternate=swPortBridgePathCostAlternate, swPortAdminStatus=swPortAdminStatus, swPortRxUnicastOctets=swPortRxUnicastOctets, swPortTxStatEntry=swPortTxStatEntry, swPortTxTotalOctets=swPortTxTotalOctets, netMgmtModemAutoAnswer=netMgmtModemAutoAnswer, netMgmtVlan=netMgmtVlan, vlanMemberEntry=vlanMemberEntry, netMgmtCdpTransmissionTime=netMgmtCdpTransmissionTime, bridgeTemplateTable=bridgeTemplateTable, sysInfoNumberOfSharedPorts=sysInfoNumberOfSharedPorts, sysConfigPortGroupingMode=sysConfigPortGroupingMode, bandwidthUsagePeak=bandwidthUsagePeak, swPortRxBroadcastOctets=swPortRxBroadcastOctets, bridgeGroupMemberPortOfBridgeGroup=bridgeGroupMemberPortOfBridgeGroup, swPortTxBroadcastOctets=swPortTxBroadcastOctets, sysInfoMaxBuffers=sysInfoMaxBuffers, swPortTxMulticastOctets=swPortTxMulticastOctets, netMgmtCgmpRouterHoldTime=netMgmtCgmpRouterHoldTime, vlanIndex=vlanIndex, swPortRxFrameTooLongs=swPortRxFrameTooLongs, swPortTxCollCount=swPortTxCollCount, bandwidthUsagePeakEntry=bandwidthUsagePeakEntry, netMgmtHttpPort=netMgmtHttpPort, swPortRxForwardedFrames=swPortRxForwardedFrames, bridgeGroupMemberEntry=bridgeGroupMemberEntry, upgradeEPROMRevision=upgradeEPROMRevision, bandwidthUsage=bandwidthUsage, sysConfigMonitorPort=sysConfigMonitorPort, sysInfoImageCapability=sysInfoImageCapability, swPortTxMultipleCollisions=swPortTxMultipleCollisions, sysInfoPortExceedBroadcastStorm=sysInfoPortExceedBroadcastStorm, swPortTxTotalFrames=swPortTxTotalFrames, swPortTxMulticastFrames=swPortTxMulticastFrames, swPortEntry=swPortEntry, bridgeGroupMaxSupported=bridgeGroupMaxSupported, swPortACR=swPortACR, swPortNumberOfLearnedAddresses=swPortNumberOfLearnedAddresses, swPortTxExcessiveCollision4s=swPortTxExcessiveCollision4s, netMgmtIpSubnetMask=netMgmtIpSubnetMask, swPortType=swPortType, swPortTxBroadcastOctetsWraps=swPortTxBroadcastOctetsWraps, upgradeTFTPAccept=upgradeTFTPAccept, esModuleBasic=esModuleBasic, sysInfoPortFailedPOSTMap=sysInfoPortFailedPOSTMap, sysConfigReset=sysConfigReset, vlanTable=vlanTable, swPortLinkbeatLosses=swPortLinkbeatLosses, netMgmtModemDialString=netMgmtModemDialString, netMgmtSetClientTable=netMgmtSetClientTable, bridgeTemplateMax=bridgeTemplateMax, switchPortTxStatTable=switchPortTxStatTable, netMgmtSetClientEntry=netMgmtSetClientEntry, netMgmtDomainServer2IpAddress=netMgmtDomainServer2IpAddress, bridgeGroupTable=bridgeGroupTable, swPortAddressingSecurity=swPortAddressingSecurity, bridgeTemplateMaxAge=bridgeTemplateMaxAge, sysInfoTotalNumberOfPorts=sysInfoTotalNumberOfPorts, netMgmtEnableLinkTraps=netMgmtEnableLinkTraps, netMgmtTrapClientTable=netMgmtTrapClientTable, sysConfigBroadcastStormAction=sysConfigBroadcastStormAction, bridgeGroupMemberTable=bridgeGroupMemberTable, bandwidthUsageStartTime=bandwidthUsageStartTime, swPortBroadcastStormBlocked=swPortBroadcastStormBlocked, swPortTxBroadcastFrames=swPortTxBroadcastFrames, swPortBridgePriority=swPortBridgePriority, vlanAllowMembershipOverlap=vlanAllowMembershipOverlap, products=products, sysInfoFwdEngineRevision=sysInfoFwdEngineRevision, sysInfoUtilDisplay=sysInfoUtilDisplay, vlanIpAddress=vlanIpAddress, fastLink=fastLink, swPortTxCollIndex=swPortTxCollIndex, swPortRxRunts=swPortRxRunts, netMgmtHttpServerAdminState=netMgmtHttpServerAdminState, sysInfoConfigFileStatus=sysInfoConfigFileStatus, sysInfoNumberOfSwitchPorts=sysInfoNumberOfSwitchPorts, bridgeGroupMemberPorts=bridgeGroupMemberPorts, netMgmtDefaultGateway=netMgmtDefaultGateway, swPortRxMulticastFrames=swPortRxMulticastFrames, sysConfigAddressViolationAction=sysConfigAddressViolationAction, bridgeGroupAllowMembershipOverlap=bridgeGroupAllowMembershipOverlap, swPortRxBroadcastOctetsWraps=swPortRxBroadcastOctetsWraps, upgradeFirmwareSource=upgradeFirmwareSource, netMgmtTrapClientStatus=netMgmtTrapClientStatus, netMgmtCgmpEnable=netMgmtCgmpEnable, swPortEnhancedCongestionControl=swPortEnhancedCongestionControl, swPortTxExcessiveCollisions=swPortTxExcessiveCollisions, netMgmtDomainServer1IpAddress=netMgmtDomainServer1IpAddress, swPortRxMulticastOctets=swPortRxMulticastOctets, swPortJabberStatus=swPortJabberStatus, bandwidthUsageCurrentPeakEntry=bandwidthUsageCurrentPeakEntry, switchDiagnostic=switchDiagnostic, swPortIfIndex=swPortIfIndex, swPortTxExcessiveCollision16s=swPortTxExcessiveCollision16s, swPortTxUnicastOctetsWraps=swPortTxUnicastOctetsWraps, swPortRxUnicastOctetsWraps=swPortRxUnicastOctetsWraps, sysConfigSwitchingMode=sysConfigSwitchingMode, bridgeGroup=bridgeGroup, sysConfigPort25Connector=sysConfigPort25Connector, swPortRxMulticastOctetsWraps=swPortRxMulticastOctetsWraps, swPortTxQueueFullDiscards=swPortTxQueueFullDiscards, sysConfigFastEthcParmsPort=sysConfigFastEthcParmsPort, swPortRxAlignmentErrors=swPortRxAlignmentErrors, netMgmtDefaultSearchDomain=netMgmtDefaultSearchDomain, swPortBridgePriorityAlternate=swPortBridgePriorityAlternate, bridgeGroupStpAdmin=bridgeGroupStpAdmin, swPortConnectorType=swPortConnectorType, sysInfo=sysInfo, swPortRxStatIndex=swPortRxStatIndex, sysInfoPortDisabledDisplayMap=sysInfoPortDisabledDisplayMap, netMgmtSetClientIndex=netMgmtSetClientIndex, upgradeFlashBankStatus=upgradeFlashBankStatus, netMgmtEnableRIP=netMgmtEnableRIP, swPortTxDeferrals=swPortTxDeferrals, netMgmtEnableAuthenTraps=netMgmtEnableAuthenTraps, swPortTxExcessiveDeferrals=swPortTxExcessiveDeferrals, netMgmtTrapClientEntry=netMgmtTrapClientEntry, upgradeAutoExecute=upgradeAutoExecute, bandwidthUsagePeakInterval=bandwidthUsagePeakInterval, vlanBridgeTemplate=vlanBridgeTemplate, swPortTxStatIndex=swPortTxStatIndex, bridgeGroupEntry=bridgeGroupEntry, sysConfigConfigFileAuto=sysConfigConfigFileAuto, bridgeGroupMemberIndex=bridgeGroupMemberIndex, bridgeTemplateIndex=bridgeTemplateIndex, netMgmt=netMgmt, sysInfoBoardRevision=sysInfoBoardRevision, netMgmtTrapClientIndex=netMgmtTrapClientIndex, sysInfoBuffersUsed=sysInfoBuffersUsed, upgradeFlashSize=upgradeFlashSize, sysInfoNumberOfInstalledModules=sysInfoNumberOfInstalledModules, swPortRxFilteredFrames=swPortRxFilteredFrames, bandwidthUsageCurrent=bandwidthUsageCurrent, vlanMemberIndex=vlanMemberIndex, swPortMonitoring=swPortMonitoring, swPortIndex=swPortIndex, swPortTxTotalOctetsWraps=swPortTxTotalOctetsWraps, port=port, swPortRxStatEntry=swPortRxStatEntry, sysInfoInternalPowerState=sysInfoInternalPowerState, switchPortTxCollTable=switchPortTxCollTable, vlanStpAdmin=vlanStpAdmin, swPortFullDuplexFlowControl=swPortFullDuplexFlowControl, sysConfigAddressViolationAlert=sysConfigAddressViolationAlert, sysInfoRestrictedStaticAddrCapacity=sysInfoRestrictedStaticAddrCapacity, swPortTxSingleCollisions=swPortTxSingleCollisions, netMgmtModemDialDelay=netMgmtModemDialDelay, vlanMemberPortIndex=vlanMemberPortIndex, swPortInternal=swPortInternal, vlanMemberPorts=vlanMemberPorts, swPortAddressTableSize=swPortAddressTableSize, swPortFloodUnknownUnicasts=swPortFloodUnknownUnicasts, netMgmtTrapClientComm=netMgmtTrapClientComm, ipAddressChange=ipAddressChange, sysInfoRedundantPowerState=sysInfoRedundantPowerState, sysConfigEnableSTP=sysConfigEnableSTP, sysConfigHalfDuplexBackPressure=sysConfigHalfDuplexBackPressure, switchPortTable=switchPortTable, switchPortRxStatTable=switchPortRxStatTable, bridgeTemplateForwardDelay=bridgeTemplateForwardDelay, sysConfig10MbpsEnhancedCongestionControl=sysConfig10MbpsEnhancedCongestionControl, sysConfigTftpServerName=sysConfigTftpServerName, swPortClearStatistics=swPortClearStatistics, netMgmtSetClientStatus=netMgmtSetClientStatus, netMgmtCdpHoldTime=netMgmtCdpHoldTime, swPortStatus=swPortStatus, vlanMemberTable=vlanMemberTable, swPortRxBroadcastFrames=swPortRxBroadcastFrames, addressViolation=addressViolation, sysConfigHeuristics=sysConfigHeuristics, netMgmtModemInitString=netMgmtModemInitString, vlanEntry=vlanEntry, swPortJabbers=swPortJabbers, swPortDuplexStatus=swPortDuplexStatus, bridgeGroupMemberPortIndex=bridgeGroupMemberPortIndex, swPortTxCollFrequencies=swPortTxCollFrequencies, sysConfigNetworkPort=sysConfigNetworkPort, swPortTxUnicastFrames=swPortTxUnicastFrames, bandwidthUsagePeakRestart=bandwidthUsagePeakRestart, upgradeTFTPInitiate=upgradeTFTPInitiate, series2000=series2000, sysInfoBroadcastStormLastTime=sysInfoBroadcastStormLastTime, sysConfigMulticastStoreAndForward=sysConfigMulticastStoreAndForward, netMgmtConsoleInactTime=netMgmtConsoleInactTime, netMgmtSetClientAddr=netMgmtSetClientAddr, sysConfigBroadcastStormAlert=sysConfigBroadcastStormAlert, swPortName=swPortName, bridgeTemplateEntry=bridgeTemplateEntry, swPortHalfDuplexBackPressure=swPortHalfDuplexBackPressure, bandwidthUsageMaxPeakEntries=bandwidthUsageMaxPeakEntries, sysConfigHigherProtocolMonitor=sysConfigHigherProtocolMonitor, seriesG2xx=seriesG2xx, bandwidthUsagePeakTime=bandwidthUsagePeakTime, sysConfig=sysConfig, sysConfigMonitor=sysConfigMonitor, swPortLinkbeatStatus=swPortLinkbeatStatus, vlan=vlan, swPortBridgePathCost=swPortBridgePathCost, vlanIpSubnetMask=vlanIpSubnetMask, swPortTxLateCollisions=swPortTxLateCollisions, netMgmtConsolePasswordThresh=netMgmtConsolePasswordThresh, bandwidthUsagePeakIndex=bandwidthUsagePeakIndex, netMgmtTrapClientName=netMgmtTrapClientName, swPortRxTotalOctets=swPortRxTotalOctets, bridgeTemplatePriority=bridgeTemplatePriority, swPortControllerRevision=swPortControllerRevision, swPortFullDuplex=swPortFullDuplex, logonIntruder=logonIntruder, vlanName=vlanName, grandjunction=grandjunction, sysConfigStrictSTPTransition=sysConfigStrictSTPTransition, upgradeTFTPLoadFilename=upgradeTFTPLoadFilename, sysInfoAddrCapacity=sysInfoAddrCapacity, bandwidthUsagePeakTable=bandwidthUsagePeakTable, swPortTxCollEntry=swPortTxCollEntry, swPortTxErrors=swPortTxErrors, upgradeTFTPServerName=upgradeTFTPServerName, swPortTxUnicastOctets=swPortTxUnicastOctets, swPortRxUnicastFrames=swPortRxUnicastFrames, swPortStatusChanges=swPortStatusChanges, sysConfigDefaultReset=sysConfigDefaultReset, swPortSTPPortFastMode=swPortSTPPortFastMode, vlanMaxSupported=vlanMaxSupported, swPortFloodUnregisteredMulticasts=swPortFloodUnregisteredMulticasts, swPortMediaCapability=swPortMediaCapability, bridgeTemplateHelloTime=bridgeTemplateHelloTime, netMgmtTrapClientAddr=netMgmtTrapClientAddr, broadcastStorm=broadcastStorm, netMgmtIpAddress=netMgmtIpAddress, sysInfoPOSTResult=sysInfoPOSTResult, swPortRxFCSErrors=swPortRxFCSErrors, sysConfigBroadcastReEnableThreshold=sysConfigBroadcastReEnableThreshold, swPortSecuredAddressViolations=swPortSecuredAddressViolations, netMgmtConsoleSilentTime=netMgmtConsoleSilentTime, rpsFailed=rpsFailed, bridgeGroupIndex=bridgeGroupIndex, swPortNumberOfStaticAddresses=swPortNumberOfStaticAddresses, upgradeTFTPServerAddress=upgradeTFTPServerAddress, netMgmtSetClientName=netMgmtSetClientName, sysConfigClearPortStats=sysConfigClearPortStats, swPortRxTotalOctetsWraps=swPortRxTotalOctetsWraps)
