#
# PySNMP MIB module GDCSC613-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCSC613-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, Counter32, Bits, Gauge32, Unsigned32, IpAddress, Integer32, ObjectIdentity, MibIdentifier, NotificationType, ModuleIdentity, Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter32", "Bits", "Gauge32", "Unsigned32", "IpAddress", "Integer32", "ObjectIdentity", "MibIdentifier", "NotificationType", "ModuleIdentity", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
bql2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12))
bql613 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 1))
bql613MIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613MIBVersion.setStatus('mandatory')
bql613WhatAreYouTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 2), )
if mibBuilder.loadTexts: bql613WhatAreYouTable.setStatus('mandatory')
bql613WhatAreYouEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 2, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613WhatAreYouIndex"))
if mibBuilder.loadTexts: bql613WhatAreYouEntry.setStatus('mandatory')
bql613WhatAreYouIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613WhatAreYouIndex.setStatus('mandatory')
bql613CodeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613CodeRev.setStatus('mandatory')
bql613AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613AlarmStatus.setStatus('mandatory')
bql613ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 3), )
if mibBuilder.loadTexts: bql613ConfigTable.setStatus('mandatory')
bql613ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 3, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613ConfigIndex"))
if mibBuilder.loadTexts: bql613ConfigEntry.setStatus('mandatory')
bql613ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613ConfigIndex.setStatus('mandatory')
bql613TestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pattern2047", 1), ("pattern511", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613TestPattern.setStatus('mandatory')
bql613RLTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTimeout", 1), ("timeoutAfter10Min", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613RLTimeout.setStatus('mandatory')
bql613MasterTXClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613MasterTXClkSrc.setStatus('mandatory')
bql613DTEDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10))).clone(namedValues=NamedValues(("kBps64000", 9), ("kBps128000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613DTEDataRate.setStatus('mandatory')
bql613RespRdl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613RespRdl.setStatus('mandatory')
bql613DiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 4), )
if mibBuilder.loadTexts: bql613DiagnosticTable.setStatus('mandatory')
bql613DiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 4, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613DiagnosticIndex"))
if mibBuilder.loadTexts: bql613DiagnosticEntry.setStatus('mandatory')
bql613DiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613DiagnosticIndex.setStatus('mandatory')
bql613DiagnosticTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613DiagnosticTest.setStatus('mandatory')
bql613DiagnosticActive = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613DiagnosticActive.setStatus('mandatory')
bql613DiagnosticResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613DiagnosticResults.setStatus('mandatory')
bql613DiagnosticErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613DiagnosticErrorCount.setStatus('mandatory')
bql613Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7))
bql613AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1))
bql613NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 1))
bql613DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 2))
bql613PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 3))
bql613Lp2B1QOutofSyncAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 4))
bql613LpTxClockOutOfTolerance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 5))
bql613LpExtTxClkAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 6))
bql613LpSealingCurrentNoContinuityAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 7))
bql613LpMajorBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 8))
bql613LpMinorBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 7, 1, 9))
bql613AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 7, 2), )
if mibBuilder.loadTexts: bql613AlarmConfigTable.setStatus('mandatory')
bql613AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 7, 2, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613AlarmConfigIndex"), (0, "GDCSC613-MIB", "bql613AlarmConfigIdentifier"))
if mibBuilder.loadTexts: bql613AlarmConfigEntry.setStatus('mandatory')
bql613AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 7, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613AlarmConfigIndex.setStatus('mandatory')
bql613AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 7, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613AlarmConfigIdentifier.setStatus('mandatory')
bql613AlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("thres10E03", 1), ("thres10E04", 2), ("thres10E05", 3), ("thres10E06", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613AlarmThreshold.setStatus('mandatory')
bql613ControlTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 6), )
if mibBuilder.loadTexts: bql613ControlTable.setStatus('mandatory')
bql613ControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 6, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613ControlIndex"))
if mibBuilder.loadTexts: bql613ControlEntry.setStatus('mandatory')
bql613ControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613ControlIndex.setStatus('mandatory')
bql613SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613SoftReset.setStatus('mandatory')
bql613EraseConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613EraseConfig.setStatus('mandatory')
bql613FrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613FrontPanel.setStatus('mandatory')
bql613LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613LEDStatus.setStatus('mandatory')
bql613CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 7), )
if mibBuilder.loadTexts: bql613CurrentTable.setStatus('mandatory')
bql613CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 7, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613CurrentIndex"))
if mibBuilder.loadTexts: bql613CurrentEntry.setStatus('mandatory')
bql613CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613CurrentIndex.setStatus('mandatory')
bql613CurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613CurrentStats.setStatus('mandatory')
bql613IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 8), )
if mibBuilder.loadTexts: bql613IntervalTable.setStatus('mandatory')
bql613IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 8, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613IntervalIndex"), (0, "GDCSC613-MIB", "bql613IntervalNumber"))
if mibBuilder.loadTexts: bql613IntervalEntry.setStatus('mandatory')
bql613IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613IntervalIndex.setStatus('mandatory')
bql613IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613IntervalNumber.setStatus('mandatory')
bql613IntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613IntervalStats.setStatus('mandatory')
bql613TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 9), )
if mibBuilder.loadTexts: bql613TotalTable.setStatus('mandatory')
bql613TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 9, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613TotalIndex"))
if mibBuilder.loadTexts: bql613TotalEntry.setStatus('mandatory')
bql613TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613TotalIndex.setStatus('mandatory')
bql613TotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613TotalStats.setStatus('mandatory')
bql613IntervalMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 1, 10), )
if mibBuilder.loadTexts: bql613IntervalMaintenanceTable.setStatus('mandatory')
bql613IntervalMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 1, 10, 1), ).setIndexNames((0, "GDCSC613-MIB", "bql613IntervalMaintenanceIndex"))
if mibBuilder.loadTexts: bql613IntervalMaintenanceEntry.setStatus('mandatory')
bql613IntervalMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613IntervalMaintenanceIndex.setStatus('mandatory')
bql613ResetIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613ResetIntervals.setStatus('mandatory')
bql613NumberofValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bql613NumberofValidIntervals.setStatus('mandatory')
bql613ResetMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613ResetMajorAlarm.setStatus('mandatory')
bql613ResetMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bql613ResetMinorAlarm.setStatus('mandatory')
mibBuilder.exportSymbols("GDCSC613-MIB", bql613AlarmConfigIndex=bql613AlarmConfigIndex, bql613Lp2B1QOutofSyncAlm=bql613Lp2B1QOutofSyncAlm, bql613CurrentTable=bql613CurrentTable, bql613ConfigIndex=bql613ConfigIndex, bql613WhatAreYouTable=bql613WhatAreYouTable, bql613DiagnosticIndex=bql613DiagnosticIndex, bql613DiagnosticActive=bql613DiagnosticActive, bql613DiagnosticResults=bql613DiagnosticResults, bql613TotalEntry=bql613TotalEntry, bql613TotalStats=bql613TotalStats, bql613NumberofValidIntervals=bql613NumberofValidIntervals, bql613ConfigEntry=bql613ConfigEntry, bql613LpSealingCurrentNoContinuityAlm=bql613LpSealingCurrentNoContinuityAlm, bql613SoftReset=bql613SoftReset, bql613IntervalMaintenanceEntry=bql613IntervalMaintenanceEntry, bql613CurrentStats=bql613CurrentStats, bql613RespRdl=bql613RespRdl, bql613WhatAreYouEntry=bql613WhatAreYouEntry, bql613WhatAreYouIndex=bql613WhatAreYouIndex, bql613DiagnosticTable=bql613DiagnosticTable, bql613TestPattern=bql613TestPattern, bql613MasterTXClkSrc=bql613MasterTXClkSrc, bql613RLTimeout=bql613RLTimeout, bql613LpTxClockOutOfTolerance=bql613LpTxClockOutOfTolerance, bql613IntervalMaintenanceTable=bql613IntervalMaintenanceTable, bql613LpMinorBERAlm=bql613LpMinorBERAlm, bql613TotalIndex=bql613TotalIndex, bql613FrontPanel=bql613FrontPanel, bql613LEDStatus=bql613LEDStatus, bql613AlarmConfigTable=bql613AlarmConfigTable, bql613CodeRev=bql613CodeRev, bql613ControlTable=bql613ControlTable, bql613DiagnosticErrorCount=bql613DiagnosticErrorCount, bql613=bql613, bql613DTEDataRate=bql613DTEDataRate, bql613ControlIndex=bql613ControlIndex, bql613AlarmStatus=bql613AlarmStatus, bql613PowerUpAlm=bql613PowerUpAlm, bql613AlarmConfigIdentifier=bql613AlarmConfigIdentifier, bql613IntervalIndex=bql613IntervalIndex, bql613IntervalStats=bql613IntervalStats, bql613TotalTable=bql613TotalTable, bql613IntervalMaintenanceIndex=bql613IntervalMaintenanceIndex, bql613ControlEntry=bql613ControlEntry, bql613DiagRxErrAlm=bql613DiagRxErrAlm, bql613EraseConfig=bql613EraseConfig, bql613ResetIntervals=bql613ResetIntervals, bql613DiagnosticTest=bql613DiagnosticTest, bql613ResetMinorAlarm=bql613ResetMinorAlarm, bql613ResetMajorAlarm=bql613ResetMajorAlarm, gdc=gdc, bql2=bql2, bql613AlarmConfigEntry=bql613AlarmConfigEntry, bql613CurrentEntry=bql613CurrentEntry, bql613CurrentIndex=bql613CurrentIndex, bql613AlarmData=bql613AlarmData, bql613AlarmThreshold=bql613AlarmThreshold, bql613LpExtTxClkAlm=bql613LpExtTxClkAlm, bql613MIBVersion=bql613MIBVersion, bql613IntervalEntry=bql613IntervalEntry, bql613NoResponseAlm=bql613NoResponseAlm, bql613LpMajorBERAlm=bql613LpMajorBERAlm, bql613ConfigTable=bql613ConfigTable, bql613Alarm=bql613Alarm, bql613IntervalNumber=bql613IntervalNumber, bql613IntervalTable=bql613IntervalTable, bql613DiagnosticEntry=bql613DiagnosticEntry)
