#
# PySNMP MIB module TELTREND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TELTREND-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, Gauge32, ObjectIdentity, IpAddress, NotificationType, Unsigned32, Integer32, enterprises, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Gauge32", "ObjectIdentity", "IpAddress", "NotificationType", "Unsigned32", "Integer32", "enterprises", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
teltrend = ModuleIdentity((1, 3, 6, 1, 4, 1, 293))
teltrend.setRevisions(('1970-01-01 00:00', '1970-01-01 00:00', '1970-01-01 00:00', '1970-01-01 00:00', '1970-01-01 00:00', '1970-01-01 00:00',))
if mibBuilder.loadTexts: teltrend.setLastUpdated('9905061428+1428')
if mibBuilder.loadTexts: teltrend.setOrganization('Teltrend Inc')
class InterfaceIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

products = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1))
niq = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2))
niqRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1))
niq_4820_2wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 1)).setLabel("niq-4820-2wan")
niq_2830_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 9)).setLabel("niq-2830-bri")
niq_2820_2wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 10)).setLabel("niq-2820-2wan")
niq_2810_1wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 11)).setLabel("niq-2810-1wan")
niq_3830_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 12)).setLabel("niq-3830-bri")
niq_3820_2wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 13)).setLabel("niq-3820-2wan")
niq_3810_1wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 14)).setLabel("niq-3810-1wan")
niq_1870_bri_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 15)).setLabel("niq-1870-bri-wan")
niq_1830_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 16)).setLabel("niq-1830-bri")
niq_1810_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 18)).setLabel("niq-1810-wan")
niq_1100_bri_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 35)).setLabel("niq-1100-bri-wan")
niq_1100_bri_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 36)).setLabel("niq-1100-bri-bay")
niq_1100_wan_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 37)).setLabel("niq-1100-wan-bay")
niq_1100_bay_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 38)).setLabel("niq-1100-bay-bay")
niq_1900_bay_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 47)).setLabel("niq-1900-bay-bay")
niq_3100 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 48)).setLabel("niq-3100")
niq_800_2_pots = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 49)).setLabel("niq-800-2-pots")
niq_800_no_pots = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 52)).setLabel("niq-800-no-pots")
niq_800_4_pots = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 53)).setLabel("niq-800-4-pots")
niq_5200 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 54)).setLabel("niq-5200")
niq_800u_no_pots = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 55)).setLabel("niq-800u-no-pots")
niq_800u_2_pots = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 56)).setLabel("niq-800u-2-pots")
niq_800u_4_pots = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 57)).setLabel("niq-800u-4-pots")
niq_800_syn = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 58)).setLabel("niq-800-syn")
niq_nac_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 60)).setLabel("niq-nac-wan")
niq_pr2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 62)).setLabel("niq-pr2000")
niq_pr2000_50 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 63)).setLabel("niq-pr2000-50")
niq_pr3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 64)).setLabel("niq-pr3000")
niq_alpha = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 65)).setLabel("niq-alpha")
niq_nac_g703 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 66)).setLabel("niq-nac-g703")
niq_800_syn_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 70)).setLabel("niq-800-syn-bri")
niq_800_2_eth_syn = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 71)).setLabel("niq-800-2-eth-syn")
niq_800_pri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 72)).setLabel("niq-800-pri")
niq_800_g703 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 73)).setLabel("niq-800-g703")
niq_nac_60 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 74)).setLabel("niq-nac-60")
niq_800_syn_briu = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 1, 1, 75)).setLabel("niq-800-syn-briu")
objects = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 2))
sysinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 3))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 4))
interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 5))
protocols = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 6))
boards = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1))
ppr_mpr_base = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 1)).setLabel("ppr-mpr-base")
ppr_mpr_sync4 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 2)).setLabel("ppr-mpr-sync4")
ppr_mpr_lan4 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 3)).setLabel("ppr-mpr-lan4")
ppr_mpr_async12 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 4)).setLabel("ppr-mpr-async12")
ppr_mpr_bri1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 5)).setLabel("ppr-mpr-bri1")
ppr_mpr_async16 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 6)).setLabel("ppr-mpr-async16")
ppr_mpr_comp = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 7)).setLabel("ppr-mpr-comp")
ppr_mpr_pri2 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 8)).setLabel("ppr-mpr-pri2")
ppr_2830_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 9)).setLabel("ppr-2830-bri")
ppr_2820_wan_ww = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 10)).setLabel("ppr-2820-wan-ww")
ppr_2810_wan_w = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 11)).setLabel("ppr-2810-wan-w")
ppr_3830_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 12)).setLabel("ppr-3830-bri")
ppr_3820_wan_ww = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 13)).setLabel("ppr-3820-wan-ww")
ppr_3810_wan_w = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 14)).setLabel("ppr-3810-wan-w")
ppr_1870_ext_bri_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 15)).setLabel("ppr-1870-ext-bri-wan")
ppr_1830_ext_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 16)).setLabel("ppr-1830-ext-bri")
ppr_1850_pc_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 17)).setLabel("ppr-1850-pc-bri")
ppr_1810_ext_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 18)).setLabel("ppr-1810-ext-wan")
ppr_1810_pc_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 19)).setLabel("ppr-1810-pc-wan")
ppr_mpr_sync2 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 20)).setLabel("ppr-mpr-sync2")
ppr_mpr_pri1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 21)).setLabel("ppr-mpr-pri1")
ppr_mpr_bri2 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 22)).setLabel("ppr-mpr-bri2")
ppr_mpr_bri4 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 23)).setLabel("ppr-mpr-bri4")
ppr_mpr_enco_us = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 24)).setLabel("ppr-mpr-enco-us")
ppr_mpr_enco_hs = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 25)).setLabel("ppr-mpr-enco-hs")
ppr_mpr_cryp_us = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 26)).setLabel("ppr-mpr-cryp-us")
ppr_mpr_cryp_hs = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 27)).setLabel("ppr-mpr-cryp-hs")
ppr_mpr_comp_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 28)).setLabel("ppr-mpr-comp-2")
ppr_mpr_gio = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 29)).setLabel("ppr-mpr-gio")
ppr_iom_asyn4 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 30)).setLabel("ppr-iom-asyn4")
ppr_iom_bri1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 31)).setLabel("ppr-iom-bri1")
ppr_iom_eth1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 32)).setLabel("ppr-iom-eth1")
ppr_iom_pri1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 33)).setLabel("ppr-iom-pri1")
ppr_iom_syn2 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 34)).setLabel("ppr-iom-syn2")
ppr_1000_bri_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 35)).setLabel("ppr-1000-bri-wan")
ppr_1000_bri_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 36)).setLabel("ppr-1000-bri-bay")
ppr_1000_wan_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 37)).setLabel("ppr-1000-wan-bay")
ppr_1000_bay_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 38)).setLabel("ppr-1000-bay-bay")
ppr_icm_syn1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 39)).setLabel("ppr-icm-syn1")
ppr_icm_bri1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 40)).setLabel("ppr-icm-bri1")
ppr_icm_eth1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 41)).setLabel("ppr-icm-eth1")
ppr_icm_pots1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 42)).setLabel("ppr-icm-pots1")
ppr_icm_pots2 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 43)).setLabel("ppr-icm-pots2")
ppr_icm_pots4 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 44)).setLabel("ppr-icm-pots4")
ppr_icm_pri1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 45)).setLabel("ppr-icm-pri1")
ppr_icm_asyn4 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 46)).setLabel("ppr-icm-asyn4")
ppr_1900_bay_bay = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 47)).setLabel("ppr-1900-bay-bay")
ppr_3100 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 48)).setLabel("ppr-3100")
ppr_840 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 49)).setLabel("ppr-840")
ppr_iom_g703tdm = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 50)).setLabel("ppr-iom-g703tdm")
ppr_icm_g703tdm = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 51)).setLabel("ppr-icm-g703tdm")
ppr_820 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 52)).setLabel("ppr-820")
ppr_860 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 53)).setLabel("ppr-860")
ppr_5200 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 54)).setLabel("ppr-5200")
ppr_820U = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 55)).setLabel("ppr-820U")
ppr_840U = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 56)).setLabel("ppr-840U")
ppr_860U = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 57)).setLabel("ppr-860U")
ppr_800SYN = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 58)).setLabel("ppr-800SYN")
ppr_ICM_BRI1U = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 59)).setLabel("ppr-ICM-BRI1U")
ppr_NAS = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 60)).setLabel("ppr-NAS")
ppr_GIO_3100 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 61)).setLabel("ppr-GIO-3100")
ppr_PR2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 62)).setLabel("ppr-PR2000")
ppr_beta_cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 63)).setLabel("ppr-beta-cpu")
ppr_PR3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 64)).setLabel("ppr-PR3000")
ppr_alpha_cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 65)).setLabel("ppr-alpha-cpu")
ppr_NAC_G703 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 66)).setLabel("ppr-NAC-G703")
ppr_EMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 67)).setLabel("ppr-EMAC")
ppr_CMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 68)).setLabel("ppr-CMAC")
ppr_CEMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 69)).setLabel("ppr-CEMAC")
ppr_800DUAL = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 70)).setLabel("ppr-800DUAL")
ppr_800SYNDUALETH = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 71)).setLabel("ppr-800SYNDUALETH")
ppr_800PRI = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 72)).setLabel("ppr-800PRI")
ppr_800PRITDMONLY = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 73)).setLabel("ppr-800PRITDMONLY")
ppr_NAC_60 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 74)).setLabel("ppr-NAC-60")
ppr_800DUAL_U = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 75)).setLabel("ppr-800DUAL-U")
ppr_icm_e1t1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 76)).setLabel("ppr-icm-e1t1")
ppr_icm_e1t1tdmonly = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 1, 77)).setLabel("ppr-icm-e1t1tdmonly")
release = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 2))
iftypes = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 3))
iface_eth = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 3, 1)).setLabel("iface-eth")
iface_syn = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 3, 2)).setLabel("iface-syn")
iface_asyn = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 3, 3)).setLabel("iface-asyn")
iface_bri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 3, 4)).setLabel("iface-bri")
iface_pri = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 3, 5)).setLabel("iface-pri")
iface_pots = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 3, 6)).setLabel("iface-pots")
chips = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4))
chip_68020_cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 1)).setLabel("chip-68020-cpu")
chip_68340_cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 2)).setLabel("chip-68340-cpu")
chip_68302_cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 3)).setLabel("chip-68302-cpu")
chip_68360_cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 4)).setLabel("chip-68360-cpu")
chip_rtc1 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 21)).setLabel("chip-rtc1")
chip_rtc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 22)).setLabel("chip-rtc2")
chip_rtc3 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 23)).setLabel("chip-rtc3")
chip_rtc4 = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 24)).setLabel("chip-rtc4")
chip_ram_1mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 31)).setLabel("chip-ram-1mb")
chip_ram_2mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 32)).setLabel("chip-ram-2mb")
chip_ram_3mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 33)).setLabel("chip-ram-3mb")
chip_ram_4mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 34)).setLabel("chip-ram-4mb")
chip_ram_6mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 36)).setLabel("chip-ram-6mb")
chip_ram_8mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 38)).setLabel("chip-ram-8mb")
chip_ram_12mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 42)).setLabel("chip-ram-12mb")
chip_ram_16mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 46)).setLabel("chip-ram-16mb")
chip_ram_20mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 50)).setLabel("chip-ram-20mb")
chip_ram_32mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 62)).setLabel("chip-ram-32mb")
chip_flash_1mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 71)).setLabel("chip-flash-1mb")
chip_flash_2mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 72)).setLabel("chip-flash-2mb")
chip_flash_3mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 73)).setLabel("chip-flash-3mb")
chip_flash_4mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 74)).setLabel("chip-flash-4mb")
chip_flash_6mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 76)).setLabel("chip-flash-6mb")
chip_flash_8mb = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 78)).setLabel("chip-flash-8mb")
chip_pem = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 1, 4, 120)).setLabel("chip-pem")
cc = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 4, 37))
ccDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1), )
if mibBuilder.loadTexts: ccDetailsTable.setStatus('mandatory')
ccDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1), ).setIndexNames((0, "TELTREND-MIB", "ccDetailsIndex"))
if mibBuilder.loadTexts: ccDetailsEntry.setStatus('mandatory')
ccDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsIndex.setStatus('mandatory')
ccDetailsName = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsName.setStatus('mandatory')
ccDetailsRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRemoteName.setStatus('mandatory')
ccDetailsCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCalledNumber.setStatus('mandatory')
ccDetailsCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallingNumber.setStatus('mandatory')
ccDetailsAlternateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsAlternateNumber.setStatus('mandatory')
ccDetailsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsEnabled.setStatus('mandatory')
ccDetailsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in-only", 1), ("out-only", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsDirection.setStatus('mandatory')
ccDetailsPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPrecedence.setStatus('mandatory')
ccDetailsHoldupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsHoldupTime.setStatus('mandatory')
ccDetailsPreferredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPreferredIfIndex.setStatus('mandatory')
ccDetailsRequiredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRequiredIfIndex.setStatus('mandatory')
ccDetailsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPriority.setStatus('mandatory')
ccDetailsRetryT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryT1.setStatus('mandatory')
ccDetailsRetryN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryN1.setStatus('mandatory')
ccDetailsRetryT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1200)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryT2.setStatus('mandatory')
ccDetailsRetryN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryN2.setStatus('mandatory')
ccDetailsKeepup = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsKeepup.setStatus('mandatory')
ccDetailsOutSetupCli = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("calling", 2), ("interface", 3), ("nonumber", 4))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupCli.setStatus('mandatory')
ccDetailsOutSetupUser = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupUser.setStatus('mandatory')
ccDetailsOutSetupCalledSub = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupCalledSub.setStatus('mandatory')
ccDetailsOutSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSubaddress.setStatus('mandatory')
ccDetailsCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallback.setStatus('mandatory')
ccDetailsCallbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(41)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallbackDelay.setStatus('mandatory')
ccDetailsInSetupCalledSubSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCalledSubSearch.setStatus('mandatory')
ccDetailsInSetupUserSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupUserSearch.setStatus('mandatory')
ccDetailsInSetupCliSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("list", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliSearch.setStatus('mandatory')
ccDetailsInSetupCliSearchList = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliSearchList.setStatus('mandatory')
ccDetailsInAnyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInAnyFlag.setStatus('mandatory')
ccDetailsInSetupCalledSubCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCalledSubCheck.setStatus('mandatory')
ccDetailsInSetupUserCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupUserCheck.setStatus('mandatory')
ccDetailsInSetupCliCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("present", 2), ("required", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliCheck.setStatus('mandatory')
ccDetailsInSetupCliCheckList = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliCheckList.setStatus('mandatory')
ccDetailsUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attach", 1), ("ppp", 2))).clone('attach')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsUserType.setStatus('mandatory')
ccDetailsLoginType = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("userdb", 2), ("radius", 3), ("pap-tacacs", 4), ("chap", 5), ("pap-radius", 6), ("tacacs", 7), ("all", 8))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsLoginType.setStatus('mandatory')
ccDetailsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("cli", 2), ("calledsub", 3), ("useruser", 4), ("callname", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsUsername.setStatus('mandatory')
ccDetailsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("cli", 2), ("calledsub", 3), ("useruser", 4), ("callname", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPassword.setStatus('mandatory')
ccDetailsBumpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsBumpDelay.setStatus('mandatory')
ccDetailsDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-64k", 1), ("rate-56k", 2))).clone('rate-64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsDataRate.setStatus('mandatory')
ccDetailsPppTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 31), ValueRangeConstraint(33, 33), )).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPppTemplate.setStatus('mandatory')
ccDetailsUserModule = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsUserModule.setStatus('mandatory')
ccDetailsNumberAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsNumberAttachments.setStatus('mandatory')
ccCliListTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 2), )
if mibBuilder.loadTexts: ccCliListTable.setStatus('mandatory')
ccCliListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 2, 1), ).setIndexNames((0, "TELTREND-MIB", "ccCliListListIndex"), (0, "TELTREND-MIB", "ccCliListEntryIndex"))
if mibBuilder.loadTexts: ccCliListEntry.setStatus('mandatory')
ccCliListListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCliListListIndex.setStatus('mandatory')
ccCliListEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCliListEntryIndex.setStatus('mandatory')
ccCliListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCliListNumber.setStatus('mandatory')
ccActiveCallTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3), )
if mibBuilder.loadTexts: ccActiveCallTable.setStatus('mandatory')
ccActiveCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1), ).setIndexNames((0, "TELTREND-MIB", "ccActiveCallIndex"))
if mibBuilder.loadTexts: ccActiveCallEntry.setStatus('mandatory')
ccActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallIndex.setStatus('mandatory')
ccActiveCallDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDetailsIndex.setStatus('mandatory')
ccActiveCallIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallIfIndex.setStatus('mandatory')
ccActiveCallDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-64k", 1), ("rate-56k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDataRate.setStatus('mandatory')
ccActiveCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 1), ("off", 2), ("try", 3), ("on", 4), ("wait", 5), ("await1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallState.setStatus('mandatory')
ccActiveCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDirection.setStatus('mandatory')
ccActiveCallUserModule = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallUserModule.setStatus('mandatory')
ccActiveCallUserInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallUserInstance.setStatus('mandatory')
ccActiveCallBchannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallBchannelIndex.setStatus('mandatory')
ccCallLogTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4), )
if mibBuilder.loadTexts: ccCallLogTable.setStatus('mandatory')
ccCallLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1), ).setIndexNames((0, "TELTREND-MIB", "ccCallLogIndex"))
if mibBuilder.loadTexts: ccCallLogEntry.setStatus('mandatory')
ccCallLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogIndex.setStatus('mandatory')
ccCallLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogName.setStatus('mandatory')
ccCallLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 1), ("active", 2), ("disconnected", 3), ("cleared", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogState.setStatus('mandatory')
ccCallLogTimeStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogTimeStarted.setStatus('mandatory')
ccCallLogDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogDirection.setStatus('mandatory')
ccCallLogDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogDuration.setStatus('mandatory')
ccCallLogRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogRemoteNumber.setStatus('mandatory')
ccAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 5), )
if mibBuilder.loadTexts: ccAttachmentTable.setStatus('mandatory')
ccAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 5, 1), ).setIndexNames((0, "TELTREND-MIB", "ccAttachmentDetailsIndex"), (0, "TELTREND-MIB", "ccAttachmentEntryIndex"))
if mibBuilder.loadTexts: ccAttachmentEntry.setStatus('mandatory')
ccAttachmentDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentDetailsIndex.setStatus('mandatory')
ccAttachmentEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentEntryIndex.setStatus('mandatory')
ccAttachmentActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentActiveCallIndex.setStatus('mandatory')
ccAttachmentUserInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentUserInstance.setStatus('mandatory')
ccBchannelTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6), )
if mibBuilder.loadTexts: ccBchannelTable.setStatus('mandatory')
ccBchannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1), ).setIndexNames((0, "TELTREND-MIB", "ccBchannelIfIndex"), (0, "TELTREND-MIB", "ccBchannelChannelIndex"))
if mibBuilder.loadTexts: ccBchannelEntry.setStatus('mandatory')
ccBchannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelIfIndex.setStatus('mandatory')
ccBchannelChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelChannelIndex.setStatus('mandatory')
ccBchannelAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelAllocated.setStatus('mandatory')
ccBchannelCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("data", 2), ("voice", 3), ("x25", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelCallType.setStatus('mandatory')
ccBchannelActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelActiveCallIndex.setStatus('mandatory')
ccBchannelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelPriority.setStatus('mandatory')
ccBchannelDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 37, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("unallocated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelDirection.setStatus('mandatory')
loader = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 4, 48))
loadTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 1), )
if mibBuilder.loadTexts: loadTable.setStatus('mandatory')
loadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 1, 1), ).setIndexNames((0, "TELTREND-MIB", "loadIndex"))
if mibBuilder.loadTexts: loadEntry.setStatus('mandatory')
loadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadIndex.setStatus('mandatory')
loadServer = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadServer.setStatus('mandatory')
loadDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("nvs", 2), ("flash", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadDestination.setStatus('mandatory')
loadFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFilename.setStatus('mandatory')
loadDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadDelay.setStatus('mandatory')
loadStatus = MibScalar((1, 3, 6, 1, 4, 1, 293, 2, 4, 48, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("wait", 2), ("loading", 3), ("complete", 4), ("reset", 5), ("actionstart", 6), ("actionstop", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadStatus.setStatus('mandatory')
install = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 4, 49))
installTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1), )
if mibBuilder.loadTexts: installTable.setStatus('mandatory')
installEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1), ).setIndexNames((0, "TELTREND-MIB", "instIndex"))
if mibBuilder.loadTexts: installEntry.setStatus('mandatory')
instIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("temporary", 1), ("preferred", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instIndex.setStatus('mandatory')
instRelDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("eprom", 2), ("flash", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: instRelDevice.setStatus('mandatory')
instRelName = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: instRelName.setStatus('mandatory')
instRelMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelMajor.setStatus('mandatory')
instRelMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelMinor.setStatus('mandatory')
instPatDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("flash", 3), ("nvs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: instPatDevice.setStatus('mandatory')
instPatName = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: instPatName.setStatus('mandatory')
instRelInterim = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelInterim.setStatus('mandatory')
installHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 2), )
if mibBuilder.loadTexts: installHistoryTable.setStatus('mandatory')
installHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 2, 1), ).setIndexNames((0, "TELTREND-MIB", "instHistIndex"))
if mibBuilder.loadTexts: installHistoryEntry.setStatus('mandatory')
instHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instHistIndex.setStatus('mandatory')
instHistLine = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instHistLine.setStatus('mandatory')
configFile = MibScalar((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFile.setStatus('mandatory')
licenceTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4), )
if mibBuilder.loadTexts: licenceTable.setStatus('mandatory')
licenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1), ).setIndexNames((0, "TELTREND-MIB", "licenceIndex"))
if mibBuilder.loadTexts: licenceEntry.setStatus('mandatory')
licenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceIndex.setStatus('mandatory')
licenceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("deleting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceStatus.setStatus('mandatory')
licenceRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceRelease.setStatus('mandatory')
licenceMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceMajor.setStatus('mandatory')
licenceMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceMinor.setStatus('mandatory')
licencePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licencePassword.setStatus('mandatory')
licenceExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceExpiry.setStatus('mandatory')
licenceInterim = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 49, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceInterim.setStatus('mandatory')
file = MibIdentifier((1, 3, 6, 1, 4, 1, 293, 2, 4, 56))
fileTable = MibTable((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1), )
if mibBuilder.loadTexts: fileTable.setStatus('mandatory')
fileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1, 1), ).setIndexNames((0, "TELTREND-MIB", "fileIndex"))
if mibBuilder.loadTexts: fileEntry.setStatus('mandatory')
fileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileIndex.setStatus('mandatory')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileName.setStatus('mandatory')
fileDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("nvs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDevice.setStatus('mandatory')
fileCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCreationTime.setStatus('mandatory')
fileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("deleting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileStatus.setStatus('mandatory')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 293, 2, 4, 56, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSize.setStatus('mandatory')
mibBuilder.exportSymbols("TELTREND-MIB", niq_pr2000=niq_pr2000, ppr_mpr_bri2=ppr_mpr_bri2, ccDetailsAlternateNumber=ccDetailsAlternateNumber, ccActiveCallDirection=ccActiveCallDirection, chip_rtc3=chip_rtc3, ccDetailsPassword=ccDetailsPassword, ccDetailsPppTemplate=ccDetailsPppTemplate, ccCliListEntryIndex=ccCliListEntryIndex, chip_68020_cpu=chip_68020_cpu, instPatName=instPatName, licenceRelease=licenceRelease, niq_1100_bri_bay=niq_1100_bri_bay, cc=cc, ccActiveCallTable=ccActiveCallTable, ppr_mpr_sync4=ppr_mpr_sync4, ccDetailsIndex=ccDetailsIndex, ppr_800DUAL=ppr_800DUAL, instRelDevice=instRelDevice, ppr_mpr_gio=ppr_mpr_gio, ccDetailsInAnyFlag=ccDetailsInAnyFlag, objects=objects, installEntry=installEntry, niq_2830_bri=niq_2830_bri, ccAttachmentUserInstance=ccAttachmentUserInstance, ppr_mpr_enco_us=ppr_mpr_enco_us, chip_flash_3mb=chip_flash_3mb, licenceTable=licenceTable, chip_ram_6mb=chip_ram_6mb, niq_800_2_eth_syn=niq_800_2_eth_syn, protocols=protocols, ppr_PR2000=ppr_PR2000, ccDetailsInSetupCalledSubSearch=ccDetailsInSetupCalledSubSearch, ppr_icm_bri1=ppr_icm_bri1, ppr_1000_bri_bay=ppr_1000_bri_bay, installHistoryEntry=installHistoryEntry, ppr_PR3000=ppr_PR3000, iface_syn=iface_syn, niq_4820_2wan=niq_4820_2wan, niq_nac_wan=niq_nac_wan, ccDetailsPreferredIfIndex=ccDetailsPreferredIfIndex, ccDetailsCallback=ccDetailsCallback, ccActiveCallDataRate=ccActiveCallDataRate, ccActiveCallUserInstance=ccActiveCallUserInstance, ppr_2830_bri=ppr_2830_bri, loadDestination=loadDestination, ccDetailsInSetupUserCheck=ccDetailsInSetupUserCheck, ppr_mpr_pri1=ppr_mpr_pri1, ppr_1000_bri_wan=ppr_1000_bri_wan, chip_flash_2mb=chip_flash_2mb, fileName=fileName, ccAttachmentTable=ccAttachmentTable, fileEntry=fileEntry, ppr_1810_ext_wan=ppr_1810_ext_wan, niq_3810_1wan=niq_3810_1wan, ppr_NAC_G703=ppr_NAC_G703, ccActiveCallState=ccActiveCallState, niq_800_no_pots=niq_800_no_pots, teltrend=teltrend, ccDetailsOutSubaddress=ccDetailsOutSubaddress, installHistoryTable=installHistoryTable, ccCallLogIndex=ccCallLogIndex, licenceStatus=licenceStatus, fileStatus=fileStatus, ccAttachmentActiveCallIndex=ccAttachmentActiveCallIndex, ccDetailsInSetupCliSearchList=ccDetailsInSetupCliSearchList, chip_ram_2mb=chip_ram_2mb, licenceMajor=licenceMajor, niq=niq, niq_3100=niq_3100, chips=chips, ccCallLogTable=ccCallLogTable, ccBchannelDirection=ccBchannelDirection, ccBchannelCallType=ccBchannelCallType, ppr_820U=ppr_820U, instRelMinor=instRelMinor, ccCliListTable=ccCliListTable, niq_alpha=niq_alpha, ccDetailsInSetupCliCheckList=ccDetailsInSetupCliCheckList, ppr_800SYN=ppr_800SYN, ppr_1850_pc_bri=ppr_1850_pc_bri, ppr_icm_e1t1=ppr_icm_e1t1, ccCallLogState=ccCallLogState, ccCallLogRemoteNumber=ccCallLogRemoteNumber, niq_2810_1wan=niq_2810_1wan, loadServer=loadServer, instIndex=instIndex, instRelName=instRelName, ppr_ICM_BRI1U=ppr_ICM_BRI1U, ppr_NAC_60=ppr_NAC_60, ccDetailsPriority=ccDetailsPriority, ppr_iom_eth1=ppr_iom_eth1, ppr_EMAC=ppr_EMAC, ccBchannelPriority=ccBchannelPriority, licenceEntry=licenceEntry, chip_ram_32mb=chip_ram_32mb, instRelInterim=instRelInterim, ppr_2820_wan_ww=ppr_2820_wan_ww, modules=modules, ppr_1870_ext_bri_wan=ppr_1870_ext_bri_wan, niq_800_syn_bri=niq_800_syn_bri, ccBchannelTable=ccBchannelTable, licenceInterim=licenceInterim, niq_800_2_pots=niq_800_2_pots, niq_nac_60=niq_nac_60, ppr_icm_pots1=ppr_icm_pots1, ppr_800DUAL_U=ppr_800DUAL_U, iface_eth=iface_eth, ppr_mpr_cryp_us=ppr_mpr_cryp_us, ppr_1900_bay_bay=ppr_1900_bay_bay, chip_rtc2=chip_rtc2, ccDetailsInSetupCliCheck=ccDetailsInSetupCliCheck, fileTable=fileTable, release=release, niq_1810_wan=niq_1810_wan, niq_800_syn=niq_800_syn, ppr_iom_g703tdm=ppr_iom_g703tdm, niq_pr2000_50=niq_pr2000_50, iface_pri=iface_pri, iface_pots=iface_pots, ccDetailsRetryN2=ccDetailsRetryN2, ppr_GIO_3100=ppr_GIO_3100, niq_3820_2wan=niq_3820_2wan, licenceMinor=licenceMinor, ppr_beta_cpu=ppr_beta_cpu, iface_asyn=iface_asyn, PYSNMP_MODULE_ID=teltrend, ppr_mpr_comp_2=ppr_mpr_comp_2, ppr_mpr_bri1=ppr_mpr_bri1, ppr_3820_wan_ww=ppr_3820_wan_ww, ppr_1000_bay_bay=ppr_1000_bay_bay, ccDetailsTable=ccDetailsTable, ppr_icm_pots2=ppr_icm_pots2, ppr_icm_pots4=ppr_icm_pots4, instRelMajor=instRelMajor, ppr_3810_wan_w=ppr_3810_wan_w, ppr_iom_asyn4=ppr_iom_asyn4, ccActiveCallIfIndex=ccActiveCallIfIndex, niq_800_4_pots=niq_800_4_pots, ccAttachmentEntryIndex=ccAttachmentEntryIndex, chip_68360_cpu=chip_68360_cpu, ccDetailsPrecedence=ccDetailsPrecedence, ccDetailsRequiredIfIndex=ccDetailsRequiredIfIndex, ppr_800PRITDMONLY=ppr_800PRITDMONLY, loadFilename=loadFilename, niq_800u_2_pots=niq_800u_2_pots, ccDetailsCallbackDelay=ccDetailsCallbackDelay, chip_ram_20mb=chip_ram_20mb, ccCliListListIndex=ccCliListListIndex, niq_1100_bay_bay=niq_1100_bay_bay, chip_68340_cpu=chip_68340_cpu, chip_flash_6mb=chip_flash_6mb, ppr_840U=ppr_840U, ccDetailsRetryT2=ccDetailsRetryT2, ccDetailsKeepup=ccDetailsKeepup, niq_5200=niq_5200, ppr_icm_asyn4=ppr_icm_asyn4, ppr_2810_wan_w=ppr_2810_wan_w, ccActiveCallBchannelIndex=ccActiveCallBchannelIndex, licenceIndex=licenceIndex, ccDetailsUserType=ccDetailsUserType, ccBchannelIfIndex=ccBchannelIfIndex, loadDelay=loadDelay, ppr_840=ppr_840, ccCliListEntry=ccCliListEntry, fileCreationTime=fileCreationTime, chip_68302_cpu=chip_68302_cpu, niq_1100_wan_bay=niq_1100_wan_bay, ppr_820=ppr_820, chip_rtc1=chip_rtc1, ccCallLogEntry=ccCallLogEntry, ppr_icm_pri1=ppr_icm_pri1, ppr_800SYNDUALETH=ppr_800SYNDUALETH, ccDetailsRemoteName=ccDetailsRemoteName, ccDetailsCalledNumber=ccDetailsCalledNumber, ccCallLogDuration=ccCallLogDuration, ccDetailsHoldupTime=ccDetailsHoldupTime, loadStatus=loadStatus, ppr_1810_pc_wan=ppr_1810_pc_wan, niq_1870_bri_wan=niq_1870_bri_wan, chip_ram_16mb=chip_ram_16mb, iface_bri=iface_bri, chip_pem=chip_pem, niqRouter=niqRouter, ppr_alpha_cpu=ppr_alpha_cpu, chip_ram_1mb=chip_ram_1mb, interfaces=interfaces, ppr_mpr_bri4=ppr_mpr_bri4, loadTable=loadTable, ppr_icm_g703tdm=ppr_icm_g703tdm, licenceExpiry=licenceExpiry, chip_ram_3mb=chip_ram_3mb, chip_ram_8mb=chip_ram_8mb, ppr_NAS=ppr_NAS, ccDetailsInSetupUserSearch=ccDetailsInSetupUserSearch, ccDetailsOutSetupUser=ccDetailsOutSetupUser, ppr_mpr_comp=ppr_mpr_comp, chip_flash_4mb=chip_flash_4mb, ccDetailsCallingNumber=ccDetailsCallingNumber, ccDetailsRetryT1=ccDetailsRetryT1, loader=loader, fileSize=fileSize, ppr_CEMAC=ppr_CEMAC, ccAttachmentDetailsIndex=ccAttachmentDetailsIndex, ppr_mpr_lan4=ppr_mpr_lan4, niq_800_syn_briu=niq_800_syn_briu, ccDetailsUsername=ccDetailsUsername, chip_ram_12mb=chip_ram_12mb, chip_flash_1mb=chip_flash_1mb, instHistIndex=instHistIndex, ppr_800PRI=ppr_800PRI, niq_800_g703=niq_800_g703, ppr_mpr_cryp_hs=ppr_mpr_cryp_hs, ppr_icm_syn1=ppr_icm_syn1, ppr_mpr_enco_hs=ppr_mpr_enco_hs, ccAttachmentEntry=ccAttachmentEntry, ccDetailsInSetupCliSearch=ccDetailsInSetupCliSearch, ccBchannelEntry=ccBchannelEntry, chip_ram_4mb=chip_ram_4mb, licencePassword=licencePassword, InterfaceIndexOrZero=InterfaceIndexOrZero, ppr_mpr_async16=ppr_mpr_async16, ppr_iom_syn2=ppr_iom_syn2, ppr_icm_eth1=ppr_icm_eth1, ccDetailsRetryN1=ccDetailsRetryN1, ccDetailsEnabled=ccDetailsEnabled, loadEntry=loadEntry, file=file, ppr_1830_ext_bri=ppr_1830_ext_bri, traps=traps, ccDetailsName=ccDetailsName, ccCallLogDirection=ccCallLogDirection, ccActiveCallIndex=ccActiveCallIndex, ccDetailsNumberAttachments=ccDetailsNumberAttachments, ppr_mpr_base=ppr_mpr_base, ppr_mpr_sync2=ppr_mpr_sync2, boards=boards, iftypes=iftypes, configFile=configFile, chip_rtc4=chip_rtc4, ccDetailsBumpDelay=ccDetailsBumpDelay, niq_pr3000=niq_pr3000, ccActiveCallDetailsIndex=ccActiveCallDetailsIndex, ppr_3830_bri=ppr_3830_bri, ccDetailsDirection=ccDetailsDirection, install=install, niq_2820_2wan=niq_2820_2wan, ccCallLogName=ccCallLogName, niq_1100_bri_wan=niq_1100_bri_wan, ppr_3100=ppr_3100, ccCallLogTimeStarted=ccCallLogTimeStarted, ccBchannelAllocated=ccBchannelAllocated, fileDevice=fileDevice, ccCliListNumber=ccCliListNumber, ppr_860=ppr_860)
mibBuilder.exportSymbols("TELTREND-MIB", ppr_iom_pri1=ppr_iom_pri1, niq_1830_bri=niq_1830_bri, niq_800u_no_pots=niq_800u_no_pots, instHistLine=instHistLine, ppr_860U=ppr_860U, ccDetailsOutSetupCalledSub=ccDetailsOutSetupCalledSub, ppr_icm_e1t1tdmonly=ppr_icm_e1t1tdmonly, loadIndex=loadIndex, ccDetailsInSetupCalledSubCheck=ccDetailsInSetupCalledSubCheck, ppr_CMAC=ppr_CMAC, ccDetailsEntry=ccDetailsEntry, ccDetailsOutSetupCli=ccDetailsOutSetupCli, niq_3830_bri=niq_3830_bri, ppr_mpr_pri2=ppr_mpr_pri2, ccActiveCallUserModule=ccActiveCallUserModule, instPatDevice=instPatDevice, ppr_1000_wan_bay=ppr_1000_wan_bay, ccDetailsUserModule=ccDetailsUserModule, ccBchannelChannelIndex=ccBchannelChannelIndex, installTable=installTable, fileIndex=fileIndex, products=products, sysinfo=sysinfo, ccActiveCallEntry=ccActiveCallEntry, niq_800u_4_pots=niq_800u_4_pots, chip_flash_8mb=chip_flash_8mb, niq_nac_g703=niq_nac_g703, ppr_mpr_async12=ppr_mpr_async12, ppr_iom_bri1=ppr_iom_bri1, ppr_5200=ppr_5200, ccDetailsLoginType=ccDetailsLoginType, niq_1900_bay_bay=niq_1900_bay_bay, niq_800_pri=niq_800_pri, ccDetailsDataRate=ccDetailsDataRate, ccBchannelActiveCallIndex=ccBchannelActiveCallIndex)
