#
# PySNMP MIB module HUAWEI-FWD-RES-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-FWD-RES-TRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:32:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
entPhysicalName, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, MibIdentifier, Bits, TimeTicks, Gauge32, ObjectIdentity, NotificationType, Counter64, iso, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "MibIdentifier", "Bits", "TimeTicks", "Gauge32", "ObjectIdentity", "NotificationType", "Counter64", "iso", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwFwdResTrapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227))
hwFwdResTrapMIB.setRevisions(('2015-10-14 11:23', '2015-10-12 21:00', '2015-10-12 21:00', '2015-10-12 15:00', '2015-10-12 15:00', '2015-10-08 17:50', '2015-09-25 17:50', '2015-09-22 20:10', '2015-09-22 19:20', '2015-09-17 19:20', '2015-08-04 19:20', '2015-06-24 17:23', '2015-06-23 14:32', '2015-06-17 16:20', '2015-06-09 15:20', '2015-05-22 09:50', '2015-05-08 09:50', '2015-05-08 09:50', '2015-05-08 09:50', '2015-05-05 14:20', '2015-05-05 14:20', '2015-04-16 22:00', '2015-04-16 21:50', '2015-04-08 21:50', '2015-03-31 21:50', '2015-03-31 21:50', '2015-03-31 21:50', '2015-03-28 09:50', '2015-02-07 10:11', '2014-11-18 13:58', '2014-10-28 18:46', '2014-10-23 10:47', '2014-10-23 10:47', '2014-10-17 15:47', '2014-10-17 15:47', '2014-09-25 10:58', '2014-09-25 10:58', '2014-09-25 10:58', '2014-09-25 10:58', '2014-09-03 15:01', '2014-08-30 11:56', '2014-08-22 10:10', '2014-08-19 10:01', '2014-08-06 16:39', '2014-07-31 19:22', '2014-07-28 19:47', '2014-07-28 16:55', '2014-07-26 17:14', '2014-07-26 15:38', '2014-07-21 15:54', '2014-07-16 21:35', '2014-07-15 19:35', '2014-07-11 08:29', '2014-07-08 17:29', '2014-06-09 08:44', '2014-06-05 14:59', '2014-05-30 14:50', '2014-05-21 10:00', '2014-03-08 16:00', '2014-03-05 15:26', '2014-01-23 16:57', '2014-01-21 11:40', '2014-01-14 21:46', '2014-01-06 19:52', '2013-12-12 17:28', '2013-11-13 10:28', '2013-05-14 11:21', '2013-05-14 11:21', '2010-06-04 10:43',))
if mibBuilder.loadTexts: hwFwdResTrapMIB.setLastUpdated('201510141123Z')
if mibBuilder.loadTexts: hwFwdResTrapMIB.setOrganization('Huawei Technologies Co.,Ltd.')
hwFwdResTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1))
hwEntPhysicalindex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEntPhysicalindex.setStatus('current')
hwFwdResLackSlotStr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdResLackSlotStr.setStatus('current')
hwFwdResLackReasonId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 191, 192, 193, 194, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 195, 196, 197, 198, 199, 176, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258), SingleValueConstraint(260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 285, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347))).clone(namedValues=NamedValues(("mplsLinkOverLoad", 1), ("fibv4NumOverLoad", 2), ("fibv6NumOverLoad", 3), ("arpNumOverLoad", 4), ("ipv6NdNumOverLoad", 5), ("statNumOverLoad", 6), ("qosNumOverLoad", 7), ("l2vpnLinkOverLoad", 8), ("mcintNumOverLoad", 9), ("bfdaclNumOverLoad", 10), ("mcfibv4NumOverLoad", 11), ("mcfibv6NumOverLoad", 12), ("fwdToken", 13), ("fvrfIndex", 14), ("ndIndex", 15), ("tunnelIndex", 16), ("bfdIndex", 17), ("vplsLearnId", 18), ("vsiIndex", 19), ("nsIndex", 20), ("ringIndex", 21), ("mcRepSerNumOverload", 22), ("mcOutIfNumOverload", 23), ("mcTmgidOverLoad", 24), ("mcMlidOverLoad", 25), ("trillNhpIndex", 26), ("hostTablePrefixTable", 27), ("routingTablePrefixTable", 28), ("ecmpNextHopTable", 29), ("layer3InterfaceTable", 30), ("nextHopTable", 31), ("tunnelDecapsulationTable", 32), ("qvctNumOverload", 33), ("bfdGlobalIndex", 34), ("ipv4FullRull", 35), ("ipv4MaskRull", 36), ("ipv6FullRull", 37), ("ipv6MaskRull", 38), ("dpiRull", 39), ("comRull", 40), ("tcpFlagRull", 41), ("ccSendNum", 42), ("ccRecvNum", 43), ("y1731SlmNum", 44), ("y17311dmNum", 45), ("y17312dmNum", 46), ("ipv6RoutingTablePrefixTable", 47), ("mcv4StatId", 48), ("mcv6StatId", 49), ("nhpNum", 50), ("nscvmNum", 51), ("y1731dlmNum", 52), ("bgpExtNum", 53), ("bgp6ExtNum", 54), ("linkEncap", 55), ("tunnelEncap", 56), ("largeExactlyMatchTable", 57), ("logicalInterface", 58), ("macMulticastIndex", 59), ("virtualPort", 60), ("aclEntry", 61), ("aclGroup", 62), ("meter", 63), ("counter", 64), ("aclEntryOutbound", 65), ("aclGroupOutbound", 66), ("meterOutbound", 67), ("counterOutbound", 68), ("multicastIndex", 69), ("ipfpmAclResOverLoad", 70), ("dhcpsnpBindTableResOverLoad", 71), ("l3aclFailed", 72), ("fibArpFwdModeNumOverLoad", 73), ("l2mcindex", 74), ("ipmcindex", 75), ("arpNumLack", 76), ("ipv6NdNumLack", 77), ("statNumLack", 78), ("qosNumLack", 79), ("l2vpnLinkLack", 80), ("mcintNumLack", 81), ("bfdaclNumLack", 82), ("mcfibv4NumLack", 83), ("mcfibv6NumLack", 84), ("nhpNumLack", 85), ("nscvmNumLack", 86), ("mplsLinkLack", 87), ("fibv4NumLack", 88), ("fibv6NumLack", 89), ("bgpExtNumLack", 90), ("bgp6ExtNumLack", 91), ("l2UserEntryOverload", 92), ("fwdGlobal1Token", 93), ("fwdBoardToken", 94), ("fwdGlobal2Token", 95), ("fwdGlobal3Token", 96), ("fwdGlobal4Token", 97), ("fwdGlobal1ThresHoldToken", 98), ("fwdBoardThresHoldToken", 99), ("fwdGlobal2ThresHoldToken", 100), ("fwdGlobal3ThresHoldToken", 101), ("fwdGlobal4ThresHoldToken", 102), ("atIndex", 103), ("flexQvctNum", 104), ("inFlowWred", 105), ("outFlowWred", 106), ("inFlowMapping", 107), ("outFlowMapping", 108), ("inFlowQueueWfq", 109), ("outFlowQueueWfq", 110), ("inFlowQueueCbs", 111), ("outFlowQueueCbs", 112), ("inFlowQueuePbs", 113), ("outFlowQueuePbs", 114), ("inUserQueue", 115), ("outUserQueue", 116), ("inUserQueueTemp", 117), ("outUserQueueTemp", 118), ("inServiceTemp", 119), ("outServiceTemp", 120), ("inGQ", 121), ("outGQ", 122), ("inGQTemp", 123), ("outGQTemp", 124), ("inIfCar", 125), ("outIfCar", 126), ("inCarRemark", 127), ("outCarRemark", 128), ("gid", 129), ("inAclCar", 130), ("outAclCar", 131), ("aclRe", 132), ("aclNhp", 133), ("inIPv4Acl", 134), ("inIPv6Acl", 135), ("outIPv4Acl", 136), ("outIPv6Acl", 137), ("inQppbCar", 138), ("outQppbCar", 139), ("inMirror", 140), ("outMirror", 141), ("inMirrorCapture", 142), ("outMirrorCapture", 143), ("inSuppressCar", 144), ("outSuppressCar", 145), ("inMirrorCar", 146), ("outMirrorCar", 147), ("aclNst", 148), ("inProfSuppCar", 149), ("outProfSuppCar", 150), ("inProfSuppCarStat", 151), ("outProfSuppCarStat", 152), ("inProfSingleCar", 153), ("outProfSingleCar", 154), ("inProfSingleCarStat", 155), ("outProfSingleCarStat", 156), ("inAclStat", 157), ("outAclStat", 158), ("aclCarStat", 159), ("inIfCarStat", 160), ("outIfCarStat", 161), ("inL2Acl", 162), ("outL2Acl", 163), ("l2TrafLmt", 167), ("inBehaviorSuppCar", 191), ("outBehaviorSuppCar", 192), ("qppbAcl", 193), ("qppbGid", 194), ("fwdInAc", 168), ("fwdOutAc", 169), ("fwdLem", 170), ("fwdL2Entry", 171), ("fwdMcMacfibv4", 172), ("fwdSnoop", 173), ("fwdArp", 174), ("fwdFibCheck", 175), ("flexRes", 177), ("mainsubifRes", 178), ("dcnRes", 179), ("statRes", 180), ("eoamRes", 181), ("y1564Res", 182), ("l2vpn", 183), ("vlan", 184), ("bridgeDomain", 185), ("vrrpRes", 186), ("twampRes", 187), ("bfdRes", 188), ("qinqRes", 189), ("evcRes", 190), ("tunnelDecapsulationRes", 195), ("ipfpmRes", 196), ("rfc2544Res", 197), ("dynLoadbNhpRes", 198), ("l2TrafLmtStat", 199), ("trunkDynAdjRes", 176), ("l2mcastResExceedThresHold", 200), ("fibResExceedThresHold", 201), ("arpResExceedThresHold", 202), ("l3vpnResExceedThresHold", 203), ("greResExceedThresHold", 204), ("mplsResExceedThresHold", 205), ("ldrResExceedThresHold", 206), ("teResExceedThresHold", 207), ("mplsvllResExceedThresHold", 208), ("vllResExceedThresHold", 209), ("vplsResExceedThresHold", 210), ("hqosResExceedThresHold", 211), ("aclResExceedThresHold", 212), ("carResExceedThresHold", 213), ("diffservResExceedThresHold", 214), ("statResExceedThresHold", 215), ("resmResExceedThresHold", 216), ("fesdrveResExceedThresHold", 217), ("atmResExceedThresHold", 218), ("cesResExceedThresHold", 219), ("mlpppResExceedThresHold", 220), ("devmResExceedThresHold", 221), ("oamResExceedThresHold", 222), ("oam1agResExceedThresHold", 223), ("y1731ResExceedThresHold", 224), ("oam3ahResExceedThresHold", 225), ("nqaResExceedThresHold", 226), ("rfc2544ResExceedThresHold", 227), ("sdResExceedThresHold", 228), ("tpoamResExceedThresHold", 229), ("tpapsResExceedThresHold", 230), ("ipfpmResExceedThresHold", 231), ("ethtestResExceedThresHold", 232), ("bfdResExceedThresHold", 233), ("oammaxResExceedThresHold", 234), ("imsResExceedThresHold", 235), ("tcamResExceedThresHold", 236), ("dcnResExceedThresHold", 237), ("defendResExceedThresHold", 238), ("l3mcastResExceedThresHold", 239), ("dhcpsnpResExceedThresHold", 240), ("dp", 241), ("inGQSshaper", 242), ("outGQSshaper", 243), ("inVI", 244), ("outVI", 245), ("inVISshaper", 246), ("outVISshaper", 247), ("inVITemp", 248), ("outVITemp", 249), ("cqWred", 250), ("incqServiceTemp", 251), ("outcqServiceTemp", 252), ("popgoRe", 253), ("cpcarQueue", 254), ("apsRes", 255), ("oamRes", 256), ("chipinUserQueue", 257), ("chipouUserQueue", 258)) + NamedValues(("pwHqosOverLoad", 260), ("tpSlmResExceedThresHold", 261), ("tp1dmResExceedThresHold", 262), ("tp2dmResExceedThresHold", 263), ("tpDlmResExceedThresHold", 264), ("tpSlmResOverLoad", 265), ("tp1dmResOverLoad", 266), ("tp2dmResOverLoad", 267), ("tpDlmResOverLoad", 268), ("tpoamCcResOverLoad", 269), ("apsResOverLoad", 270), ("inTmSqResExceed90ThresHold", 271), ("outTmSqResExceed90ThresHold", 272), ("inSlotSqResExceed90ThresHold", 273), ("outSlotSqResExceed90ThresHold", 274), ("protectgroupResOverLoad", 275), ("forwardvpnResOverLoad", 276), ("vlanxlateResOverLoad", 277), ("egressvlanxlateResOverLoad", 278), ("semResOverLoad", 279), ("ipsecAclResOverLoad", 280), ("erpsResExceed90ThresHold", 285), ("multioutlifResExceed90ThresHold", 295), ("vplsResExceed90ThresHold", 300), ("evpnResExceed90ThresHold", 301), ("l2tpv3ResExceed90ThresHold", 302), ("multicastGroupExceed95ThresHold", 303), ("l2MfibNumExceed95ThresHold", 304), ("inIFCarExceedThresHold", 305), ("outIFCarExceedThresHold", 306), ("gidExceedThresHold", 307), ("inRuleStatExceedThresHold", 308), ("outRuleStatExceedThresHold", 309), ("bhvInCarExceedThresHold", 310), ("bhvOutCarExceedThresHold", 311), ("inIPV4TCAMExceedThresHold", 312), ("outIPV4TCAMExceedThresHold", 313), ("inIPV6TCAMExceedThresHold", 314), ("outIPV6TCAMExceedThresHold", 315), ("vplsResOverLoad", 316), ("evpnResOverLoad", 317), ("fibv4NumExceedThresHold", 318), ("fibv6NumExceedThresHold", 319), ("ipv6NdExceedThresHold", 320), ("mcfibv4NumExceedThresHold", 321), ("mcfibv6NumExceedThresHold", 322), ("remoteIntfRes", 323), ("pbbBmacRes", 324), ("ipv4GreDecapsulationRes", 325), ("ipv6GreDecapsulationRes", 326), ("trillMcOutIfNumOverload", 327), ("pbbResExceed90ThresHold", 328), ("pbbResOverLoad", 329), ("inIPV4UCLTCAMExceedThresHold", 334), ("outIPV4UCLTCAMExceedThresHold", 335), ("inIPV6UCLTCAMExceedThresHold", 336), ("outIPV6UCLTCAMExceedThresHold", 337), ("inIPV4UCLTCAMNumOverload", 338), ("outIPV4UCLTCAMNumOverload", 339), ("inIPV6UCLTCAMNumOverload", 340), ("outIPV6UCLTCAMNumOverload", 341), ("boardAclTCAMNumExhaust", 342), ("inGqResExceed90ThresHold", 343), ("outGqResExceed90ThresHold", 344), ("mplsSRTELabelStackResLack", 345), ("mplsSRTELabelStackResExceedThresHold", 346), ("mplsLdpStatResExceedThresHold", 347)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdResLackReasonId.setStatus('current')
hwFwdResThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdResThreshold.setStatus('current')
hwL3FailedService = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL3FailedService.setStatus('current')
hwCommand = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCommand.setStatus('current')
hwViewName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwViewName.setStatus('current')
hwReasonDescription = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwReasonDescription.setStatus('current')
hwFwdResLackVrId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdResLackVrId.setStatus('current')
hwFwdProcFailForLCSOperationId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("l3vpnFibDownloadFailed", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdProcFailForLCSOperationId.setStatus('current')
hwFwdLicenseName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdLicenseName.setStatus('current')
hwFwdResTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 12), )
if mibBuilder.loadTexts: hwFwdResTable.setStatus('current')
hwFwdResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 12, 1), ).setIndexNames((0, "HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResDevName"))
if mibBuilder.loadTexts: hwFwdResEntry.setStatus('current')
hwFwdResDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdResDevName.setStatus('current')
hwFwdResLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 12, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdResLimit.setStatus('current')
hwFwdResCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 1, 12, 1, 3), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFwdResCurThroughput.setStatus('current')
hwFwdResTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2))
hwFwdResLacTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1))
hwWholeFwdResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 1)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwWholeFwdResLack.setStatus('current')
hwWholeFwdResLackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 2)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwWholeFwdResLackResume.setStatus('current')
hwBoardFwdResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 3)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardFwdResLack.setStatus('current')
hwBoardFwdResLackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 4)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardFwdResLackResume.setStatus('current')
hwBoardL3FwdResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 5)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardL3FwdResLack.setStatus('current')
hwBoardL3FwdResLackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 6)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardL3FwdResLackResume.setStatus('current')
hwBoardL3ACLResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 7)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwL3FailedService"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardL3ACLResLack.setStatus('current')
hwBoardL2mcResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 8)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardL2mcResLack.setStatus('current')
hwBoardL2mcResLackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 9)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardL2mcResLackResume.setStatus('current')
hwBoardIpmcResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 10)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardIpmcResLack.setStatus('current')
hwBoardIpmcResLackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 11)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardIpmcResLackResume.setStatus('current')
hwBoardServiceFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 12)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwCommand"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwViewName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwReasonDescription"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"))
if mibBuilder.loadTexts: hwBoardServiceFailed.setStatus('current')
hwWholeFwdResThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 13)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwWholeFwdResThresholdExceed.setStatus('current')
hwWholeFwdResThresholdExceedResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 14)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwWholeFwdResThresholdExceedResume.setStatus('current')
hwBoardFwdResThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 15)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardFwdResThresholdExceed.setStatus('current')
hwBoardFwdResThresholdExceedResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 16)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwBoardFwdResThresholdExceedResume.setStatus('current')
hwBoardMplsPhpNonsupport = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 17)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"))
if mibBuilder.loadTexts: hwBoardMplsPhpNonsupport.setStatus('current')
hwBoardResThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 18)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwReasonDescription"))
if mibBuilder.loadTexts: hwBoardResThresholdExceed.setStatus('current')
hwBoardResThresholdExceedResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 19)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwReasonDescription"))
if mibBuilder.loadTexts: hwBoardResThresholdExceedResume.setStatus('current')
hwBoardResWarningThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 20)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwReasonDescription"))
if mibBuilder.loadTexts: hwBoardResWarningThresholdExceed.setStatus('current')
hwBoardResWarningThresholdExceedResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 21)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwReasonDescription"))
if mibBuilder.loadTexts: hwBoardResWarningThresholdExceedResume.setStatus('current')
hwBoardIPv6ACLResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 22)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwViewName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"))
if mibBuilder.loadTexts: hwBoardIPv6ACLResLack.setStatus('current')
hwBoardMplsPhpResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 23)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"))
if mibBuilder.loadTexts: hwBoardMplsPhpResLack.setStatus('current')
hwFwdProcFailForLCSTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 2))
hwFwdProcFailForLCS = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 2, 1)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdLicenseName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdProcFailForLCSOperationId"))
if mibBuilder.loadTexts: hwFwdProcFailForLCS.setStatus('current')
hwFwdProcFailForLCSResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 2, 2)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdLicenseName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdProcFailForLCSOperationId"))
if mibBuilder.loadTexts: hwFwdProcFailForLCSResume.setStatus('current')
hwFwdEntryConflictTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 3))
hwFwdEntryConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 3, 1)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwFwdEntryConflict.setStatus('current')
hwFwdEntryConflictResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 3, 2)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"))
if mibBuilder.loadTexts: hwFwdEntryConflictResume.setStatus('current')
hwFwdResTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 3))
hwFwdResTrapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 3, 1))
hwFwdResTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 3, 1, 1)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFwdResTrapCompliance = hwFwdResTrapCompliance.setStatus('current')
hwFwdResTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 3, 2))
hwFwdResObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 3, 2, 1)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwL3FailedService"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwCommand"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwViewName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwReasonDescription"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackVrId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdProcFailForLCSOperationId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdLicenseName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResDevName"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLimit"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResCurThroughput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFwdResObjectGroup = hwFwdResObjectGroup.setStatus('current')
hwFwdResTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 3, 2, 2)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwWholeFwdResLack"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwWholeFwdResLackResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardFwdResLack"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardFwdResLackResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardL3FwdResLack"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardL3FwdResLackResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardL3ACLResLack"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardL2mcResLack"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardL2mcResLackResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardIpmcResLack"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardIpmcResLackResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardServiceFailed"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwWholeFwdResThresholdExceed"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwWholeFwdResThresholdExceedResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardFwdResThresholdExceed"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardFwdResThresholdExceedResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardMplsPhpNonsupport"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardResThresholdExceed"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardResThresholdExceedResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardResWarningThresholdExceed"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardResWarningThresholdExceedResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwBoardIPv6ACLResLack"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdProcFailForLCS"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdProcFailForLCSResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdEntryConflict"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdEntryConflictResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResOverLimit"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResOverLimitResume"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResOverThresh"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResOverThreshResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFwdResTrapGroup = hwFwdResTrapGroup.setStatus('current')
hwBoardMplsNonSupport = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 24)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"))
if mibBuilder.loadTexts: hwBoardMplsNonSupport.setStatus('current')
hwBoardMplsFwdResLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 25)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"))
if mibBuilder.loadTexts: hwBoardMplsFwdResLack.setStatus('current')
hwBoardMplsFwdResLackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 26)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwEntPhysicalindex"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackSlotStr"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLackReasonId"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResThreshold"))
if mibBuilder.loadTexts: hwBoardMplsFwdResLackResume.setStatus('current')
hwFwdResOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 27)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLimit"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResCurThroughput"))
if mibBuilder.loadTexts: hwFwdResOverLimit.setStatus('current')
hwFwdResOverLimitResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 28)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLimit"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResCurThroughput"))
if mibBuilder.loadTexts: hwFwdResOverLimitResume.setStatus('current')
hwFwdResOverThresh = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 29)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLimit"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResCurThroughput"))
if mibBuilder.loadTexts: hwFwdResOverThresh.setStatus('current')
hwFwdResOverThreshResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 227, 2, 1, 30)).setObjects(("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResLimit"), ("HUAWEI-FWD-RES-TRAP-MIB", "hwFwdResCurThroughput"))
if mibBuilder.loadTexts: hwFwdResOverThreshResume.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-FWD-RES-TRAP-MIB", hwFwdResTrapGroup=hwFwdResTrapGroup, hwBoardL3FwdResLack=hwBoardL3FwdResLack, hwBoardL3ACLResLack=hwBoardL3ACLResLack, hwFwdProcFailForLCSResume=hwFwdProcFailForLCSResume, hwFwdResOverThresh=hwFwdResOverThresh, hwFwdResLimit=hwFwdResLimit, hwBoardServiceFailed=hwBoardServiceFailed, hwFwdProcFailForLCS=hwFwdProcFailForLCS, hwFwdResOverLimitResume=hwFwdResOverLimitResume, hwFwdResDevName=hwFwdResDevName, hwWholeFwdResLack=hwWholeFwdResLack, hwBoardResWarningThresholdExceed=hwBoardResWarningThresholdExceed, hwBoardMplsFwdResLack=hwBoardMplsFwdResLack, hwFwdProcFailForLCSOperationId=hwFwdProcFailForLCSOperationId, hwFwdProcFailForLCSTrap=hwFwdProcFailForLCSTrap, hwFwdResThreshold=hwFwdResThreshold, hwCommand=hwCommand, hwBoardIpmcResLack=hwBoardIpmcResLack, hwL3FailedService=hwL3FailedService, hwBoardResWarningThresholdExceedResume=hwBoardResWarningThresholdExceedResume, hwEntPhysicalindex=hwEntPhysicalindex, hwBoardFwdResLackResume=hwBoardFwdResLackResume, hwFwdResLackSlotStr=hwFwdResLackSlotStr, hwBoardFwdResThresholdExceedResume=hwBoardFwdResThresholdExceedResume, hwBoardMplsPhpResLack=hwBoardMplsPhpResLack, hwFwdResOverThreshResume=hwFwdResOverThreshResume, hwFwdResTrapCompliances=hwFwdResTrapCompliances, hwViewName=hwViewName, hwWholeFwdResThresholdExceedResume=hwWholeFwdResThresholdExceedResume, hwFwdLicenseName=hwFwdLicenseName, hwFwdResTraps=hwFwdResTraps, hwWholeFwdResThresholdExceed=hwWholeFwdResThresholdExceed, hwBoardL2mcResLack=hwBoardL2mcResLack, hwFwdEntryConflict=hwFwdEntryConflict, hwFwdResEntry=hwFwdResEntry, hwFwdResTrapGroups=hwFwdResTrapGroups, hwFwdResCurThroughput=hwFwdResCurThroughput, hwBoardL2mcResLackResume=hwBoardL2mcResLackResume, hwFwdResOverLimit=hwFwdResOverLimit, hwFwdResLackReasonId=hwFwdResLackReasonId, hwFwdResLacTrap=hwFwdResLacTrap, hwFwdResTrapConformance=hwFwdResTrapConformance, PYSNMP_MODULE_ID=hwFwdResTrapMIB, hwBoardResThresholdExceed=hwBoardResThresholdExceed, hwBoardFwdResThresholdExceed=hwBoardFwdResThresholdExceed, hwFwdEntryConflictTrap=hwFwdEntryConflictTrap, hwFwdResObjectGroup=hwFwdResObjectGroup, hwReasonDescription=hwReasonDescription, hwFwdResTrapObject=hwFwdResTrapObject, hwBoardIpmcResLackResume=hwBoardIpmcResLackResume, hwFwdResTrapCompliance=hwFwdResTrapCompliance, hwBoardIPv6ACLResLack=hwBoardIPv6ACLResLack, hwFwdResLackVrId=hwFwdResLackVrId, hwFwdResTrapMIB=hwFwdResTrapMIB, hwFwdEntryConflictResume=hwFwdEntryConflictResume, hwWholeFwdResLackResume=hwWholeFwdResLackResume, hwBoardL3FwdResLackResume=hwBoardL3FwdResLackResume, hwBoardMplsNonSupport=hwBoardMplsNonSupport, hwBoardResThresholdExceedResume=hwBoardResThresholdExceedResume, hwBoardMplsPhpNonsupport=hwBoardMplsPhpNonsupport, hwBoardMplsFwdResLackResume=hwBoardMplsFwdResLackResume, hwBoardFwdResLack=hwBoardFwdResLack, hwFwdResTable=hwFwdResTable)
