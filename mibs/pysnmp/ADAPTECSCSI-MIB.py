#
# PySNMP MIB module ADAPTECSCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADAPTECSCSI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, iso, Gauge32, Counter32, enterprises, Bits, Integer32, NotificationType, ModuleIdentity, IpAddress, MibIdentifier, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "iso", "Gauge32", "Counter32", "enterprises", "Bits", "Integer32", "NotificationType", "ModuleIdentity", "IpAddress", "MibIdentifier", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiComponentIndex(Integer32):
    pass

adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2))
scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 6))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 6, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tOperationGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2), )
if mibBuilder.loadTexts: tOperationGroup.setStatus('mandatory')
eOperationGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eOperationGroup.setStatus('mandatory')
a2PollDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2PollDevices.setStatus('mandatory')
a2ScanDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2ScanDevices.setStatus('mandatory')
a2IndicationControl = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2IndicationControl.setStatus('mandatory')
tHostAdapterGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3), )
if mibBuilder.loadTexts: tHostAdapterGroup.setStatus('mandatory')
eHostAdapterGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"), (0, "ADAPTECSCSI-MIB", "a3HostAdapterIndex"))
if mibBuilder.loadTexts: eHostAdapterGroup.setStatus('mandatory')
a3HostAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3HostAdapterIndex.setStatus('mandatory')
a3HostAdapterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3HostAdapterDescription.setStatus('mandatory')
a3HostAdapterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3HostAdapterVersion.setStatus('mandatory')
a3ChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ChannelCount.setStatus('mandatory')
a3Errorcontrolid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Errorcontrolid.setStatus('mandatory')
a3EventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDiscovered", 0), ("vChanged", 1), ("vFailed", 2), ("vRecovered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3EventStatus.setStatus('mandatory')
tLogicalUnitGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4), )
if mibBuilder.loadTexts: tLogicalUnitGroup.setStatus('mandatory')
eLogicalUnitGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"), (0, "ADAPTECSCSI-MIB", "a4HostAdapterIndex"), (0, "ADAPTECSCSI-MIB", "a4ScsiId"), (0, "ADAPTECSCSI-MIB", "a4LogicalUnitId"))
if mibBuilder.loadTexts: eLogicalUnitGroup.setStatus('mandatory')
a4HostAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4HostAdapterIndex.setStatus('mandatory')
a4ScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ScsiId.setStatus('mandatory')
a4LogicalUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalUnitId.setStatus('mandatory')
a4LogicalUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vDirectaccess", 1), ("vTape", 2), ("vPrinter", 3), ("vProcessor", 4), ("vWriteonce", 5), ("vCdrom", 6), ("vScanner", 7), ("vOpticalmemory", 8), ("vJukebox", 9), ("vComdevice", 10), ("vHostadapter", 11), ("vOther", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalUnitType.setStatus('mandatory')
a4LogicalUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalUnitDescription.setStatus('mandatory')
a4Errorcontrolid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Errorcontrolid.setStatus('mandatory')
a4EventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDiscovered", 0), ("vChanged", 1), ("vFailed", 2), ("vRecovered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4EventStatus.setStatus('mandatory')
tErrorcontrol = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5), )
if mibBuilder.loadTexts: tErrorcontrol.setStatus('mandatory')
eErrorcontrol = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"), (0, "ADAPTECSCSI-MIB", "a5Selfid"))
if mibBuilder.loadTexts: eErrorcontrol.setStatus('mandatory')
a5Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Selfid.setStatus('mandatory')
a5Fatalcount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Fatalcount.setStatus('mandatory')
a5Majorcount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Majorcount.setStatus('mandatory')
a5Warningcount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Warningcount.setStatus('mandatory')
a5Errstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vOk", 0), ("vWarning", 1), ("vMajor", 2), ("vFatal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Errstatus.setStatus('mandatory')
a5Errstatustype = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vPost", 0), ("vRuntime", 1), ("vDiagnosticTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Errstatustype.setStatus('mandatory')
a5Indicationcontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a5Indicationcontrol.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
a9999ErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorTime.setStatus('mandatory')
a9999ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorStatus.setStatus('mandatory')
a9999ErrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorGroupId.setStatus('mandatory')
a9999ErrorInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorInstanceId.setStatus('mandatory')
a9999ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ComponentId.setStatus('mandatory')
a9999GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999GroupId.setStatus('mandatory')
a9999InstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999InstanceId.setStatus('mandatory')
a9999VendorCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode1.setStatus('mandatory')
a9999VendorCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode2.setStatus('mandatory')
a9999VendorText = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorText.setStatus('mandatory')
a9999ParentGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentGroupId.setStatus('mandatory')
a9999ParentInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentInstanceId.setStatus('mandatory')
AdaptecEventError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1) + (0,1)).setObjects(("ADAPTECSCSI-MIB", "a9999ErrorTime"), ("ADAPTECSCSI-MIB", "a9999ErrorStatus"), ("ADAPTECSCSI-MIB", "a9999ErrorGroupId"), ("ADAPTECSCSI-MIB", "a9999ErrorInstanceId"), ("ADAPTECSCSI-MIB", "a9999ComponentId"), ("ADAPTECSCSI-MIB", "a9999GroupId"), ("ADAPTECSCSI-MIB", "a9999InstanceId"), ("ADAPTECSCSI-MIB", "a9999VendorCode1"), ("ADAPTECSCSI-MIB", "a9999VendorCode2"), ("ADAPTECSCSI-MIB", "a9999VendorText"), ("ADAPTECSCSI-MIB", "a9999ParentGroupId"), ("ADAPTECSCSI-MIB", "a9999ParentInstanceId"))
mibBuilder.exportSymbols("ADAPTECSCSI-MIB", tTrapGroup=tTrapGroup, adaptec=adaptec, eTrapGroup=eTrapGroup, a9999VendorCode1=a9999VendorCode1, a5Warningcount=a5Warningcount, a4LogicalUnitId=a4LogicalUnitId, a4LogicalUnitType=a4LogicalUnitType, a4EventStatus=a4EventStatus, eHostAdapterGroup=eHostAdapterGroup, tLogicalUnitGroup=tLogicalUnitGroup, a5Majorcount=a5Majorcount, a9999ComponentId=a9999ComponentId, eErrorcontrol=eErrorcontrol, dmtfGroups=dmtfGroups, a2ScanDevices=a2ScanDevices, a99DisableTrap=a99DisableTrap, a1Manufacturer=a1Manufacturer, a4LogicalUnitDescription=a4LogicalUnitDescription, DmiDisplaystring=DmiDisplaystring, a3EventStatus=a3EventStatus, a3HostAdapterVersion=a3HostAdapterVersion, a99MibOid=a99MibOid, a9999VendorText=a9999VendorText, tComponentid=tComponentid, a1Product=a1Product, a4ScsiId=a4ScsiId, a9999InstanceId=a9999InstanceId, AdaptecEventError=AdaptecEventError, eMiftomib=eMiftomib, a5Errstatustype=a5Errstatustype, eLogicalUnitGroup=eLogicalUnitGroup, a5Indicationcontrol=a5Indicationcontrol, eComponentid=eComponentid, a9999ErrorInstanceId=a9999ErrorInstanceId, a9999ParentInstanceId=a9999ParentInstanceId, a3HostAdapterDescription=a3HostAdapterDescription, scsi=scsi, a4HostAdapterIndex=a4HostAdapterIndex, a9999GroupId=a9999GroupId, a4Errorcontrolid=a4Errorcontrolid, tOperationGroup=tOperationGroup, a99MibName=a99MibName, a1Verify=a1Verify, tHostAdapterGroup=tHostAdapterGroup, a3Errorcontrolid=a3Errorcontrolid, a5Fatalcount=a5Fatalcount, DmiComponentIndex=DmiComponentIndex, products=products, a1Installation=a1Installation, a9999ErrorGroupId=a9999ErrorGroupId, a3HostAdapterIndex=a3HostAdapterIndex, a5Selfid=a5Selfid, a1SerialNumber=a1SerialNumber, a9999ParentGroupId=a9999ParentGroupId, a2PollDevices=a2PollDevices, a1Version=a1Version, a3ChannelCount=a3ChannelCount, a5Errstatus=a5Errstatus, tErrorcontrol=tErrorcontrol, a9999VendorCode2=a9999VendorCode2, DmiInteger=DmiInteger, a9999ErrorTime=a9999ErrorTime, a9999ErrorStatus=a9999ErrorStatus, a2IndicationControl=a2IndicationControl, tMiftomib=tMiftomib, eOperationGroup=eOperationGroup, DmiCounter=DmiCounter)
