#
# PySNMP MIB module ASCEND-MIBIMAGROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBIMAGROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:11:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, Gauge32, MibIdentifier, Counter64, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Unsigned32, Counter32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Gauge32", "MibIdentifier", "Counter64", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Counter32", "Bits", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibimaGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 23))
mibimaGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 23, 1), )
if mibBuilder.loadTexts: mibimaGroupConfigTable.setStatus('mandatory')
mibimaGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1), ).setIndexNames((0, "ASCEND-MIBIMAGROUP-MIB", "imaGroupConfig-Name"))
if mibBuilder.loadTexts: mibimaGroupConfigEntry.setStatus('mandatory')
imaGroupConfig_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 1), DisplayString()).setLabel("imaGroupConfig-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupConfig_Name.setStatus('mandatory')
imaGroupConfig_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Active.setStatus('mandatory')
imaGroupConfig_NailedGroup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 3), Integer32()).setLabel("imaGroupConfig-NailedGroup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_NailedGroup.setStatus('mandatory')
imaGroupConfig_GroupSymmetryMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("symmetricOperation", 2), ("asymmetricOperation", 3), ("configurationAsymmetric", 4)))).setLabel("imaGroupConfig-GroupSymmetryMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_GroupSymmetryMode.setStatus('mandatory')
imaGroupConfig_Version = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("v10", 2), ("v11", 4)))).setLabel("imaGroupConfig-Version").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Version.setStatus('mandatory')
imaGroupConfig_DoVersionFallback = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-DoVersionFallback").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_DoVersionFallback.setStatus('mandatory')
imaGroupConfig_IgnoreLineup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("systemDefined", 1), ("no", 2), ("yes", 3)))).setLabel("imaGroupConfig-IgnoreLineup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_IgnoreLineup.setStatus('mandatory')
imaGroupConfig_Lasr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-Lasr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Lasr.setStatus('mandatory')
imaGroupConfig_NeTxClkMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ctc", 2), ("itc", 3)))).setLabel("imaGroupConfig-NeTxClkMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_NeTxClkMode.setStatus('mandatory')
imaGroupConfig_TxMinNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 9), Integer32()).setLabel("imaGroupConfig-TxMinNumLinks").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TxMinNumLinks.setStatus('mandatory')
imaGroupConfig_RxMinNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 10), Integer32()).setLabel("imaGroupConfig-RxMinNumLinks").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_RxMinNumLinks.setStatus('mandatory')
imaGroupConfig_ImaId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 11), Integer32()).setLabel("imaGroupConfig-ImaId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_ImaId.setStatus('mandatory')
imaGroupConfig_FrameLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257))).clone(namedValues=NamedValues(("n-32", 33), ("n-64", 65), ("n-128", 129), ("n-256", 257)))).setLabel("imaGroupConfig-FrameLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_FrameLength.setStatus('mandatory')
imaGroupConfig_DiffDelayMax = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 13), Integer32()).setLabel("imaGroupConfig-DiffDelayMax").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_DiffDelayMax.setStatus('mandatory')
imaGroupConfig_CheckFarEndImaId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-CheckFarEndImaId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_CheckFarEndImaId.setStatus('mandatory')
imaGroupConfig_ExpectedFarEndImaId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 15), Integer32()).setLabel("imaGroupConfig-ExpectedFarEndImaId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_ExpectedFarEndImaId.setStatus('mandatory')
imaGroupConfig_FarEndCheckFrameLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-FarEndCheckFrameLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_FarEndCheckFrameLength.setStatus('mandatory')
imaGroupConfig_ExpectedFarEndFrameLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257))).clone(namedValues=NamedValues(("n-32", 33), ("n-64", 65), ("n-128", 129), ("n-256", 257)))).setLabel("imaGroupConfig-ExpectedFarEndFrameLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_ExpectedFarEndFrameLength.setStatus('mandatory')
imaGroupConfig_AtmIfDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 18), Integer32()).setLabel("imaGroupConfig-AtmIfDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_AtmIfDelay.setStatus('mandatory')
imaGroupConfig_TppTestLink = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 19), Integer32()).setLabel("imaGroupConfig-TppTestLink").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TppTestLink.setStatus('mandatory')
imaGroupConfig_TppTestPattern = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 20), Integer32()).setLabel("imaGroupConfig-TppTestPattern").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TppTestPattern.setStatus('mandatory')
imaGroupConfig_TppState = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("operating", 3)))).setLabel("imaGroupConfig-TppState").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TppState.setStatus('mandatory')
imaGroupConfig_VpSwitchingVpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 22), Integer32()).setLabel("imaGroupConfig-VpSwitchingVpi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_VpSwitchingVpi.setStatus('mandatory')
imaGroupConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("imaGroupConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Action_o.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBIMAGROUP-MIB", imaGroupConfig_Lasr=imaGroupConfig_Lasr, imaGroupConfig_CheckFarEndImaId=imaGroupConfig_CheckFarEndImaId, imaGroupConfig_RxMinNumLinks=imaGroupConfig_RxMinNumLinks, imaGroupConfig_NailedGroup=imaGroupConfig_NailedGroup, imaGroupConfig_Active=imaGroupConfig_Active, imaGroupConfig_DoVersionFallback=imaGroupConfig_DoVersionFallback, mibimaGroupConfigEntry=mibimaGroupConfigEntry, imaGroupConfig_Name=imaGroupConfig_Name, imaGroupConfig_DiffDelayMax=imaGroupConfig_DiffDelayMax, imaGroupConfig_AtmIfDelay=imaGroupConfig_AtmIfDelay, imaGroupConfig_Version=imaGroupConfig_Version, imaGroupConfig_TppState=imaGroupConfig_TppState, imaGroupConfig_GroupSymmetryMode=imaGroupConfig_GroupSymmetryMode, imaGroupConfig_ImaId=imaGroupConfig_ImaId, mibimaGroupConfigTable=mibimaGroupConfigTable, imaGroupConfig_ExpectedFarEndImaId=imaGroupConfig_ExpectedFarEndImaId, imaGroupConfig_Action_o=imaGroupConfig_Action_o, imaGroupConfig_NeTxClkMode=imaGroupConfig_NeTxClkMode, DisplayString=DisplayString, imaGroupConfig_VpSwitchingVpi=imaGroupConfig_VpSwitchingVpi, imaGroupConfig_TppTestLink=imaGroupConfig_TppTestLink, imaGroupConfig_ExpectedFarEndFrameLength=imaGroupConfig_ExpectedFarEndFrameLength, imaGroupConfig_TxMinNumLinks=imaGroupConfig_TxMinNumLinks, imaGroupConfig_FrameLength=imaGroupConfig_FrameLength, imaGroupConfig_FarEndCheckFrameLength=imaGroupConfig_FarEndCheckFrameLength, mibimaGroupConfig=mibimaGroupConfig, imaGroupConfig_IgnoreLineup=imaGroupConfig_IgnoreLineup, imaGroupConfig_TppTestPattern=imaGroupConfig_TppTestPattern)
