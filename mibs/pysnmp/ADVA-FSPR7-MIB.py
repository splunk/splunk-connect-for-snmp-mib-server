#
# PySNMP MIB module ADVA-FSPR7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADVA-FSPR7-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:59:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
FspR7IPv6Type, FspR7TurnupConfig, FspR7OpticalBand, FspR7VSessStatus, FspR7BERThresholdSection, FspR7ConnectState, EntityClassName, FspR7AlarmListType, FspR7DisableEnable, FspR7FDStatusCaps, FspR7LaserForcedOperation, FspR7ChannelIdentifier, FspR7VoaMode, FspR7ForcedStatus, FspR7InterfaceFunction, FspR7YesNo, EquipmentState, FspR7Topology, FspR7FanMode, FspR7PathNode, FspR7UntaggedFrames, EntityType, FspR7ChannelIdentifierCaps, FspR7TypeConnection, FspR7ChannelSpacing, FspR7PlugDataRateCaps, FspR7LagPortType, FspR7MaxBitErrorRate, FspR7PsuOutputPower, FspR7ForceConfig, FspR7NtpTest, FspR7AseTabOpr, FspR7LacpMode, FspR7AidType, FspR7IpType, FspR7PmSnapshotParameterTypes, FspR7OpticalInterfaceReach, FspR7Ipv6Address, FspR7LagFendState, FspR7EncapsulationMethod, FspR7EntitySecondaryStates, FspR7ValidityPeriod, FspR7OpticalLanes, FspR7RoadmNumber, FspR7OptUpdate, FspR7ChannelNumber, FspR7PortRole, FspR7TrafficDirection, FspR7GropticsType, FspR7PortMode, FspR7VSessChangeReason, FspR7EntityType, FspR7ApsChannel, FspR7FrameFormat, FspR7TopologyType, FspR7DispersionCompensation, FspR7Scrambling, FspR7KeyLength, FspR7OpticalInterfaceReachCaps, FspR7SshHostKeyLength, FspR7VSessWriteAccess, FspR7Gain, FspR7NumberOfChannels, FspR7Protocol, FspR7YcableType, FspR7CapInventory, FspR7Stages, FspR7RedLinedState, FspR7DispersionModes, FspR7OpuPayloadType, FspR7SingleFiberLocation, FspR7ColumnMark, FspR7TxOffOnTm, FspR7LagState, FspR7ChannelNumberCaps, FspR7TransmissionMode, FspR7FltrCableType, FspR7LaneGroupInventory, FspR7CertApply, FspR7GainRange, FspR7BERThreshold, FspR7APSCommand, FspR7RlsMan, FspR7Stuff, FspR7TelemetryOutput, FspR7OpticalGroup, FspR7FiberBrand, FspR7LagSysIdFend, FspR7OpticalMultiplexLevel, FspR7AdminState, FspR7ManualAuto, FspR7FiberDetect, FspR7AppType, FspR7IpMode, FspR7NtpAdminState, FspR7Bitrate, FspR7PortBehaviour, FspR7PrbsPmReset, FspR7InvertTelemetryInputLogic, FspR7AlarmProfileList, FspR7NtpTestStatus, FspR7OscUsage, FspR7SwitchOverCause, FspR7MuxMethod, FspR7PathProt, FspR7EocProtAvailability, FspR7LagStandby, FspR7TypeCrs, FspR7CpAuthType, FspR7EdfaOutputPowerRating, FspR7ScuRing, FspR7SnmpLongString, FspR7OspfMode, FspR7TiltSet, FspR7PmSnapshotStatus, FspR7EquipmentAssignState, FspR7DispersionConfig, FspR7OpticalSubBand, FspR7PRBSTest, FspR7ProtectionType, FspR7FlowControlMode, FspR7OtdrPeriod, ApsRevertMode, FspR7Category, FspR7InterfaceType, FspR7ConnectorType, ApsType, FspR7FecType, FspR7EqlzAdminState, FspR7LineCoding, FspR7OscChannel, FspR7ErrorFwdMode, FspR7XfpDecisionThres, FspR7AutoThresReset, FspR7LossAttenuation, FspR7TrapModeLegacy, Grade, FspR7Conn, FspR7LagPorts, FspR7FunctionCrs, FspR7ParityBit, FspR7TifOutputReset, FspR7LacpTimeout, FspR7SupplyType, FspR7AlsMode, FspR7DCFiberType, FspR7OdtuType, FspR7MonLevel, FspR7RenewMode, FspR7ProtectionRole, FspR7ChannelBandwidth, FspR7InitEqualization, FspR7Mapping, FspR7NCTRouteType, FspR7LagIdFend, FspR7SnmpHexString, FfpType, FspR7SignalDirection, FspR7PlugDataRate, FspR7Baund, FspR7NdpCleanup, FspR7NoYes, FspR7StateConnection, FspR7PmReset, FspR7DeploymentScenario, FspR7OperState, FspR7NtpSyncStatus, ConnectionNotation, FspR7CodeGain, FspR7EnableDisable, FspR7StartPmSnapshot, FspR7NumberOfChannelsProv, FspR7LaserDelayTimer, FspR7SshHostKeyEncryptAlgorithm, FspR7BidirectionalChannel, FspR7FanProfile, FspR7NCTraceId, FspR7OpticalFiberType, FspR7NewSshHostKey = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7IPv6Type", "FspR7TurnupConfig", "FspR7OpticalBand", "FspR7VSessStatus", "FspR7BERThresholdSection", "FspR7ConnectState", "EntityClassName", "FspR7AlarmListType", "FspR7DisableEnable", "FspR7FDStatusCaps", "FspR7LaserForcedOperation", "FspR7ChannelIdentifier", "FspR7VoaMode", "FspR7ForcedStatus", "FspR7InterfaceFunction", "FspR7YesNo", "EquipmentState", "FspR7Topology", "FspR7FanMode", "FspR7PathNode", "FspR7UntaggedFrames", "EntityType", "FspR7ChannelIdentifierCaps", "FspR7TypeConnection", "FspR7ChannelSpacing", "FspR7PlugDataRateCaps", "FspR7LagPortType", "FspR7MaxBitErrorRate", "FspR7PsuOutputPower", "FspR7ForceConfig", "FspR7NtpTest", "FspR7AseTabOpr", "FspR7LacpMode", "FspR7AidType", "FspR7IpType", "FspR7PmSnapshotParameterTypes", "FspR7OpticalInterfaceReach", "FspR7Ipv6Address", "FspR7LagFendState", "FspR7EncapsulationMethod", "FspR7EntitySecondaryStates", "FspR7ValidityPeriod", "FspR7OpticalLanes", "FspR7RoadmNumber", "FspR7OptUpdate", "FspR7ChannelNumber", "FspR7PortRole", "FspR7TrafficDirection", "FspR7GropticsType", "FspR7PortMode", "FspR7VSessChangeReason", "FspR7EntityType", "FspR7ApsChannel", "FspR7FrameFormat", "FspR7TopologyType", "FspR7DispersionCompensation", "FspR7Scrambling", "FspR7KeyLength", "FspR7OpticalInterfaceReachCaps", "FspR7SshHostKeyLength", "FspR7VSessWriteAccess", "FspR7Gain", "FspR7NumberOfChannels", "FspR7Protocol", "FspR7YcableType", "FspR7CapInventory", "FspR7Stages", "FspR7RedLinedState", "FspR7DispersionModes", "FspR7OpuPayloadType", "FspR7SingleFiberLocation", "FspR7ColumnMark", "FspR7TxOffOnTm", "FspR7LagState", "FspR7ChannelNumberCaps", "FspR7TransmissionMode", "FspR7FltrCableType", "FspR7LaneGroupInventory", "FspR7CertApply", "FspR7GainRange", "FspR7BERThreshold", "FspR7APSCommand", "FspR7RlsMan", "FspR7Stuff", "FspR7TelemetryOutput", "FspR7OpticalGroup", "FspR7FiberBrand", "FspR7LagSysIdFend", "FspR7OpticalMultiplexLevel", "FspR7AdminState", "FspR7ManualAuto", "FspR7FiberDetect", "FspR7AppType", "FspR7IpMode", "FspR7NtpAdminState", "FspR7Bitrate", "FspR7PortBehaviour", "FspR7PrbsPmReset", "FspR7InvertTelemetryInputLogic", "FspR7AlarmProfileList", "FspR7NtpTestStatus", "FspR7OscUsage", "FspR7SwitchOverCause", "FspR7MuxMethod", "FspR7PathProt", "FspR7EocProtAvailability", "FspR7LagStandby", "FspR7TypeCrs", "FspR7CpAuthType", "FspR7EdfaOutputPowerRating", "FspR7ScuRing", "FspR7SnmpLongString", "FspR7OspfMode", "FspR7TiltSet", "FspR7PmSnapshotStatus", "FspR7EquipmentAssignState", "FspR7DispersionConfig", "FspR7OpticalSubBand", "FspR7PRBSTest", "FspR7ProtectionType", "FspR7FlowControlMode", "FspR7OtdrPeriod", "ApsRevertMode", "FspR7Category", "FspR7InterfaceType", "FspR7ConnectorType", "ApsType", "FspR7FecType", "FspR7EqlzAdminState", "FspR7LineCoding", "FspR7OscChannel", "FspR7ErrorFwdMode", "FspR7XfpDecisionThres", "FspR7AutoThresReset", "FspR7LossAttenuation", "FspR7TrapModeLegacy", "Grade", "FspR7Conn", "FspR7LagPorts", "FspR7FunctionCrs", "FspR7ParityBit", "FspR7TifOutputReset", "FspR7LacpTimeout", "FspR7SupplyType", "FspR7AlsMode", "FspR7DCFiberType", "FspR7OdtuType", "FspR7MonLevel", "FspR7RenewMode", "FspR7ProtectionRole", "FspR7ChannelBandwidth", "FspR7InitEqualization", "FspR7Mapping", "FspR7NCTRouteType", "FspR7LagIdFend", "FspR7SnmpHexString", "FfpType", "FspR7SignalDirection", "FspR7PlugDataRate", "FspR7Baund", "FspR7NdpCleanup", "FspR7NoYes", "FspR7StateConnection", "FspR7PmReset", "FspR7DeploymentScenario", "FspR7OperState", "FspR7NtpSyncStatus", "ConnectionNotation", "FspR7CodeGain", "FspR7EnableDisable", "FspR7StartPmSnapshot", "FspR7NumberOfChannelsProv", "FspR7LaserDelayTimer", "FspR7SshHostKeyEncryptAlgorithm", "FspR7BidirectionalChannel", "FspR7FanProfile", "FspR7NCTraceId", "FspR7OpticalFiberType", "FspR7NewSshHostKey")
EntityClass, OhTerminationLevel, SourceIpAddress, VirtualContainerType, SonetTimingSource, ServiceImpairment, OtnPayloadType, EnableState, EthDuplexMode, AssignmentState, ProtectionMech, OtnTcmLevel, ApsDirection, LoopConfig, FspR7EquipmentTypeCaps, fspR7, FspR7EquipmentType, SonetTraceForm, ServiceAffecting, ApsHoldoffTime, TimMode, TrapAlarmSeverity = mibBuilder.importSymbols("ADVA-MIB", "EntityClass", "OhTerminationLevel", "SourceIpAddress", "VirtualContainerType", "SonetTimingSource", "ServiceImpairment", "OtnPayloadType", "EnableState", "EthDuplexMode", "AssignmentState", "ProtectionMech", "OtnTcmLevel", "ApsDirection", "LoopConfig", "FspR7EquipmentTypeCaps", "fspR7", "FspR7EquipmentType", "SonetTraceForm", "ServiceAffecting", "ApsHoldoffTime", "TimMode", "TrapAlarmSeverity")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, iso, MibIdentifier, Counter32, IpAddress, ObjectIdentity, Counter64, Unsigned32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibIdentifier", "Counter32", "IpAddress", "ObjectIdentity", "Counter64", "Unsigned32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ModuleIdentity")
RowPointer, RowStatus, DisplayString, TruthValue, MacAddress, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "RowStatus", "DisplayString", "TruthValue", "MacAddress", "TextualConvention", "DateAndTime")
advaFspR7 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7))
advaFspR7.setRevisions(('2014-10-15 00:00', '2014-09-29 00:00', '2013-12-04 00:00', '2013-08-20 00:00', '2011-05-22 00:00',))
if mibBuilder.loadTexts: advaFspR7.setLastUpdated('201410150000Z')
if mibBuilder.loadTexts: advaFspR7.setOrganization('ADVA Optical Networking')
containers = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1))
entities = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3))
neMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1))
ipConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100))
specificMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2))
eqptMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3))
facilityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4))
dcnMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5))
opticalMuxMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6))
shelfConnMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7))
envMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8))
containerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9))
opticalLineMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4))
alarmProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5))
fspR7Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6))
performanceFacility = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4))
performanceFacilityThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1))
performanceFacilityMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2))
featureSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7))
fiberMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1))
pmSnapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2))
eci = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3))
serviceDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4))
changeService = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5))
protection = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6))
translation = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7))
advaSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8))
ipSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9))
dateAndTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10))
relationship = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8))
notAssignables = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9))
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10))
containerShelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1), )
if mibBuilder.loadTexts: containerShelfTable.setStatus('current')
containerShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfShelfNo"), (0, "ADVA-FSPR7-MIB", "containerShelfSlotNo"), (0, "ADVA-FSPR7-MIB", "containerShelfPortNo"), (0, "ADVA-FSPR7-MIB", "containerShelfExtNo"), (0, "ADVA-FSPR7-MIB", "containerShelfClassName"))
if mibBuilder.loadTexts: containerShelfEntry.setStatus('current')
containerShelfShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerShelfShelfNo.setStatus('current')
containerShelfSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerShelfSlotNo.setStatus('current')
containerShelfPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerShelfPortNo.setStatus('current')
containerShelfExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerShelfExtNo.setStatus('current')
containerShelfClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerShelfClassName.setStatus('current')
containerShelfAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfAidString.setStatus('current')
containerShelfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfClass.setStatus('current')
containerShelfTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfTableId.setStatus('current')
containerShelfEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfEquipmentState.setStatus('current')
containerShelfParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfParentId.setStatus('current')
containerFanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2), )
if mibBuilder.loadTexts: containerFanTable.setStatus('current')
containerFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerFanShelfNo"), (0, "ADVA-FSPR7-MIB", "containerFanSlotNo"), (0, "ADVA-FSPR7-MIB", "containerFanPortNo"), (0, "ADVA-FSPR7-MIB", "containerFanExtNo"), (0, "ADVA-FSPR7-MIB", "containerFanClassName"))
if mibBuilder.loadTexts: containerFanEntry.setStatus('current')
containerFanShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerFanShelfNo.setStatus('current')
containerFanSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerFanSlotNo.setStatus('current')
containerFanPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerFanPortNo.setStatus('current')
containerFanExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerFanExtNo.setStatus('current')
containerFanClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerFanClassName.setStatus('current')
containerFanAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanAidString.setStatus('current')
containerFanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanClass.setStatus('current')
containerFanTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanTableId.setStatus('current')
containerFanEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanEquipmentState.setStatus('current')
containerFanParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanParentId.setStatus('current')
containerPlugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3), )
if mibBuilder.loadTexts: containerPlugTable.setStatus('current')
containerPlugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerPlugShelfNo"), (0, "ADVA-FSPR7-MIB", "containerPlugSlotNo"), (0, "ADVA-FSPR7-MIB", "containerPlugPortNo"), (0, "ADVA-FSPR7-MIB", "containerPlugExtNo"), (0, "ADVA-FSPR7-MIB", "containerPlugClassName"))
if mibBuilder.loadTexts: containerPlugEntry.setStatus('current')
containerPlugShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerPlugShelfNo.setStatus('current')
containerPlugSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerPlugSlotNo.setStatus('current')
containerPlugPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerPlugPortNo.setStatus('current')
containerPlugExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerPlugExtNo.setStatus('current')
containerPlugClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerPlugClassName.setStatus('current')
containerPlugAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugAidString.setStatus('current')
containerPlugClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugClass.setStatus('current')
containerPlugTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugTableId.setStatus('current')
containerPlugEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugEquipmentState.setStatus('current')
containerPlugParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugParentId.setStatus('current')
containerModTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4), )
if mibBuilder.loadTexts: containerModTable.setStatus('current')
containerModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerModShelfNo"), (0, "ADVA-FSPR7-MIB", "containerModSlotNo"), (0, "ADVA-FSPR7-MIB", "containerModPortNo"), (0, "ADVA-FSPR7-MIB", "containerModExtNo"), (0, "ADVA-FSPR7-MIB", "containerModClassName"))
if mibBuilder.loadTexts: containerModEntry.setStatus('current')
containerModShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerModShelfNo.setStatus('current')
containerModSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerModSlotNo.setStatus('current')
containerModPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerModPortNo.setStatus('current')
containerModExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerModExtNo.setStatus('current')
containerModClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerModClassName.setStatus('current')
containerModAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModAidString.setStatus('current')
containerModClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModClass.setStatus('current')
containerModTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModTableId.setStatus('current')
containerModEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModEquipmentState.setStatus('current')
containerModParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModParentId.setStatus('current')
containerVchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7), )
if mibBuilder.loadTexts: containerVchTable.setStatus('current')
containerVchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVchPortNo"), (0, "ADVA-FSPR7-MIB", "containerVchExtNo"), (0, "ADVA-FSPR7-MIB", "containerVchClassName"))
if mibBuilder.loadTexts: containerVchEntry.setStatus('current')
containerVchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVchShelfNo.setStatus('current')
containerVchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVchSlotNo.setStatus('current')
containerVchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVchPortNo.setStatus('current')
containerVchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVchExtNo.setStatus('current')
containerVchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVchClassName.setStatus('current')
containerVchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchAidString.setStatus('current')
containerVchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchClass.setStatus('current')
containerVchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchTableId.setStatus('current')
containerVchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchParentId.setStatus('current')
containerCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8), )
if mibBuilder.loadTexts: containerCrossConnTable.setStatus('current')
containerCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "containerCrossConnClassName"))
if mibBuilder.loadTexts: containerCrossConnEntry.setStatus('current')
containerCrossConnFromShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromShelfNo.setStatus('current')
containerCrossConnFromSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromSlotNo.setStatus('current')
containerCrossConnFromPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPortNo.setStatus('current')
containerCrossConnFromExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromExtNo.setStatus('current')
containerCrossConnFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnFromClassName.setStatus('current')
containerCrossConnToShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 6), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToShelfNo.setStatus('current')
containerCrossConnToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToSlotNo.setStatus('current')
containerCrossConnToPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToPortNo.setStatus('current')
containerCrossConnToExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToExtNo.setStatus('current')
containerCrossConnToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 10), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnToClassName.setStatus('current')
containerCrossConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnClassName.setStatus('current')
containerCrossConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnAidString.setStatus('current')
containerCrossConnFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromId.setStatus('current')
containerCrossConnToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnToId.setStatus('current')
containerCrossConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 15), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnClass.setStatus('current')
containerCrossConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnTableId.setStatus('current')
containerCrossConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnParentId.setStatus('current')
containerCrossConnFromPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9), )
if mibBuilder.loadTexts: containerCrossConnFromPointTable.setStatus('current')
containerCrossConnFromPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointClassName"))
if mibBuilder.loadTexts: containerCrossConnFromPointEntry.setStatus('current')
containerCrossConnFromPointShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointShelfNo.setStatus('current')
containerCrossConnFromPointSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointSlotNo.setStatus('current')
containerCrossConnFromPointPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointPortNo.setStatus('current')
containerCrossConnFromPointExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointExtNo.setStatus('current')
containerCrossConnFromPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnFromPointClassName.setStatus('current')
containerCrossConnFromPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointAidString.setStatus('current')
containerCrossConnFromPointFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointFromId.setStatus('current')
containerCrossConnFromPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointClass.setStatus('current')
containerCrossConnFromPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointTableId.setStatus('current')
containerCrossConnFromPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointParentId.setStatus('current')
containerTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10), )
if mibBuilder.loadTexts: containerTerminPointTable.setStatus('current')
containerTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerTerminPointClassName"))
if mibBuilder.loadTexts: containerTerminPointEntry.setStatus('current')
containerTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo1.setStatus('current')
containerTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo2.setStatus('current')
containerTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo3.setStatus('current')
containerTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo4.setStatus('current')
containerTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerTerminPointClassName.setStatus('current')
containerTerminPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointAidString.setStatus('current')
containerTerminPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointClass.setStatus('current')
containerTerminPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointTableId.setStatus('current')
containerTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointParentId.setStatus('current')
containerConnectStdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11), )
if mibBuilder.loadTexts: containerConnectStdTable.setStatus('current')
containerConnectStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerConnectStdNotation"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectStdClassName"))
if mibBuilder.loadTexts: containerConnectStdEntry.setStatus('current')
containerConnectStdNotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 1), ConnectionNotation())
if mibBuilder.loadTexts: containerConnectStdNotation.setStatus('current')
containerConnectStdFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo1.setStatus('current')
containerConnectStdFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo2.setStatus('current')
containerConnectStdFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo3.setStatus('current')
containerConnectStdFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 5), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo4.setStatus('current')
containerConnectStdFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 6), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdFromClassName.setStatus('current')
containerConnectStdToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo1.setStatus('current')
containerConnectStdToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo2.setStatus('current')
containerConnectStdToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo3.setStatus('current')
containerConnectStdToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 10), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo4.setStatus('current')
containerConnectStdToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdToClassName.setStatus('current')
containerConnectStdClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 12), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdClassName.setStatus('current')
containerConnectStdAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdAidString.setStatus('current')
containerConnectStdFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdFromId.setStatus('current')
containerConnectStdToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdToId.setStatus('current')
containerConnectStdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 16), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdClass.setStatus('current')
containerConnectStdTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdTableId.setStatus('current')
containerConnectStdParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdParentId.setStatus('current')
containerConnectNonStdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12), )
if mibBuilder.loadTexts: containerConnectNonStdTable.setStatus('current')
containerConnectNonStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerConnectNonStdNotation"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdClassName"))
if mibBuilder.loadTexts: containerConnectNonStdEntry.setStatus('current')
containerConnectNonStdNotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 1), ConnectionNotation())
if mibBuilder.loadTexts: containerConnectNonStdNotation.setStatus('current')
containerConnectNonStdFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo1.setStatus('current')
containerConnectNonStdFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo2.setStatus('current')
containerConnectNonStdFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo3.setStatus('current')
containerConnectNonStdFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 5), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo4.setStatus('current')
containerConnectNonStdFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 6), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdFromClassName.setStatus('current')
containerConnectNonStdToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo1.setStatus('current')
containerConnectNonStdToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo2.setStatus('current')
containerConnectNonStdToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo3.setStatus('current')
containerConnectNonStdToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 10), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo4.setStatus('current')
containerConnectNonStdToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdToClassName.setStatus('current')
containerConnectNonStdClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 12), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdClassName.setStatus('current')
containerConnectNonStdAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdAidString.setStatus('current')
containerConnectNonStdFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdFromId.setStatus('current')
containerConnectNonStdToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdToId.setStatus('current')
containerConnectNonStdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 16), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdClass.setStatus('current')
containerConnectNonStdTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdTableId.setStatus('current')
containerConnectNonStdParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdParentId.setStatus('current')
containerExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13), )
if mibBuilder.loadTexts: containerExternalPortTable.setStatus('current')
containerExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortClassName"))
if mibBuilder.loadTexts: containerExternalPortEntry.setStatus('current')
containerExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortShelfNo.setStatus('current')
containerExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortSlotNo.setStatus('current')
containerExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortPortNo.setStatus('current')
containerExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortExtNo.setStatus('current')
containerExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerExternalPortClassName.setStatus('current')
containerExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortAidString.setStatus('current')
containerExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortClass.setStatus('current')
containerExternalPortTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortTableId.setStatus('current')
containerExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortParentId.setStatus('current')
containerCrsOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14), )
if mibBuilder.loadTexts: containerCrsOptLineTable.setStatus('current')
containerCrsOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineClassName"))
if mibBuilder.loadTexts: containerCrsOptLineEntry.setStatus('current')
containerCrsOptLineFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo1.setStatus('current')
containerCrsOptLineFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo2.setStatus('current')
containerCrsOptLineFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo3.setStatus('current')
containerCrsOptLineFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo4.setStatus('current')
containerCrsOptLineFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineFromClassName.setStatus('current')
containerCrsOptLineToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo1.setStatus('current')
containerCrsOptLineToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo2.setStatus('current')
containerCrsOptLineToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo3.setStatus('current')
containerCrsOptLineToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo4.setStatus('current')
containerCrsOptLineToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 10), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineToClassName.setStatus('current')
containerCrsOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineClassName.setStatus('current')
containerCrsOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineAidString.setStatus('current')
containerCrsOptLineFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromId.setStatus('current')
containerCrsOptLineToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineToId.setStatus('current')
containerCrsOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 15), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineClass.setStatus('current')
containerCrsOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineTableId.setStatus('current')
containerCrsOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineParentId.setStatus('current')
containerCrsOptLineFromPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15), )
if mibBuilder.loadTexts: containerCrsOptLineFromPointTable.setStatus('current')
containerCrsOptLineFromPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointClassName"))
if mibBuilder.loadTexts: containerCrsOptLineFromPointEntry.setStatus('current')
containerCrsOptLineFromPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo1.setStatus('current')
containerCrsOptLineFromPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo2.setStatus('current')
containerCrsOptLineFromPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo3.setStatus('current')
containerCrsOptLineFromPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo4.setStatus('current')
containerCrsOptLineFromPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineFromPointClassName.setStatus('current')
containerCrsOptLineFromPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointAidString.setStatus('current')
containerCrsOptLineFromPointFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointFromId.setStatus('current')
containerCrsOptLineFromPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointClass.setStatus('current')
containerCrsOptLineFromPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointTableId.setStatus('current')
containerCrsOptLineFromPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointParentId.setStatus('current')
containerChTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20), )
if mibBuilder.loadTexts: containerChTable.setStatus('current')
containerChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerChShelfNo"), (0, "ADVA-FSPR7-MIB", "containerChSlotNo"), (0, "ADVA-FSPR7-MIB", "containerChPortNo"), (0, "ADVA-FSPR7-MIB", "containerChExtNo"), (0, "ADVA-FSPR7-MIB", "containerChClassName"))
if mibBuilder.loadTexts: containerChEntry.setStatus('current')
containerChShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerChShelfNo.setStatus('current')
containerChSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerChSlotNo.setStatus('current')
containerChPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerChPortNo.setStatus('current')
containerChExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerChExtNo.setStatus('current')
containerChClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerChClassName.setStatus('current')
containerChAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChAidString.setStatus('current')
containerChClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChClass.setStatus('current')
containerChTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChTableId.setStatus('current')
containerChParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChParentId.setStatus('current')
containerEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21), )
if mibBuilder.loadTexts: containerEthTable.setStatus('current')
containerEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEthShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEthSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEthPortNo"), (0, "ADVA-FSPR7-MIB", "containerEthExtNo"), (0, "ADVA-FSPR7-MIB", "containerEthClassName"))
if mibBuilder.loadTexts: containerEthEntry.setStatus('current')
containerEthShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEthShelfNo.setStatus('current')
containerEthSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEthSlotNo.setStatus('current')
containerEthPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEthPortNo.setStatus('current')
containerEthExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEthExtNo.setStatus('current')
containerEthClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEthClassName.setStatus('current')
containerEthAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthAidString.setStatus('current')
containerEthClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthClass.setStatus('current')
containerEthTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthTableId.setStatus('current')
containerEthParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthParentId.setStatus('current')
containerVethTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22), )
if mibBuilder.loadTexts: containerVethTable.setStatus('current')
containerVethEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVethShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVethSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVethPortNo"), (0, "ADVA-FSPR7-MIB", "containerVethExtNo"), (0, "ADVA-FSPR7-MIB", "containerVethClassName"))
if mibBuilder.loadTexts: containerVethEntry.setStatus('current')
containerVethShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVethShelfNo.setStatus('current')
containerVethSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVethSlotNo.setStatus('current')
containerVethPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVethPortNo.setStatus('current')
containerVethExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVethExtNo.setStatus('current')
containerVethClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVethClassName.setStatus('current')
containerVethAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethAidString.setStatus('current')
containerVethClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethClass.setStatus('current')
containerVethTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethTableId.setStatus('current')
containerVethParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethParentId.setStatus('current')
containerOtlgTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23), )
if mibBuilder.loadTexts: containerOtlgTable.setStatus('current')
containerOtlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOtlgShelfNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgSlotNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgPortNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgExtNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgClassName"))
if mibBuilder.loadTexts: containerOtlgEntry.setStatus('current')
containerOtlgShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOtlgShelfNo.setStatus('current')
containerOtlgSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOtlgSlotNo.setStatus('current')
containerOtlgPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOtlgPortNo.setStatus('current')
containerOtlgExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOtlgExtNo.setStatus('current')
containerOtlgClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOtlgClassName.setStatus('current')
containerOtlgAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgAidString.setStatus('current')
containerOtlgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgClass.setStatus('current')
containerOtlgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgTableId.setStatus('current')
containerOtlgParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgParentId.setStatus('current')
containerPchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24), )
if mibBuilder.loadTexts: containerPchTable.setStatus('current')
containerPchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerPchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerPchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerPchPortNo"), (0, "ADVA-FSPR7-MIB", "containerPchExtNo"), (0, "ADVA-FSPR7-MIB", "containerPchClassName"))
if mibBuilder.loadTexts: containerPchEntry.setStatus('current')
containerPchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerPchShelfNo.setStatus('current')
containerPchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerPchSlotNo.setStatus('current')
containerPchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerPchPortNo.setStatus('current')
containerPchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerPchExtNo.setStatus('current')
containerPchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerPchClassName.setStatus('current')
containerPchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchAidString.setStatus('current')
containerPchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchClass.setStatus('current')
containerPchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchTableId.setStatus('current')
containerPchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchParentId.setStatus('current')
containerVschTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25), )
if mibBuilder.loadTexts: containerVschTable.setStatus('current')
containerVschEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVschShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVschSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVschPortNo"), (0, "ADVA-FSPR7-MIB", "containerVschExtNo"), (0, "ADVA-FSPR7-MIB", "containerVschClassName"))
if mibBuilder.loadTexts: containerVschEntry.setStatus('current')
containerVschShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVschShelfNo.setStatus('current')
containerVschSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVschSlotNo.setStatus('current')
containerVschPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVschPortNo.setStatus('current')
containerVschExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVschExtNo.setStatus('current')
containerVschClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVschClassName.setStatus('current')
containerVschAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschAidString.setStatus('current')
containerVschClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschClass.setStatus('current')
containerVschTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschTableId.setStatus('current')
containerVschParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschParentId.setStatus('current')
containerVch1Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26), )
if mibBuilder.loadTexts: containerVch1Table.setStatus('current')
containerVch1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVch1ShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVch1SlotNo"), (0, "ADVA-FSPR7-MIB", "containerVch1PortNo"), (0, "ADVA-FSPR7-MIB", "containerVch1ExtNo"), (0, "ADVA-FSPR7-MIB", "containerVch1ClassName"))
if mibBuilder.loadTexts: containerVch1Entry.setStatus('current')
containerVch1ShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVch1ShelfNo.setStatus('current')
containerVch1SlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVch1SlotNo.setStatus('current')
containerVch1PortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVch1PortNo.setStatus('current')
containerVch1ExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVch1ExtNo.setStatus('current')
containerVch1ClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVch1ClassName.setStatus('current')
containerVch1AidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1AidString.setStatus('current')
containerVch1Class = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1Class.setStatus('current')
containerVch1TableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1TableId.setStatus('current')
containerVch1ParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1ParentId.setStatus('current')
containerOmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40), )
if mibBuilder.loadTexts: containerOmTable.setStatus('current')
containerOmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOmShelfNo"), (0, "ADVA-FSPR7-MIB", "containerOmSlotNo"), (0, "ADVA-FSPR7-MIB", "containerOmPortNo"), (0, "ADVA-FSPR7-MIB", "containerOmExtNo"), (0, "ADVA-FSPR7-MIB", "containerOmClassName"))
if mibBuilder.loadTexts: containerOmEntry.setStatus('current')
containerOmShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOmShelfNo.setStatus('current')
containerOmSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOmSlotNo.setStatus('current')
containerOmPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOmPortNo.setStatus('current')
containerOmExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOmExtNo.setStatus('current')
containerOmClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOmClassName.setStatus('current')
containerOmAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmAidString.setStatus('current')
containerOmClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmClass.setStatus('current')
containerOmTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmTableId.setStatus('current')
containerOmParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmParentId.setStatus('current')
containerVomTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41), )
if mibBuilder.loadTexts: containerVomTable.setStatus('current')
containerVomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVomShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVomSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVomPortNo"), (0, "ADVA-FSPR7-MIB", "containerVomExtNo"), (0, "ADVA-FSPR7-MIB", "containerVomClassName"))
if mibBuilder.loadTexts: containerVomEntry.setStatus('current')
containerVomShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVomShelfNo.setStatus('current')
containerVomSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVomSlotNo.setStatus('current')
containerVomPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVomPortNo.setStatus('current')
containerVomExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVomExtNo.setStatus('current')
containerVomClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVomClassName.setStatus('current')
containerVomAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomAidString.setStatus('current')
containerVomClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomClass.setStatus('current')
containerVomTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomTableId.setStatus('current')
containerVomParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomParentId.setStatus('current')
containerShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50), )
if mibBuilder.loadTexts: containerShelfConnTable.setStatus('current')
containerShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnClassName"))
if mibBuilder.loadTexts: containerShelfConnEntry.setStatus('current')
containerShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnShelfNo.setStatus('current')
containerShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnSlotNo.setStatus('current')
containerShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnPortNo.setStatus('current')
containerShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnExtNo.setStatus('current')
containerShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerShelfConnClassName.setStatus('current')
containerShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnAidString.setStatus('current')
containerShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnClass.setStatus('current')
containerShelfConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnTableId.setStatus('current')
containerShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnParentId.setStatus('current')
containerFfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60), )
if mibBuilder.loadTexts: containerFfpTable.setStatus('current')
containerFfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "containerFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "containerFfpPortNo"), (0, "ADVA-FSPR7-MIB", "containerFfpExtNo"), (0, "ADVA-FSPR7-MIB", "containerFfpClassName"))
if mibBuilder.loadTexts: containerFfpEntry.setStatus('current')
containerFfpShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerFfpShelfNo.setStatus('current')
containerFfpSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerFfpSlotNo.setStatus('current')
containerFfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerFfpPortNo.setStatus('current')
containerFfpExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerFfpExtNo.setStatus('current')
containerFfpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerFfpClassName.setStatus('current')
containerFfpAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpAidString.setStatus('current')
containerFfpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpClass.setStatus('current')
containerFfpTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpTableId.setStatus('current')
containerFfpParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpParentId.setStatus('current')
containerEccTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70), )
if mibBuilder.loadTexts: containerEccTable.setStatus('current')
containerEccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEccShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEccSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEccPortNo"), (0, "ADVA-FSPR7-MIB", "containerEccExtNo"), (0, "ADVA-FSPR7-MIB", "containerEccClassName"))
if mibBuilder.loadTexts: containerEccEntry.setStatus('current')
containerEccShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEccShelfNo.setStatus('current')
containerEccSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEccSlotNo.setStatus('current')
containerEccPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEccPortNo.setStatus('current')
containerEccExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEccExtNo.setStatus('current')
containerEccClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEccClassName.setStatus('current')
containerEccAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccAidString.setStatus('current')
containerEccClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccClass.setStatus('current')
containerEccTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccTableId.setStatus('current')
containerEccParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccParentId.setStatus('current')
containerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71), )
if mibBuilder.loadTexts: containerLinkTable.setStatus('current')
containerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerLinkShelfNo"), (0, "ADVA-FSPR7-MIB", "containerLinkSlotNo"), (0, "ADVA-FSPR7-MIB", "containerLinkPortNo"), (0, "ADVA-FSPR7-MIB", "containerLinkExtNo"), (0, "ADVA-FSPR7-MIB", "containerLinkClassName"))
if mibBuilder.loadTexts: containerLinkEntry.setStatus('current')
containerLinkShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerLinkShelfNo.setStatus('current')
containerLinkSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerLinkSlotNo.setStatus('current')
containerLinkPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerLinkPortNo.setStatus('current')
containerLinkExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerLinkExtNo.setStatus('current')
containerLinkClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerLinkClassName.setStatus('current')
containerLinkAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkAidString.setStatus('current')
containerLinkClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkClass.setStatus('current')
containerLinkTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkTableId.setStatus('current')
containerLinkParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkParentId.setStatus('current')
containerScTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72), )
if mibBuilder.loadTexts: containerScTable.setStatus('current')
containerScEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerScShelfNo"), (0, "ADVA-FSPR7-MIB", "containerScSlotNo"), (0, "ADVA-FSPR7-MIB", "containerScPortNo"), (0, "ADVA-FSPR7-MIB", "containerScExtNo"), (0, "ADVA-FSPR7-MIB", "containerScClassName"))
if mibBuilder.loadTexts: containerScEntry.setStatus('current')
containerScShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerScShelfNo.setStatus('current')
containerScSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerScSlotNo.setStatus('current')
containerScPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerScPortNo.setStatus('current')
containerScExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerScExtNo.setStatus('current')
containerScClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerScClassName.setStatus('current')
containerScAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScAidString.setStatus('current')
containerScClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScClass.setStatus('current')
containerScTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScTableId.setStatus('current')
containerScParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScParentId.setStatus('current')
containerLanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73), )
if mibBuilder.loadTexts: containerLanTable.setStatus('current')
containerLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerLanShelfNo"), (0, "ADVA-FSPR7-MIB", "containerLanSlotNo"), (0, "ADVA-FSPR7-MIB", "containerLanPortNo"), (0, "ADVA-FSPR7-MIB", "containerLanExtNo"), (0, "ADVA-FSPR7-MIB", "containerLanClassName"))
if mibBuilder.loadTexts: containerLanEntry.setStatus('current')
containerLanShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerLanShelfNo.setStatus('current')
containerLanSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerLanSlotNo.setStatus('current')
containerLanPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerLanPortNo.setStatus('current')
containerLanExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerLanExtNo.setStatus('current')
containerLanClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerLanClassName.setStatus('current')
containerLanAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanAidString.setStatus('current')
containerLanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanClass.setStatus('current')
containerLanTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanTableId.setStatus('current')
containerLanParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanParentId.setStatus('current')
containerEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80), )
if mibBuilder.loadTexts: containerEnvTable.setStatus('current')
containerEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEnvPortNo"), (0, "ADVA-FSPR7-MIB", "containerEnvExtNo"), (0, "ADVA-FSPR7-MIB", "containerEnvClassName"))
if mibBuilder.loadTexts: containerEnvEntry.setStatus('current')
containerEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEnvShelfNo.setStatus('current')
containerEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEnvSlotNo.setStatus('current')
containerEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEnvPortNo.setStatus('current')
containerEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEnvExtNo.setStatus('current')
containerEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEnvClassName.setStatus('current')
containerEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvAidString.setStatus('current')
containerEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvClass.setStatus('current')
containerEnvTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvTableId.setStatus('current')
containerEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvParentId.setStatus('current')
containerWchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90), )
if mibBuilder.loadTexts: containerWchTable.setStatus('current')
containerWchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerWchIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerWchClassName"))
if mibBuilder.loadTexts: containerWchEntry.setStatus('current')
containerWchIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo1.setStatus('current')
containerWchIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo2.setStatus('current')
containerWchIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo3.setStatus('current')
containerWchIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo4.setStatus('current')
containerWchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerWchClassName.setStatus('current')
containerWchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchAidString.setStatus('current')
containerWchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchClass.setStatus('current')
containerWchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchTableId.setStatus('current')
containerWchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchParentId.setStatus('current')
containerOlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91), )
if mibBuilder.loadTexts: containerOlTable.setStatus('current')
containerOlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOlIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerOlClassName"))
if mibBuilder.loadTexts: containerOlEntry.setStatus('current')
containerOlIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo1.setStatus('current')
containerOlIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo2.setStatus('current')
containerOlIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo3.setStatus('current')
containerOlIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo4.setStatus('current')
containerOlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOlClassName.setStatus('current')
containerOlAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlAidString.setStatus('current')
containerOlClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlClass.setStatus('current')
containerOlTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlTableId.setStatus('current')
containerOlParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlParentId.setStatus('current')
containerOwlgTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92), )
if mibBuilder.loadTexts: containerOwlgTable.setStatus('current')
containerOwlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerOwlgClassName"))
if mibBuilder.loadTexts: containerOwlgEntry.setStatus('current')
containerOwlgIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo1.setStatus('current')
containerOwlgIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo2.setStatus('current')
containerOwlgIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo3.setStatus('current')
containerOwlgIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo4.setStatus('current')
containerOwlgClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOwlgClassName.setStatus('current')
containerOwlgAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgAidString.setStatus('current')
containerOwlgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgClass.setStatus('current')
containerOwlgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgTableId.setStatus('current')
containerOwlgParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgParentId.setStatus('current')
containerCrossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93), )
if mibBuilder.loadTexts: containerCrossDcnTable.setStatus('current')
containerCrossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnClassName"))
if mibBuilder.loadTexts: containerCrossDcnEntry.setStatus('current')
containerCrossDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnShelfNo.setStatus('current')
containerCrossDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnSlotNo.setStatus('current')
containerCrossDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnPortNo.setStatus('current')
containerCrossDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnExtNo.setStatus('current')
containerCrossDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossDcnClassName.setStatus('current')
containerCrossDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnAidString.setStatus('current')
containerCrossDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnClass.setStatus('current')
containerCrossDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnTableId.setStatus('current')
containerCrossDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnParentId.setStatus('current')
nextUnusedPc = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 94), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextUnusedPc.setStatus('current')
nextUnusedFc = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 95), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextUnusedFc.setStatus('current')
endOfContainers = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainers.setStatus('current')
entitySysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1), )
if mibBuilder.loadTexts: entitySysTable.setStatus('current')
entitySysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"))
if mibBuilder.loadTexts: entitySysEntry.setStatus('current')
entitySysShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entitySysShelfNo.setStatus('current')
entitySysSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entitySysSlotNo.setStatus('current')
entitySysPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entitySysPortNo.setStatus('current')
entitySysExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entitySysExtNo.setStatus('current')
entitySysClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entitySysClassName.setStatus('current')
entitySysAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysAidString.setStatus('current')
entitySysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysType.setStatus('current')
entitySysTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysTableId.setStatus('current')
entitySysParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysParentId.setStatus('current')
entitySysClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysClass.setStatus('current')
entitySysOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysOneIndex.setStatus('current')
entitySysEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 12), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysEquipmentState.setStatus('current')
entityEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2), )
if mibBuilder.loadTexts: entityEqptTable.setStatus('current')
entityEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: entityEqptEntry.setStatus('current')
entityEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityEqptShelfNo.setStatus('current')
entityEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityEqptSlotNo.setStatus('current')
entityEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityEqptPortNo.setStatus('current')
entityEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityEqptExtNo.setStatus('current')
entityEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityEqptClassName.setStatus('current')
entityEqptAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptAidString.setStatus('current')
entityEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptType.setStatus('current')
entityEqptTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptTableId.setStatus('current')
entityEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptParentId.setStatus('current')
entityEqptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptClass.setStatus('current')
entityEqptOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptOneIndex.setStatus('current')
entityEqptEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 12), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptEquipmentState.setStatus('current')
entityEqptMtosiParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptMtosiParentId.setStatus('current')
entityDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3), )
if mibBuilder.loadTexts: entityDcnTable.setStatus('current')
entityDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: entityDcnEntry.setStatus('current')
entityDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityDcnShelfNo.setStatus('current')
entityDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityDcnSlotNo.setStatus('current')
entityDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityDcnPortNo.setStatus('current')
entityDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityDcnExtNo.setStatus('current')
entityDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityDcnClassName.setStatus('current')
entityDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnAidString.setStatus('current')
entityDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnType.setStatus('current')
entityDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnTableId.setStatus('current')
entityDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnParentId.setStatus('current')
entityDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnClass.setStatus('current')
entityDcnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnOneIndex.setStatus('current')
entityOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4), )
if mibBuilder.loadTexts: entityOptLineTable.setStatus('current')
entityOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: entityOptLineEntry.setStatus('current')
entityOptLineIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo1.setStatus('current')
entityOptLineIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo2.setStatus('current')
entityOptLineIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo3.setStatus('current')
entityOptLineIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo4.setStatus('current')
entityOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityOptLineClassName.setStatus('current')
entityOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineAidString.setStatus('current')
entityOptLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineType.setStatus('current')
entityOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineTableId.setStatus('current')
entityOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineParentId.setStatus('current')
entityOptLineOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineOneIndex.setStatus('current')
entityOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 11), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineClass.setStatus('current')
entityEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5), )
if mibBuilder.loadTexts: entityEnvTable.setStatus('current')
entityEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"))
if mibBuilder.loadTexts: entityEnvEntry.setStatus('current')
entityEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityEnvShelfNo.setStatus('current')
entityEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityEnvSlotNo.setStatus('current')
entityEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityEnvPortNo.setStatus('current')
entityEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityEnvExtNo.setStatus('current')
entityEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityEnvClassName.setStatus('current')
entityEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvAidString.setStatus('current')
entityEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvType.setStatus('current')
entityEnvTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvTableId.setStatus('current')
entityEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvParentId.setStatus('current')
entityEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvClass.setStatus('current')
entityEnvOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvOneIndex.setStatus('current')
entityFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7), )
if mibBuilder.loadTexts: entityFacilityTable.setStatus('current')
entityFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: entityFacilityEntry.setStatus('current')
entityFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFacilityShelfNo.setStatus('current')
entityFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFacilitySlotNo.setStatus('current')
entityFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFacilityPortNo.setStatus('current')
entityFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFacilityExtNo.setStatus('current')
entityFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFacilityClassName.setStatus('current')
entityFacilityAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityAidString.setStatus('current')
entityFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityType.setStatus('current')
entityFacilityTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityTableId.setStatus('current')
entityFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityParentId.setStatus('current')
entityFacilityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityClass.setStatus('current')
entityFacilityOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityOneIndex.setStatus('current')
entityCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8), )
if mibBuilder.loadTexts: entityCrossConnTable.setStatus('current')
entityCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: entityCrossConnEntry.setStatus('current')
entityCrossConnFromShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromShelfNo.setStatus('current')
entityCrossConnFromSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromSlotNo.setStatus('current')
entityCrossConnFromPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromPortNo.setStatus('current')
entityCrossConnFromExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromExtNo.setStatus('current')
entityCrossConnFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnFromClassName.setStatus('current')
entityCrossConnToShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 6), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToShelfNo.setStatus('current')
entityCrossConnToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToSlotNo.setStatus('current')
entityCrossConnToPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 8), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToPortNo.setStatus('current')
entityCrossConnToExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 9), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToExtNo.setStatus('current')
entityCrossConnToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 10), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnToClassName.setStatus('current')
entityCrossConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 11), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnClassName.setStatus('current')
entityCrossConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnAidString.setStatus('current')
entityCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 13), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnType.setStatus('current')
entityCrossConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnTableId.setStatus('current')
entityCrossConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnParentId.setStatus('current')
entityCrossConnFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnFromId.setStatus('current')
entityCrossConnToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnToId.setStatus('current')
entityCrossConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 18), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnClass.setStatus('current')
entityTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10), )
if mibBuilder.loadTexts: entityTerminPointTable.setStatus('current')
entityTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: entityTerminPointEntry.setStatus('current')
entityTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo1.setStatus('current')
entityTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo2.setStatus('current')
entityTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo3.setStatus('current')
entityTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo4.setStatus('current')
entityTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityTerminPointClassName.setStatus('current')
entityTerminPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointAidString.setStatus('current')
entityTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointType.setStatus('current')
entityTerminPointAssignState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 8), AssignmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointAssignState.setStatus('current')
entityTerminPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointTableId.setStatus('current')
entityTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointParentId.setStatus('current')
entityTerminPointOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointOneIndex.setStatus('current')
entityTerminPointReferencedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 12), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointReferencedTo.setStatus('current')
entityTerminPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 13), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointClass.setStatus('current')
entityTerminPointPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 14), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointPortClass.setStatus('current')
entityConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11), )
if mibBuilder.loadTexts: entityConnectionTable.setStatus('current')
entityConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: entityConnectionEntry.setStatus('current')
entityConnectionClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 1), EntityClassName())
if mibBuilder.loadTexts: entityConnectionClassName.setStatus('current')
entityConnectionAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionAidString.setStatus('current')
entityConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 3), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionType.setStatus('current')
entityConnectionTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionTableId.setStatus('current')
entityConnectionParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionParentId.setStatus('current')
entityConnectionFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionFromId.setStatus('current')
entityConnectionToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionToId.setStatus('current')
entityConnectionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionClass.setStatus('current')
entityExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12), )
if mibBuilder.loadTexts: entityExternalPortTable.setStatus('current')
entityExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: entityExternalPortEntry.setStatus('current')
entityExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortShelfNo.setStatus('current')
entityExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortSlotNo.setStatus('current')
entityExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortPortNo.setStatus('current')
entityExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortExtNo.setStatus('current')
entityExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityExternalPortClassName.setStatus('current')
entityExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortAidString.setStatus('current')
entityExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortType.setStatus('current')
entityExternalPortTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortTableId.setStatus('current')
entityExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortParentId.setStatus('current')
entityExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortClass.setStatus('current')
entityExternalPortOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortOneIndex.setStatus('current')
entityCrsOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13), )
if mibBuilder.loadTexts: entityCrsOptLineTable.setStatus('current')
entityCrsOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: entityCrsOptLineEntry.setStatus('current')
entityCrsOptLineFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo1.setStatus('current')
entityCrsOptLineFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo2.setStatus('current')
entityCrsOptLineFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo3.setStatus('current')
entityCrsOptLineFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo4.setStatus('current')
entityCrsOptLineFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineFromClassName.setStatus('current')
entityCrsOptLineToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 6), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo1.setStatus('current')
entityCrsOptLineToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 7), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo2.setStatus('current')
entityCrsOptLineToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 8), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo3.setStatus('current')
entityCrsOptLineToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 9), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo4.setStatus('current')
entityCrsOptLineToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 10), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineToClassName.setStatus('current')
entityCrsOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 11), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineClassName.setStatus('current')
entityCrsOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineAidString.setStatus('current')
entityCrsOptLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 13), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineType.setStatus('current')
entityCrsOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineTableId.setStatus('current')
entityCrsOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineParentId.setStatus('current')
entityCrsOptLineFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineFromId.setStatus('current')
entityCrsOptLineToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineToId.setStatus('current')
entityCrsOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 18), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineClass.setStatus('current')
entityContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16), )
if mibBuilder.loadTexts: entityContainerTable.setStatus('current')
entityContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: entityContainerEntry.setStatus('current')
entityContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityContainerShelfNo.setStatus('current')
entityContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityContainerSlotNo.setStatus('current')
entityContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityContainerPortNo.setStatus('current')
entityContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityContainerExtNo.setStatus('current')
entityContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityContainerClassName.setStatus('current')
entityContainerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerAidString.setStatus('current')
entityContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerType.setStatus('current')
entityContainerTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerTableId.setStatus('current')
entityContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerParentId.setStatus('current')
entityContainerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerClass.setStatus('current')
entityContainerOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerOneIndex.setStatus('current')
entityOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17), )
if mibBuilder.loadTexts: entityOpticalMuxTable.setStatus('current')
entityOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: entityOpticalMuxEntry.setStatus('current')
entityOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxShelfNo.setStatus('current')
entityOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxSlotNo.setStatus('current')
entityOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxPortNo.setStatus('current')
entityOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxExtNo.setStatus('current')
entityOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityOpticalMuxClassName.setStatus('current')
entityOpticalMuxAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxAidString.setStatus('current')
entityOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxType.setStatus('current')
entityOpticalMuxTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxTableId.setStatus('current')
entityOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxParentId.setStatus('current')
entityOpticalMuxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxClass.setStatus('current')
entityOpticalMuxOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxOneIndex.setStatus('current')
entityShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18), )
if mibBuilder.loadTexts: entityShelfConnTable.setStatus('current')
entityShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: entityShelfConnEntry.setStatus('current')
entityShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnShelfNo.setStatus('current')
entityShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnSlotNo.setStatus('current')
entityShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnPortNo.setStatus('current')
entityShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnExtNo.setStatus('current')
entityShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityShelfConnClassName.setStatus('current')
entityShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnAidString.setStatus('current')
entityShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnType.setStatus('current')
entityShelfConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnTableId.setStatus('current')
entityShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnParentId.setStatus('current')
entityShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnClass.setStatus('current')
entityShelfConnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnOneIndex.setStatus('current')
entityFfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19), )
if mibBuilder.loadTexts: entityFfpTable.setStatus('current')
entityFfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: entityFfpEntry.setStatus('current')
entityFfpShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFfpShelfNo.setStatus('current')
entityFfpSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFfpSlotNo.setStatus('current')
entityFfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFfpPortNo.setStatus('current')
entityFfpExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFfpExtNo.setStatus('current')
entityFfpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFfpClassName.setStatus('current')
entityFfpAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpAidString.setStatus('current')
entityFfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpType.setStatus('current')
entityFfpTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpTableId.setStatus('current')
entityFfpParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpParentId.setStatus('current')
entityFfpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpClass.setStatus('current')
entityFfpOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpOneIndex.setStatus('current')
entityCrossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20), )
if mibBuilder.loadTexts: entityCrossDcnTable.setStatus('current')
entityCrossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: entityCrossDcnEntry.setStatus('current')
entityCrossDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnShelfNo.setStatus('current')
entityCrossDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnSlotNo.setStatus('current')
entityCrossDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnPortNo.setStatus('current')
entityCrossDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnExtNo.setStatus('current')
entityCrossDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrossDcnClassName.setStatus('current')
entityCrossDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnAidString.setStatus('current')
entityCrossDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnType.setStatus('current')
entityCrossDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnTableId.setStatus('current')
entityCrossDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnParentId.setStatus('current')
entityCrossDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnClass.setStatus('current')
entityCrossDcnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnOneIndex.setStatus('current')
entityProtectionCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21), )
if mibBuilder.loadTexts: entityProtectionCableTable.setStatus('current')
entityProtectionCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: entityProtectionCableEntry.setStatus('current')
entityProtectionCableIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex1.setStatus('current')
entityProtectionCableIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex2.setStatus('current')
entityProtectionCableIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex3.setStatus('current')
entityProtectionCableIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex4.setStatus('current')
entityProtectionCableClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityProtectionCableClassName.setStatus('current')
entityProtectionCableAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableAidString.setStatus('current')
entityProtectionCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableType.setStatus('current')
entityProtectionCableTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableTableId.setStatus('current')
entityProtectionCableParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableParentId.setStatus('current')
entityProtectionCableClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableClass.setStatus('current')
entityFilterCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22), )
if mibBuilder.loadTexts: entityFilterCableTable.setStatus('current')
entityFilterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: entityFilterCableEntry.setStatus('current')
entityFilterCableIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex1.setStatus('current')
entityFilterCableIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex2.setStatus('current')
entityFilterCableIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex3.setStatus('current')
entityFilterCableIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex4.setStatus('current')
entityFilterCableClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFilterCableClassName.setStatus('current')
entityFilterCableAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableAidString.setStatus('current')
entityFilterCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableType.setStatus('current')
entityFilterCableTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableTableId.setStatus('current')
entityFilterCableParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableParentId.setStatus('current')
entityFilterCableClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableClass.setStatus('current')
entityMtosiSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100), )
if mibBuilder.loadTexts: entityMtosiSlotsTable.setStatus('current')
entityMtosiSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityMtosiSlotsShelfNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsSlotNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsPortNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsExtNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsClassName"))
if mibBuilder.loadTexts: entityMtosiSlotsEntry.setStatus('current')
entityMtosiSlotsShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsShelfNo.setStatus('current')
entityMtosiSlotsSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsSlotNo.setStatus('current')
entityMtosiSlotsPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsPortNo.setStatus('current')
entityMtosiSlotsExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsExtNo.setStatus('current')
entityMtosiSlotsClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityMtosiSlotsClassName.setStatus('current')
entityMtosiSlotsAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsAidString.setStatus('current')
entityMtosiSlotsParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsParentId.setStatus('current')
entityMtosiSlotsClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsClass.setStatus('current')
entityMtosiSlotsChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsChildId.setStatus('current')
endOfEntities = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEntities.setStatus('current')
trapModeLegacy = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 1), FspR7TrapModeLegacy()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapModeLegacy.setStatus('current')
artificialEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 2), FspR7ColumnMark()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artificialEntity.setStatus('current')
identifyTraps = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identifyTraps.setStatus('current')
ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 1), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6.setStatus('current')
ipv6DefGateway = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6DefGateway.setStatus('current')
endOfNeMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNeMgmt.setStatus('current')
crossConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6), )
if mibBuilder.loadTexts: crossConnectionTable.setStatus('current')
crossConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: crossConnectionEntry.setStatus('current')
crossConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionRowStatus.setStatus('current')
crossConnectionAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 2), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionAdmin.setStatus('current')
crossConnectionRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 3), FspR7RedLinedState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionRedLineState.setStatus('current')
crossConnectionCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 4), FspR7FunctionCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsFunction.setStatus('current')
crossConnectionConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 5), FspR7Conn()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionConn.setStatus('current')
crossConnectionCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 6), FspR7TypeCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsType.setStatus('current')
crossConnectionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionAlias.setStatus('current')
crossConnectionPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 8), FspR7PathNode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionPathNode.setStatus('current')
crossConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionTunnelAid.setStatus('current')
crossConnectionIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionIngressTid.setStatus('current')
crossConnectionIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionIngressNodeIp.setStatus('current')
crossConnectionOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionOperState.setStatus('current')
crossConnectionSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 13), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionSecondaryStates.setStatus('current')
crossConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 14), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionType.setStatus('current')
crossConnectionPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 15), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionPathProtection.setStatus('current')
crossConnectionCrsFromAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 16), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsFromAidTwo.setStatus('current')
crossConnectionCrsToAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 17), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsToAidTwo.setStatus('current')
crossConnectionCrsMcAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 18), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsMcAidList.setStatus('current')
crossConnectionCrsContAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 19), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsContAidList.setStatus('current')
crossConnectionCrsContAidListTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 20), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsContAidListTwo.setStatus('current')
crossOpticalLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7), )
if mibBuilder.loadTexts: crossOpticalLineTable.setStatus('current')
crossOpticalLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: crossOpticalLineEntry.setStatus('current')
crossOpticalLineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineRowStatus.setStatus('current')
crossOpticalLineRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 2), FspR7RedLinedState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineRedLineState.setStatus('current')
crossOpticalLineCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 3), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCrsFunction.setStatus('current')
crossOpticalLineConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 4), FspR7Conn()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineConn.setStatus('current')
crossOpticalLineCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 5), FspR7TypeCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineCrsType.setStatus('current')
crossOpticalLineAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineAlias.setStatus('current')
crossOpticalLineTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineTunnelAid.setStatus('current')
crossOpticalLineIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineIngressTid.setStatus('current')
crossOpticalLineIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineIngressNodeIp.setStatus('current')
crossOpticalLineSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 10), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineSecondaryStates.setStatus('current')
endOfCrossOpticalLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossOpticalLineTable.setStatus('current')
crossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9), )
if mibBuilder.loadTexts: crossDcnTable.setStatus('current')
crossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: crossDcnEntry.setStatus('current')
crossDcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnRowStatus.setStatus('current')
crossDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 2), FspR7TypeConnection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnType.setStatus('current')
crossDcnLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnLink.setStatus('current')
crossDcnEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnEcc.setStatus('current')
endOfCrossDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossDcnTable.setStatus('current')
endOfSpecificMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSpecificMgmt.setStatus('current')
shelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1), )
if mibBuilder.loadTexts: shelfTable.setStatus('current')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: shelfEntry.setStatus('current')
shelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRowStatus.setStatus('current')
shelfNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfNetworkPorts.setStatus('current')
shelfInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPlugs.setStatus('current')
shelfConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 4), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnectionType.setStatus('current')
shelfOscPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscPorts.setStatus('current')
shelfShelfHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 6), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfShelfHeight.setStatus('current')
shelfChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 7), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannel.setStatus('current')
shelfPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 8), FspR7PsuOutputPower()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPsuOutputPower.setStatus('current')
shelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 9), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfType.setStatus('current')
shelfChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 10), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelsNumber.setStatus('current')
shelfRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRack.setStatus('current')
shelfInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 12), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPlugRates.setStatus('current')
shelfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 13), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnectorType.setStatus('current')
shelfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 14), FspR7SupplyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfSupply.setStatus('current')
shelfClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfClientPorts.setStatus('current')
shelfFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 16), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFiberBrand.setStatus('current')
shelfTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 17), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTransmitChannel.setStatus('current')
shelfBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 18), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfBandProvision.setStatus('current')
shelfUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfUpgradePorts.setStatus('current')
shelfStandardSlotHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 20), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfStandardSlotHeight.setStatus('current')
shelfStandardSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfStandardSlots.setStatus('current')
shelfChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 22), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelBandwith.setStatus('current')
shelfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 23), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAdmin.setStatus('current')
shelfInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPorts.setStatus('current')
shelfRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRackNumber.setStatus('current')
shelfRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRackOrder.setStatus('current')
shelfOscChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 27), FspR7OscChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscChannel.setStatus('current')
shelfMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 28), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMaxPowerConsumption.setStatus('current')
shelfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 29), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAlias.setStatus('current')
shelfFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 30), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFiberType.setStatus('current')
shelfChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 31), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelSpacing.setStatus('current')
shelfSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 32), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSecondaryStates.setStatus('current')
shelfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 33), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperState.setStatus('current')
shelfScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 34), FspR7ScuRing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfScuRing.setStatus('current')
shelfShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfShelfId.setStatus('current')
shelfFDports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFDports.setStatus('current')
shelfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfSlot.setStatus('current')
endOfShelfTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfTable.setStatus('current')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanRowStatus.setStatus('current')
fanForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanForceDestroy.setStatus('current')
fanMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 3), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanMaxPowerConsumption.setStatus('current')
fanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 4), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanAdmin.setStatus('current')
fanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 5), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanType.setStatus('current')
fanAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanAlias.setStatus('current')
fanOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 7), FspR7TifOutputReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanOutputReset.setStatus('current')
fanFanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFanPorts.setStatus('current')
fanSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 9), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSecondaryStates.setStatus('current')
fanOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 10), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanOperState.setStatus('current')
fanFanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 11), FspR7FanProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFanProfile.setStatus('current')
endOfFanTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFanTable.setStatus('current')
plugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5), )
if mibBuilder.loadTexts: plugTable.setStatus('current')
plugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: plugEntry.setStatus('current')
plugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugRowStatus.setStatus('current')
plugConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 2), FspR7ConnectorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugConnector.setStatus('current')
plugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 3), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugType.setStatus('current')
plugReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugReach.setStatus('current')
plugLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLoopbackAttenuation.setStatus('current')
plugGenericPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGenericPorts.setStatus('current')
plugConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 7), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugConnectorType.setStatus('current')
plugFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 8), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugFiberType.setStatus('current')
plugTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugTransmitChannel.setStatus('current')
plugAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugAlias.setStatus('current')
plugLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 11), FspR7LaneGroupInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLaneGroup.setStatus('current')
plugMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 12), FspR7PlugDataRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugMaxDataRate.setStatus('current')
plugThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 13), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugThirdPartyUsage.setStatus('current')
plugAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 14), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugAdmin.setStatus('current')
plugSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugSecondaryStates.setStatus('current')
plugOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugOperState.setStatus('current')
plugBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 17), FspR7BidirectionalChannel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugBidirectionalChannel.setStatus('current')
plugChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 18), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugChannelSpacingProvision.setStatus('current')
endOfPlugTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPlugTable.setStatus('current')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: moduleEntry.setStatus('current')
moduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRowStatus.setStatus('current')
moduleForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 2), FspR7ForcedStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleForceDestroy.setStatus('current')
moduleCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 3), FspR7Category()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCategory.setStatus('current')
moduleNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNetworkPorts.setStatus('current')
moduleInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 5), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugs.setStatus('current')
modulePsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 6), FspR7PsuOutputPower()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePsuOutputPower.setStatus('current')
moduleWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 7), Unsigned32()).setUnits('0.1 HP').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleWidth.setStatus('current')
modulePower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 8), FspR7EdfaOutputPowerRating()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePower.setStatus('current')
moduleReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 9), FspR7OpticalInterfaceReach()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleReach.setStatus('current')
moduleInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 10), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleInitEqlz.setStatus('current')
moduleSuppClientPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 11), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppClientPlugTypes.setStatus('current')
moduleSuppNetworkPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 12), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppNetworkPlugTypes.setStatus('current')
moduleLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleLanAid.setStatus('current')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 14), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleType.setStatus('current')
moduleMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 15), FspR7Mapping()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMapping.setStatus('current')
moduleGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 16), FspR7GainRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleGainRange.setStatus('current')
moduleInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 17), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugRates.setStatus('current')
moduleSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 18), FspR7SingleFiberLocation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSfProvision.setStatus('current')
moduleInternalPlugsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 19), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugsReach.setStatus('current')
moduleCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 20), FspR7CapInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleCapabilityLevelProvision.setStatus('current')
moduleConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 21), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConnector.setStatus('current')
moduleDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 22), FspR7DCFiberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDCFiberType.setStatus('current')
moduleChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 23), FspR7NumberOfChannelsProv()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelsProvision.setStatus('current')
moduleFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 24), FspR7FiberDetect()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleFiberDetect.setStatus('current')
moduleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescription.setStatus('current')
moduleSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 26), FspR7SupplyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSupply.setStatus('current')
moduleSuppClientPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 27), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppClientPlugRates.setStatus('current')
moduleClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleClientPorts.setStatus('current')
moduleGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 29), FspR7OpticalGroup()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleGroup.setStatus('current')
moduleDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 30), FspR7DeploymentScenario()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDeploy.setStatus('current')
moduleLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleLagSysPrio.setStatus('current')
moduleMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 32), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMaxPowerConsumption.setStatus('current')
moduleTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 33), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTransmitChannel.setStatus('current')
moduleBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 34), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleBand.setStatus('current')
moduleUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUpgradePorts.setStatus('current')
moduleTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 36), FspR7TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTrafficDirection.setStatus('current')
moduleMidstagePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMidstagePorts.setStatus('current')
moduleStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 38), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleStages.setStatus('current')
moduleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 39), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleIpAddr.setStatus('current')
moduleDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 40), FspR7DispersionCompensation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDispersionCompensation.setStatus('current')
moduleActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 41), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleActivateDetect.setStatus('current')
moduleOscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 42), FspR7OscUsage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleOscUsage.setStatus('current')
moduleInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPorts.setStatus('current')
moduleAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 44), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAdmin.setStatus('current')
moduleScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 45), FspR7Scrambling()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleScrambling.setStatus('current')
moduleTerminationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 46), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTerminationType.setStatus('current')
moduleChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 47), FspR7NumberOfChannels()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelsNumber.setStatus('current')
moduleLanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLanPorts.setStatus('current')
moduleChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 49), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelSpacingProvision.setStatus('current')
moduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 50), FspR7TransmissionMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMode.setStatus('current')
moduleEccPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEccPorts.setStatus('current')
moduleSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 52), FspR7OpticalSubBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSubBandProvision.setStatus('current')
moduleSuppNetworkPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 53), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppNetworkPlugRates.setStatus('current')
moduleHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 54), Unsigned32()).setUnits('0.1 HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHeight.setStatus('current')
moduleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 55), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAlias.setStatus('current')
moduleFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 56), FspR7OpticalFiberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleFiberType.setStatus('current')
moduleChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 57), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelSpacing.setStatus('current')
moduleOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 58), FspR7TifOutputReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleOutputReset.setStatus('current')
moduleSerialPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialPorts.setStatus('current')
moduleRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 60), FspR7RoadmNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRoadmNumber.setStatus('current')
moduleSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 61), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSecondaryStates.setStatus('current')
moduleOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 62), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOperState.setStatus('current')
moduleAlsConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 63), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAlsConf.setStatus('current')
moduleTopologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 64), FspR7TopologyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTopologyType.setStatus('current')
moduleScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 65), FspR7ScuRing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScuRing.setStatus('current')
moduleNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 66), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNodeIpAddress.setStatus('current')
moduleInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 67), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInventoryDescription.setStatus('current')
moduleGenericPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 68), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleGenericPlugRates.setStatus('current')
moduleTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 69), FspR7Topology()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTopology.setStatus('current')
moduleForceConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 70), FspR7ForceConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleForceConfig.setStatus('current')
moduleRamUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 71), Unsigned32()).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRamUsage.setStatus('current')
moduleFanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 72), FspR7FanMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFanMode.setStatus('current')
moduleMuxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 73), FspR7MuxMethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMuxMethod.setStatus('current')
moduleNdpCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 74), FspR7NdpCleanup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleNdpCleanup.setStatus('current')
moduleAvlndpGbeTxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpGbeTxcrs.setStatus('current')
moduleAvlndpGbeRxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpGbeRxcrs.setStatus('current')
moduleAvlndpF125Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 77), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF125Txcrs.setStatus('current')
moduleAvlndpF125Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 78), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF125Rxcrs.setStatus('current')
moduleAvlndpF270Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 79), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF270Txcrs.setStatus('current')
moduleAvlndpF270Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF270Rxcrs.setStatus('current')
moduleAvlndpF1483Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 81), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1483Txcrs.setStatus('current')
moduleAvlndpF1483Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 82), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1483Rxcrs.setStatus('current')
moduleAvlndpF1485Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1485Txcrs.setStatus('current')
moduleAvlndpF1485Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 84), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1485Rxcrs.setStatus('current')
moduleAvlndpF2967Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 85), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2967Txcrs.setStatus('current')
moduleAvlndpF2967Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2967Rxcrs.setStatus('current')
moduleAvlndpF2970Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 87), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2970Txcrs.setStatus('current')
moduleAvlndpF2970Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 88), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2970Rxcrs.setStatus('current')
moduleAvlmdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 89), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlmdp.setStatus('current')
moduleRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 90), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRstp.setStatus('current')
moduleRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 91), FspR7RlsMan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleRemoteReset.setStatus('current')
endOfModuleTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfModuleTable.setStatus('current')
protectionCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9), )
if mibBuilder.loadTexts: protectionCableTable.setStatus('current')
protectionCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: protectionCableEntry.setStatus('current')
protectionCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protectionCableRowStatus.setStatus('current')
protectionCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1, 2), FspR7YcableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protectionCableType.setStatus('current')
endOfProtectionCableTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionCableTable.setStatus('current')
filterCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11), )
if mibBuilder.loadTexts: filterCableTable.setStatus('current')
filterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: filterCableEntry.setStatus('current')
filterCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterCableRowStatus.setStatus('current')
filterCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1, 2), FspR7FltrCableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterCableType.setStatus('current')
endOfFilterCableTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFilterCableTable.setStatus('current')
endOfEqptMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEqptMgmt.setStatus('current')
physicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1), )
if mibBuilder.loadTexts: physicalPortTable.setStatus('current')
physicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: physicalPortEntry.setStatus('current')
physicalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRowStatus.setStatus('current')
physicalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortType.setStatus('current')
physicalPortAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAdmin.setStatus('current')
physicalPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 4), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnector.setStatus('current')
physicalPortFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 5), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFiber.setStatus('current')
physicalPortConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 6), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnType.setStatus('current')
physicalPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 7), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortOperState.setStatus('current')
physicalPortLaneChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 8), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel.setStatus('current')
physicalPortLaserBiasCurrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 9), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserBiasCurrLevel.setStatus('current')
physicalPortLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 10), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserTemp.setStatus('current')
physicalPortInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 11), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortInputPower.setStatus('deprecated')
physicalPortOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 12), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortOutputPower.setStatus('deprecated')
physicalPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 13), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortSecondaryStates.setStatus('current')
physicalPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAlias.setStatus('current')
physicalPortAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 15), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAlsMode.setStatus('current')
physicalPortAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 16), FspR7AutoThresReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortAutoThresReset.setStatus('current')
physicalPortAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 17), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAutonegotiation.setStatus('current')
physicalPortBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 18), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBand.setStatus('current')
physicalPortPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 19), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortPhysIfBaseType.setStatus('current')
physicalPortConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 20), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnState.setStatus('current')
physicalPortBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 21), FspR7PortBehaviour()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortBehaviour.setStatus('current')
physicalPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 22), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortRate.setStatus('current')
physicalPortBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 23), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBitrate.setStatus('current')
physicalPortDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 24), FspR7DispersionConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDispertionConfig.setStatus('current')
physicalPortDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDispersionSetting.setStatus('current')
physicalPortDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 26), FspR7DispersionModes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDispersionMode.setStatus('current')
physicalPortChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 27), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelSpacing.setStatus('current')
physicalPortChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 28), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortChannelProv.setStatus('current')
physicalPortWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 29), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortWdmRxChannel.setStatus('current')
physicalPortCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 30), FspR7CodeGain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortCodeGain.setStatus('current')
physicalPortXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 31), FspR7XfpDecisionThres()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortXfpDecisionThres.setStatus('current')
physicalPortDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 32), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDisparityCorrection.setStatus('current')
physicalPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 33), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDuplexMode.setStatus('current')
physicalPortEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 34), FspR7EqlzAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortEqlzAdmin.setStatus('current')
physicalPortErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 35), FspR7ErrorFwdMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortErrorForwarding.setStatus('current')
physicalPortFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 36), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFecType.setStatus('current')
physicalPortFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 37), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFarEndCommunication.setStatus('current')
physicalPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 38), FspR7FlowControlMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFlowControl.setStatus('current')
physicalPortForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 39), FspR7LaserForcedOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortForceLaserOn.setStatus('current')
physicalPortFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 40), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFrequency.setStatus('current')
physicalPortReceiverFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 41), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReceiverFrequency.setStatus('current')
physicalPortInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 42), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInhibitSwitchToProt.setStatus('current')
physicalPortInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 43), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInhibitSwitchToWork.setStatus('current')
physicalPortTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 44), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitWavelength.setStatus('current')
physicalPortReceiverWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 45), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReceiverWavelength.setStatus('current')
physicalPortLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 46), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaneChannelSetting.setStatus('current')
physicalPortLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 47), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel1.setStatus('current')
physicalPortLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 48), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel2.setStatus('current')
physicalPortLaneChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 49), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel3.setStatus('current')
physicalPortLaneChannel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 50), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel4.setStatus('current')
physicalPortLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 51), FspR7LaneGroupInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneGroup.setStatus('current')
physicalPortLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 52), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortLoopConfig.setStatus('current')
physicalPortLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 53), FspR7LaserDelayTimer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserDelayTimer.setStatus('current')
physicalPortLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOffTimer.setStatus('current')
physicalPortLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOnTimer.setStatus('current')
physicalPortLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 56), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOffDelayFunction.setStatus('current')
physicalPortMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 57), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortMonLevel.setStatus('current')
physicalPortSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortSumTransmited.setStatus('current')
physicalPortAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 59), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAutoPTassignment.setStatus('current')
physicalPortTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 60), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTributarySlotMethod.setStatus('current')
physicalPortTributaryFreeSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTributaryFreeSlotNo.setStatus('current')
physicalPortTributaryAssignedSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTributaryAssignedSlotNo.setStatus('current')
physicalPortInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 63), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInitiateEqualization.setStatus('current')
physicalPortLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 64), FspR7LossAttenuation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortLossAttenuation.setStatus('current')
physicalPortOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpticalSetPoint.setStatus('current')
physicalPortDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 66), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDataLayerPmReset.setStatus('current')
physicalPortPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 67), FspR7PrbsPmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortPrbsPmReset.setStatus('current')
physicalPortTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 68), FspR7PRBSTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTestPrbsRcvMode.setStatus('current')
physicalPortTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 69), FspR7PRBSTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTestPrbsTrmtMode.setStatus('current')
physicalPortSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 70), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortSwitchCommand.setStatus('current')
physicalPortOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 71), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpuPayloadType.setStatus('current')
physicalPortReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 72), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReach.setStatus('current')
physicalPortSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 73), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSonetLine.setStatus('current')
physicalPortSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSdhMs.setStatus('current')
physicalPortSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOtu.setStatus('current')
physicalPortSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOdu.setStatus('current')
physicalPortSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 77), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThreshold.setStatus('current')
physicalPortSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 78), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPcslThreshold.setStatus('current')
physicalPortSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 79), FspR7BERThresholdSection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSonetSection.setStatus('current')
physicalPortSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 80), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSdhSection.setStatus('current')
physicalPortSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmA.setStatus('current')
physicalPortSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmB.setStatus('current')
physicalPortSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmC.setStatus('current')
physicalPortSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSignalDegradePeriod.setStatus('current')
physicalPortSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 85), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOdu.setStatus('current')
physicalPortSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 86), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOtu.setStatus('current')
physicalPortSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodIntegration.setStatus('current')
physicalPortSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 88), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodSdhSection.setStatus('current')
physicalPortSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 89), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmA.setStatus('current')
physicalPortSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 90), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmB.setStatus('current')
physicalPortSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmC.setStatus('current')
physicalPortOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 92), FspR7Stuff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOtnStuffing.setStatus('current')
physicalPortTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 93), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmALevel.setStatus('current')
physicalPortTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 94), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmBLevel.setStatus('current')
physicalPortTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 95), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmCLevel.setStatus('current')
physicalPortTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 96), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTerminationLevel.setStatus('current')
physicalPortTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 97), SonetTimingSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimingSource.setStatus('current')
physicalPortTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 98), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOdu.setStatus('current')
physicalPortTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 99), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOtu.setStatus('current')
physicalPortTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 100), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeSonetSection.setStatus('current')
physicalPortTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 101), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmA.setStatus('current')
physicalPortTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 102), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmB.setStatus('current')
physicalPortTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 103), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmC.setStatus('current')
physicalPortTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 104), SonetTraceForm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceFormSonetSection.setStatus('current')
physicalPortTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 105), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedSonetSection.setStatus('current')
physicalPortTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 106), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSonetSection.setStatus('current')
physicalPortTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 107), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOtu.setStatus('current')
physicalPortTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 108), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOtu.setStatus('current')
physicalPortTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 109), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOtu.setStatus('current')
physicalPortTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 110), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOtu.setStatus('current')
physicalPortTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 111), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOdu.setStatus('current')
physicalPortTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 112), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOdu.setStatus('current')
physicalPortTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 113), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOdu.setStatus('current')
physicalPortTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 114), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOdu.setStatus('current')
physicalPortTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 115), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmA.setStatus('current')
physicalPortTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 116), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmA.setStatus('current')
physicalPortTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 117), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmA.setStatus('current')
physicalPortTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 118), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmA.setStatus('current')
physicalPortTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 119), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmB.setStatus('current')
physicalPortTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 120), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmB.setStatus('current')
physicalPortTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 121), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmB.setStatus('current')
physicalPortTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 122), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmB.setStatus('current')
physicalPortTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 123), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmC.setStatus('current')
physicalPortTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 124), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmC.setStatus('current')
physicalPortTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 125), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmC.setStatus('current')
physicalPortTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 126), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmC.setStatus('current')
physicalPortTraceRcvSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 127), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOdu.setStatus('current')
physicalPortTraceRcvDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 128), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOdu.setStatus('current')
physicalPortTraceRcvOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 129), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOdu.setStatus('current')
physicalPortTraceRcvSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 130), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOtu.setStatus('current')
physicalPortTraceRcvDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 131), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOtu.setStatus('current')
physicalPortTraceRcvOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 132), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOtu.setStatus('current')
physicalPortTraceRcvSapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 133), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcma.setStatus('current')
physicalPortTraceRcvDapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 134), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcma.setStatus('current')
physicalPortTraceRcvOpspTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 135), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcma.setStatus('current')
physicalPortTraceRcvSapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 136), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmb.setStatus('current')
physicalPortTraceRcvDapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 137), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmb.setStatus('current')
physicalPortTraceRcvOpspTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 138), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmb.setStatus('current')
physicalPortTraceRcvSapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 139), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmc.setStatus('current')
physicalPortTraceRcvDapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 140), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmc.setStatus('current')
physicalPortTraceRcvOpspTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 141), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmc.setStatus('current')
physicalPortTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 142), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceReceived.setStatus('current')
physicalPortTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 143), FspR7TurnupConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTurnupConfig.setStatus('current')
physicalPortTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 144), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffDelay.setStatus('current')
physicalPortVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 145), FspR7VoaMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVoaMode.setStatus('current')
physicalPortVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 146), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVoaSetpoint.setStatus('current')
physicalPortCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 147), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26214400))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCbsRcv.setStatus('current')
physicalPortCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 148), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25600))).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCbsTrmt.setStatus('current')
physicalPortCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 149), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCirRcv.setStatus('current')
physicalPortCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 150), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCirTrmt.setStatus('current')
physicalPortLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 151), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLagPrio.setStatus('current')
physicalPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 152), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortMacAddress.setStatus('current')
physicalPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 153), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortMaxFrameSize.setStatus('current')
physicalPortPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 154), OtnPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPayload.setStatus('current')
physicalPortPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 155), FspR7PortMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPortMode.setStatus('current')
physicalPortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 156), FspR7PortRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPortRole.setStatus('current')
physicalPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 157), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPriority.setStatus('current')
physicalPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 158), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPvid.setStatus('current')
physicalPortStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 159), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortStagType.setStatus('current')
physicalPortUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 160), FspR7UntaggedFrames()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortUtag.setStatus('current')
physicalPortVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 161), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVethAid.setStatus('current')
physicalPortChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 162), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelBandwith.setStatus('current')
physicalPortFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 163), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFacilities.setStatus('current')
physicalPortLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 164), FspR7OpticalLanes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLanes.setStatus('current')
physicalPortProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 165), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortProtectionRole.setStatus('current')
physicalPortMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 166), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortMonitoredBitrate.setStatus('current')
physicalPortLagState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 167), FspR7LagState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagState.setStatus('current')
physicalPortLagIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 168), FspR7LagIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagIdFend.setStatus('current')
physicalPortLagFendState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 169), FspR7LagFendState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagFendState.setStatus('current')
physicalPortLagPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 170), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagPortNo.setStatus('current')
physicalPortLagKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 171), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagKey.setStatus('current')
physicalPortValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 172), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortValidSigTimer.setStatus('current')
physicalPortLaserReleaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 173), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserReleaseTimer.setStatus('current')
physicalPortBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 174), FspR7BidirectionalChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBidirectionalChannel.setStatus('current')
physicalPortTransmitterWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 175), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitterWavelength.setStatus('current')
physicalPortTransmitterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 176), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitterFrequency.setStatus('current')
physicalPortRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 177), FspR7RedLinedState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRedLineState.setStatus('current')
physicalPortTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 178), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTunnelAid.setStatus('current')
physicalPortIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 179), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortIngressTid.setStatus('current')
physicalPortIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 180), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortIngressNodeIp.setStatus('current')
physicalPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 181), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRateLimit.setStatus('current')
physicalPortPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 182), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortPathProtection.setStatus('current')
physicalPortGropticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 183), FspR7GropticsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortGropticsType.setStatus('current')
physicalPortAvlntsTxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 184), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAvlntsTxcrs.setStatus('current')
physicalPortAvlntsRxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 185), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAvlntsRxcrs.setStatus('current')
physicalPortTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 186), FspR7TxOffOnTm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffOnTm.setStatus('current')
physicalPortTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 187), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffTimer.setStatus('current')
physicalPortTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 188), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOnTimer.setStatus('current')
physicalPortTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 189), FspR7TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTrafficDirection.setStatus('current')
physicalPortChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 190), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelSpacingProvision.setStatus('current')
virtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2), )
if mibBuilder.loadTexts: virtualPortTable.setStatus('current')
virtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: virtualPortEntry.setStatus('current')
virtualPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRowStatus.setStatus('current')
virtualPortChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 2), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortChannelBand.setStatus('current')
virtualPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortType.setStatus('current')
virtualPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortAlias.setStatus('current')
virtualPortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 5), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFunction.setStatus('current')
virtualPortChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortChannelProv.setStatus('current')
virtualPortLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 7), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLambda.setStatus('current')
virtualPortFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 8), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFrequency.setStatus('current')
virtualPortAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 9), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortAdmin.setStatus('current')
virtualPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 10), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOperState.setStatus('current')
virtualPortConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 11), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortConnState.setStatus('current')
virtualPortEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 12), FspR7EqlzAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortEqlzAdmin.setStatus('current')
virtualPortInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 13), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInitEqlz.setStatus('current')
virtualPortInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortInputPower.setStatus('deprecated')
virtualPortOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 15), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOutputPower.setStatus('deprecated')
virtualPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 16), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortSecondaryStates.setStatus('current')
virtualPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 17), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortRate.setStatus('current')
virtualPortCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 18), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCirRcv.setStatus('current')
virtualPortCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26214400))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCbsRcv.setStatus('current')
virtualPortCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 20), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCirTrmt.setStatus('current')
virtualPortCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25600))).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCbsTrmt.setStatus('current')
virtualPortLagPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 22), FspR7LagPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagPorts.setStatus('current')
virtualPortLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 23), FspR7LagPortType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLagPortType.setStatus('current')
virtualPortLagStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 24), FspR7LagStandby()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagStandby.setStatus('current')
virtualPortLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 25), FspR7LacpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLacpMode.setStatus('current')
virtualPortLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 26), FspR7LacpTimeout()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLacpTimeout.setStatus('current')
virtualPortLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLagActivePorts.setStatus('current')
virtualPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 28), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortMacAddress.setStatus('current')
virtualPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortMaxFrameSize.setStatus('current')
virtualPortPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 30), FspR7PortMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPortMode.setStatus('current')
virtualPortDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 31), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortDataLayerPmReset.setStatus('current')
virtualPortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 32), FspR7PortRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPortRole.setStatus('current')
virtualPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPriority.setStatus('current')
virtualPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPvid.setStatus('current')
virtualPortRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 35), ApsRevertMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRevertiveMode.setStatus('current')
virtualPortStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 36), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortStagType.setStatus('current')
virtualPortUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 37), FspR7UntaggedFrames()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortUtag.setStatus('current')
virtualPortBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 38), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortBundle.setStatus('current')
virtualPortSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 39), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortSwitchCommand.setStatus('current')
virtualPortInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 40), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInhibitSwitchToWork.setStatus('current')
virtualPortInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 41), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInhibitSwitchToProt.setStatus('current')
virtualPortMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 42), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortMonLevel.setStatus('current')
virtualPortOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 43), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOduTribPortNo.setStatus('current')
virtualPortOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 44), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOduTribTimeSlottNo.setStatus('current')
virtualPortSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOdu.setStatus('current')
virtualPortSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOdu.setStatus('current')
virtualPortTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOdu.setStatus('current')
virtualPortTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOdu.setStatus('current')
virtualPortTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOdu.setStatus('current')
virtualPortTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOdu.setStatus('current')
virtualPortTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 51), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOdu.setStatus('current')
virtualPortSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmA.setStatus('current')
virtualPortSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmA.setStatus('current')
virtualPortSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmB.setStatus('current')
virtualPortSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmB.setStatus('current')
virtualPortSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmC.setStatus('current')
virtualPortSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmC.setStatus('current')
virtualPortTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 58), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmALevel.setStatus('current')
virtualPortTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 59), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmBLevel.setStatus('current')
virtualPortTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 60), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmCLevel.setStatus('current')
virtualPortTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmA.setStatus('current')
virtualPortTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmA.setStatus('current')
virtualPortTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmA.setStatus('current')
virtualPortTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmA.setStatus('current')
virtualPortTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 65), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmA.setStatus('current')
virtualPortTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmB.setStatus('current')
virtualPortTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmB.setStatus('current')
virtualPortTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmB.setStatus('current')
virtualPortTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmB.setStatus('current')
virtualPortTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 70), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmB.setStatus('current')
virtualPortTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmC.setStatus('current')
virtualPortTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmC.setStatus('current')
virtualPortTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmC.setStatus('current')
virtualPortTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmC.setStatus('current')
virtualPortTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 75), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmC.setStatus('current')
virtualPortTraceRcvSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiOdu.setStatus('current')
virtualPortTraceRcvDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiOdu.setStatus('current')
virtualPortTraceRcvOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspOdu.setStatus('current')
virtualPortTraceRcvSapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcma.setStatus('current')
virtualPortTraceRcvDapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcma.setStatus('current')
virtualPortTraceRcvOpspTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcma.setStatus('current')
virtualPortTraceRcvSapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmb.setStatus('current')
virtualPortTraceRcvDapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 83), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmb.setStatus('current')
virtualPortTraceRcvOpspTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 84), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmb.setStatus('current')
virtualPortTraceRcvSapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmc.setStatus('current')
virtualPortTraceRcvDapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmc.setStatus('current')
virtualPortTraceRcvOpspTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 87), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmc.setStatus('current')
virtualPortTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 88), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTerminationLevel.setStatus('current')
virtualPortChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 89), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortChannelSpacing.setStatus('current')
virtualPortCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 90), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortCir.setStatus('current')
virtualPortLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 91), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortLoopConfig.setStatus('current')
virtualPortOwnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 92), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOwnerAid.setStatus('current')
virtualPortPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 93), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortPayload.setStatus('current')
virtualPortVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 94), VirtualContainerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortVcType.setStatus('current')
virtualPortOdtuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 95), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOdtuType.setStatus('current')
virtualPortProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 96), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortProtectionRole.setStatus('current')
virtualPortLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 97), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysPrio.setStatus('current')
virtualPortOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 98), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOpuPayloadType.setStatus('current')
virtualPortLagSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 99), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysMac.setStatus('current')
virtualPortLagSysIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 100), FspR7LagSysIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysIdFend.setStatus('current')
virtualPortValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 101), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortValidSigTimer.setStatus('current')
virtualPortOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 102), FspR7Stuff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOtnStuffing.setStatus('current')
virtualPortRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 103), FspR7RedLinedState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRedLineState.setStatus('current')
virtualPortTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 104), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTunnelAid.setStatus('current')
virtualPortIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 105), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortIngressTid.setStatus('current')
virtualPortIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 106), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortIngressNodeIp.setStatus('current')
virtualPortEncapsulationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 107), FspR7EncapsulationMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortEncapsulationMethod.setStatus('current')
virtualPortPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 108), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortPathProtection.setStatus('current')
virtualPortTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 109), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTimeslot.setStatus('current')
virtualPortOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOffsetHigh.setStatus('current')
virtualPortOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOffsetLow.setStatus('current')
virtualPortTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 112), FspR7TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTrafficDirection.setStatus('current')
virtualPortChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 113), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortChannelId.setStatus('current')
endOfFacilityMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityMgmt.setStatus('current')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
linkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkRowStatus.setStatus('current')
linkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkType.setStatus('current')
linkAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAdmin.setStatus('current')
linkAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAlias.setStatus('current')
linkAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAuthString.setStatus('current')
linkConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkConnector.setStatus('current')
linkProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 7), FspR7NoYes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProxyArp.setStatus('current')
linkOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 8), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkOspf.setStatus('current')
linkBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 9), FspR7Baund()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkBaud.setStatus('current')
linkAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 10), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAuthType.setStatus('current')
linkIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 11), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkIpType.setStatus('current')
linkMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkMetric.setStatus('current')
linkAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAreaAid.setStatus('current')
linkEccAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkEccAid.setStatus('current')
linkNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkNearEndIp.setStatus('current')
linkFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFarEndIp.setStatus('current')
linkBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 13702))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkBitrate.setStatus('current')
linkParityBit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 18), FspR7ParityBit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkParityBit.setStatus('current')
linkSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 19), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSecondaryStates.setStatus('current')
linkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 20), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperState.setStatus('current')
linkNendIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNendIpMonitor.setStatus('current')
linkValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkValidSigTimer.setStatus('current')
linkIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 23), FspR7IPv6Type()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkIPv6Type.setStatus('current')
linkNendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 24), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkNendIPv6.setStatus('current')
linkFendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFendIPv6.setStatus('current')
endOfLinkTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLinkTable.setStatus('current')
scTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3), )
if mibBuilder.loadTexts: scTable.setStatus('current')
scEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: scEntry.setStatus('current')
scRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scRowStatus.setStatus('current')
scType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scType.setStatus('current')
scAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAdmin.setStatus('current')
scAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAlias.setStatus('current')
scAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAuthString.setStatus('current')
scConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scConnector.setStatus('current')
scOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 7), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scOspf.setStatus('current')
scAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 8), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAuthType.setStatus('current')
scIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 9), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpType.setStatus('current')
scMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scMetric.setStatus('current')
scAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAreaAid.setStatus('current')
scAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 12), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAlsMode.setStatus('current')
scSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 13), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scSigDegThresReceiver.setStatus('current')
scAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 14), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAutonegotiation.setStatus('current')
scPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 15), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPhysIfBaseType.setStatus('current')
scBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 16), FspR7Bitrate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scBitrate.setStatus('current')
scConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 17), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scConnectionType.setStatus('current')
scChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scChannel.setStatus('current')
scDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 19), EthDuplexMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDuplex.setStatus('current')
scFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndTid.setStatus('current')
scFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 21), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFiberType.setStatus('current')
scTrmtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 22), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrmtFrequency.setStatus('current')
scAttGradientTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setUnits('0.1 dB/min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAttGradientTh.setStatus('current')
scIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpAddr.setStatus('current')
scTrmtWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 25), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrmtWavelength.setStatus('current')
scLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 26), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scLanAid.setStatus('current')
scIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 27), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpMask.setStatus('current')
scDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 28), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDataLayerPmReset.setStatus('current')
scPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scPriority.setStatus('current')
scReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 30), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scReach.setStatus('current')
scSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 31), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSecondaryStates.setStatus('current')
scOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 32), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scOperState.setStatus('current')
scIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpAddrMonitor.setStatus('current')
scMonitoredDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 34), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scMonitoredDuplexMode.setStatus('current')
scMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 35), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: scMonitoredBitrate.setStatus('current')
scIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpMaskMonitor.setStatus('current')
scFarEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 37), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndPort.setStatus('current')
scFendTransportTermPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 38), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFendTransportTermPoint.setStatus('current')
scFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndIp.setStatus('current')
scFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 40), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndSigDegThres.setStatus('current')
scValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: scValidSigTimer.setStatus('current')
scIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 42), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIPv6.setStatus('current')
scIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIPv6PrefixLen.setStatus('current')
scIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 44), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIPv6LinkLocal.setStatus('current')
scIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 45), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpMode.setStatus('current')
scGatewayProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 46), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scGatewayProxyArp.setStatus('current')
endOfScTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfScTable.setStatus('current')
lanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5), )
if mibBuilder.loadTexts: lanTable.setStatus('current')
lanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: lanEntry.setStatus('current')
lanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanRowStatus.setStatus('current')
lanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanType.setStatus('current')
lanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAdmin.setStatus('current')
lanAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAlias.setStatus('current')
lanAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAuthString.setStatus('current')
lanOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 6), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanOspf.setStatus('current')
lanAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 7), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAuthType.setStatus('current')
lanIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 8), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpType.setStatus('current')
lanMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanMetric.setStatus('current')
lanAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAreaAid.setStatus('current')
lanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpAddr.setStatus('current')
lanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpMask.setStatus('current')
lanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanPriority.setStatus('current')
lanLanMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanLanMembers.setStatus('current')
lanSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSecondaryStates.setStatus('current')
lanOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanOperState.setStatus('current')
lanIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpAddrMonitor.setStatus('current')
lanIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpMaskMonitor.setStatus('current')
lanValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanValidSigTimer.setStatus('current')
lanIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 20), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIPv6.setStatus('current')
lanIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIPv6PrefixLen.setStatus('current')
lanIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIPv6LinkLocal.setStatus('current')
lanIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 23), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpMode.setStatus('current')
endOfLanTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLanTable.setStatus('current')
eccTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7), )
if mibBuilder.loadTexts: eccTable.setStatus('current')
eccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: eccEntry.setStatus('current')
eccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccRowStatus.setStatus('current')
eccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccType.setStatus('current')
eccAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccAdmin.setStatus('current')
eccAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccAlias.setStatus('current')
eccConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 5), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccConnectionType.setStatus('current')
eccLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccLanAid.setStatus('current')
eccExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccExternalVid.setStatus('current')
eccpppIpLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccpppIpLinkAid.setStatus('current')
eccMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 9), Unsigned32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: eccMaxDataRate.setStatus('current')
eccProtAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 10), FspR7EocProtAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccProtAvailability.setStatus('current')
eccSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 11), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccSecondaryStates.setStatus('current')
eccConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 12), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccConnState.setStatus('current')
eccOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 13), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccOperState.setStatus('current')
eccValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: eccValidSigTimer.setStatus('current')
endOfEccTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEccTable.setStatus('current')
endOfDcnMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnMgmt.setStatus('current')
opticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1), )
if mibBuilder.loadTexts: opticalMuxTable.setStatus('current')
opticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxEntry.setStatus('current')
opticalMuxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxRowStatus.setStatus('current')
opticalMuxConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnectionType.setStatus('current')
opticalMuxChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 3), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelsNumber.setStatus('current')
opticalMuxPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(115, 138))).setUnits('0.2 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxPumpPower.setStatus('current')
opticalMuxInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 5), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToWork.setStatus('current')
opticalMuxForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 6), FspR7LaserForcedOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxForceLaserOn.setStatus('current')
opticalMuxAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 7), FspR7AseTabOpr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxAseTabCreation.setStatus('current')
opticalMuxTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 8), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitFrequency.setStatus('current')
opticalMuxMultiplexLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 9), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxMultiplexLevel.setStatus('current')
opticalMuxOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOpticalSetPoint.setStatus('current')
opticalMuxInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 11), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInitiateEqualization.setStatus('current')
opticalMuxConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 12), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnectorType.setStatus('current')
opticalMuxFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 13), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFiberType.setStatus('current')
opticalMuxTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 0))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxTilt.setStatus('current')
opticalMuxOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOscOpticalSetpoint.setStatus('current')
opticalMuxOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffset.setStatus('current')
opticalMuxSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 17), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxSwitchCommand.setStatus('current')
opticalMuxTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitChannel.setStatus('current')
opticalMuxBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 19), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxBandProvision.setStatus('current')
opticalMuxAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 20), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAlsMode.setStatus('current')
opticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 21), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxType.setStatus('current')
opticalMuxAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setUnits('0.1 dB/min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAttenuationGradient.setStatus('current')
opticalMuxTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 23), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitWavelength.setStatus('current')
opticalMuxInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 24), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToProt.setStatus('current')
opticalMuxTrmtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 25), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTrmtChannel.setStatus('current')
opticalMuxVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVariableGain.setStatus('current')
opticalMuxSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSumTransmited.setStatus('current')
opticalMuxRcvChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 28), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxRcvChannel.setStatus('current')
opticalMuxAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 29), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAdmin.setStatus('current')
opticalMuxTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 30), FspR7OtdrPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxTimePeriod.setStatus('current')
opticalMuxSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 31), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxSigDegThresReceiver.setStatus('current')
opticalMuxChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 32), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelsProvision.setStatus('current')
opticalMuxAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 33), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAlias.setStatus('current')
opticalMuxChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 34), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelSpacing.setStatus('current')
opticalMuxDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 35), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxDataLayerPmReset.setStatus('current')
opticalMuxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 36), FspR7Gain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxGain.setStatus('current')
opticalMuxSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 37), FspR7SignalDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSignalDirection.setStatus('current')
opticalMuxEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 38), FspR7EdfaOutputPowerRating()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxEdfaPwrOut.setStatus('current')
opticalMuxVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVoaSetpoint.setStatus('current')
opticalMuxFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 40), FspR7FiberBrand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxFiberBrand.setStatus('current')
opticalMuxStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 41), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxStages.setStatus('current')
opticalMuxTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 42), FspR7TiltSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxTiltSet.setStatus('current')
opticalMuxForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 43), FspR7LaserForcedOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxForceFwdAsePilotOn.setStatus('current')
opticalMuxSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 44), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSecondaryStates.setStatus('current')
opticalMuxConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 45), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnState.setStatus('current')
opticalMuxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 46), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxOperState.setStatus('current')
opticalMuxProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 47), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxProtectionRole.setStatus('current')
opticalMuxFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 48), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFarEndSigDegThres.setStatus('current')
opticalMuxMaxRamanGainMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 49), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxMaxRamanGainMon.setStatus('current')
opticalMuxValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxValidSigTimer.setStatus('current')
opticalMuxGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 51), FspR7GainRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxGainRange.setStatus('current')
opticalMuxPpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-220, 80))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxPpc.setStatus('current')
opticalMuxOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffsetHigh.setStatus('current')
opticalMuxOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffsetLow.setStatus('current')
opticalMuxOptUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 55), FspR7OptUpdate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxOptUpdate.setStatus('current')
endOfOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxTable.setStatus('current')
endOfOpticalMuxMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxMgmt.setStatus('current')
shelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1), )
if mibBuilder.loadTexts: shelfConnTable.setStatus('current')
shelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: shelfConnEntry.setStatus('current')
shelfConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnRowStatus.setStatus('current')
shelfConnConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnConnectionType.setStatus('current')
shelfConnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 3), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnConnector.setStatus('current')
shelfConnFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 4), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnFiber.setStatus('current')
shelfConnReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnReach.setStatus('current')
shelfConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 6), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnRate.setStatus('current')
shelfConnAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 7), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAdmin.setStatus('current')
shelfConnAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAlias.setStatus('current')
shelfConnTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnTransmitChannel.setStatus('current')
shelfConnFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 10), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnFacilityType.setStatus('current')
shelfConnSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 11), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnSecondaryStates.setStatus('current')
shelfConnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnOperState.setStatus('current')
shelfConnValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnValidSigTimer.setStatus('current')
endOfShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnTable.setStatus('current')
endOfShelfConnMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnMgmt.setStatus('current')
envPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1), )
if mibBuilder.loadTexts: envPortTable.setStatus('current')
envPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: envPortEntry.setStatus('current')
envPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortRowStatus.setStatus('current')
envPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 2), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortConnectorType.setStatus('current')
envPortTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 3), FspR7TelemetryOutput()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTelemetry.setStatus('current')
envPortFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortFacilityType.setStatus('current')
envPortTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTifAlarmType.setStatus('current')
envPortTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTifAlarmMessage.setStatus('current')
envPortInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 7), FspR7InvertTelemetryInputLogic()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortInvertTifInputLogic.setStatus('current')
endOfEnvPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvPortTable.setStatus('current')
endOfEnvMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvMgmt.setStatus('current')
containerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1), )
if mibBuilder.loadTexts: containerTable.setStatus('current')
containerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: containerEntry.setStatus('current')
containerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: containerRowStatus.setStatus('current')
containerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerAdmin.setStatus('current')
containerSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSequenceNumber.setStatus('current')
containerFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: containerFacilityType.setStatus('current')
containerContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerContainer.setStatus('current')
containerVSContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVSContainer.setStatus('current')
containerSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 7), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSecondaryStates.setStatus('current')
containerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOperState.setStatus('current')
endOfContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerTable.setStatus('current')
endOfContainerMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerMgmt.setStatus('current')
opticalLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1), )
if mibBuilder.loadTexts: opticalLineTable.setStatus('current')
opticalLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: opticalLineEntry.setStatus('current')
opticalLineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineRowStatus.setStatus('current')
opticalLineTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineTxLineAttenuation.setStatus('current')
opticalLineRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineRxLineAttenuation.setStatus('current')
opticalLineAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineAlias.setStatus('current')
opticalLineFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineFarEndLocation.setStatus('current')
opticalLineLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel1.setStatus('current')
opticalLineLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 7), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel2.setStatus('current')
opticalLineLaneChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 8), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel3.setStatus('current')
opticalLineLaneChannel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel4.setStatus('current')
opticalLineLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 10), FspR7OpticalLanes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLanes.setStatus('current')
opticalLineChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 11), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineChannelBandwith.setStatus('current')
opticalLineChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 12), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineChannelSpacing.setStatus('current')
opticalLineFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineFacilities.setStatus('current')
opticalLineSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 14), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineSecondaryStates.setStatus('current')
opticalLineConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 15), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineConnState.setStatus('current')
opticalLineLogicalInterfaceAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLogicalInterfaceAid.setStatus('current')
opticalLineOwnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineOwnerAid.setStatus('current')
opticalLineTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 18), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitWavelength.setStatus('current')
opticalLineTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 19), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitFrequency.setStatus('current')
opticalLineTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 20), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitChannel.setStatus('current')
endOfOpticalLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineTable.setStatus('current')
endOfOpticalLineMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineMgmt.setStatus('current')
serviceAffecting = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1000), ServiceAffecting()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: serviceAffecting.setStatus('current')
alarmSysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1), )
if mibBuilder.loadTexts: alarmSysTable.setStatus('current')
alarmSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"), (0, "ADVA-FSPR7-MIB", "alarmSysType"))
if mibBuilder.loadTexts: alarmSysEntry.setStatus('current')
alarmSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSysType.setStatus('current')
alarmSysSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysSeverity.setStatus('current')
alarmSysAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysAffect.setStatus('current')
alarmSysTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysTimeStamp.setStatus('current')
endOfAlarmSysTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSysTable.setStatus('current')
alarmSeveritySysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3), )
if mibBuilder.loadTexts: alarmSeveritySysTable.setStatus('current')
alarmSeveritySysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeveritySysType"))
if mibBuilder.loadTexts: alarmSeveritySysEntry.setStatus('current')
alarmSeveritySysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeveritySysType.setStatus('current')
alarmSeveritySysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeveritySysValue.setStatus('current')
endOfAlarmSeveritySysTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeveritySysTable.setStatus('current')
alarmEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5), )
if mibBuilder.loadTexts: alarmEqptTable.setStatus('current')
alarmEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"), (0, "ADVA-FSPR7-MIB", "alarmEqptType"))
if mibBuilder.loadTexts: alarmEqptEntry.setStatus('current')
alarmEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmEqptType.setStatus('current')
alarmEqptSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptSeverity.setStatus('current')
alarmEqptAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptAffect.setStatus('current')
alarmEqptTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptTimeStamp.setStatus('current')
endOfAlarmEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmEqptTable.setStatus('current')
alarmFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7), )
if mibBuilder.loadTexts: alarmFacilityTable.setStatus('current')
alarmFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "alarmFacilityType"))
if mibBuilder.loadTexts: alarmFacilityEntry.setStatus('current')
alarmFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmFacilityType.setStatus('current')
alarmFacilitySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilitySeverity.setStatus('current')
alarmFacilityAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilityAffect.setStatus('current')
alarmFacilityTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilityTimeStamp.setStatus('current')
alarmSeverityFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8), )
if mibBuilder.loadTexts: alarmSeverityFacilityTable.setStatus('current')
alarmSeverityFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityFacilityType"))
if mibBuilder.loadTexts: alarmSeverityFacilityEntry.setStatus('current')
alarmSeverityFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityFacilityType.setStatus('current')
alarmSeverityFacilityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityFacilityValue.setStatus('current')
alarmTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9), )
if mibBuilder.loadTexts: alarmTerminPointTable.setStatus('current')
alarmTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "alarmTerminPointType"))
if mibBuilder.loadTexts: alarmTerminPointEntry.setStatus('current')
alarmTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmTerminPointType.setStatus('current')
alarmTerminPointSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointSeverity.setStatus('current')
alarmTerminPointAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointAffect.setStatus('current')
alarmTerminPointTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointTimeStamp.setStatus('current')
alarmSeverityTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10), )
if mibBuilder.loadTexts: alarmSeverityTerminPointTable.setStatus('current')
alarmSeverityTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityTerminPointType"))
if mibBuilder.loadTexts: alarmSeverityTerminPointEntry.setStatus('current')
alarmSeverityTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityTerminPointType.setStatus('current')
alarmSeverityTerminPointValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityTerminPointValue.setStatus('current')
alarmExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11), )
if mibBuilder.loadTexts: alarmExternalPortTable.setStatus('current')
alarmExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "alarmExternalPortType"))
if mibBuilder.loadTexts: alarmExternalPortEntry.setStatus('current')
alarmExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmExternalPortType.setStatus('current')
alarmExternalPortSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortSeverity.setStatus('current')
alarmExternalPortAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortAffect.setStatus('current')
alarmExternalPortTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortTimeStamp.setStatus('current')
alarmSeverityExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12), )
if mibBuilder.loadTexts: alarmSeverityExternalPortTable.setStatus('current')
alarmSeverityExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityExternalPortType"))
if mibBuilder.loadTexts: alarmSeverityExternalPortEntry.setStatus('current')
alarmSeverityExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityExternalPortType.setStatus('current')
alarmSeverityExternalPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityExternalPortValue.setStatus('current')
endOfAlarmSeverityExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityExternalPortTable.setStatus('current')
alarmSeverityEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14), )
if mibBuilder.loadTexts: alarmSeverityEqptTable.setStatus('current')
alarmSeverityEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityEqptType"))
if mibBuilder.loadTexts: alarmSeverityEqptEntry.setStatus('current')
alarmSeverityEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityEqptType.setStatus('current')
alarmSeverityEqptValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityEqptValue.setStatus('current')
endOfAlarmSeverityEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityEqptTable.setStatus('current')
alarmDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16), )
if mibBuilder.loadTexts: alarmDcnTable.setStatus('current')
alarmDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"), (0, "ADVA-FSPR7-MIB", "alarmDcnType"))
if mibBuilder.loadTexts: alarmDcnEntry.setStatus('current')
alarmDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmDcnType.setStatus('current')
alarmDcnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnSeverity.setStatus('current')
alarmDcnAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnAffect.setStatus('current')
alarmDcnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnTimeStamp.setStatus('current')
endOfAlarmDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmDcnTable.setStatus('current')
alarmSeverityDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18), )
if mibBuilder.loadTexts: alarmSeverityDcnTable.setStatus('current')
alarmSeverityDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityDcnType"))
if mibBuilder.loadTexts: alarmSeverityDcnEntry.setStatus('current')
alarmSeverityDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityDcnType.setStatus('current')
alarmSeverityDcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityDcnValue.setStatus('current')
endOfAlarmSeverityDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityDcnTable.setStatus('current')
alarmEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20), )
if mibBuilder.loadTexts: alarmEnvTable.setStatus('current')
alarmEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"), (0, "ADVA-FSPR7-MIB", "alarmEnvType"))
if mibBuilder.loadTexts: alarmEnvEntry.setStatus('current')
alarmEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmEnvType.setStatus('current')
alarmEnvSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvSeverity.setStatus('current')
alarmEnvAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvAffect.setStatus('current')
alarmEnvTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvTimeStamp.setStatus('current')
endOfAlarmEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmEnvTable.setStatus('current')
alarmSeverityEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22), )
if mibBuilder.loadTexts: alarmSeverityEnvTable.setStatus('current')
alarmSeverityEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityEnvType"))
if mibBuilder.loadTexts: alarmSeverityEnvEntry.setStatus('current')
alarmSeverityEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityEnvType.setStatus('current')
alarmSeverityEnvValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityEnvValue.setStatus('current')
endOfAlarmSeverityEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityEnvTable.setStatus('current')
alarmContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24), )
if mibBuilder.loadTexts: alarmContainerTable.setStatus('current')
alarmContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"), (0, "ADVA-FSPR7-MIB", "alarmContainerType"))
if mibBuilder.loadTexts: alarmContainerEntry.setStatus('current')
alarmContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmContainerType.setStatus('current')
alarmContainerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerSeverity.setStatus('current')
alarmContainerAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerAffect.setStatus('current')
alarmContainerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerTimeStamp.setStatus('current')
endOfAlarmContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmContainerTable.setStatus('current')
alarmSeverityContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26), )
if mibBuilder.loadTexts: alarmSeverityContainerTable.setStatus('current')
alarmSeverityContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityContainerType"))
if mibBuilder.loadTexts: alarmSeverityContainerEntry.setStatus('current')
alarmSeverityContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityContainerType.setStatus('current')
alarmSeverityContainerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityContainerValue.setStatus('current')
endOfAlarmSeverityContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityContainerTable.setStatus('current')
alarmOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28), )
if mibBuilder.loadTexts: alarmOpticalMuxTable.setStatus('current')
alarmOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "alarmOpticalMuxType"))
if mibBuilder.loadTexts: alarmOpticalMuxEntry.setStatus('current')
alarmOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmOpticalMuxType.setStatus('current')
alarmOpticalMuxSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxSeverity.setStatus('current')
alarmOpticalMuxAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxAffect.setStatus('current')
alarmOpticalMuxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxTimeStamp.setStatus('current')
endOfAlarmOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmOpticalMuxTable.setStatus('current')
alarmSeverityOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30), )
if mibBuilder.loadTexts: alarmSeverityOpticalMuxTable.setStatus('current')
alarmSeverityOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityOpticalMuxType"))
if mibBuilder.loadTexts: alarmSeverityOpticalMuxEntry.setStatus('current')
alarmSeverityOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityOpticalMuxType.setStatus('current')
alarmSeverityOpticalMuxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityOpticalMuxValue.setStatus('current')
endOfAlarmSeverityOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityOpticalMuxTable.setStatus('current')
alarmShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32), )
if mibBuilder.loadTexts: alarmShelfConnTable.setStatus('current')
alarmShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "alarmShelfConnType"))
if mibBuilder.loadTexts: alarmShelfConnEntry.setStatus('current')
alarmShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmShelfConnType.setStatus('current')
alarmShelfConnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnSeverity.setStatus('current')
alarmShelfConnAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnAffect.setStatus('current')
alarmShelfConnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnTimeStamp.setStatus('current')
endOfAlarmShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmShelfConnTable.setStatus('current')
alarmSeverityShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34), )
if mibBuilder.loadTexts: alarmSeverityShelfConnTable.setStatus('current')
alarmSeverityShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityShelfConnType"))
if mibBuilder.loadTexts: alarmSeverityShelfConnEntry.setStatus('current')
alarmSeverityShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityShelfConnType.setStatus('current')
alarmSeverityShelfConnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityShelfConnValue.setStatus('current')
endOfAlarmSeverityShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityShelfConnTable.setStatus('current')
alarmProfileSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1), )
if mibBuilder.loadTexts: alarmProfileSeverityTable.setStatus('current')
alarmProfileSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmProfileSeverityAidType"), (0, "ADVA-FSPR7-MIB", "alarmProfileSeverityType"))
if mibBuilder.loadTexts: alarmProfileSeverityEntry.setStatus('current')
alarmProfileSeverityAidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 1), FspR7AidType())
if mibBuilder.loadTexts: alarmProfileSeverityAidType.setStatus('current')
alarmProfileSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 2), FspR7AlarmProfileList())
if mibBuilder.loadTexts: alarmProfileSeverityType.setStatus('current')
alarmProfileSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 3), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmProfileSeverityValue.setStatus('current')
alarmProfileSeverityDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 4), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProfileSeverityDefaultValue.setStatus('current')
endOfAlarmProfileSeverityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmProfileSeverityTable.setStatus('current')
endOfAlarmProfile = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmProfile.setStatus('current')
endOfAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarm.setStatus('current')
fspR7CreationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 1))
if mibBuilder.loadTexts: fspR7CreationTrap.setStatus('current')
fspR7DeletionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 2))
if mibBuilder.loadTexts: fspR7DeletionTrap.setStatus('current')
fspR7StateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 3))
if mibBuilder.loadTexts: fspR7StateChangeTrap.setStatus('current')
fspR7ObjectChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 4))
if mibBuilder.loadTexts: fspR7ObjectChangeTrap.setStatus('current')
alarmTerminalLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 5))
if mibBuilder.loadTexts: alarmTerminalLoopback.setStatus('current')
alarmOosDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 6))
if mibBuilder.loadTexts: alarmOosDisabled.setStatus('current')
alarmOosManagement = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 7))
if mibBuilder.loadTexts: alarmOosManagement.setStatus('current')
alarmOosMaintenance = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 8))
if mibBuilder.loadTexts: alarmOosMaintenance.setStatus('current')
alarmOosAins = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 9))
if mibBuilder.loadTexts: alarmOosAins.setStatus('current')
alarmRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10))
if mibBuilder.loadTexts: alarmRemoved.setStatus('current')
alarmLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 11))
if mibBuilder.loadTexts: alarmLossOfSignal.setStatus('current')
alarmOptInputPwrReceivedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 12))
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooLow.setStatus('current')
alarmOptInputPwrReceivedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 13))
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooHigh.setStatus('current')
alarmLaserTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 14))
if mibBuilder.loadTexts: alarmLaserTemperatureTooHigh.setStatus('current')
alarmLaserTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 15))
if mibBuilder.loadTexts: alarmLaserTemperatureTooLow.setStatus('current')
alarmOptOutputPowerTransTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 16))
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooLow.setStatus('current')
alarmOptOutputPowerTransTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 17))
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooHigh.setStatus('current')
alarmAutoShutdownToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 18))
if mibBuilder.loadTexts: alarmAutoShutdownToHighTemp.setStatus('current')
alarmAutoShutdownToHighTxPwr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 19))
if mibBuilder.loadTexts: alarmAutoShutdownToHighTxPwr.setStatus('current')
alarmLaserEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 20))
if mibBuilder.loadTexts: alarmLaserEndOfLife.setStatus('current')
alarmServerSignalFailureVf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 21))
if mibBuilder.loadTexts: alarmServerSignalFailureVf.setStatus('current')
alarmEqualizationProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 22))
if mibBuilder.loadTexts: alarmEqualizationProgress.setStatus('current')
alarmUPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 23))
if mibBuilder.loadTexts: alarmUPortFailure.setStatus('current')
alarmAutoShutdownBlock = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 24))
if mibBuilder.loadTexts: alarmAutoShutdownBlock.setStatus('current')
alarmAutoPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 25))
if mibBuilder.loadTexts: alarmAutoPowerShutdown.setStatus('current')
alarmConfOutPowerTransTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 26))
if mibBuilder.loadTexts: alarmConfOutPowerTransTooHigh.setStatus('current')
alarmConfOutPowerTransTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 27))
if mibBuilder.loadTexts: alarmConfOutPowerTransTooLow.setStatus('current')
alarmOptSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 28))
if mibBuilder.loadTexts: alarmOptSignalFailure.setStatus('current')
alarmDsbdChannelPowerTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 29))
if mibBuilder.loadTexts: alarmDsbdChannelPowerTooHigh.setStatus('current')
alarmLossOfSignalCPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 30))
if mibBuilder.loadTexts: alarmLossOfSignalCPort.setStatus('current')
alarmLossOfSignalNPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 31))
if mibBuilder.loadTexts: alarmLossOfSignalNPort.setStatus('current')
alarmOutputPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 32))
if mibBuilder.loadTexts: alarmOutputPowerFault.setStatus('current')
alarmEqlzAdjust = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 33))
if mibBuilder.loadTexts: alarmEqlzAdjust.setStatus('current')
alarmAmpFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 34))
if mibBuilder.loadTexts: alarmAmpFailure.setStatus('current')
alarmEqptProvMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 35))
if mibBuilder.loadTexts: alarmEqptProvMismatch.setStatus('current')
alarmBackreflectionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 36))
if mibBuilder.loadTexts: alarmBackreflectionTooHigh.setStatus('current')
transientEqlzStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 37))
if mibBuilder.loadTexts: transientEqlzStart.setStatus('current')
transientEqlzFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 38))
if mibBuilder.loadTexts: transientEqlzFailed.setStatus('current')
transientEqlzCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 39))
if mibBuilder.loadTexts: transientEqlzCompleted.setStatus('current')
transientEqlzRequestDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 40))
if mibBuilder.loadTexts: transientEqlzRequestDenied.setStatus('current')
transientEqlzNotRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 41))
if mibBuilder.loadTexts: transientEqlzNotRequired.setStatus('current')
transientEqlzProcessPassed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 42))
if mibBuilder.loadTexts: transientEqlzProcessPassed.setStatus('current')
transientEqlzProcessWait = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 43))
if mibBuilder.loadTexts: transientEqlzProcessWait.setStatus('current')
transientPmSnapshotStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 44))
if mibBuilder.loadTexts: transientPmSnapshotStarted.setStatus('current')
transientEqlzAuto = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 45))
if mibBuilder.loadTexts: transientEqlzAuto.setStatus('current')
transientEqlzRamanAdjust = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 46))
if mibBuilder.loadTexts: transientEqlzRamanAdjust.setStatus('current')
alarmFiberConnLos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 48))
if mibBuilder.loadTexts: alarmFiberConnLos.setStatus('current')
alarmFiberConnOptFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 49))
if mibBuilder.loadTexts: alarmFiberConnOptFault.setStatus('current')
alarmFiberConnInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 50))
if mibBuilder.loadTexts: alarmFiberConnInvalid.setStatus('current')
alarmFiberConnMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 51))
if mibBuilder.loadTexts: alarmFiberConnMismatch.setStatus('current')
alarmFiberConnCommError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 52))
if mibBuilder.loadTexts: alarmFiberConnCommError.setStatus('current')
alarmFiberConnProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 53))
if mibBuilder.loadTexts: alarmFiberConnProtocolFailure.setStatus('current')
alarmFiberConnDataFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 54))
if mibBuilder.loadTexts: alarmFiberConnDataFailure.setStatus('current')
alarmFiberAttenuationHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 55))
if mibBuilder.loadTexts: alarmFiberAttenuationHigh.setStatus('current')
transientFiberConnStatChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 56))
if mibBuilder.loadTexts: transientFiberConnStatChange.setStatus('current')
alarmLaserBiasCurrAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 57))
if mibBuilder.loadTexts: alarmLaserBiasCurrAbnormal.setStatus('current')
alarmFiberConnInvalidTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 58))
if mibBuilder.loadTexts: alarmFiberConnInvalidTx.setStatus('current')
alarmFiberConnMismatchTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 59))
if mibBuilder.loadTexts: alarmFiberConnMismatchTx.setStatus('current')
alarmFiberAttenuationHighTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 60))
if mibBuilder.loadTexts: alarmFiberAttenuationHighTx.setStatus('current')
alarmLaserFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 61))
if mibBuilder.loadTexts: alarmLaserFailure.setStatus('current')
alarmLossOfReceiverClockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 62))
if mibBuilder.loadTexts: alarmLossOfReceiverClockRecovery.setStatus('current')
alarmFiberAttenuationCond = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 63))
if mibBuilder.loadTexts: alarmFiberAttenuationCond.setStatus('current')
alarmChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 64))
if mibBuilder.loadTexts: alarmChannelMismatch.setStatus('current')
alarmAlarmIndicationSignalLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 65))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLine.setStatus('current')
alarmAlarmIndicationSignalLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 66))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLowerOrderPath.setStatus('current')
alarmAlarmIndicationSignalOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 67))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOdu.setStatus('current')
alarmAlarmIndicationSignalOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 68))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOpu.setStatus('current')
alarmAlarmIndicationSignalOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 69))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOtu.setStatus('current')
alarmAlarmIndicationSignalHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 70))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalHigherOrderPath.setStatus('current')
alarmAlarmIndicationSignalOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 71))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmA.setStatus('current')
alarmAlarmIndicationSignalOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 72))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmB.setStatus('current')
alarmAlarmIndicationSignalOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 73))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmC.setStatus('current')
alarmVirtualChannelAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 74))
if mibBuilder.loadTexts: alarmVirtualChannelAis.setStatus('current')
alarmAmplifierAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 75))
if mibBuilder.loadTexts: alarmAmplifierAbnormal.setStatus('current')
alarmAutomaticPowerReduction = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 76))
if mibBuilder.loadTexts: alarmAutomaticPowerReduction.setStatus('current')
alarmAutomaticPowerReductionForEyeSafety = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 77))
if mibBuilder.loadTexts: alarmAutomaticPowerReductionForEyeSafety.setStatus('current')
transientAlpSettingFinished = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 78))
if mibBuilder.loadTexts: transientAlpSettingFinished.setStatus('current')
transientAlpSettingStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 79))
if mibBuilder.loadTexts: transientAlpSettingStarted.setStatus('current')
alarmApsConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 80))
if mibBuilder.loadTexts: alarmApsConfigMismatch.setStatus('current')
alarmApsProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 81))
if mibBuilder.loadTexts: alarmApsProtocolFailure.setStatus('current')
alarmAseLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 82))
if mibBuilder.loadTexts: alarmAseLow.setStatus('current')
alarmAseTableGenFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 83))
if mibBuilder.loadTexts: alarmAseTableGenFailLow.setStatus('current')
alarmAseTableGenFailHighBackreflection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 84))
if mibBuilder.loadTexts: alarmAseTableGenFailHighBackreflection.setStatus('current')
alarmAseTableGenFailOscMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 85))
if mibBuilder.loadTexts: alarmAseTableGenFailOscMissing.setStatus('current')
alarmAseTableGenFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 86))
if mibBuilder.loadTexts: alarmAseTableGenFailPilot.setStatus('current')
alarmAseTableGenFailSignalinput = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 87))
if mibBuilder.loadTexts: alarmAseTableGenFailSignalinput.setStatus('current')
alarmAseTableNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 88))
if mibBuilder.loadTexts: alarmAseTableNotAvailable.setStatus('current')
alarmAseTableGenProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 89))
if mibBuilder.loadTexts: alarmAseTableGenProgress.setStatus('current')
alarmEncryptionPortAuthPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 90))
if mibBuilder.loadTexts: alarmEncryptionPortAuthPasswdMissing.setStatus('current')
transientCryptoAuthPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 91))
if mibBuilder.loadTexts: transientCryptoAuthPasswdChanged.setStatus('current')
alarmBackwardDefectIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 92))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOdu.setStatus('current')
alarmBackwardDefectIndicationOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 93))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOtu.setStatus('current')
alarmBackwardDefectIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 94))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmA.setStatus('current')
alarmBackwardDefectIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 95))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmB.setStatus('current')
alarmBackwardDefectIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 96))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmC.setStatus('current')
alarmTopologyDataCalculationInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 97))
if mibBuilder.loadTexts: alarmTopologyDataCalculationInProgress.setStatus('current')
transientDispersionCompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 98))
if mibBuilder.loadTexts: transientDispersionCompFailed.setStatus('current')
alarmDispertionTunningCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 99))
if mibBuilder.loadTexts: alarmDispertionTunningCondition.setStatus('current')
alarmLossOfCharSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 100))
if mibBuilder.loadTexts: alarmLossOfCharSync.setStatus('current')
alarmLossOfCharSyncFromFarEnd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 101))
if mibBuilder.loadTexts: alarmLossOfCharSyncFromFarEnd.setStatus('current')
transientCryptoAuthPasswdInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 102))
if mibBuilder.loadTexts: transientCryptoAuthPasswdInvalid.setStatus('current')
alarmEncryptionPortEncryptionSwitchOffEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 103))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchOffEnabled.setStatus('current')
alarmEncryptionModuleCryPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 104))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdMissing.setStatus('current')
transientCryptoPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 105))
if mibBuilder.loadTexts: transientCryptoPasswdChanged.setStatus('current')
transientCryptoRtf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 106))
if mibBuilder.loadTexts: transientCryptoRtf.setStatus('current')
alarmEncryptionModuleSelfTestStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 107))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestStarted.setStatus('current')
alarmEncryptionPortEncryptionSwitchedOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 108))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchedOff.setStatus('current')
alarmOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 109))
if mibBuilder.loadTexts: alarmOpuClientSignalFail.setStatus('current')
alarmDatabaseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 110))
if mibBuilder.loadTexts: alarmDatabaseMismatch.setStatus('current')
alarmDatabaseFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 111))
if mibBuilder.loadTexts: alarmDatabaseFailure.setStatus('current')
alarmDatabaseNcuMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 112))
if mibBuilder.loadTexts: alarmDatabaseNcuMismatch.setStatus('current')
alarmDbReplicationIncompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 113))
if mibBuilder.loadTexts: alarmDbReplicationIncompleted.setStatus('current')
alarmDatabaseVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 114))
if mibBuilder.loadTexts: alarmDatabaseVersionMismatch.setStatus('current')
alarmXfpDecisionThresSetFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 115))
if mibBuilder.loadTexts: alarmXfpDecisionThresSetFailed.setStatus('current')
alarmDuplexLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 116))
if mibBuilder.loadTexts: alarmDuplexLinkFailure.setStatus('current')
transientFarEndDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 117))
if mibBuilder.loadTexts: transientFarEndDyingGasp.setStatus('current')
alarmSingleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 118))
if mibBuilder.loadTexts: alarmSingleFanFailure.setStatus('current')
alarmMultipleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 119))
if mibBuilder.loadTexts: alarmMultipleFanFailure.setStatus('current')
alarmLossOfSignalTransmitter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 120))
if mibBuilder.loadTexts: alarmLossOfSignalTransmitter.setStatus('current')
transientFarEndChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 121))
if mibBuilder.loadTexts: transientFarEndChanged.setStatus('current')
alarmFarEndIpAddressUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 122))
if mibBuilder.loadTexts: alarmFarEndIpAddressUnknown.setStatus('current')
alarmFarEndCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 123))
if mibBuilder.loadTexts: alarmFarEndCommFailure.setStatus('current')
transientTopologyDataInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 124))
if mibBuilder.loadTexts: transientTopologyDataInvalid.setStatus('current')
alarmBackupForcedToHalt = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 125))
if mibBuilder.loadTexts: alarmBackupForcedToHalt.setStatus('current')
transientForcedReboot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 126))
if mibBuilder.loadTexts: transientForcedReboot.setStatus('current')
alarmFacilityForcedOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 127))
if mibBuilder.loadTexts: alarmFacilityForcedOn.setStatus('current')
alarmFwdAseTableFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 128))
if mibBuilder.loadTexts: alarmFwdAseTableFailPilot.setStatus('current')
alarmFwdAseTableOnPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 129))
if mibBuilder.loadTexts: alarmFwdAseTableOnPilot.setStatus('current')
transientCryptoFwpUpdate = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 130))
if mibBuilder.loadTexts: transientCryptoFwpUpdate.setStatus('current')
alarmEncryptionModuleFwpUpdateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 131))
if mibBuilder.loadTexts: alarmEncryptionModuleFwpUpdateEnabled.setStatus('current')
alarmFwpMismatchDownloadNotServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 132))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadNotServiceAffecting.setStatus('current')
alarmFwpMismatchDownloadServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 133))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadServiceAffecting.setStatus('current')
transientCryptoFwpRevChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 134))
if mibBuilder.loadTexts: transientCryptoFwpRevChanged.setStatus('current')
alarmGainTiltNotSettable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 135))
if mibBuilder.loadTexts: alarmGainTiltNotSettable.setStatus('current')
alarmHighBer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 136))
if mibBuilder.loadTexts: alarmHighBer.setStatus('current')
alarmReceiverOverloadProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 137))
if mibBuilder.loadTexts: alarmReceiverOverloadProtection.setStatus('current')
alarmHwInitializing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 138))
if mibBuilder.loadTexts: alarmHwInitializing.setStatus('current')
alarmHwOprReachedHT = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 139))
if mibBuilder.loadTexts: alarmHwOprReachedHT.setStatus('current')
alarmHwDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 140))
if mibBuilder.loadTexts: alarmHwDegrade.setStatus('current')
alarmHwFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 141))
if mibBuilder.loadTexts: alarmHwFailure.setStatus('current')
alarmSwitchtoProtectionInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 142))
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibited.setStatus('current')
alarmSwitchtoWorkingInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 143))
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibited.setStatus('current')
transientIntrusionRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 144))
if mibBuilder.loadTexts: transientIntrusionRx.setStatus('current')
transientIntrusionTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 145))
if mibBuilder.loadTexts: transientIntrusionTx.setStatus('current')
transientEncryptionPortSingleKeyExchgFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 146))
if mibBuilder.loadTexts: transientEncryptionPortSingleKeyExchgFailed.setStatus('current')
transientCryptoKeyExchgFailCondClr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 147))
if mibBuilder.loadTexts: transientCryptoKeyExchgFailCondClr.setStatus('current')
alarmEncryptionPortKeyInitExchgMissed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 148))
if mibBuilder.loadTexts: alarmEncryptionPortKeyInitExchgMissed.setStatus('current')
alarmEncryptionPortMaxKeyExchgFailuresReachedIs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 149))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedIs.setStatus('current')
alarmEncryptionPortMaxKeyExchgFailuresReachedOos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 150))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedOos.setStatus('current')
alarmEncryptionPortKeyExchangedForced = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 151))
if mibBuilder.loadTexts: alarmEncryptionPortKeyExchangedForced.setStatus('current')
alarmLaserOnDelay = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 152))
if mibBuilder.loadTexts: alarmLaserOnDelay.setStatus('current')
alarmLockedDefectOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 153))
if mibBuilder.loadTexts: alarmLockedDefectOdu.setStatus('current')
alarmLockedDefectOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 154))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmA.setStatus('current')
alarmLockedDefectOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 155))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmB.setStatus('current')
alarmLockedDefectOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 156))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmC.setStatus('current')
alarmLinkControlProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 157))
if mibBuilder.loadTexts: alarmLinkControlProtocolFailure.setStatus('current')
alarmLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 158))
if mibBuilder.loadTexts: alarmLinkDown.setStatus('current')
alarmAutoShutdownSendingAisLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 159))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisLine.setStatus('current')
alarmAutoShutdownSendingAisOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 160))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOdu.setStatus('current')
alarmAutoShutdownSendingAisOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 161))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOpu.setStatus('current')
alarmClientFailForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 162))
if mibBuilder.loadTexts: alarmClientFailForwarding.setStatus('current')
alarmAutoShutdownAls = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 163))
if mibBuilder.loadTexts: alarmAutoShutdownAls.setStatus('current')
alarmAutoAmpShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 164))
if mibBuilder.loadTexts: alarmAutoAmpShutdown.setStatus('current')
alarmAutoShutdownAmpAps = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 165))
if mibBuilder.loadTexts: alarmAutoShutdownAmpAps.setStatus('current')
alarmAseTableBuild = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 166))
if mibBuilder.loadTexts: alarmAseTableBuild.setStatus('current')
alarmAutoShutdownOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 167))
if mibBuilder.loadTexts: alarmAutoShutdownOpuClientSignalFail.setStatus('current')
alarmAutoShutdownSendingEPC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 168))
if mibBuilder.loadTexts: alarmAutoShutdownSendingEPC.setStatus('current')
alarmAutoShutdownSendingLckOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 169))
if mibBuilder.loadTexts: alarmAutoShutdownSendingLckOdu.setStatus('current')
alarmAutoShutdownSendingOciOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 170))
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOdu.setStatus('current')
alarmAutoShutdownLaserOffDueToErrFwd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 171))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToErrFwd.setStatus('current')
alarmAutoShutdownTxRxLasersDueToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 172))
if mibBuilder.loadTexts: alarmAutoShutdownTxRxLasersDueToHighTemp.setStatus('current')
alarmLocalFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 173))
if mibBuilder.loadTexts: alarmLocalFault.setStatus('current')
alarmLocalOscLevelAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 174))
if mibBuilder.loadTexts: alarmLocalOscLevelAbnormal.setStatus('current')
alarmLossOfGfpFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 175))
if mibBuilder.loadTexts: alarmLossOfGfpFrame.setStatus('current')
alarmLossOfFrameMux = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 176))
if mibBuilder.loadTexts: alarmLossOfFrameMux.setStatus('current')
alarmLossOfFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 177))
if mibBuilder.loadTexts: alarmLossOfFrameOtu.setStatus('current')
alarmLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 178))
if mibBuilder.loadTexts: alarmLossOfFrame.setStatus('current')
alarmLossOfFrameLossOfMultiFrameOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 179))
if mibBuilder.loadTexts: alarmLossOfFrameLossOfMultiFrameOdu.setStatus('current')
alarmLossOfLane = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 180))
if mibBuilder.loadTexts: alarmLossOfLane.setStatus('current')
alarmLossofMultiframeLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 181))
if mibBuilder.loadTexts: alarmLossofMultiframeLowerOrderPath.setStatus('current')
alarmLossOfMultiFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 182))
if mibBuilder.loadTexts: alarmLossOfMultiFrameOtu.setStatus('current')
alarmLossofMultiframeHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 183))
if mibBuilder.loadTexts: alarmLossofMultiframeHigherOrderPath.setStatus('current')
alarmLossOfPointerLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 184))
if mibBuilder.loadTexts: alarmLossOfPointerLowerOrderPath.setStatus('current')
alarmLossOfPointerHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 185))
if mibBuilder.loadTexts: alarmLossOfPointerHigherOrderPath.setStatus('current')
alarmLosAttProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 186))
if mibBuilder.loadTexts: alarmLosAttProgress.setStatus('current')
alarmLossOsc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 187))
if mibBuilder.loadTexts: alarmLossOsc.setStatus('current')
alarmGfpLossOfClientSig = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 188))
if mibBuilder.loadTexts: alarmGfpLossOfClientSig.setStatus('current')
alarmLoopbackError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 189))
if mibBuilder.loadTexts: alarmLoopbackError.setStatus('current')
alarmFacilityLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 190))
if mibBuilder.loadTexts: alarmFacilityLoopback.setStatus('current')
alarmLossofTandemConnectionOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 191))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmA.setStatus('current')
alarmLossofTandemConnectionOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 192))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmB.setStatus('current')
alarmLossofTandemConnectionOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 193))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmC.setStatus('current')
alarmMansw = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 194))
if mibBuilder.loadTexts: alarmMansw.setStatus('current')
transientManualWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 195))
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorking.setStatus('current')
transientManualWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 196))
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtection.setStatus('current')
alarmEquipmentNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 197))
if mibBuilder.loadTexts: alarmEquipmentNotAccepted.setStatus('current')
alarmEquipmentNotApproved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 198))
if mibBuilder.loadTexts: alarmEquipmentNotApproved.setStatus('current')
alarmCapabilityLevelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 199))
if mibBuilder.loadTexts: alarmCapabilityLevelMismatch.setStatus('current')
alarmEquipmentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 200))
if mibBuilder.loadTexts: alarmEquipmentMismatch.setStatus('current')
alarmEquipmentNotSupportedByPhysicalLayer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 201))
if mibBuilder.loadTexts: alarmEquipmentNotSupportedByPhysicalLayer.setStatus('current')
alarmMeaSwRevision = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 202))
if mibBuilder.loadTexts: alarmMeaSwRevision.setStatus('current')
alarmMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 203))
if mibBuilder.loadTexts: alarmMismatch.setStatus('current')
alarmMidstageFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 204))
if mibBuilder.loadTexts: alarmMidstageFault.setStatus('current')
alarmMultiplexStructureIdentifierMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 205))
if mibBuilder.loadTexts: alarmMultiplexStructureIdentifierMismatchOPU.setStatus('current')
alarmBackupNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 206))
if mibBuilder.loadTexts: alarmBackupNotResponding.setStatus('current')
alarmOpenConnectionIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 207))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOdu.setStatus('current')
alarmOpenConnectionIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 208))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmA.setStatus('current')
alarmOpenConnectionIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 209))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmB.setStatus('current')
alarmOpenConnectionIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 210))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmC.setStatus('current')
alarmOduTribMsiMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 211))
if mibBuilder.loadTexts: alarmOduTribMsiMismatch.setStatus('current')
alarmTransmitterDisabledOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 212))
if mibBuilder.loadTexts: alarmTransmitterDisabledOff.setStatus('current')
alarmReceiverDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 213))
if mibBuilder.loadTexts: alarmReceiverDisabled.setStatus('current')
alarmOpmAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 214))
if mibBuilder.loadTexts: alarmOpmAbnormalCondition.setStatus('current')
alarmFaultOnOpm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 215))
if mibBuilder.loadTexts: alarmFaultOnOpm.setStatus('current')
alarmThresOptPowerCtrlFailureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 216))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureHigh.setStatus('current')
alarmThresOptPowerCtrlFailureLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 217))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureLow.setStatus('current')
alarmTxPowerLimited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 218))
if mibBuilder.loadTexts: alarmTxPowerLimited.setStatus('current')
alarmOscOpticalPowerControlFailHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 219))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailHigh.setStatus('current')
alarmOscOpticalPowerControlFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 220))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailLow.setStatus('current')
alarmOTDRMeasuringinProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 221))
if mibBuilder.loadTexts: alarmOTDRMeasuringinProgress.setStatus('current')
alarmEncryptionModuleCryPasswdError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 222))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdError.setStatus('current')
alarmPeerLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 223))
if mibBuilder.loadTexts: alarmPeerLink.setStatus('current')
alarmPilotReceiveLevelHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 224))
if mibBuilder.loadTexts: alarmPilotReceiveLevelHigh.setStatus('current')
alarmLossOfPilotSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 225))
if mibBuilder.loadTexts: alarmLossOfPilotSignal.setStatus('current')
alarmPayloadMismatchGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 226))
if mibBuilder.loadTexts: alarmPayloadMismatchGfp.setStatus('current')
alarmPayloadMismatchLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 227))
if mibBuilder.loadTexts: alarmPayloadMismatchLowerOrderPath.setStatus('current')
alarmPayloadMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 228))
if mibBuilder.loadTexts: alarmPayloadMismatchOPU.setStatus('current')
alarmPayloadMismatchHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 229))
if mibBuilder.loadTexts: alarmPayloadMismatchHigherOrderPath.setStatus('current')
alarmProvPayloadMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 230))
if mibBuilder.loadTexts: alarmProvPayloadMismatch.setStatus('current')
alarmPrbsLossOfSeqSynch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 231))
if mibBuilder.loadTexts: alarmPrbsLossOfSeqSynch.setStatus('current')
alarmPrbsRcvActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 232))
if mibBuilder.loadTexts: alarmPrbsRcvActivated.setStatus('current')
alarmPrbsTrmtActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 233))
if mibBuilder.loadTexts: alarmPrbsTrmtActivated.setStatus('current')
alarmProtectionNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 234))
if mibBuilder.loadTexts: alarmProtectionNotAvailable.setStatus('current')
alarmPowerSupplyUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 235))
if mibBuilder.loadTexts: alarmPowerSupplyUnitFailure.setStatus('current')
alarmMaxPowerConsProvModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 236))
if mibBuilder.loadTexts: alarmMaxPowerConsProvModulesToHigh.setStatus('current')
alarmMaxPowerConsEquipModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 237))
if mibBuilder.loadTexts: alarmMaxPowerConsEquipModulesToHigh.setStatus('current')
alarmPowerMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 238))
if mibBuilder.loadTexts: alarmPowerMissing.setStatus('current')
alarmRemoteDefectIndicationLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 239))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLine.setStatus('current')
alarmRemoteDefectIndicationLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 240))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLowerOrderPath.setStatus('current')
alarmRemoteDefectIndicationHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 241))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationHigherOrderPath.setStatus('current')
transientPmSnapshotEnded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 242))
if mibBuilder.loadTexts: transientPmSnapshotEnded.setStatus('current')
alarmDcnCommunicationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 243))
if mibBuilder.loadTexts: alarmDcnCommunicationFail.setStatus('current')
alarmNtpForSchedEqlzRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 244))
if mibBuilder.loadTexts: alarmNtpForSchedEqlzRequired.setStatus('current')
alarmSignalDegradeOlm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 245))
if mibBuilder.loadTexts: alarmSignalDegradeOlm.setStatus('current')
alarmSignalDegradeLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 246))
if mibBuilder.loadTexts: alarmSignalDegradeLine.setStatus('current')
alarmSignalDegradationonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 247))
if mibBuilder.loadTexts: alarmSignalDegradationonLinkVector.setStatus('current')
alarmSignalDegradeOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 248))
if mibBuilder.loadTexts: alarmSignalDegradeOdu.setStatus('current')
alarmSignalDegradeOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 249))
if mibBuilder.loadTexts: alarmSignalDegradeOtu.setStatus('current')
alarmPcsSignalDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 250))
if mibBuilder.loadTexts: alarmPcsSignalDegrade.setStatus('current')
alarmSignalDegradeScn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 251))
if mibBuilder.loadTexts: alarmSignalDegradeScn.setStatus('current')
alarmSignalDegradeOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 252))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmA.setStatus('current')
alarmSignalDegradeOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 253))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmB.setStatus('current')
alarmSignalDegradeOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 254))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmC.setStatus('current')
alarmEncryptionModuleSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 255))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFail.setStatus('current')
alarmEncryptionModuleSelfTestFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 256))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFailCritical.setStatus('current')
alarmSignalFailureOnLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 257))
if mibBuilder.loadTexts: alarmSignalFailureOnLink.setStatus('current')
alarmSignalFailureonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 258))
if mibBuilder.loadTexts: alarmSignalFailureonLinkVector.setStatus('current')
alarmSignalFailureOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 259))
if mibBuilder.loadTexts: alarmSignalFailureOPU.setStatus('current')
alarmServerSignalFailTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 260))
if mibBuilder.loadTexts: alarmServerSignalFailTx.setStatus('current')
alarmFacilityDataRateNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 261))
if mibBuilder.loadTexts: alarmFacilityDataRateNotSupported.setStatus('current')
transientCryptoSessKeyLifetimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 262))
if mibBuilder.loadTexts: transientCryptoSessKeyLifetimeChanged.setStatus('current')
alarmLossofSequenceLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 263))
if mibBuilder.loadTexts: alarmLossofSequenceLowerOrderPath.setStatus('current')
alarmLossofSequenceHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 264))
if mibBuilder.loadTexts: alarmLossofSequenceHigherOrderPath.setStatus('current')
alarmServerSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 265))
if mibBuilder.loadTexts: alarmServerSignalFail.setStatus('current')
alarmServerSignalFailureGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 266))
if mibBuilder.loadTexts: alarmServerSignalFailureGfp.setStatus('current')
alarmServerSignalFailureODU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 267))
if mibBuilder.loadTexts: alarmServerSignalFailureODU.setStatus('current')
alarmServerSignalFailurePath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 268))
if mibBuilder.loadTexts: alarmServerSignalFailurePath.setStatus('current')
alarmServerSignalFailureSectionRS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 269))
if mibBuilder.loadTexts: alarmServerSignalFailureSectionRS.setStatus('current')
transientProtSwToDuplexCompl = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 270))
if mibBuilder.loadTexts: transientProtSwToDuplexCompl.setStatus('current')
transientProtSwToDuplexFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 271))
if mibBuilder.loadTexts: transientProtSwToDuplexFail.setStatus('current')
alarmSwitchToDuplexInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 272))
if mibBuilder.loadTexts: alarmSwitchToDuplexInhibited.setStatus('current')
transientProtSwToDuplexStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 273))
if mibBuilder.loadTexts: transientProtSwToDuplexStart.setStatus('current')
alarmSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 274))
if mibBuilder.loadTexts: alarmSwitchFailed.setStatus('current')
transientSwResetReload = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 275))
if mibBuilder.loadTexts: transientSwResetReload.setStatus('current')
alarmCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 276))
if mibBuilder.loadTexts: alarmCurrentTooHigh.setStatus('current')
alarmAttOnReceiverFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 277))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberHigherThanMonitor.setStatus('current')
alarmAttOnReceiverFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 278))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberLowerThanMonitor.setStatus('current')
alarmAttOnTransmitterFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 279))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberHigherThanMonitor.setStatus('current')
alarmAttOnTransmitterFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 280))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberLowerThanMonitor.setStatus('current')
alarmThres15MinExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 281))
if mibBuilder.loadTexts: alarmThres15MinExceededOduBbe.setStatus('current')
transientThres1DayExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 282))
if mibBuilder.loadTexts: transientThres1DayExceededOduBbe.setStatus('current')
alarmThres15MinExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 283))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuBbe.setStatus('current')
transientThres1DayExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 284))
if mibBuilder.loadTexts: transientThres1DayExceededOtuBbe.setStatus('current')
alarmThres15MinExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 285))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmABbe.setStatus('current')
transientThres1DayExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 286))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmABbe.setStatus('current')
alarmThres15MinExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 287))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBBbe.setStatus('current')
transientThres1DayExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 288))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBBbe.setStatus('current')
alarmThres15MinExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 289))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCBbe.setStatus('current')
transientThres1DayExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 290))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCBbe.setStatus('current')
alarmThres15MinExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 291))
if mibBuilder.loadTexts: alarmThres15MinExceededFecBERCE.setStatus('current')
transientThres1DayExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 292))
if mibBuilder.loadTexts: transientThres1DayExceededFecBERCE.setStatus('current')
alarmBrPwrRxTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 293))
if mibBuilder.loadTexts: alarmBrPwrRxTooHigh.setStatus('current')
alarmChromaticDispersionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 294))
if mibBuilder.loadTexts: alarmChromaticDispersionTooHigh.setStatus('current')
alarmChromaticDispersionTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 295))
if mibBuilder.loadTexts: alarmChromaticDispersionTooLow.setStatus('current')
alarmDispersionCompensationTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 296))
if mibBuilder.loadTexts: alarmDispersionCompensationTooHigh.setStatus('current')
alarmDispersionCompensationTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 297))
if mibBuilder.loadTexts: alarmDispersionCompensationTooLow.setStatus('current')
alarmThres15MinExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 298))
if mibBuilder.loadTexts: alarmThres15MinExceededFecCE.setStatus('current')
transientThres1DayExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 299))
if mibBuilder.loadTexts: transientThres1DayExceededFecCE.setStatus('current')
alarmCarrierFreqOffsetTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 300))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooHigh.setStatus('current')
alarmCarrierFreqOffsetTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 301))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooLow.setStatus('current')
alarmThres15MinExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 302))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineCV.setStatus('current')
transientThres1DayExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 303))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineCV.setStatus('current')
alarmThres15MinExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 304))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCV.setStatus('current')
transientThres1DayExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 305))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCV.setStatus('current')
alarmThres15MinExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 306))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectCV.setStatus('current')
transientThres1DayExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 307))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectCV.setStatus('current')
alarmThres15MinExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 308))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvDE.setStatus('current')
transientThres1DayExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 309))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvDE.setStatus('current')
alarmDifferentialGroupDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 310))
if mibBuilder.loadTexts: alarmDifferentialGroupDelayTooHigh.setStatus('current')
alarmThres15MinExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 311))
if mibBuilder.loadTexts: alarmThres15MinExceededFecES.setStatus('current')
transientThres1DayExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 312))
if mibBuilder.loadTexts: transientThres1DayExceededFecES.setStatus('current')
alarmThres15MinExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 313))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineES.setStatus('current')
transientThres1DayExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 314))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineES.setStatus('current')
alarmThres15MinExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 315))
if mibBuilder.loadTexts: alarmThres15MinExceededOduES.setStatus('current')
transientThres1DayExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 316))
if mibBuilder.loadTexts: transientThres1DayExceededOduES.setStatus('current')
alarmThres15MinExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 317))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuES.setStatus('current')
transientThres1DayExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 318))
if mibBuilder.loadTexts: transientThres1DayExceededOtuES.setStatus('current')
alarmThres15MinExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 319))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvES.setStatus('current')
transientThres1DayExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 320))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvES.setStatus('current')
alarmThres15MinExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 321))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectES.setStatus('current')
transientThres1DayExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 322))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectES.setStatus('current')
alarmThres15MinExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 323))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAES.setStatus('current')
transientThres1DayExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 324))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAES.setStatus('current')
alarmThres15MinExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 325))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBES.setStatus('current')
transientThres1DayExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 326))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBES.setStatus('current')
alarmThres15MinExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 327))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCES.setStatus('current')
transientThres1DayExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 328))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCES.setStatus('current')
alarmLatencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 329))
if mibBuilder.loadTexts: alarmLatencyTooHigh.setStatus('current')
alarmLatencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 330))
if mibBuilder.loadTexts: alarmLatencyTooLow.setStatus('current')
alarmLaserBiasCurrentNormalizedtooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 331))
if mibBuilder.loadTexts: alarmLaserBiasCurrentNormalizedtooHigh.setStatus('current')
alarmLocalOscTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 332))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooHigh.setStatus('current')
alarmLocalOscTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 333))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooLow.setStatus('current')
alarmPumpLaser1TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 334))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooHigh.setStatus('current')
alarmPumpLaser1TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 335))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooLow.setStatus('current')
alarmPumpLaser2TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 336))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooHigh.setStatus('current')
alarmPumpLaser2TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 337))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooLow.setStatus('current')
alarmPumpLaser3TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 338))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooHigh.setStatus('current')
alarmPumpLaser3TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 339))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooLow.setStatus('current')
alarmPumpLaser4TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 340))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooHigh.setStatus('current')
alarmPumpLaser4TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 341))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooLow.setStatus('current')
alarmOscPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 342))
if mibBuilder.loadTexts: alarmOscPwrTooHigh.setStatus('current')
alarmOscPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 343))
if mibBuilder.loadTexts: alarmOscPwrTooLow.setStatus('current')
alarmRamanPumpPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 344))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooHigh.setStatus('current')
alarmRamanPumpPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 345))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooLow.setStatus('current')
alarmRoundTripDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 346))
if mibBuilder.loadTexts: alarmRoundTripDelayTooHigh.setStatus('current')
alarmRoundTripDelayTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 347))
if mibBuilder.loadTexts: alarmRoundTripDelayTooLow.setStatus('current')
alarmThres15MinExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 348))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSEFS.setStatus('current')
transientThres1DayExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 349))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSEFS.setStatus('current')
alarmThres15MinExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 350))
if mibBuilder.loadTexts: alarmThres15MinExceededFecSES.setStatus('current')
transientThres1DayExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 351))
if mibBuilder.loadTexts: transientThres1DayExceededFecSES.setStatus('current')
alarmThres15MinExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 352))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineSES.setStatus('current')
transientThres1DayExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 353))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineSES.setStatus('current')
alarmThres15MinExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 354))
if mibBuilder.loadTexts: alarmThres15MinExceededOduSES.setStatus('current')
transientThres1DayExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 355))
if mibBuilder.loadTexts: transientThres1DayExceededOduSES.setStatus('current')
alarmThres15MinExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 356))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuSES.setStatus('current')
transientThres1DayExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 357))
if mibBuilder.loadTexts: transientThres1DayExceededOtuSES.setStatus('current')
alarmThres15MinExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 358))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSES.setStatus('current')
transientThres1DayExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 359))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSES.setStatus('current')
alarmThres15MinExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 360))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmASES.setStatus('current')
transientThres1DayExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 361))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmASES.setStatus('current')
alarmThres15MinExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 362))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBSES.setStatus('current')
transientThres1DayExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 363))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBSES.setStatus('current')
alarmThres15MinExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 364))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCSES.setStatus('current')
transientThres1DayExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 365))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCSES.setStatus('current')
alarmLogicalLanesSkewTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 366))
if mibBuilder.loadTexts: alarmLogicalLanesSkewTooHigh.setStatus('current')
alarmSignalToNoiseRatioTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 367))
if mibBuilder.loadTexts: alarmSignalToNoiseRatioTooLow.setStatus('current')
alarmSubModuleTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 368))
if mibBuilder.loadTexts: alarmSubModuleTempTooHigh.setStatus('current')
alarmTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 369))
if mibBuilder.loadTexts: alarmTemperatureTooHigh.setStatus('current')
alarmTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 370))
if mibBuilder.loadTexts: alarmTemperatureTooLow.setStatus('current')
alarmThres15MinExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 371))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineUAS.setStatus('current')
transientThres1DayExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 372))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineUAS.setStatus('current')
alarmThres15MinExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 373))
if mibBuilder.loadTexts: alarmThres15MinExceededOduUAS.setStatus('current')
transientThres1DayExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 374))
if mibBuilder.loadTexts: transientThres1DayExceededOduUAS.setStatus('current')
alarmThres15MinExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 375))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuUAS.setStatus('current')
transientThres1DayExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 376))
if mibBuilder.loadTexts: transientThres1DayExceededOtuUAS.setStatus('current')
alarmThres15MinExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 377))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAUAS.setStatus('current')
transientThres1DayExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 378))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAUAS.setStatus('current')
alarmThres15MinExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 379))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBUAS.setStatus('current')
transientThres1DayExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 380))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBUAS.setStatus('current')
alarmThres15MinExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 381))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCUAS.setStatus('current')
transientThres1DayExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 382))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCUAS.setStatus('current')
alarmThres15MinExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 383))
if mibBuilder.loadTexts: alarmThres15MinExceededFecUBE.setStatus('current')
transientThres1DayExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 384))
if mibBuilder.loadTexts: transientThres1DayExceededFecUBE.setStatus('current')
alarmEncryptionModuleTamperDetected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 385))
if mibBuilder.loadTexts: alarmEncryptionModuleTamperDetected.setStatus('current')
alarmThermoElectricCoolerEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 386))
if mibBuilder.loadTexts: alarmThermoElectricCoolerEndOfLife.setStatus('current')
alarmInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 387))
if mibBuilder.loadTexts: alarmInputTIF.setStatus('current')
transientHardwareResetInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 388))
if mibBuilder.loadTexts: transientHardwareResetInputTIF.setStatus('current')
alarmTraceIdentifierMismatchOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 389))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOdu.setStatus('current')
alarmTraceIdentifierMismatchOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 390))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOtu.setStatus('current')
alarmSectionTraceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 391))
if mibBuilder.loadTexts: alarmSectionTraceMismatch.setStatus('current')
alarmTraceIdentifierMismatchOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 392))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmA.setStatus('current')
alarmTraceIdentifierMismatchOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 393))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmB.setStatus('current')
alarmTraceIdentifierMismatchOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 394))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmC.setStatus('current')
alarmTurnupFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 395))
if mibBuilder.loadTexts: alarmTurnupFailed.setStatus('current')
alarmTurnupCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 396))
if mibBuilder.loadTexts: alarmTurnupCondition.setStatus('current')
alarmUnequippedLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 397))
if mibBuilder.loadTexts: alarmUnequippedLowerOrderPath.setStatus('current')
alarmUnequippedHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 398))
if mibBuilder.loadTexts: alarmUnequippedHigherOrderPath.setStatus('current')
alarmVoaControlFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 399))
if mibBuilder.loadTexts: alarmVoaControlFail.setStatus('current')
alarmVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 400))
if mibBuilder.loadTexts: alarmVoltageOutOfRange.setStatus('current')
alarmInputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 401))
if mibBuilder.loadTexts: alarmInputVoltageFailure.setStatus('current')
alarmInputVoltageFailurePort1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 402))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort1.setStatus('current')
alarmInputVoltageFailurePort2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 403))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort2.setStatus('current')
transientWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 404))
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorking.setStatus('current')
transientWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 405))
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtection.setStatus('current')
alarmWtrTimerRunning = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 406))
if mibBuilder.loadTexts: alarmWtrTimerRunning.setStatus('current')
alarmLossOfLaneOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 407))
if mibBuilder.loadTexts: alarmLossOfLaneOtu.setStatus('current')
alarmLossOfTestSeqSynchOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 408))
if mibBuilder.loadTexts: alarmLossOfTestSeqSynchOpu.setStatus('current')
alarmLossOfMfiOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 409))
if mibBuilder.loadTexts: alarmLossOfMfiOpu.setStatus('current')
alarmOosDisabledLckOduTrmt = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 410))
if mibBuilder.loadTexts: alarmOosDisabledLckOduTrmt.setStatus('current')
alarmConfigurationMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 411))
if mibBuilder.loadTexts: alarmConfigurationMismatch.setStatus('current')
alarmOduAutoShutdownRxAIS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 412))
if mibBuilder.loadTexts: alarmOduAutoShutdownRxAIS.setStatus('current')
alarmOduAutoShutdownTxAIS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 413))
if mibBuilder.loadTexts: alarmOduAutoShutdownTxAIS.setStatus('current')
alarmOosDisabledLckOduRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 414))
if mibBuilder.loadTexts: alarmOosDisabledLckOduRx.setStatus('current')
transientBootUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 415))
if mibBuilder.loadTexts: transientBootUpFailed.setStatus('current')
transientBootUpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 416))
if mibBuilder.loadTexts: transientBootUpCompleted.setStatus('current')
transientBootUpStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 417))
if mibBuilder.loadTexts: transientBootUpStarted.setStatus('current')
transientInstallFwpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 418))
if mibBuilder.loadTexts: transientInstallFwpCompleted.setStatus('current')
transientBootUpRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 419))
if mibBuilder.loadTexts: transientBootUpRejected.setStatus('current')
alarmThres15MinExceededBbePcs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 420))
if mibBuilder.loadTexts: alarmThres15MinExceededBbePcs.setStatus('current')
transientThres15DayExceededBbePcs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 421))
if mibBuilder.loadTexts: transientThres15DayExceededBbePcs.setStatus('current')
alarmAutoShutdownGAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 422))
if mibBuilder.loadTexts: alarmAutoShutdownGAis.setStatus('current')
alarmEquipmentMismatchAllow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 423))
if mibBuilder.loadTexts: alarmEquipmentMismatchAllow.setStatus('current')
alarmWarmUp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 424))
if mibBuilder.loadTexts: alarmWarmUp.setStatus('current')
transientFwpInstallStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 425))
if mibBuilder.loadTexts: transientFwpInstallStarted.setStatus('current')
transientFwpInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 426))
if mibBuilder.loadTexts: transientFwpInstallFailed.setStatus('current')
transientFwpInstallCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 427))
if mibBuilder.loadTexts: transientFwpInstallCompleted.setStatus('current')
transientFwpSwitchStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 428))
if mibBuilder.loadTexts: transientFwpSwitchStarted.setStatus('current')
transientFwpSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 429))
if mibBuilder.loadTexts: transientFwpSwitchFailed.setStatus('current')
transientFwpSwitchCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 430))
if mibBuilder.loadTexts: transientFwpSwitchCompleted.setStatus('current')
transientFwpSwitchRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 431))
if mibBuilder.loadTexts: transientFwpSwitchRejected.setStatus('current')
alarmNetworkPathRestricted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 432))
if mibBuilder.loadTexts: alarmNetworkPathRestricted.setStatus('current')
transientPathCleanupComplete = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 433))
if mibBuilder.loadTexts: transientPathCleanupComplete.setStatus('current')
alarmVfClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 434))
if mibBuilder.loadTexts: alarmVfClientSignalFail.setStatus('current')
alarmAutoShutdownVfCSF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 435))
if mibBuilder.loadTexts: alarmAutoShutdownVfCSF.setStatus('current')
fspR7EquipmentInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10001))
if mibBuilder.loadTexts: fspR7EquipmentInsertedTrap.setStatus('current')
fspR7EquipmentRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10002))
if mibBuilder.loadTexts: fspR7EquipmentRemovedTrap.setStatus('current')
fspR7WriteAccessRequest = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10010))
if mibBuilder.loadTexts: fspR7WriteAccessRequest.setStatus('current')
fspR7WriteAccessGranted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10011))
if mibBuilder.loadTexts: fspR7WriteAccessGranted.setStatus('current')
fspR7WriteAccessRevoked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10012))
if mibBuilder.loadTexts: fspR7WriteAccessRevoked.setStatus('current')
fspR7WriteAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10013))
if mibBuilder.loadTexts: fspR7WriteAccessDenied.setStatus('current')
fspR7WriteAccessTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10014))
if mibBuilder.loadTexts: fspR7WriteAccessTimeout.setStatus('current')
fspR7WriteAccessRequestTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10015))
if mibBuilder.loadTexts: fspR7WriteAccessRequestTimeout.setStatus('current')
optThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1), )
if mibBuilder.loadTexts: optThresholdConfigTable.setStatus('deprecated')
optThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: optThresholdConfigEntry.setStatus('deprecated')
optThresholdConfigLowFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigLowFixed.setStatus('deprecated')
optThresholdConfigHighFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigHighFixed.setStatus('deprecated')
optThresholdConfigLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optThresholdConfigLowConfig.setStatus('deprecated')
optThresholdConfigHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optThresholdConfigHighConfig.setStatus('deprecated')
oprThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2), )
if mibBuilder.loadTexts: oprThresholdConfigTable.setStatus('deprecated')
oprThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oprThresholdConfigEntry.setStatus('deprecated')
oprThresholdConfigLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 260))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oprThresholdConfigLowConfig.setStatus('deprecated')
oprThresholdConfigHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 260))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oprThresholdConfigHighConfig.setStatus('deprecated')
lsrtempThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3), )
if mibBuilder.loadTexts: lsrtempThresholdConfigTable.setStatus('deprecated')
lsrtempThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lsrtempThresholdConfigEntry.setStatus('deprecated')
lsrtempThresholdConfigLowFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1, 1), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lsrtempThresholdConfigLowFixed.setStatus('deprecated')
lsrtempThresholdConfigHighFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1, 2), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lsrtempThresholdConfigHighFixed.setStatus('deprecated')
optIntervalPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1), )
if mibBuilder.loadTexts: optIntervalPm15minTable.setStatus('deprecated')
optIntervalPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm15minNumber"))
if mibBuilder.loadTexts: optIntervalPm15minEntry.setStatus('deprecated')
optIntervalPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: optIntervalPm15minNumber.setStatus('current')
optIntervalPm15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minLow.setStatus('deprecated')
optIntervalPm15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minMean.setStatus('deprecated')
optIntervalPm15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minHigh.setStatus('deprecated')
optIntervalPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minValidFlag.setStatus('deprecated')
optIntervalPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minTimeStamp.setStatus('deprecated')
optIntervalPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2), )
if mibBuilder.loadTexts: optIntervalPm1dayTable.setStatus('deprecated')
optIntervalPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm1dayNumber"))
if mibBuilder.loadTexts: optIntervalPm1dayEntry.setStatus('deprecated')
optIntervalPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: optIntervalPm1dayNumber.setStatus('current')
optIntervalPm1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayLow.setStatus('deprecated')
optIntervalPm1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayMean.setStatus('deprecated')
optIntervalPm1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayHigh.setStatus('deprecated')
optIntervalPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayValidFlag.setStatus('deprecated')
optIntervalPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayTimeStamp.setStatus('deprecated')
optIntervalPm1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3), )
if mibBuilder.loadTexts: optIntervalPm1weekTable.setStatus('deprecated')
optIntervalPm1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm1weekNumber"))
if mibBuilder.loadTexts: optIntervalPm1weekEntry.setStatus('deprecated')
optIntervalPm1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: optIntervalPm1weekNumber.setStatus('current')
optIntervalPm1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekLow.setStatus('deprecated')
optIntervalPm1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekMean.setStatus('deprecated')
optIntervalPm1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekHigh.setStatus('deprecated')
optIntervalPm1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekValidFlag.setStatus('deprecated')
optIntervalPm1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekTimeStamp.setStatus('deprecated')
oprIntervalPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4), )
if mibBuilder.loadTexts: oprIntervalPm15minTable.setStatus('deprecated')
oprIntervalPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm15minNumber"))
if mibBuilder.loadTexts: oprIntervalPm15minEntry.setStatus('deprecated')
oprIntervalPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: oprIntervalPm15minNumber.setStatus('current')
oprIntervalPm15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minLow.setStatus('deprecated')
oprIntervalPm15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minMean.setStatus('deprecated')
oprIntervalPm15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minHigh.setStatus('deprecated')
oprIntervalPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minValidFlag.setStatus('deprecated')
oprIntervalPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minTimeStamp.setStatus('deprecated')
oprIntervalPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5), )
if mibBuilder.loadTexts: oprIntervalPm1dayTable.setStatus('deprecated')
oprIntervalPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm1dayNumber"))
if mibBuilder.loadTexts: oprIntervalPm1dayEntry.setStatus('deprecated')
oprIntervalPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: oprIntervalPm1dayNumber.setStatus('current')
oprIntervalPm1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayLow.setStatus('deprecated')
oprIntervalPm1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayMean.setStatus('deprecated')
oprIntervalPm1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayHigh.setStatus('deprecated')
oprIntervalPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayValidFlag.setStatus('deprecated')
oprIntervalPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayTimeStamp.setStatus('deprecated')
oprIntervalPm1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6), )
if mibBuilder.loadTexts: oprIntervalPm1weekTable.setStatus('deprecated')
oprIntervalPm1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm1weekNumber"))
if mibBuilder.loadTexts: oprIntervalPm1weekEntry.setStatus('deprecated')
oprIntervalPm1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: oprIntervalPm1weekNumber.setStatus('current')
oprIntervalPm1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekLow.setStatus('deprecated')
oprIntervalPm1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekMean.setStatus('deprecated')
oprIntervalPm1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekHigh.setStatus('deprecated')
oprIntervalPm1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekValidFlag.setStatus('deprecated')
oprIntervalPm1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekTimeStamp.setStatus('deprecated')
endOfPerformance = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformance.setStatus('current')
terminationPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1), )
if mibBuilder.loadTexts: terminationPointTable.setStatus('current')
terminationPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: terminationPointEntry.setStatus('current')
terminationPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointRowStatus.setStatus('current')
terminationPointPartnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointPartnerAid.setStatus('current')
terminationPointAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointAdmin.setStatus('current')
terminationPointFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 4), FspR7FiberDetect()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointFiberDetect.setStatus('current')
terminationPointFiberDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 5), FspR7FDStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiberDetectStatus.setStatus('current')
terminationPointFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 6), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFunction.setStatus('current')
terminationPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminationPointAlias.setStatus('current')
terminationPointValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointValidSigTimer.setStatus('current')
terminationPointConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 9), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnector.setStatus('current')
terminationPointFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 10), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiber.setStatus('current')
terminationPointConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 11), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnType.setStatus('current')
terminationPointOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointOper.setStatus('current')
terminationPointOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 13), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointOutputPower.setStatus('current')
terminationPointInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointInputPower.setStatus('current')
terminationPointFiberConnAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiberConnAtten.setStatus('current')
terminationPointConnEqptState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 16), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnEqptState.setStatus('current')
terminationPointTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 17), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointTermType.setStatus('current')
terminationPointChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointChannel.setStatus('current')
terminationPointLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 19), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointLambda.setStatus('current')
terminationPointFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 20), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFrequency.setStatus('current')
terminationPointReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 21), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointReach.setStatus('current')
terminationPointBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 22), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointBand.setStatus('current')
terminationPointSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 23), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSubBand.setStatus('current')
terminationPointGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 24), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointGroup.setStatus('current')
terminationPointSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 25), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSfProvision.setStatus('current')
terminationPointDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 26), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDirection.setStatus('current')
terminationPointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 27), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointLevel.setStatus('current')
terminationPointSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 28), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSecondaryStates.setStatus('current')
connectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2), )
if mibBuilder.loadTexts: connectionTable.setStatus('current')
connectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: connectionEntry.setStatus('current')
connectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionRowStatus.setStatus('current')
connectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 2), FspR7TypeConnection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionType.setStatus('current')
connectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 3), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionState.setStatus('current')
connectionCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 4), FfpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionCreationMethod.setStatus('current')
facilityReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3), )
if mibBuilder.loadTexts: facilityReferByTable.setStatus('current')
facilityReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: facilityReferByEntry.setStatus('current')
facilityReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityReferByTerminPoint.setStatus('current')
externalPortReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4), )
if mibBuilder.loadTexts: externalPortReferByTable.setStatus('current')
externalPortReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortReferByEntry.setStatus('current')
externalPortReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReferByTerminPoint.setStatus('current')
endOfExternalPortReferByTabke = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfExternalPortReferByTabke.setStatus('current')
dcnReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6), )
if mibBuilder.loadTexts: dcnReferByTable.setStatus('current')
dcnReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: dcnReferByEntry.setStatus('current')
dcnReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnReferByTerminPoint.setStatus('current')
endOfDcnReferByTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnReferByTable.setStatus('current')
opticalMuxReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8), )
if mibBuilder.loadTexts: opticalMuxReferByTable.setStatus('current')
opticalMuxReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxReferByEntry.setStatus('current')
opticalMuxReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxReferByTerminPoint.setStatus('current')
endOfOpticalMuxReferByTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxReferByTable.setStatus('current')
endOfFiberMap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFiberMap.setStatus('current')
startPmSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 1), FspR7StartPmSnapshot()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startPmSnapshot.setStatus('current')
pmSnapshotStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 2), FspR7PmSnapshotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotStatus.setStatus('current')
pmSnapshotCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3), )
if mibBuilder.loadTexts: pmSnapshotCurrentTable.setStatus('current')
pmSnapshotCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: pmSnapshotCurrentEntry.setStatus('current')
pmSnapshotCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOutputPower.setStatus('current')
pmSnapshotCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentInputPower.setStatus('current')
pmSnapshotCurrentAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentAttenuation.setStatus('current')
pmSnapshotCurrentAttenOfVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentAttenOfVoa.setStatus('current')
pmSnapshotCurrentOscGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 5), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOscGain.setStatus('current')
pmSnapshotCurrentBckreflecPwrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentBckreflecPwrRx.setStatus('current')
pmSnapshotCurrentRamanPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 7), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentRamanPumpPower.setStatus('current')
pmSnapshotCurrentOscPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 8), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOscPwrReceived.setStatus('current')
pmSnapshotCurrentVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 9), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentVariableGain.setStatus('current')
pmSnapshotCurrentTxLineAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 10), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTxLineAtten.setStatus('current')
pmSnapshotCurrentRxLineAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentRxLineAtten.setStatus('current')
pmSnapshotHistoricalTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4), )
if mibBuilder.loadTexts: pmSnapshotHistoricalTable.setStatus('current')
pmSnapshotHistoricalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalParameter"), (0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalNumber"))
if mibBuilder.loadTexts: pmSnapshotHistoricalEntry.setStatus('current')
pmSnapshotHistoricalParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: pmSnapshotHistoricalParameter.setStatus('current')
pmSnapshotHistoricalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pmSnapshotHistoricalNumber.setStatus('current')
pmSnapshotHistoricalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalValue.setStatus('current')
pmSnapshotHistoricalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalValidFlag.setStatus('current')
pmSnapshotHistoricalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTimeStamp.setStatus('current')
pmSnapshotCurrentTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5), )
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointTable.setStatus('deprecated')
pmSnapshotCurrentTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointEntry.setStatus('deprecated')
pmSnapshotCurrentTerminPointOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointOutputPower.setStatus('deprecated')
pmSnapshotCurrentTerminPointInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointInputPower.setStatus('deprecated')
pmSnapshotCurrentTerminPointFiberConnAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointFiberConnAtten.setStatus('deprecated')
pmSnapshotHistoricalTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6), )
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTable.setStatus('deprecated')
pmSnapshotHistoricalTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalTerminPointParameter"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalTerminPointNumber"))
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointEntry.setStatus('deprecated')
pmSnapshotHistoricalTerminPointParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointParameter.setStatus('deprecated')
pmSnapshotHistoricalTerminPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointNumber.setStatus('deprecated')
pmSnapshotHistoricalTerminPointValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValue.setStatus('deprecated')
pmSnapshotHistoricalTerminPointValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValidFlag.setStatus('deprecated')
pmSnapshotHistoricalTerminPointTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTimeStamp.setStatus('deprecated')
endOfPmSnampshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmSnampshot.setStatus('current')
externalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1), )
if mibBuilder.loadTexts: externalPortTable.setStatus('current')
externalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortEntry.setStatus('current')
externalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortRowStatus.setStatus('current')
externalPortConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 2), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortConnectionState.setStatus('current')
externalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortType.setStatus('current')
externalPortTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 4), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortTransmitChannel.setStatus('current')
externalPortChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 5), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortChannelBandwith.setStatus('current')
externalPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortAlias.setStatus('current')
externalPortFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFarEndLocation.setStatus('current')
externalPortBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 8), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortBitrate.setStatus('current')
externalPortFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 9), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFecType.setStatus('current')
externalPortLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 10), FspR7LineCoding()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortLineCoding.setStatus('current')
externalPortFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 11), FspR7FrameFormat()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFrameFormat.setStatus('current')
externalPortOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortOpticalPowerTx.setStatus('current')
externalPortOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortOsnrTransmit.setStatus('current')
externalPortPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortPmdTransmit.setStatus('current')
externalPortChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortChromDisperTx.setStatus('current')
externalPortMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinOsnrRcv.setStatus('current')
externalPortMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 0))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinOptPowerRcv.setStatus('current')
externalPortMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxOptPowerRcv.setStatus('current')
externalPortMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxPmdRcv.setStatus('current')
externalPortMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinChromDisperRcv.setStatus('current')
externalPortMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxChromDisperRcv.setStatus('current')
externalPortMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 22), FspR7MaxBitErrorRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxBitErrorRate.setStatus('current')
externalPortSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 23), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortSourceProfile.setStatus('current')
externalPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 24), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortSecondaryStates.setStatus('current')
endOfEci = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEci.setStatus('current')
channelTracesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1), )
if mibBuilder.loadTexts: channelTracesTable.setStatus('current')
channelTracesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "channelTracesIndexNo1"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo2"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo3"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo4"), (0, "ADVA-FSPR7-MIB", "channelTracesClassName"), (0, "ADVA-FSPR7-MIB", "channelTracesChannelNumber"), (0, "ADVA-FSPR7-MIB", "channelTracesRouteId"), (0, "ADVA-FSPR7-MIB", "channelTracesElementId"))
if mibBuilder.loadTexts: channelTracesEntry.setStatus('current')
channelTracesIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo1.setStatus('current')
channelTracesIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo2.setStatus('current')
channelTracesIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo3.setStatus('current')
channelTracesIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo4.setStatus('current')
channelTracesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: channelTracesClassName.setStatus('current')
channelTracesChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 6), FspR7ChannelNumber())
if mibBuilder.loadTexts: channelTracesChannelNumber.setStatus('current')
channelTracesRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 7), FspR7NCTraceId())
if mibBuilder.loadTexts: channelTracesRouteId.setStatus('current')
channelTracesElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 8), Unsigned32())
if mibBuilder.loadTexts: channelTracesElementId.setStatus('current')
channelTracesFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesFromAid.setStatus('current')
channelTracesToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesToAid.setStatus('current')
channelTracesRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 11), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesRouteType.setStatus('current')
channelTracesChannelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 12), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesChannelRx.setStatus('current')
channelTracesChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 13), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesChannelTx.setStatus('current')
endOfchannelTracesTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfchannelTracesTable.setStatus('current')
ratFrom = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratFrom.setStatus('current')
ratTo = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratTo.setStatus('current')
ratChIngress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 5), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratChIngress.setStatus('current')
ratChEgress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 6), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratChEgress.setStatus('current')
ratSuperChannel = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 7), FspR7NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratSuperChannel.setStatus('current')
ratSuperChannelFq = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 8), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratSuperChannelFq.setStatus('current')
ratStartPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10), )
if mibBuilder.loadTexts: ratStartPointTable.setStatus('current')
ratStartPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "ratStartPointClassName"))
if mibBuilder.loadTexts: ratStartPointEntry.setStatus('current')
ratStartPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo1.setStatus('current')
ratStartPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo2.setStatus('current')
ratStartPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo3.setStatus('current')
ratStartPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo4.setStatus('current')
ratStartPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: ratStartPointClassName.setStatus('current')
ratStartPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointAidString.setStatus('current')
ratStartPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointTableId.setStatus('current')
ratStartPointChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 8), FspR7ChannelNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointChannelNumber.setStatus('current')
ratStartPointChannelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 9), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointChannelGroup.setStatus('current')
ratStartPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointClass.setStatus('current')
endOfRatStartPointTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatStartPointTable.setStatus('current')
ratAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12), )
if mibBuilder.loadTexts: ratAnalyzerTable.setStatus('current')
ratAnalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratAnalyzerRouteId"), (0, "ADVA-FSPR7-MIB", "ratAnalyzerElementId"))
if mibBuilder.loadTexts: ratAnalyzerEntry.setStatus('current')
ratAnalyzerRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratAnalyzerRouteId.setStatus('current')
ratAnalyzerElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ratAnalyzerElementId.setStatus('current')
ratAnalyzerFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerFromAid.setStatus('current')
ratAnalyzerToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerToAid.setStatus('current')
ratAnalyzerChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 5), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerChannelTx.setStatus('current')
ratAnalyzerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 6), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerState.setStatus('current')
ratAnalyzerRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 7), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerRouteType.setStatus('current')
endOfRatAnalyzerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatAnalyzerTable.setStatus('current')
ratBlockingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14), )
if mibBuilder.loadTexts: ratBlockingTable.setStatus('current')
ratBlockingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratBlockingElementId"))
if mibBuilder.loadTexts: ratBlockingEntry.setStatus('current')
ratBlockingElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratBlockingElementId.setStatus('current')
ratBlockingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 2), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingType.setStatus('current')
ratBlockingConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 3), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingConnState.setStatus('current')
ratBlockingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingAid.setStatus('current')
endOfRatBlockingTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatBlockingTable.setStatus('current')
endOfserviceDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfserviceDiagnostics.setStatus('current')
changePhysicalPortServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1), )
if mibBuilder.loadTexts: changePhysicalPortServiceTable.setStatus('current')
changePhysicalPortServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: changePhysicalPortServiceEntry.setStatus('current')
changePhysicalPortServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceRowStatus.setStatus('current')
changePhysicalPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceType.setStatus('current')
changePhysicalPortServiceAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAdmin.setStatus('current')
changePhysicalPortServiceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAlias.setStatus('current')
changePhysicalPortServiceAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 5), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAlsMode.setStatus('current')
changePhysicalPortServiceBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 6), FspR7PortBehaviour()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceBehaviour.setStatus('current')
changePhysicalPortServiceDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionSetting.setStatus('current')
changePhysicalPortServiceDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 8), FspR7DispersionModes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionMode.setStatus('current')
changePhysicalPortServiceChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceChannelProv.setStatus('current')
changePhysicalPortServiceWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 10), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceWdmRxChannel.setStatus('current')
changePhysicalPortServiceCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 11), FspR7CodeGain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceCodeGain.setStatus('current')
changePhysicalPortServiceXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 12), FspR7XfpDecisionThres()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceXfpDecisionThres.setStatus('current')
changePhysicalPortServiceDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 13), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDisparityCorrection.setStatus('current')
changePhysicalPortServiceEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 14), FspR7EqlzAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceEqlzAdmin.setStatus('current')
changePhysicalPortServiceErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 15), FspR7ErrorFwdMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceErrorForwarding.setStatus('current')
changePhysicalPortServiceFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 16), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFecType.setStatus('current')
changePhysicalPortServiceFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 17), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFarEndCommunication.setStatus('current')
changePhysicalPortServiceFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 18), FspR7FlowControlMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFlowControl.setStatus('current')
changePhysicalPortServiceLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 19), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaneChannelSetting.setStatus('current')
changePhysicalPortServiceLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 20), FspR7LaserDelayTimer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserDelayTimer.setStatus('current')
changePhysicalPortServiceLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffTimer.setStatus('current')
changePhysicalPortServiceLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOnTimer.setStatus('current')
changePhysicalPortServiceLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 23), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffDelayFunction.setStatus('current')
changePhysicalPortServiceAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 24), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAutoPTassignment.setStatus('current')
changePhysicalPortServiceTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 25), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTributarySlotMethod.setStatus('current')
changePhysicalPortServiceOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOpticalSetPoint.setStatus('current')
changePhysicalPortServiceOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 27), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOpuPayloadType.setStatus('current')
changePhysicalPortServiceSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 28), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetLine.setStatus('current')
changePhysicalPortServiceSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhMs.setStatus('current')
changePhysicalPortServiceSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOtu.setStatus('current')
changePhysicalPortServiceSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOdu.setStatus('current')
changePhysicalPortServiceSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThreshold.setStatus('current')
changePhysicalPortServiceSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPcslThreshold.setStatus('current')
changePhysicalPortServiceSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 34), FspR7BERThresholdSection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetSection.setStatus('current')
changePhysicalPortServiceSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhSection.setStatus('current')
changePhysicalPortServiceSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmA.setStatus('current')
changePhysicalPortServiceSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmB.setStatus('current')
changePhysicalPortServiceSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmC.setStatus('current')
changePhysicalPortServiceSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSignalDegradePeriod.setStatus('current')
changePhysicalPortServiceSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOdu.setStatus('current')
changePhysicalPortServiceSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOtu.setStatus('current')
changePhysicalPortServiceSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodIntegration.setStatus('current')
changePhysicalPortServiceSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodSdhSection.setStatus('current')
changePhysicalPortServiceSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmA.setStatus('current')
changePhysicalPortServiceSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmB.setStatus('current')
changePhysicalPortServiceSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmC.setStatus('current')
changePhysicalPortServiceOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 47), FspR7Stuff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOtnStuffing.setStatus('current')
changePhysicalPortServiceTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 48), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmALevel.setStatus('current')
changePhysicalPortServiceTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 49), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmBLevel.setStatus('current')
changePhysicalPortServiceTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 50), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmCLevel.setStatus('current')
changePhysicalPortServiceTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 51), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTerminationLevel.setStatus('current')
changePhysicalPortServiceTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 52), SonetTimingSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimingSource.setStatus('current')
changePhysicalPortServiceTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 53), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOdu.setStatus('current')
changePhysicalPortServiceTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 54), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOtu.setStatus('current')
changePhysicalPortServiceTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 55), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeSonetSection.setStatus('current')
changePhysicalPortServiceTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 56), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmA.setStatus('current')
changePhysicalPortServiceTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 57), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmB.setStatus('current')
changePhysicalPortServiceTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 58), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmC.setStatus('current')
changePhysicalPortServiceTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 59), SonetTraceForm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceFormSonetSection.setStatus('current')
changePhysicalPortServiceTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedSonetSection.setStatus('current')
changePhysicalPortServiceTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSonetSection.setStatus('current')
changePhysicalPortServiceTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOtu.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOtu.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOtu.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOtu.setStatus('current')
changePhysicalPortServiceTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOdu.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOdu.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOdu.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOdu.setStatus('current')
changePhysicalPortServiceTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmA.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmA.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmA.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmA.setStatus('current')
changePhysicalPortServiceTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmB.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmB.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmB.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmB.setStatus('current')
changePhysicalPortServiceTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmC.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmC.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmC.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmC.setStatus('current')
changePhysicalPortServiceTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 82), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffDelay.setStatus('current')
changePhysicalPortServiceVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 83), FspR7VoaMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceVoaMode.setStatus('current')
changePhysicalPortServiceVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceVoaSetpoint.setStatus('current')
changePhysicalPortServiceTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 85), FspR7TxOffOnTm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffOnTm.setStatus('current')
changePhysicalPortServiceTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 86), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffTimer.setStatus('current')
changePhysicalPortServiceTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOnTimer.setStatus('current')
endOfChangeService = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangeService.setStatus('current')
haTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1), )
if mibBuilder.loadTexts: haTable.setStatus('current')
haEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: haEntry.setStatus('current')
haProtectionIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProtectionIndexAid.setStatus('current')
haInhSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 2), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: haInhSwitching.setStatus('current')
haSwitchToDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 3), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: haSwitchToDuplex.setStatus('current')
haSwitchOverCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 4), FspR7SwitchOverCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSwitchOverCause.setStatus('current')
haSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSoftwareVersion.setStatus('current')
endOfHaTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfHaTable.setStatus('current')
ffpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3), )
if mibBuilder.loadTexts: ffpTable.setStatus('current')
ffpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: ffpEntry.setStatus('current')
ffpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpRowStatus.setStatus('current')
ffpCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 2), FfpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpCreationMethod.setStatus('current')
ffpSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 3), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpSDswitching.setStatus('current')
ffpHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 4), ApsHoldoffTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpHoldOffTime.setStatus('current')
ffpProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 5), ProtectionMech()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpProtectionMech.setStatus('current')
ffpWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpWorkingAid.setStatus('current')
ffpProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpProtectionAid.setStatus('current')
ffpSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 8), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpSignalDegradeSwitching.setStatus('current')
ffpSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpSignalFailureSwitching.setStatus('current')
ffpFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpFarEndIp.setStatus('current')
ffpPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpPeerAid.setStatus('current')
ffpApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 12), ApsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpApsType.setStatus('current')
ffpRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 13), ApsRevertMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpRevertMode.setStatus('current')
ffpWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setUnits('min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpWaitToRestore.setStatus('current')
ffpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 15), ApsDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpDirection.setStatus('current')
ffpProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 16), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpProtectionType.setStatus('current')
ffpApsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 17), FspR7ApsChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpApsChannel.setStatus('current')
endOfFfpTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFfpTable.setStatus('current')
endOfProtection = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtection.setStatus('current')
aidMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1), )
if mibBuilder.loadTexts: aidMappingTable.setStatus('current')
aidMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "aidMappingAidString"))
if mibBuilder.loadTexts: aidMappingEntry.setStatus('current')
aidMappingAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: aidMappingAidString.setStatus('current')
aidMappingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aidMappingId.setStatus('current')
aidMappingString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aidMappingString.setStatus('current')
endOfAidMappingTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAidMappingTable.setStatus('current')
endOfTranslation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTranslation.setStatus('current')
sshHostKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 1), FspR7SshHostKeyLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyLength.setStatus('current')
newSshHostKey = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 2), FspR7NewSshHostKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSshHostKey.setStatus('current')
accessWarning = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessWarning.setStatus('current')
accessWarningMessage = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 4), FspR7SnmpLongString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessWarningMessage.setStatus('current')
showLastLoginSuccess = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 5), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: showLastLoginSuccess.setStatus('current')
showLastLoginFail = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 6), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: showLastLoginFail.setStatus('current')
writeAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 7), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeAccessStatus.setStatus('current')
writeAccessRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(100, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeAccessRequestTimeout.setStatus('current')
virtualSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15), )
if mibBuilder.loadTexts: virtualSessionTable.setStatus('current')
virtualSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "virtualSessionId"))
if mibBuilder.loadTexts: virtualSessionEntry.setStatus('current')
virtualSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: virtualSessionId.setStatus('current')
virtualSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 2), FspR7VSessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionStatus.setStatus('current')
virtualSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSessionTimeout.setStatus('current')
virtualSessionWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 4), FspR7VSessWriteAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSessionWriteAccess.setStatus('current')
virtualSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionUserName.setStatus('current')
virtualSessionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionIpAddress.setStatus('current')
virtualSessionChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 7), FspR7VSessChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionChangeReason.setStatus('current')
virtualSessionChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionChangeTime.setStatus('current')
packetFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 16), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packetFiltering.setStatus('current')
whitelistFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 17), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whitelistFiltering.setStatus('current')
restrictToSysIP = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 18), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restrictToSysIP.setStatus('current')
icmpFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 19), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpFiltering.setStatus('current')
icmpEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 20), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpEchoRequests.setStatus('current')
icmpSourceQuench = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 21), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpSourceQuench.setStatus('current')
icmpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 22), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpRedirect.setStatus('current')
ocmpTimestampRequest = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 23), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocmpTimestampRequest.setStatus('current')
icmpAddrMask = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 24), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpAddrMask.setStatus('current')
dosProtection = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 25), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosProtection.setStatus('current')
isolateInbandChan = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 26), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isolateInbandChan.setStatus('current')
ipForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 27), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwarding.setStatus('current')
whitelistTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30), )
if mibBuilder.loadTexts: whitelistTable.setStatus('current')
whitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "whitelistId"))
if mibBuilder.loadTexts: whitelistEntry.setStatus('current')
whitelistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: whitelistId.setStatus('current')
whitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistRowStatus.setStatus('current')
whitelistAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistAdmin.setStatus('current')
whitelistIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistIpMask.setStatus('current')
whitelistIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistIpAddr.setStatus('current')
lockSafety = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 31), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lockSafety.setStatus('current')
unlockTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: unlockTime.setStatus('current')
sslRenewMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 33), FspR7RenewMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslRenewMode.setStatus('current')
sslKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 34), FspR7KeyLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslKeyLength.setStatus('current')
sslValidityPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 35), FspR7ValidityPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslValidityPeriod.setStatus('current')
sslCertApply = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 36), FspR7CertApply()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertApply.setStatus('current')
sslCertIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 37), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertIp.setStatus('current')
trapSource = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 38), FspR7AppType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSource.setStatus('current')
trapUser = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 39), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapUser.setStatus('current')
knownHostIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3), )
if mibBuilder.loadTexts: knownHostIPv6Table.setStatus('current')
knownHostIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "knownHostIPv6IP"), (0, "ADVA-FSPR7-MIB", "knownHostIPv6KeyEncryptAlgorithm"))
if mibBuilder.loadTexts: knownHostIPv6Entry.setStatus('current')
knownHostIPv6IP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: knownHostIPv6IP.setStatus('current')
knownHostIPv6KeyEncryptAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 2), FspR7SshHostKeyEncryptAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownHostIPv6KeyEncryptAlgorithm.setStatus('current')
knownHostIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownHostIPv6RowStatus.setStatus('current')
knownHostIPv6FingerPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 4), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownHostIPv6FingerPrint.setStatus('current')
ipv6ActRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14), )
if mibBuilder.loadTexts: ipv6ActRoutesTable.setStatus('current')
ipv6ActRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ipv6ActRoutesDestination"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesPrefix"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesNextHop"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesShelfNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesSlotNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesPortNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesExtNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesClassName"))
if mibBuilder.loadTexts: ipv6ActRoutesEntry.setStatus('current')
ipv6ActRoutesDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 1), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6ActRoutesDestination.setStatus('current')
ipv6ActRoutesPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ipv6ActRoutesPrefix.setStatus('current')
ipv6ActRoutesNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 3), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6ActRoutesNextHop.setStatus('current')
ipv6ActRoutesShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesShelfNo.setStatus('current')
ipv6ActRoutesSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 5), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesSlotNo.setStatus('current')
ipv6ActRoutesPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesPortNo.setStatus('current')
ipv6ActRoutesExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 7), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesExtNo.setStatus('current')
ipv6ActRoutesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 8), EntityClassName())
if mibBuilder.loadTexts: ipv6ActRoutesClassName.setStatus('current')
ipv6ActRoutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesRowStatus.setStatus('current')
ipv6ActRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 10), FspR7Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesType.setStatus('current')
ipv6ActRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesMetric.setStatus('current')
ipv6ActRoutesDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesDestIp.setStatus('current')
ipv6ActRoutesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesPrefixLen.setStatus('current')
ipv6ActRoutesNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesNextHopIp.setStatus('current')
ipv6ActRoutesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesPort.setStatus('current')
ipv6InActRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16), )
if mibBuilder.loadTexts: ipv6InActRoutesTable.setStatus('current')
ipv6InActRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ipv6InActRoutesDestination"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesPrefix"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesNextHop"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesShelfNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesSlotNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesPortNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesExtNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesClassName"))
if mibBuilder.loadTexts: ipv6InActRoutesEntry.setStatus('current')
ipv6InActRoutesDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 1), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6InActRoutesDestination.setStatus('current')
ipv6InActRoutesPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ipv6InActRoutesPrefix.setStatus('current')
ipv6InActRoutesNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 3), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6InActRoutesNextHop.setStatus('current')
ipv6InActRoutesShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesShelfNo.setStatus('current')
ipv6InActRoutesSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 5), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesSlotNo.setStatus('current')
ipv6InActRoutesPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 6), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesPortNo.setStatus('current')
ipv6InActRoutesExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 7), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesExtNo.setStatus('current')
ipv6InActRoutesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 8), EntityClassName())
if mibBuilder.loadTexts: ipv6InActRoutesClassName.setStatus('current')
ipv6InActRoutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesRowStatus.setStatus('current')
ipv6InActRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 10), FspR7Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesType.setStatus('current')
ipv6InActRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesMetric.setStatus('current')
ipv6InActRoutesDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesDestIp.setStatus('current')
ipv6InActRoutesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesPrefixLen.setStatus('current')
ipv6InActRoutesNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesNextHopIp.setStatus('current')
ipv6InActRoutesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesPort.setStatus('current')
syslogIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30), )
if mibBuilder.loadTexts: syslogIPv4Table.setStatus('current')
syslogIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "syslogIPv4Ip"))
if mibBuilder.loadTexts: syslogIPv4Entry.setStatus('current')
syslogIPv4Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogIPv4Ip.setStatus('current')
syslogIPv4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4RowStatus.setStatus('current')
syslogIPv4Reporting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 3), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4Reporting.setStatus('current')
syslogIPv4DbchgReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4DbchgReports.setStatus('current')
syslogIPv4SecurityReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4SecurityReports.setStatus('current')
syslogIPv4IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogIPv4IpAddr.setStatus('current')
syslogIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32), )
if mibBuilder.loadTexts: syslogIPv6Table.setStatus('current')
syslogIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "syslogIPv6Ip"))
if mibBuilder.loadTexts: syslogIPv6Entry.setStatus('current')
syslogIPv6Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogIPv6Ip.setStatus('current')
syslogIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6RowStatus.setStatus('current')
syslogIPv6Reporting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 3), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6Reporting.setStatus('current')
syslogIPv6DbchgReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6DbchgReports.setStatus('current')
syslogIPv6SecurityReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6SecurityReports.setStatus('current')
syslogIPv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogIPv6IpAddr.setStatus('current')
ntpIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20), )
if mibBuilder.loadTexts: ntpIPv4Table.setStatus('current')
ntpIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv4Ip"))
if mibBuilder.loadTexts: ntpIPv4Entry.setStatus('current')
ntpIPv4Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpIPv4Ip.setStatus('current')
ntpIPv4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4RowStatus.setStatus('current')
ntpIPv4SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 3), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4SourceIp.setStatus('current')
ntpIPv4Test = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 4), FspR7NtpTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPv4Test.setStatus('current')
ntpIPv4TestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 5), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4TestStatus.setStatus('current')
ntpIPv4SyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 6), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4SyncStatus.setStatus('current')
ntpIPv4Admin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 7), FspR7NtpAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4Admin.setStatus('current')
ntpIPv4OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4OperState.setStatus('current')
ntpIPv4IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4IpAddr.setStatus('current')
ntpIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22), )
if mibBuilder.loadTexts: ntpIPv6Table.setStatus('current')
ntpIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv6Ip"))
if mibBuilder.loadTexts: ntpIPv6Entry.setStatus('current')
ntpIPv6Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpIPv6Ip.setStatus('current')
ntpIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6RowStatus.setStatus('current')
ntpIPv6SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 3), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6SourceIp.setStatus('current')
ntpIPv6Test = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 4), FspR7NtpTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPv6Test.setStatus('current')
ntpIPv6TestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 5), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6TestStatus.setStatus('current')
ntpIPv6SyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 6), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6SyncStatus.setStatus('current')
ntpIPv6Admin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 7), FspR7NtpAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6Admin.setStatus('current')
ntpIPv6OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6OperState.setStatus('current')
ntpIPv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6IpAddr.setStatus('current')
endOfFeatureSpecific = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFeatureSpecific.setStatus('current')
upwardEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1), )
if mibBuilder.loadTexts: upwardEqptTable.setStatus('current')
upwardEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptPortNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptExtNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptClassName"), (0, "ADVA-FSPR7-MIB", "upwardEqptIndex"))
if mibBuilder.loadTexts: upwardEqptEntry.setStatus('current')
upwardEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardEqptShelfNo.setStatus('current')
upwardEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardEqptSlotNo.setStatus('current')
upwardEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardEqptPortNo.setStatus('current')
upwardEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardEqptExtNo.setStatus('current')
upwardEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardEqptClassName.setStatus('current')
upwardEqptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardEqptIndex.setStatus('current')
upwardEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardEqptParentId.setStatus('current')
endOfUpwardEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardEqptTable.setStatus('current')
downwardEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3), )
if mibBuilder.loadTexts: downwardEqptTable.setStatus('current')
downwardEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptPortNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptExtNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptClassName"), (0, "ADVA-FSPR7-MIB", "downwardEqptIndex"))
if mibBuilder.loadTexts: downwardEqptEntry.setStatus('current')
downwardEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardEqptShelfNo.setStatus('current')
downwardEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardEqptSlotNo.setStatus('current')
downwardEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardEqptPortNo.setStatus('current')
downwardEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardEqptExtNo.setStatus('current')
downwardEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardEqptClassName.setStatus('current')
downwardEqptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardEqptIndex.setStatus('current')
downwardEqptChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardEqptChildId.setStatus('current')
endOfDownwardEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardEqptTable.setStatus('current')
upwardDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5), )
if mibBuilder.loadTexts: upwardDcnTable.setStatus('current')
upwardDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnPortNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnExtNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnClassName"), (0, "ADVA-FSPR7-MIB", "upwardDcnIndex"))
if mibBuilder.loadTexts: upwardDcnEntry.setStatus('current')
upwardDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardDcnShelfNo.setStatus('current')
upwardDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardDcnSlotNo.setStatus('current')
upwardDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardDcnPortNo.setStatus('current')
upwardDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardDcnExtNo.setStatus('current')
upwardDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardDcnClassName.setStatus('current')
upwardDcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardDcnIndex.setStatus('current')
upwardDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardDcnParentId.setStatus('current')
endOfUpwardDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardDcnTable.setStatus('current')
downwardDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7), )
if mibBuilder.loadTexts: downwardDcnTable.setStatus('current')
downwardDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnPortNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnExtNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnClassName"), (0, "ADVA-FSPR7-MIB", "downwardDcnIndex"))
if mibBuilder.loadTexts: downwardDcnEntry.setStatus('current')
downwardDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardDcnShelfNo.setStatus('current')
downwardDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardDcnSlotNo.setStatus('current')
downwardDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardDcnPortNo.setStatus('current')
downwardDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardDcnExtNo.setStatus('current')
downwardDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardDcnClassName.setStatus('current')
downwardDcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardDcnIndex.setStatus('current')
downwardDcnChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardDcnChildId.setStatus('current')
endOfDownwardDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardDcnTable.setStatus('current')
upwardEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9), )
if mibBuilder.loadTexts: upwardEnvTable.setStatus('current')
upwardEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvPortNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvExtNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvClassName"), (0, "ADVA-FSPR7-MIB", "upwardEnvIndex"))
if mibBuilder.loadTexts: upwardEnvEntry.setStatus('current')
upwardEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardEnvShelfNo.setStatus('current')
upwardEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardEnvSlotNo.setStatus('current')
upwardEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardEnvPortNo.setStatus('current')
upwardEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardEnvExtNo.setStatus('current')
upwardEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardEnvClassName.setStatus('current')
upwardEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardEnvIndex.setStatus('current')
upwardEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardEnvParentId.setStatus('current')
endOfUpwardEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardEnvTable.setStatus('current')
downwardEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11), )
if mibBuilder.loadTexts: downwardEnvTable.setStatus('current')
downwardEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvPortNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvExtNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvClassName"), (0, "ADVA-FSPR7-MIB", "downwardEnvIndex"))
if mibBuilder.loadTexts: downwardEnvEntry.setStatus('current')
downwardEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardEnvShelfNo.setStatus('current')
downwardEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardEnvSlotNo.setStatus('current')
downwardEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardEnvPortNo.setStatus('current')
downwardEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardEnvExtNo.setStatus('current')
downwardEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardEnvClassName.setStatus('current')
downwardEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardEnvIndex.setStatus('current')
downwardEnvChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardEnvChildId.setStatus('current')
endOfDownwardEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardEnvTable.setStatus('current')
upwardFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13), )
if mibBuilder.loadTexts: upwardFacilityTable.setStatus('current')
upwardFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityClassName"), (0, "ADVA-FSPR7-MIB", "upwardFacilityIndex"))
if mibBuilder.loadTexts: upwardFacilityEntry.setStatus('current')
upwardFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityShelfNo.setStatus('current')
upwardFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardFacilitySlotNo.setStatus('current')
upwardFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityPortNo.setStatus('current')
upwardFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityExtNo.setStatus('current')
upwardFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardFacilityClassName.setStatus('current')
upwardFacilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityIndex.setStatus('current')
upwardFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardFacilityParentId.setStatus('current')
downwardFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14), )
if mibBuilder.loadTexts: downwardFacilityTable.setStatus('current')
downwardFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityClassName"), (0, "ADVA-FSPR7-MIB", "downwardFacilityIndex"))
if mibBuilder.loadTexts: downwardFacilityEntry.setStatus('current')
downwardFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityShelfNo.setStatus('current')
downwardFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardFacilitySlotNo.setStatus('current')
downwardFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityPortNo.setStatus('current')
downwardFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityExtNo.setStatus('current')
downwardFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardFacilityClassName.setStatus('current')
downwardFacilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityIndex.setStatus('current')
downwardFacilityChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardFacilityChildId.setStatus('current')
endOfDownwardFacilityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardFacilityTable.setStatus('current')
upwardOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16), )
if mibBuilder.loadTexts: upwardOptLineTable.setStatus('current')
upwardOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardOptLineShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLinePortNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineExtNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineClassName"), (0, "ADVA-FSPR7-MIB", "upwardOptLineIndex"))
if mibBuilder.loadTexts: upwardOptLineEntry.setStatus('current')
upwardOptLineShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineShelfNo.setStatus('current')
upwardOptLineSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineSlotNo.setStatus('current')
upwardOptLinePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardOptLinePortNo.setStatus('current')
upwardOptLineExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineExtNo.setStatus('current')
upwardOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardOptLineClassName.setStatus('current')
upwardOptLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineIndex.setStatus('current')
upwardOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardOptLineParentId.setStatus('current')
endOfUpwardOptLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardOptLineTable.setStatus('current')
downwardOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18), )
if mibBuilder.loadTexts: downwardOptLineTable.setStatus('current')
downwardOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardOptLineShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLinePortNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineExtNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineClassName"), (0, "ADVA-FSPR7-MIB", "downwardOptLineIndex"))
if mibBuilder.loadTexts: downwardOptLineEntry.setStatus('current')
downwardOptLineShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineShelfNo.setStatus('current')
downwardOptLineSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineSlotNo.setStatus('current')
downwardOptLinePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardOptLinePortNo.setStatus('current')
downwardOptLineExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineExtNo.setStatus('current')
downwardOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardOptLineClassName.setStatus('current')
downwardOptLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineIndex.setStatus('current')
downwardOptLineChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardOptLineChildId.setStatus('current')
upwardTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19), )
if mibBuilder.loadTexts: upwardTerminPointTable.setStatus('current')
upwardTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndex"))
if mibBuilder.loadTexts: upwardTerminPointEntry.setStatus('current')
upwardTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo1.setStatus('current')
upwardTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo2.setStatus('current')
upwardTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo3.setStatus('current')
upwardTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo4.setStatus('current')
upwardTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardTerminPointClassName.setStatus('current')
upwardTerminPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndex.setStatus('current')
upwardTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardTerminPointParentId.setStatus('current')
downwardTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20), )
if mibBuilder.loadTexts: downwardTerminPointTable.setStatus('current')
downwardTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndex"))
if mibBuilder.loadTexts: downwardTerminPointEntry.setStatus('current')
downwardTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo1.setStatus('current')
downwardTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo2.setStatus('current')
downwardTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo3.setStatus('current')
downwardTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo4.setStatus('current')
downwardTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardTerminPointClassName.setStatus('current')
downwardTerminPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndex.setStatus('current')
downwardTerminPointChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardTerminPointChildId.setStatus('current')
endOfDownwardTerminPointTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardTerminPointTable.setStatus('current')
upwardExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23), )
if mibBuilder.loadTexts: upwardExternalPortTable.setStatus('current')
upwardExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortIndex"))
if mibBuilder.loadTexts: upwardExternalPortEntry.setStatus('current')
upwardExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortShelfNo.setStatus('current')
upwardExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortSlotNo.setStatus('current')
upwardExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortPortNo.setStatus('current')
upwardExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortExtNo.setStatus('current')
upwardExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardExternalPortClassName.setStatus('current')
upwardExternalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortIndex.setStatus('current')
upwardExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardExternalPortParentId.setStatus('current')
downwardExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24), )
if mibBuilder.loadTexts: downwardExternalPortTable.setStatus('current')
downwardExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortIndex"))
if mibBuilder.loadTexts: downwardExternalPortEntry.setStatus('current')
downwardExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortShelfNo.setStatus('current')
downwardExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortSlotNo.setStatus('current')
downwardExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortPortNo.setStatus('current')
downwardExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortExtNo.setStatus('current')
downwardExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardExternalPortClassName.setStatus('current')
downwardExternalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortIndex.setStatus('current')
downwardExternalPortChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardExternalPortChildId.setStatus('current')
endOfDownwardExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardExternalPortTable.setStatus('current')
upwardContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27), )
if mibBuilder.loadTexts: upwardContainerTable.setStatus('current')
upwardContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerPortNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerExtNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerClassName"), (0, "ADVA-FSPR7-MIB", "upwardContainerIndex"))
if mibBuilder.loadTexts: upwardContainerEntry.setStatus('current')
upwardContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardContainerShelfNo.setStatus('current')
upwardContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardContainerSlotNo.setStatus('current')
upwardContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardContainerPortNo.setStatus('current')
upwardContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardContainerExtNo.setStatus('current')
upwardContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardContainerClassName.setStatus('current')
upwardContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardContainerIndex.setStatus('current')
upwardContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardContainerParentId.setStatus('current')
endOfUpwardContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardContainerTable.setStatus('current')
downwardContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29), )
if mibBuilder.loadTexts: downwardContainerTable.setStatus('current')
downwardContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerPortNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerExtNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerClassName"), (0, "ADVA-FSPR7-MIB", "downwardContainerIndex"))
if mibBuilder.loadTexts: downwardContainerEntry.setStatus('current')
downwardContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardContainerShelfNo.setStatus('current')
downwardContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardContainerSlotNo.setStatus('current')
downwardContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardContainerPortNo.setStatus('current')
downwardContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardContainerExtNo.setStatus('current')
downwardContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardContainerClassName.setStatus('current')
downwardContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardContainerIndex.setStatus('current')
downwardContainerChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardContainerChildId.setStatus('current')
endOfDownwardContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardContainerTable.setStatus('current')
upwardOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31), )
if mibBuilder.loadTexts: upwardOpticalMuxTable.setStatus('current')
upwardOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxIndex"))
if mibBuilder.loadTexts: upwardOpticalMuxEntry.setStatus('current')
upwardOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxShelfNo.setStatus('current')
upwardOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxSlotNo.setStatus('current')
upwardOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxPortNo.setStatus('current')
upwardOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxExtNo.setStatus('current')
upwardOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardOpticalMuxClassName.setStatus('current')
upwardOpticalMuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxIndex.setStatus('current')
upwardOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardOpticalMuxParentId.setStatus('current')
endOfUpwardOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardOpticalMuxTable.setStatus('current')
downwardOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33), )
if mibBuilder.loadTexts: downwardOpticalMuxTable.setStatus('current')
downwardOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxIndex"))
if mibBuilder.loadTexts: downwardOpticalMuxEntry.setStatus('current')
downwardOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxShelfNo.setStatus('current')
downwardOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxSlotNo.setStatus('current')
downwardOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxPortNo.setStatus('current')
downwardOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxExtNo.setStatus('current')
downwardOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardOpticalMuxClassName.setStatus('current')
downwardOpticalMuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxIndex.setStatus('current')
downwardOpticalMuxChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardOpticalMuxChildId.setStatus('current')
endOfDownwardOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardOpticalMuxTable.setStatus('current')
upwardShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35), )
if mibBuilder.loadTexts: upwardShelfConnTable.setStatus('current')
upwardShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnIndex"))
if mibBuilder.loadTexts: upwardShelfConnEntry.setStatus('current')
upwardShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnShelfNo.setStatus('current')
upwardShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnSlotNo.setStatus('current')
upwardShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnPortNo.setStatus('current')
upwardShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnExtNo.setStatus('current')
upwardShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardShelfConnClassName.setStatus('current')
upwardShelfConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnIndex.setStatus('current')
upwardShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardShelfConnParentId.setStatus('current')
endOfUpwardShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardShelfConnTable.setStatus('current')
downwardShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37), )
if mibBuilder.loadTexts: downwardShelfConnTable.setStatus('current')
downwardShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnIndex"))
if mibBuilder.loadTexts: downwardShelfConnEntry.setStatus('current')
downwardShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnShelfNo.setStatus('current')
downwardShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnSlotNo.setStatus('current')
downwardShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnPortNo.setStatus('current')
downwardShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnExtNo.setStatus('current')
downwardShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardShelfConnClassName.setStatus('current')
downwardShelfConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnIndex.setStatus('current')
downwardShelfConnChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardShelfConnChildId.setStatus('current')
endOfDownwardShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardShelfConnTable.setStatus('current')
dependentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100), )
if mibBuilder.loadTexts: dependentTable.setStatus('current')
dependentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "dependentIndexNo1"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo2"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo3"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo4"), (0, "ADVA-FSPR7-MIB", "dependentClassName"), (0, "ADVA-FSPR7-MIB", "dependentIndex"))
if mibBuilder.loadTexts: dependentEntry.setStatus('current')
dependentIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo1.setStatus('current')
dependentIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo2.setStatus('current')
dependentIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 3), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo3.setStatus('current')
dependentIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 4), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo4.setStatus('current')
dependentClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 5), EntityClassName())
if mibBuilder.loadTexts: dependentClassName.setStatus('current')
dependentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 6), Unsigned32())
if mibBuilder.loadTexts: dependentIndex.setStatus('current')
dependentAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependentAid.setStatus('current')
dependentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependentId.setStatus('current')
endOfDependentTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDependentTable.setStatus('current')
endOfRelationship = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRelationship.setStatus('current')
notAssignableEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2), )
if mibBuilder.loadTexts: notAssignableEqptTable.setStatus('current')
notAssignableEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptClassName"))
if mibBuilder.loadTexts: notAssignableEqptEntry.setStatus('current')
notAssignableEqptIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo1.setStatus('current')
notAssignableEqptIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo2.setStatus('current')
notAssignableEqptIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo3.setStatus('current')
notAssignableEqptIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo4.setStatus('current')
notAssignableEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableEqptClassName.setStatus('current')
notAssignableEqptAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptAidString.setStatus('current')
notAssignableEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptParentId.setStatus('current')
notAssignableEqptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptClass.setStatus('current')
endOfNotAssignableEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableEqptTable.setStatus('current')
notAssignableDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4), )
if mibBuilder.loadTexts: notAssignableDcnTable.setStatus('current')
notAssignableDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnClassName"))
if mibBuilder.loadTexts: notAssignableDcnEntry.setStatus('current')
notAssignableDcnIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo1.setStatus('current')
notAssignableDcnIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo2.setStatus('current')
notAssignableDcnIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo3.setStatus('current')
notAssignableDcnIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo4.setStatus('current')
notAssignableDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableDcnClassName.setStatus('current')
notAssignableDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnAidString.setStatus('current')
notAssignableDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnParentId.setStatus('current')
notAssignableDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnClass.setStatus('current')
endOfNotAssignableDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableDcnTable.setStatus('current')
notAssignableFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7), )
if mibBuilder.loadTexts: notAssignableFacilityTable.setStatus('current')
notAssignableFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityClassName"))
if mibBuilder.loadTexts: notAssignableFacilityEntry.setStatus('current')
notAssignableFacilityIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo1.setStatus('current')
notAssignableFacilityIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo2.setStatus('current')
notAssignableFacilityIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo3.setStatus('current')
notAssignableFacilityIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo4.setStatus('current')
notAssignableFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableFacilityClassName.setStatus('current')
notAssignableFacilityAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityAidString.setStatus('current')
notAssignableFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityParentId.setStatus('current')
notAssignableFacilityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityClass.setStatus('current')
endOfNotAssignableFacilityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableFacilityTable.setStatus('current')
notAssignableOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9), )
if mibBuilder.loadTexts: notAssignableOptLineTable.setStatus('current')
notAssignableOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineClassName"))
if mibBuilder.loadTexts: notAssignableOptLineEntry.setStatus('current')
notAssignableOptLineIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo1.setStatus('current')
notAssignableOptLineIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo2.setStatus('current')
notAssignableOptLineIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo3.setStatus('current')
notAssignableOptLineIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo4.setStatus('current')
notAssignableOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableOptLineClassName.setStatus('current')
notAssignableOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineAidString.setStatus('current')
notAssignableOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineParentId.setStatus('current')
notAssignableOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineClass.setStatus('current')
endOfNotAssignableOptLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableOptLineTable.setStatus('current')
notAssignableEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11), )
if mibBuilder.loadTexts: notAssignableEnvTable.setStatus('current')
notAssignableEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvClassName"))
if mibBuilder.loadTexts: notAssignableEnvEntry.setStatus('current')
notAssignableEnvIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo1.setStatus('current')
notAssignableEnvIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo2.setStatus('current')
notAssignableEnvIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo3.setStatus('current')
notAssignableEnvIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo4.setStatus('current')
notAssignableEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableEnvClassName.setStatus('current')
notAssignableEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvAidString.setStatus('current')
notAssignableEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvParentId.setStatus('current')
notAssignableEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvClass.setStatus('current')
endOfNotAssignableEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableEnvTable.setStatus('current')
notAssignableExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13), )
if mibBuilder.loadTexts: notAssignableExternalPortTable.setStatus('current')
notAssignableExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortClassName"))
if mibBuilder.loadTexts: notAssignableExternalPortEntry.setStatus('current')
notAssignableExternalPortIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo1.setStatus('current')
notAssignableExternalPortIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo2.setStatus('current')
notAssignableExternalPortIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo3.setStatus('current')
notAssignableExternalPortIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo4.setStatus('current')
notAssignableExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableExternalPortClassName.setStatus('current')
notAssignableExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortAidString.setStatus('current')
notAssignableExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortParentId.setStatus('current')
notAssignableExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortClass.setStatus('current')
endOfNotAssignableExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableExternalPortTable.setStatus('current')
notAssignableContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15), )
if mibBuilder.loadTexts: notAssignableContainerTable.setStatus('current')
notAssignableContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerClassName"))
if mibBuilder.loadTexts: notAssignableContainerEntry.setStatus('current')
notAssignableContainerIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo1.setStatus('current')
notAssignableContainerIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo2.setStatus('current')
notAssignableContainerIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo3.setStatus('current')
notAssignableContainerIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo4.setStatus('current')
notAssignableContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableContainerClassName.setStatus('current')
notAssignableContainerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerAidString.setStatus('current')
notAssignableContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerParentId.setStatus('current')
notAssignableContainerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerClass.setStatus('current')
endOfNotAssignableContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableContainerTable.setStatus('current')
notAssignableOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17), )
if mibBuilder.loadTexts: notAssignableOpticalMuxTable.setStatus('current')
notAssignableOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxClassName"))
if mibBuilder.loadTexts: notAssignableOpticalMuxEntry.setStatus('current')
notAssignableOpticalMuxIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo1.setStatus('current')
notAssignableOpticalMuxIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo2.setStatus('current')
notAssignableOpticalMuxIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo3.setStatus('current')
notAssignableOpticalMuxIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo4.setStatus('current')
notAssignableOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableOpticalMuxClassName.setStatus('current')
notAssignableOpticalMuxAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxAidString.setStatus('current')
notAssignableOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxParentId.setStatus('current')
notAssignableOpticalMuxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxClass.setStatus('current')
endOfNotAssignableOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableOpticalMuxTable.setStatus('current')
notAssignableShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20), )
if mibBuilder.loadTexts: notAssignableShelfConnTable.setStatus('current')
notAssignableShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnClassName"))
if mibBuilder.loadTexts: notAssignableShelfConnEntry.setStatus('current')
notAssignableShelfConnIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo1.setStatus('current')
notAssignableShelfConnIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo2.setStatus('current')
notAssignableShelfConnIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo3.setStatus('current')
notAssignableShelfConnIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo4.setStatus('current')
notAssignableShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableShelfConnClassName.setStatus('current')
notAssignableShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnAidString.setStatus('current')
notAssignableShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnParentId.setStatus('current')
notAssignableShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnClass.setStatus('current')
endOfNotAssignableShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableShelfConnTable.setStatus('current')
endOfNotAssignables = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignables.setStatus('current')
advaInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1), )
if mibBuilder.loadTexts: advaInventoryTable.setStatus('current')
advaInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "advaInventoryShelfNo"), (0, "ADVA-FSPR7-MIB", "advaInventorySlotNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryPortNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryExtNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryClassName"))
if mibBuilder.loadTexts: advaInventoryEntry.setStatus('current')
advaInventoryShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: advaInventoryShelfNo.setStatus('current')
advaInventorySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: advaInventorySlotNo.setStatus('current')
advaInventoryPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: advaInventoryPortNo.setStatus('current')
advaInventoryExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: advaInventoryExtNo.setStatus('current')
advaInventoryClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: advaInventoryClassName.setStatus('current')
advaInventoryAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryAidString.setStatus('current')
advaInventoryUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryUnitName.setStatus('current')
advaInventoryFirmwarePackageRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryFirmwarePackageRev.setStatus('current')
advaInventoryHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryHardwareRev.setStatus('current')
advaInventorySoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventorySoftwareRev.setStatus('current')
advaInventoryFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryFpgaRev.setStatus('current')
advaInventorySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventorySerialNum.setStatus('current')
advaInventoryPartnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryPartnumber.setStatus('current')
advaInventoryCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCleiCode.setStatus('current')
advaInventoryVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryVendorId.setStatus('current')
advaInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 16), EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryType.setStatus('current')
advaInventoryUniversalSerialIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryUniversalSerialIdent.setStatus('current')
advaInventoryGradeInventory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 18), Grade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryGradeInventory.setStatus('current')
advaInventoryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 19), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryClass.setStatus('current')
advaInventoryInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryInventoryDescription.setStatus('current')
advaInventoryCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 21), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCapabilityLevel.setStatus('current')
unassignedInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2), )
if mibBuilder.loadTexts: unassignedInventoryTable.setStatus('current')
unassignedInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "advaInventoryShelfNo"), (0, "ADVA-FSPR7-MIB", "advaInventorySlotNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryPortNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryExtNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryClassName"))
if mibBuilder.loadTexts: unassignedInventoryEntry.setStatus('current')
unassignedInventoryAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryAidString.setStatus('current')
unassignedInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 2), EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryType.setStatus('current')
unassignedInventoryParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryParentId.setStatus('current')
unassignedInventoryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 4), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryClass.setStatus('current')
unassignedInventoryAssignState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 5), FspR7EquipmentAssignState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryAssignState.setStatus('current')
unassignedInventoryOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryOneIndex.setStatus('current')
unassignedInventoryTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryTableId.setStatus('current')
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", alarmSignalDegradeLine=alarmSignalDegradeLine, containerConnectStdParentId=containerConnectStdParentId, linkFendIPv6=linkFendIPv6, alarmTerminPointType=alarmTerminPointType, containerOwlgClass=containerOwlgClass, alarmRemoteDefectIndicationHigherOrderPath=alarmRemoteDefectIndicationHigherOrderPath, ratAnalyzerChannelTx=ratAnalyzerChannelTx, restrictToSysIP=restrictToSysIP, containerLanAidString=containerLanAidString, entityFilterCableClass=entityFilterCableClass, physicalPortTraceTransmitSapiOduTcmA=physicalPortTraceTransmitSapiOduTcmA, virtualPortSigDegThresOduTcmB=virtualPortSigDegThresOduTcmB, containerOwlgTable=containerOwlgTable, upwardShelfConnParentId=upwardShelfConnParentId, whitelistRowStatus=whitelistRowStatus, opticalMuxValidSigTimer=opticalMuxValidSigTimer, upwardDcnEntry=upwardDcnEntry, physicalPortSigDegThresOduTcmA=physicalPortSigDegThresOduTcmA, envPortTifAlarmMessage=envPortTifAlarmMessage, ipv6InActRoutesClassName=ipv6InActRoutesClassName, containerCrsOptLineFromPointIndexNo4=containerCrsOptLineFromPointIndexNo4, entityCrsOptLineToIndexNo2=entityCrsOptLineToIndexNo2, containerShelfClass=containerShelfClass, alarmOosManagement=alarmOosManagement, changePhysicalPortServiceDispersionMode=changePhysicalPortServiceDispersionMode, downwardExternalPortPortNo=downwardExternalPortPortNo, alarmMismatch=alarmMismatch, entitySysSlotNo=entitySysSlotNo, upwardEnvShelfNo=upwardEnvShelfNo, alarmLossOfGfpFrame=alarmLossOfGfpFrame, physicalPortCbsTrmt=physicalPortCbsTrmt, alarmSeverityShelfConnValue=alarmSeverityShelfConnValue, opticalMuxOperState=opticalMuxOperState, optThresholdConfigHighConfig=optThresholdConfigHighConfig, entityEqptTableId=entityEqptTableId, ratAnalyzerFromAid=ratAnalyzerFromAid, isolateInbandChan=isolateInbandChan, alarmOptInputPwrReceivedTooLow=alarmOptInputPwrReceivedTooLow, optIntervalPm15minLow=optIntervalPm15minLow, containerEthEntry=containerEthEntry, transientInstallFwpCompleted=transientInstallFwpCompleted, fanAlias=fanAlias, containerConnectNonStdEntry=containerConnectNonStdEntry, downwardExternalPortClassName=downwardExternalPortClassName, shelfConnTable=shelfConnTable, alarmAseLow=alarmAseLow, crossOpticalLineSecondaryStates=crossOpticalLineSecondaryStates, downwardShelfConnIndex=downwardShelfConnIndex, moduleAvlndpF2967Txcrs=moduleAvlndpF2967Txcrs, containerCrossConnToPortNo=containerCrossConnToPortNo, alarmAttOnTransmitterFiberLowerThanMonitor=alarmAttOnTransmitterFiberLowerThanMonitor, crossOpticalLineTunnelAid=crossOpticalLineTunnelAid, alarmOduAutoShutdownRxAIS=alarmOduAutoShutdownRxAIS, endOfFeatureSpecific=endOfFeatureSpecific, upwardExternalPortTable=upwardExternalPortTable, eqptMgmt=eqptMgmt, channelTracesChannelNumber=channelTracesChannelNumber, containerExternalPortSlotNo=containerExternalPortSlotNo, scIpMask=scIpMask, changePhysicalPortServiceSigDegThresOduTcmC=changePhysicalPortServiceSigDegThresOduTcmC, transientEqlzNotRequired=transientEqlzNotRequired, externalPortLineCoding=externalPortLineCoding, entityEqptAidString=entityEqptAidString, alarmSeveritySysEntry=alarmSeveritySysEntry, alarmBackwardDefectIndicationOduTcmA=alarmBackwardDefectIndicationOduTcmA, alarmCarrierFreqOffsetTooHigh=alarmCarrierFreqOffsetTooHigh, entityMtosiSlotsTable=entityMtosiSlotsTable, upwardEqptShelfNo=upwardEqptShelfNo, oprIntervalPm15minHigh=oprIntervalPm15minHigh, pmSnapshotCurrentOutputPower=pmSnapshotCurrentOutputPower, facilityReferByTerminPoint=facilityReferByTerminPoint, downwardExternalPortExtNo=downwardExternalPortExtNo, containerTerminPointClassName=containerTerminPointClassName, entityCrossConnTableId=entityCrossConnTableId, physicalPortDispersionSetting=physicalPortDispersionSetting, virtualPortTraceTransmitSapiOdu=virtualPortTraceTransmitSapiOdu, alarmOpenConnectionIndicationOdu=alarmOpenConnectionIndicationOdu, alarmFiberConnDataFailure=alarmFiberConnDataFailure, alarmSeverityEqptTable=alarmSeverityEqptTable, entityFacilityEntry=entityFacilityEntry, physicalPortDataLayerPmReset=physicalPortDataLayerPmReset, containerContainer=containerContainer, containerCrossConnToClassName=containerCrossConnToClassName, scFendTransportTermPoint=scFendTransportTermPoint, changePhysicalPortServiceDispersionSetting=changePhysicalPortServiceDispersionSetting, entityShelfConnTableId=entityShelfConnTableId, lsrtempThresholdConfigHighFixed=lsrtempThresholdConfigHighFixed, entityShelfConnEntry=entityShelfConnEntry, moduleGenericPlugRates=moduleGenericPlugRates, containerPlugClassName=containerPlugClassName, containerEccClassName=containerEccClassName, externalPortMaxOptPowerRcv=externalPortMaxOptPowerRcv, entityEnvSlotNo=entityEnvSlotNo, alarmSeveritySysTable=alarmSeveritySysTable, alarmSeverityEnvTable=alarmSeverityEnvTable, linkIpType=linkIpType, optIntervalPm15minTable=optIntervalPm15minTable, virtualPortTraceRcvSapiOdu=virtualPortTraceRcvSapiOdu, entityCrossDcnShelfNo=entityCrossDcnShelfNo, alarmDcnEntry=alarmDcnEntry, advaInventoryPortNo=advaInventoryPortNo, opticalLineRxLineAttenuation=opticalLineRxLineAttenuation, crossOpticalLineRedLineState=crossOpticalLineRedLineState, alarmFwpMismatchDownloadServiceAffecting=alarmFwpMismatchDownloadServiceAffecting, containerCrossDcnExtNo=containerCrossDcnExtNo, containerTerminPointAidString=containerTerminPointAidString, containerLinkClassName=containerLinkClassName, shelfChannelSpacing=shelfChannelSpacing, upwardShelfConnEntry=upwardShelfConnEntry, entityMtosiSlotsParentId=entityMtosiSlotsParentId, scFarEndPort=scFarEndPort, moduleLanAid=moduleLanAid, containerConnectStdClass=containerConnectStdClass, alarmDuplexLinkFailure=alarmDuplexLinkFailure, optIntervalPm15minHigh=optIntervalPm15minHigh, changePhysicalPortServiceLaneChannelSetting=changePhysicalPortServiceLaneChannelSetting, changePhysicalPortServiceTimModeSonetSection=changePhysicalPortServiceTimModeSonetSection, notAssignableOpticalMuxEntry=notAssignableOpticalMuxEntry, externalPortFrameFormat=externalPortFrameFormat, whitelistTable=whitelistTable, alarmSeverityTerminPointType=alarmSeverityTerminPointType, entityCrsOptLineFromIndexNo4=entityCrsOptLineFromIndexNo4, containerChClassName=containerChClassName, physicalPortTimModeOtu=physicalPortTimModeOtu, alarmSeverityEnvEntry=alarmSeverityEnvEntry, containerExternalPortExtNo=containerExternalPortExtNo, shelfConnSecondaryStates=shelfConnSecondaryStates, optIntervalPm1weekEntry=optIntervalPm1weekEntry, alarmLatencyTooLow=alarmLatencyTooLow, physicalPortSwitchCommand=physicalPortSwitchCommand, scIPv6LinkLocal=scIPv6LinkLocal, scAutonegotiation=scAutonegotiation, containerExternalPortParentId=containerExternalPortParentId, notAssignableEnvClass=notAssignableEnvClass, opticalMuxVoaSetpoint=opticalMuxVoaSetpoint, alarmSeverityFacilityValue=alarmSeverityFacilityValue, virtualPortTraceTransmitDapiOdu=virtualPortTraceTransmitDapiOdu, ipv6ActRoutesNextHop=ipv6ActRoutesNextHop, physicalPortPortMode=physicalPortPortMode, physicalPortTributarySlotMethod=physicalPortTributarySlotMethod, moduleDescription=moduleDescription, endOfRatStartPointTable=endOfRatStartPointTable, entityCrsOptLineToClassName=entityCrsOptLineToClassName, virtualPortSigDegThresOduTcmC=virtualPortSigDegThresOduTcmC, transientThres1DayExceededOduTcmBES=transientThres1DayExceededOduTcmBES, entityOpticalMuxShelfNo=entityOpticalMuxShelfNo, endOfShelfConnMgmt=endOfShelfConnMgmt, transientFarEndDyingGasp=transientFarEndDyingGasp, changePhysicalPortServiceLaserOffDelayFunction=changePhysicalPortServiceLaserOffDelayFunction, externalPortType=externalPortType, opticalMuxChannelsProvision=opticalMuxChannelsProvision, sslCertIp=sslCertIp, entityTerminPointClass=entityTerminPointClass, alarmOptSignalFailure=alarmOptSignalFailure, notAssignableShelfConnParentId=notAssignableShelfConnParentId, changePhysicalPortServiceTxOffTimer=changePhysicalPortServiceTxOffTimer, downwardShelfConnTable=downwardShelfConnTable, alarmBackwardDefectIndicationOduTcmB=alarmBackwardDefectIndicationOduTcmB, containerVschClass=containerVschClass, containerShelfParentId=containerShelfParentId, pmSnapshotHistoricalTable=pmSnapshotHistoricalTable, scAdmin=scAdmin, aidMappingId=aidMappingId, linkRowStatus=linkRowStatus, alarmAseTableGenFailHighBackreflection=alarmAseTableGenFailHighBackreflection, transientCryptoPasswdChanged=transientCryptoPasswdChanged, ipv6InActRoutesPrefix=ipv6InActRoutesPrefix, entityCrossConnClass=entityCrossConnClass, containerConnectNonStdParentId=containerConnectNonStdParentId, containerShelfConnEntry=containerShelfConnEntry, entityCrossConnToExtNo=entityCrossConnToExtNo, containerConnectStdTable=containerConnectStdTable, alarmThres15MinExceededOduSES=alarmThres15MinExceededOduSES, containerVchPortNo=containerVchPortNo, crossDcnLink=crossDcnLink, dependentIndexNo2=dependentIndexNo2, crossConnectionCrsType=crossConnectionCrsType, transientCryptoRtf=transientCryptoRtf, containerExternalPortShelfNo=containerExternalPortShelfNo, containerFanTable=containerFanTable, entityEnvOneIndex=entityEnvOneIndex, downwardTerminPointIndex=downwardTerminPointIndex, containerVomSlotNo=containerVomSlotNo, eccEntry=eccEntry, alarmThres15MinExceededOduTcmASES=alarmThres15MinExceededOduTcmASES, physicalPortTributaryAssignedSlotNo=physicalPortTributaryAssignedSlotNo, downwardOpticalMuxChildId=downwardOpticalMuxChildId, notAssignableContainerParentId=notAssignableContainerParentId, notAssignableEnvTable=notAssignableEnvTable, containerModEntry=containerModEntry, alarmOosDisabled=alarmOosDisabled, lanType=lanType, containerVch1Entry=containerVch1Entry, containerEnvTableId=containerEnvTableId, physicalPortRateLimit=physicalPortRateLimit, endOfEnvMgmt=endOfEnvMgmt, scTrmtFrequency=scTrmtFrequency, containerPchTableId=containerPchTableId, entityExternalPortType=entityExternalPortType, moduleFiberDetect=moduleFiberDetect, ffpHoldOffTime=ffpHoldOffTime, upwardEqptSlotNo=upwardEqptSlotNo, containerCrossConnTableId=containerCrossConnTableId, plugTable=plugTable, alarmThres15MinExceededPhysConvES=alarmThres15MinExceededPhysConvES, lsrtempThresholdConfigEntry=lsrtempThresholdConfigEntry, ratStartPointEntry=ratStartPointEntry, opticalMuxOptUpdate=opticalMuxOptUpdate, entitySysType=entitySysType, showLastLoginFail=showLastLoginFail, alarmLockedDefectOduTcmB=alarmLockedDefectOduTcmB, entityCrossConnToSlotNo=entityCrossConnToSlotNo, ipv6ActRoutesTable=ipv6ActRoutesTable, alarmProfileSeverityValue=alarmProfileSeverityValue, alarmLossofSequenceLowerOrderPath=alarmLossofSequenceLowerOrderPath, syslogIPv6Table=syslogIPv6Table, virtualPortSwitchCommand=virtualPortSwitchCommand, syslogIPv4Ip=syslogIPv4Ip, physicalPortDuplexMode=physicalPortDuplexMode, entityContainerParentId=entityContainerParentId, upwardDcnShelfNo=upwardDcnShelfNo, entityExternalPortExtNo=entityExternalPortExtNo, containerVomPortNo=containerVomPortNo, containerCrsOptLineFromId=containerCrsOptLineFromId, containerOmShelfNo=containerOmShelfNo, alarmMultiplexStructureIdentifierMismatchOPU=alarmMultiplexStructureIdentifierMismatchOPU, notAssignableShelfConnIndexNo1=notAssignableShelfConnIndexNo1, containerShelfConnClassName=containerShelfConnClassName, opticalMuxTiltSet=opticalMuxTiltSet, transientThres1DayExceededOtuBbe=transientThres1DayExceededOtuBbe, physicalPortGropticsType=physicalPortGropticsType, entitySysTableId=entitySysTableId, containerCrossConnToSlotNo=containerCrossConnToSlotNo, scPriority=scPriority, alarmOpenConnectionIndicationOduTcmA=alarmOpenConnectionIndicationOduTcmA, containerVschPortNo=containerVschPortNo, alarmVirtualChannelAis=alarmVirtualChannelAis, terminationPointLevel=terminationPointLevel, entityFfpAidString=entityFfpAidString, changePhysicalPortServiceTraceTransmitSapiOdu=changePhysicalPortServiceTraceTransmitSapiOdu, upwardShelfConnTable=upwardShelfConnTable, changeService=changeService, shelfFDports=shelfFDports, ratStartPointChannelNumber=ratStartPointChannelNumber, containerShelfEquipmentState=containerShelfEquipmentState, virtualPortConnState=virtualPortConnState, containerLinkTableId=containerLinkTableId, endOfNeMgmt=endOfNeMgmt, dcnMgmt=dcnMgmt, performanceFacility=performanceFacility, notAssignableDcnEntry=notAssignableDcnEntry, entityCrossConnFromId=entityCrossConnFromId, identifyTraps=identifyTraps, physicalPortLaneGroup=physicalPortLaneGroup)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", physicalPortTraceRcvOpspTcmb=physicalPortTraceRcvOpspTcmb, entityCrossConnAidString=entityCrossConnAidString, externalPortConnectionState=externalPortConnectionState, alarmDispersionCompensationTooLow=alarmDispersionCompensationTooLow, notAssignableOpticalMuxAidString=notAssignableOpticalMuxAidString, changePhysicalPortServiceAlsMode=changePhysicalPortServiceAlsMode, dosProtection=dosProtection, alarmTerminPointEntry=alarmTerminPointEntry, protection=protection, containerFfpPortNo=containerFfpPortNo, containerCrossConnFromPointTable=containerCrossConnFromPointTable, ratStartPointIndexNo4=ratStartPointIndexNo4, opticalMuxMgmt=opticalMuxMgmt, opticalMuxChannelsNumber=opticalMuxChannelsNumber, containerOlTableId=containerOlTableId, opticalMuxTrmtChannel=opticalMuxTrmtChannel, alarmSwitchtoProtectionInhibited=alarmSwitchtoProtectionInhibited, externalPortAlias=externalPortAlias, opticalLineLogicalInterfaceAid=opticalLineLogicalInterfaceAid, containerCrossConnFromPointSlotNo=containerCrossConnFromPointSlotNo, containerVethTable=containerVethTable, changePhysicalPortServiceSigDegThresSonetLine=changePhysicalPortServiceSigDegThresSonetLine, entityOpticalMuxClass=entityOpticalMuxClass, pmSnapshotHistoricalEntry=pmSnapshotHistoricalEntry, facilityMgmt=facilityMgmt, showLastLoginSuccess=showLastLoginSuccess, containerEccParentId=containerEccParentId, virtualPortLacpMode=virtualPortLacpMode, scDataLayerPmReset=scDataLayerPmReset, notAssignableContainerAidString=notAssignableContainerAidString, terminationPointFrequency=terminationPointFrequency, entityFfpTableId=entityFfpTableId, endOfUpwardContainerTable=endOfUpwardContainerTable, physicalPortIngressTid=physicalPortIngressTid, ntpIPv4Admin=ntpIPv4Admin, containerExternalPortEntry=containerExternalPortEntry, alarmDsbdChannelPowerTooHigh=alarmDsbdChannelPowerTooHigh, linkProxyArp=linkProxyArp, ffpDirection=ffpDirection, crossConnectionType=crossConnectionType, endOfNotAssignableEqptTable=endOfNotAssignableEqptTable, virtualPortRedLineState=virtualPortRedLineState, notAssignableEnvIndexNo1=notAssignableEnvIndexNo1, alarmFacilityType=alarmFacilityType, filterCableEntry=filterCableEntry, externalPortTable=externalPortTable, shelfBandProvision=shelfBandProvision, endOfUpwardShelfConnTable=endOfUpwardShelfConnTable, containerFfpSlotNo=containerFfpSlotNo, ipv6InActRoutesDestIp=ipv6InActRoutesDestIp, physicalPortLaserBiasCurrLevel=physicalPortLaserBiasCurrLevel, alarmContainerType=alarmContainerType, ffpSignalDegradeSwitching=ffpSignalDegradeSwitching, dependentAid=dependentAid, ratTo=ratTo, alarmInputVoltageFailure=alarmInputVoltageFailure, ratAnalyzerTable=ratAnalyzerTable, opticalMuxTransmitWavelength=opticalMuxTransmitWavelength, scIpMaskMonitor=scIpMaskMonitor, physicalPortBand=physicalPortBand, containerModPortNo=containerModPortNo, opticalLineAlias=opticalLineAlias, entityCrsOptLineToId=entityCrsOptLineToId, physicalPortSigDegThresSonetSection=physicalPortSigDegThresSonetSection, physicalPortRate=physicalPortRate, changePhysicalPortServiceSigDegPeriodOtu=changePhysicalPortServiceSigDegPeriodOtu, linkNendIPv6=linkNendIPv6, entityDcnShelfNo=entityDcnShelfNo, downwardEnvExtNo=downwardEnvExtNo, containerConnectNonStdClassName=containerConnectNonStdClassName, endOfScTable=endOfScTable, alarmOosAins=alarmOosAins, physicalPortSigDegPeriodOtu=physicalPortSigDegPeriodOtu, fanOperState=fanOperState, scFarEndTid=scFarEndTid, containerTerminPointParentId=containerTerminPointParentId, transientThres1DayExceededOduTcmAUAS=transientThres1DayExceededOduTcmAUAS, containerCrossConnFromPointFromId=containerCrossConnFromPointFromId, containerVomEntry=containerVomEntry, alarmSignalDegradeOduTcmA=alarmSignalDegradeOduTcmA, alarmSysTable=alarmSysTable, alarmAlarmIndicationSignalOpu=alarmAlarmIndicationSignalOpu, downwardTerminPointTable=downwardTerminPointTable, fanForceDestroy=fanForceDestroy, alarmOosDisabledLckOduRx=alarmOosDisabledLckOduRx, downwardOptLineClassName=downwardOptLineClassName, moduleAvlndpF125Txcrs=moduleAvlndpF125Txcrs, downwardEnvIndex=downwardEnvIndex, transientHardwareResetInputTIF=transientHardwareResetInputTIF, upwardContainerExtNo=upwardContainerExtNo, entityCrsOptLineClassName=entityCrsOptLineClassName, alarmFiberConnLos=alarmFiberConnLos, virtualPortOutputPower=virtualPortOutputPower, containerLanExtNo=containerLanExtNo, physicalPortLossAttenuation=physicalPortLossAttenuation, alarmSignalDegradeOlm=alarmSignalDegradeOlm, alarmThres15MinExceededOduTcmBSES=alarmThres15MinExceededOduTcmBSES, alarmTemperatureTooHigh=alarmTemperatureTooHigh, containerOwlgIndexNo4=containerOwlgIndexNo4, ipv6InActRoutesNextHop=ipv6InActRoutesNextHop, notAssignableEqptClass=notAssignableEqptClass, unassignedInventoryAidString=unassignedInventoryAidString, entityTerminPointAssignState=entityTerminPointAssignState, alarmAutoShutdownBlock=alarmAutoShutdownBlock, lanOperState=lanOperState, alarmLossOfFrameLossOfMultiFrameOdu=alarmLossOfFrameLossOfMultiFrameOdu, alarmTraceIdentifierMismatchOtu=alarmTraceIdentifierMismatchOtu, ntpIPv6Test=ntpIPv6Test, alarmLossOfLaneOtu=alarmLossOfLaneOtu, entityCrossConnFromShelfNo=entityCrossConnFromShelfNo, alarmFacilityDataRateNotSupported=alarmFacilityDataRateNotSupported, upwardFacilityPortNo=upwardFacilityPortNo, containerConnectStdFromIndexNo3=containerConnectStdFromIndexNo3, alarmSeverityEqptType=alarmSeverityEqptType, changePhysicalPortServiceTraceTransmitOpspOdu=changePhysicalPortServiceTraceTransmitOpspOdu, dependentEntry=dependentEntry, alarmFiberConnMismatch=alarmFiberConnMismatch, ratSuperChannelFq=ratSuperChannelFq, alarmDcnTimeStamp=alarmDcnTimeStamp, ipv6ActRoutesDestIp=ipv6ActRoutesDestIp, virtualPortChannelSpacing=virtualPortChannelSpacing, changePhysicalPortServiceFlowControl=changePhysicalPortServiceFlowControl, fspR7WriteAccessRevoked=fspR7WriteAccessRevoked, ntpIPv6RowStatus=ntpIPv6RowStatus, notAssignableEqptEntry=notAssignableEqptEntry, notAssignableOptLineIndexNo1=notAssignableOptLineIndexNo1, containers=containers, changePhysicalPortServiceDisparityCorrection=changePhysicalPortServiceDisparityCorrection, featureSpecific=featureSpecific, upwardShelfConnIndex=upwardShelfConnIndex, transientCryptoFwpRevChanged=transientCryptoFwpRevChanged, notAssignableDcnIndexNo1=notAssignableDcnIndexNo1, endOfAlarmProfileSeverityTable=endOfAlarmProfileSeverityTable, changePhysicalPortServiceFarEndCommunication=changePhysicalPortServiceFarEndCommunication, containerPlugClass=containerPlugClass, transientThres1DayExceededOduTcmBUAS=transientThres1DayExceededOduTcmBUAS, crossConnectionConn=crossConnectionConn, entityEnvShelfNo=entityEnvShelfNo, containerConnectNonStdFromId=containerConnectNonStdFromId, virtualSessionIpAddress=virtualSessionIpAddress, ratBlockingAid=ratBlockingAid, endOfContainers=endOfContainers, scFarEndSigDegThres=scFarEndSigDegThres, containerCrsOptLineToIndexNo1=containerCrsOptLineToIndexNo1, shelfRack=shelfRack, endOfLinkTable=endOfLinkTable, physicalPortTrafficDirection=physicalPortTrafficDirection, alarmFaultOnOpm=alarmFaultOnOpm, linkSecondaryStates=linkSecondaryStates, entityCrsOptLineFromIndexNo1=entityCrsOptLineFromIndexNo1, changePhysicalPortServiceTraceTransmitDapiOduTcmA=changePhysicalPortServiceTraceTransmitDapiOduTcmA, scIpType=scIpType, upwardOptLineParentId=upwardOptLineParentId, entityProtectionCableParentId=entityProtectionCableParentId, crossDcnEntry=crossDcnEntry, endOfserviceDiagnostics=endOfserviceDiagnostics, neMgmt=neMgmt, scAlsMode=scAlsMode, changePhysicalPortServiceOpticalSetPoint=changePhysicalPortServiceOpticalSetPoint, notAssignableOptLineAidString=notAssignableOptLineAidString, transientThres1DayExceededOduES=transientThres1DayExceededOduES, transientBootUpStarted=transientBootUpStarted, containerCrsOptLineFromPointTable=containerCrsOptLineFromPointTable, alarmThres15MinExceededSonetSectSES=alarmThres15MinExceededSonetSectSES, entityOpticalMuxTableId=entityOpticalMuxTableId, physicalPortChannelBandwith=physicalPortChannelBandwith, upwardDcnExtNo=upwardDcnExtNo, virtualPortTraceExpectedOdu=virtualPortTraceExpectedOdu, upwardOptLineEntry=upwardOptLineEntry, entityTerminPointReferencedTo=entityTerminPointReferencedTo, alarmGfpLossOfClientSig=alarmGfpLossOfClientSig, alarmCapabilityLevelMismatch=alarmCapabilityLevelMismatch, containerOlClass=containerOlClass, physicalPortSigDegThresSdhMs=physicalPortSigDegThresSdhMs, downwardEqptIndex=downwardEqptIndex, endOfDownwardEnvTable=endOfDownwardEnvTable, eccAdmin=eccAdmin, physicalPortTraceExpectedOduTcmC=physicalPortTraceExpectedOduTcmC, specificMgmt=specificMgmt, transientThres1DayExceededOduSES=transientThres1DayExceededOduSES, entityExternalPortParentId=entityExternalPortParentId, entityEqptMtosiParentId=entityEqptMtosiParentId, shelfConnEntry=shelfConnEntry, virtualPortSigDegPeriodOduTcmC=virtualPortSigDegPeriodOduTcmC, scFiberType=scFiberType, physicalPortAvlntsTxcrs=physicalPortAvlntsTxcrs, performanceFacilityMonitoring=performanceFacilityMonitoring, virtualPortSigDegPeriodOduTcmA=virtualPortSigDegPeriodOduTcmA, physicalPortSecondaryStates=physicalPortSecondaryStates, virtualPortPayload=virtualPortPayload, alarmHwFailure=alarmHwFailure, physicalPortForceLaserOn=physicalPortForceLaserOn, transientThres1DayExceededOduTcmBBbe=transientThres1DayExceededOduTcmBBbe, alarmDbReplicationIncompleted=alarmDbReplicationIncompleted, writeAccessStatus=writeAccessStatus, alarmRemoved=alarmRemoved, downwardOpticalMuxEntry=downwardOpticalMuxEntry, alarmBrPwrRxTooHigh=alarmBrPwrRxTooHigh, containerOlEntry=containerOlEntry, endOfAlarmSeverityDcnTable=endOfAlarmSeverityDcnTable, transientThres1DayExceededOduTcmCUAS=transientThres1DayExceededOduTcmCUAS, moduleSupply=moduleSupply, containerShelfConnShelfNo=containerShelfConnShelfNo, upwardOptLineIndex=upwardOptLineIndex, ntpIPv6Entry=ntpIPv6Entry, pmSnapshotCurrentTerminPointFiberConnAtten=pmSnapshotCurrentTerminPointFiberConnAtten, entityOpticalMuxParentId=entityOpticalMuxParentId, endOfShelfTable=endOfShelfTable, containerWchEntry=containerWchEntry, virtualPortTraceRcvDapiTcmb=virtualPortTraceRcvDapiTcmb, ffpTable=ffpTable, virtualPortBundle=virtualPortBundle, dcnReferByEntry=dcnReferByEntry, moduleDeploy=moduleDeploy, whitelistEntry=whitelistEntry, externalPortEntry=externalPortEntry, downwardEnvChildId=downwardEnvChildId, containerLanEntry=containerLanEntry, upwardTerminPointParentId=upwardTerminPointParentId, plugBidirectionalChannel=plugBidirectionalChannel, alarmAseTableBuild=alarmAseTableBuild, filterCableType=filterCableType, downwardShelfConnShelfNo=downwardShelfConnShelfNo, upwardContainerClassName=upwardContainerClassName, scConnectionType=scConnectionType, relationship=relationship, containerEthSlotNo=containerEthSlotNo, scBitrate=scBitrate, entityConnectionAidString=entityConnectionAidString, alarmDatabaseFailure=alarmDatabaseFailure, alarmCarrierFreqOffsetTooLow=alarmCarrierFreqOffsetTooLow, entityProtectionCableClassName=entityProtectionCableClassName, transientFwpSwitchStarted=transientFwpSwitchStarted, notAssignableShelfConnIndexNo4=notAssignableShelfConnIndexNo4, ffpWorkingAid=ffpWorkingAid, containerCrossDcnSlotNo=containerCrossDcnSlotNo, containerFfpAidString=containerFfpAidString, containerVethSlotNo=containerVethSlotNo, physicalPortTimModeOduTcmC=physicalPortTimModeOduTcmC, ipv6InActRoutesTable=ipv6InActRoutesTable, transientThres1DayExceededSonetLineUAS=transientThres1DayExceededSonetLineUAS, containerCrossConnParentId=containerCrossConnParentId, physicalPortTraceTransmitDapiOduTcmC=physicalPortTraceTransmitDapiOduTcmC, containerPchParentId=containerPchParentId, physicalPortProtectionRole=physicalPortProtectionRole, lanAreaAid=lanAreaAid, physicalPortVethAid=physicalPortVethAid, physicalPortSigDegPeriodOduTcmB=physicalPortSigDegPeriodOduTcmB, containerVethAidString=containerVethAidString, opticalMuxSigDegThresReceiver=opticalMuxSigDegThresReceiver, upwardExternalPortExtNo=upwardExternalPortExtNo, transientThres1DayExceededFecES=transientThres1DayExceededFecES, alarmWtrTimerRunning=alarmWtrTimerRunning, downwardEqptEntry=downwardEqptEntry)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", moduleEccPorts=moduleEccPorts, entityEnvType=entityEnvType, containerPchShelfNo=containerPchShelfNo, containerCrossConnClass=containerCrossConnClass, ratAnalyzerRouteId=ratAnalyzerRouteId, containerCrsOptLineFromPointIndexNo2=containerCrsOptLineFromPointIndexNo2, containerShelfPortNo=containerShelfPortNo, syslogIPv4SecurityReports=syslogIPv4SecurityReports, physicalPortEqlzAdmin=physicalPortEqlzAdmin, ntpIPv4RowStatus=ntpIPv4RowStatus, physicalPortOpuPayloadType=physicalPortOpuPayloadType, optIntervalPm1dayTable=optIntervalPm1dayTable, entityFacilityShelfNo=entityFacilityShelfNo, entityEqptClass=entityEqptClass, alarmAutoShutdownLaserOffDueToErrFwd=alarmAutoShutdownLaserOffDueToErrFwd, physicalPortLaneChannel4=physicalPortLaneChannel4, crossConnectionOperState=crossConnectionOperState, dependentIndexNo3=dependentIndexNo3, changePhysicalPortServiceTraceTransmitDapiOdu=changePhysicalPortServiceTraceTransmitDapiOdu, shelfRackNumber=shelfRackNumber, entityCrossDcnClass=entityCrossDcnClass, entityExternalPortTableId=entityExternalPortTableId, containerEccEntry=containerEccEntry, pmSnapshotCurrentRxLineAtten=pmSnapshotCurrentRxLineAtten, notAssignableOpticalMuxClassName=notAssignableOpticalMuxClassName, entityCrsOptLineAidString=entityCrsOptLineAidString, alarmExternalPortAffect=alarmExternalPortAffect, lanIPv6=lanIPv6, alarmContainerSeverity=alarmContainerSeverity, advaInventoryVendorId=advaInventoryVendorId, alarmEncryptionModuleCryPasswdError=alarmEncryptionModuleCryPasswdError, changePhysicalPortServiceOpuPayloadType=changePhysicalPortServiceOpuPayloadType, virtualPortCbsRcv=virtualPortCbsRcv, linkFarEndIp=linkFarEndIp, containerOtlgShelfNo=containerOtlgShelfNo, containerCrossConnFromPortNo=containerCrossConnFromPortNo, containerCrossDcnClass=containerCrossDcnClass, physicalPortTraceRcvOpspOtu=physicalPortTraceRcvOpspOtu, alarmSeverityEqptValue=alarmSeverityEqptValue, containerShelfAidString=containerShelfAidString, alarmSeverityDcnType=alarmSeverityDcnType, connectionRowStatus=connectionRowStatus, containerVomTable=containerVomTable, dependentClassName=dependentClassName, terminationPointConnType=terminationPointConnType, alarmConfOutPowerTransTooLow=alarmConfOutPowerTransTooLow, endOfUpwardEnvTable=endOfUpwardEnvTable, transientThres1DayExceededOduTcmCSES=transientThres1DayExceededOduTcmCSES, physicalPortPrbsPmReset=physicalPortPrbsPmReset, alarmSignalDegradeScn=alarmSignalDegradeScn, plugConnectorType=plugConnectorType, downwardOptLineTable=downwardOptLineTable, upwardContainerParentId=upwardContainerParentId, containerPchEntry=containerPchEntry, endOfNotAssignableEnvTable=endOfNotAssignableEnvTable, oprIntervalPm1weekValidFlag=oprIntervalPm1weekValidFlag, entityTerminPointEntry=entityTerminPointEntry, icmpSourceQuench=icmpSourceQuench, alarmXfpDecisionThresSetFailed=alarmXfpDecisionThresSetFailed, moduleChannelSpacingProvision=moduleChannelSpacingProvision, advaFspR7=advaFspR7, sslRenewMode=sslRenewMode, alarmEnvType=alarmEnvType, aidMappingString=aidMappingString, endOfAlarmShelfConnTable=endOfAlarmShelfConnTable, entityMtosiSlotsSlotNo=entityMtosiSlotsSlotNo, physicalPortRedLineState=physicalPortRedLineState, scIPv6PrefixLen=scIPv6PrefixLen, alarmSwitchtoWorkingInhibited=alarmSwitchtoWorkingInhibited, ratAnalyzerRouteType=ratAnalyzerRouteType, containerCrsOptLineToIndexNo4=containerCrsOptLineToIndexNo4, entityOptLineIndexNo4=entityOptLineIndexNo4, entityFilterCableIndex4=entityFilterCableIndex4, syslogIPv4RowStatus=syslogIPv4RowStatus, transientFwpSwitchRejected=transientFwpSwitchRejected, alarmHwDegrade=alarmHwDegrade, terminationPointSfProvision=terminationPointSfProvision, ntpIPv4SourceIp=ntpIPv4SourceIp, downwardShelfConnSlotNo=downwardShelfConnSlotNo, terminationPointAdmin=terminationPointAdmin, ratStartPointIndexNo1=ratStartPointIndexNo1, knownHostIPv6Entry=knownHostIPv6Entry, alarmChannelMismatch=alarmChannelMismatch, alarmEquipmentNotAccepted=alarmEquipmentNotAccepted, entityFilterCableTable=entityFilterCableTable, virtualPortRate=virtualPortRate, moduleScrambling=moduleScrambling, alarmEqptEntry=alarmEqptEntry, physicalPortMonitoredBitrate=physicalPortMonitoredBitrate, alarmAutoAmpShutdown=alarmAutoAmpShutdown, entityCrsOptLineClass=entityCrsOptLineClass, lanAlias=lanAlias, entityOpticalMuxEntry=entityOpticalMuxEntry, containerModTable=containerModTable, downwardShelfConnClassName=downwardShelfConnClassName, crossDcnRowStatus=crossDcnRowStatus, containerCrossConnEntry=containerCrossConnEntry, entityContainerSlotNo=entityContainerSlotNo, entityFacilityTable=entityFacilityTable, alarmLaserTemperatureTooHigh=alarmLaserTemperatureTooHigh, changePhysicalPortServiceTraceFormSonetSection=changePhysicalPortServiceTraceFormSonetSection, physicalPortFlowControl=physicalPortFlowControl, envPortRowStatus=envPortRowStatus, physicalPortAvlntsRxcrs=physicalPortAvlntsRxcrs, pmSnapshotCurrentTerminPointEntry=pmSnapshotCurrentTerminPointEntry, alarmFwpMismatchDownloadNotServiceAffecting=alarmFwpMismatchDownloadNotServiceAffecting, alarmEncryptionModuleCryPasswdMissing=alarmEncryptionModuleCryPasswdMissing, virtualSessionId=virtualSessionId, ratStartPointClassName=ratStartPointClassName, moduleTopology=moduleTopology, alarmLossofTandemConnectionOduTcmA=alarmLossofTandemConnectionOduTcmA, virtualPortTraceTransmitDapiOduTcmB=virtualPortTraceTransmitDapiOduTcmB, containerPchTable=containerPchTable, alarmGainTiltNotSettable=alarmGainTiltNotSettable, containerWchIndexNo1=containerWchIndexNo1, containerCrsOptLineFromPointEntry=containerCrsOptLineFromPointEntry, ipSettings=ipSettings, entityTerminPointParentId=entityTerminPointParentId, alarmServerSignalFailureODU=alarmServerSignalFailureODU, transientThres1DayExceededFecBERCE=transientThres1DayExceededFecBERCE, shelfConnectionType=shelfConnectionType, entityShelfConnClassName=entityShelfConnClassName, moduleRoadmNumber=moduleRoadmNumber, alarmOscOpticalPowerControlFailHigh=alarmOscOpticalPowerControlFailHigh, notAssignableExternalPortIndexNo4=notAssignableExternalPortIndexNo4, shelfOscChannel=shelfOscChannel, containerVschEntry=containerVschEntry, channelTracesRouteId=channelTracesRouteId, alarmThres15MinExceededOtuUAS=alarmThres15MinExceededOtuUAS, plugGenericPorts=plugGenericPorts, alarmEquipmentMismatch=alarmEquipmentMismatch, moduleConnector=moduleConnector, terminationPointRowStatus=terminationPointRowStatus, crossOpticalLineCrsFunction=crossOpticalLineCrsFunction, opticalLineFarEndLocation=opticalLineFarEndLocation, changePhysicalPortServiceTraceTransmitOpspOduTcmB=changePhysicalPortServiceTraceTransmitOpspOduTcmB, upwardOpticalMuxIndex=upwardOpticalMuxIndex, pmSnapshotHistoricalTerminPointNumber=pmSnapshotHistoricalTerminPointNumber, entityShelfConnPortNo=entityShelfConnPortNo, changePhysicalPortServiceTraceExpectedOduTcmB=changePhysicalPortServiceTraceExpectedOduTcmB, oprThresholdConfigHighConfig=oprThresholdConfigHighConfig, physicalPortAlsMode=physicalPortAlsMode, changePhysicalPortServiceSigDegThresOduTcmA=changePhysicalPortServiceSigDegThresOduTcmA, alarmLossOfMfiOpu=alarmLossOfMfiOpu, containerCrsOptLineTableId=containerCrsOptLineTableId, scTable=scTable, endOfNotAssignableDcnTable=endOfNotAssignableDcnTable, physicalPortTxOnTimer=physicalPortTxOnTimer, alarmTransmitterDisabledOff=alarmTransmitterDisabledOff, physicalPortTxOffDelay=physicalPortTxOffDelay, downwardExternalPortSlotNo=downwardExternalPortSlotNo, containerExternalPortClass=containerExternalPortClass, ipv6InActRoutesPortNo=ipv6InActRoutesPortNo, physicalPortCodeGain=physicalPortCodeGain, entityContainerExtNo=entityContainerExtNo, alarmSeverityDcnEntry=alarmSeverityDcnEntry, changePhysicalPortServiceSigDegPeriodOduTcmC=changePhysicalPortServiceSigDegPeriodOduTcmC, alarmOpticalMuxTable=alarmOpticalMuxTable, entityDcnType=entityDcnType, transientProtSwToDuplexFail=transientProtSwToDuplexFail, oprIntervalPm1dayNumber=oprIntervalPm1dayNumber, containerOwlgAidString=containerOwlgAidString, transientProtSwToDuplexCompl=transientProtSwToDuplexCompl, containerOlClassName=containerOlClassName, pmSnapshotCurrentAttenuation=pmSnapshotCurrentAttenuation, ffpSDswitching=ffpSDswitching, pmSnapshot=pmSnapshot, fanRowStatus=fanRowStatus, physicalPortTraceTransmitSapiOtu=physicalPortTraceTransmitSapiOtu, alarmFacilityAffect=alarmFacilityAffect, icmpAddrMask=icmpAddrMask, virtualPortType=virtualPortType, containerConnectStdNotation=containerConnectStdNotation, containerCrsOptLineFromPointClass=containerCrsOptLineFromPointClass, entityCrossConnClassName=entityCrossConnClassName, crossOpticalLineConn=crossOpticalLineConn, alarmSignalDegradeOtu=alarmSignalDegradeOtu, downwardShelfConnExtNo=downwardShelfConnExtNo, notAssignableEqptIndexNo4=notAssignableEqptIndexNo4, moduleSerialPorts=moduleSerialPorts, lanEntry=lanEntry, notAssignableDcnClass=notAssignableDcnClass, alarmExternalPortEntry=alarmExternalPortEntry, opticalMuxEntry=opticalMuxEntry, downwardOptLineShelfNo=downwardOptLineShelfNo, physicalPortTraceExpectedOduTcmB=physicalPortTraceExpectedOduTcmB, alarmServerSignalFailureSectionRS=alarmServerSignalFailureSectionRS, trapSource=trapSource, crossConnectionIngressTid=crossConnectionIngressTid, moduleForceConfig=moduleForceConfig, alarmThres15MinExceededOduTcmBBbe=alarmThres15MinExceededOduTcmBBbe, crossConnectionCrsFunction=crossConnectionCrsFunction, physicalPortTraceRcvSapiTcmb=physicalPortTraceRcvSapiTcmb, changePhysicalPortServiceXfpDecisionThres=changePhysicalPortServiceXfpDecisionThres, physicalPortTraceExpectedOdu=physicalPortTraceExpectedOdu, changePhysicalPortServiceTraceTransmitSapiOduTcmB=changePhysicalPortServiceTraceTransmitSapiOduTcmB, upwardContainerTable=upwardContainerTable, entityDcnParentId=entityDcnParentId, pmSnapshotStatus=pmSnapshotStatus, endOfDownwardEqptTable=endOfDownwardEqptTable, opticalMuxReferByTerminPoint=opticalMuxReferByTerminPoint, containerTerminPointIndexNo1=containerTerminPointIndexNo1, alarmThresOptPowerCtrlFailureHigh=alarmThresOptPowerCtrlFailureHigh, shelfAlias=shelfAlias, changePhysicalPortServiceTxOffOnTm=changePhysicalPortServiceTxOffOnTm, entityOptLineParentId=entityOptLineParentId, ffpProtectionMech=ffpProtectionMech, ntpIPv4IpAddr=ntpIPv4IpAddr, notAssignableEqptParentId=notAssignableEqptParentId, downwardFacilityEntry=downwardFacilityEntry, containerPlugTable=containerPlugTable, opticalMuxTilt=opticalMuxTilt, entitySysTable=entitySysTable, physicalPortAutoPTassignment=physicalPortAutoPTassignment, entityOptLineClass=entityOptLineClass, entityCrossConnFromPortNo=entityCrossConnFromPortNo, upwardFacilityIndex=upwardFacilityIndex, containerEccTableId=containerEccTableId, alarmAutoShutdownSendingOciOdu=alarmAutoShutdownSendingOciOdu, externalPortMaxPmdRcv=externalPortMaxPmdRcv, physicalPortTcmALevel=physicalPortTcmALevel, physicalPortTraceRcvDapiTcma=physicalPortTraceRcvDapiTcma, alarmTxPowerLimited=alarmTxPowerLimited, alarmShelfConnType=alarmShelfConnType, alarmUPortFailure=alarmUPortFailure, containerEccTable=containerEccTable, containerLinkAidString=containerLinkAidString, alarmInputVoltageFailurePort1=alarmInputVoltageFailurePort1, advaInventoryHardwareRev=advaInventoryHardwareRev, entityProtectionCableAidString=entityProtectionCableAidString, connectionType=connectionType, crossOpticalLineIngressNodeIp=crossOpticalLineIngressNodeIp, physicalPortLaneChannel3=physicalPortLaneChannel3, alarmThres15MinExceededFecUBE=alarmThres15MinExceededFecUBE, entityCrsOptLineEntry=entityCrsOptLineEntry, optIntervalPm15minEntry=optIntervalPm15minEntry, oprIntervalPm1weekHigh=oprIntervalPm1weekHigh, opticalLineTransmitChannel=opticalLineTransmitChannel, advaInventorySerialNum=advaInventorySerialNum, physicalPortTraceTransmitDapiOduTcmB=physicalPortTraceTransmitDapiOduTcmB, alarmSignalFailureOnLink=alarmSignalFailureOnLink, downwardEqptPortNo=downwardEqptPortNo, opticalMuxBandProvision=opticalMuxBandProvision, upwardOptLineExtNo=upwardOptLineExtNo, alarmFiberConnOptFault=alarmFiberConnOptFault, changePhysicalPortServiceTimModeOduTcmC=changePhysicalPortServiceTimModeOduTcmC, virtualPortPortRole=virtualPortPortRole, opticalMuxInhibitSwitchToWork=opticalMuxInhibitSwitchToWork, eccConnState=eccConnState, alarmThres15MinExceededOduTcmCSES=alarmThres15MinExceededOduTcmCSES, containerConnectNonStdFromClassName=containerConnectNonStdFromClassName, containerEnvExtNo=containerEnvExtNo, alarmLocalOscTemperatureTooLow=alarmLocalOscTemperatureTooLow, alarmRoundTripDelayTooLow=alarmRoundTripDelayTooLow)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", alarmThres15MinExceededSonetSectSEFS=alarmThres15MinExceededSonetSectSEFS, alarmApsProtocolFailure=alarmApsProtocolFailure, virtualPortPathProtection=virtualPortPathProtection, ipv6ActRoutesRowStatus=ipv6ActRoutesRowStatus, linkOspf=linkOspf, downwardEnvTable=downwardEnvTable, containerLanShelfNo=containerLanShelfNo, optThresholdConfigLowFixed=optThresholdConfigLowFixed, transientThres1DayExceededSonetSectSEFS=transientThres1DayExceededSonetSectSEFS, scPhysIfBaseType=scPhysIfBaseType, alarmLosAttProgress=alarmLosAttProgress, moduleHeight=moduleHeight, plugRowStatus=plugRowStatus, containerCrossConnFromSlotNo=containerCrossConnFromSlotNo, alarmSeverityDcnValue=alarmSeverityDcnValue, virtualPortEqlzAdmin=virtualPortEqlzAdmin, notAssignableEnvIndexNo3=notAssignableEnvIndexNo3, alarmOpticalMuxEntry=alarmOpticalMuxEntry, notAssignableEnvIndexNo2=notAssignableEnvIndexNo2, physicalPortBitrate=physicalPortBitrate, moduleGroup=moduleGroup, optIntervalPm1dayLow=optIntervalPm1dayLow, transientThres1DayExceededOduTcmABbe=transientThres1DayExceededOduTcmABbe, packetFiltering=packetFiltering, modulePower=modulePower, alarmSubModuleTempTooHigh=alarmSubModuleTempTooHigh, alarmInputVoltageFailurePort2=alarmInputVoltageFailurePort2, opticalMuxOscOpticalSetpoint=opticalMuxOscOpticalSetpoint, alarmLossOfFrame=alarmLossOfFrame, moduleUpgradePorts=moduleUpgradePorts, alarmLinkDown=alarmLinkDown, fspR7WriteAccessRequest=fspR7WriteAccessRequest, opticalMuxFarEndSigDegThres=opticalMuxFarEndSigDegThres, alarmEquipmentMismatchAllow=alarmEquipmentMismatchAllow, physicalPortLaneChannel2=physicalPortLaneChannel2, alarmLossOfCharSync=alarmLossOfCharSync, transientEqlzRequestDenied=transientEqlzRequestDenied, containerScClass=containerScClass, entityMtosiSlotsExtNo=entityMtosiSlotsExtNo, physicalPortFecType=physicalPortFecType, opticalLineLaneChannel3=opticalLineLaneChannel3, containerConnectStdFromId=containerConnectStdFromId, endOfUpwardOpticalMuxTable=endOfUpwardOpticalMuxTable, containerVschTable=containerVschTable, trapModeLegacy=trapModeLegacy, containerCrossDcnAidString=containerCrossDcnAidString, channelTracesToAid=channelTracesToAid, alarmExternalPortSeverity=alarmExternalPortSeverity, eccAlias=eccAlias, containerTerminPointTableId=containerTerminPointTableId, entitySysPortNo=entitySysPortNo, pmSnapshotHistoricalTerminPointTimeStamp=pmSnapshotHistoricalTerminPointTimeStamp, entityEnvTableId=entityEnvTableId, entityEnvEntry=entityEnvEntry, channelTracesRouteType=channelTracesRouteType, physicalPortSigDegThresOduTcmB=physicalPortSigDegThresOduTcmB, lanIPv6LinkLocal=lanIPv6LinkLocal, physicalPortTable=physicalPortTable, endOfShelfConnTable=endOfShelfConnTable, alarmPumpLaser4TempTooLow=alarmPumpLaser4TempTooLow, lanIpAddr=lanIpAddr, shelfConnConnectionType=shelfConnConnectionType, alarmAutomaticPowerReductionForEyeSafety=alarmAutomaticPowerReductionForEyeSafety, containerFfpParentId=containerFfpParentId, entityDcnEntry=entityDcnEntry, alarmAutomaticPowerReduction=alarmAutomaticPowerReduction, changePhysicalPortServiceTributarySlotMethod=changePhysicalPortServiceTributarySlotMethod, alarmShelfConnEntry=alarmShelfConnEntry, advaInventoryTable=advaInventoryTable, notAssignableOpticalMuxIndexNo4=notAssignableOpticalMuxIndexNo4, changePhysicalPortServiceTimModeOdu=changePhysicalPortServiceTimModeOdu, syslogIPv4Table=syslogIPv4Table, changePhysicalPortServiceTraceTransmitOpspOduTcmA=changePhysicalPortServiceTraceTransmitOpspOduTcmA, linkBitrate=linkBitrate, changePhysicalPortServiceSigDegThresSdhMs=changePhysicalPortServiceSigDegThresSdhMs, unassignedInventoryParentId=unassignedInventoryParentId, virtualPortEntry=virtualPortEntry, alarmTerminPointTimeStamp=alarmTerminPointTimeStamp, physicalPortTcmBLevel=physicalPortTcmBLevel, alarmAutoShutdownVfCSF=alarmAutoShutdownVfCSF, alarmDispersionCompensationTooHigh=alarmDispersionCompensationTooHigh, plugAdmin=plugAdmin, endOfAlarmSeverityExternalPortTable=endOfAlarmSeverityExternalPortTable, entityCrossDcnEntry=entityCrossDcnEntry, physicalPortSigDegThresSonetLine=physicalPortSigDegThresSonetLine, upwardTerminPointIndexNo3=upwardTerminPointIndexNo3, endOfFacilityMgmt=endOfFacilityMgmt, entityCrossDcnParentId=entityCrossDcnParentId, virtualPortTrafficDirection=virtualPortTrafficDirection, virtualPortOduTribTimeSlottNo=virtualPortOduTribTimeSlottNo, entitySysExtNo=entitySysExtNo, syslogIPv6IpAddr=syslogIPv6IpAddr, containerVomShelfNo=containerVomShelfNo, transientFarEndChanged=transientFarEndChanged, containerCrsOptLineToIndexNo3=containerCrsOptLineToIndexNo3, transientFwpSwitchFailed=transientFwpSwitchFailed, containerShelfShelfNo=containerShelfShelfNo, ratChIngress=ratChIngress, alarmNtpForSchedEqlzRequired=alarmNtpForSchedEqlzRequired, containerCrossDcnShelfNo=containerCrossDcnShelfNo, containerOmClass=containerOmClass, entityShelfConnExtNo=entityShelfConnExtNo, virtualPortTraceTransmitSapiOduTcmA=virtualPortTraceTransmitSapiOduTcmA, linkAdmin=linkAdmin, lanAdmin=lanAdmin, pmSnapshotCurrentInputPower=pmSnapshotCurrentInputPower, containerConnectStdAidString=containerConnectStdAidString, containerTerminPointIndexNo2=containerTerminPointIndexNo2, endOfAlarmOpticalMuxTable=endOfAlarmOpticalMuxTable, containerCrossDcnTable=containerCrossDcnTable, notAssignableExternalPortTable=notAssignableExternalPortTable, transientThres1DayExceededPhysConvDE=transientThres1DayExceededPhysConvDE, moduleRstp=moduleRstp, transientEqlzStart=transientEqlzStart, downwardContainerTable=downwardContainerTable, unassignedInventoryTable=unassignedInventoryTable, entityEnvTable=entityEnvTable, upwardDcnIndex=upwardDcnIndex, changePhysicalPortServiceAlias=changePhysicalPortServiceAlias, notAssignableEnvIndexNo4=notAssignableEnvIndexNo4, alarmEncryptionPortKeyInitExchgMissed=alarmEncryptionPortKeyInitExchgMissed, containerOtlgClassName=containerOtlgClassName, alarmContainerAffect=alarmContainerAffect, terminationPointConnector=terminationPointConnector, aidMappingAidString=aidMappingAidString, alarmServerSignalFailureGfp=alarmServerSignalFailureGfp, entityShelfConnAidString=entityShelfConnAidString, entityProtectionCableClass=entityProtectionCableClass, containerCrossConnFromPointPortNo=containerCrossConnFromPointPortNo, containerVchAidString=containerVchAidString, containerVschParentId=containerVschParentId, containerFanPortNo=containerFanPortNo, alarmVfClientSignalFail=alarmVfClientSignalFail, containerCrsOptLineFromClassName=containerCrsOptLineFromClassName, entityTerminPointPortClass=entityTerminPointPortClass, transientEqlzFailed=transientEqlzFailed, endOfRelationship=endOfRelationship, physicalPortLaserDelayTimer=physicalPortLaserDelayTimer, alarmAutoShutdownSendingAisLine=alarmAutoShutdownSendingAisLine, endOfDownwardDcnTable=endOfDownwardDcnTable, endOfRatBlockingTable=endOfRatBlockingTable, downwardFacilityShelfNo=downwardFacilityShelfNo, changePhysicalPortServiceCodeGain=changePhysicalPortServiceCodeGain, containerOmPortNo=containerOmPortNo, opticalMuxGain=opticalMuxGain, ffpProtectionType=ffpProtectionType, entityFilterCableAidString=entityFilterCableAidString, ffpRevertMode=ffpRevertMode, containerLanClassName=containerLanClassName, downwardEnvPortNo=downwardEnvPortNo, alarmAutoPowerShutdown=alarmAutoPowerShutdown, endOfAlarmEnvTable=endOfAlarmEnvTable, downwardFacilityTable=downwardFacilityTable, physicalPortChannelProv=physicalPortChannelProv, dependentIndex=dependentIndex, alarmAlarmIndicationSignalOtu=alarmAlarmIndicationSignalOtu, optThresholdConfigLowConfig=optThresholdConfigLowConfig, containerCrossConnFromPointTableId=containerCrossConnFromPointTableId, terminationPointSubBand=terminationPointSubBand, advaInventoryType=advaInventoryType, transientDispersionCompFailed=transientDispersionCompFailed, moduleSuppClientPlugRates=moduleSuppClientPlugRates, connectionCreationMethod=connectionCreationMethod, physicalPortTraceTransmitDapiOduTcmA=physicalPortTraceTransmitDapiOduTcmA, notAssignableExternalPortParentId=notAssignableExternalPortParentId, alarmThermoElectricCoolerEndOfLife=alarmThermoElectricCoolerEndOfLife, containerVomClass=containerVomClass, haProtectionIndexAid=haProtectionIndexAid, virtualPortOpuPayloadType=virtualPortOpuPayloadType, ipv6ActRoutesNextHopIp=ipv6ActRoutesNextHopIp, containerLanTableId=containerLanTableId, containerOwlgIndexNo2=containerOwlgIndexNo2, entityProtectionCableTable=entityProtectionCableTable, entityFacilityParentId=entityFacilityParentId, opticalMuxAdmin=opticalMuxAdmin, containerConnectNonStdFromIndexNo3=containerConnectNonStdFromIndexNo3, physicalPortVoaMode=physicalPortVoaMode, fanType=fanType, ratStartPointIndexNo3=ratStartPointIndexNo3, virtualPortTcmCLevel=virtualPortTcmCLevel, entityOptLineType=entityOptLineType, alarmDcnAffect=alarmDcnAffect, containerConnectNonStdTable=containerConnectNonStdTable, transientThres1DayExceededPhysConvES=transientThres1DayExceededPhysConvES, transientEqlzProcessWait=transientEqlzProcessWait, alarmPrbsLossOfSeqSynch=alarmPrbsLossOfSeqSynch, crossConnectionCrsToAidTwo=crossConnectionCrsToAidTwo, alarmAutoShutdownToHighTxPwr=alarmAutoShutdownToHighTxPwr, upwardEnvTable=upwardEnvTable, containerPlugParentId=containerPlugParentId, alarmSectionTraceMismatch=alarmSectionTraceMismatch, downwardOpticalMuxIndex=downwardOpticalMuxIndex, containerLanParentId=containerLanParentId, alarmAlarmIndicationSignalOduTcmC=alarmAlarmIndicationSignalOduTcmC, plugMaxDataRate=plugMaxDataRate, virtualPortValidSigTimer=virtualPortValidSigTimer, alarmBackwardDefectIndicationOduTcmC=alarmBackwardDefectIndicationOduTcmC, entityConnectionToId=entityConnectionToId, physicalPortType=physicalPortType, alarmAutoShutdownSendingLckOdu=alarmAutoShutdownSendingLckOdu, terminationPointFiberDetectStatus=terminationPointFiberDetectStatus, oprIntervalPm1dayValidFlag=oprIntervalPm1dayValidFlag, entityConnectionTable=entityConnectionTable, containerOtlgTable=containerOtlgTable, entityCrossDcnExtNo=entityCrossDcnExtNo, physicalPortReach=physicalPortReach, containerScExtNo=containerScExtNo, externalPortPmdTransmit=externalPortPmdTransmit, ipv6ActRoutesDestination=ipv6ActRoutesDestination, entityOptLineTableId=entityOptLineTableId, ffpApsType=ffpApsType, alarmOpticalMuxTimeStamp=alarmOpticalMuxTimeStamp, changePhysicalPortServiceTraceTransmitSonetSection=changePhysicalPortServiceTraceTransmitSonetSection, alarmReceiverOverloadProtection=alarmReceiverOverloadProtection, notAssignableOpticalMuxTable=notAssignableOpticalMuxTable, plugSecondaryStates=plugSecondaryStates, opticalMuxTransmitChannel=opticalMuxTransmitChannel, alarmLaserBiasCurrentNormalizedtooHigh=alarmLaserBiasCurrentNormalizedtooHigh, downwardEqptExtNo=downwardEqptExtNo, opticalMuxForceFwdAsePilotOn=opticalMuxForceFwdAsePilotOn, physicalPortSigDegPeriodOdu=physicalPortSigDegPeriodOdu, containerEthClassName=containerEthClassName, upwardDcnPortNo=upwardDcnPortNo, entities=entities, physicalPortMaxFrameSize=physicalPortMaxFrameSize, alarmLossofTandemConnectionOduTcmB=alarmLossofTandemConnectionOduTcmB, notAssignableOptLineClassName=notAssignableOptLineClassName, startPmSnapshot=startPmSnapshot, downwardTerminPointIndexNo1=downwardTerminPointIndexNo1, virtualPortRevertiveMode=virtualPortRevertiveMode, alarmFarEndIpAddressUnknown=alarmFarEndIpAddressUnknown, virtualSessionTable=virtualSessionTable, ffpPeerAid=ffpPeerAid, containerTerminPointClass=containerTerminPointClass, virtualPortPriority=virtualPortPriority, alarmLocalOscLevelAbnormal=alarmLocalOscLevelAbnormal, physicalPortLaneChannelSetting=physicalPortLaneChannelSetting, alarmAutoShutdownSendingEPC=alarmAutoShutdownSendingEPC, shelfConnMgmt=shelfConnMgmt, alarmPilotReceiveLevelHigh=alarmPilotReceiveLevelHigh, downwardDcnClassName=downwardDcnClassName, linkType=linkType, containerPlugShelfNo=containerPlugShelfNo, envPortInvertTifInputLogic=envPortInvertTifInputLogic, physicalPortSigDegPeriodSdhSection=physicalPortSigDegPeriodSdhSection, lanIpMaskMonitor=lanIpMaskMonitor, containerEnvClass=containerEnvClass, externalPortRowStatus=externalPortRowStatus, upwardEqptIndex=upwardEqptIndex, containerEnvAidString=containerEnvAidString, moduleDispersionCompensation=moduleDispersionCompensation, alarmSwitchToDuplexInhibited=alarmSwitchToDuplexInhibited, ipv6InActRoutesDestination=ipv6InActRoutesDestination, physicalPortFarEndCommunication=physicalPortFarEndCommunication)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", oprIntervalPm1dayTable=oprIntervalPm1dayTable, fiberMap=fiberMap, upwardShelfConnPortNo=upwardShelfConnPortNo, pmSnapshotCurrentTxLineAtten=pmSnapshotCurrentTxLineAtten, alarmThres15MinExceededSonetLineES=alarmThres15MinExceededSonetLineES, alarmLossOfSignal=alarmLossOfSignal, ipv6=ipv6, alarmSeverityTerminPointTable=alarmSeverityTerminPointTable, ipv6ActRoutesPortNo=ipv6ActRoutesPortNo, ntpIPv4Test=ntpIPv4Test, virtualPortOduTribPortNo=virtualPortOduTribPortNo, opticalMuxEdfaPwrOut=opticalMuxEdfaPwrOut, virtualPortAlias=virtualPortAlias, ratBlockingConnState=ratBlockingConnState, alarmTurnupCondition=alarmTurnupCondition, containerWchIndexNo3=containerWchIndexNo3, physicalPortTraceRcvDapiTcmc=physicalPortTraceRcvDapiTcmc, downwardOpticalMuxPortNo=downwardOpticalMuxPortNo, entityFacilityAidString=entityFacilityAidString, containerOtlgParentId=containerOtlgParentId, ratBlockingEntry=ratBlockingEntry, entityContainerShelfNo=entityContainerShelfNo, eccConnectionType=eccConnectionType, notAssignableShelfConnClassName=notAssignableShelfConnClassName, lanLanMembers=lanLanMembers, endOfUpwardOptLineTable=endOfUpwardOptLineTable, alarmShelfConnTable=alarmShelfConnTable, containerPchClassName=containerPchClassName, entityCrossConnToPortNo=entityCrossConnToPortNo, virtualPortTraceRcvSapiTcma=virtualPortTraceRcvSapiTcma, entityEqptSlotNo=entityEqptSlotNo, containerFfpShelfNo=containerFfpShelfNo, changePhysicalPortServiceOtnStuffing=changePhysicalPortServiceOtnStuffing, containerOmExtNo=containerOmExtNo, alarmOosMaintenance=alarmOosMaintenance, syslogIPv4Reporting=syslogIPv4Reporting, containerShelfEntry=containerShelfEntry, downwardFacilityPortNo=downwardFacilityPortNo, upwardDcnParentId=upwardDcnParentId, containerScClassName=containerScClassName, containerPlugPortNo=containerPlugPortNo, knownHostIPv6Table=knownHostIPv6Table, endOfModuleTable=endOfModuleTable, fanSecondaryStates=fanSecondaryStates, containerEccPortNo=containerEccPortNo, downwardOptLineChildId=downwardOptLineChildId, envPortFacilityType=envPortFacilityType, advaInventoryPartnumber=advaInventoryPartnumber, ratChEgress=ratChEgress, scMetric=scMetric, endOfAlarmSeverityOpticalMuxTable=endOfAlarmSeverityOpticalMuxTable, alarmPeerLink=alarmPeerLink, alarmPayloadMismatchOPU=alarmPayloadMismatchOPU, physicalPortLagPortNo=physicalPortLagPortNo, ntpIPv4Ip=ntpIPv4Ip, alarmLossOsc=alarmLossOsc, entityContainerClass=entityContainerClass, shelfShelfId=shelfShelfId, shelfPsuOutputPower=shelfPsuOutputPower, containerOtlgTableId=containerOtlgTableId, moduleLagSysPrio=moduleLagSysPrio, entityCrossConnToId=entityCrossConnToId, linkValidSigTimer=linkValidSigTimer, moduleTopologyType=moduleTopologyType, alarmFiberAttenuationHigh=alarmFiberAttenuationHigh, containerConnectStdTableId=containerConnectStdTableId, ratStartPointTable=ratStartPointTable, upwardOptLineShelfNo=upwardOptLineShelfNo, entityCrossDcnOneIndex=entityCrossDcnOneIndex, physicalPortTraceRcvOpspTcma=physicalPortTraceRcvOpspTcma, downwardFacilityExtNo=downwardFacilityExtNo, alarmOutputPowerFault=alarmOutputPowerFault, scFarEndIp=scFarEndIp, containerConnectNonStdToIndexNo1=containerConnectNonStdToIndexNo1, haSoftwareVersion=haSoftwareVersion, changePhysicalPortServiceSigDegPeriodOduTcmB=changePhysicalPortServiceSigDegPeriodOduTcmB, physicalPortLanes=physicalPortLanes, pmSnapshotHistoricalNumber=pmSnapshotHistoricalNumber, ipv6InActRoutesSlotNo=ipv6InActRoutesSlotNo, unassignedInventoryTableId=unassignedInventoryTableId, entityProtectionCableIndex4=entityProtectionCableIndex4, alarmThresOptPowerCtrlFailureLow=alarmThresOptPowerCtrlFailureLow, pmSnapshotCurrentAttenOfVoa=pmSnapshotCurrentAttenOfVoa, alarmThres15MinExceededOduTcmCUAS=alarmThres15MinExceededOduTcmCUAS, ratStartPointAidString=ratStartPointAidString, endOfLanTable=endOfLanTable, entityDcnExtNo=entityDcnExtNo, physicalPortOtnStuffing=physicalPortOtnStuffing, physicalPortTerminationLevel=physicalPortTerminationLevel, advaInventoryEntry=advaInventoryEntry, crossDcnEcc=crossDcnEcc, pmSnapshotHistoricalTerminPointValidFlag=pmSnapshotHistoricalTerminPointValidFlag, changePhysicalPortServiceAutoPTassignment=changePhysicalPortServiceAutoPTassignment, opticalLineLaneChannel1=opticalLineLaneChannel1, notAssignableOpticalMuxClass=notAssignableOpticalMuxClass, alarmSysType=alarmSysType, pmSnapshotHistoricalParameter=pmSnapshotHistoricalParameter, opticalMuxChannelSpacing=opticalMuxChannelSpacing, downwardOpticalMuxTable=downwardOpticalMuxTable, lanAuthString=lanAuthString, notAssignableEnvEntry=notAssignableEnvEntry, entityEnvAidString=entityEnvAidString, moduleAvlndpF125Rxcrs=moduleAvlndpF125Rxcrs, moduleEntry=moduleEntry, oprIntervalPm1dayLow=oprIntervalPm1dayLow, changePhysicalPortServiceSigDegPeriodIntegration=changePhysicalPortServiceSigDegPeriodIntegration, notAssignableContainerClass=notAssignableContainerClass, containerCrsOptLineToClassName=containerCrsOptLineToClassName, terminationPointOper=terminationPointOper, upwardFacilityTable=upwardFacilityTable, channelTracesIndexNo2=channelTracesIndexNo2, optIntervalPm1weekNumber=optIntervalPm1weekNumber, downwardEqptTable=downwardEqptTable, optIntervalPm1dayTimeStamp=optIntervalPm1dayTimeStamp, moduleChannelSpacing=moduleChannelSpacing, alarmTerminPointTable=alarmTerminPointTable, containerVchClass=containerVchClass, physicalPortTimModeOduTcmB=physicalPortTimModeOduTcmB, physicalPortTestPrbsRcvMode=physicalPortTestPrbsRcvMode, physicalPortSumTransmited=physicalPortSumTransmited, virtualPortCirRcv=virtualPortCirRcv, virtualPortTraceRcvDapiOdu=virtualPortTraceRcvDapiOdu, transientThres1DayExceededSonetSectCV=transientThres1DayExceededSonetSectCV, physicalPortSigDegPeriodOduTcmA=physicalPortSigDegPeriodOduTcmA, alarmPumpLaser1TempTooHigh=alarmPumpLaser1TempTooHigh, containerVch1Class=containerVch1Class, endOfContainerMgmt=endOfContainerMgmt, containerVethTableId=containerVethTableId, moduleSubBandProvision=moduleSubBandProvision, opticalMuxSignalDirection=opticalMuxSignalDirection, downwardTerminPointEntry=downwardTerminPointEntry, containerCrossDcnTableId=containerCrossDcnTableId, containerFfpTableId=containerFfpTableId, alarmOduAutoShutdownTxAIS=alarmOduAutoShutdownTxAIS, linkOperState=linkOperState, notAssignableEqptAidString=notAssignableEqptAidString, endOfAlarmContainerTable=endOfAlarmContainerTable, notAssignableFacilityTable=notAssignableFacilityTable, virtualPortTraceTransmitOpspOduTcmA=virtualPortTraceTransmitOpspOduTcmA, lanIpMode=lanIpMode, ntpIPv6SyncStatus=ntpIPv6SyncStatus, containerCrsOptLineToId=containerCrsOptLineToId, entityContainerAidString=entityContainerAidString, physicalPortReceiverWavelength=physicalPortReceiverWavelength, containerCrsOptLineFromPointParentId=containerCrsOptLineFromPointParentId, entityEqptEntry=entityEqptEntry, opticalMuxType=opticalMuxType, ipv6InActRoutesShelfNo=ipv6InActRoutesShelfNo, containerTable=containerTable, physicalPortTxOffTimer=physicalPortTxOffTimer, linkEccAid=linkEccAid, syslogIPv4Entry=syslogIPv4Entry, physicalPortSigDegThresOduTcmC=physicalPortSigDegThresOduTcmC, containerWchTable=containerWchTable, containerChTable=containerChTable, alarmFiberConnMismatchTx=alarmFiberConnMismatchTx, entityExternalPortTable=entityExternalPortTable, entityContainerPortNo=entityContainerPortNo, alarmEqptTable=alarmEqptTable, physicalPortTraceRcvOpspOdu=physicalPortTraceRcvOpspOdu, lanIpAddrMonitor=lanIpAddrMonitor, upwardOptLineClassName=upwardOptLineClassName, opticalLineMgmt=opticalLineMgmt, containerOlIndexNo1=containerOlIndexNo1, containerCrossConnFromPointEntry=containerCrossConnFromPointEntry, entityFfpOneIndex=entityFfpOneIndex, physicalPortOpticalSetPoint=physicalPortOpticalSetPoint, upwardEqptExtNo=upwardEqptExtNo, advaInventoryInventoryDescription=advaInventoryInventoryDescription, alarmAutoShutdownSendingAisOdu=alarmAutoShutdownSendingAisOdu, performanceFacilityThreshold=performanceFacilityThreshold, fspR7WriteAccessGranted=fspR7WriteAccessGranted, downwardEqptClassName=downwardEqptClassName, downwardDcnShelfNo=downwardDcnShelfNo, alarmThres15MinExceededSonetSectCV=alarmThres15MinExceededSonetSectCV, alarmDatabaseNcuMismatch=alarmDatabaseNcuMismatch, filterCableTable=filterCableTable, downwardContainerChildId=downwardContainerChildId, alarmSeverityEnvType=alarmSeverityEnvType, opticalMuxReferByTable=opticalMuxReferByTable, changePhysicalPortServiceTable=changePhysicalPortServiceTable, containerConnectStdToIndexNo4=containerConnectStdToIndexNo4, transientCryptoSessKeyLifetimeChanged=transientCryptoSessKeyLifetimeChanged, containerVomClassName=containerVomClassName, linkTable=linkTable, physicalPortPvid=physicalPortPvid, containerCrossConnFromId=containerCrossConnFromId, containerConnectStdClassName=containerConnectStdClassName, crossConnectionPathProtection=crossConnectionPathProtection, oprIntervalPm1weekNumber=oprIntervalPm1weekNumber, alarmLossOfLane=alarmLossOfLane, opticalMuxDataLayerPmReset=opticalMuxDataLayerPmReset, endOfDcnReferByTable=endOfDcnReferByTable, opticalLineOwnerAid=opticalLineOwnerAid, moduleAlsConf=moduleAlsConf, alarmNetworkPathRestricted=alarmNetworkPathRestricted, alarmRamanPumpPwrTooHigh=alarmRamanPumpPwrTooHigh, oprIntervalPm15minLow=oprIntervalPm15minLow, alarmThres15MinExceededOtuSES=alarmThres15MinExceededOtuSES, downwardExternalPortEntry=downwardExternalPortEntry, containerOtlgPortNo=containerOtlgPortNo, physicalPortOperState=physicalPortOperState, moduleMuxMethod=moduleMuxMethod, shelfConnReach=shelfConnReach, fspR7WriteAccessRequestTimeout=fspR7WriteAccessRequestTimeout, syslogIPv6SecurityReports=syslogIPv6SecurityReports, upwardEnvEntry=upwardEnvEntry, alarmEncryptionPortEncryptionSwitchedOff=alarmEncryptionPortEncryptionSwitchedOff, physicalPortFiber=physicalPortFiber, oprIntervalPm1weekMean=oprIntervalPm1weekMean, envPortTifAlarmType=envPortTifAlarmType, notAssignableOpticalMuxIndexNo3=notAssignableOpticalMuxIndexNo3, virtualPortOwnerAid=virtualPortOwnerAid, scEntry=scEntry, upwardEqptParentId=upwardEqptParentId, alarmAlarmIndicationSignalOduTcmB=alarmAlarmIndicationSignalOduTcmB, containerVschAidString=containerVschAidString, ffpRowStatus=ffpRowStatus, physicalPortAutonegotiation=physicalPortAutonegotiation, alarmPowerSupplyUnitFailure=alarmPowerSupplyUnitFailure, transientSwResetReload=transientSwResetReload, notAssignables=notAssignables, notAssignableFacilityClassName=notAssignableFacilityClassName, alarmThres15MinExceededFecBERCE=alarmThres15MinExceededFecBERCE, physicalPortLaneChannel=physicalPortLaneChannel, containerShelfConnParentId=containerShelfConnParentId, dependentIndexNo4=dependentIndexNo4, notAssignableContainerIndexNo2=notAssignableContainerIndexNo2, notAssignableOptLineTable=notAssignableOptLineTable, containerCrossConnToExtNo=containerCrossConnToExtNo, downwardDcnEntry=downwardDcnEntry, terminationPointAlias=terminationPointAlias, virtualPortTimModeOduTcmA=virtualPortTimModeOduTcmA, changePhysicalPortServiceVoaMode=changePhysicalPortServiceVoaMode, oprIntervalPm15minValidFlag=oprIntervalPm15minValidFlag, endOfDownwardContainerTable=endOfDownwardContainerTable, envPortEntry=envPortEntry, opticalMuxReferByEntry=opticalMuxReferByEntry, notAssignableDcnClassName=notAssignableDcnClassName, opticalMuxProtectionRole=opticalMuxProtectionRole, optIntervalPm1dayNumber=optIntervalPm1dayNumber, downwardShelfConnChildId=downwardShelfConnChildId, entityCrossConnToShelfNo=entityCrossConnToShelfNo, containerCrsOptLineParentId=containerCrsOptLineParentId, transientCryptoKeyExchgFailCondClr=transientCryptoKeyExchgFailCondClr, entityExternalPortAidString=entityExternalPortAidString, containerEthTableId=containerEthTableId, ipv6InActRoutesNextHopIp=ipv6InActRoutesNextHopIp, containerFfpExtNo=containerFfpExtNo, shelfConnFiber=shelfConnFiber, optIntervalPm15minTimeStamp=optIntervalPm15minTimeStamp, ratStartPointTableId=ratStartPointTableId, containerModExtNo=containerModExtNo, containerCrsOptLineFromIndexNo1=containerCrsOptLineFromIndexNo1)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", alarmUnequippedLowerOrderPath=alarmUnequippedLowerOrderPath, fanEntry=fanEntry, alarmLossOfSignalCPort=alarmLossOfSignalCPort, alarmDcnSeverity=alarmDcnSeverity, notAssignableDcnIndexNo3=notAssignableDcnIndexNo3, ipv6ActRoutesType=ipv6ActRoutesType, containerVch1Table=containerVch1Table, physicalPortTraceExpectedSonetSection=physicalPortTraceExpectedSonetSection, endOfAidMappingTable=endOfAidMappingTable, downwardEqptShelfNo=downwardEqptShelfNo, alarmFacilitySeverity=alarmFacilitySeverity, moduleChannelsNumber=moduleChannelsNumber, physicalPortTimingSource=physicalPortTimingSource, notAssignableExternalPortAidString=notAssignableExternalPortAidString, crossConnectionRedLineState=crossConnectionRedLineState, alarmThres15MinExceededFecCE=alarmThres15MinExceededFecCE, alarmTemperatureTooLow=alarmTemperatureTooLow, entityCrsOptLineFromIndexNo3=entityCrsOptLineFromIndexNo3, unassignedInventoryType=unassignedInventoryType, alarmSeverityExternalPortValue=alarmSeverityExternalPortValue, physicalPortLagState=physicalPortLagState, pmSnapshotHistoricalTerminPointTable=pmSnapshotHistoricalTerminPointTable, containerFfpClass=containerFfpClass, upwardFacilityClassName=upwardFacilityClassName, plugFiberType=plugFiberType, endOfPmSnampshot=endOfPmSnampshot, opticalMuxPumpPower=opticalMuxPumpPower, containerExternalPortTable=containerExternalPortTable, alarmEncryptionModuleSelfTestFail=alarmEncryptionModuleSelfTestFail, eccRowStatus=eccRowStatus, dcnReferByTable=dcnReferByTable, entityFilterCableType=entityFilterCableType, containerCrsOptLineFromPointFromId=containerCrsOptLineFromPointFromId, entityEqptClassName=entityEqptClassName, transientManualWorkingSwitchedtoProtection=transientManualWorkingSwitchedtoProtection, eci=eci, alarmSeverityFacilityEntry=alarmSeverityFacilityEntry, downwardOpticalMuxExtNo=downwardOpticalMuxExtNo, shelfConnAlias=shelfConnAlias, shelfOscPorts=shelfOscPorts, oprIntervalPm15minMean=oprIntervalPm15minMean, opticalMuxConnectionType=opticalMuxConnectionType, endOfDownwardExternalPortTable=endOfDownwardExternalPortTable, containerConnectNonStdFromIndexNo2=containerConnectNonStdFromIndexNo2, upwardExternalPortParentId=upwardExternalPortParentId, alarmSeverityShelfConnTable=alarmSeverityShelfConnTable, alarmOosDisabledLckOduTrmt=alarmOosDisabledLckOduTrmt, upwardOptLineTable=upwardOptLineTable, downwardContainerShelfNo=downwardContainerShelfNo, transientThres1DayExceededSonetLineCV=transientThres1DayExceededSonetLineCV, oprThresholdConfigEntry=oprThresholdConfigEntry, notAssignableExternalPortClassName=notAssignableExternalPortClassName, entityCrossConnParentId=entityCrossConnParentId, entityConnectionEntry=entityConnectionEntry, opticalMuxStages=opticalMuxStages, containerPchSlotNo=containerPchSlotNo, containerOlIndexNo2=containerOlIndexNo2, virtualPortInhibitSwitchToProt=virtualPortInhibitSwitchToProt, endOfchannelTracesTable=endOfchannelTracesTable, alarmSeverityDcnTable=alarmSeverityDcnTable, containerChAidString=containerChAidString, alarmHighBer=alarmHighBer, entityShelfConnTable=entityShelfConnTable, virtualPortCbsTrmt=virtualPortCbsTrmt, alarmSignalDegradeOduTcmC=alarmSignalDegradeOduTcmC, pmSnapshotHistoricalTerminPointEntry=pmSnapshotHistoricalTerminPointEntry, upwardExternalPortSlotNo=upwardExternalPortSlotNo, upwardContainerEntry=upwardContainerEntry, notAssignableEnvAidString=notAssignableEnvAidString, virtualPortLagPortType=virtualPortLagPortType, notAssignableFacilityClass=notAssignableFacilityClass, transientThres1DayExceededSonetSectES=transientThres1DayExceededSonetSectES, moduleOutputReset=moduleOutputReset, entityMtosiSlotsAidString=entityMtosiSlotsAidString, upwardOpticalMuxPortNo=upwardOpticalMuxPortNo, moduleInternalPlugsReach=moduleInternalPlugsReach, virtualPortTable=virtualPortTable, scAlias=scAlias, advaInventoryClass=advaInventoryClass, containerConnectNonStdFromIndexNo4=containerConnectNonStdFromIndexNo4, entityFacilityClassName=entityFacilityClassName, ntpIPv6TestStatus=ntpIPv6TestStatus, downwardDcnTable=downwardDcnTable, entityOpticalMuxType=entityOpticalMuxType, opticalMuxAttenuationGradient=opticalMuxAttenuationGradient, moduleAlias=moduleAlias, entityFilterCableIndex3=entityFilterCableIndex3, containerCrossDcnParentId=containerCrossDcnParentId, containerConnectNonStdNotation=containerConnectNonStdNotation, containerFfpEntry=containerFfpEntry, physicalPortSigDegThresOdu=physicalPortSigDegThresOdu, alarmLossOfPointerHigherOrderPath=alarmLossOfPointerHigherOrderPath, changePhysicalPortServiceTraceTransmitSapiOduTcmA=changePhysicalPortServiceTraceTransmitSapiOduTcmA, entityEqptTable=entityEqptTable, moduleIpAddr=moduleIpAddr, writeAccessRequestTimeout=writeAccessRequestTimeout, endOfNotAssignableOpticalMuxTable=endOfNotAssignableOpticalMuxTable, moduleAvlndpF1485Rxcrs=moduleAvlndpF1485Rxcrs, oprIntervalPm1weekTable=oprIntervalPm1weekTable, endOfNotAssignableFacilityTable=endOfNotAssignableFacilityTable, PYSNMP_MODULE_ID=advaFspR7, endOfDownwardOpticalMuxTable=endOfDownwardOpticalMuxTable, alarmDatabaseMismatch=alarmDatabaseMismatch, entityDcnTable=entityDcnTable, changePhysicalPortServiceSignalDegradePeriod=changePhysicalPortServiceSignalDegradePeriod, terminationPointBand=terminationPointBand, linkAlias=linkAlias, alarmFacilityTable=alarmFacilityTable, opticalLineRowStatus=opticalLineRowStatus, oprThresholdConfigTable=oprThresholdConfigTable, moduleInventoryDescription=moduleInventoryDescription, advaInventoryCleiCode=advaInventoryCleiCode, eccOperState=eccOperState, terminationPointValidSigTimer=terminationPointValidSigTimer, oprIntervalPm1dayMean=oprIntervalPm1dayMean, alarmBackwardDefectIndicationOtu=alarmBackwardDefectIndicationOtu, upwardOpticalMuxClassName=upwardOpticalMuxClassName, endOfFfpTable=endOfFfpTable, ntpIPv6Admin=ntpIPv6Admin, physicalPortPathProtection=physicalPortPathProtection, containerCrossConnToId=containerCrossConnToId, crossOpticalLineIngressTid=crossOpticalLineIngressTid, knownHostIPv6KeyEncryptAlgorithm=knownHostIPv6KeyEncryptAlgorithm, entityDcnTableId=entityDcnTableId, moduleTable=moduleTable, dcnReferByTerminPoint=dcnReferByTerminPoint, upwardFacilityParentId=upwardFacilityParentId, ipv6InActRoutesPrefixLen=ipv6InActRoutesPrefixLen, downwardExternalPortTable=downwardExternalPortTable, moduleInternalPlugRates=moduleInternalPlugRates, entityExternalPortClassName=entityExternalPortClassName, moduleSuppClientPlugTypes=moduleSuppClientPlugTypes, downwardContainerIndex=downwardContainerIndex, physicalPortSigDegPeriodOduTcmC=physicalPortSigDegPeriodOduTcmC, moduleMidstagePorts=moduleMidstagePorts, opticalLineEntry=opticalLineEntry, optIntervalPm1weekLow=optIntervalPm1weekLow, dependentIndexNo1=dependentIndexNo1, upwardContainerSlotNo=upwardContainerSlotNo, alarmThres15MinExceededFecES=alarmThres15MinExceededFecES, containerShelfConnSlotNo=containerShelfConnSlotNo, scSigDegThresReceiver=scSigDegThresReceiver, linkBaud=linkBaud, entityCrsOptLineType=entityCrsOptLineType, moduleClientPorts=moduleClientPorts, endOfOpticalLineMgmt=endOfOpticalLineMgmt, physicalPortTunnelAid=physicalPortTunnelAid, physicalPortLoopConfig=physicalPortLoopConfig, alarmThres15MinExceededOduBbe=alarmThres15MinExceededOduBbe, channelTracesFromAid=channelTracesFromAid, alarmSeveritySysType=alarmSeveritySysType, upwardFacilityShelfNo=upwardFacilityShelfNo, containerVethExtNo=containerVethExtNo, physicalPortConnState=physicalPortConnState, alarmProvPayloadMismatch=alarmProvPayloadMismatch, alarmOpmAbnormalCondition=alarmOpmAbnormalCondition, whitelistFiltering=whitelistFiltering, scOspf=scOspf, scMonitoredBitrate=scMonitoredBitrate, entityEqptEquipmentState=entityEqptEquipmentState, ratStartPointIndexNo2=ratStartPointIndexNo2, moduleChannelsProvision=moduleChannelsProvision, virtualPortOtnStuffing=virtualPortOtnStuffing, terminationPointTable=terminationPointTable, physicalPortTraceRcvDapiTcmb=physicalPortTraceRcvDapiTcmb, artificialEntity=artificialEntity, syslogIPv6Reporting=syslogIPv6Reporting, opticalMuxOffsetHigh=opticalMuxOffsetHigh, containerConnectStdToIndexNo1=containerConnectStdToIndexNo1, containerFacilityType=containerFacilityType, entityOptLineEntry=entityOptLineEntry, plugOperState=plugOperState, notAssignableShelfConnEntry=notAssignableShelfConnEntry, upwardTerminPointIndexNo4=upwardTerminPointIndexNo4, virtualPortVcType=virtualPortVcType, containerEthExtNo=containerEthExtNo, physicalPortAutoThresReset=physicalPortAutoThresReset, alarmLossofTandemConnectionOduTcmC=alarmLossofTandemConnectionOduTcmC, externalPortMinChromDisperRcv=externalPortMinChromDisperRcv, changePhysicalPortServiceTraceTransmitSapiOduTcmC=changePhysicalPortServiceTraceTransmitSapiOduTcmC, shelfConnAdmin=shelfConnAdmin, eccTable=eccTable, alarmSeverityFacilityTable=alarmSeverityFacilityTable, shelfInternalPlugs=shelfInternalPlugs, containerWchAidString=containerWchAidString, entityEnvPortNo=entityEnvPortNo, entityTerminPointTableId=entityTerminPointTableId, notAssignableDcnTable=notAssignableDcnTable, crossConnectionRowStatus=crossConnectionRowStatus, alarmAutoShutdownAls=alarmAutoShutdownAls, virtualPortInitEqlz=virtualPortInitEqlz, shelfConnRowStatus=shelfConnRowStatus, downwardOptLineSlotNo=downwardOptLineSlotNo, opticalMuxOffsetLow=opticalMuxOffsetLow, upwardTerminPointClassName=upwardTerminPointClassName, virtualPortTraceRcvOpspOdu=virtualPortTraceRcvOpspOdu, entityTerminPointAidString=entityTerminPointAidString, alarmProtectionNotAvailable=alarmProtectionNotAvailable, containerWchIndexNo2=containerWchIndexNo2, alarmProfileSeverityAidType=alarmProfileSeverityAidType, containerConnectNonStdToIndexNo2=containerConnectNonStdToIndexNo2, shelfStandardSlotHeight=shelfStandardSlotHeight, containerLinkTable=containerLinkTable, entityFilterCableParentId=entityFilterCableParentId, alarmEqptTimeStamp=alarmEqptTimeStamp, pmSnapshotHistoricalTerminPointValue=pmSnapshotHistoricalTerminPointValue, alarmRemoteDefectIndicationLine=alarmRemoteDefectIndicationLine, containerCrossDcnPortNo=containerCrossDcnPortNo, moduleOperState=moduleOperState, alarmAseTableGenProgress=alarmAseTableGenProgress, physicalPortMacAddress=physicalPortMacAddress, transientThres1DayExceededOduTcmAES=transientThres1DayExceededOduTcmAES, channelTracesIndexNo4=channelTracesIndexNo4, containerEthTable=containerEthTable, transientFwpInstallFailed=transientFwpInstallFailed, containerCrossConnFromPointAidString=containerCrossConnFromPointAidString, containerVchClassName=containerVchClassName, virtualPortMonLevel=virtualPortMonLevel, alarmEquipmentNotSupportedByPhysicalLayer=alarmEquipmentNotSupportedByPhysicalLayer, oprIntervalPm1weekLow=oprIntervalPm1weekLow, channelTracesIndexNo1=channelTracesIndexNo1, physicalPortBehaviour=physicalPortBehaviour, physicalPortMonLevel=physicalPortMonLevel, alarmServerSignalFailTx=alarmServerSignalFailTx, endOfCrossDcnTable=endOfCrossDcnTable, alarmSeverityOpticalMuxTable=alarmSeverityOpticalMuxTable, pmSnapshotCurrentOscGain=pmSnapshotCurrentOscGain, changePhysicalPortServiceTraceExpectedOduTcmC=changePhysicalPortServiceTraceExpectedOduTcmC, alarmMansw=alarmMansw, containerExternalPortPortNo=containerExternalPortPortNo, eccExternalVid=eccExternalVid, alarmDcnTable=alarmDcnTable, entityTerminPointType=entityTerminPointType, physicalPortConnector=physicalPortConnector, physicalPortDisparityCorrection=physicalPortDisparityCorrection, knownHostIPv6RowStatus=knownHostIPv6RowStatus, downwardEnvEntry=downwardEnvEntry, containerOmSlotNo=containerOmSlotNo, changePhysicalPortServiceTimModeOtu=changePhysicalPortServiceTimModeOtu, virtualPortLagSysPrio=virtualPortLagSysPrio, entityCrossConnEntry=entityCrossConnEntry, alarmThres15MinExceededOduTcmCES=alarmThres15MinExceededOduTcmCES, shelfInternalPorts=shelfInternalPorts, changePhysicalPortServiceTimModeOduTcmA=changePhysicalPortServiceTimModeOduTcmA, entityTerminPointOneIndex=entityTerminPointOneIndex, virtualPortPortMode=virtualPortPortMode, entityTerminPointIndexNo4=entityTerminPointIndexNo4, entityFfpType=entityFfpType, syslogIPv6Entry=syslogIPv6Entry, ratBlockingTable=ratBlockingTable, entityConnectionClass=entityConnectionClass, moduleMaxPowerConsumption=moduleMaxPowerConsumption, scIPv6=scIPv6, pmSnapshotCurrentEntry=pmSnapshotCurrentEntry)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", alarmPumpLaser3TempTooHigh=alarmPumpLaser3TempTooHigh, alarmEqualizationProgress=alarmEqualizationProgress, scSecondaryStates=scSecondaryStates, moduleNodeIpAddress=moduleNodeIpAddress, crossOpticalLineTable=crossOpticalLineTable, optIntervalPm1dayEntry=optIntervalPm1dayEntry, alarmSysEntry=alarmSysEntry, optIntervalPm1weekTimeStamp=optIntervalPm1weekTimeStamp, physicalPortFacilities=physicalPortFacilities, alarmShelfConnTimeStamp=alarmShelfConnTimeStamp, entityFilterCableTableId=entityFilterCableTableId, entityFilterCableClassName=entityFilterCableClassName, virtualPortProtectionRole=virtualPortProtectionRole, ipv6ActRoutesSlotNo=ipv6ActRoutesSlotNo, notAssignableExternalPortIndexNo1=notAssignableExternalPortIndexNo1, alarmFiberAttenuationCond=alarmFiberAttenuationCond, changePhysicalPortServiceSigDegThresOdu=changePhysicalPortServiceSigDegThresOdu, physicalPortUtag=physicalPortUtag, alarmThres15MinExceededOduTcmAUAS=alarmThres15MinExceededOduTcmAUAS, alarmContainerTimeStamp=alarmContainerTimeStamp, changePhysicalPortServiceTraceTransmitDapiOduTcmB=changePhysicalPortServiceTraceTransmitDapiOduTcmB, upwardOpticalMuxTable=upwardOpticalMuxTable, entityEqptType=entityEqptType, endOfAlarmSeverityShelfConnTable=endOfAlarmSeverityShelfConnTable, scType=scType, endOfNotAssignableExternalPortTable=endOfNotAssignableExternalPortTable, physicalPortLaneChannel1=physicalPortLaneChannel1, containerVch1AidString=containerVch1AidString, entitySysShelfNo=entitySysShelfNo, containerCrsOptLineClass=containerCrsOptLineClass, notAssignableShelfConnClass=notAssignableShelfConnClass, plugLoopbackAttenuation=plugLoopbackAttenuation, alarmAlarmIndicationSignalLine=alarmAlarmIndicationSignalLine, containerVchExtNo=containerVchExtNo, upwardDcnSlotNo=upwardDcnSlotNo, oprIntervalPm15minEntry=oprIntervalPm15minEntry, endOfDownwardShelfConnTable=endOfDownwardShelfConnTable, moduleMapping=moduleMapping, containerCrsOptLineTable=containerCrsOptLineTable, entityProtectionCableEntry=entityProtectionCableEntry, ratFrom=ratFrom, fspR7CreationTrap=fspR7CreationTrap, opticalLineTransmitFrequency=opticalLineTransmitFrequency, alarmLossofMultiframeLowerOrderPath=alarmLossofMultiframeLowerOrderPath, alarmLossOfFrameMux=alarmLossOfFrameMux, virtualPortTimModeOduTcmC=virtualPortTimModeOduTcmC, ipv6InActRoutesMetric=ipv6InActRoutesMetric, changePhysicalPortServiceEqlzAdmin=changePhysicalPortServiceEqlzAdmin, alarmMultipleFanFailure=alarmMultipleFanFailure, moduleNdpCleanup=moduleNdpCleanup, upwardOptLineSlotNo=upwardOptLineSlotNo, entityOpticalMuxTable=entityOpticalMuxTable, containerVSContainer=containerVSContainer, notAssignableEqptTable=notAssignableEqptTable, containerConnectStdToId=containerConnectStdToId, advaInventoryAidString=advaInventoryAidString, terminationPointGroup=terminationPointGroup, physicalPortInputPower=physicalPortInputPower, moduleAvlndpF2967Rxcrs=moduleAvlndpF2967Rxcrs, haTable=haTable, downwardExternalPortIndex=downwardExternalPortIndex, virtualPortSigDegPeriodOdu=virtualPortSigDegPeriodOdu, notAssignableContainerIndexNo1=notAssignableContainerIndexNo1, upwardOpticalMuxExtNo=upwardOpticalMuxExtNo, alarmThres15MinExceededSonetLineSES=alarmThres15MinExceededSonetLineSES, transientThres1DayExceededOtuES=transientThres1DayExceededOtuES, containerChSlotNo=containerChSlotNo, alarmOptOutputPowerTransTooLow=alarmOptOutputPowerTransTooLow, changePhysicalPortServiceErrorForwarding=changePhysicalPortServiceErrorForwarding, alarmLossOfSignalNPort=alarmLossOfSignalNPort, entityExternalPortShelfNo=entityExternalPortShelfNo, entityProtectionCableIndex1=entityProtectionCableIndex1, virtualPortSigDegPeriodOduTcmB=virtualPortSigDegPeriodOduTcmB, alarmOTDRMeasuringinProgress=alarmOTDRMeasuringinProgress, connectionEntry=connectionEntry, changePhysicalPortServiceTraceExpectedSonetSection=changePhysicalPortServiceTraceExpectedSonetSection, virtualPortOperState=virtualPortOperState, management=management, physicalPortPortRole=physicalPortPortRole, containerConnectStdFromIndexNo4=containerConnectStdFromIndexNo4, upwardExternalPortPortNo=upwardExternalPortPortNo, containerCrossConnFromPointClass=containerCrossConnFromPointClass, crossOpticalLineAlias=crossOpticalLineAlias, physicalPortLagPrio=physicalPortLagPrio, alarmFarEndCommFailure=alarmFarEndCommFailure, alarmAseTableGenFailSignalinput=alarmAseTableGenFailSignalinput, notAssignableEqptIndexNo3=notAssignableEqptIndexNo3, alarmFiberConnCommError=alarmFiberConnCommError, changePhysicalPortServiceTxOnTimer=changePhysicalPortServiceTxOnTimer, entityFilterCableEntry=entityFilterCableEntry, alarmLossOfMultiFrameOtu=alarmLossOfMultiFrameOtu, opticalMuxMultiplexLevel=opticalMuxMultiplexLevel, envPortConnectorType=envPortConnectorType, virtualPortOffsetLow=virtualPortOffsetLow, entityTerminPointTable=entityTerminPointTable, entityCrossDcnTable=entityCrossDcnTable, moduleAvlndpF270Rxcrs=moduleAvlndpF270Rxcrs, shelfConnRate=shelfConnRate, virtualSessionUserName=virtualSessionUserName, containerCrossConnFromShelfNo=containerCrossConnFromShelfNo, lanTable=lanTable, containerOlIndexNo3=containerOlIndexNo3, entityOptLineIndexNo1=entityOptLineIndexNo1, lanValidSigTimer=lanValidSigTimer, virtualPortMacAddress=virtualPortMacAddress, moduleDCFiberType=moduleDCFiberType, alarmSeverityExternalPortType=alarmSeverityExternalPortType, containerEntry=containerEntry, opticalLineSecondaryStates=opticalLineSecondaryStates, alarmLossOfPointerLowerOrderPath=alarmLossOfPointerLowerOrderPath, shelfEntry=shelfEntry, alarmEncryptionModuleFwpUpdateEnabled=alarmEncryptionModuleFwpUpdateEnabled, shelfInternalPlugRates=shelfInternalPlugRates, shelfTable=shelfTable, externalPortMinOsnrRcv=externalPortMinOsnrRcv, envPortTable=envPortTable, alarmAseTableGenFailLow=alarmAseTableGenFailLow, haInhSwitching=haInhSwitching, alarmLaserTemperatureTooLow=alarmLaserTemperatureTooLow, alarmDatabaseVersionMismatch=alarmDatabaseVersionMismatch, virtualPortLagStandby=virtualPortLagStandby, advaInventoryShelfNo=advaInventoryShelfNo, icmpFiltering=icmpFiltering, crossConnectionTunnelAid=crossConnectionTunnelAid, crossOpticalLineCrsType=crossOpticalLineCrsType, scValidSigTimer=scValidSigTimer, shelfRackOrder=shelfRackOrder, linkMetric=linkMetric, scAreaAid=scAreaAid, alarmEqptSeverity=alarmEqptSeverity, physicalPortDispertionConfig=physicalPortDispertionConfig, containerPlugEntry=containerPlugEntry, containerLinkShelfNo=containerLinkShelfNo, virtualPortLacpTimeout=virtualPortLacpTimeout, entityFacilityExtNo=entityFacilityExtNo, crossConnectionIngressNodeIp=crossConnectionIngressNodeIp, fanFanPorts=fanFanPorts, opticalLineConnState=opticalLineConnState, entityFacilityOneIndex=entityFacilityOneIndex, upwardEnvExtNo=upwardEnvExtNo, ntpIPv4TestStatus=ntpIPv4TestStatus, endOfAlarmProfile=endOfAlarmProfile, moduleAvlndpF1485Txcrs=moduleAvlndpF1485Txcrs, alarmThres15MinExceededOduTcmABbe=alarmThres15MinExceededOduTcmABbe, entityTerminPointIndexNo1=entityTerminPointIndexNo1, containerOmEntry=containerOmEntry, entityFfpExtNo=entityFfpExtNo, opticalLineTable=opticalLineTable, containerPchPortNo=containerPchPortNo, alarmSeverityContainerValue=alarmSeverityContainerValue, virtualPortCirTrmt=virtualPortCirTrmt, containerVethParentId=containerVethParentId, fanFanProfile=fanFanProfile, containerShelfTableId=containerShelfTableId, alarmEqptType=alarmEqptType, endOfNotAssignables=endOfNotAssignables, opticalLineLanes=opticalLineLanes, notAssignableOptLineClass=notAssignableOptLineClass, endOfEntities=endOfEntities, changePhysicalPortServiceTraceTransmitDapiOduTcmC=changePhysicalPortServiceTraceTransmitDapiOduTcmC, nextUnusedFc=nextUnusedFc, containerShelfConnExtNo=containerShelfConnExtNo, alarmAutoShutdownToHighTemp=alarmAutoShutdownToHighTemp, notAssignableContainerEntry=notAssignableContainerEntry, alarmFacilityTimeStamp=alarmFacilityTimeStamp, entityCrsOptLineToIndexNo3=entityCrsOptLineToIndexNo3, moduleGainRange=moduleGainRange, shelfOperState=shelfOperState, scIpMode=scIpMode, containerOmParentId=containerOmParentId, oprThresholdConfigLowConfig=oprThresholdConfigLowConfig, entityOptLineClassName=entityOptLineClassName, alarmOpticalMuxAffect=alarmOpticalMuxAffect, unassignedInventoryAssignState=unassignedInventoryAssignState, alarmConfOutPowerTransTooHigh=alarmConfOutPowerTransTooHigh, moduleActivateDetect=moduleActivateDetect, opticalLineTransmitWavelength=opticalLineTransmitWavelength, alarmAttOnTransmitterFiberHigherThanMonitor=alarmAttOnTransmitterFiberHigherThanMonitor, envMgmt=envMgmt, virtualPortInhibitSwitchToWork=virtualPortInhibitSwitchToWork, endOfAlarmSeverityEnvTable=endOfAlarmSeverityEnvTable, notAssignableOpticalMuxParentId=notAssignableOpticalMuxParentId, eccValidSigTimer=eccValidSigTimer, alarmOpenConnectionIndicationOduTcmB=alarmOpenConnectionIndicationOduTcmB, entityExternalPortPortNo=entityExternalPortPortNo, physicalPortLagKey=physicalPortLagKey, endOfOpticalMuxTable=endOfOpticalMuxTable, alarmConfigurationMismatch=alarmConfigurationMismatch, opticalMuxAlias=opticalMuxAlias, containerScParentId=containerScParentId, alarmAseTableGenFailOscMissing=alarmAseTableGenFailOscMissing, changePhysicalPortServiceEntry=changePhysicalPortServiceEntry, alarmSysTimeStamp=alarmSysTimeStamp, upwardShelfConnExtNo=upwardShelfConnExtNo, notAssignableOptLineEntry=notAssignableOptLineEntry, downwardContainerPortNo=downwardContainerPortNo, opticalMuxRowStatus=opticalMuxRowStatus, linkAuthType=linkAuthType, downwardContainerClassName=downwardContainerClassName, physicalPortTraceTransmitSapiOduTcmC=physicalPortTraceTransmitSapiOduTcmC, moduleWidth=moduleWidth, containerChClass=containerChClass, virtualPortAdmin=virtualPortAdmin, containerOmAidString=containerOmAidString, scGatewayProxyArp=scGatewayProxyArp, pmSnapshotHistoricalTimeStamp=pmSnapshotHistoricalTimeStamp, ratSuperChannel=ratSuperChannel, moduleRamUsage=moduleRamUsage, entityCrossConnFromExtNo=entityCrossConnFromExtNo, shelfFiberType=shelfFiberType, moduleForceDestroy=moduleForceDestroy, upwardDcnClassName=upwardDcnClassName, alarmThres15MinExceededOduTcmBES=alarmThres15MinExceededOduTcmBES, externalPortOsnrTransmit=externalPortOsnrTransmit, terminationPointEntry=terminationPointEntry, shelfType=shelfType, containerPchAidString=containerPchAidString, downwardOptLineExtNo=downwardOptLineExtNo, virtualPortChannelBand=virtualPortChannelBand, shelfSlot=shelfSlot, containerShelfConnTableId=containerShelfConnTableId, entityOpticalMuxOneIndex=entityOpticalMuxOneIndex, physicalPortTraceReceived=physicalPortTraceReceived, entityMtosiSlotsShelfNo=entityMtosiSlotsShelfNo, containerLanTable=containerLanTable, containerModParentId=containerModParentId, alarmLossOfFrameOtu=alarmLossOfFrameOtu, physicalPortBidirectionalChannel=physicalPortBidirectionalChannel, physicalPortTraceTransmitSapiOdu=physicalPortTraceTransmitSapiOdu, virtualSessionChangeReason=virtualSessionChangeReason, pmSnapshotCurrentVariableGain=pmSnapshotCurrentVariableGain, downwardTerminPointChildId=downwardTerminPointChildId, scChannel=scChannel, transientPmSnapshotEnded=transientPmSnapshotEnded, alarmFacilityEntry=alarmFacilityEntry, upwardTerminPointIndexNo2=upwardTerminPointIndexNo2, containerVomTableId=containerVomTableId, alarmLossOfPilotSignal=alarmLossOfPilotSignal, physicalPortInhibitSwitchToWork=physicalPortInhibitSwitchToWork, containerOlAidString=containerOlAidString, alarmSeverityExternalPortTable=alarmSeverityExternalPortTable, optIntervalPm1weekMean=optIntervalPm1weekMean, alarmAlarmIndicationSignalOdu=alarmAlarmIndicationSignalOdu, transientFwpInstallStarted=transientFwpInstallStarted, ipv6ActRoutesEntry=ipv6ActRoutesEntry, ntpIPv6IpAddr=ntpIPv6IpAddr, moduleCapabilityLevelProvision=moduleCapabilityLevelProvision, virtualPortFrequency=virtualPortFrequency, alarmSignalDegradationonLinkVector=alarmSignalDegradationonLinkVector, crossConnectionCrsContAidListTwo=crossConnectionCrsContAidListTwo, endOfDependentTable=endOfDependentTable, opticalMuxRcvChannel=opticalMuxRcvChannel, containerEthClass=containerEthClass, containerEnvShelfNo=containerEnvShelfNo)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", linkIPv6Type=linkIPv6Type, physicalPortLagFendState=physicalPortLagFendState, fanTable=fanTable, entityFfpPortNo=entityFfpPortNo, changePhysicalPortServiceWdmRxChannel=changePhysicalPortServiceWdmRxChannel, containerVomExtNo=containerVomExtNo, entitySysAidString=entitySysAidString, ntpIPv6OperState=ntpIPv6OperState, containerExternalPortTableId=containerExternalPortTableId, upwardOpticalMuxEntry=upwardOpticalMuxEntry, entityEqptOneIndex=entityEqptOneIndex, terminationPointChannel=terminationPointChannel, entityContainerTable=entityContainerTable, virtualSessionStatus=virtualSessionStatus, upwardEnvClassName=upwardEnvClassName, entityFfpSlotNo=entityFfpSlotNo, alarmPowerMissing=alarmPowerMissing, transientThres1DayExceededOduTcmASES=transientThres1DayExceededOduTcmASES, virtualPortTimModeOduTcmB=virtualPortTimModeOduTcmB, physicalPortPhysIfBaseType=physicalPortPhysIfBaseType, containerOtlgSlotNo=containerOtlgSlotNo, protectionCableTable=protectionCableTable, opticalMuxTimePeriod=opticalMuxTimePeriod, containerCrsOptLineEntry=containerCrsOptLineEntry, opticalMuxFiberBrand=opticalMuxFiberBrand, containerPlugTableId=containerPlugTableId, alarmFiberConnInvalid=alarmFiberConnInvalid, connectionTable=connectionTable, alarmLockedDefectOduTcmC=alarmLockedDefectOduTcmC, opticalMuxConnState=opticalMuxConnState, terminationPointConnEqptState=terminationPointConnEqptState, alarmPumpLaser2TempTooHigh=alarmPumpLaser2TempTooHigh, containerEthAidString=containerEthAidString, physicalPortLaserOffDelayFunction=physicalPortLaserOffDelayFunction, crossConnectionEntry=crossConnectionEntry, entityExternalPortEntry=entityExternalPortEntry, alarmServerSignalFailurePath=alarmServerSignalFailurePath, advaInventoryCapabilityLevel=advaInventoryCapabilityLevel, physicalPortInhibitSwitchToProt=physicalPortInhibitSwitchToProt, alarmProfileSeverityTable=alarmProfileSeverityTable, containerFfpTable=containerFfpTable, containerLinkParentId=containerLinkParentId, opticalMuxOffset=opticalMuxOffset, oprIntervalPm1dayTimeStamp=oprIntervalPm1dayTimeStamp, alarmContainerTable=alarmContainerTable, moduleAvlndpGbeRxcrs=moduleAvlndpGbeRxcrs, physicalPortSigDegPeriodIntegration=physicalPortSigDegPeriodIntegration, notAssignableFacilityIndexNo2=notAssignableFacilityIndexNo2, alarmHwOprReachedHT=alarmHwOprReachedHT, virtualPortTcmBLevel=virtualPortTcmBLevel, containerOlTable=containerOlTable, containerOwlgIndexNo1=containerOwlgIndexNo1, changePhysicalPortServiceSigDegPeriodSdhSection=changePhysicalPortServiceSigDegPeriodSdhSection, externalPortReferByEntry=externalPortReferByEntry, physicalPortOutputPower=physicalPortOutputPower, eccSecondaryStates=eccSecondaryStates, sshHostKeyLength=sshHostKeyLength, scIpAddr=scIpAddr, physicalPortCirTrmt=physicalPortCirTrmt, changePhysicalPortServiceTraceTransmitSapiOtu=changePhysicalPortServiceTraceTransmitSapiOtu, notAssignableEqptIndexNo2=notAssignableEqptIndexNo2, alarmLockedDefectOdu=alarmLockedDefectOdu, downwardTerminPointIndexNo3=downwardTerminPointIndexNo3, ipv6InActRoutesPort=ipv6InActRoutesPort, transientThres1DayExceededPhysConvCV=transientThres1DayExceededPhysConvCV, physicalPortSigDegThresSdhSection=physicalPortSigDegThresSdhSection, alarmSignalFailureOPU=alarmSignalFailureOPU, alarmVoltageOutOfRange=alarmVoltageOutOfRange, alarmThres15MinExceededSonetLineCV=alarmThres15MinExceededSonetLineCV, optIntervalPm1dayMean=optIntervalPm1dayMean, virtualSessionTimeout=virtualSessionTimeout, moduleAvlndpF270Txcrs=moduleAvlndpF270Txcrs, physicalPortDispersionMode=physicalPortDispersionMode, whitelistId=whitelistId, opticalMuxOpticalSetPoint=opticalMuxOpticalSetPoint, containerVch1ParentId=containerVch1ParentId, alarmEncryptionModuleSelfTestStarted=alarmEncryptionModuleSelfTestStarted, alarmTurnupFailed=alarmTurnupFailed, externalPortChromDisperTx=externalPortChromDisperTx, endOfEnvPortTable=endOfEnvPortTable, entityMtosiSlotsClassName=entityMtosiSlotsClassName, virtualPortIngressTid=virtualPortIngressTid, externalPortMinOptPowerRcv=externalPortMinOptPowerRcv, downwardContainerExtNo=downwardContainerExtNo, alarmFiberConnProtocolFailure=alarmFiberConnProtocolFailure, endOfFiberMap=endOfFiberMap, optIntervalPm1weekValidFlag=optIntervalPm1weekValidFlag, advaInventoryFpgaRev=advaInventoryFpgaRev, alarmSeverityOpticalMuxEntry=alarmSeverityOpticalMuxEntry, entityEnvClassName=entityEnvClassName, terminationPointFiberDetect=terminationPointFiberDetect, alarmSeverityContainerEntry=alarmSeverityContainerEntry, lanOspf=lanOspf, endOfChangeService=endOfChangeService, virtualPortDataLayerPmReset=virtualPortDataLayerPmReset, alarmAlarmIndicationSignalLowerOrderPath=alarmAlarmIndicationSignalLowerOrderPath, containerOmClassName=containerOmClassName, containerCrossDcnClassName=containerCrossDcnClassName, shelfScuRing=shelfScuRing, transientThres1DayExceededFecUBE=transientThres1DayExceededFecUBE, oprIntervalPm1dayEntry=oprIntervalPm1dayEntry, physicalPortTraceRcvDapiOdu=physicalPortTraceRcvDapiOdu, terminationPointFiber=terminationPointFiber, entityCrsOptLineToIndexNo1=entityCrsOptLineToIndexNo1, entityCrossDcnSlotNo=entityCrossDcnSlotNo, plugEntry=plugEntry, transientFwpSwitchCompleted=transientFwpSwitchCompleted, aidMappingEntry=aidMappingEntry, entityDcnClassName=entityDcnClassName, crossConnectionAdmin=crossConnectionAdmin, containerScSlotNo=containerScSlotNo, shelfUpgradePorts=shelfUpgradePorts, virtualPortLagSysMac=virtualPortLagSysMac, crossConnectionCrsFromAidTwo=crossConnectionCrsFromAidTwo, downwardDcnChildId=downwardDcnChildId, externalPortTransmitChannel=externalPortTransmitChannel, containerConnectNonStdTableId=containerConnectNonStdTableId, containerVethPortNo=containerVethPortNo, containerCrsOptLineFromPointIndexNo1=containerCrsOptLineFromPointIndexNo1, transientManualWorkingSwitchedBacktoWorking=transientManualWorkingSwitchedBacktoWorking, containerChTableId=containerChTableId, alarmMidstageFault=alarmMidstageFault, optIntervalPm1dayHigh=optIntervalPm1dayHigh, nextUnusedPc=nextUnusedPc, containerSecondaryStates=containerSecondaryStates, transientProtSwToDuplexStart=transientProtSwToDuplexStart, entityConnectionType=entityConnectionType, ffpApsChannel=ffpApsChannel, syslogIPv6RowStatus=syslogIPv6RowStatus, transientCryptoAuthPasswdInvalid=transientCryptoAuthPasswdInvalid, channelTracesEntry=channelTracesEntry, optIntervalPm15minValidFlag=optIntervalPm15minValidFlag, notAssignableFacilityIndexNo1=notAssignableFacilityIndexNo1, shelfConnTransmitChannel=shelfConnTransmitChannel, optThresholdConfigEntry=optThresholdConfigEntry, moduleFanMode=moduleFanMode, alarmSignalToNoiseRatioTooLow=alarmSignalToNoiseRatioTooLow, ipv6ActRoutesExtNo=ipv6ActRoutesExtNo, containerLinkEntry=containerLinkEntry, endOfFilterCableTable=endOfFilterCableTable, lsrtempThresholdConfigTable=lsrtempThresholdConfigTable, ffpCreationMethod=ffpCreationMethod, downwardEqptSlotNo=downwardEqptSlotNo, alarmSeverityContainerType=alarmSeverityContainerType, alarmAutoShutdownOpuClientSignalFail=alarmAutoShutdownOpuClientSignalFail, alarmLatencyTooHigh=alarmLatencyTooHigh, alarmEnvTimeStamp=alarmEnvTimeStamp, alarmSeverityShelfConnType=alarmSeverityShelfConnType, alarmEncryptionModuleSelfTestFailCritical=alarmEncryptionModuleSelfTestFailCritical, endOfFanTable=endOfFanTable, virtualPortTraceTransmitSapiOduTcmC=virtualPortTraceTransmitSapiOduTcmC, virtualPortSigDegThresOduTcmA=virtualPortSigDegThresOduTcmA, downwardFacilitySlotNo=downwardFacilitySlotNo, envPortTelemetry=envPortTelemetry, upwardEqptClassName=upwardEqptClassName, alarmTerminalLoopback=alarmTerminalLoopback, alarmDispertionTunningCondition=alarmDispertionTunningCondition, changePhysicalPortServiceTcmBLevel=changePhysicalPortServiceTcmBLevel, alarmTerminPointSeverity=alarmTerminPointSeverity, alarmApsConfigMismatch=alarmApsConfigMismatch, opticalMuxFiberType=opticalMuxFiberType, alarmProfileSeverityDefaultValue=alarmProfileSeverityDefaultValue, entityEqptExtNo=entityEqptExtNo, endOfAlarmSysTable=endOfAlarmSysTable, changePhysicalPortServiceSigDegPeriodOdu=changePhysicalPortServiceSigDegPeriodOdu, containerCrossConnFromClassName=containerCrossConnFromClassName, alarmBackupNotResponding=alarmBackupNotResponding, alarmLossOfReceiverClockRecovery=alarmLossOfReceiverClockRecovery, alarmExternalPortTable=alarmExternalPortTable, alarmOpticalMuxType=alarmOpticalMuxType, endOfExternalPortReferByTabke=endOfExternalPortReferByTabke, pmSnapshotHistoricalValue=pmSnapshotHistoricalValue, moduleType=moduleType, sslValidityPeriod=sslValidityPeriod, opticalLineTxLineAttenuation=opticalLineTxLineAttenuation, entityDcnPortNo=entityDcnPortNo, entityOptLineAidString=entityOptLineAidString, physicalPortTimModeOdu=physicalPortTimModeOdu, physicalPortLaserReleaseTimer=physicalPortLaserReleaseTimer, containerExternalPortAidString=containerExternalPortAidString, entityFfpTable=entityFfpTable, containerCrossConnFromPointParentId=containerCrossConnFromPointParentId, moduleInternalPlugs=moduleInternalPlugs, eccMaxDataRate=eccMaxDataRate, notAssignableFacilityParentId=notAssignableFacilityParentId, containerTerminPointTable=containerTerminPointTable, plugTransmitChannel=plugTransmitChannel, pmSnapshotCurrentBckreflecPwrRx=pmSnapshotCurrentBckreflecPwrRx, alarmOpuClientSignalFail=alarmOpuClientSignalFail, alarmThres15MinExceededOduES=alarmThres15MinExceededOduES, alarmInputTIF=alarmInputTIF, crossConnectionSecondaryStates=crossConnectionSecondaryStates, transientCryptoAuthPasswdChanged=transientCryptoAuthPasswdChanged, physicalPortTraceTransmitSonetSection=physicalPortTraceTransmitSonetSection, entityDcnAidString=entityDcnAidString, transientThres1DayExceededOduTcmCBbe=transientThres1DayExceededOduTcmCBbe, entitySysClassName=entitySysClassName, physicalPortSignalDegradePeriod=physicalPortSignalDegradePeriod, containerConnectStdToClassName=containerConnectStdToClassName, crossOpticalLineEntry=crossOpticalLineEntry, alarmLockedDefectOduTcmA=alarmLockedDefectOduTcmA, changePhysicalPortServiceLaserOnTimer=changePhysicalPortServiceLaserOnTimer, crossConnectionPathNode=crossConnectionPathNode, entityOpticalMuxClassName=entityOpticalMuxClassName, alarmSeverityEqptEntry=alarmSeverityEqptEntry, downwardTerminPointIndexNo2=downwardTerminPointIndexNo2, unassignedInventoryClass=unassignedInventoryClass, changePhysicalPortServiceLaserOffTimer=changePhysicalPortServiceLaserOffTimer, downwardEnvShelfNo=downwardEnvShelfNo, containerCrossConnTable=containerCrossConnTable, containerShelfConnTable=containerShelfConnTable, containerShelfConnAidString=containerShelfConnAidString, downwardShelfConnPortNo=downwardShelfConnPortNo, ffpFarEndIp=ffpFarEndIp, dependentTable=dependentTable, physicalPortTraceRcvDapiOtu=physicalPortTraceRcvDapiOtu, entityFacilityPortNo=entityFacilityPortNo, containerCrossConnAidString=containerCrossConnAidString, containerOtlgClass=containerOtlgClass, containerExternalPortClassName=containerExternalPortClassName, endOfUpwardDcnTable=endOfUpwardDcnTable, optIntervalPm15minNumber=optIntervalPm15minNumber, alarmAseTableNotAvailable=alarmAseTableNotAvailable, ipv6InActRoutesEntry=ipv6InActRoutesEntry, entitySysOneIndex=entitySysOneIndex, downwardOpticalMuxShelfNo=downwardOpticalMuxShelfNo, containerScShelfNo=containerScShelfNo, transientEncryptionPortSingleKeyExchgFailed=transientEncryptionPortSingleKeyExchgFailed, facilityReferByTable=facilityReferByTable, fanAdmin=fanAdmin, notAssignableDcnParentId=notAssignableDcnParentId, shelfClientPorts=shelfClientPorts, endOfProtectionCableTable=endOfProtectionCableTable, alarmPayloadMismatchLowerOrderPath=alarmPayloadMismatchLowerOrderPath, changePhysicalPortServiceSigDegThresOduTcmB=changePhysicalPortServiceSigDegThresOduTcmB, containerLinkPortNo=containerLinkPortNo, plugChannelSpacingProvision=plugChannelSpacingProvision, plugReach=plugReach, scTrmtWavelength=scTrmtWavelength, ffpSignalFailureSwitching=ffpSignalFailureSwitching, shelfShelfHeight=shelfShelfHeight, downwardOptLineIndex=downwardOptLineIndex, notAssignableDcnAidString=notAssignableDcnAidString, transientWorkingSwitchedtoProtection=transientWorkingSwitchedtoProtection, containerCrossConnFromPointExtNo=containerCrossConnFromPointExtNo, alarmEnvEntry=alarmEnvEntry, virtualPortTraceRcvSapiTcmc=virtualPortTraceRcvSapiTcmc, upwardEqptTable=upwardEqptTable, opticalMuxForceLaserOn=opticalMuxForceLaserOn, notAssignableContainerClassName=notAssignableContainerClassName, endOfOpticalMuxMgmt=endOfOpticalMuxMgmt, entityProtectionCableType=entityProtectionCableType, virtualPortTraceTransmitDapiOduTcmC=virtualPortTraceTransmitDapiOduTcmC, endOfCrossOpticalLineTable=endOfCrossOpticalLineTable)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", entityCrsOptLineToIndexNo4=entityCrsOptLineToIndexNo4, changePhysicalPortServiceTraceExpectedOtu=changePhysicalPortServiceTraceExpectedOtu, alarmAmpFailure=alarmAmpFailure, physicalPortTransmitterWavelength=physicalPortTransmitterWavelength, entityFfpClassName=entityFfpClassName, virtualPortUtag=virtualPortUtag, containerTerminPointIndexNo4=containerTerminPointIndexNo4, pmSnapshotCurrentOscPwrReceived=pmSnapshotCurrentOscPwrReceived, changePhysicalPortServiceAdmin=changePhysicalPortServiceAdmin, linkParityBit=linkParityBit, fspR7WriteAccessTimeout=fspR7WriteAccessTimeout, lockSafety=lockSafety, containerOperState=containerOperState, advaInventoryClassName=advaInventoryClassName, entitySysClass=entitySysClass, ffpWaitToRestore=ffpWaitToRestore, alarmTraceIdentifierMismatchOdu=alarmTraceIdentifierMismatchOdu, physicalPortStagType=physicalPortStagType, virtualPortLagSysIdFend=virtualPortLagSysIdFend, alarmSysAffect=alarmSysAffect, moduleAdmin=moduleAdmin, entityCrsOptLineTable=entityCrsOptLineTable, entityCrsOptLineFromId=entityCrsOptLineFromId, physicalPortTurnupConfig=physicalPortTurnupConfig, entityFacilityTableId=entityFacilityTableId, physicalPortWdmRxChannel=physicalPortWdmRxChannel, changePhysicalPortServiceTxOffDelay=changePhysicalPortServiceTxOffDelay, opticalLineLaneChannel2=opticalLineLaneChannel2, alarmClientFailForwarding=alarmClientFailForwarding, moduleAvlndpF2970Txcrs=moduleAvlndpF2970Txcrs, fanOutputReset=fanOutputReset, downwardEnvSlotNo=downwardEnvSlotNo, changePhysicalPortServiceBehaviour=changePhysicalPortServiceBehaviour, channelTracesClassName=channelTracesClassName, advaInventoryUniversalSerialIdent=advaInventoryUniversalSerialIdent, physicalPortTraceRcvOpspTcmc=physicalPortTraceRcvOpspTcmc, shelfConnFacilityType=shelfConnFacilityType, alarmVoaControlFail=alarmVoaControlFail, entitySysEquipmentState=entitySysEquipmentState, haSwitchOverCause=haSwitchOverCause, alarmOptOutputPowerTransTooHigh=alarmOptOutputPowerTransTooHigh, shelfChannelsNumber=shelfChannelsNumber, fspR7StateChangeTrap=fspR7StateChangeTrap, alarmThres15MinExceededSonetLineUAS=alarmThres15MinExceededSonetLineUAS, dateAndTime=dateAndTime, ipv6ActRoutesPort=ipv6ActRoutesPort, containerChShelfNo=containerChShelfNo, scReach=scReach, upwardFacilityExtNo=upwardFacilityExtNo, physicalPortLaserOnTimer=physicalPortLaserOnTimer, alarmOpticalMuxSeverity=alarmOpticalMuxSeverity, ffpProtectionAid=ffpProtectionAid, containerCrossConnToShelfNo=containerCrossConnToShelfNo, downwardContainerEntry=downwardContainerEntry, ipv6InActRoutesType=ipv6InActRoutesType, entityCrossConnType=entityCrossConnType, terminationPointFiberConnAtten=terminationPointFiberConnAtten, alarmCurrentTooHigh=alarmCurrentTooHigh, containerCrsOptLineFromPointAidString=containerCrsOptLineFromPointAidString, alarmShelfConnSeverity=alarmShelfConnSeverity, physicalPortValidSigTimer=physicalPortValidSigTimer, containerLinkClass=containerLinkClass, eccpppIpLinkAid=eccpppIpLinkAid, linkEntry=linkEntry, virtualPortLoopConfig=virtualPortLoopConfig, containerConnectNonStdToId=containerConnectNonStdToId, physicalPortLagIdFend=physicalPortLagIdFend, containerConnectStdFromClassName=containerConnectStdFromClassName, advaSecurity=advaSecurity, ipv6ActRoutesMetric=ipv6ActRoutesMetric, alarmMaxPowerConsEquipModulesToHigh=alarmMaxPowerConsEquipModulesToHigh, entityContainerEntry=entityContainerEntry, newSshHostKey=newSshHostKey, entityFacilitySlotNo=entityFacilitySlotNo, alarmLaserEndOfLife=alarmLaserEndOfLife, virtualPortCir=virtualPortCir, optThresholdConfigTable=optThresholdConfigTable, containerPchExtNo=containerPchExtNo, endOfTranslation=endOfTranslation, virtualPortMaxFrameSize=virtualPortMaxFrameSize, scRowStatus=scRowStatus, transientBootUpCompleted=transientBootUpCompleted, physicalPortAdmin=physicalPortAdmin, physicalPortSigDegPcslThreshold=physicalPortSigDegPcslThreshold, terminationPointTermType=terminationPointTermType, unassignedInventoryEntry=unassignedInventoryEntry, containerEnvTable=containerEnvTable, containerEnvParentId=containerEnvParentId, alarmDifferentialGroupDelayTooHigh=alarmDifferentialGroupDelayTooHigh, advaInventoryUnitName=advaInventoryUnitName, containerModClassName=containerModClassName, moduleLanPorts=moduleLanPorts, inventory=inventory, scIpAddrMonitor=scIpAddrMonitor, transientBootUpRejected=transientBootUpRejected, containerCrsOptLineFromPointIndexNo3=containerCrsOptLineFromPointIndexNo3, alarmPayloadMismatchHigherOrderPath=alarmPayloadMismatchHigherOrderPath, entityTerminPointIndexNo2=entityTerminPointIndexNo2, containerCrossConnFromPointShelfNo=containerCrossConnFromPointShelfNo, entityConnectionFromId=entityConnectionFromId, virtualPortSigDegThresOdu=virtualPortSigDegThresOdu, alarmRemoteDefectIndicationLowerOrderPath=alarmRemoteDefectIndicationLowerOrderPath, whitelistAdmin=whitelistAdmin, moduleSuppNetworkPlugRates=moduleSuppNetworkPlugRates, containerWchIndexNo4=containerWchIndexNo4, physicalPortPriority=physicalPortPriority, alarmSeverityTerminPointEntry=alarmSeverityTerminPointEntry, entityCrsOptLineFromClassName=entityCrsOptLineFromClassName, containerVchShelfNo=containerVchShelfNo, alarmPumpLaser2TempTooLow=alarmPumpLaser2TempTooLow, notAssignableEqptIndexNo1=notAssignableEqptIndexNo1, moduleNetworkPorts=moduleNetworkPorts, opticalMuxAseTabCreation=opticalMuxAseTabCreation, alarmProfileSeverityEntry=alarmProfileSeverityEntry, scLanAid=scLanAid, alarmLinkControlProtocolFailure=alarmLinkControlProtocolFailure, alarmSeverityOpticalMuxType=alarmSeverityOpticalMuxType, scConnector=scConnector, containerSequenceNumber=containerSequenceNumber, pmSnapshotCurrentTerminPointInputPower=pmSnapshotCurrentTerminPointInputPower, containerVethClassName=containerVethClassName, oprIntervalPm1weekEntry=oprIntervalPm1weekEntry, containerScTable=containerScTable, physicalPortCirRcv=physicalPortCirRcv, containerTerminPointIndexNo3=containerTerminPointIndexNo3, entityCrsOptLineTableId=entityCrsOptLineTableId, alarmPrbsRcvActivated=alarmPrbsRcvActivated, transientThres1DayExceededSonetLineES=transientThres1DayExceededSonetLineES, alarmChromaticDispersionTooLow=alarmChromaticDispersionTooLow, containerCrsOptLineFromPointTableId=containerCrsOptLineFromPointTableId, crossDcnTable=crossDcnTable, containerWchClassName=containerWchClassName, physicalPortTraceTransmitOpspOduTcmA=physicalPortTraceTransmitOpspOduTcmA, scAuthString=scAuthString, alarmEncryptionPortMaxKeyExchgFailuresReachedOos=alarmEncryptionPortMaxKeyExchgFailuresReachedOos, transientTopologyDataInvalid=transientTopologyDataInvalid, moduleRowStatus=moduleRowStatus, moduleInitEqlz=moduleInitEqlz, virtualPortEncapsulationMethod=virtualPortEncapsulationMethod, opticalMuxInitiateEqualization=opticalMuxInitiateEqualization, linkConnector=linkConnector, virtualPortInputPower=virtualPortInputPower, ratAnalyzerEntry=ratAnalyzerEntry, opticalMuxPpc=opticalMuxPpc, crossOpticalLineRowStatus=crossOpticalLineRowStatus, alarmBackreflectionTooHigh=alarmBackreflectionTooHigh, ratBlockingType=ratBlockingType, linkAuthString=linkAuthString, notAssignableEqptClassName=notAssignableEqptClassName, containerMgmt=containerMgmt, unassignedInventoryOneIndex=unassignedInventoryOneIndex, entityOptLineIndexNo3=entityOptLineIndexNo3, alarmFiberConnInvalidTx=alarmFiberConnInvalidTx, changePhysicalPortServiceSigDegPcslThreshold=changePhysicalPortServiceSigDegPcslThreshold, containerConnectStdFromIndexNo1=containerConnectStdFromIndexNo1, scMonitoredDuplexMode=scMonitoredDuplexMode, containerVethClass=containerVethClass, containerCrsOptLineFromIndexNo2=containerCrsOptLineFromIndexNo2, containerShelfConnPortNo=containerShelfConnPortNo, entityShelfConnShelfNo=entityShelfConnShelfNo, alarmPumpLaser1TempTooLow=alarmPumpLaser1TempTooLow, ipv6DefGateway=ipv6DefGateway, alarmLaserFailure=alarmLaserFailure, alarmFwdAseTableOnPilot=alarmFwdAseTableOnPilot, shelfMaxPowerConsumption=shelfMaxPowerConsumption, containerOwlgClassName=containerOwlgClassName, alarmAlarmIndicationSignalOduTcmA=alarmAlarmIndicationSignalOduTcmA, virtualPortTerminationLevel=virtualPortTerminationLevel, physicalPortTraceExpectedOduTcmA=physicalPortTraceExpectedOduTcmA, moduleTerminationType=moduleTerminationType, endOfEccTable=endOfEccTable, entityEnvParentId=entityEnvParentId, virtualPortTraceTransmitOpspOduTcmB=virtualPortTraceTransmitOpspOduTcmB, pmSnapshotCurrentTerminPointOutputPower=pmSnapshotCurrentTerminPointOutputPower, optIntervalPm1weekTable=optIntervalPm1weekTable, ntpIPv6SourceIp=ntpIPv6SourceIp, virtualPortTraceRcvOpspTcma=virtualPortTraceRcvOpspTcma, endOfNotAssignableShelfConnTable=endOfNotAssignableShelfConnTable, moduleAvlndpGbeTxcrs=moduleAvlndpGbeTxcrs, crossDcnType=crossDcnType, virtualPortTunnelAid=virtualPortTunnelAid, containerVchTable=containerVchTable, protectionCableEntry=protectionCableEntry, alarmThres15MinExceededOduTcmCBbe=alarmThres15MinExceededOduTcmCBbe, alarmSysSeverity=alarmSysSeverity, alarmLogicalLanesSkewTooHigh=alarmLogicalLanesSkewTooHigh, containerCrsOptLineToIndexNo2=containerCrsOptLineToIndexNo2, containerEccAidString=containerEccAidString, containerCrsOptLineFromIndexNo4=containerCrsOptLineFromIndexNo4, downwardShelfConnEntry=downwardShelfConnEntry, notAssignableOptLineIndexNo2=notAssignableOptLineIndexNo2, entityMtosiSlotsEntry=entityMtosiSlotsEntry, syslogIPv6Ip=syslogIPv6Ip, alarmEqptAffect=alarmEqptAffect, entityFfpClass=entityFfpClass, containerOlParentId=containerOlParentId, alarmHwInitializing=alarmHwInitializing, transientEqlzAuto=transientEqlzAuto, containerLinkSlotNo=containerLinkSlotNo, alarmEncryptionModuleTamperDetected=alarmEncryptionModuleTamperDetected, terminationPointReach=terminationPointReach, virtualSessionWriteAccess=virtualSessionWriteAccess, notAssignableContainerIndexNo3=notAssignableContainerIndexNo3, virtualPortSecondaryStates=virtualPortSecondaryStates, alarmAutoShutdownSendingAisOpu=alarmAutoShutdownSendingAisOpu, physicalPortTraceExpectedOtu=physicalPortTraceExpectedOtu, lanIpMask=lanIpMask, entityExternalPortOneIndex=entityExternalPortOneIndex, physicalPortTraceTransmitDapiOtu=physicalPortTraceTransmitDapiOtu, containerShelfClassName=containerShelfClassName, upwardEqptEntry=upwardEqptEntry, entityFacilityClass=entityFacilityClass, upwardTerminPointIndex=upwardTerminPointIndex, downwardEqptChildId=downwardEqptChildId, containerVschTableId=containerVschTableId, alarmSeverityShelfConnEntry=alarmSeverityShelfConnEntry, containerEccClass=containerEccClass, entityCrossConnTable=entityCrossConnTable, moduleReach=moduleReach, virtualPortTraceTransmitSapiOduTcmB=virtualPortTraceTransmitSapiOduTcmB, advaInventorySlotNo=advaInventorySlotNo, transientThres1DayExceededOduBbe=transientThres1DayExceededOduBbe, alarmWarmUp=alarmWarmUp, fspR7EquipmentInsertedTrap=fspR7EquipmentInsertedTrap, advaInventoryGradeInventory=advaInventoryGradeInventory, containerEccShelfNo=containerEccShelfNo, virtualPortTraceExpectedOduTcmB=virtualPortTraceExpectedOduTcmB, entityCrossDcnPortNo=entityCrossDcnPortNo, entityOptLineIndexNo2=entityOptLineIndexNo2, virtualPortIngressNodeIp=virtualPortIngressNodeIp, alarmThres15MinExceededOduUAS=alarmThres15MinExceededOduUAS, upwardTerminPointTable=upwardTerminPointTable, containerVchSlotNo=containerVchSlotNo, entityEqptPortNo=entityEqptPortNo, containerVomAidString=containerVomAidString, alarmProfile=alarmProfile, endOfDownwardTerminPointTable=endOfDownwardTerminPointTable, opticalMuxInhibitSwitchToProt=opticalMuxInhibitSwitchToProt, upwardOpticalMuxShelfNo=upwardOpticalMuxShelfNo, physicalPortTraceTransmitOpspOdu=physicalPortTraceTransmitOpspOdu, serviceAffecting=serviceAffecting, accessWarning=accessWarning, endOfDcnMgmt=endOfDcnMgmt, externalPortBitrate=externalPortBitrate, trapUser=trapUser, notAssignableExternalPortEntry=notAssignableExternalPortEntry, pmSnapshotCurrentTable=pmSnapshotCurrentTable, alarmAutoShutdownGAis=alarmAutoShutdownGAis, downwardOpticalMuxSlotNo=downwardOpticalMuxSlotNo, alarmLossofSequenceHigherOrderPath=alarmLossofSequenceHigherOrderPath, containerPlugExtNo=containerPlugExtNo, endOfEci=endOfEci, virtualSessionChangeTime=virtualSessionChangeTime, notAssignableContainerIndexNo4=notAssignableContainerIndexNo4)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", transientThres1DayExceededFecCE=transientThres1DayExceededFecCE, crossConnectionAlias=crossConnectionAlias, ipv6ActRoutesPrefix=ipv6ActRoutesPrefix, containerOmTable=containerOmTable, physicalPortTraceTransmitOpspOtu=physicalPortTraceTransmitOpspOtu, alarmBackwardDefectIndicationOdu=alarmBackwardDefectIndicationOdu, physicalPortTraceFormSonetSection=physicalPortTraceFormSonetSection, eccProtAvailability=eccProtAvailability, transientFwpInstallCompleted=transientFwpInstallCompleted, ntpIPv4SyncStatus=ntpIPv4SyncStatus, containerEthPortNo=containerEthPortNo, transientPathCleanupComplete=transientPathCleanupComplete, containerFanClassName=containerFanClassName, endOfHaTable=endOfHaTable, opticalMuxMaxRamanGainMon=opticalMuxMaxRamanGainMon, transientEqlzProcessPassed=transientEqlzProcessPassed, notAssignableShelfConnIndexNo3=notAssignableShelfConnIndexNo3, plugConnector=plugConnector, downwardOpticalMuxClassName=downwardOpticalMuxClassName, virtualPortStagType=virtualPortStagType, entityCrossDcnClassName=entityCrossDcnClassName, moduleTrafficDirection=moduleTrafficDirection, ffpEntry=ffpEntry, entityFfpEntry=entityFfpEntry, changePhysicalPortServiceSigDegPeriodOduTcmA=changePhysicalPortServiceSigDegPeriodOduTcmA, notAssignableShelfConnIndexNo2=notAssignableShelfConnIndexNo2, knownHostIPv6FingerPrint=knownHostIPv6FingerPrint, moduleFiberType=moduleFiberType, accessWarningMessage=accessWarningMessage, alarmSwitchFailed=alarmSwitchFailed, notAssignableOptLineParentId=notAssignableOptLineParentId, physicalPortErrorForwarding=physicalPortErrorForwarding, containerFanExtNo=containerFanExtNo, connectionState=connectionState, changePhysicalPortServiceTimModeOduTcmB=changePhysicalPortServiceTimModeOduTcmB, physicalPortChannelSpacing=physicalPortChannelSpacing, entityContainerClassName=entityContainerClassName, entityDcnClass=entityDcnClass, containerLinkExtNo=containerLinkExtNo, containerChExtNo=containerChExtNo, entityConnectionTableId=entityConnectionTableId, sslCertApply=sslCertApply, alarmThres15MinExceededFecSES=alarmThres15MinExceededFecSES, physicalPortTimModeOduTcmA=physicalPortTimModeOduTcmA, downwardDcnIndex=downwardDcnIndex, virtualPortOdtuType=virtualPortOdtuType, endOfAlarmSeveritySysTable=endOfAlarmSeveritySysTable, changePhysicalPortServiceTraceTransmitOpspOtu=changePhysicalPortServiceTraceTransmitOpspOtu, alarmFacilityLoopback=alarmFacilityLoopback, alarmLossOfTestSeqSynchOpu=alarmLossOfTestSeqSynchOpu, alarmLocalOscTemperatureTooHigh=alarmLocalOscTemperatureTooHigh, alarmOscOpticalPowerControlFailLow=alarmOscOpticalPowerControlFailLow, downwardDcnPortNo=downwardDcnPortNo, upwardEnvSlotNo=upwardEnvSlotNo, moduleRemoteReset=moduleRemoteReset, notAssignableExternalPortIndexNo2=notAssignableExternalPortIndexNo2, downwardOptLineEntry=downwardOptLineEntry, scAttGradientTh=scAttGradientTh, containerPchClass=containerPchClass, upwardShelfConnShelfNo=upwardShelfConnShelfNo, entityOptLineOneIndex=entityOptLineOneIndex, ntpIPv6Ip=ntpIPv6Ip, opticalMuxVariableGain=opticalMuxVariableGain, changePhysicalPortServiceRowStatus=changePhysicalPortServiceRowStatus, alarmLoopbackError=alarmLoopbackError, shelfChannelBandwith=shelfChannelBandwith, alarmProfileSeverityType=alarmProfileSeverityType, containerVch1TableId=containerVch1TableId, entityTerminPointClassName=entityTerminPointClassName, virtualPortTraceTransmitOpspOdu=virtualPortTraceTransmitOpspOdu, opticalLineChannelSpacing=opticalLineChannelSpacing, oprIntervalPm15minNumber=oprIntervalPm15minNumber, upwardEnvPortNo=upwardEnvPortNo, containerModAidString=containerModAidString, physicalPortConnType=physicalPortConnType, alarmTraceIdentifierMismatchOduTcmA=alarmTraceIdentifierMismatchOduTcmA, physicalPortTransmitterFrequency=physicalPortTransmitterFrequency, virtualPortChannelProv=virtualPortChannelProv, containerLanSlotNo=containerLanSlotNo, physicalPortReceiverFrequency=physicalPortReceiverFrequency, opticalMuxGainRange=opticalMuxGainRange, ratStartPointChannelGroup=ratStartPointChannelGroup, notAssignableOpticalMuxIndexNo1=notAssignableOpticalMuxIndexNo1, containerOwlgParentId=containerOwlgParentId, moduleSfProvision=moduleSfProvision, physicalPortEntry=physicalPortEntry, alarmRoundTripDelayTooHigh=alarmRoundTripDelayTooHigh, downwardEnvClassName=downwardEnvClassName, ratAnalyzerToAid=ratAnalyzerToAid, containerShelfSlotNo=containerShelfSlotNo, lanMetric=lanMetric, upwardFacilitySlotNo=upwardFacilitySlotNo, entityProtectionCableIndex3=entityProtectionCableIndex3, containerFanTableId=containerFanTableId, containerShelfTable=containerShelfTable, containerVch1PortNo=containerVch1PortNo, downwardDcnSlotNo=downwardDcnSlotNo, eccLanAid=eccLanAid, translation=translation, physicalPortTraceRcvSapiOtu=physicalPortTraceRcvSapiOtu, entityCrossConnFromClassName=entityCrossConnFromClassName, downwardTerminPointClassName=downwardTerminPointClassName, virtualPortLambda=virtualPortLambda, virtualPortTraceExpectedOduTcmA=virtualPortTraceExpectedOduTcmA, containerOmTableId=containerOmTableId, physicalPortTxOffOnTm=physicalPortTxOffOnTm, ntpIPv4OperState=ntpIPv4OperState, alarmLaserOnDelay=alarmLaserOnDelay, physicalPortTraceTransmitOpspOduTcmB=physicalPortTraceTransmitOpspOduTcmB, containerVschClassName=containerVschClassName, entityProtectionCableTableId=entityProtectionCableTableId, physicalPortTcmCLevel=physicalPortTcmCLevel, endOfProtection=endOfProtection, entityShelfConnType=entityShelfConnType, pmSnapshotCurrentTerminPointTable=pmSnapshotCurrentTerminPointTable, containerConnectStdToIndexNo2=containerConnectStdToIndexNo2, entityTerminPointIndexNo3=entityTerminPointIndexNo3, knownHostIPv6IP=knownHostIPv6IP, ipv6ActRoutesClassName=ipv6ActRoutesClassName, haSwitchToDuplex=haSwitchToDuplex, alarmEqlzAdjust=alarmEqlzAdjust, syslogIPv6DbchgReports=syslogIPv6DbchgReports, fanMaxPowerConsumption=fanMaxPowerConsumption, ratBlockingElementId=ratBlockingElementId, changePhysicalPortServiceTcmALevel=changePhysicalPortServiceTcmALevel, containerVch1ShelfNo=containerVch1ShelfNo, alarmOduTribMsiMismatch=alarmOduTribMsiMismatch, alarmOptInputPwrReceivedTooHigh=alarmOptInputPwrReceivedTooHigh, transientFiberConnStatChange=transientFiberConnStatChange, virtualPortLagActivePorts=virtualPortLagActivePorts, virtualPortTraceRcvOpspTcmc=virtualPortTraceRcvOpspTcmc, notAssignableContainerTable=notAssignableContainerTable, entityOpticalMuxAidString=entityOpticalMuxAidString, serviceDiagnostics=serviceDiagnostics, terminationPointDirection=terminationPointDirection, alarmTraceIdentifierMismatchOduTcmC=alarmTraceIdentifierMismatchOduTcmC, endOfAlarmEqptTable=endOfAlarmEqptTable, entityOpticalMuxExtNo=entityOpticalMuxExtNo, upwardExternalPortIndex=upwardExternalPortIndex, changePhysicalPortServiceSigDegThresSonetSection=changePhysicalPortServiceSigDegThresSonetSection, alarmServerSignalFail=alarmServerSignalFail, opticalMuxTransmitFrequency=opticalMuxTransmitFrequency, alarmThres15MinExceededBbePcs=alarmThres15MinExceededBbePcs, upwardTerminPointEntry=upwardTerminPointEntry, shelfChannel=shelfChannel, moduleOscUsage=moduleOscUsage, opticalMuxSwitchCommand=opticalMuxSwitchCommand, alarmSeverityOpticalMuxValue=alarmSeverityOpticalMuxValue, transientAlpSettingFinished=transientAlpSettingFinished, containerShelfExtNo=containerShelfExtNo, physicalPortTransmitWavelength=physicalPortTransmitWavelength, containerPlugAidString=containerPlugAidString, upwardExternalPortEntry=upwardExternalPortEntry, virtualPortTimeslot=virtualPortTimeslot, optIntervalPm1weekHigh=optIntervalPm1weekHigh, downwardFacilityIndex=downwardFacilityIndex, alarmOscPwrTooLow=alarmOscPwrTooLow, alarmSeverityTerminPointValue=alarmSeverityTerminPointValue, changePhysicalPortServiceTraceTransmitOpspOduTcmC=changePhysicalPortServiceTraceTransmitOpspOduTcmC, entitySysEntry=entitySysEntry, notAssignableEnvParentId=notAssignableEnvParentId, alarmAttOnReceiverFiberLowerThanMonitor=alarmAttOnReceiverFiberLowerThanMonitor, notAssignableShelfConnAidString=notAssignableShelfConnAidString, containerVschShelfNo=containerVschShelfNo, transientIntrusionTx=transientIntrusionTx, containerWchClass=containerWchClass, changePhysicalPortServiceLaserDelayTimer=changePhysicalPortServiceLaserDelayTimer, entityEnvClass=entityEnvClass, changePhysicalPortServiceSigDegThreshold=changePhysicalPortServiceSigDegThreshold, entityContainerOneIndex=entityContainerOneIndex, containerFanSlotNo=containerFanSlotNo, entityCrsOptLineParentId=entityCrsOptLineParentId, containerVch1SlotNo=containerVch1SlotNo, containerScPortNo=containerScPortNo, downwardContainerSlotNo=downwardContainerSlotNo, upwardOptLinePortNo=upwardOptLinePortNo, virtualPortTimModeOdu=virtualPortTimModeOdu, containerFanAidString=containerFanAidString, entityContainerType=entityContainerType, terminationPointOutputPower=terminationPointOutputPower, containerTerminPointEntry=containerTerminPointEntry, ocmpTimestampRequest=ocmpTimestampRequest, shelfTransmitChannel=shelfTransmitChannel, containerWchTableId=containerWchTableId, alarmLossOfCharSyncFromFarEnd=alarmLossOfCharSyncFromFarEnd, containerEnvEntry=containerEnvEntry, containerCrsOptLineAidString=containerCrsOptLineAidString, changePhysicalPortServiceSigDegThresSdhSection=changePhysicalPortServiceSigDegThresSdhSection, virtualPortFunction=virtualPortFunction, shelfConnValidSigTimer=shelfConnValidSigTimer, containerConnectNonStdFromIndexNo1=containerConnectNonStdFromIndexNo1, moduleSecondaryStates=moduleSecondaryStates, ipv6ActRoutesShelfNo=ipv6ActRoutesShelfNo, entityShelfConnSlotNo=entityShelfConnSlotNo, physicalPortFrequency=physicalPortFrequency, virtualPortTraceRcvSapiTcmb=virtualPortTraceRcvSapiTcmb, transientBootUpFailed=transientBootUpFailed, alarmEncryptionPortMaxKeyExchgFailuresReachedIs=alarmEncryptionPortMaxKeyExchgFailuresReachedIs, notAssignableOptLineIndexNo4=notAssignableOptLineIndexNo4, endOfOpticalLineTable=endOfOpticalLineTable, containerConnectNonStdToIndexNo4=containerConnectNonStdToIndexNo4, upwardContainerIndex=upwardContainerIndex, advaInventorySoftwareRev=advaInventorySoftwareRev, eccType=eccType, upwardEnvIndex=upwardEnvIndex, transientCryptoFwpUpdate=transientCryptoFwpUpdate, containerFanEntry=containerFanEntry, transientThres1DayExceededOduTcmBSES=transientThres1DayExceededOduTcmBSES, alarmTopologyDataCalculationInProgress=alarmTopologyDataCalculationInProgress, containerConnectStdFromIndexNo2=containerConnectStdFromIndexNo2, alarmAseTableGenFailPilot=alarmAseTableGenFailPilot, plugLaneGroup=plugLaneGroup, transientThres1DayExceededSonetLineSES=transientThres1DayExceededSonetLineSES, endOfAlarmSeverityEqptTable=endOfAlarmSeverityEqptTable, fspR7DeletionTrap=fspR7DeletionTrap, alarmExternalPortTimeStamp=alarmExternalPortTimeStamp, alarmSignalFailureonLinkVector=alarmSignalFailureonLinkVector, unlockTime=unlockTime, transientWorkingSwitchedBacktoWorking=transientWorkingSwitchedBacktoWorking, containerCrsOptLineFromIndexNo3=containerCrsOptLineFromIndexNo3, entityProtectionCableIndex2=entityProtectionCableIndex2, filterCableRowStatus=filterCableRowStatus, notAssignableExternalPortIndexNo3=notAssignableExternalPortIndexNo3, terminationPointPartnerAid=terminationPointPartnerAid, shelfFiberBrand=shelfFiberBrand, entityCrossDcnType=entityCrossDcnType, shelfConnOperState=shelfConnOperState, transientThres1DayExceededOtuSES=transientThres1DayExceededOtuSES, advaInventoryFirmwarePackageRev=advaInventoryFirmwarePackageRev, containerEnvSlotNo=containerEnvSlotNo, containerFanParentId=containerFanParentId, transientThres1DayExceededOtuUAS=transientThres1DayExceededOtuUAS, entityMtosiSlotsChildId=entityMtosiSlotsChildId, alarmShelfConnAffect=alarmShelfConnAffect, entityFilterCableIndex1=entityFilterCableIndex1, moduleBand=moduleBand, entityExternalPortClass=entityExternalPortClass, shelfNetworkPorts=shelfNetworkPorts, modulePsuOutputPower=modulePsuOutputPower, moduleSuppNetworkPlugTypes=moduleSuppNetworkPlugTypes, notAssignableOpticalMuxIndexNo2=notAssignableOpticalMuxIndexNo2, physicalPortCbsRcv=physicalPortCbsRcv, endOfOpticalMuxReferByTable=endOfOpticalMuxReferByTable, changePhysicalPortServiceTraceTransmitDapiOtu=changePhysicalPortServiceTraceTransmitDapiOtu, containerFfpClassName=containerFfpClassName, plugType=plugType, opticalLineLaneChannel4=opticalLineLaneChannel4, containerCrsOptLineFromPointClassName=containerCrsOptLineFromPointClassName, endOfDownwardFacilityTable=endOfDownwardFacilityTable, physicalPortSigDegThreshold=physicalPortSigDegThreshold, containerConnectStdEntry=containerConnectStdEntry, entityOpticalMuxPortNo=entityOpticalMuxPortNo, downwardExternalPortShelfNo=downwardExternalPortShelfNo, downwardFacilityClassName=downwardFacilityClassName)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", entityFfpParentId=entityFfpParentId, downwardFacilityChildId=downwardFacilityChildId, notAssignableDcnIndexNo2=notAssignableDcnIndexNo2, containerVch1ExtNo=containerVch1ExtNo, containerCrossConnFromExtNo=containerCrossConnFromExtNo, entityDcnSlotNo=entityDcnSlotNo, notAssignableEnvClassName=notAssignableEnvClassName, alarmOscPwrTooHigh=alarmOscPwrTooHigh, crossConnectionCrsContAidList=crossConnectionCrsContAidList, ntpIPv4Table=ntpIPv4Table, alarm=alarm, physicalPortLaserTemp=physicalPortLaserTemp, externalPortFecType=externalPortFecType, syslogIPv4IpAddr=syslogIPv4IpAddr, alarmMaxPowerConsProvModulesToHigh=alarmMaxPowerConsProvModulesToHigh, virtualPortTraceRcvDapiTcmc=virtualPortTraceRcvDapiTcmc, endOfPlugTable=endOfPlugTable, moduleCategory=moduleCategory, opticalMuxSumTransmited=opticalMuxSumTransmited, containerVschSlotNo=containerVschSlotNo, physicalPortVoaSetpoint=physicalPortVoaSetpoint, containerModClass=containerModClass, containerScEntry=containerScEntry, containerConnectNonStdClass=containerConnectNonStdClass, endOfAlarm=endOfAlarm, lsrtempThresholdConfigLowFixed=lsrtempThresholdConfigLowFixed, advaInventoryExtNo=advaInventoryExtNo, alarmContainerEntry=alarmContainerEntry, containerFanShelfNo=containerFanShelfNo, fspR7EquipmentRemovedTrap=fspR7EquipmentRemovedTrap, entityCrossConnToClassName=entityCrossConnToClassName, channelTracesChannelRx=channelTracesChannelRx, shelfConnConnector=shelfConnConnector, downwardOptLinePortNo=downwardOptLinePortNo, optThresholdConfigHighFixed=optThresholdConfigHighFixed, containerScAidString=containerScAidString, containerOwlgTableId=containerOwlgTableId, alarmServerSignalFailureVf=alarmServerSignalFailureVf, alarmEnvAffect=alarmEnvAffect, pmSnapshotCurrentRamanPumpPower=pmSnapshotCurrentRamanPumpPower, aidMappingTable=aidMappingTable, lanAuthType=lanAuthType, containerFanClass=containerFanClass, notAssignableFacilityAidString=notAssignableFacilityAidString, endOfRatAnalyzerTable=endOfRatAnalyzerTable, alarmAutoShutdownTxRxLasersDueToHighTemp=alarmAutoShutdownTxRxLasersDueToHighTemp, alarmPcsSignalDegrade=alarmPcsSignalDegrade, containerEthShelfNo=containerEthShelfNo, moduleScuRing=moduleScuRing, downwardDcnExtNo=downwardDcnExtNo, alarmUnequippedHigherOrderPath=alarmUnequippedHigherOrderPath, containerScTableId=containerScTableId, ipForwarding=ipForwarding, lanIPv6PrefixLen=lanIPv6PrefixLen, channelTracesTable=channelTracesTable, alarmRamanPumpPwrTooLow=alarmRamanPumpPwrTooLow, containerVchEntry=containerVchEntry, opticalMuxAlsMode=opticalMuxAlsMode, transientForcedReboot=transientForcedReboot, lanIpType=lanIpType, containerAdmin=containerAdmin, opticalMuxConnectorType=opticalMuxConnectorType, virtualPortTraceRcvOpspTcmb=virtualPortTraceRcvOpspTcmb, physicalPortXfpDecisionThres=physicalPortXfpDecisionThres, containerVchParentId=containerVchParentId, moduleAvlndpF1483Txcrs=moduleAvlndpF1483Txcrs, moduleAvlmdp=moduleAvlmdp, crossConnectionCrsMcAidList=crossConnectionCrsMcAidList, alarmThres15MinExceededPhysConvCV=alarmThres15MinExceededPhysConvCV, containerCrossConnClassName=containerCrossConnClassName, containerChPortNo=containerChPortNo, optIntervalPm1dayValidFlag=optIntervalPm1dayValidFlag, transientPmSnapshotStarted=transientPmSnapshotStarted, containerConnectNonStdToIndexNo3=containerConnectNonStdToIndexNo3, physicalPortTraceRcvSapiOdu=physicalPortTraceRcvSapiOdu, alarmEncryptionPortAuthPasswdMissing=alarmEncryptionPortAuthPasswdMissing, alarmAttOnReceiverFiberHigherThanMonitor=alarmAttOnReceiverFiberHigherThanMonitor, containerEthParentId=containerEthParentId, containerCrsOptLineClassName=containerCrsOptLineClassName, shelfStandardSlots=shelfStandardSlots, shelfSecondaryStates=shelfSecondaryStates, transientThres15DayExceededBbePcs=transientThres15DayExceededBbePcs, containerPlugSlotNo=containerPlugSlotNo, containerOwlgIndexNo3=containerOwlgIndexNo3, physicalPortChannelSpacingProvision=physicalPortChannelSpacingProvision, physicalPortRowStatus=physicalPortRowStatus, alarmFwdAseTableFailPilot=alarmFwdAseTableFailPilot, containerCrossConnFromPointClassName=containerCrossConnFromPointClassName, endOfNotAssignableOptLineTable=endOfNotAssignableOptLineTable, virtualPortTraceExpectedOduTcmC=virtualPortTraceExpectedOduTcmC, optIntervalPm15minMean=optIntervalPm15minMean, physicalPortLaserOffTimer=physicalPortLaserOffTimer, ntpIPv4Entry=ntpIPv4Entry, upwardTerminPointIndexNo1=upwardTerminPointIndexNo1, entitySysParentId=entitySysParentId, alarmEnvSeverity=alarmEnvSeverity, transientThres1DayExceededFecSES=transientThres1DayExceededFecSES, alarmChromaticDispersionTooHigh=alarmChromaticDispersionTooHigh, containerEccExtNo=containerEccExtNo, ratAnalyzerElementId=ratAnalyzerElementId, containerModShelfNo=containerModShelfNo, entityCrossConnFromSlotNo=entityCrossConnFromSlotNo, alarmLossofMultiframeHigherOrderPath=alarmLossofMultiframeHigherOrderPath, haEntry=haEntry, performance=performance, physicalPortTraceRcvSapiTcma=physicalPortTraceRcvSapiTcma, entityShelfConnClass=entityShelfConnClass, fspR7Trap=fspR7Trap, entityMtosiSlotsClass=entityMtosiSlotsClass, upwardOpticalMuxSlotNo=upwardOpticalMuxSlotNo, channelTracesIndexNo3=channelTracesIndexNo3, alarmEqptProvMismatch=alarmEqptProvMismatch, terminationPointLambda=terminationPointLambda, alarmExternalPortType=alarmExternalPortType, ntpIPv6Table=ntpIPv6Table, fspR7WriteAccessDenied=fspR7WriteAccessDenied, transientIntrusionRx=transientIntrusionRx, transientAlpSettingStarted=transientAlpSettingStarted, oprIntervalPm15minTable=oprIntervalPm15minTable, alarmThres15MinExceededOduTcmAES=alarmThres15MinExceededOduTcmAES, virtualPortTraceTransmitDapiOduTcmA=virtualPortTraceTransmitDapiOduTcmA, scAuthType=scAuthType, ipv6InActRoutesRowStatus=ipv6InActRoutesRowStatus, transientThres1DayExceededSonetSectSES=transientThres1DayExceededSonetSectSES, physicalPortTraceTransmitOpspOduTcmC=physicalPortTraceTransmitOpspOduTcmC, entityShelfConnOneIndex=entityShelfConnOneIndex, alarmSeveritySysValue=alarmSeveritySysValue, entityFilterCableIndex2=entityFilterCableIndex2, physicalPortPayload=physicalPortPayload, endOfEqptMgmt=endOfEqptMgmt, transientEqlzRamanAdjust=transientEqlzRamanAdjust, endOfAlarmDcnTable=endOfAlarmDcnTable, linkNearEndIp=linkNearEndIp, alarmTerminPointAffect=alarmTerminPointAffect, notAssignableOptLineIndexNo3=notAssignableOptLineIndexNo3, changePhysicalPortServiceTimingSource=changePhysicalPortServiceTimingSource, lanRowStatus=lanRowStatus, facilityReferByEntry=facilityReferByEntry, entityFfpShelfNo=entityFfpShelfNo, containerCrossDcnEntry=containerCrossDcnEntry, entityDcnOneIndex=entityDcnOneIndex, containerOlIndexNo4=containerOlIndexNo4, alarmAutoShutdownAmpAps=alarmAutoShutdownAmpAps, containerFanEquipmentState=containerFanEquipmentState, entityCrossDcnTableId=entityCrossDcnTableId, alarmFacilityForcedOn=alarmFacilityForcedOn, downwardTerminPointIndexNo4=downwardTerminPointIndexNo4, changePhysicalPortServiceSigDegThresOtu=changePhysicalPortServiceSigDegThresOtu, ipv6ActRoutesPrefixLen=ipv6ActRoutesPrefixLen, alarmEncryptionPortKeyExchangedForced=alarmEncryptionPortKeyExchangedForced, opticalMuxSecondaryStates=opticalMuxSecondaryStates, containerOtlgEntry=containerOtlgEntry, entityConnectionParentId=entityConnectionParentId, alarmPrbsTrmtActivated=alarmPrbsTrmtActivated, syslogIPv4DbchgReports=syslogIPv4DbchgReports, physicalPortInitiateEqualization=physicalPortInitiateEqualization, containerVch1ClassName=containerVch1ClassName, physicalPortTimModeSonetSection=physicalPortTimModeSonetSection, physicalPortTraceTransmitSapiOduTcmB=physicalPortTraceTransmitSapiOduTcmB, alarmThres15MinExceededOtuBbe=alarmThres15MinExceededOtuBbe, containerModSlotNo=containerModSlotNo, endOfAlarmSeverityContainerTable=endOfAlarmSeverityContainerTable, fspR7ObjectChangeTrap=fspR7ObjectChangeTrap, terminationPointSecondaryStates=terminationPointSecondaryStates, externalPortFarEndLocation=externalPortFarEndLocation, externalPortSourceProfile=externalPortSourceProfile, alarmAlarmIndicationSignalHigherOrderPath=alarmAlarmIndicationSignalHigherOrderPath, externalPortSecondaryStates=externalPortSecondaryStates, moduleTransmitChannel=moduleTransmitChannel, notAssignableFacilityEntry=notAssignableFacilityEntry, alarmLaserBiasCurrAbnormal=alarmLaserBiasCurrAbnormal, externalPortMaxBitErrorRate=externalPortMaxBitErrorRate, virtualPortPvid=virtualPortPvid, containerEccSlotNo=containerEccSlotNo, externalPortReferByTerminPoint=externalPortReferByTerminPoint, entityCrsOptLineFromIndexNo2=entityCrsOptLineFromIndexNo2, upwardFacilityEntry=upwardFacilityEntry, physicalPortAlias=physicalPortAlias, alarmSignalDegradeOduTcmB=alarmSignalDegradeOduTcmB, changePhysicalPortServiceType=changePhysicalPortServiceType, opticalLineChannelBandwith=opticalLineChannelBandwith, upwardEnvParentId=upwardEnvParentId, notAssignableExternalPortClass=notAssignableExternalPortClass, entityFacilityType=entityFacilityType, containerLanPortNo=containerLanPortNo, alarmSignalDegradeOdu=alarmSignalDegradeOdu, alarmPumpLaser3TempTooLow=alarmPumpLaser3TempTooLow, alarmSeverityFacilityType=alarmSeverityFacilityType, downwardExternalPortChildId=downwardExternalPortChildId, lanPriority=lanPriority, containerPlugEquipmentState=containerPlugEquipmentState, alarmDcnType=alarmDcnType, alarmPayloadMismatchGfp=alarmPayloadMismatchGfp, entityExternalPortSlotNo=entityExternalPortSlotNo, protectionCableRowStatus=protectionCableRowStatus, alarmPumpLaser4TempTooHigh=alarmPumpLaser4TempTooHigh, containerChParentId=containerChParentId, containerConnectStdToIndexNo3=containerConnectStdToIndexNo3, ratStartPointClass=ratStartPointClass, upwardOpticalMuxParentId=upwardOpticalMuxParentId, moduleAvlndpF2970Rxcrs=moduleAvlndpF2970Rxcrs, linkNendIpMonitor=linkNendIpMonitor, containerShelfConnClass=containerShelfConnClass, notAssignableDcnIndexNo4=notAssignableDcnIndexNo4, plugThirdPartyUsage=plugThirdPartyUsage, externalPortOpticalPowerTx=externalPortOpticalPowerTx, icmpRedirect=icmpRedirect, changePhysicalPortServiceTraceExpectedOdu=changePhysicalPortServiceTraceExpectedOdu, entityEqptParentId=entityEqptParentId, moduleMode=moduleMode, scDuplex=scDuplex, linkAreaAid=linkAreaAid, alarmSeverityExternalPortEntry=alarmSeverityExternalPortEntry, alarmLossOfSignalTransmitter=alarmLossOfSignalTransmitter, scOperState=scOperState, containerVomParentId=containerVomParentId, physicalPortTributaryFreeSlotNo=physicalPortTributaryFreeSlotNo, containerWchParentId=containerWchParentId, alarmThres15MinExceededPhysConvDE=alarmThres15MinExceededPhysConvDE, physicalPortTraceTransmitDapiOdu=physicalPortTraceTransmitDapiOdu, pmSnapshotHistoricalTerminPointParameter=pmSnapshotHistoricalTerminPointParameter, oprIntervalPm15minTimeStamp=oprIntervalPm15minTimeStamp, externalPortReferByTable=externalPortReferByTable, ipConf=ipConf, crossConnectionTable=crossConnectionTable, alarmThres15MinExceededOduTcmBUAS=alarmThres15MinExceededOduTcmBUAS, transientThres1DayExceededOduUAS=transientThres1DayExceededOduUAS, containerOtlgAidString=containerOtlgAidString, containerLanClass=containerLanClass, entityMtosiSlotsPortNo=entityMtosiSlotsPortNo, shelfAdmin=shelfAdmin, changePhysicalPortServiceFecType=changePhysicalPortServiceFecType, containerChEntry=containerChEntry, endOfContainerTable=endOfContainerTable, ratAnalyzerState=ratAnalyzerState, entityOpticalMuxSlotNo=entityOpticalMuxSlotNo, alarmDcnCommunicationFail=alarmDcnCommunicationFail, moduleAvlndpF1483Rxcrs=moduleAvlndpF1483Rxcrs, endOfPerformance=endOfPerformance, ipv6InActRoutesExtNo=ipv6InActRoutesExtNo, entityEnvExtNo=entityEnvExtNo, opticalMuxTable=opticalMuxTable, dependentId=dependentId, alarmEquipmentNotApproved=alarmEquipmentNotApproved, upwardDcnTable=upwardDcnTable, alarmReceiverDisabled=alarmReceiverDisabled, transientEqlzCompleted=transientEqlzCompleted, upwardShelfConnSlotNo=upwardShelfConnSlotNo, physicalPortIngressNodeIp=physicalPortIngressNodeIp, oprIntervalPm1dayHigh=oprIntervalPm1dayHigh, alarmEncryptionPortEncryptionSwitchOffEnabled=alarmEncryptionPortEncryptionSwitchOffEnabled, upwardExternalPortShelfNo=upwardExternalPortShelfNo, containerConnectNonStdAidString=containerConnectNonStdAidString, upwardEqptPortNo=upwardEqptPortNo)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", upwardShelfConnClassName=upwardShelfConnClassName, alarmSingleFanFailure=alarmSingleFanFailure, terminationPointFunction=terminationPointFunction, endOfUpwardEqptTable=endOfUpwardEqptTable, alarmOpenConnectionIndicationOduTcmC=alarmOpenConnectionIndicationOduTcmC, physicalPortTraceRcvSapiTcmc=physicalPortTraceRcvSapiTcmc, virtualPortLagPorts=virtualPortLagPorts, entityContainerTableId=entityContainerTableId, virtualPortRowStatus=virtualPortRowStatus, alarmSeverityEnvValue=alarmSeverityEnvValue, notAssignableFacilityIndexNo4=notAssignableFacilityIndexNo4, changePhysicalPortServiceChannelProv=changePhysicalPortServiceChannelProv, containerEnvClassName=containerEnvClassName, endOfSpecificMgmt=endOfSpecificMgmt, protectionCableType=protectionCableType, containerVethShelfNo=containerVethShelfNo, plugAlias=plugAlias, whitelistIpMask=whitelistIpMask, shelfConnectorType=shelfConnectorType, physicalPortTestPrbsTrmtMode=physicalPortTestPrbsTrmtMode, trap=trap, virtualPortTraceTransmitOpspOduTcmC=virtualPortTraceTransmitOpspOduTcmC, changePhysicalPortServiceTraceExpectedOduTcmA=changePhysicalPortServiceTraceExpectedOduTcmA, alarmTraceIdentifierMismatchOduTcmB=alarmTraceIdentifierMismatchOduTcmB, terminationPointInputPower=terminationPointInputPower, notAssignableFacilityIndexNo3=notAssignableFacilityIndexNo3, virtualPortTraceRcvDapiTcma=virtualPortTraceRcvDapiTcma, alarmLocalFault=alarmLocalFault, endOfNotAssignableContainerTable=endOfNotAssignableContainerTable, containerConnectNonStdToClassName=containerConnectNonStdToClassName, icmpEchoRequests=icmpEchoRequests, containerRowStatus=containerRowStatus, alarmEnvTable=alarmEnvTable, changePhysicalPortServiceVoaSetpoint=changePhysicalPortServiceVoaSetpoint, externalPortChannelBandwith=externalPortChannelBandwith, upwardExternalPortClassName=upwardExternalPortClassName, alarmThres15MinExceededOtuES=alarmThres15MinExceededOtuES, opticalLineFacilities=opticalLineFacilities, changePhysicalPortServiceTcmCLevel=changePhysicalPortServiceTcmCLevel, containerEnvPortNo=containerEnvPortNo, containerModTableId=containerModTableId, sslKeyLength=sslKeyLength, upwardContainerShelfNo=upwardContainerShelfNo, containerVethEntry=containerVethEntry, containerOwlgEntry=containerOwlgEntry, alarmThres15MinExceededSonetSectES=alarmThres15MinExceededSonetSectES, alarmBackupForcedToHalt=alarmBackupForcedToHalt, oprIntervalPm1weekTimeStamp=oprIntervalPm1weekTimeStamp, notAssignableShelfConnTable=notAssignableShelfConnTable, physicalPortSigDegThresOtu=physicalPortSigDegThresOtu, moduleStages=moduleStages, shelfSupply=shelfSupply, entityCrossDcnAidString=entityCrossDcnAidString, whitelistIpAddr=whitelistIpAddr, channelTracesElementId=channelTracesElementId, virtualPortChannelId=virtualPortChannelId, entityShelfConnParentId=entityShelfConnParentId, lanSecondaryStates=lanSecondaryStates, transientThres1DayExceededOduTcmCES=transientThres1DayExceededOduTcmCES, changePhysicalPortServiceTerminationLevel=changePhysicalPortServiceTerminationLevel, containerVchTableId=containerVchTableId, entityEqptShelfNo=entityEqptShelfNo, pmSnapshotHistoricalValidFlag=pmSnapshotHistoricalValidFlag, alarmMeaSwRevision=alarmMeaSwRevision, entityOptLineTable=entityOptLineTable, virtualPortTcmALevel=virtualPortTcmALevel, containerModEquipmentState=containerModEquipmentState, containerVschExtNo=containerVschExtNo, moduleInternalPorts=moduleInternalPorts, alarmSeverityContainerTable=alarmSeverityContainerTable, virtualPortOffsetHigh=virtualPortOffsetHigh, virtualSessionEntry=virtualSessionEntry, entityConnectionClassName=entityConnectionClassName, alarmFiberAttenuationHighTx=alarmFiberAttenuationHighTx, alarmAmplifierAbnormal=alarmAmplifierAbnormal, upwardContainerPortNo=upwardContainerPortNo, shelfRowStatus=shelfRowStatus, containerOtlgExtNo=containerOtlgExtNo, channelTracesChannelTx=channelTracesChannelTx, externalPortMaxChromDisperRcv=externalPortMaxChromDisperRcv)
