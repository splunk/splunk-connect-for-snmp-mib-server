#
# PySNMP MIB module CISCO-LWAPP-CLIENT-ROAMING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-CLIENT-ROAMING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cLApDot11IfSlotId, cLApSysMacAddress = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId", "cLApSysMacAddress")
CLDot11Channel, CLDot11RfParamMode = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLDot11Channel", "CLDot11RfParamMode")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Counter64, Unsigned32, IpAddress, Gauge32, Integer32, ObjectIdentity, Bits, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Unsigned32", "IpAddress", "Gauge32", "Integer32", "ObjectIdentity", "Bits", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "TimeTicks")
DisplayString, TextualConvention, MacAddress, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TimeInterval")
ciscoLwappClRoamMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 523))
ciscoLwappClRoamMIB.setRevisions(('2010-01-29 00:00', '2006-04-11 00:00',))
if mibBuilder.loadTexts: ciscoLwappClRoamMIB.setLastUpdated('201001290000Z')
if mibBuilder.loadTexts: ciscoLwappClRoamMIB.setOrganization('Cisco Systems, Inc.')
ciscoLwappClRoamMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 0))
ciscoLwappClRoamMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 1))
ciscoLwappClRoamMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 2))
clcrRoamDot11aRfParamConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1))
clcrRoamDot11bRfParamConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2))
clcrRoamReasonReport = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3))
clcrRoamDot11Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 4))
clcrDot11aMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 1), CLDot11RfParamMode().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aMode.setStatus('current')
clcrDot11aMinRssi = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -80)).clone(-85)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aMinRssi.setStatus('deprecated')
clcrDot11aHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4)).clone(2)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aHysteresis.setStatus('deprecated')
clcrDot11aAdaptiveScanThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-77, -70)).clone(-72)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aAdaptiveScanThreshold.setStatus('deprecated')
clcrDot11aTransitionTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 5), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aTransitionTime.setStatus('deprecated')
clcrDot11aMinRssiV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aMinRssiV2.setStatus('current')
clcrDot11aHysteresisV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aHysteresisV2.setStatus('current')
clcrDot11aAdaptiveScanThresholdV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aAdaptiveScanThresholdV2.setStatus('current')
clcrDot11aTransitionTimeV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 1, 9), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11aTransitionTimeV2.setStatus('current')
clcrDot11bMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 1), CLDot11RfParamMode().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bMode.setStatus('current')
clcrDot11bMinRssi = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -80)).clone(-85)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bMinRssi.setStatus('deprecated')
clcrDot11bHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4)).clone(2)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bHysteresis.setStatus('deprecated')
clcrDot11bAdaptiveScanThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-77, -70)).clone(-72)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bAdaptiveScanThreshold.setStatus('deprecated')
clcrDot11bTransitionTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 5), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bTransitionTime.setStatus('deprecated')
clcrDot11bMinRssiV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bMinRssiV2.setStatus('current')
clcrDot11bHysteresisV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bHysteresisV2.setStatus('current')
clcrDot11bAdaptiveScanThresholdV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bAdaptiveScanThresholdV2.setStatus('current')
clcrDot11bTransitionTimeV2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 2, 9), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcrDot11bTransitionTimeV2.setStatus('current')
clcrRoamReasonReportTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1), )
if mibBuilder.loadTexts: clcrRoamReasonReportTable.setStatus('current')
clcrRoamReasonReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamClientMacAddress"), (0, "CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamClientTimeStamp"))
if mibBuilder.loadTexts: clcrRoamReasonReportEntry.setStatus('current')
clcrRoamClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: clcrRoamClientMacAddress.setStatus('current')
clcrRoamClientTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 2), TimeTicks())
if mibBuilder.loadTexts: clcrRoamClientTimeStamp.setStatus('current')
clcrRoamNewApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrRoamNewApMacAddress.setStatus('current')
clcrRoamPrevApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrRoamPrevApMacAddress.setStatus('current')
clcrRoamPrevApChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 5), CLDot11Channel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrRoamPrevApChannel.setStatus('current')
clcrRoamPrevApSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrRoamPrevApSsid.setStatus('current')
clcrRoamDisassocTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrRoamDisassocTimeInterval.setStatus('current')
clcrRoamReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("clcrUnspecified", 0), ("clcrPoorLink", 1), ("clcrLoadBalancing", 2), ("clcrInsufficientCapacity", 3), ("clcrDirectedRoam", 4), ("clcrFirstAssociation", 5), ("clcrRoamingIn", 6), ("clcrRoamingOut", 7), ("clcrBetterAp", 8), ("clcrDisassociated", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrRoamReason.setStatus('current')
clcrDot11StatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 4, 1), )
if mibBuilder.loadTexts: clcrDot11StatsTable.setStatus('current')
clcrDot11StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: clcrDot11StatsEntry.setStatus('current')
clcrDot11NeighborRequestRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrDot11NeighborRequestRx.setStatus('current')
clcrDot11NeighborReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrDot11NeighborReplySent.setStatus('current')
clcrDot11RoamReasonReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrDot11RoamReasonReportRx.setStatus('current')
clcrDot11BcastUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 523, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcrDot11BcastUpdatesSent.setStatus('current')
ciscoLwappClRoamMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 1))
ciscoLwappClRoamMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 2))
clcrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 1, 1)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamDot11aRfParamsGroup"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamDot11bRfParamsGroup"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamroamReasonGroup"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamroamingStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcrMIBCompliance = clcrMIBCompliance.setStatus('deprecated')
clcrMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 1, 2)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamDot11aRfParamsGroupSup1"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamDot11bRfParamsGroupSup1"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamroamReasonGroup"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "ciscoLwappClRoamroamingStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcrMIBComplianceRev1 = clcrMIBComplianceRev1.setStatus('current')
ciscoLwappClRoamDot11aRfParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 2, 1)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aMode"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aMinRssi"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aHysteresis"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aAdaptiveScanThreshold"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aTransitionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappClRoamDot11aRfParamsGroup = ciscoLwappClRoamDot11aRfParamsGroup.setStatus('deprecated')
ciscoLwappClRoamDot11bRfParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 2, 2)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bMode"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bMinRssi"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bHysteresis"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bAdaptiveScanThreshold"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bTransitionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappClRoamDot11bRfParamsGroup = ciscoLwappClRoamDot11bRfParamsGroup.setStatus('deprecated')
ciscoLwappClRoamroamReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 2, 3)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamNewApMacAddress"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamPrevApMacAddress"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamPrevApChannel"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamPrevApSsid"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamDisassocTimeInterval"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrRoamReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappClRoamroamReasonGroup = ciscoLwappClRoamroamReasonGroup.setStatus('current')
ciscoLwappClRoamroamingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 2, 4)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11NeighborRequestRx"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11NeighborReplySent"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11RoamReasonReportRx"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11BcastUpdatesSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappClRoamroamingStatsGroup = ciscoLwappClRoamroamingStatsGroup.setStatus('current')
ciscoLwappClRoamDot11aRfParamsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 2, 5)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aMode"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aMinRssiV2"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aHysteresisV2"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aAdaptiveScanThresholdV2"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11aTransitionTimeV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappClRoamDot11aRfParamsGroupSup1 = ciscoLwappClRoamDot11aRfParamsGroupSup1.setStatus('current')
ciscoLwappClRoamDot11bRfParamsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 523, 2, 2, 6)).setObjects(("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bMode"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bMinRssiV2"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bHysteresisV2"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bAdaptiveScanThresholdV2"), ("CISCO-LWAPP-CLIENT-ROAMING-MIB", "clcrDot11bTransitionTimeV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappClRoamDot11bRfParamsGroupSup1 = ciscoLwappClRoamDot11bRfParamsGroupSup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-CLIENT-ROAMING-MIB", clcrDot11StatsEntry=clcrDot11StatsEntry, clcrRoamClientMacAddress=clcrRoamClientMacAddress, ciscoLwappClRoamDot11bRfParamsGroup=ciscoLwappClRoamDot11bRfParamsGroup, PYSNMP_MODULE_ID=ciscoLwappClRoamMIB, clcrDot11aTransitionTimeV2=clcrDot11aTransitionTimeV2, clcrDot11NeighborReplySent=clcrDot11NeighborReplySent, clcrRoamPrevApSsid=clcrRoamPrevApSsid, clcrMIBComplianceRev1=clcrMIBComplianceRev1, ciscoLwappClRoamDot11bRfParamsGroupSup1=ciscoLwappClRoamDot11bRfParamsGroupSup1, clcrDot11bAdaptiveScanThreshold=clcrDot11bAdaptiveScanThreshold, ciscoLwappClRoamMIBGroups=ciscoLwappClRoamMIBGroups, clcrDot11bHysteresisV2=clcrDot11bHysteresisV2, clcrRoamPrevApChannel=clcrRoamPrevApChannel, clcrDot11bHysteresis=clcrDot11bHysteresis, ciscoLwappClRoamMIB=ciscoLwappClRoamMIB, clcrDot11StatsTable=clcrDot11StatsTable, clcrRoamPrevApMacAddress=clcrRoamPrevApMacAddress, ciscoLwappClRoamMIBNotifs=ciscoLwappClRoamMIBNotifs, clcrRoamReasonReport=clcrRoamReasonReport, ciscoLwappClRoamMIBConform=ciscoLwappClRoamMIBConform, ciscoLwappClRoamroamReasonGroup=ciscoLwappClRoamroamReasonGroup, clcrDot11bTransitionTimeV2=clcrDot11bTransitionTimeV2, clcrDot11bMode=clcrDot11bMode, clcrDot11aHysteresis=clcrDot11aHysteresis, clcrDot11bMinRssi=clcrDot11bMinRssi, clcrMIBCompliance=clcrMIBCompliance, clcrDot11bTransitionTime=clcrDot11bTransitionTime, clcrDot11bAdaptiveScanThresholdV2=clcrDot11bAdaptiveScanThresholdV2, clcrRoamNewApMacAddress=clcrRoamNewApMacAddress, clcrDot11aHysteresisV2=clcrDot11aHysteresisV2, clcrDot11bMinRssiV2=clcrDot11bMinRssiV2, clcrRoamReason=clcrRoamReason, clcrDot11NeighborRequestRx=clcrDot11NeighborRequestRx, ciscoLwappClRoamDot11aRfParamsGroup=ciscoLwappClRoamDot11aRfParamsGroup, clcrDot11aMinRssiV2=clcrDot11aMinRssiV2, clcrDot11RoamReasonReportRx=clcrDot11RoamReasonReportRx, ciscoLwappClRoamroamingStatsGroup=ciscoLwappClRoamroamingStatsGroup, clcrRoamDot11bRfParamConfig=clcrRoamDot11bRfParamConfig, clcrDot11aMode=clcrDot11aMode, clcrDot11BcastUpdatesSent=clcrDot11BcastUpdatesSent, clcrRoamDot11aRfParamConfig=clcrRoamDot11aRfParamConfig, clcrDot11aMinRssi=clcrDot11aMinRssi, ciscoLwappClRoamMIBObjects=ciscoLwappClRoamMIBObjects, ciscoLwappClRoamMIBCompliances=ciscoLwappClRoamMIBCompliances, ciscoLwappClRoamDot11aRfParamsGroupSup1=ciscoLwappClRoamDot11aRfParamsGroupSup1, clcrDot11aAdaptiveScanThresholdV2=clcrDot11aAdaptiveScanThresholdV2, clcrRoamClientTimeStamp=clcrRoamClientTimeStamp, clcrDot11aTransitionTime=clcrDot11aTransitionTime, clcrRoamDisassocTimeInterval=clcrRoamDisassocTimeInterval, clcrRoamDot11Stats=clcrRoamDot11Stats, clcrDot11aAdaptiveScanThreshold=clcrDot11aAdaptiveScanThreshold, clcrRoamReasonReportEntry=clcrRoamReasonReportEntry, clcrRoamReasonReportTable=clcrRoamReasonReportTable)
