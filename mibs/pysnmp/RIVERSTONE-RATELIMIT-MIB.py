#
# PySNMP MIB module RIVERSTONE-RATELIMIT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-RATELIMIT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:49:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
riverstoneMibs, = mibBuilder.importSymbols("RIVERSTONE-SMI-MIB", "riverstoneMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, TimeTicks, NotificationType, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, iso, Counter64, Integer32, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "TimeTicks", "NotificationType", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "iso", "Counter64", "Integer32", "ModuleIdentity", "Gauge32")
RowStatus, DisplayString, TruthValue, StorageType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "StorageType", "TextualConvention")
rsRateLimitMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25))
rsRateLimitMIB.setRevisions(('2002-10-10 00:00', '2001-07-06 00:00',))
if mibBuilder.loadTexts: rsRateLimitMIB.setLastUpdated('200210100000Z')
if mibBuilder.loadTexts: rsRateLimitMIB.setOrganization('Riverstone Networks, Inc')
class RsRateLimit(TextualConvention, Unsigned32):
    status = 'current'

class RsBurst(TextualConvention, Unsigned32):
    status = 'current'

class RsAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class RsDistAmong(TextualConvention, Integer32):
    reference = "Refer Riverstone Networks white paper entitled 'An Overview on Rate Limiting' http://www.riverstonenet.com/technology/rate.shtml"
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10)

class RsMeterType(TextualConvention, Integer32):
    reference = "Refer Riverstone Networks white paper entitled 'An Overview on Rate Limiting' http://www.riverstonenet.com/technology/rate.shtml"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("perFlow", 1), ("softwareFlowAggregate", 2), ("hardwareFlowAggregate", 3), ("perPort", 4), ("burstsafe", 5), ("l2", 6))

class RsMeterInterval(TextualConvention, Integer32):
    reference = "Refer Riverstone Networks white paper entitled 'An Overview on Rate Limiting' http://www.riverstonenet.com/technology/rate.shtml"
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 10)

class RsLabel(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 30)

class RsTOS(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class RsIfDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2), ("both", 3), ("unknown", 4))

class RsAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("noAction", 1), ("dropPackets", 2), ("setPriorityLow", 3), ("setPriorityMedium", 4), ("setPriorityHigh", 5), ("lowerPriority", 6), ("lowerPriorityExceptControl", 7), ("tosRewrite", 8), ("tosRewriteAndLowerPriority", 9), ("tosPrecedenceRewrite", 10), ("tosPrecedenceRewriteAndLowerPriority", 11), ("markPackets", 12))

rsRateLimitNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 0))
if mibBuilder.loadTexts: rsRateLimitNotifications.setStatus('current')
rsTBMeter = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5))
if mibBuilder.loadTexts: rsTBMeter.setStatus('current')
rsTBMeterApply = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10))
if mibBuilder.loadTexts: rsTBMeterApply.setStatus('current')
rsTBMeterApplyMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 15))
if mibBuilder.loadTexts: rsTBMeterApplyMonitor.setStatus('current')
rsPortRateLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20))
if mibBuilder.loadTexts: rsPortRateLimit.setStatus('current')
rsPortRLMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 25))
if mibBuilder.loadTexts: rsPortRLMonitor.setStatus('current')
rsL2RateLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26))
if mibBuilder.loadTexts: rsL2RateLimit.setStatus('current')
rsL2RLMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 29))
if mibBuilder.loadTexts: rsL2RLMonitor.setStatus('current')
rsRateLimitModes = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30))
if mibBuilder.loadTexts: rsRateLimitModes.setStatus('current')
rsRateLimitGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33))
if mibBuilder.loadTexts: rsRateLimitGroups.setStatus('current')
rsRateLimitConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35))
if mibBuilder.loadTexts: rsRateLimitConformance.setStatus('current')
rsTBMeterLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterLastChanged.setStatus('current')
rsTBMeterCount = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterCount.setStatus('current')
rsTBMeterErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterErrorMessage.setStatus('current')
rsTBMeterTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4), )
if mibBuilder.loadTexts: rsTBMeterTable.setStatus('current')
rsTBMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1), ).setIndexNames((0, "RIVERSTONE-RATELIMIT-MIB", "rsTBMeterId"))
if mibBuilder.loadTexts: rsTBMeterEntry.setStatus('current')
rsTBMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 1), RsLabel())
if mibBuilder.loadTexts: rsTBMeterId.setStatus('current')
rsTBMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 2), RsMeterType().clone('perFlow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterType.setStatus('current')
rsTBMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 3), RsRateLimit().clone(3000)).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterRate.setStatus('current')
rsTBMeterBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 4), RsBurst().clone(10000)).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterBurst.setStatus('current')
rsTBMeterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 5), RsMeterInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterInterval.setStatus('deprecated')
rsTBMeterFailAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 6), RsAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterFailAction.setStatus('current')
rsTBMeterFailActionRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 7), RsTOS()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterFailActionRewrite.setStatus('current')
rsTBMeterBurstFailAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 8), RsAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterBurstFailAction.setStatus('current')
rsTBMeterBurstFailActionRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 9), RsTOS()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterBurstFailActionRewrite.setStatus('current')
rsTBMeterMinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 10), RsRateLimit().clone(3000)).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterMinimumBandwidth.setStatus('deprecated')
rsTBMeterDistributeAmong = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 11), RsDistAmong().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterDistributeAmong.setStatus('deprecated')
rsTBMeterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 12), StorageType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("volatile", 2), ("nonVolatile", 3))).clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterStorageType.setStatus('current')
rsTBMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 5, 4, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterStatus.setStatus('current')
rsTBMeterApplyLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterApplyLastChanged.setStatus('current')
rsTBMeterApplyCount = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterApplyCount.setStatus('current')
rsTBMeterApplyErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterApplyErrorMessage.setStatus('current')
rsTBMeterApplyMasterAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 4), RsAdminStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTBMeterApplyMasterAdminStatus.setStatus('current')
rsTBMeterApplyTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5), )
if mibBuilder.loadTexts: rsTBMeterApplyTable.setStatus('current')
rsTBMeterApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyDirection"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyAclName"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsTBMeterId2"))
if mibBuilder.loadTexts: rsTBMeterApplyEntry.setStatus('current')
rsTBMeterApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1, 1), RsIfDirection().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: rsTBMeterApplyDirection.setStatus('current')
rsTBMeterApplyAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1, 2), RsLabel())
if mibBuilder.loadTexts: rsTBMeterApplyAclName.setStatus('current')
rsTBMeterId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1, 3), RsLabel())
if mibBuilder.loadTexts: rsTBMeterId2.setStatus('current')
rsTBMeterApplyOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterApplyOwner.setStatus('current')
rsTBMeterApplyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1, 5), RsAdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterApplyAdminStatus.setStatus('current')
rsTBMeterApplyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1, 6), StorageType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("volatile", 2), ("nonVolatile", 3))).clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterApplyStorageType.setStatus('current')
rsTBMeterApplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 10, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsTBMeterApplyStatus.setStatus('current')
rsPortRLLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPortRLLastChanged.setStatus('current')
rsPortRLCount = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPortRLCount.setStatus('current')
rsPortRLErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPortRLErrorMessage.setStatus('current')
rsPortRLMasterAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 4), RsAdminStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPortRLMasterAdminStatus.setStatus('current')
rsPortRLTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5), )
if mibBuilder.loadTexts: rsPortRLTable.setStatus('current')
rsPortRLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsPortRLDirection"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsPortRLMeterId"))
if mibBuilder.loadTexts: rsPortRLEntry.setStatus('current')
rsPortRLDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 1), RsIfDirection().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: rsPortRLDirection.setStatus('current')
rsPortRLMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 2), RsLabel())
if mibBuilder.loadTexts: rsPortRLMeterId.setStatus('current')
rsPortRLOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLOwner.setStatus('current')
rsPortRLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 4), RsRateLimit().clone(3000)).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLRate.setStatus('current')
rsPortRLFailAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 5), RsAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLFailAction.setStatus('current')
rsPortRLFailActionRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 6), RsTOS()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLFailActionRewrite.setStatus('current')
rsPortRLInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 7), RsMeterInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLInterval.setStatus('deprecated')
rsPortRLAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 8), RsAdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLAdminStatus.setStatus('current')
rsPortRLStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 9), StorageType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("volatile", 2), ("nonVolatile", 3))).clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLStorageType.setStatus('current')
rsPortRLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 20, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPortRLStatus.setStatus('current')
rsL2RLApplyLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsL2RLApplyLastChanged.setStatus('current')
rsL2RLApplyCount = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsL2RLApplyCount.setStatus('current')
rsL2RLApplyErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsL2RLApplyErrorMessage.setStatus('current')
rsL2RLApplyMasterAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 4), RsAdminStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsL2RLApplyMasterAdminStatus.setStatus('current')
rsL2RLApplyTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5), )
if mibBuilder.loadTexts: rsL2RLApplyTable.setStatus('current')
rsL2RLApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1), ).setIndexNames((0, "RIVERSTONE-RATELIMIT-MIB", "rsTBMeterId"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyDirection"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyIfIndex"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyPortGroupName"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyFilterName"))
if mibBuilder.loadTexts: rsL2RLApplyEntry.setStatus('current')
rsL2RLApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 1), RsIfDirection().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: rsL2RLApplyDirection.setStatus('current')
rsL2RLApplyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rsL2RLApplyIfIndex.setStatus('current')
rsL2RLApplyPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 3), RsLabel())
if mibBuilder.loadTexts: rsL2RLApplyPortGroupName.setStatus('current')
rsL2RLApplyFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 4), RsLabel())
if mibBuilder.loadTexts: rsL2RLApplyFilterName.setStatus('current')
rsL2RLIsFilterGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsL2RLIsFilterGroup.setStatus('current')
rsL2RLApplyOnePGrouping = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("group1", 2), ("group2", 3), ("group3", 4), ("group4", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsL2RLApplyOnePGrouping.setStatus('current')
rsL2RLApplyOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsL2RLApplyOwner.setStatus('current')
rsL2RLApplyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 8), RsAdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsL2RLApplyAdminStatus.setStatus('current')
rsL2RLApplyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 9), StorageType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("volatile", 2), ("nonVolatile", 3))).clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsL2RLApplyStorageType.setStatus('current')
rsL2RLApplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 26, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsL2RLApplyStatus.setStatus('current')
rsRLModeLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRLModeLastChanged.setStatus('current')
rsRLModeTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 2), )
if mibBuilder.loadTexts: rsRLModeTable.setStatus('current')
rsRLModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: rsRLModeEntry.setStatus('current')
rsRLModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flowMode", 1), ("aggregateMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRLModeType.setStatus('current')
rsRLModeInputPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 2, 1, 2), RsAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRLModeInputPortStatus.setStatus('current')
rsRLModeCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 2, 1, 3), Bits().clone(namedValues=NamedValues(("rlMode", 0), ("rlInputPortRateLimit", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRLModeCapabilityBits.setStatus('current')
rsRLModeEntryLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRLModeEntryLastChanged.setStatus('current')
rsRLModeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 30, 2, 1, 5), StorageType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("volatile", 2), ("nonVolatile", 3))).clone('volatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRLModeStorageType.setStatus('current')
rsRLPortGroupLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRLPortGroupLastChanged.setStatus('current')
rsRLPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 2), )
if mibBuilder.loadTexts: rsRLPortGroupTable.setStatus('current')
rsRLPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 2, 1), ).setIndexNames((0, "RIVERSTONE-RATELIMIT-MIB", "rsRLPortGroupName"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsRLPortGroupEntry.setStatus('current')
rsRLPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 2, 1, 1), RsLabel())
if mibBuilder.loadTexts: rsRLPortGroupName.setStatus('current')
rsRLPortGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 2, 1, 2), StorageType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("volatile", 2), ("nonVolatile", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRLPortGroupStorageType.setStatus('current')
rsRLPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsRLPortGroupStatus.setStatus('current')
rsRLFilterGroupLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRLFilterGroupLastChanged.setStatus('current')
rsRLFilterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 4), )
if mibBuilder.loadTexts: rsRLFilterGroupTable.setStatus('current')
rsRLFilterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 4, 1), ).setIndexNames((0, "RIVERSTONE-RATELIMIT-MIB", "rsRLFilterGroupName"), (0, "RIVERSTONE-RATELIMIT-MIB", "rsRLFilterName"))
if mibBuilder.loadTexts: rsRLFilterGroupEntry.setStatus('current')
rsRLFilterGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 4, 1, 1), RsLabel())
if mibBuilder.loadTexts: rsRLFilterGroupName.setStatus('current')
rsRLFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 4, 1, 2), RsLabel())
if mibBuilder.loadTexts: rsRLFilterName.setStatus('current')
rsRLFilterGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 4, 1, 3), StorageType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("volatile", 2), ("nonVolatile", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRLFilterGroupStorageType.setStatus('current')
rsRLFilterGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 33, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsRLFilterGroupStatus.setStatus('current')
rsTBMeterMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 15, 1), )
if mibBuilder.loadTexts: rsTBMeterMonitorTable.setStatus('current')
rsTBMeterMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 15, 1, 1), )
rsTBMeterApplyEntry.registerAugmentions(("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterMonitorEntry"))
rsTBMeterMonitorEntry.setIndexNames(*rsTBMeterApplyEntry.getIndexNames())
if mibBuilder.loadTexts: rsTBMeterMonitorEntry.setStatus('current')
rsTBMeterExceedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 15, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterExceedByteCount.setStatus('current')
rsTBMeterCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 15, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterCounterDiscontinuityTime.setStatus('current')
rsTBMeterExceedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 15, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterExceedPacketCount.setStatus('current')
rsTBMeterExceedBurstPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTBMeterExceedBurstPacketCount.setStatus('current')
rsPortRLMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 25, 1), )
if mibBuilder.loadTexts: rsPortRLMonitorTable.setStatus('current')
rsPortRLMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 25, 1, 1), )
rsPortRLEntry.registerAugmentions(("RIVERSTONE-RATELIMIT-MIB", "rsPortRLMonitorEntry"))
rsPortRLMonitorEntry.setIndexNames(*rsPortRLEntry.getIndexNames())
if mibBuilder.loadTexts: rsPortRLMonitorEntry.setStatus('current')
rsPortRLExceedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 25, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPortRLExceedByteCount.setStatus('current')
rsPortRLCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 25, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPortRLCounterDiscontinuityTime.setStatus('current')
rsPortRLExceedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 25, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPortRLExceedPacketCount.setStatus('current')
rsL2RLMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 25, 29, 1), )
if mibBuilder.loadTexts: rsL2RLMonitorTable.setStatus('current')
rsL2RLMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 25, 29, 1, 1), )
rsL2RLApplyEntry.registerAugmentions(("RIVERSTONE-RATELIMIT-MIB", "rsL2RLMonitorEntry"))
rsL2RLMonitorEntry.setIndexNames(*rsL2RLApplyEntry.getIndexNames())
if mibBuilder.loadTexts: rsL2RLMonitorEntry.setStatus('current')
rsL2RLExceedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 29, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsL2RLExceedByteCount.setStatus('current')
rsL2RLExceedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 29, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsL2RLExceedPacketCount.setStatus('current')
rsL2RLCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 25, 29, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsL2RLCounterDiscontinuityTime.setStatus('current')
rsRateLimitCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 1))
rsRateLimitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2))
rsRateLimitComplianceV2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 1, 2)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsRateLimitGroup1"), ("RIVERSTONE-RATELIMIT-MIB", "rsRateLimitGroup2"), ("RIVERSTONE-RATELIMIT-MIB", "rsRateLimitGroup6"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitComplianceV2 = rsRateLimitComplianceV2.setStatus('current')
rsRateLimitCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 1, 1)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsRateLimitGroup1"), ("RIVERSTONE-RATELIMIT-MIB", "rsRateLimitGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitCompliance = rsRateLimitCompliance.setStatus('deprecated')
rsRateLimitGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 1)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterErrorMessage"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterType"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterRate"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterBurst"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterFailAction"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterFailActionRewrite"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterBurstFailActionRewrite"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterStorageType"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyErrorMessage"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyMasterAdminStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyOwner"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyAdminStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyStorageType"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterApplyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup1 = rsRateLimitGroup1.setStatus('current')
rsRateLimitGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 2)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsPortRLLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLErrorMessage"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLMasterAdminStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLOwner"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLRate"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLFailAction"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLFailActionRewrite"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLAdminStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLStorageType"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup2 = rsRateLimitGroup2.setStatus('current')
rsRateLimitGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 3)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsRLModeLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLModeType"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLModeCapabilityBits"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLModeInputPortStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLModeEntryLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLModeStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup3 = rsRateLimitGroup3.setStatus('current')
rsRateLimitGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 4)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterBurstFailAction"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterMinimumBandwidth"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterDistributeAmong"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterInterval"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup4 = rsRateLimitGroup4.setStatus('deprecated')
rsRateLimitGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 5)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterExceedByteCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterCounterDiscontinuityTime"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLExceedByteCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLCounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup5 = rsRateLimitGroup5.setStatus('deprecated')
rsRateLimitGroup4V2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 6)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterBurstFailAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup4V2 = rsRateLimitGroup4V2.setStatus('current')
rsRateLimitGroup5V2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 7)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterExceedByteCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterExceedPacketCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterCounterDiscontinuityTime"), ("RIVERSTONE-RATELIMIT-MIB", "rsTBMeterExceedBurstPacketCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLExceedByteCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLExceedPacketCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsPortRLCounterDiscontinuityTime"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLExceedByteCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLExceedPacketCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLCounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup5V2 = rsRateLimitGroup5V2.setStatus('current')
rsRateLimitGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 25, 35, 2, 8)).setObjects(("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyCount"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyErrorMessage"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyMasterAdminStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLIsFilterGroup"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyOnePGrouping"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyOwner"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyAdminStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyStorageType"), ("RIVERSTONE-RATELIMIT-MIB", "rsL2RLApplyStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLFilterGroupLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLPortGroupStorageType"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLPortGroupStatus"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLPortGroupLastChanged"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLFilterGroupStorageType"), ("RIVERSTONE-RATELIMIT-MIB", "rsRLFilterGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsRateLimitGroup6 = rsRateLimitGroup6.setStatus('current')
mibBuilder.exportSymbols("RIVERSTONE-RATELIMIT-MIB", rsRLPortGroupStatus=rsRLPortGroupStatus, rsRateLimitConformance=rsRateLimitConformance, rsTBMeterStatus=rsTBMeterStatus, rsTBMeterApplyMasterAdminStatus=rsTBMeterApplyMasterAdminStatus, rsRLFilterGroupName=rsRLFilterGroupName, rsRLPortGroupStorageType=rsRLPortGroupStorageType, rsRLFilterGroupLastChanged=rsRLFilterGroupLastChanged, rsPortRLDirection=rsPortRLDirection, rsL2RLApplyEntry=rsL2RLApplyEntry, PYSNMP_MODULE_ID=rsRateLimitMIB, rsPortRLMonitorEntry=rsPortRLMonitorEntry, RsRateLimit=RsRateLimit, rsTBMeterApplyErrorMessage=rsTBMeterApplyErrorMessage, rsRateLimitComplianceV2=rsRateLimitComplianceV2, rsRateLimitModes=rsRateLimitModes, rsRateLimitGroups=rsRateLimitGroups, rsRateLimitGroup4V2=rsRateLimitGroup4V2, rsTBMeterMonitorTable=rsTBMeterMonitorTable, RsMeterType=RsMeterType, rsL2RLCounterDiscontinuityTime=rsL2RLCounterDiscontinuityTime, rsL2RLApplyStatus=rsL2RLApplyStatus, rsL2RLMonitorEntry=rsL2RLMonitorEntry, rsL2RLApplyMasterAdminStatus=rsL2RLApplyMasterAdminStatus, RsLabel=RsLabel, rsL2RLApplyIfIndex=rsL2RLApplyIfIndex, RsDistAmong=RsDistAmong, rsL2RLIsFilterGroup=rsL2RLIsFilterGroup, rsPortRLAdminStatus=rsPortRLAdminStatus, rsPortRLCounterDiscontinuityTime=rsPortRLCounterDiscontinuityTime, rsTBMeterApplyAclName=rsTBMeterApplyAclName, rsPortRLErrorMessage=rsPortRLErrorMessage, rsRLModeEntry=rsRLModeEntry, rsTBMeterBurst=rsTBMeterBurst, rsRateLimitGroup2=rsRateLimitGroup2, rsTBMeterType=rsTBMeterType, rsRLFilterGroupEntry=rsRLFilterGroupEntry, rsTBMeterApplyMonitor=rsTBMeterApplyMonitor, RsTOS=RsTOS, rsRateLimitCompliance=rsRateLimitCompliance, RsAction=RsAction, rsTBMeterApplyLastChanged=rsTBMeterApplyLastChanged, rsPortRLMasterAdminStatus=rsPortRLMasterAdminStatus, rsPortRLMonitor=rsPortRLMonitor, rsTBMeterExceedBurstPacketCount=rsTBMeterExceedBurstPacketCount, rsRLModeTable=rsRLModeTable, rsPortRLCount=rsPortRLCount, rsPortRLRate=rsPortRLRate, rsRLModeStorageType=rsRLModeStorageType, rsTBMeterCounterDiscontinuityTime=rsTBMeterCounterDiscontinuityTime, rsL2RLApplyPortGroupName=rsL2RLApplyPortGroupName, rsTBMeterId2=rsTBMeterId2, rsPortRLExceedPacketCount=rsPortRLExceedPacketCount, rsTBMeterInterval=rsTBMeterInterval, rsL2RLApplyErrorMessage=rsL2RLApplyErrorMessage, rsPortRateLimit=rsPortRateLimit, rsRLModeLastChanged=rsRLModeLastChanged, rsTBMeterApply=rsTBMeterApply, rsTBMeterCount=rsTBMeterCount, RsMeterInterval=RsMeterInterval, rsL2RLExceedPacketCount=rsL2RLExceedPacketCount, rsRLModeType=rsRLModeType, rsPortRLLastChanged=rsPortRLLastChanged, rsPortRLOwner=rsPortRLOwner, rsPortRLTable=rsPortRLTable, rsL2RLApplyAdminStatus=rsL2RLApplyAdminStatus, rsRateLimitGroup=rsRateLimitGroup, rsRateLimitGroup4=rsRateLimitGroup4, rsTBMeterEntry=rsTBMeterEntry, rsRLFilterGroupStatus=rsRLFilterGroupStatus, rsL2RLApplyTable=rsL2RLApplyTable, rsPortRLFailActionRewrite=rsPortRLFailActionRewrite, rsTBMeterExceedPacketCount=rsTBMeterExceedPacketCount, RsBurst=RsBurst, rsRateLimitGroup5=rsRateLimitGroup5, rsPortRLEntry=rsPortRLEntry, rsTBMeterApplyStatus=rsTBMeterApplyStatus, rsTBMeterApplyEntry=rsTBMeterApplyEntry, rsTBMeterApplyTable=rsTBMeterApplyTable, rsPortRLStorageType=rsPortRLStorageType, rsPortRLStatus=rsPortRLStatus, rsTBMeterApplyDirection=rsTBMeterApplyDirection, rsPortRLFailAction=rsPortRLFailAction, rsRLPortGroupEntry=rsRLPortGroupEntry, rsRLModeEntryLastChanged=rsRLModeEntryLastChanged, rsL2RLApplyLastChanged=rsL2RLApplyLastChanged, rsTBMeterTable=rsTBMeterTable, rsRLFilterGroupTable=rsRLFilterGroupTable, rsTBMeterFailAction=rsTBMeterFailAction, rsTBMeterRate=rsTBMeterRate, rsTBMeterBurstFailAction=rsTBMeterBurstFailAction, rsL2RLApplyFilterName=rsL2RLApplyFilterName, rsTBMeterExceedByteCount=rsTBMeterExceedByteCount, rsTBMeterFailActionRewrite=rsTBMeterFailActionRewrite, rsL2RLExceedByteCount=rsL2RLExceedByteCount, rsRateLimitGroup5V2=rsRateLimitGroup5V2, rsRLFilterName=rsRLFilterName, rsRateLimitGroup1=rsRateLimitGroup1, rsRateLimitGroup6=rsRateLimitGroup6, rsL2RLMonitor=rsL2RLMonitor, rsTBMeterApplyCount=rsTBMeterApplyCount, rsRateLimitMIB=rsRateLimitMIB, RsAdminStatus=RsAdminStatus, rsTBMeter=rsTBMeter, rsPortRLMeterId=rsPortRLMeterId, RsIfDirection=RsIfDirection, rsL2RLApplyStorageType=rsL2RLApplyStorageType, rsTBMeterApplyStorageType=rsTBMeterApplyStorageType, rsRLFilterGroupStorageType=rsRLFilterGroupStorageType, rsRLModeCapabilityBits=rsRLModeCapabilityBits, rsL2RLApplyOwner=rsL2RLApplyOwner, rsPortRLExceedByteCount=rsPortRLExceedByteCount, rsTBMeterStorageType=rsTBMeterStorageType, rsPortRLInterval=rsPortRLInterval, rsRLModeInputPortStatus=rsRLModeInputPortStatus, rsTBMeterApplyAdminStatus=rsTBMeterApplyAdminStatus, rsRLPortGroupName=rsRLPortGroupName, rsRLPortGroupTable=rsRLPortGroupTable, rsTBMeterMonitorEntry=rsTBMeterMonitorEntry, rsTBMeterLastChanged=rsTBMeterLastChanged, rsL2RLApplyOnePGrouping=rsL2RLApplyOnePGrouping, rsTBMeterErrorMessage=rsTBMeterErrorMessage, rsRLPortGroupLastChanged=rsRLPortGroupLastChanged, rsTBMeterApplyOwner=rsTBMeterApplyOwner, rsTBMeterMinimumBandwidth=rsTBMeterMinimumBandwidth, rsTBMeterDistributeAmong=rsTBMeterDistributeAmong, rsTBMeterBurstFailActionRewrite=rsTBMeterBurstFailActionRewrite, rsL2RLApplyCount=rsL2RLApplyCount, rsRateLimitCompliances=rsRateLimitCompliances, rsRateLimitGroup3=rsRateLimitGroup3, rsTBMeterId=rsTBMeterId, rsL2RLMonitorTable=rsL2RLMonitorTable, rsPortRLMonitorTable=rsPortRLMonitorTable, rsL2RateLimit=rsL2RateLimit, rsRateLimitNotifications=rsRateLimitNotifications, rsL2RLApplyDirection=rsL2RLApplyDirection)
