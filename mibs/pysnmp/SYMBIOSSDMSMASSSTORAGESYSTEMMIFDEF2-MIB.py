#
# PySNMP MIB module SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, MibIdentifier, NotificationType, enterprises, iso, Unsigned32, Gauge32, IpAddress, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "MibIdentifier", "NotificationType", "enterprises", "iso", "Unsigned32", "Gauge32", "IpAddress", "TimeTicks", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

symbios = MibIdentifier((1, 3, 6, 1, 4, 1, 1123))
cosprings = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3))
scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1))
fam8xx = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2))
id = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerifyIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tSoftwareComponentInformation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2), )
if mibBuilder.loadTexts: tSoftwareComponentInformation.setStatus('mandatory')
eSoftwareComponentInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSoftwareComponentInformation.setStatus('mandatory')
a2MajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MajorVersion.setStatus('mandatory')
a2MinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MinorVersion.setStatus('mandatory')
a2Revision = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Revision.setStatus('mandatory')
a2Build = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Build.setStatus('mandatory')
a2TargetOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 0), ("vDos", 1), ("vMacos", 2), ("vOs2", 3), ("vUnix", 4), ("vWin16", 5), ("vWin32", 6), ("vOpenvms", 7), ("vNetware", 8), ("vWin9x", 9), ("vWinnt", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2TargetOperatingSystem.setStatus('mandatory')
a2LanguageEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LanguageEdition.setStatus('mandatory')
a2IdentificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2IdentificationCode.setStatus('mandatory')
a2InstallableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vUnknown", 1), ("vInstallable", 2), ("vNotInstallable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InstallableState.setStatus('mandatory')
a2ExecutableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vUnknown", 1), ("vExecutable", 2), ("vNotExecutable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ExecutableState.setStatus('mandatory')
tSoftwareSignature = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3), )
if mibBuilder.loadTexts: tSoftwareSignature.setStatus('mandatory')
eSoftwareSignature = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a3FileIndex"))
if mibBuilder.loadTexts: eSoftwareSignature.setStatus('mandatory')
a3FileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileName.setStatus('mandatory')
a3FileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileSize.setStatus('mandatory')
a3FileDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 3), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileDateAndTime.setStatus('mandatory')
a3FileChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileChecksum.setStatus('mandatory')
a3FileCrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileCrc1.setStatus('mandatory')
a3FileCrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileCrc2.setStatus('mandatory')
a3FileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileIndex.setStatus('mandatory')
tFieldReplaceableUnit = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4), )
if mibBuilder.loadTexts: tFieldReplaceableUnit.setStatus('mandatory')
eFieldReplaceableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a4FruIndex"))
if mibBuilder.loadTexts: eFieldReplaceableUnit.setStatus('mandatory')
a4FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruIndex.setStatus('mandatory')
a4DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceGroupIndex.setStatus('mandatory')
a4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Description.setStatus('mandatory')
a4Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Manufacturer.setStatus('mandatory')
a4Model = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Model.setStatus('mandatory')
a4PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PartNumber.setStatus('mandatory')
a4FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruSerialNumber.setStatus('mandatory')
a4RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4RevisionLevel.setStatus('mandatory')
a4WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyStartDate.setStatus('mandatory')
a4WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyDuration.setStatus('mandatory')
a4SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SupportPhoneNumber.setStatus('mandatory')
tStorageDevices = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5), )
if mibBuilder.loadTexts: tStorageDevices.setStatus('mandatory')
eStorageDevices = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: eStorageDevices.setStatus('mandatory')
a5StorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5StorageDeviceIndex.setStatus('mandatory')
a5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRigidDiskDrive", 3), ("vCartridgeRigidDiskDrive", 4), ("vFlexibleDisketteDrive", 5), ("vCompactDiskDrive", 6), ("vOpticalWrite-onceread-manyWormDrive", 7), ("vMagneto-opticalDrive", 8), ("vTapeDrive", 9), ("vMediaChanger", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Type.setStatus('mandatory')
a5TypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5TypeDescription.setStatus('mandatory')
a5WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5WorldwideIdentifierType.setStatus('mandatory')
a5WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5WorldwideIdentifier.setStatus('mandatory')
a5Sub_identifier = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 6), DmiDisplaystring()).setLabel("a5Sub-identifier").setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Sub_identifier.setStatus('mandatory')
a5MediaDataBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaDataBlockSize.setStatus('mandatory')
a5FormattedMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 8), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5FormattedMediaCapacity.setStatus('mandatory')
a5RemovableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableDevice.setStatus('mandatory')
a5DeviceLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5DeviceLoaded.setStatus('mandatory')
a5RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableMedia.setStatus('mandatory')
a5MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaLoaded.setStatus('mandatory')
a5Compression = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Compression.setStatus('mandatory')
a5Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Encryption.setStatus('mandatory')
a5FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5FruGroupIndex.setStatus('mandatory')
a5OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5OperationalGroupIndex.setStatus('mandatory')
tStorageDevicesEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6), )
if mibBuilder.loadTexts: tStorageDevicesEvents.setStatus('mandatory')
eStorageDevicesEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"))
if mibBuilder.loadTexts: eStorageDevicesEvents.setStatus('mandatory')
a6StorageDevicesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vRebuildInProgress", 1), ("vStorageDeviceReadying", 2), ("vStorageDeviceError", 3), ("vSelf-monitoringWarning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6StorageDevicesEventType.setStatus('mandatory')
a6EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSeverity.setStatus('mandatory')
a6EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventIsStateBased.setStatus('mandatory')
a6EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventStateKey.setStatus('mandatory')
a6AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6AssociatedGroup.setStatus('mandatory')
a6EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSystem.setStatus('mandatory')
a6EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSubsystem.setStatus('mandatory')
tStorageController = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7), )
if mibBuilder.loadTexts: tStorageController.setStatus('mandatory')
eStorageController = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a7ControllerIndex"))
if mibBuilder.loadTexts: eStorageController.setStatus('mandatory')
a7ControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ControllerIndex.setStatus('mandatory')
a7Identification = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Identification.setStatus('mandatory')
a7WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7WorldwideIdentifierType.setStatus('mandatory')
a7WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7WorldwideIdentifier.setStatus('mandatory')
a7ProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnprotected", 3), ("vProtected", 4), ("vProtectedThroughScsi-3ControllerCommand", 5), ("vProtectedThroughScsi-3ControllerComman1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ProtectionManagement.setStatus('mandatory')
a7BusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusMaster.setStatus('mandatory')
a7SecondsSinceLastPower_up = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 7), DmiInteger()).setLabel("a7SecondsSinceLastPower-up").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7SecondsSinceLastPower_up.setStatus('mandatory')
a7FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7FruGroupIndex.setStatus('mandatory')
a7OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7OperationalGroupIndex.setStatus('mandatory')
tStorageControllerEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8), )
if mibBuilder.loadTexts: tStorageControllerEvents.setStatus('mandatory')
eStorageControllerEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8AssociatedGroup"))
if mibBuilder.loadTexts: eStorageControllerEvents.setStatus('mandatory')
a8StorageControllerEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vStorageControllerError", 1), ("vSelf-monitoringWarning1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8StorageControllerEventType.setStatus('mandatory')
a8EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSeverity.setStatus('mandatory')
a8EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventIsStateBased.setStatus('mandatory')
a8EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventStateKey.setStatus('mandatory')
a8AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AssociatedGroup.setStatus('mandatory')
a8EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSystem.setStatus('mandatory')
a8EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSubsystem.setStatus('mandatory')
tBusPort = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9), )
if mibBuilder.loadTexts: tBusPort.setStatus('mandatory')
eBusPort = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a9BusPortIndex"))
if mibBuilder.loadTexts: eBusPort.setStatus('mandatory')
a9BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9BusPortIndex.setStatus('mandatory')
a9Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vAtaatapi", 6), ("vFlexibleDiskette", 7), ("v1496", 8), ("vScsiParallelInterface", 9), ("vScsiFibreChannelProtocol", 10), ("vScsiSerialBusProtocol", 11), ("vScsiSerialBusProtocol-21394", 12), ("vScsiSerialStorageArchitecture", 13), ("vVesa", 14), ("vPcmcia", 15), ("vUniversalSerialBus", 16), ("vParallelPort", 17), ("vEscon", 18), ("vDiagnostic", 19), ("vI2c", 20), ("vPower", 21), ("vHippi", 22), ("vMultibus", 23), ("vVme", 24), ("vIpi", 25), ("vIeee-488", 26), ("vRs232", 27), ("vIeee802310base5", 28), ("vIeee802310base2", 29), ("vIeee80231base5", 30), ("vIeee802310broad36", 31), ("vIeee8023100basevg", 32), ("vIeee8025Token-ring", 33), ("vAnsiX3t95Fddi", 34), ("vMca", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Protocol.setStatus('mandatory')
a9ProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ProtocolDescription.setStatus('mandatory')
a9SignalCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSingleEnded", 3), ("vDifferential", 4), ("vLowVoltageDifferential", 5), ("vOptical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9SignalCharacteristics.setStatus('mandatory')
a9WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WorldwideIdentifierType.setStatus('mandatory')
a9WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WorldwideIdentifier.setStatus('mandatory')
a9AddressDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9AddressDescriptor.setStatus('mandatory')
a9Isochronous = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Isochronous.setStatus('mandatory')
a9MaximumWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumWidth.setStatus('mandatory')
a9MaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumTransferRate.setStatus('mandatory')
a9MaximumNumberOfAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumNumberOfAttachments.setStatus('mandatory')
a9ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vScsiAHigh-densityShielded50Pins", 4), ("vScsiAHigh-densityUnshielded50Pins", 5), ("vScsiALow-densityShielded50Pins", 6), ("vScsiALow-densityUnshielded50Pins", 7), ("vScsiPHigh-densityShielded68Pins", 8), ("vScsiPHigh-densityUnshielded68Pins", 9), ("vScsiSca-i80Pins", 10), ("vScsiSca-ii80Pins", 11), ("vScsiFibreChannelDb9Copper", 12), ("vScsiFibreChannelFibre", 13), ("vScsiFibreChannelSca-ii40Pins", 14), ("vScsiFibreChannelSca-ii20Pins", 15), ("vScsiFibreChannelBnc", 16), ("vAta3-12Inch40Pins", 17), ("vAta2-12Inch44Pins", 18), ("vSerial9Pin", 19), ("vSerial25Pin", 20), ("vRs23225Pin", 21), ("vRs422", 22), ("vIeee-488", 23), ("vAui", 24), ("vUptCategory3", 25), ("vUptCategory4", 26), ("vUptCategory5", 27), ("vBnc", 28), ("vStpRj11", 29), ("vStpRj45", 30), ("vStpDb9", 31), ("vFiberMic", 32), ("vAppleAui", 33), ("vPciSlot", 34), ("vIsaSlot", 35), ("vEisaSlot", 36), ("vVesaSlot", 37), ("vPcmciaSlot", 38), ("vPcCardSlot", 39), ("vFloppyDiskette5-14Inch", 40), ("vFloppyDiskette3-12Inch", 41), ("vHssdc6Pins", 42), ("vGbicSocket", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorType.setStatus('mandatory')
a9ConnectorTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 13), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorTypeDescription.setStatus('mandatory')
a9ConnectorGender = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFemale", 3), ("vMale", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorGender.setStatus('mandatory')
a9OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9OperationalGroupIndex.setStatus('mandatory')
a9MassStorageStatisticsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MassStorageStatisticsGroupIndex.setStatus('mandatory')
tBusPortEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10), )
if mibBuilder.loadTexts: tBusPortEvents.setStatus('mandatory')
eBusPortEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a10AssociatedGroup"))
if mibBuilder.loadTexts: eBusPortEvents.setStatus('mandatory')
a10BusPortEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vBusPortError", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BusPortEventType.setStatus('mandatory')
a10EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventSeverity.setStatus('mandatory')
a10EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventIsStateBased.setStatus('mandatory')
a10EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventStateKey.setStatus('mandatory')
a10AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10AssociatedGroup.setStatus('mandatory')
a10EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventSystem.setStatus('mandatory')
a10EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventSubsystem.setStatus('mandatory')
tMassStorageAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11), )
if mibBuilder.loadTexts: tMassStorageAssociation.setStatus('mandatory')
eMassStorageAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: eMassStorageAssociation.setStatus('mandatory')
a11AssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11AssociationIndex.setStatus('mandatory')
a11Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vPhysicalOrganization", 0), ("vLogicalOrganization", 1), ("vLogicalToPhysicalOrganization", 2), ("vRedundancyOrganization", 3), ("vSpareOrganization", 4), ("vCacheOrganization", 5), ("vSoftwareOrganization", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Type.setStatus('mandatory')
a11Object1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object1Type.setStatus('mandatory')
a11Object1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object1Index.setStatus('mandatory')
a11Object2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object2Type.setStatus('mandatory')
a11Object2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object2Index.setStatus('mandatory')
tMassStorageAssociationEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12), )
if mibBuilder.loadTexts: tMassStorageAssociationEvents.setStatus('mandatory')
eMassStorageAssociationEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a12AssociatedGroup"))
if mibBuilder.loadTexts: eMassStorageAssociationEvents.setStatus('mandatory')
a12MassStorageAssociationEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vPhysicalOrganization", 0), ("vLogicalOrganization", 1), ("vLogicalToPhysicalOrganization", 2), ("vRedundancyOrganization", 3), ("vSpareOrganization", 4), ("vCacheOrganization", 5), ("vSoftwareOrganization", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MassStorageAssociationEventType.setStatus('mandatory')
a12EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSeverity.setStatus('mandatory')
a12EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventIsStateBased.setStatus('mandatory')
a12EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventStateKey.setStatus('mandatory')
a12AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12AssociatedGroup.setStatus('mandatory')
a12EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSystem.setStatus('mandatory')
a12EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSubsystem.setStatus('mandatory')
tBusPortAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13), )
if mibBuilder.loadTexts: tBusPortAssociation.setStatus('mandatory')
eBusPortAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a13BusPortAssociationIndex"))
if mibBuilder.loadTexts: eBusPortAssociation.setStatus('mandatory')
a13BusPortAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13BusPortAssociationIndex.setStatus('mandatory')
a13NegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedSpeed.setStatus('mandatory')
a13NegotiatedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedWidth.setStatus('mandatory')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a14OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
a14OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStateInstanceIndex.setStatus('mandatory')
a14DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DeviceGroupIndex.setStatus('mandatory')
a14OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStatus.setStatus('mandatory')
a14UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14UsageState.setStatus('mandatory')
a14AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AvailabilityStatus.setStatus('mandatory')
a14AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AdministrativeState.setStatus('mandatory')
a14FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14FatalErrorCount.setStatus('mandatory')
a14MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14MajorErrorCount.setStatus('mandatory')
a14WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14WarningErrorCount.setStatus('mandatory')
a14CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical1", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14CurrentErrorStatus.setStatus('mandatory')
a14DevicePredictedFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotSupportedByThisDevice", 3), ("vNoFailurePredictedByTheDevice", 4), ("vDeviceFailurePredictedByTheDevice", 5), ("vMediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DevicePredictedFailureStatus.setStatus('mandatory')
tSymsdmsmassstoragesystem = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15), )
if mibBuilder.loadTexts: tSymsdmsmassstoragesystem.setStatus('mandatory')
eSymsdmsmassstoragesystem = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a15SymDeviceIndex"))
if mibBuilder.loadTexts: eSymsdmsmassstoragesystem.setStatus('mandatory')
a15SymDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15SymDeviceIndex.setStatus('mandatory')
a15SymDeviceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15SymDeviceFlag.setStatus('mandatory')
a15SmartReportingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SmartReportingCapability.setStatus('mandatory')
a15SmartPollingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 4), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SmartPollingPeriod.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
trap1 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,1)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
trap2 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,2)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
trap3 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,3)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
trap4 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,4)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
trap5 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1) + (0,1)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8StorageControllerEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a7ControllerIndex"))
trap6 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1) + (0,2)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8StorageControllerEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a7ControllerIndex"))
mibBuilder.exportSymbols("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", tBusPortEvents=tBusPortEvents, a7ProtectionManagement=a7ProtectionManagement, a10EventSystem=a10EventSystem, trap6=trap6, a8EventStateKey=a8EventStateKey, a5StorageDeviceIndex=a5StorageDeviceIndex, a3FileCrc2=a3FileCrc2, a4FruSerialNumber=a4FruSerialNumber, eFieldReplaceableUnit=eFieldReplaceableUnit, a8StorageControllerEventType=a8StorageControllerEventType, a1SerialNumber=a1SerialNumber, a7WorldwideIdentifierType=a7WorldwideIdentifierType, a6EventStateKey=a6EventStateKey, a12EventStateKey=a12EventStateKey, DmiCounter=DmiCounter, a7WorldwideIdentifier=a7WorldwideIdentifier, a3FileCrc1=a3FileCrc1, a9ConnectorType=a9ConnectorType, DmiInteger=DmiInteger, eMiftomib=eMiftomib, a5MediaDataBlockSize=a5MediaDataBlockSize, eOperationalState=eOperationalState, a4SupportPhoneNumber=a4SupportPhoneNumber, a11Object2Index=a11Object2Index, a1Version=a1Version, a14DevicePredictedFailureStatus=a14DevicePredictedFailureStatus, trap4=trap4, a1Product=a1Product, tStorageDevices=tStorageDevices, tSoftwareComponentInformation=tSoftwareComponentInformation, a9WorldwideIdentifierType=a9WorldwideIdentifierType, eStorageDevices=eStorageDevices, scsi=scsi, a12EventSeverity=a12EventSeverity, a14OperationalStateInstanceIndex=a14OperationalStateInstanceIndex, a2MajorVersion=a2MajorVersion, a12EventIsStateBased=a12EventIsStateBased, eSoftwareSignature=eSoftwareSignature, a2ExecutableState=a2ExecutableState, a9AddressDescriptor=a9AddressDescriptor, a15SmartPollingPeriod=a15SmartPollingPeriod, a9MassStorageStatisticsGroupIndex=a9MassStorageStatisticsGroupIndex, eBusPortEvents=eBusPortEvents, a7FruGroupIndex=a7FruGroupIndex, tSymsdmsmassstoragesystem=tSymsdmsmassstoragesystem, a6EventSubsystem=a6EventSubsystem, a5DeviceLoaded=a5DeviceLoaded, a6StorageDevicesEventType=a6StorageDevicesEventType, a2Build=a2Build, a5WorldwideIdentifierType=a5WorldwideIdentifierType, a11AssociationIndex=a11AssociationIndex, a2Revision=a2Revision, a11Type=a11Type, a9MaximumTransferRate=a9MaximumTransferRate, trap2=trap2, a1Manufacturer=a1Manufacturer, a8EventSeverity=a8EventSeverity, a13BusPortAssociationIndex=a13BusPortAssociationIndex, tOperationalState=tOperationalState, a14CurrentErrorStatus=a14CurrentErrorStatus, a10EventStateKey=a10EventStateKey, a3FileIndex=a3FileIndex, eStorageControllerEvents=eStorageControllerEvents, a5MediaLoaded=a5MediaLoaded, a9ConnectorTypeDescription=a9ConnectorTypeDescription, a14OperationalStatus=a14OperationalStatus, a5WorldwideIdentifier=a5WorldwideIdentifier, a14AdministrativeState=a14AdministrativeState, a5Encryption=a5Encryption, tFieldReplaceableUnit=tFieldReplaceableUnit, a5FruGroupIndex=a5FruGroupIndex, a7SecondsSinceLastPower_up=a7SecondsSinceLastPower_up, id=id, a4WarrantyStartDate=a4WarrantyStartDate, cosprings=cosprings, a8EventSubsystem=a8EventSubsystem, eComponentid=eComponentid, a9ConnectorGender=a9ConnectorGender, DmiInteger64X=DmiInteger64X, tSoftwareSignature=tSoftwareSignature, a2InstallableState=a2InstallableState, tBusPortAssociation=tBusPortAssociation, a5FormattedMediaCapacity=a5FormattedMediaCapacity, a2MinorVersion=a2MinorVersion, a2IdentificationCode=a2IdentificationCode, fam8xx=fam8xx, a9WorldwideIdentifier=a9WorldwideIdentifier, a7ControllerIndex=a7ControllerIndex, tMiftomib=tMiftomib, a12EventSystem=a12EventSystem, DmiDateX=DmiDateX, a9OperationalGroupIndex=a9OperationalGroupIndex, a99DisableTrap=a99DisableTrap, a4Manufacturer=a4Manufacturer, a7Identification=a7Identification, eMassStorageAssociation=eMassStorageAssociation, a14DeviceGroupIndex=a14DeviceGroupIndex, a1Installation=a1Installation, trap5=trap5, tStorageController=tStorageController, a15SmartReportingCapability=a15SmartReportingCapability, a4PartNumber=a4PartNumber, a15SymDeviceFlag=a15SymDeviceFlag, a14FatalErrorCount=a14FatalErrorCount, tStorageControllerEvents=tStorageControllerEvents, a5Compression=a5Compression, a9ProtocolDescription=a9ProtocolDescription, a6EventIsStateBased=a6EventIsStateBased, a11Object1Type=a11Object1Type, a10EventIsStateBased=a10EventIsStateBased, tStorageDevicesEvents=tStorageDevicesEvents, a8AssociatedGroup=a8AssociatedGroup, eStorageController=eStorageController, a99MibName=a99MibName, a3FileName=a3FileName, a12MassStorageAssociationEventType=a12MassStorageAssociationEventType, eSymsdmsmassstoragesystem=eSymsdmsmassstoragesystem, DmiComponentIndex=DmiComponentIndex, a14UsageState=a14UsageState, DmiDisplaystring=DmiDisplaystring, a9Protocol=a9Protocol, a6AssociatedGroup=a6AssociatedGroup, a7OperationalGroupIndex=a7OperationalGroupIndex, a7BusMaster=a7BusMaster, a4DeviceGroupIndex=a4DeviceGroupIndex, eBusPortAssociation=eBusPortAssociation, a14AvailabilityStatus=a14AvailabilityStatus, a3FileChecksum=a3FileChecksum, a14WarningErrorCount=a14WarningErrorCount, a3FileSize=a3FileSize, tMassStorageAssociationEvents=tMassStorageAssociationEvents, a9BusPortIndex=a9BusPortIndex, a13NegotiatedSpeed=a13NegotiatedSpeed, a5OperationalGroupIndex=a5OperationalGroupIndex, a4FruIndex=a4FruIndex, a5TypeDescription=a5TypeDescription, a9MaximumWidth=a9MaximumWidth, eSoftwareComponentInformation=eSoftwareComponentInformation, a10EventSeverity=a10EventSeverity, tBusPort=tBusPort, dmtfGroups=dmtfGroups, a11Object2Type=a11Object2Type, a14MajorErrorCount=a14MajorErrorCount, a1Verify=a1Verify, a9Isochronous=a9Isochronous, a11Object1Index=a11Object1Index, a6EventSystem=a6EventSystem, a10AssociatedGroup=a10AssociatedGroup, tComponentid=tComponentid, a15SymDeviceIndex=a15SymDeviceIndex, a5Sub_identifier=a5Sub_identifier, a13NegotiatedWidth=a13NegotiatedWidth, a8EventSystem=a8EventSystem, a4WarrantyDuration=a4WarrantyDuration, a12EventSubsystem=a12EventSubsystem, a5RemovableDevice=a5RemovableDevice, a4Model=a4Model, a4Description=a4Description, a6EventSeverity=a6EventSeverity, trap1=trap1, a4RevisionLevel=a4RevisionLevel, a9SignalCharacteristics=a9SignalCharacteristics, a9MaximumNumberOfAttachments=a9MaximumNumberOfAttachments, a2LanguageEdition=a2LanguageEdition, eMassStorageAssociationEvents=eMassStorageAssociationEvents, trap3=trap3, symbios=symbios, a8EventIsStateBased=a8EventIsStateBased, a10EventSubsystem=a10EventSubsystem, eBusPort=eBusPort, eStorageDevicesEvents=eStorageDevicesEvents, a10BusPortEventType=a10BusPortEventType, a12AssociatedGroup=a12AssociatedGroup, a99MibOid=a99MibOid, a5RemovableMedia=a5RemovableMedia, tMassStorageAssociation=tMassStorageAssociation, a3FileDateAndTime=a3FileDateAndTime, a5Type=a5Type, a2TargetOperatingSystem=a2TargetOperatingSystem)
