#
# PySNMP MIB module Wellfleet-VINES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-VINES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, ModuleIdentity, MibIdentifier, iso, NotificationType, Counter32, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "ModuleIdentity", "MibIdentifier", "iso", "NotificationType", "Counter32", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "Counter64", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfVinesGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfVinesGroup")
wfVinesBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1))
wfVinesBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseDelete.setStatus('mandatory')
wfVinesBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseDisable.setStatus('mandatory')
wfVinesBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseState.setStatus('mandatory')
wfVinesBaseUserNetid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2097151))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseUserNetid.setStatus('mandatory')
wfVinesBaseRouterNetid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseRouterNetid.setStatus('mandatory')
wfVinesBaseBcastClass = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bcast", 1), ("chrg", 2), ("cost", 3), ("lans", 4), ("srvr", 5), ("nochrg", 6), ("locost", 7), ("alllans", 8))).clone('bcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseBcastClass.setStatus('mandatory')
wfVinesBaseNetworkSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseNetworkSize.setStatus('mandatory')
wfVinesBaseHostSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseHostSize.setStatus('mandatory')
wfVinesBaseRtpMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automode", 1), ("seq", 2), ("sequenced", 3))).clone('automode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseRtpMode.setStatus('mandatory')
wfVinesBaseLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2147483647, 1, 2, 16, 3, 17, 18, 19))).clone(namedValues=NamedValues(("nothing", 2147483647), ("debug", 1), ("info", 2), ("trace", 16), ("debuginfo", 3), ("debugtrace", 17), ("infotrace", 18), ("debuginfotrace", 19))).clone('nothing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseLogFilter.setStatus('mandatory')
wfVinesBaseRouterSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseRouterSeqNumber.setStatus('mandatory')
wfVinesBaseSoloSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 12), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseSoloSlotMask.setStatus('mandatory')
wfVinesBaseSoloistSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseSoloistSlot.setStatus('mandatory')
wfVinesIp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2))
wfVinesIpTotIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpTotIn.setStatus('mandatory')
wfVinesIpTotOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpTotOut.setStatus('mandatory')
wfVinesIpBad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpBad.setStatus('mandatory')
wfVinesIpRouted = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpRouted.setStatus('mandatory')
wfVinesIpRoutedHWM = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpRoutedHWM.setStatus('mandatory')
wfVinesIpBcast = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpBcast.setStatus('mandatory')
wfVinesIpBcastHWM = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpBcastHWM.setStatus('mandatory')
wfVinesIpReass = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpReass.setStatus('mandatory')
wfVinesIpFrags = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpFrags.setStatus('mandatory')
wfVinesIpToDodIP = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpToDodIP.setStatus('mandatory')
wfVinesIpFromDodIP = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpFromDodIP.setStatus('mandatory')
wfVinesRtpNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 3))
wfVinesRtpNbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrNumber.setStatus('mandatory')
wfVinesRtpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4), )
if mibBuilder.loadTexts: wfVinesRtpNbrTable.setStatus('mandatory')
wfVinesRtpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesRtpNbrNetId"), (0, "Wellfleet-VINES-MIB", "wfVinesRtpNbrSubNetId"))
if mibBuilder.loadTexts: wfVinesRtpNbrEntry.setStatus('mandatory')
wfVinesRtpNbrNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrNetId.setStatus('mandatory')
wfVinesRtpNbrSubNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrSubNetId.setStatus('mandatory')
wfVinesRtpNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("workst", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrType.setStatus('mandatory')
wfVinesRtpNbrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("enet", 1), ("tr4k", 2), ("tr16k", 3), ("hdlc1200", 4), ("hdlc4800", 5), ("hdlc9600", 6), ("hdlc56000", 7), ("async1200", 8), ("async4800", 9), ("async9600", 10), ("async56000", 11), ("x251200", 12), ("x254800", 13), ("x259600", 14), ("x2556000", 15), ("t145k", 16), ("t1128k", 17), ("t1192k", 18), ("t1256k", 19), ("t1320k", 20), ("t1384k", 21), ("t1448k", 22), ("t1512k", 23), ("t1576k", 24), ("t1640k", 25), ("t1704k", 26), ("t1896k", 27), ("t11088k", 28), ("t11344k", 29), ("tunnel", 30), ("fddi", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrIfType.setStatus('mandatory')
wfVinesRtpNbrRemAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrRemAdr.setStatus('mandatory')
wfVinesRtpNbrLocAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrLocAdr.setStatus('mandatory')
wfVinesRtpNbrLocSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrLocSlot.setStatus('mandatory')
wfVinesRtpNbrLocLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrLocLine.setStatus('mandatory')
wfVinesRtpNbrSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrSvrName.setStatus('mandatory')
wfVinesRtpNbrCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrCost.setStatus('mandatory')
wfVinesSeqRtpNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("fullrqst", 2), ("chgrqst", 3), ("up", 4))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesSeqRtpNbrState.setStatus('mandatory')
wfVinesSeqRtpNbrSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesSeqRtpNbrSeqNumber.setStatus('mandatory')
wfVinesRtpNbrRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seq", 1), ("sequenced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrRtType.setStatus('mandatory')
wfVinesRtpNbrNumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrNumPaths.setStatus('mandatory')
wfVinesRtpRt = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 5))
wfVinesRtpRtNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtNumber.setStatus('mandatory')
wfVinesRtpRtTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6), )
if mibBuilder.loadTexts: wfVinesRtpRtTable.setStatus('mandatory')
wfVinesRtpRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesRtpRtNetid"))
if mibBuilder.loadTexts: wfVinesRtpRtEntry.setStatus('mandatory')
wfVinesRtpRtNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtNetid.setStatus('mandatory')
wfVinesRtpRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtMetric.setStatus('mandatory')
wfVinesRtpRtIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtIdle.setStatus('mandatory')
wfVinesRtpRtGateNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtGateNetid.setStatus('mandatory')
wfVinesRtpRtSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtSvrName.setStatus('mandatory')
wfVinesRtpRtGateSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtGateSvrName.setStatus('mandatory')
wfVinesRtpRtLocSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtLocSlot.setStatus('mandatory')
wfVinesRtpRtLocLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtLocLine.setStatus('mandatory')
wfVinesRtpRtIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("enet", 1), ("tr4k", 2), ("tr16k", 3), ("hdlc1200", 4), ("hdlc4800", 5), ("hdlc9600", 6), ("hdlc56000", 7), ("async1200", 8), ("async4800", 9), ("async9600", 10), ("async56000", 11), ("x251200", 12), ("x254800", 13), ("x259600", 14), ("x2556000", 15), ("t145k", 16), ("t1128k", 17), ("t1192k", 18), ("t1256k", 19), ("t1320k", 20), ("t1384k", 21), ("t1448k", 22), ("t1512k", 23), ("t1576k", 24), ("t1640k", 25), ("t1704k", 26), ("t1896k", 27), ("t11088k", 28), ("t11344k", 29), ("tunnel", 30), ("fddi", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtIfType.setStatus('mandatory')
wfVinesRtpRtGateHwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtGateHwAddr.setStatus('mandatory')
wfVinesRtpRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seq", 1), ("sequenced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtType.setStatus('mandatory')
wfVinesRtpRtSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtSeqNumber.setStatus('mandatory')
wfVinesRtpRtTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtTimeStamp.setStatus('mandatory')
wfVinesRtpRtNumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtNumPaths.setStatus('mandatory')
wfVinesIf = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 7))
wfVinesIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumber.setStatus('mandatory')
wfVinesIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8), )
if mibBuilder.loadTexts: wfVinesIfTable.setStatus('mandatory')
wfVinesIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesIfCct"))
if mibBuilder.loadTexts: wfVinesIfEntry.setStatus('mandatory')
wfVinesIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfDelete.setStatus('mandatory')
wfVinesIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfDisable.setStatus('mandatory')
wfVinesIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfState.setStatus('mandatory')
wfVinesIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSlot.setStatus('mandatory')
wfVinesIfLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfLine.setStatus('mandatory')
wfVinesIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfCct.setStatus('mandatory')
wfVinesIfSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSession.setStatus('mandatory')
wfVinesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("enet", 1), ("tr4k", 2), ("tr16k", 3), ("hdlc1200", 4), ("hdlc4800", 5), ("hdlc9600", 6), ("hdlc56000", 7), ("async1200", 8), ("async4800", 9), ("async9600", 10), ("async56000", 11), ("x251200", 12), ("x254800", 13), ("x259600", 14), ("x2556000", 15), ("t145k", 16), ("t1128k", 17), ("t1192k", 18), ("t1256k", 19), ("t1320k", 20), ("t1384k", 21), ("t1448k", 22), ("t1512k", 23), ("t1576k", 24), ("t1640k", 25), ("t1704k", 26), ("t1896k", 27), ("t11088k", 28), ("t11344k", 29), ("tunnel", 30), ("fddi", 31))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfType.setStatus('mandatory')
wfVinesIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfDescr.setStatus('mandatory')
wfVinesIfAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfAdr.setStatus('mandatory')
wfVinesIfDodIpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfDodIpDisable.setStatus('mandatory')
wfVinesIfArpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfArpDisable.setStatus('mandatory')
wfVinesIfTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfTrEndStation.setStatus('mandatory')
wfVinesIfInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInPkts.setStatus('mandatory')
wfVinesIfInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInErrs.setStatus('mandatory')
wfVinesIfOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutPkts.setStatus('mandatory')
wfVinesIfOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutErrs.setStatus('mandatory')
wfVinesIfInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInMsgs.setStatus('mandatory')
wfVinesIfMux = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enet", 1), ("snap", 2))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfMux.setStatus('mandatory')
wfVinesIfFwdDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfFwdDrops.setStatus('mandatory')
wfVinesIfZeroHopDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfZeroHopDrops.setStatus('mandatory')
wfVinesIfIcpInErrorNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpInErrorNotifs.setStatus('mandatory')
wfVinesIfIcpInMetricNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpInMetricNotifs.setStatus('mandatory')
wfVinesIfIcpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpInErrors.setStatus('mandatory')
wfVinesIfIcpOutErrorNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpOutErrorNotifs.setStatus('mandatory')
wfVinesIfIcpOutMetricNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpOutMetricNotifs.setStatus('mandatory')
wfVinesIfArpInQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpInQueries.setStatus('mandatory')
wfVinesIfArpInAssgReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpInAssgReqs.setStatus('mandatory')
wfVinesIfArpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpInErrors.setStatus('mandatory')
wfVinesIfArpOutServRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpOutServRsps.setStatus('mandatory')
wfVinesIfArpOutAssgRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpOutAssgRsps.setStatus('mandatory')
wfVinesIfInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInRedirects.setStatus('mandatory')
wfVinesIfOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutRedirects.setStatus('mandatory')
wfVinesIfEchoInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfEchoInPkts.setStatus('mandatory')
wfVinesIfEchoOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfEchoOutPkts.setStatus('mandatory')
wfVinesIfReassFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfReassFails.setStatus('mandatory')
wfVinesIfRemClientPrivDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfRemClientPrivDisable.setStatus('mandatory')
wfVinesIfSplitHorizonDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSplitHorizonDisable.setStatus('mandatory')
wfVinesIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfCost.setStatus('obsolete')
wfVinesIfSyncPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSyncPortNumber.setStatus('obsolete')
wfVinesIfInLackRescError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInLackRescError.setStatus('mandatory')
wfVinesIfOutLackRescError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutLackRescError.setStatus('mandatory')
wfVinesIfRtpRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfRtpRecv.setStatus('mandatory')
wfVinesIfRtpSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfRtpSent.setStatus('mandatory')
wfVinesIfSMDSGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSMDSGroupAddress.setStatus('mandatory')
wfVinesIfFRBcastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfFRBcastDlci.setStatus('mandatory')
wfVinesIfCfgAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfCfgAdr.setStatus('mandatory')
wfVinesIfNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumRoutes.setStatus('obsolete')
wfVinesIfCfgCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfCfgCost.setStatus('mandatory')
wfVinesIfCostUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfCostUsed.setStatus('mandatory')
wfVinesIfFrpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfFrpEnable.setStatus('mandatory')
wfVinesIfSeqArpInQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpInQueries.setStatus('mandatory')
wfVinesIfSeqArpInAssgReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpInAssgReqs.setStatus('mandatory')
wfVinesIfSeqArpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpInErrors.setStatus('mandatory')
wfVinesIfSeqArpOutServRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpOutServRsps.setStatus('mandatory')
wfVinesIfSeqArpOutAssgRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpOutAssgRsps.setStatus('mandatory')
wfVinesIfInSeqRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInSeqRedirects.setStatus('mandatory')
wfVinesIfOutSeqRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutSeqRedirects.setStatus('mandatory')
wfVinesIfSeqRtpRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqRtpRecv.setStatus('mandatory')
wfVinesIfSeqRtpSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqRtpSent.setStatus('mandatory')
wfVinesIfRtpGenerationDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfRtpGenerationDisable.setStatus('mandatory')
wfVinesIfInverseArpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfInverseArpEnable.setStatus('mandatory')
wfVinesIfSTalkSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSTalkSplitHorizon.setStatus('mandatory')
wfVinesIfPermWanNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfPermWanNbr.setStatus('mandatory')
wfVinesIfNumFwdEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumFwdEntries.setStatus('mandatory')
wfVinesIfNumNonSeqNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumNonSeqNbrs.setStatus('mandatory')
wfVinesIfNumSeqNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumSeqNbrs.setStatus('mandatory')
wfVinesIfRedirectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfRedirectEnable.setStatus('mandatory')
wfVinesIfX25VC = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 9))
wfVinesIfX25VCNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCNumber.setStatus('mandatory')
wfVinesIfX25VCTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10), )
if mibBuilder.loadTexts: wfVinesIfX25VCTable.setStatus('mandatory')
wfVinesIfX25VCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesIfX25VCCct"))
if mibBuilder.loadTexts: wfVinesIfX25VCEntry.setStatus('mandatory')
wfVinesIfX25VCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCSlot.setStatus('mandatory')
wfVinesIfX25VCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCLine.setStatus('mandatory')
wfVinesIfX25VCCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCCct.setStatus('mandatory')
wfVinesIfX25VCSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCSession.setStatus('mandatory')
wfVinesIfX25VCTotIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCTotIn.setStatus('mandatory')
wfVinesIfX25VCTotOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCTotOut.setStatus('mandatory')
wfVinesIfX25VCInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCInErrs.setStatus('mandatory')
wfVinesIfX25VCOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCOutErrs.setStatus('mandatory')
wfVinesIfX25VCPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCPktsOut.setStatus('mandatory')
wfVinesIfX25VCPktsAwaitAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCPktsAwaitAck.setStatus('mandatory')
wfVinesIfX25VCBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCBytesOut.setStatus('mandatory')
wfVinesIfX25VCBytesAwaitAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCBytesAwaitAck.setStatus('mandatory')
wfVinesIfX25VCPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCPktsIn.setStatus('mandatory')
wfVinesIfX25VCBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCBytesIn.setStatus('mandatory')
wfVinesIfX25VCResetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCResetsIn.setStatus('mandatory')
wfVinesIfX25VCResetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCResetsOut.setStatus('mandatory')
wfVinesTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11), )
if mibBuilder.loadTexts: wfVinesTrafficFilterTable.setStatus('mandatory')
wfVinesTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesTrafficFilterCircuit"), (0, "Wellfleet-VINES-MIB", "wfVinesTrafficFilterRuleNumber"), (0, "Wellfleet-VINES-MIB", "wfVinesTrafficFilterFragment"))
if mibBuilder.loadTexts: wfVinesTrafficFilterEntry.setStatus('mandatory')
wfVinesTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterCreate.setStatus('mandatory')
wfVinesTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterEnable.setStatus('mandatory')
wfVinesTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterStatus.setStatus('mandatory')
wfVinesTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterCounter.setStatus('mandatory')
wfVinesTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterDefinition.setStatus('mandatory')
wfVinesTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterReserved.setStatus('mandatory')
wfVinesTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterCircuit.setStatus('mandatory')
wfVinesTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterRuleNumber.setStatus('mandatory')
wfVinesTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterFragment.setStatus('mandatory')
wfVinesTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterName.setStatus('mandatory')
wfVinesNameTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12), )
if mibBuilder.loadTexts: wfVinesNameTable.setStatus('mandatory')
wfVinesNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesNameNetid"))
if mibBuilder.loadTexts: wfVinesNameEntry.setStatus('mandatory')
wfVinesNameDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameDelete.setStatus('mandatory')
wfVinesNameDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameDisable.setStatus('mandatory')
wfVinesNameNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesNameNetid.setStatus('mandatory')
wfVinesNameHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameHost.setStatus('mandatory')
wfVinesNameSubNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameSubNetid.setStatus('mandatory')
wfVinesArp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13))
wfVinesArpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesArpDelete.setStatus('mandatory')
wfVinesArpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesArpDisable.setStatus('mandatory')
wfVinesArpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesArpState.setStatus('mandatory')
wfVinesArpSubnetid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesArpSubnetid.setStatus('mandatory')
wfVinesArpSubnetBlock = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesArpSubnetBlock.setStatus('mandatory')
wfVinesArpAssignDeniedPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesArpAssignDeniedPkts.setStatus('mandatory')
wfVinesSeqRtpNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 14))
wfVinesSeqRtpNbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesSeqRtpNbrNumber.setStatus('mandatory')
wfVinesAggrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15))
wfVinesAggrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInPkts.setStatus('mandatory')
wfVinesAggrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutPkts.setStatus('mandatory')
wfVinesAggrFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrFwdPkts.setStatus('mandatory')
wfVinesAggrInXsumErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInXsumErrs.setStatus('mandatory')
wfVinesAggrBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrBcastPkts.setStatus('mandatory')
wfVinesAggrOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutNoRoutes.setStatus('mandatory')
wfVinesAggrInHopCountErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInHopCountErrs.setStatus('mandatory')
wfVinesAggrInIcpErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInIcpErrs.setStatus('mandatory')
wfVinesAggrInIcpMetrics = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInIcpMetrics.setStatus('mandatory')
wfVinesAggrOutIcpErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutIcpErrs.setStatus('mandatory')
wfVinesAggrOutIcpMetrics = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutIcpMetrics.setStatus('mandatory')
wfVinesAggrInArpQueries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInArpQueries.setStatus('mandatory')
wfVinesAggrInArpAssigns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInArpAssigns.setStatus('mandatory')
wfVinesAggrInArpErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInArpErrs.setStatus('mandatory')
wfVinesAggrOutArpServResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutArpServResps.setStatus('mandatory')
wfVinesAggrOutArpAssigns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutArpAssigns.setStatus('mandatory')
wfVinesAggrInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInRedirects.setStatus('mandatory')
wfVinesAggrOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutRedirects.setStatus('mandatory')
wfVinesAggrInEchos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInEchos.setStatus('mandatory')
wfVinesAggrOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutEchos.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-VINES-MIB", wfVinesRtpNbrSubNetId=wfVinesRtpNbrSubNetId, wfVinesAggrInXsumErrs=wfVinesAggrInXsumErrs, wfVinesRtpNbrCost=wfVinesRtpNbrCost, wfVinesIfNumber=wfVinesIfNumber, wfVinesBaseBcastClass=wfVinesBaseBcastClass, wfVinesIfIcpInErrorNotifs=wfVinesIfIcpInErrorNotifs, wfVinesTrafficFilterDefinition=wfVinesTrafficFilterDefinition, wfVinesIfInverseArpEnable=wfVinesIfInverseArpEnable, wfVinesRtpRtEntry=wfVinesRtpRtEntry, wfVinesIfSession=wfVinesIfSession, wfVinesIfOutErrs=wfVinesIfOutErrs, wfVinesNameDelete=wfVinesNameDelete, wfVinesTrafficFilterName=wfVinesTrafficFilterName, wfVinesIfRtpRecv=wfVinesIfRtpRecv, wfVinesRtpRtNumPaths=wfVinesRtpRtNumPaths, wfVinesRtpRtTable=wfVinesRtpRtTable, wfVinesIfSeqArpInAssgReqs=wfVinesIfSeqArpInAssgReqs, wfVinesAggrOutArpAssigns=wfVinesAggrOutArpAssigns, wfVinesBaseDelete=wfVinesBaseDelete, wfVinesIpTotIn=wfVinesIpTotIn, wfVinesIfFwdDrops=wfVinesIfFwdDrops, wfVinesIfOutRedirects=wfVinesIfOutRedirects, wfVinesIfArpOutServRsps=wfVinesIfArpOutServRsps, wfVinesRtpNbrSvrName=wfVinesRtpNbrSvrName, wfVinesIfTrEndStation=wfVinesIfTrEndStation, wfVinesIfFrpEnable=wfVinesIfFrpEnable, wfVinesTrafficFilterRuleNumber=wfVinesTrafficFilterRuleNumber, wfVinesIfTable=wfVinesIfTable, wfVinesIfEchoInPkts=wfVinesIfEchoInPkts, wfVinesIfDescr=wfVinesIfDescr, wfVinesIfOutPkts=wfVinesIfOutPkts, wfVinesArpDelete=wfVinesArpDelete, wfVinesTrafficFilterEntry=wfVinesTrafficFilterEntry, wfVinesAggrStats=wfVinesAggrStats, wfVinesAggrOutArpServResps=wfVinesAggrOutArpServResps, wfVinesRtpRtTimeStamp=wfVinesRtpRtTimeStamp, wfVinesIf=wfVinesIf, wfVinesNameHost=wfVinesNameHost, wfVinesArp=wfVinesArp, wfVinesRtpNbrTable=wfVinesRtpNbrTable, wfVinesIfIcpInErrors=wfVinesIfIcpInErrors, wfVinesRtpNbr=wfVinesRtpNbr, wfVinesTrafficFilterTable=wfVinesTrafficFilterTable, wfVinesIfOutSeqRedirects=wfVinesIfOutSeqRedirects, wfVinesRtpNbrNumPaths=wfVinesRtpNbrNumPaths, wfVinesRtpNbrRemAdr=wfVinesRtpNbrRemAdr, wfVinesRtpNbrNumber=wfVinesRtpNbrNumber, wfVinesIfInMsgs=wfVinesIfInMsgs, wfVinesIfSeqArpOutAssgRsps=wfVinesIfSeqArpOutAssgRsps, wfVinesIfInLackRescError=wfVinesIfInLackRescError, wfVinesIfSyncPortNumber=wfVinesIfSyncPortNumber, wfVinesAggrOutPkts=wfVinesAggrOutPkts, wfVinesArpSubnetBlock=wfVinesArpSubnetBlock, wfVinesRtpRtGateSvrName=wfVinesRtpRtGateSvrName, wfVinesIfX25VCResetsIn=wfVinesIfX25VCResetsIn, wfVinesNameEntry=wfVinesNameEntry, wfVinesIfInErrs=wfVinesIfInErrs, wfVinesIfX25VCPktsOut=wfVinesIfX25VCPktsOut, wfVinesAggrInHopCountErrs=wfVinesAggrInHopCountErrs, wfVinesRtpNbrEntry=wfVinesRtpNbrEntry, wfVinesRtpNbrLocAdr=wfVinesRtpNbrLocAdr, wfVinesIpBcastHWM=wfVinesIpBcastHWM, wfVinesTrafficFilterReserved=wfVinesTrafficFilterReserved, wfVinesIfX25VCPktsAwaitAck=wfVinesIfX25VCPktsAwaitAck, wfVinesIfFRBcastDlci=wfVinesIfFRBcastDlci, wfVinesIfCfgAdr=wfVinesIfCfgAdr, wfVinesRtpRtIdle=wfVinesRtpRtIdle, wfVinesIfX25VCInErrs=wfVinesIfX25VCInErrs, wfVinesAggrBcastPkts=wfVinesAggrBcastPkts, wfVinesIfSlot=wfVinesIfSlot, wfVinesIfX25VCBytesAwaitAck=wfVinesIfX25VCBytesAwaitAck, wfVinesIfIcpInMetricNotifs=wfVinesIfIcpInMetricNotifs, wfVinesAggrOutIcpMetrics=wfVinesAggrOutIcpMetrics, wfVinesIfX25VCResetsOut=wfVinesIfX25VCResetsOut, wfVinesArpSubnetid=wfVinesArpSubnetid, wfVinesIfX25VCOutErrs=wfVinesIfX25VCOutErrs, wfVinesIfSplitHorizonDisable=wfVinesIfSplitHorizonDisable, wfVinesBaseSoloSlotMask=wfVinesBaseSoloSlotMask, wfVinesIfArpDisable=wfVinesIfArpDisable, wfVinesIfX25VCCct=wfVinesIfX25VCCct, wfVinesIfDelete=wfVinesIfDelete, wfVinesRtpNbrIfType=wfVinesRtpNbrIfType, wfVinesIfNumFwdEntries=wfVinesIfNumFwdEntries, wfVinesRtpRtSvrName=wfVinesRtpRtSvrName, wfVinesIpFromDodIP=wfVinesIpFromDodIP, wfVinesIfX25VCTable=wfVinesIfX25VCTable, wfVinesIfRtpGenerationDisable=wfVinesIfRtpGenerationDisable, wfVinesIfMux=wfVinesIfMux, wfVinesAggrInPkts=wfVinesAggrInPkts, wfVinesAggrOutNoRoutes=wfVinesAggrOutNoRoutes, wfVinesRtpNbrType=wfVinesRtpNbrType, wfVinesIfZeroHopDrops=wfVinesIfZeroHopDrops, wfVinesIfSeqArpOutServRsps=wfVinesIfSeqArpOutServRsps, wfVinesArpDisable=wfVinesArpDisable, wfVinesIfX25VCPktsIn=wfVinesIfX25VCPktsIn, wfVinesIp=wfVinesIp, wfVinesArpAssignDeniedPkts=wfVinesArpAssignDeniedPkts, wfVinesRtpNbrLocLine=wfVinesRtpNbrLocLine, wfVinesAggrInIcpMetrics=wfVinesAggrInIcpMetrics, wfVinesIfX25VC=wfVinesIfX25VC, wfVinesIpBcast=wfVinesIpBcast, wfVinesIfCostUsed=wfVinesIfCostUsed, wfVinesRtpNbrRtType=wfVinesRtpNbrRtType, wfVinesAggrOutIcpErrs=wfVinesAggrOutIcpErrs, wfVinesAggrOutEchos=wfVinesAggrOutEchos, wfVinesSeqRtpNbrSeqNumber=wfVinesSeqRtpNbrSeqNumber, wfVinesIfArpInErrors=wfVinesIfArpInErrors, wfVinesIfNumNonSeqNbrs=wfVinesIfNumNonSeqNbrs, wfVinesIpTotOut=wfVinesIpTotOut, wfVinesBaseSoloistSlot=wfVinesBaseSoloistSlot, wfVinesIfSeqRtpSent=wfVinesIfSeqRtpSent, wfVinesIfInPkts=wfVinesIfInPkts, wfVinesRtpNbrNetId=wfVinesRtpNbrNetId, wfVinesBase=wfVinesBase, wfVinesRtpRtIfType=wfVinesRtpRtIfType, wfVinesIfNumRoutes=wfVinesIfNumRoutes, wfVinesIfCfgCost=wfVinesIfCfgCost, wfVinesBaseRouterSeqNumber=wfVinesBaseRouterSeqNumber, wfVinesIpReass=wfVinesIpReass, wfVinesIfCost=wfVinesIfCost, wfVinesBaseNetworkSize=wfVinesBaseNetworkSize, wfVinesIfOutLackRescError=wfVinesIfOutLackRescError, wfVinesAggrFwdPkts=wfVinesAggrFwdPkts, wfVinesIfDisable=wfVinesIfDisable, wfVinesSeqRtpNbrState=wfVinesSeqRtpNbrState, wfVinesIpBad=wfVinesIpBad, wfVinesIfEchoOutPkts=wfVinesIfEchoOutPkts, wfVinesIfSeqRtpRecv=wfVinesIfSeqRtpRecv, wfVinesIfInSeqRedirects=wfVinesIfInSeqRedirects, wfVinesAggrOutRedirects=wfVinesAggrOutRedirects, wfVinesNameNetid=wfVinesNameNetid, wfVinesRtpNbrLocSlot=wfVinesRtpNbrLocSlot, wfVinesIfX25VCEntry=wfVinesIfX25VCEntry, wfVinesTrafficFilterCreate=wfVinesTrafficFilterCreate, wfVinesIfArpOutAssgRsps=wfVinesIfArpOutAssgRsps, wfVinesRtpRtMetric=wfVinesRtpRtMetric, wfVinesTrafficFilterCircuit=wfVinesTrafficFilterCircuit, wfVinesIfRemClientPrivDisable=wfVinesIfRemClientPrivDisable, wfVinesBaseUserNetid=wfVinesBaseUserNetid, wfVinesBaseState=wfVinesBaseState, wfVinesIfRedirectEnable=wfVinesIfRedirectEnable, wfVinesIfX25VCBytesIn=wfVinesIfX25VCBytesIn, wfVinesBaseRouterNetid=wfVinesBaseRouterNetid, wfVinesTrafficFilterStatus=wfVinesTrafficFilterStatus, wfVinesIpRouted=wfVinesIpRouted, wfVinesBaseDisable=wfVinesBaseDisable, wfVinesIfRtpSent=wfVinesIfRtpSent, wfVinesIfPermWanNbr=wfVinesIfPermWanNbr, wfVinesRtpRtLocLine=wfVinesRtpRtLocLine, wfVinesIfType=wfVinesIfType, wfVinesIfReassFails=wfVinesIfReassFails, wfVinesRtpRtGateHwAddr=wfVinesRtpRtGateHwAddr, wfVinesAggrInArpQueries=wfVinesAggrInArpQueries, wfVinesIfIcpOutErrorNotifs=wfVinesIfIcpOutErrorNotifs, wfVinesIfSeqArpInErrors=wfVinesIfSeqArpInErrors, wfVinesSeqRtpNbrNumber=wfVinesSeqRtpNbrNumber, wfVinesAggrInEchos=wfVinesAggrInEchos, wfVinesNameDisable=wfVinesNameDisable, wfVinesIfX25VCTotIn=wfVinesIfX25VCTotIn, wfVinesBaseHostSize=wfVinesBaseHostSize, wfVinesIfX25VCNumber=wfVinesIfX25VCNumber, wfVinesNameSubNetid=wfVinesNameSubNetid, wfVinesRtpRtNumber=wfVinesRtpRtNumber, wfVinesIfState=wfVinesIfState, wfVinesIfSTalkSplitHorizon=wfVinesIfSTalkSplitHorizon, wfVinesRtpRtNetid=wfVinesRtpRtNetid, wfVinesIfArpInQueries=wfVinesIfArpInQueries, wfVinesIfArpInAssgReqs=wfVinesIfArpInAssgReqs, wfVinesAggrInRedirects=wfVinesAggrInRedirects, wfVinesIfIcpOutMetricNotifs=wfVinesIfIcpOutMetricNotifs, wfVinesIpToDodIP=wfVinesIpToDodIP, wfVinesIfX25VCBytesOut=wfVinesIfX25VCBytesOut, wfVinesTrafficFilterCounter=wfVinesTrafficFilterCounter, wfVinesAggrInIcpErrs=wfVinesAggrInIcpErrs, wfVinesArpState=wfVinesArpState, wfVinesIfCct=wfVinesIfCct, wfVinesBaseRtpMode=wfVinesBaseRtpMode, wfVinesIfInRedirects=wfVinesIfInRedirects, wfVinesNameTable=wfVinesNameTable, wfVinesIfNumSeqNbrs=wfVinesIfNumSeqNbrs, wfVinesRtpRtGateNetid=wfVinesRtpRtGateNetid, wfVinesRtpRtSeqNumber=wfVinesRtpRtSeqNumber, wfVinesBaseLogFilter=wfVinesBaseLogFilter, wfVinesIfEntry=wfVinesIfEntry, wfVinesTrafficFilterEnable=wfVinesTrafficFilterEnable, wfVinesIfX25VCTotOut=wfVinesIfX25VCTotOut, wfVinesIpFrags=wfVinesIpFrags, wfVinesIfAdr=wfVinesIfAdr, wfVinesIfX25VCLine=wfVinesIfX25VCLine, wfVinesIfSeqArpInQueries=wfVinesIfSeqArpInQueries, wfVinesIpRoutedHWM=wfVinesIpRoutedHWM, wfVinesIfX25VCSession=wfVinesIfX25VCSession, wfVinesTrafficFilterFragment=wfVinesTrafficFilterFragment, wfVinesIfSMDSGroupAddress=wfVinesIfSMDSGroupAddress, wfVinesRtpRtType=wfVinesRtpRtType, wfVinesRtpRt=wfVinesRtpRt, wfVinesSeqRtpNbr=wfVinesSeqRtpNbr, wfVinesAggrInArpAssigns=wfVinesAggrInArpAssigns, wfVinesIfDodIpDisable=wfVinesIfDodIpDisable, wfVinesRtpRtLocSlot=wfVinesRtpRtLocSlot, wfVinesIfLine=wfVinesIfLine, wfVinesIfX25VCSlot=wfVinesIfX25VCSlot, wfVinesAggrInArpErrs=wfVinesAggrInArpErrs)
