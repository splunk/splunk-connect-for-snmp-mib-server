#
# PySNMP MIB module CANOPY-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CANOPY-SYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, IpAddress, Counter32, MibIdentifier, Integer32, TimeTicks, Unsigned32, ObjectIdentity, ModuleIdentity, NotificationType, Counter64, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Counter32", "MibIdentifier", "Integer32", "TimeTicks", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Counter64", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
motorola = MibIdentifier((1, 3, 6, 1, 4, 1, 17713))
p2p = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
p2mp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 5))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 8))
mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 12))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 22))
p2pTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1, 99))
iPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPAddress.setStatus('mandatory')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('mandatory')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('mandatory')
targetMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetMACAddress.setStatus('mandatory')
masterSlaveMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterSlaveMode.setStatus('mandatory')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('mandatory')
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regionCode.setStatus('mandatory')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("motorola-canopy-60mbps-backhaul", 0), ("motorola-canopy-60mbps-backhaul", 1), ("motorola-canopy-60mbps-backhaul", 2), ("motorola-canopy-30mbps-backhaul", 3), ("spare-1", 4), ("spare-2", 5), ("spare-3", 6), ("spare-4", 7), ("spare-5", 8), ("spare-6", 9), ("spare-7", 10), ("motorola-canopy-150mbps-backhaul", 11), ("motorola-canopy-300mbps-backhaul", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('mandatory')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('mandatory')
ethernetFibreSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFibreSupport.setStatus('mandatory')
frequencyVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("freq-5800-mhz", 0), ("freq-5400-mhz", 1), ("freq-4900-mhz", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyVariant.setStatus('mandatory')
targetRange = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetRange.setStatus('mandatory')
rangingMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto-0-40-km", 0), ("auto-0-100-km", 1), ("auto-0-200-km", 2), ("target-range", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rangingMode.setStatus('mandatory')
asymmetricTDD = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("symmetric-data-rate-1-to-1", 0), ("asymmetric-data-rate-2-to-1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asymmetricTDD.setStatus('mandatory')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('mandatory')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('mandatory')
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('mandatory')
range = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range.setStatus('mandatory')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('mandatory')
receiveChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveChannel.setStatus('mandatory')
transmitChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitChannel.setStatus('mandatory')
receiveModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("mod-acquisition", 0), ("mod-bpsk-0-63", 1), ("mod-qpsk-0-63-single", 2), ("mod-transient-1", 3), ("mod-qpsk-0-87-single", 4), ("mod-transient-2", 5), ("mod-16qam-0-63-single-a", 6), ("mod-transient-3", 7), ("mod-16qam-0-87-single", 8), ("mod-transient-5", 9), ("mod-64qam-0-75-single", 10), ("mod-transient-5", 11), ("mod-64qam-0-92-single", 12), ("mod-transient-6", 13), ("mod-256qam-0-81-single", 14), ("mod-16qam-0-63-single-b", 15), ("mod-16qam-0-63-dual", 16), ("mod-transient-7", 17), ("mod-16qam-0-87-dual", 18), ("mod-transient-8", 19), ("mod-64qam-0-75-dual", 20), ("mod-transient-9", 21), ("mod-64qam-0-92-dual", 22), ("mod-transient-10", 23), ("mod-256qam-0-81-dual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationMode.setStatus('mandatory')
transmitModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("mod-acquisition", 0), ("mod-bpsk-0-63", 1), ("mod-qpsk-0-63-single", 2), ("mod-transient-1", 3), ("mod-qpsk-0-87-single", 4), ("mod-transient-2", 5), ("mod-16qam-0-63-single-a", 6), ("mod-transient-3", 7), ("mod-16qam-0-87-single", 8), ("mod-transient-5", 9), ("mod-64qam-0-75-single", 10), ("mod-transient-5", 11), ("mod-64qam-0-92-single", 12), ("mod-transient-6", 13), ("mod-256qam-0-81-single", 14), ("mod-16qam-0-63-single-b", 15), ("mod-16qam-0-63-dual", 16), ("mod-transient-7", 17), ("mod-16qam-0-87-dual", 18), ("mod-transient-8", 19), ("mod-64qam-0-75-dual", 20), ("mod-transient-9", 21), ("mod-64qam-0-92-dual", 22), ("mod-transient-10", 23), ("mod-256qam-0-81-dual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulationMode.setStatus('mandatory')
receiveFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5875))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreq.setStatus('mandatory')
transmitFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5875))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreq.setStatus('mandatory')
signalStrengthRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatio.setStatus('mandatory')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("console-reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('mandatory')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('mandatory')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('mandatory')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('mandatory')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('mandatory')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('mandatory')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('mandatory')
dEPRECATEDencryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 22, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dEPRECATEDencryptionAlgorithm.setStatus('mandatory')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aes-rijndael", 1), ("aes-256-bit-rijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('mandatory')
dfsChannelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 1, 99, 1)).setObjects(("CANOPY-SYS-MIB", "receiveChannel"))
if mibBuilder.loadTexts: dfsChannelChangeTrap.setStatus('current')
dfsImpulsiveInterferenceDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 1, 99, 2)).setObjects(("CANOPY-SYS-MIB", "receiveChannel"))
if mibBuilder.loadTexts: dfsImpulsiveInterferenceDetectedTrap.setStatus('current')
mibBuilder.exportSymbols("CANOPY-SYS-MIB", subnetMask=subnetMask, regionCode=regionCode, motorola=motorola, secondarySoftwareVersion=secondarySoftwareVersion, dfsImpulsiveInterferenceDetectedTrap=dfsImpulsiveInterferenceDetectedTrap, vectorError=vectorError, masterSlaveMode=masterSlaveMode, transmitPower=transmitPower, pubStats=pubStats, iPAddress=iPAddress, range=range, receiveChannel=receiveChannel, receiveModulationMode=receiveModulationMode, receivePower=receivePower, targetRange=targetRange, maximumTransmitPower=maximumTransmitPower, productName=productName, transmitChannel=transmitChannel, transmitModulationMode=transmitModulationMode, asymmetricTDD=asymmetricTDD, licence=licence, rangingMode=rangingMode, configuration=configuration, frequencyVariant=frequencyVariant, systemReset=systemReset, softwareVersion=softwareVersion, ethernetFibreSupport=ethernetFibreSupport, signalStrengthRatio=signalStrengthRatio, dfsChannelChangeTrap=dfsChannelChangeTrap, aggregateDataRate=aggregateDataRate, p2pTraps=p2pTraps, phyStatus=phyStatus, transmitFreq=transmitFreq, p2mp=p2mp, phyControl=phyControl, productVariant=productVariant, transmitDataRate=transmitDataRate, hardwareVersion=hardwareVersion, gatewayIPAddress=gatewayIPAddress, receiveDataRate=receiveDataRate, linkLoss=linkLoss, p2p=p2p, dEPRECATEDencryptionAlgorithm=dEPRECATEDencryptionAlgorithm, encryption=encryption, encryptionAlgorithm=encryptionAlgorithm, versions=versions, bootVersion=bootVersion, mgmt=mgmt, targetMACAddress=targetMACAddress, receiveFreq=receiveFreq, reset=reset)
