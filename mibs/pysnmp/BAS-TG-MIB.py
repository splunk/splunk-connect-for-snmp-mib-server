#
# PySNMP MIB module BAS-TG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-TG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
basTrafGen, = mibBuilder.importSymbols("BAS-MIB", "basTrafGen")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Unsigned32, Counter32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, MibIdentifier, Integer32, Counter64, IpAddress, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Counter32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "MibIdentifier", "Integer32", "Counter64", "IpAddress", "Bits", "Gauge32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
basTrafGenMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1))
if mibBuilder.loadTexts: basTrafGenMIB.setLastUpdated('9902031415Z')
if mibBuilder.loadTexts: basTrafGenMIB.setOrganization('Broadband Access Systems, Inc.')
basTrafGenTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1), )
if mibBuilder.loadTexts: basTrafGenTable.setStatus('current')
basTrafGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1), ).setIndexNames((0, "BAS-TG-MIB", "basTrafGenIndex"))
if mibBuilder.loadTexts: basTrafGenEntry.setStatus('current')
basTrafGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenIndex.setStatus('current')
basTrafGenTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basTrafIp", 1), ("basTrafUdp", 2), ("basTrafTcp", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenTransport.setStatus('current')
basTrafGenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 3), Integer32().clone(99)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenPort.setStatus('current')
basTrafGenStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basTrafStart", 1), ("basTrafStop", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenStart.setStatus('current')
basTrafGenRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basTranMax", 1), ("basTran1sec", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenRate.setStatus('current')
basTrafGenDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenDest.setStatus('current')
basTrafGenSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenSrc.setStatus('current')
basTrafGenIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenIn.setStatus('current')
basTrafGenOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenOut.setStatus('current')
basTrafGenSeqError = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenSeqError.setStatus('current')
basTrafGenSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenSize.setStatus('current')
basTrafGenPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenPattern.setStatus('current')
basTrafGenReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenReset.setStatus('current')
basTrafGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenStatus.setStatus('current')
mibBuilder.exportSymbols("BAS-TG-MIB", basTrafGenIndex=basTrafGenIndex, basTrafGenStart=basTrafGenStart, basTrafGenTable=basTrafGenTable, basTrafGenEntry=basTrafGenEntry, basTrafGenDest=basTrafGenDest, basTrafGenSrc=basTrafGenSrc, basTrafGenStatus=basTrafGenStatus, basTrafGenOut=basTrafGenOut, basTrafGenTransport=basTrafGenTransport, basTrafGenIn=basTrafGenIn, basTrafGenReset=basTrafGenReset, basTrafGenSeqError=basTrafGenSeqError, basTrafGenRate=basTrafGenRate, basTrafGenSize=basTrafGenSize, basTrafGenMIB=basTrafGenMIB, basTrafGenPattern=basTrafGenPattern, PYSNMP_MODULE_ID=basTrafGenMIB, basTrafGenPort=basTrafGenPort)
