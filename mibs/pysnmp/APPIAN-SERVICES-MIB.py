#
# PySNMP MIB module APPIAN-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-SERVICES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcOpStatus, AcPortNumber, acServices, AcNodeId, AcSlotNumber, AcAdminStatus = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcOpStatus", "AcPortNumber", "acServices", "AcNodeId", "AcSlotNumber", "AcAdminStatus")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibIdentifier, ModuleIdentity, Gauge32, iso, Counter64, TimeTicks, ObjectIdentity, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Gauge32", "iso", "Counter64", "TimeTicks", "ObjectIdentity", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "NotificationType")
TruthValue, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "MacAddress")
acServicesCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1))
acServicesCommon.setRevisions(('1900-01-31 00:00',))
if mibBuilder.loadTexts: acServicesCommon.setLastUpdated('0001310000Z')
if mibBuilder.loadTexts: acServicesCommon.setOrganization('Appian Communications, Inc.')
class AcQueueWeights(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class AcQueueBufferingCapacity(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class AcClassMapping(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

acServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1), )
if mibBuilder.loadTexts: acServiceTable.setStatus('current')
acServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acServiceNodeId"), (0, "APPIAN-SERVICES-MIB", "acServiceSlot"), (0, "APPIAN-SERVICES-MIB", "acServicePort"), (0, "APPIAN-SERVICES-MIB", "acServiceChannel"))
if mibBuilder.loadTexts: acServiceEntry.setStatus('current')
acServiceNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceNodeId.setStatus('current')
acServiceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceSlot.setStatus('current')
acServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServicePort.setStatus('current')
acServiceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceChannel.setStatus('current')
acServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 5), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceAdminStatus.setStatus('current')
acServiceOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 6), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceOpStatus.setStatus('current')
acServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ias", 1), ("tls", 2))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceType.setStatus('current')
acServiceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceVlanId.setStatus('current')
acServiceTrunkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceTrunkNumber.setStatus('current')
acServiceQosTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 10), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceQosTemplate.setStatus('current')
acServiceGBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceGBR.setStatus('current')
acServiceMBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceMBR.setStatus('current')
acServiceResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceResetStats.setStatus('current')
acServiceUpstreamBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceUpstreamBuffCapWeight.setStatus('current')
acServiceDownstreamBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceDownstreamBuffCapWeight.setStatus('current')
acServiceLocalBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceLocalBuffCapWeight.setStatus('current')
acServiceBufferPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceBufferPool.setStatus('current')
acServiceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4), )
if mibBuilder.loadTexts: acServiceStatTable.setStatus('current')
acServiceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acServiceStatNodeId"), (0, "APPIAN-SERVICES-MIB", "acServiceStatSlot"), (0, "APPIAN-SERVICES-MIB", "acServiceStatPort"), (0, "APPIAN-SERVICES-MIB", "acServiceStatChannel"), (0, "APPIAN-SERVICES-MIB", "acServiceStatQueue"))
if mibBuilder.loadTexts: acServiceStatEntry.setStatus('current')
acServiceStatNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatNodeId.setStatus('current')
acServiceStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatSlot.setStatus('current')
acServiceStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatPort.setStatus('current')
acServiceStatChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatChannel.setStatus('current')
acServiceStatQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatQueue.setStatus('current')
acServiceStatUpstreamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamFrames.setStatus('current')
acServiceStatUpstreamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamBytes.setStatus('current')
acServiceStatUpstreamDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamDroppedFrames.setStatus('current')
acServiceStatUpstreamDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamDroppedBytes.setStatus('current')
acServiceStatUpstreamUnexpectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamUnexpectedFrames.setStatus('current')
acServiceStatDownstreamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamFrames.setStatus('current')
acServiceStatDownstreamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamBytes.setStatus('current')
acServiceStatDownstreamDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamDroppedFrames.setStatus('current')
acServiceStatDownstreamDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamDroppedBytes.setStatus('current')
acServiceStatDownstreamUnexpectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamUnexpectedFrames.setStatus('current')
acIas = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2))
acIasTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1), )
if mibBuilder.loadTexts: acIasTable.setStatus('current')
acIasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acIasNodeId"), (0, "APPIAN-SERVICES-MIB", "acIasSlot"), (0, "APPIAN-SERVICES-MIB", "acIasPort"), (0, "APPIAN-SERVICES-MIB", "acIasChannel"))
if mibBuilder.loadTexts: acIasEntry.setStatus('current')
acIasNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasNodeId.setStatus('current')
acIasSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasSlot.setStatus('current')
acIasPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasPort.setStatus('current')
acIasChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasChannel.setStatus('current')
acIasDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasDlci.setStatus('current')
acIasRespondToArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasRespondToArp.setStatus('current')
acIasRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasRemoteIpAddress.setStatus('current')
acIasCpeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasCpeIpAddress.setStatus('current')
acIasCpeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIasCpeMacAddress.setStatus('current')
acIasCpeEncapsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("learning", 1), ("enet", 2), ("snap", 3))).clone('learning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasCpeEncapsMode.setStatus('current')
acIasPerformInverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasPerformInverseArp.setStatus('current')
acTls = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3))
acTlsTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1), )
if mibBuilder.loadTexts: acTlsTable.setStatus('current')
acTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acTlsNodeId"), (0, "APPIAN-SERVICES-MIB", "acTlsSlot"), (0, "APPIAN-SERVICES-MIB", "acTlsPort"), (0, "APPIAN-SERVICES-MIB", "acTlsChannel"))
if mibBuilder.loadTexts: acTlsEntry.setStatus('current')
acTlsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsNodeId.setStatus('current')
acTlsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsSlot.setStatus('current')
acTlsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsPort.setStatus('current')
acTlsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsChannel.setStatus('current')
acTlsTlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsTlanId.setStatus('current')
acTlsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsServiceId.setStatus('current')
acTlsPointToPointEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsPointToPointEnable.setStatus('current')
acTlsServiceIdSharingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsServiceIdSharingEnable.setStatus('current')
acQosTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2), )
if mibBuilder.loadTexts: acQosTable.setStatus('current')
acQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acQosNodeId"), (0, "APPIAN-SERVICES-MIB", "acQosTemplateNumber"))
if mibBuilder.loadTexts: acQosEntry.setStatus('current')
acQosNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acQosNodeId.setStatus('current')
acQosTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acQosTemplateNumber.setStatus('current')
acQosAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 3), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosAdminStatus.setStatus('current')
acQosTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosTemplateName.setStatus('current')
acQosQueueWeights = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 5), AcQueueWeights()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosQueueWeights.setStatus('current')
acQosClassMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosClassMapping.setStatus('current')
acQosQueueBuffCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 7), AcQueueBufferingCapacity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosQueueBuffCaps.setStatus('current')
acClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3), )
if mibBuilder.loadTexts: acClassMapTable.setStatus('current')
acClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acClassMapNumber"))
if mibBuilder.loadTexts: acClassMapEntry.setStatus('current')
acClassMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acClassMapNumber.setStatus('current')
acClassMapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 2), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapAdminStatus.setStatus('current')
acClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapName.setStatus('current')
acClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("iptos", 1), ("mpls", 2), ("dot1p", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapType.setStatus('current')
acClassMapMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 5), AcClassMapping()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapMapping.setStatus('current')
acServiceTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 8, 0))
acServiceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 8, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SERVICES-MIB", "acServiceNodeId"), ("APPIAN-SERVICES-MIB", "acServiceSlot"), ("APPIAN-SERVICES-MIB", "acServicePort"), ("APPIAN-SERVICES-MIB", "acServiceChannel"), ("APPIAN-SERVICES-MIB", "acServiceType"))
if mibBuilder.loadTexts: acServiceUpTrap.setStatus('current')
acServiceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 8, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SERVICES-MIB", "acServiceNodeId"), ("APPIAN-SERVICES-MIB", "acServiceSlot"), ("APPIAN-SERVICES-MIB", "acServicePort"), ("APPIAN-SERVICES-MIB", "acServiceChannel"), ("APPIAN-SERVICES-MIB", "acServiceType"))
if mibBuilder.loadTexts: acServiceDownTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-SERVICES-MIB", acIasPerformInverseArp=acIasPerformInverseArp, acServiceSlot=acServiceSlot, acTlsPointToPointEnable=acTlsPointToPointEnable, acServiceTrunkNumber=acServiceTrunkNumber, acClassMapNumber=acClassMapNumber, acServicesCommon=acServicesCommon, acServiceTraps=acServiceTraps, acServiceStatSlot=acServiceStatSlot, acIasCpeIpAddress=acIasCpeIpAddress, acServiceStatEntry=acServiceStatEntry, acServiceStatDownstreamBytes=acServiceStatDownstreamBytes, acQosTemplateNumber=acQosTemplateNumber, acClassMapTable=acClassMapTable, acTlsEntry=acTlsEntry, acIasNodeId=acIasNodeId, acServiceLocalBuffCapWeight=acServiceLocalBuffCapWeight, acServiceDownstreamBuffCapWeight=acServiceDownstreamBuffCapWeight, acTlsPort=acTlsPort, acServiceStatUpstreamDroppedFrames=acServiceStatUpstreamDroppedFrames, acTlsTlanId=acTlsTlanId, acServiceType=acServiceType, acServiceDownTrap=acServiceDownTrap, acServiceQosTemplate=acServiceQosTemplate, acServiceAdminStatus=acServiceAdminStatus, acClassMapEntry=acClassMapEntry, acTlsNodeId=acTlsNodeId, acServiceStatDownstreamUnexpectedFrames=acServiceStatDownstreamUnexpectedFrames, acServiceBufferPool=acServiceBufferPool, acServiceChannel=acServiceChannel, acServicePort=acServicePort, acIasRespondToArp=acIasRespondToArp, acClassMapMapping=acClassMapMapping, acServiceNodeId=acServiceNodeId, acQosClassMapping=acQosClassMapping, acQosEntry=acQosEntry, acQosNodeId=acQosNodeId, acServiceStatUpstreamUnexpectedFrames=acServiceStatUpstreamUnexpectedFrames, acServiceGBR=acServiceGBR, acIasCpeEncapsMode=acIasCpeEncapsMode, acIasDlci=acIasDlci, acTlsSlot=acTlsSlot, acServiceStatDownstreamFrames=acServiceStatDownstreamFrames, acClassMapName=acClassMapName, acServiceStatUpstreamBytes=acServiceStatUpstreamBytes, acIasTable=acIasTable, acServiceTable=acServiceTable, acServiceStatNodeId=acServiceStatNodeId, acServiceStatChannel=acServiceStatChannel, acServiceResetStats=acServiceResetStats, acServiceUpstreamBuffCapWeight=acServiceUpstreamBuffCapWeight, acIasChannel=acIasChannel, acIasEntry=acIasEntry, acServiceStatQueue=acServiceStatQueue, acQosQueueBuffCaps=acQosQueueBuffCaps, acTlsTable=acTlsTable, PYSNMP_MODULE_ID=acServicesCommon, acClassMapAdminStatus=acClassMapAdminStatus, acServiceVlanId=acServiceVlanId, acClassMapType=acClassMapType, AcQueueBufferingCapacity=AcQueueBufferingCapacity, acIasSlot=acIasSlot, acServiceStatDownstreamDroppedBytes=acServiceStatDownstreamDroppedBytes, acQosQueueWeights=acQosQueueWeights, acIasRemoteIpAddress=acIasRemoteIpAddress, acTlsChannel=acTlsChannel, acServiceMBR=acServiceMBR, acServiceUpTrap=acServiceUpTrap, acQosTable=acQosTable, acServiceStatDownstreamDroppedFrames=acServiceStatDownstreamDroppedFrames, acQosTemplateName=acQosTemplateName, acServiceStatTable=acServiceStatTable, acIasCpeMacAddress=acIasCpeMacAddress, acQosAdminStatus=acQosAdminStatus, acTlsServiceId=acTlsServiceId, acIasPort=acIasPort, AcQueueWeights=AcQueueWeights, acServiceOpStatus=acServiceOpStatus, acServiceStatUpstreamFrames=acServiceStatUpstreamFrames, acServiceStatUpstreamDroppedBytes=acServiceStatUpstreamDroppedBytes, acIas=acIas, acTls=acTls, acServiceEntry=acServiceEntry, AcClassMapping=AcClassMapping, acTlsServiceIdSharingEnable=acTlsServiceIdSharingEnable, acServiceStatPort=acServiceStatPort)
