#
# PySNMP MIB module NMS-553-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-553-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:11:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
gdc, = mibBuilder.importSymbols("GDCCMN-MIB", "gdc")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, Unsigned32, Counter32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ObjectIdentity, ModuleIdentity, Gauge32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Unsigned32", "Counter32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ObjectIdentity", "ModuleIdentity", "Gauge32", "MibIdentifier", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
nms553 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7))
nms553Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 1))
nms553DS0Allocation = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 2))
nms553Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 3))
nms553DteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 4))
nms553Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 5))
nms553Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 6))
nms553Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7))
nms553AlarmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 8))
nms553Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 9))
nms553MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553MIBversion.setStatus('mandatory')
nms553VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 1, 2), )
if mibBuilder.loadTexts: nms553VersionTable.setStatus('mandatory')
nms553VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 1, 2, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553VersionIndex"))
if mibBuilder.loadTexts: nms553VersionEntry.setStatus('mandatory')
nms553VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553VersionIndex.setStatus('mandatory')
nms553FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553FirmwareRev.setStatus('mandatory')
nms553DS0AllocationSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 1), )
if mibBuilder.loadTexts: nms553DS0AllocationSchemeTable.setStatus('mandatory')
nms553DS0AllocationSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 1, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553DS0AllocationSchemeIndex"))
if mibBuilder.loadTexts: nms553DS0AllocationSchemeEntry.setStatus('mandatory')
nms553DS0AllocationSchemeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553DS0AllocationSchemeIndex.setStatus('mandatory')
nms553DS0AllocationScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("consecutive", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DS0AllocationScheme.setStatus('mandatory')
nms553DS0AllocationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 2), )
if mibBuilder.loadTexts: nms553DS0AllocationConfigTable.setStatus('mandatory')
nms553DS0AllocationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 2, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553DS0AllocationConfigIndex"))
if mibBuilder.loadTexts: nms553DS0AllocationConfigEntry.setStatus('mandatory')
nms553DS0AllocationConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553DS0AllocationConfigIndex.setStatus('mandatory')
nms553DS0AllocationBaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nx56k", 1), ("nx64k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DS0AllocationBaseRate.setStatus('mandatory')
nms553DS0AllocationStartingDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DS0AllocationStartingDS0.setStatus('mandatory')
nms553DS0AllocationNumberOfDS0s = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DS0AllocationNumberOfDS0s.setStatus('mandatory')
nms553DS0AllocationInbandDccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("embedded", 2), ("dccDs0", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DS0AllocationInbandDccMode.setStatus('mandatory')
nms553ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1), )
if mibBuilder.loadTexts: nms553ChannelConfigTable.setStatus('mandatory')
nms553ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553ChannelConfigIndex"))
if mibBuilder.loadTexts: nms553ChannelConfigEntry.setStatus('mandatory')
nms553ChannelConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553ChannelConfigIndex.setStatus('mandatory')
nms553ChannelSplitTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelSplitTiming.setStatus('mandatory')
nms553ChannelChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("v35", 2), ("eia530", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553ChannelChannelType.setStatus('mandatory')
nms553ChannelClockInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txClockNormRxClockNorm", 1), ("txClockNormRxClockInvert", 2), ("txClockInvertRxClockNorm", 3), ("txClockInvertRxClockInvert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelClockInvert.setStatus('mandatory')
nms553ChannelDataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txDataNormRxDataNorm", 1), ("txDataNormRxDataInvert", 2), ("txDataInvertRxDataNorm", 3), ("txDataInvertRxDataInvert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelDataInvert.setStatus('mandatory')
nms553ChannelLocalDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("followsSignal", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelLocalDCD.setStatus('mandatory')
nms553ChannelLocalDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("followsSignal", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelLocalDSR.setStatus('mandatory')
nms553ChannelFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txRtsRxDcd", 1), ("txRtsRxDsr", 2), ("txDtrRxDcd", 3), ("txDtrRxDsr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelFlowControl.setStatus('mandatory')
nms553ChannelRTSCTSControl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ctsDelay10ms", 1), ("ctsOn", 2), ("ctsDelayStandard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelRTSCTSControl.setStatus('mandatory')
nms553ChannelEIAtestLeads = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelEIAtestLeads.setStatus('mandatory')
nms553ChannelInbandLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelInbandLoop.setStatus('mandatory')
nms553ChannelInbandLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("pn127", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553ChannelInbandLoopCode.setStatus('mandatory')
nms553ChannelInbandLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable10Min", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelInbandLoopdown.setStatus('mandatory')
nms553ChannelControlModeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ChannelControlModeIdle.setStatus('mandatory')
nms553NetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2), )
if mibBuilder.loadTexts: nms553NetworkConfigTable.setStatus('mandatory')
nms553NetworkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553NetworkConfigIndex"))
if mibBuilder.loadTexts: nms553NetworkConfigEntry.setStatus('mandatory')
nms553NetworkConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553NetworkConfigIndex.setStatus('mandatory')
nms553NetworkAdminLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("manEsf", 2), ("manD4", 3), ("unframed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkAdminLineType.setStatus('mandatory')
nms553NetworkOperLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manEsf", 1), ("manD4", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553NetworkOperLineType.setStatus('mandatory')
nms553NetworkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("dsx1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkInterfaceType.setStatus('mandatory')
nms553NetworkPreequalization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("preeq130", 2), ("preeq260", 3), ("preeq390", 4), ("preeq530", 5), ("preeq655", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkPreequalization.setStatus('mandatory')
nms553NetworkAdminLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("man00dB", 2), ("man75dB", 3), ("man150dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkAdminLineBuildout.setStatus('mandatory')
nms553NetworkOperLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx00dB", 1), ("tx75dB", 2), ("tx150dB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553NetworkOperLineBuildout.setStatus('mandatory')
nms553NetworkOnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inhibit", 1), ("max15zeros", 2), ("max39zeros", 3), ("restrict8XNplus1", 4), ("min1in8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkOnesDensity.setStatus('mandatory')
nms553NetworkTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("receive", 1), ("cascade", 2), ("internal", 3), ("station", 4), ("extChannelClkA", 5), ("extChannelClkB", 6), ("extChannelClkC", 7), ("composite", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkTransmitClockSource.setStatus('mandatory')
nms553NetworkFallbackClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receive", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkFallbackClockSource.setStatus('mandatory')
nms553NetworkFDLdcc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkFDLdcc.setStatus('mandatory')
nms553NetworkAISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkAISLoopdown.setStatus('mandatory')
nms553NetworkInbandFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("framed", 1), ("unframed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkInbandFrame.setStatus('mandatory')
nms553NetworkLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkLoopbackConfig.setStatus('mandatory')
nms553NetworkLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nms553B8ZS", 1), ("nms553AMI", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkLineCoding.setStatus('mandatory')
nms553NetworkFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nms553Fdl-none", 1), ("nms553Ansi-T1-403", 2), ("nms553Att-54016", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553NetworkFdl.setStatus('mandatory')
nms553ConfigurationSave = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 7, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("network", 1), ("channel", 2), ("both", 3), ("norm", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ConfigurationSave.setStatus('mandatory')
nms553DteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 4, 1), )
if mibBuilder.loadTexts: nms553DteStatusTable.setStatus('mandatory')
nms553DteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 4, 1, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553DteStatusIndex"))
if mibBuilder.loadTexts: nms553DteStatusEntry.setStatus('mandatory')
nms553DteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553DteStatusIndex.setStatus('mandatory')
nms553DteStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553DteStat.setStatus('mandatory')
nms553DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1), )
if mibBuilder.loadTexts: nms553DiagTable.setStatus('mandatory')
nms553DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553DiagIndex"))
if mibBuilder.loadTexts: nms553DiagEntry.setStatus('mandatory')
nms553DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553DiagIndex.setStatus('mandatory')
nms553DiagTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("testTime30Secs", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("noLimit", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DiagTestDuration.setStatus('mandatory')
nms553DiagProgPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DiagProgPattern.setStatus('mandatory')
nms553DiagBeginSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unit511Pattern", 1), ("unit2047Pattern", 2), ("unitQRSPattern", 3), ("unitProgPattern", 4), ("dsu511Pattern", 5), ("dsu2047Pattern", 6), ("dsuQRSPattern", 7), ("dsuProgPattern", 8), ("noselftestrunning", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DiagBeginSelfTest.setStatus('mandatory')
nms553DiagBeginLoopTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("localLoopback", 1), ("digitalLoopback", 2), ("remoteDigitalLoopback", 3), ("nolooptestrunning", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DiagBeginLoopTest.setStatus('mandatory')
nms553DiagTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553DiagTestResults.setStatus('mandatory')
nms553DiagResetTestToNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DiagResetTestToNormal.setStatus('mandatory')
nms553DiagTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTestinProgress", 1), ("unitSelfTest", 2), ("dsuSelfTest", 3), ("localLoopback", 4), ("digitalLoopback", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553DiagTestStatus.setStatus('mandatory')
nms553MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1), )
if mibBuilder.loadTexts: nms553MaintenanceTable.setStatus('mandatory')
nms553MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553MaintenanceIndex"))
if mibBuilder.loadTexts: nms553MaintenanceEntry.setStatus('mandatory')
nms553MaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553MaintenanceIndex.setStatus('mandatory')
nms553LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553LedStatus.setStatus('mandatory')
nms553SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553SoftReset.setStatus('mandatory')
nms553DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("factoryDefault", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553DefaultInit.setStatus('mandatory')
nms553FrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553FrontPanel.setStatus('mandatory')
nms553ProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nms553d1", 1), ("nms553d1ifp", 2), ("nms553d3ifp", 3), ("nms553c", 4), ("nms553cifp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553ProductType.setStatus('mandatory')
nms553ResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ResetStatistics.setStatus('mandatory')
nms553ValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553ValidIntervals.setStatus('mandatory')
nms553CascadePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CascadePresent.setStatus('mandatory')
nms553ReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 43))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553ReceiveLevel.setStatus('mandatory')
nms553AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1))
nms553NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 1))
nms553DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 2))
nms553PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 3))
nms553NvRamCorrupt = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 4))
nms553UnitFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 5))
nms553TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 6))
nms553StatusChange = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 7))
nms553UnsolicitedTest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 8))
nms553LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 9))
nms553LossOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 10))
nms553AlarmIndicationSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 11))
nms553ReceivedYellow = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 12))
nms553UnavailableSignalState = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 13))
nms553ExcessiveZeros = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 14))
nms553LowAverageDensity = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 15))
nms553ControlledSlips = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 16))
nms553BipolarViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 17))
nms553CrcErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 1, 18))
nms553AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 2), )
if mibBuilder.loadTexts: nms553AlarmConfigTable.setStatus('mandatory')
nms553AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 2, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553AlarmConfigIndex"), (0, "NMS-553-MIB", "nms553AlarmConfigIdentifier"))
if mibBuilder.loadTexts: nms553AlarmConfigEntry.setStatus('mandatory')
nms553AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmConfigIndex.setStatus('mandatory')
nms553AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmConfigIdentifier.setStatus('mandatory')
nms553AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last1min", 3), ("last1hr", 4), ("infinite", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553AlarmCountWindow.setStatus('mandatory')
nms553AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("thresGT10", 1), ("thresGT100", 2), ("thresGT1000", 3), ("thresGT10000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553AlarmCountThreshold.setStatus('mandatory')
nms553AlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1), )
if mibBuilder.loadTexts: nms553AlarmHistoryTable.setStatus('mandatory')
nms553AlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553AlarmHistoryIndex"), (0, "NMS-553-MIB", "nms553AlarmHistoryIdentifier"))
if mibBuilder.loadTexts: nms553AlarmHistoryEntry.setStatus('mandatory')
nms553AlarmHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmHistoryIndex.setStatus('mandatory')
nms553AlarmHistoryIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmHistoryIdentifier.setStatus('mandatory')
nms553AlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmCount.setStatus('mandatory')
nms553AlarmFirstOccurrenceHours = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmFirstOccurrenceHours.setStatus('mandatory')
nms553AlarmFirstOccurrenceMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmFirstOccurrenceMinutes.setStatus('mandatory')
nms553AlarmFirstOccurrenceSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmFirstOccurrenceSeconds.setStatus('mandatory')
nms553AlarmFirstOccurrenceMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmFirstOccurrenceMonth.setStatus('mandatory')
nms553AlarmFirstOccurrenceDay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmFirstOccurrenceDay.setStatus('mandatory')
nms553AlarmFirstOccurrenceYear = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmFirstOccurrenceYear.setStatus('mandatory')
nms553AlarmLastOccurrenceHours = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmLastOccurrenceHours.setStatus('mandatory')
nms553AlarmLastOccurrenceMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmLastOccurrenceMinutes.setStatus('mandatory')
nms553AlarmLastOccurrenceSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmLastOccurrenceSeconds.setStatus('mandatory')
nms553AlarmLastOccurrenceMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmLastOccurrenceMonth.setStatus('mandatory')
nms553AlarmLastOccurrenceDay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmLastOccurrenceDay.setStatus('mandatory')
nms553AlarmLastOccurrenceYear = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmLastOccurrenceYear.setStatus('mandatory')
nms553AlarmMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2), )
if mibBuilder.loadTexts: nms553AlarmMaintenanceTable.setStatus('mandatory')
nms553AlarmMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553AlarmMaintenanceIndex"))
if mibBuilder.loadTexts: nms553AlarmMaintenanceEntry.setStatus('mandatory')
nms553AlarmMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553AlarmMaintenanceIndex.setStatus('mandatory')
nms553ClearAlarmHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553ClearAlarmHistory.setStatus('mandatory')
nms553RTCHours = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553RTCHours.setStatus('mandatory')
nms553RTCMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553RTCMinutes.setStatus('mandatory')
nms553RTCSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553RTCSeconds.setStatus('mandatory')
nms553RTCMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553RTCMonth.setStatus('mandatory')
nms553RTCDay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553RTCDay.setStatus('mandatory')
nms553RTCYear = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms553RTCYear.setStatus('mandatory')
nms553TimeOfLastAlarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 8, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TimeOfLastAlarmClear.setStatus('mandatory')
nms553CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1), )
if mibBuilder.loadTexts: nms553CurrentTable.setStatus('mandatory')
nms553CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553CurrentIndex"))
if mibBuilder.loadTexts: nms553CurrentEntry.setStatus('mandatory')
nms553CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CurrentIndex.setStatus('mandatory')
nms553CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CurrentESs.setStatus('mandatory')
nms553CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CurrentSESs.setStatus('mandatory')
nms553CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CurrentBESs.setStatus('mandatory')
nms553CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CurrentUASs.setStatus('mandatory')
nms553CurrentLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CurrentLOFCs.setStatus('mandatory')
nms553CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553CurrentCSSs.setStatus('mandatory')
nms553IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2), )
if mibBuilder.loadTexts: nms553IntervalTable.setStatus('mandatory')
nms553IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553IntervalIndex"), (0, "NMS-553-MIB", "nms553IntervalNumber"))
if mibBuilder.loadTexts: nms553IntervalEntry.setStatus('mandatory')
nms553IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalIndex.setStatus('mandatory')
nms553IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalNumber.setStatus('mandatory')
nms553IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalESs.setStatus('mandatory')
nms553IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalSESs.setStatus('mandatory')
nms553IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalBESs.setStatus('mandatory')
nms553IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalUASs.setStatus('mandatory')
nms553IntervalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalLOFCs.setStatus('mandatory')
nms553IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553IntervalCSSs.setStatus('mandatory')
nms553TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3), )
if mibBuilder.loadTexts: nms553TotalTable.setStatus('mandatory')
nms553TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1), ).setIndexNames((0, "NMS-553-MIB", "nms553TotalIndex"))
if mibBuilder.loadTexts: nms553TotalEntry.setStatus('mandatory')
nms553TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TotalIndex.setStatus('mandatory')
nms553TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TotalESs.setStatus('mandatory')
nms553TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TotalSESs.setStatus('mandatory')
nms553TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TotalBESs.setStatus('mandatory')
nms553TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TotalUASs.setStatus('mandatory')
nms553TotalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TotalLOFCs.setStatus('mandatory')
nms553TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 7, 9, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms553TotalCSSs.setStatus('mandatory')
mibBuilder.exportSymbols("NMS-553-MIB", nms553CurrentESs=nms553CurrentESs, nms553IntervalUASs=nms553IntervalUASs, nms553RTCSeconds=nms553RTCSeconds, nms553AlarmFirstOccurrenceMonth=nms553AlarmFirstOccurrenceMonth, nms553IntervalEntry=nms553IntervalEntry, nms553DS0AllocationConfigEntry=nms553DS0AllocationConfigEntry, nms553ChannelLocalDSR=nms553ChannelLocalDSR, nms553LowAverageDensity=nms553LowAverageDensity, nms553DiagProgPattern=nms553DiagProgPattern, nms553FrontPanel=nms553FrontPanel, nms553NoResponseAlm=nms553NoResponseAlm, nms553CurrentSESs=nms553CurrentSESs, nms553CurrentLOFCs=nms553CurrentLOFCs, nms553CurrentCSSs=nms553CurrentCSSs, nms553DiagTestResults=nms553DiagTestResults, nms553AlarmHistory=nms553AlarmHistory, nms553MIBversion=nms553MIBversion, nms553TotalTable=nms553TotalTable, nms553DS0AllocationConfigIndex=nms553DS0AllocationConfigIndex, nms553DS0AllocationSchemeTable=nms553DS0AllocationSchemeTable, nms553NetworkFDLdcc=nms553NetworkFDLdcc, nms553IntervalTable=nms553IntervalTable, nms553IntervalIndex=nms553IntervalIndex, nms553AlarmMaintenanceIndex=nms553AlarmMaintenanceIndex, nms553DteStat=nms553DteStat, nms553ChannelConfigTable=nms553ChannelConfigTable, nms553DS0Allocation=nms553DS0Allocation, nms553Performance=nms553Performance, nms553AlarmMaintenanceEntry=nms553AlarmMaintenanceEntry, nms553IntervalNumber=nms553IntervalNumber, nms553StatusChange=nms553StatusChange, nms553DS0AllocationScheme=nms553DS0AllocationScheme, nms553AlarmConfigIdentifier=nms553AlarmConfigIdentifier, nms553ChannelDataInvert=nms553ChannelDataInvert, nms553NetworkInbandFrame=nms553NetworkInbandFrame, nms553VersionTable=nms553VersionTable, nms553IntervalSESs=nms553IntervalSESs, nms553NetworkConfigEntry=nms553NetworkConfigEntry, nms553ChannelInbandLoopCode=nms553ChannelInbandLoopCode, nms553CrcErrors=nms553CrcErrors, nms553ClearAlarmHistory=nms553ClearAlarmHistory, nms553AlarmMaintenanceTable=nms553AlarmMaintenanceTable, nms553NvRamCorrupt=nms553NvRamCorrupt, nms553NetworkAdminLineType=nms553NetworkAdminLineType, nms553DS0AllocationInbandDccMode=nms553DS0AllocationInbandDccMode, nms553Alarms=nms553Alarms, nms553MaintenanceTable=nms553MaintenanceTable, nms553AlarmFirstOccurrenceYear=nms553AlarmFirstOccurrenceYear, nms553LossOfFrame=nms553LossOfFrame, nms553NetworkInterfaceType=nms553NetworkInterfaceType, nms553AlarmHistoryIdentifier=nms553AlarmHistoryIdentifier, nms553TimeOfLastAlarmClear=nms553TimeOfLastAlarmClear, nms553UnsolicitedTest=nms553UnsolicitedTest, nms553DS0AllocationSchemeIndex=nms553DS0AllocationSchemeIndex, nms553ChannelConfigIndex=nms553ChannelConfigIndex, nms553DteStatusEntry=nms553DteStatusEntry, nms553DiagTestDuration=nms553DiagTestDuration, nms553LossOfSignal=nms553LossOfSignal, nms553CurrentIndex=nms553CurrentIndex, nms553MaintenanceEntry=nms553MaintenanceEntry, nms553ReceiveLevel=nms553ReceiveLevel, nms553AlarmCountThreshold=nms553AlarmCountThreshold, nms553TotalIndex=nms553TotalIndex, nms553ChannelSplitTiming=nms553ChannelSplitTiming, nms553NetworkLoopbackConfig=nms553NetworkLoopbackConfig, nms553TotalLOFCs=nms553TotalLOFCs, nms553ExcessiveZeros=nms553ExcessiveZeros, nms553CascadePresent=nms553CascadePresent, nms553ChannelClockInvert=nms553ChannelClockInvert, nms553AlarmHistoryEntry=nms553AlarmHistoryEntry, nms553AlarmCountWindow=nms553AlarmCountWindow, nms553ConfigurationSave=nms553ConfigurationSave, nms553TotalEntry=nms553TotalEntry, nms553CurrentEntry=nms553CurrentEntry, nms553DteStatusTable=nms553DteStatusTable, dsx1=dsx1, nms553RTCMonth=nms553RTCMonth, nms553NetworkAdminLineBuildout=nms553NetworkAdminLineBuildout, nms553DiagBeginLoopTest=nms553DiagBeginLoopTest, nms553AlarmLastOccurrenceYear=nms553AlarmLastOccurrenceYear, nms553Configuration=nms553Configuration, nms553DiagBeginSelfTest=nms553DiagBeginSelfTest, nms553NetworkConfigTable=nms553NetworkConfigTable, nms553NetworkOperLineBuildout=nms553NetworkOperLineBuildout, nms553NetworkAISLoopdown=nms553NetworkAISLoopdown, nms553TotalCSSs=nms553TotalCSSs, nms553DS0AllocationNumberOfDS0s=nms553DS0AllocationNumberOfDS0s, nms553ChannelInbandLoop=nms553ChannelInbandLoop, nms553DteStatusIndex=nms553DteStatusIndex, nms553ChannelFlowControl=nms553ChannelFlowControl, nms553Maintenance=nms553Maintenance, nms553AlarmCount=nms553AlarmCount, nms553MaintenanceIndex=nms553MaintenanceIndex, nms553AlarmData=nms553AlarmData, nms553NetworkTransmitClockSource=nms553NetworkTransmitClockSource, nms553IntervalCSSs=nms553IntervalCSSs, nms553DS0AllocationStartingDS0=nms553DS0AllocationStartingDS0, nms553DiagEntry=nms553DiagEntry, nms553Version=nms553Version, nms553AlarmLastOccurrenceHours=nms553AlarmLastOccurrenceHours, nms553NetworkFallbackClockSource=nms553NetworkFallbackClockSource, nms553NetworkOperLineType=nms553NetworkOperLineType, nms553ValidIntervals=nms553ValidIntervals, nms553NetworkPreequalization=nms553NetworkPreequalization, nms553VersionIndex=nms553VersionIndex, nms553IntervalESs=nms553IntervalESs, nms553AlarmFirstOccurrenceSeconds=nms553AlarmFirstOccurrenceSeconds, nms553RTCHours=nms553RTCHours, nms553TimingLoss=nms553TimingLoss, nms553PowerUpAlm=nms553PowerUpAlm, nms553RTCDay=nms553RTCDay, nms553ChannelInbandLoopdown=nms553ChannelInbandLoopdown, nms553TotalUASs=nms553TotalUASs, nms553Diagnostics=nms553Diagnostics, nms553ChannelLocalDCD=nms553ChannelLocalDCD, nms553ResetStatistics=nms553ResetStatistics, nms553DteStatus=nms553DteStatus, nms553ControlledSlips=nms553ControlledSlips, nms553CurrentUASs=nms553CurrentUASs, nms553AlarmHistoryTable=nms553AlarmHistoryTable, nms553ChannelControlModeIdle=nms553ChannelControlModeIdle, nms553BipolarViolations=nms553BipolarViolations, nms553DS0AllocationSchemeEntry=nms553DS0AllocationSchemeEntry, nms553CurrentBESs=nms553CurrentBESs, nms553ChannelRTSCTSControl=nms553ChannelRTSCTSControl, nms553DefaultInit=nms553DefaultInit, nms553DiagTestStatus=nms553DiagTestStatus, nms553UnavailableSignalState=nms553UnavailableSignalState, nms553ProductType=nms553ProductType, nms553AlarmFirstOccurrenceDay=nms553AlarmFirstOccurrenceDay, nms553LedStatus=nms553LedStatus, nms553TotalSESs=nms553TotalSESs, nms553FirmwareRev=nms553FirmwareRev, nms553DiagRxErrAlm=nms553DiagRxErrAlm, nms553ChannelConfigEntry=nms553ChannelConfigEntry, nms553AlarmLastOccurrenceMonth=nms553AlarmLastOccurrenceMonth, nms553RTCMinutes=nms553RTCMinutes, nms553DiagTable=nms553DiagTable, nms553DiagResetTestToNormal=nms553DiagResetTestToNormal, nms553RTCYear=nms553RTCYear, nms553DS0AllocationConfigTable=nms553DS0AllocationConfigTable, nms553ChannelChannelType=nms553ChannelChannelType, nms553ReceivedYellow=nms553ReceivedYellow, nms553UnitFailure=nms553UnitFailure, nms553AlarmLastOccurrenceDay=nms553AlarmLastOccurrenceDay, nms553NetworkConfigIndex=nms553NetworkConfigIndex, nms553CurrentTable=nms553CurrentTable, nms553AlarmFirstOccurrenceMinutes=nms553AlarmFirstOccurrenceMinutes, nms553AlarmConfigEntry=nms553AlarmConfigEntry, nms553AlarmIndicationSignal=nms553AlarmIndicationSignal, nms553AlarmLastOccurrenceMinutes=nms553AlarmLastOccurrenceMinutes, nms553DS0AllocationBaseRate=nms553DS0AllocationBaseRate, nms553NetworkOnesDensity=nms553NetworkOnesDensity, nms553TotalESs=nms553TotalESs, nms553NetworkFdl=nms553NetworkFdl, nms553AlarmConfigTable=nms553AlarmConfigTable, nms553NetworkLineCoding=nms553NetworkLineCoding, nms553AlarmLastOccurrenceSeconds=nms553AlarmLastOccurrenceSeconds, nms553IntervalBESs=nms553IntervalBESs, nms553AlarmFirstOccurrenceHours=nms553AlarmFirstOccurrenceHours, nms553AlarmConfigIndex=nms553AlarmConfigIndex, nms553AlarmHistoryIndex=nms553AlarmHistoryIndex, nms553VersionEntry=nms553VersionEntry, nms553SoftReset=nms553SoftReset, nms553=nms553, nms553ChannelEIAtestLeads=nms553ChannelEIAtestLeads, nms553DiagIndex=nms553DiagIndex, nms553TotalBESs=nms553TotalBESs, nms553IntervalLOFCs=nms553IntervalLOFCs)
