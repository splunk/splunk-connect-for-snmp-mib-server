#
# PySNMP MIB module SNMP540-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNMP540-MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:00:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dsu, = mibBuilder.importSymbols("DDS-MIB", "dsu")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, iso, TimeTicks, Unsigned32, Counter64, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Bits, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "iso", "TimeTicks", "Unsigned32", "Counter64", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Bits", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snmp540 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4))
snmp540MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540MIBversion.setStatus('mandatory')
snmp540Config = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 2))
snmp540ActivateCfg = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChange", 1), ("activateNewCfg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540ActivateCfg.setStatus('mandatory')
snmp540DtePortType = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DtePortType.setStatus('mandatory')
snmp540EiaTestControl = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3))
snmp540EiaRlcontrol = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540EiaRlcontrol.setStatus('mandatory')
snmp540EiaLlcontrol = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540EiaLlcontrol.setStatus('mandatory')
snmp540EiaTmcontrol = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540EiaTmcontrol.setStatus('mandatory')
snmp540LlbDetect = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540LlbDetect.setStatus('mandatory')
snmp540Control = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 3))
snmp540UnitReset = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540UnitReset.setStatus('mandatory')
snmp540AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4))
snmp540PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 1))
snmp540CfgChkSumErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 2))
snmp540StcLoopbackAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 3))
snmp540NoNtwkLoopCurrentAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 4))
snmp540LinePairsReversedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 5))
snmp540NoSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 6))
snmp540FpTestAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 7))
snmp540DSRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 8))
snmp540DTRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 9))
snmp540DTPLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 10))
snmp540DCDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 11))
snmp540RXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 12))
snmp540TXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 13))
snmp540JitterAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 14))
snmp540BpvAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 15))
snmp540FrameLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 16))
snmp540SignalToNoiseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 17))
snmp540RxSignalLowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 18))
snmp540AlarmCfgThr = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 5))
snmp540AlarmCfgCountWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540AlarmCfgCountWindow.setStatus('mandatory')
snmp540AlarmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2), )
if mibBuilder.loadTexts: snmp540AlarmCfgTable.setStatus('mandatory')
snmp540AlarmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2, 1), ).setIndexNames((0, "SNMP540-MGMT-MIB", "snmp540AlarmCfgIdentifier"))
if mibBuilder.loadTexts: snmp540AlarmCfgEntry.setStatus('mandatory')
snmp540AlarmCfgIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540AlarmCfgIdentifier.setStatus('mandatory')
snmp540AlarmCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540AlarmCfgThreshold.setStatus('mandatory')
snmp540LineStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 6))
snmp540LineStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540LineStatsInterval.setStatus('mandatory')
snmp540LineStatsTxLevel = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsTxLevel.setStatus('mandatory')
snmp540LineStatsRxInterpretation = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSignal", 1), ("notAvailable", 2), ("signalToNoiseNotMeasured", 3), ("allReadingsValid", 4), ("sToNRatioGreaterThanMeasured", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsRxInterpretation.setStatus('mandatory')
snmp540LineStatsRxLevel = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsRxLevel.setStatus('mandatory')
snmp540LineStatsSignalToNoiseRatio = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsSignalToNoiseRatio.setStatus('mandatory')
snmp540LineStatsSignalQuality = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("fair", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsSignalQuality.setStatus('mandatory')
snmp540LineStatsJitter = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsJitter.setStatus('mandatory')
snmp540LineStatsBpvCount = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsBpvCount.setStatus('mandatory')
snmp540LineStatsFrameLossCount = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsFrameLossCount.setStatus('mandatory')
snmp540DiagTest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 7))
snmp540DiagTestPattern = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmp540Send511Pattern", 1), ("snmp540Send2047Pattern", 2), ("snmp540Send15BitPattern", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DiagTestPattern.setStatus('mandatory')
snmp540DiagTestExceptions = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noExceptions", 1), ("bitsOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DiagTestExceptions.setStatus('mandatory')
snmp540DiagBitErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DiagBitErrors.setStatus('mandatory')
snmp540DiagBlockErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DiagBlockErrors.setStatus('mandatory')
snmp540RlLoopType = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pn127", 1), ("v54", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540RlLoopType.setStatus('mandatory')
snmp540DiagBlocksToSend = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("blocks1", 1), ("blocks10", 2), ("blocks100", 3), ("blocks500", 4), ("blocks1000", 5), ("blocks5000", 6), ("blocks10000", 7), ("blocks50000", 8), ("external", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DiagBlocksToSend.setStatus('mandatory')
snmp540DiagControl = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTest", 1), ("lineloop", 2), ("remoteLoop", 3), ("resetTestToNorm", 4), ("telcoLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DiagControl.setStatus('mandatory')
snmp540Led = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 8))
snmp540LedStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LedStatus.setStatus('mandatory')
snmp540DeviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DeviceSerialNumber.setStatus('mandatory')
mibBuilder.exportSymbols("SNMP540-MGMT-MIB", snmp540LlbDetect=snmp540LlbDetect, snmp540AlarmCfgTable=snmp540AlarmCfgTable, snmp540EiaRlcontrol=snmp540EiaRlcontrol, snmp540FrameLossAlm=snmp540FrameLossAlm, snmp540RlLoopType=snmp540RlLoopType, snmp540CfgChkSumErrAlm=snmp540CfgChkSumErrAlm, snmp540DSRLossAlm=snmp540DSRLossAlm, snmp540AlarmCfgEntry=snmp540AlarmCfgEntry, snmp540TXDLossAlm=snmp540TXDLossAlm, snmp540DtePortType=snmp540DtePortType, snmp540DTPLossAlm=snmp540DTPLossAlm, snmp540EiaTmcontrol=snmp540EiaTmcontrol, snmp540ActivateCfg=snmp540ActivateCfg, snmp540LineStatsRxInterpretation=snmp540LineStatsRxInterpretation, snmp540SignalToNoiseAlm=snmp540SignalToNoiseAlm, snmp540Config=snmp540Config, snmp540AlarmCfgThr=snmp540AlarmCfgThr, snmp540LineStats=snmp540LineStats, snmp540FpTestAlm=snmp540FpTestAlm, snmp540DCDLossAlm=snmp540DCDLossAlm, snmp540BpvAlm=snmp540BpvAlm, snmp540DiagBitErrors=snmp540DiagBitErrors, snmp540EiaLlcontrol=snmp540EiaLlcontrol, snmp540Control=snmp540Control, snmp540RxSignalLowAlm=snmp540RxSignalLowAlm, snmp540MIBversion=snmp540MIBversion, snmp540Led=snmp540Led, snmp540=snmp540, snmp540AlarmCfgCountWindow=snmp540AlarmCfgCountWindow, snmp540RXDLossAlm=snmp540RXDLossAlm, snmp540AlarmCfgThreshold=snmp540AlarmCfgThreshold, snmp540LinePairsReversedAlm=snmp540LinePairsReversedAlm, snmp540LedStatus=snmp540LedStatus, snmp540LineStatsSignalQuality=snmp540LineStatsSignalQuality, snmp540LineStatsJitter=snmp540LineStatsJitter, snmp540DiagBlockErrors=snmp540DiagBlockErrors, snmp540LineStatsRxLevel=snmp540LineStatsRxLevel, snmp540NoNtwkLoopCurrentAlm=snmp540NoNtwkLoopCurrentAlm, snmp540DiagTest=snmp540DiagTest, snmp540DTRLossAlm=snmp540DTRLossAlm, snmp540LineStatsInterval=snmp540LineStatsInterval, snmp540AlarmCfgIdentifier=snmp540AlarmCfgIdentifier, snmp540DiagTestExceptions=snmp540DiagTestExceptions, snmp540UnitReset=snmp540UnitReset, snmp540LineStatsTxLevel=snmp540LineStatsTxLevel, snmp540PowerUpAlm=snmp540PowerUpAlm, snmp540DiagTestPattern=snmp540DiagTestPattern, snmp540LineStatsBpvCount=snmp540LineStatsBpvCount, snmp540LineStatsSignalToNoiseRatio=snmp540LineStatsSignalToNoiseRatio, snmp540DiagBlocksToSend=snmp540DiagBlocksToSend, snmp540DeviceSerialNumber=snmp540DeviceSerialNumber, snmp540NoSignalAlm=snmp540NoSignalAlm, snmp540EiaTestControl=snmp540EiaTestControl, snmp540JitterAlm=snmp540JitterAlm, snmp540LineStatsFrameLossCount=snmp540LineStatsFrameLossCount, snmp540DiagControl=snmp540DiagControl, snmp540StcLoopbackAlm=snmp540StcLoopbackAlm, snmp540AlarmData=snmp540AlarmData)
