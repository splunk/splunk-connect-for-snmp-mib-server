#
# PySNMP MIB module LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
lhnModules, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-GLOBAL-REG", "lhnModules")
lhnNusCommonInfo, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-NUS-COMMON-MIB", "lhnNusCommonInfo")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ModuleIdentity, MibIdentifier, TimeTicks, ObjectIdentity, Gauge32, Unsigned32, NotificationType, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Gauge32", "Unsigned32", "NotificationType", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Counter32")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
lhnNusCommonInfoModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1, 4))
if mibBuilder.loadTexts: lhnNusCommonInfoModule.setLastUpdated('0106010000Z')
if mibBuilder.loadTexts: lhnNusCommonInfoModule.setOrganization('LeftHand Networks, Inc.')
infoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSerialNumber.setStatus('current')
infoModel = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModel.setStatus('current')
infoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareVersion.setStatus('current')
infoDSPFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDSPFirmwareVersion.setStatus('current')
infoMotherboardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 5), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoMotherboardTemperature.setStatus('current')
infoCPUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 6), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoCPUTemperature.setStatus('current')
infoCPUFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 7), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoCPUFanSpeed.setStatus('current')
infoPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerSupplyCount.setStatus('current')
infoPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9), )
if mibBuilder.loadTexts: infoPowerSupplyTable.setStatus('current')
infoPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", "infoPowerSupplyIndex"))
if mibBuilder.loadTexts: infoPowerSupplyEntry.setStatus('current')
infoPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerSupplyIndex.setStatus('current')
infoPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("marginal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerSupplyStatus.setStatus('current')
infoSFDSCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSCount.setStatus('current')
infoSFDSTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: infoSFDSTable.setStatus('current')
infoSFDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", "infoSFDSIndex"))
if mibBuilder.loadTexts: infoSFDSEntry.setStatus('current')
infoSFDSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSIndex.setStatus('current')
infoSFDSHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSHardwareVersion.setStatus('current')
infoSFDSFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSFirmwareVersion.setStatus('current')
infoSFDSDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSDriverVersion.setStatus('current')
infoSFDSMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 5), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSMemorySize.setStatus('current')
infoSFDSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSStatus.setStatus('current')
infoDriveCardCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardCount.setStatus('current')
infoDriveCardTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13), )
if mibBuilder.loadTexts: infoDriveCardTable.setStatus('current')
infoDriveCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", "infoDriveCardIndex"))
if mibBuilder.loadTexts: infoDriveCardEntry.setStatus('current')
infoDriveCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardIndex.setStatus('current')
infoDriveCardModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardModel.setStatus('current')
infoDriveCardBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardBiosVersion.setStatus('current')
infoDriveCardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardFirmwareVersion.setStatus('current')
mibBuilder.exportSymbols("LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", infoSFDSHardwareVersion=infoSFDSHardwareVersion, infoPowerSupplyEntry=infoPowerSupplyEntry, infoSFDSIndex=infoSFDSIndex, infoSFDSStatus=infoSFDSStatus, infoPowerSupplyStatus=infoPowerSupplyStatus, infoSFDSTable=infoSFDSTable, infoDriveCardIndex=infoDriveCardIndex, infoModel=infoModel, infoDriveCardFirmwareVersion=infoDriveCardFirmwareVersion, infoDriveCardBiosVersion=infoDriveCardBiosVersion, infoCPUTemperature=infoCPUTemperature, infoDriveCardTable=infoDriveCardTable, infoSFDSCount=infoSFDSCount, infoPowerSupplyCount=infoPowerSupplyCount, infoPowerSupplyTable=infoPowerSupplyTable, infoSFDSEntry=infoSFDSEntry, infoDriveCardEntry=infoDriveCardEntry, infoCPUFanSpeed=infoCPUFanSpeed, infoSFDSFirmwareVersion=infoSFDSFirmwareVersion, infoPowerSupplyIndex=infoPowerSupplyIndex, infoMotherboardTemperature=infoMotherboardTemperature, infoSoftwareVersion=infoSoftwareVersion, infoDSPFirmwareVersion=infoDSPFirmwareVersion, lhnNusCommonInfoModule=lhnNusCommonInfoModule, infoDriveCardModel=infoDriveCardModel, infoDriveCardCount=infoDriveCardCount, infoSFDSDriverVersion=infoSFDSDriverVersion, infoSFDSMemorySize=infoSFDSMemorySize, infoSerialNumber=infoSerialNumber, PYSNMP_MODULE_ID=lhnNusCommonInfoModule)
