#
# PySNMP MIB module USB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/USB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
experimental, Counter64, IpAddress, ObjectIdentity, NotificationType, TimeTicks, iso, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, Integer32, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "experimental", "Counter64", "IpAddress", "ObjectIdentity", "NotificationType", "TimeTicks", "iso", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "Integer32", "Unsigned32", "Counter32")
TextualConvention, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress")
usbMib = ModuleIdentity((1, 3, 6, 1, 3, 103))
if mibBuilder.loadTexts: usbMib.setLastUpdated('200008070000Z')
if mibBuilder.loadTexts: usbMib.setOrganization('3Com')
usbMibObjects = MibIdentifier((1, 3, 6, 1, 3, 103, 1))
usbNumber = MibScalar((1, 3, 6, 1, 3, 103, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbNumber.setStatus('current')
usbPortTable = MibTable((1, 3, 6, 1, 3, 103, 1, 2), )
if mibBuilder.loadTexts: usbPortTable.setStatus('current')
usbPortEntry = MibTableRow((1, 3, 6, 1, 3, 103, 1, 2, 1), ).setIndexNames((0, "USB-MIB", "usbPortIndex"))
if mibBuilder.loadTexts: usbPortEntry.setStatus('current')
usbPortIndex = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbPortIndex.setStatus('current')
usbPortType = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("device", 2), ("hub", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbPortType.setStatus('current')
usbPortRate = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-speed", 1), ("full-speed", 2), ("high-speed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbPortRate.setStatus('current')
usbDeviceTable = MibTable((1, 3, 6, 1, 3, 103, 1, 3), )
if mibBuilder.loadTexts: usbDeviceTable.setStatus('current')
usbDeviceEntry = MibTableRow((1, 3, 6, 1, 3, 103, 1, 3, 1), ).setIndexNames((0, "USB-MIB", "usbDeviceIndex"))
if mibBuilder.loadTexts: usbDeviceEntry.setStatus('current')
usbDeviceIndex = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceIndex.setStatus('current')
usbDevicePower = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("self-powered", 2), ("bus-powered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDevicePower.setStatus('current')
usbDeviceVendorID = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceVendorID.setStatus('current')
usbDeviceProductID = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceProductID.setStatus('current')
usbDeviceNumberConfigurations = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceNumberConfigurations.setStatus('current')
usbDeviceActiveClass = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("cdc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceActiveClass.setStatus('current')
usbDeviceStatus = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unattached", 1), ("attached", 2), ("powered", 3), ("default", 4), ("address", 5), ("configured", 6), ("suspended", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceStatus.setStatus('current')
usbDeviceEnumCounter = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceEnumCounter.setStatus('current')
usbDeviceRemoteWakeup = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceRemoteWakeup.setStatus('current')
usbDeviceRemoteWakeupOn = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDeviceRemoteWakeupOn.setStatus('current')
usbCDCTable = MibTable((1, 3, 6, 1, 3, 103, 1, 4), )
if mibBuilder.loadTexts: usbCDCTable.setStatus('current')
usbCDCEntry = MibTableRow((1, 3, 6, 1, 3, 103, 1, 4, 1), ).setIndexNames((0, "USB-MIB", "usbCDCIndex"), (0, "USB-MIB", "usbCDCIfIndex"))
if mibBuilder.loadTexts: usbCDCEntry.setStatus('current')
usbCDCIndex = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCIndex.setStatus('current')
usbCDCIfIndex = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 4, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCIfIndex.setStatus('current')
usbCDCSubclass = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 0), ("directLine", 1), ("acm", 2), ("telephony", 3), ("multichannel", 4), ("capi", 5), ("ethernet", 6), ("atm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCSubclass.setStatus('current')
usbCDCVersion = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCVersion.setStatus('current')
usbCDCDataTransferType = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronous", 1), ("asynchronous", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCDataTransferType.setStatus('current')
usbCDCDataEndpoints = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCDataEndpoints.setStatus('current')
usbCDCStalls = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCStalls.setStatus('current')
usbCDCEtherTable = MibTable((1, 3, 6, 1, 3, 103, 1, 5), )
if mibBuilder.loadTexts: usbCDCEtherTable.setStatus('current')
usbCDCEtherEntry = MibTableRow((1, 3, 6, 1, 3, 103, 1, 5, 1), ).setIndexNames((0, "USB-MIB", "usbCDCEtherIndex"), (0, "USB-MIB", "usbCDCEtherIfIndex"))
if mibBuilder.loadTexts: usbCDCEtherEntry.setStatus('current')
usbCDCEtherIndex = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCEtherIndex.setStatus('current')
usbCDCEtherIfIndex = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 5, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCEtherIfIndex.setStatus('current')
usbCDCEtherMacAddress = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCEtherMacAddress.setStatus('current')
usbCDCEtherPacketFilter = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 5, 1, 4), Bits().clone(namedValues=NamedValues(("packetPromiscuous", 0), ("packetAllMulticast", 1), ("packetDirected", 2), ("packetBroadcast", 3), ("packetMulticast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCEtherPacketFilter.setStatus('current')
usbCDCEtherDataStatisticsCapabilities = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 5, 1, 5), Bits().clone(namedValues=NamedValues(("frameXmitOk", 0), ("frameRcvOk", 1), ("frameXmitErr", 2), ("frameRcvErr", 3), ("frameRcvNoBuff", 4), ("bytesXmitDirectOk", 5), ("framesXmitDirectOk", 6), ("bytesXmitMulticastOk", 7), ("framesXmitMulticastOk", 8), ("bytesXmitBroadcastOk", 9), ("framesXmitBroadcastOk", 10), ("bytesRcvDirectOk", 11), ("framesRcvDirectOk", 12), ("bytesRcvMulticastOk", 13), ("framesRcvMulticastOk", 14), ("bytesRcvBroadcastOk", 15), ("framesRcvBroadcastOk", 16), ("framesRcvCrcErr", 17), ("xmitQueueLen", 18), ("rcvErrAlignment", 19), ("xmitOneCollision", 20), ("xmitMoreCollisions", 21), ("xmitDeferred", 22), ("xmitMaxCollision", 23), ("rcvOverrun", 24), ("xmitUnderrun", 25), ("xmitHearbeatFailure", 26), ("xmitTimesCrsLost", 27), ("xmitLateCollisions", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCEtherDataStatisticsCapabilities.setStatus('current')
usbCDCEtherDataCheckErrs = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbCDCEtherDataCheckErrs.setStatus('current')
usbCDCEtherXmtAddressTable = MibTable((1, 3, 6, 1, 3, 103, 1, 6), )
if mibBuilder.loadTexts: usbCDCEtherXmtAddressTable.setStatus('current')
usbCDCEtherXmtAddressEntry = MibTableRow((1, 3, 6, 1, 3, 103, 1, 6, 1), ).setIndexNames((0, "USB-MIB", "usbCDCEtherIndex"), (0, "USB-MIB", "usbCDCEtherIfIndex"), (0, "USB-MIB", "ifCDCEtherXmtAddress"))
if mibBuilder.loadTexts: usbCDCEtherXmtAddressEntry.setStatus('current')
ifCDCEtherXmtAddress = MibTableColumn((1, 3, 6, 1, 3, 103, 1, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCDCEtherXmtAddress.setStatus('current')
usbMibNotification = MibIdentifier((1, 3, 6, 1, 3, 103, 2))
usbMibConformance = MibIdentifier((1, 3, 6, 1, 3, 103, 3))
usbMibCompliances = MibIdentifier((1, 3, 6, 1, 3, 103, 3, 1))
usbMibGroups = MibIdentifier((1, 3, 6, 1, 3, 103, 3, 2))
usbMibBasicCompliance = ModuleCompliance((1, 3, 6, 1, 3, 103, 3, 1, 1)).setObjects(("USB-MIB", "usbMibBasicGroup"), ("USB-MIB", "usbMibBasicGroup"), ("USB-MIB", "usbMibCDCGroup"), ("USB-MIB", "usbMibCDCEtherGroup"), ("USB-MIB", "usbCDCEtherXmtAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usbMibBasicCompliance = usbMibBasicCompliance.setStatus('current')
usbMibBasicGroup = ObjectGroup((1, 3, 6, 1, 3, 103, 3, 2, 1)).setObjects(("USB-MIB", "usbNumber"), ("USB-MIB", "usbPortIndex"), ("USB-MIB", "usbPortType"), ("USB-MIB", "usbPortRate"), ("USB-MIB", "usbDeviceIndex"), ("USB-MIB", "usbDevicePower"), ("USB-MIB", "usbDeviceVendorID"), ("USB-MIB", "usbDeviceProductID"), ("USB-MIB", "usbDeviceNumberConfigurations"), ("USB-MIB", "usbDeviceActiveClass"), ("USB-MIB", "usbDeviceStatus"), ("USB-MIB", "usbDeviceEnumCounter"), ("USB-MIB", "usbDeviceRemoteWakeup"), ("USB-MIB", "usbDeviceRemoteWakeupOn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usbMibBasicGroup = usbMibBasicGroup.setStatus('current')
usbMibCDCGroup = ObjectGroup((1, 3, 6, 1, 3, 103, 3, 2, 2)).setObjects(("USB-MIB", "usbCDCIndex"), ("USB-MIB", "usbCDCIfIndex"), ("USB-MIB", "usbCDCSubclass"), ("USB-MIB", "usbCDCVersion"), ("USB-MIB", "usbCDCDataTransferType"), ("USB-MIB", "usbCDCDataEndpoints"), ("USB-MIB", "usbCDCStalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usbMibCDCGroup = usbMibCDCGroup.setStatus('current')
usbMibCDCEtherGroup = ObjectGroup((1, 3, 6, 1, 3, 103, 3, 2, 3)).setObjects(("USB-MIB", "usbCDCEtherIndex"), ("USB-MIB", "usbCDCEtherIfIndex"), ("USB-MIB", "usbCDCEtherMacAddress"), ("USB-MIB", "usbCDCEtherPacketFilter"), ("USB-MIB", "usbCDCEtherDataStatisticsCapabilities"), ("USB-MIB", "usbCDCEtherDataCheckErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usbMibCDCEtherGroup = usbMibCDCEtherGroup.setStatus('current')
usbCDCEtherXmtAddressGroup = ObjectGroup((1, 3, 6, 1, 3, 103, 3, 2, 4)).setObjects(("USB-MIB", "ifCDCEtherXmtAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usbCDCEtherXmtAddressGroup = usbCDCEtherXmtAddressGroup.setStatus('current')
mibBuilder.exportSymbols("USB-MIB", usbDeviceTable=usbDeviceTable, usbCDCEtherDataCheckErrs=usbCDCEtherDataCheckErrs, usbCDCEtherMacAddress=usbCDCEtherMacAddress, usbDeviceProductID=usbDeviceProductID, usbPortType=usbPortType, usbCDCDataEndpoints=usbCDCDataEndpoints, usbMibBasicGroup=usbMibBasicGroup, usbMibConformance=usbMibConformance, usbPortIndex=usbPortIndex, usbCDCDataTransferType=usbCDCDataTransferType, ifCDCEtherXmtAddress=ifCDCEtherXmtAddress, usbCDCStalls=usbCDCStalls, usbMibNotification=usbMibNotification, usbDeviceNumberConfigurations=usbDeviceNumberConfigurations, usbCDCIfIndex=usbCDCIfIndex, usbDeviceEnumCounter=usbDeviceEnumCounter, usbMibBasicCompliance=usbMibBasicCompliance, usbPortEntry=usbPortEntry, usbMibGroups=usbMibGroups, usbCDCIndex=usbCDCIndex, usbDeviceActiveClass=usbDeviceActiveClass, usbCDCTable=usbCDCTable, usbDeviceRemoteWakeup=usbDeviceRemoteWakeup, usbCDCSubclass=usbCDCSubclass, usbCDCEtherTable=usbCDCEtherTable, usbDevicePower=usbDevicePower, usbCDCEtherIfIndex=usbCDCEtherIfIndex, usbCDCEtherIndex=usbCDCEtherIndex, usbCDCVersion=usbCDCVersion, usbCDCEtherPacketFilter=usbCDCEtherPacketFilter, usbMib=usbMib, usbPortTable=usbPortTable, usbCDCEntry=usbCDCEntry, usbPortRate=usbPortRate, usbMibCDCGroup=usbMibCDCGroup, usbMibCompliances=usbMibCompliances, usbMibObjects=usbMibObjects, PYSNMP_MODULE_ID=usbMib, usbNumber=usbNumber, usbCDCEtherXmtAddressGroup=usbCDCEtherXmtAddressGroup, usbDeviceEntry=usbDeviceEntry, usbCDCEtherEntry=usbCDCEtherEntry, usbCDCEtherXmtAddressEntry=usbCDCEtherXmtAddressEntry, usbDeviceRemoteWakeupOn=usbDeviceRemoteWakeupOn, usbCDCEtherDataStatisticsCapabilities=usbCDCEtherDataStatisticsCapabilities, usbDeviceVendorID=usbDeviceVendorID, usbCDCEtherXmtAddressTable=usbCDCEtherXmtAddressTable, usbMibCDCEtherGroup=usbMibCDCEtherGroup, usbDeviceStatus=usbDeviceStatus, usbDeviceIndex=usbDeviceIndex)
