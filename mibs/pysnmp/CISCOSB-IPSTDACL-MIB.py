#
# PySNMP MIB module CISCOSB-IPSTDACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-IPSTDACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:06:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
switch001, = mibBuilder.importSymbols("CISCOSB-MIB", "switch001")
InetVersion, InetZoneIndex, InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetVersion", "InetZoneIndex", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, TimeTicks, NotificationType, Gauge32, iso, Counter32, ObjectIdentity, IpAddress, MibIdentifier, Integer32, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "TimeTicks", "NotificationType", "Gauge32", "iso", "Counter32", "ObjectIdentity", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, RowStatus, DateAndTime, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "DateAndTime", "TextualConvention", "TimeStamp")
rlIpStdAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207))
rlIpStdAcl.setRevisions(('2011-05-30 00:00',))
if mibBuilder.loadTexts: rlIpStdAcl.setLastUpdated('201106200000Z')
if mibBuilder.loadTexts: rlIpStdAcl.setOrganization('Cisco Small Business')
class RlIpStdAclActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("drop", 1), ("permit", 2))

class RlIpStdAclStdClassificationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("any", 1), ("ipv4", 2), ("ipv6any", 3), ("ipv6", 4))

rlIpStdAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1), )
if mibBuilder.loadTexts: rlIpStdAclTable.setStatus('current')
rlIpStdAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1), ).setIndexNames((0, "CISCOSB-IPSTDACL-MIB", "rlIpStdAclAclName"), (0, "CISCOSB-IPSTDACL-MIB", "rlIpStdAclAceIndex"))
if mibBuilder.loadTexts: rlIpStdAclEntry.setStatus('current')
rlIpStdAclAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlIpStdAclAclName.setStatus('current')
rlIpStdAclAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: rlIpStdAclAceIndex.setStatus('current')
rlIpStdAclSrcClassificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 3), RlIpStdAclStdClassificationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcClassificationType.setStatus('current')
rlIpStdAclSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcIpAddrType.setStatus('current')
rlIpStdAclSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcIpAddr.setStatus('current')
rlIpStdAclSrcPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 6), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcPrefLen.setStatus('current')
rlIpStdAclDstClassificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 7), RlIpStdAclStdClassificationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstClassificationType.setStatus('current')
rlIpStdAclDstIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstIpAddrType.setStatus('current')
rlIpStdAclDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstIpAddr.setStatus('current')
rlIpStdAclDstPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 10), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstPrefLen.setStatus('current')
rlIpStdAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 11), RlIpStdAclActionType().clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclAction.setStatus('current')
rlIpStdAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclRowStatus.setStatus('current')
rlIpStdAclFreeAceIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStdAclFreeAceIndex.setStatus('current')
rlIpStdAclNameToIndexTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3), )
if mibBuilder.loadTexts: rlIpStdAclNameToIndexTable.setStatus('current')
rlIpStdAclNameToIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3, 1), ).setIndexNames((0, "CISCOSB-IPSTDACL-MIB", "rlIpStdAclNameToIndexName"))
if mibBuilder.loadTexts: rlIpStdAclNameToIndexEntry.setStatus('current')
rlIpStdAclNameToIndexName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlIpStdAclNameToIndexName.setStatus('current')
rlIpStdAclNameToIndexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStdAclNameToIndexIndex.setStatus('current')
rlIpStdPairAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4), )
if mibBuilder.loadTexts: rlIpStdPairAclTable.setStatus('current')
rlIpStdPairAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1), ).setIndexNames((0, "CISCOSB-IPSTDACL-MIB", "rlIpStdPairAclAclName"), (0, "CISCOSB-IPSTDACL-MIB", "rlIpStdPairAclAceIndex"))
if mibBuilder.loadTexts: rlIpStdPairAclEntry.setStatus('current')
rlIpStdPairAclAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlIpStdPairAclAclName.setStatus('current')
rlIpStdPairAclAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: rlIpStdPairAclAceIndex.setStatus('current')
rlIpStdPairAclSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclSrcIpAddrType.setStatus('current')
rlIpStdPairAclSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclSrcIpAddr.setStatus('current')
rlIpStdPairAclSrcPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 5), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclSrcPrefLen.setStatus('current')
rlIpStdPairAclDstIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclDstIpAddrType.setStatus('current')
rlIpStdPairAclDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclDstIpAddr.setStatus('current')
rlIpStdPairAclDstPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 8), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclDstPrefLen.setStatus('current')
rlIpStdPairAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 9), RlIpStdAclActionType().clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclAction.setStatus('current')
rlIpStdPairAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclRowStatus.setStatus('current')
mibBuilder.exportSymbols("CISCOSB-IPSTDACL-MIB", rlIpStdPairAclSrcIpAddrType=rlIpStdPairAclSrcIpAddrType, rlIpStdPairAclEntry=rlIpStdPairAclEntry, rlIpStdAclNameToIndexName=rlIpStdAclNameToIndexName, rlIpStdPairAclDstPrefLen=rlIpStdPairAclDstPrefLen, RlIpStdAclStdClassificationType=RlIpStdAclStdClassificationType, rlIpStdPairAclAceIndex=rlIpStdPairAclAceIndex, rlIpStdAclDstIpAddrType=rlIpStdAclDstIpAddrType, rlIpStdAclFreeAceIndex=rlIpStdAclFreeAceIndex, rlIpStdPairAclSrcIpAddr=rlIpStdPairAclSrcIpAddr, PYSNMP_MODULE_ID=rlIpStdAcl, rlIpStdAclRowStatus=rlIpStdAclRowStatus, rlIpStdAclDstPrefLen=rlIpStdAclDstPrefLen, rlIpStdAclNameToIndexTable=rlIpStdAclNameToIndexTable, rlIpStdPairAclRowStatus=rlIpStdPairAclRowStatus, rlIpStdAclTable=rlIpStdAclTable, rlIpStdAclAction=rlIpStdAclAction, rlIpStdPairAclDstIpAddr=rlIpStdPairAclDstIpAddr, rlIpStdAclAceIndex=rlIpStdAclAceIndex, rlIpStdAclSrcIpAddr=rlIpStdAclSrcIpAddr, rlIpStdAclNameToIndexEntry=rlIpStdAclNameToIndexEntry, rlIpStdAclAclName=rlIpStdAclAclName, RlIpStdAclActionType=RlIpStdAclActionType, rlIpStdPairAclTable=rlIpStdPairAclTable, rlIpStdPairAclDstIpAddrType=rlIpStdPairAclDstIpAddrType, rlIpStdAclSrcIpAddrType=rlIpStdAclSrcIpAddrType, rlIpStdAclSrcClassificationType=rlIpStdAclSrcClassificationType, rlIpStdPairAclAction=rlIpStdPairAclAction, rlIpStdPairAclSrcPrefLen=rlIpStdPairAclSrcPrefLen, rlIpStdAcl=rlIpStdAcl, rlIpStdAclSrcPrefLen=rlIpStdAclSrcPrefLen, rlIpStdAclEntry=rlIpStdAclEntry, rlIpStdAclDstIpAddr=rlIpStdAclDstIpAddr, rlIpStdAclNameToIndexIndex=rlIpStdAclNameToIndexIndex, rlIpStdPairAclAclName=rlIpStdPairAclAclName, rlIpStdAclDstClassificationType=rlIpStdAclDstClassificationType)
