#
# PySNMP MIB module IBM-GbTOR-10G-L2L3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-GbTOR-10G-L2L3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
dot1dBridge, BridgeId, dot1dBasePort, dot1dTpPort, dot1dTp, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "BridgeId", "dot1dBasePort", "dot1dTpPort", "dot1dTp", "dot1dBasePortEntry")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddress, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressIPv6")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpMessageProcessingModel, SnmpSecurityLevel, SnmpSecurityModel, SnmpEngineID, SnmpAdminString = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpMessageProcessingModel", "SnmpSecurityLevel", "SnmpSecurityModel", "SnmpEngineID", "SnmpAdminString")
usmNoPrivProtocol, usmNoAuthProtocol = mibBuilder.importSymbols("SNMP-USER-BASED-SM-MIB", "usmNoPrivProtocol", "usmNoAuthProtocol")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysLocation, sysName, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName", "sysContact")
Counter64, Bits, Counter32, MibIdentifier, mib_2, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, Unsigned32, NotificationType, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Counter32", "MibIdentifier", "mib-2", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "Unsigned32", "NotificationType", "IpAddress", "Gauge32")
TDomain, RowPointer, PhysAddress, TextualConvention, TimeStamp, StorageType, AutonomousType, TAddress, TimeInterval, TruthValue, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TDomain", "RowPointer", "PhysAddress", "TextualConvention", "TimeStamp", "StorageType", "AutonomousType", "TAddress", "TimeInterval", "TruthValue", "RowStatus", "DisplayString", "MacAddress")
ibmGbTORG8124MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 26543, 3))
if mibBuilder.loadTexts: ibmGbTORG8124MIB.setLastUpdated('201308142148Z')
if mibBuilder.loadTexts: ibmGbTORG8124MIB.setOrganization('IBM/System Networking')
class PortNumber(TextualConvention, Unsigned32):
    status = 'current'

class VlanId(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

blade = MibIdentifier((1, 3, 6, 1, 4, 1, 26543))
registration = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 1))
private_mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2)).setLabel("private-mibs")
ibm_switch_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7)).setLabel("ibm-switch-mgmt")
g8124_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4)).setLabel("g8124-mgmt")
ibm_switch = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 1, 7)).setLabel("ibm-switch")
g8124 = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 1, 7, 4))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1))
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1))
agentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2))
agentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3))
agentOper = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4))
agSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2))
agRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3))
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4))
agSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5))
agTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7))
agApply = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8))
agTacacsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11))
agMgmtNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12))
agBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 13))
agAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19))
agLdapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21))
agSSHConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22))
agsFlowConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2))
portStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3))
agClearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 7))
ntpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9))
aclStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11))
memoryStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12))
snmpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20))
mpTcbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21))
mpUdpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1))
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2))
agDiff = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 4))
agCfgDump = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 5))
geaportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 9))
sfpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11))
accessInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13))
agNTPOper = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 2))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('current')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('current')
hwFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFanStatus.setStatus('current')
hwFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFanSpeed.setStatus('current')
hwTempSensors = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTempSensors.setStatus('current')
hwGlobalHealthStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("noncritical", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGlobalHealthStatus.setStatus('current')
hwMainBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMainBoardRevision.setStatus('current')
agPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 1), )
if mibBuilder.loadTexts: agPortOperTable.setStatus('current')
agPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "portOperIdx"))
if mibBuilder.loadTexts: agPortOperTableEntry.setStatus('current')
portOperIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperIdx.setStatus('current')
portOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperState.setStatus('current')
portOperRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperRmon.setStatus('current')
portOperLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperLearning.setStatus('current')
ntpOperSendReq = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpOperSendReq.setStatus('current')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('current')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('current')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5), ("mbs10000", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('current')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('current')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('current')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4), ("errdisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('current')
portInfoPhyIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfDescr.setStatus('current')
portInfoPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfType.setStatus('current')
portInfoPhyIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfMtu.setStatus('current')
portInfoPhyIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setStatus('current')
portInfoPhyIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setStatus('current')
portInfoPhyIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setStatus('current')
portInfoLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLearning.setStatus('current')
portInfoBpduGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoBpduGuard.setStatus('current')
portInfoPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPvid.setStatus('current')
portInfoVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("untagged", 0), ("tagged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoVlanTag.setStatus('current')
portInfoErrDisableRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoErrDisableRecovery.setStatus('current')
portInfoErrDisableTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoErrDisableTimeLeft.setStatus('current')
portInfoExtGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("loop", 1), ("root", 2), ("global-loop", 3), ("no-guard", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoExtGuard.setStatus('current')
portInfoLFDState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLFDState.setStatus('current')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('current')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('current')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('current')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('current')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('current')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('current')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('current')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('current')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('current')
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('current')
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('current')
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('current')
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('current')
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('current')
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('current')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('current')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('current')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('current')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('current')
agCurCfgLoginNotice = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginNotice.setStatus('current')
agNewCfgLoginNotice = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginNotice.setStatus('current')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('current')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('current')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('current')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('current')
agSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSlotNumber.setStatus('current')
agCurCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setStatus('current')
agNewCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setStatus('current')
agCurCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setStatus('current')
agNewCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setStatus('current')
agClearFlashDump = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClearFlashDump.setStatus('current')
agCurCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapSrcIf.setStatus('current')
agNewCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapSrcIf.setStatus('current')
agCurCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setStatus('current')
agNewCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setStatus('current')
agCurCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTftpServerPort.setStatus('current')
agNewCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTftpServerPort.setStatus('current')
agRackId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agRackId.setStatus('current')
agChassis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agChassis.setStatus('current')
agCurDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 421, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 348, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurNuevoLeonTam", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-ESBorneoCelebesBaliNusaTengaWTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Montenegro", 421), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Serbia", 348), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOcean-WallisAndFutuna", 420)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurDaylightSavings.setStatus('current')
agNewDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 421, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 348, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurNuevoLeonTam", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-ESBorneoCelebesBaliNusaTengaWTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Montenegro", 421), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Serbia", 348), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOceanWallisAndFutuna", 420)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewDaylightSavings.setStatus('current')
agCurCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setStatus('current')
agNewCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setStatus('current')
agCurCfgHttpsServerAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerAccess.setStatus('current')
agNewCfgHttpsServerAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerAccess.setStatus('current')
agCurBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibmnos-cli", 1), ("iscli", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurBootNxtCliMode.setStatus('current')
agNewBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibmnos-cli", 1), ("iscli", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewBootNxtCliMode.setStatus('current')
agCurBootNxtCliModePrompt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurBootNxtCliModePrompt.setStatus('current')
agNewBootNxtCliModePrompt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewBootNxtCliModePrompt.setStatus('current')
agCurHttpAcces = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurHttpAcces.setStatus('current')
agNewHttpAcces = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewHttpAcces.setStatus('current')
agCurCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgReminders.setStatus('current')
agNewCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgReminders.setStatus('current')
agCurCfgHprompt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHprompt.setStatus('current')
agNewCfgHprompt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHprompt.setStatus('current')
agCurCfgUserBBI = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgUserBBI.setStatus('current')
agNewCfgUserBBI = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgUserBBI.setStatus('current')
agCurCfgSysCustomDstState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSysCustomDstState.setStatus('current')
agNewCfgSysCustomDstState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSysCustomDstState.setStatus('current')
agCurCfgSysCustomDstStart = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSysCustomDstStart.setStatus('current')
agNewCfgSysCustomDstStart = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSysCustomDstStart.setStatus('current')
agCurCfgSysCustomDstEnd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSysCustomDstEnd.setStatus('current')
agNewCfgSysCustomDstEnd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSysCustomDstEnd.setStatus('current')
agHavePanicDump = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("havePanic", 1), ("noHavePanic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agHavePanicDump.setStatus('current')
agCurCfgResetControl = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgResetControl.setStatus('current')
agNewCfgResetControl = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgResetControl.setStatus('current')
agCurCfgSysDlight = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSysDlight.setStatus('current')
agNewCfgSysDlight = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSysDlight.setStatus('current')
agCurCfgErrDisableRecovery = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgErrDisableRecovery.setStatus('current')
agNewCfgErrDisableRecovery = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgErrDisableRecovery.setStatus('current')
agCurCfgErrDisableTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 117), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgErrDisableTimeout.setStatus('current')
agNewCfgErrDisableTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 118), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgErrDisableTimeout.setStatus('current')
agCurCfgTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetAccess.setStatus('current')
agNewCfgTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetAccess.setStatus('current')
agCurCfgDcbx = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgDcbx.setStatus('current')
agNewCfgDcbx = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgDcbx.setStatus('current')
agCurCfgDhcpMgta = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgDhcpMgta.setStatus('current')
agNewCfgDhcpMgta = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 124), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgDhcpMgta.setStatus('current')
agCurCfgDhcpMgtb = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgDhcpMgtb.setStatus('current')
agNewCfgDhcpMgtb = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgDhcpMgtb.setStatus('current')
serverPortsCurCfgPorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 127), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPortsCurCfgPorts.setStatus('current')
serverPortsNewCfgPorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 128), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPortsNewCfgPorts.setStatus('current')
serverPortsNewCfgAddPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 129), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverPortsNewCfgAddPort.setStatus('current')
serverPortsNewCfgRemovePort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 130), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverPortsNewCfgRemovePort.setStatus('current')
agCurBootProfile = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6))).clone(namedValues=NamedValues(("default", 0), ("routing", 1), ("aggregate", 2), ("hft", 3), ("ipv6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurBootProfile.setStatus('current')
agNewBootProfile = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6))).clone(namedValues=NamedValues(("default", 0), ("routing", 1), ("aggregate", 2), ("hft", 3), ("ipv6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewBootProfile.setStatus('current')
agNetboot = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNetboot.setStatus('current')
agNetbootTftpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 134), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNetbootTftpAddr.setStatus('current')
agNetbootCfgFile = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNetbootCfgFile.setStatus('current')
agCurRFC4741NetconfAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 142), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurRFC4741NetconfAccess.setStatus('current')
agNewRFC4741NetconfAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewRFC4741NetconfAccess.setStatus('current')
agCurRFC4741NetconfSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 144), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurRFC4741NetconfSessionTimeout.setStatus('current')
agNewRFC4741NetconfSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 145), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewRFC4741NetconfSessionTimeout.setStatus('current')
agCurRFC4741NetconfSshAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 146), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurRFC4741NetconfSshAccess.setStatus('current')
agNewRFC4741NetconfSshAccess = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewRFC4741NetconfSshAccess.setStatus('current')
agCurRFC4741NetconfSshPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 148), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurRFC4741NetconfSshPort.setStatus('current')
agNewRFC4741NetconfSshPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 149), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewRFC4741NetconfSshPort.setStatus('current')
agCurCfgCpuRateLimitArp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgCpuRateLimitArp.setStatus('current')
agNewCfgCpuRateLimitArp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 151), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgCpuRateLimitArp.setStatus('current')
agCurCfgCpuRateLimitBpdu = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgCpuRateLimitBpdu.setStatus('current')
agNewCfgCpuRateLimitBpdu = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 153), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgCpuRateLimitBpdu.setStatus('current')
agCurCfgCpuRateLimitCntl = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 154), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgCpuRateLimitCntl.setStatus('current')
agNewCfgCpuRateLimitCntl = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 155), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgCpuRateLimitCntl.setStatus('current')
agCurCfgCpuRateLimitOther = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 156), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgCpuRateLimitOther.setStatus('current')
agNewCfgCpuRateLimitOther = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 157), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgCpuRateLimitOther.setStatus('current')
agCurCfgLFDStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 158), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLFDStatus.setStatus('current')
agNewCfgLFDStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLFDStatus.setStatus('current')
agCurCfgLFDFlaps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 160), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLFDFlaps.setStatus('current')
agNewCfgLFDFlaps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 161), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLFDFlaps.setStatus('current')
agCurCfgLFDTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 162), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 500)).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLFDTime.setStatus('current')
agNewCfgLFDTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 163), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 500)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLFDTime.setStatus('current')
agCurCfgTrapSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 164), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapSrcLoopIf.setStatus('current')
agNewCfgTrapSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 165), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapSrcLoopIf.setStatus('current')
agCfgMtm = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mtmValue1", 1), ("mtmValue2", 2), ("mtmValue3", 3), ("mtmValue4", 4), ("mtmValue5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgMtm.setStatus('current')
agCurCfgDefipData = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 167), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgDefipData.setStatus('current')
agNewCfgDefipData = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 168), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgDefipData.setStatus('current')
agCurCfgDefipMgta = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 169), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgDefipMgta.setStatus('current')
agNewCfgDefipMgta = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 170), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgDefipMgta.setStatus('current')
agCurCfgDefipMgtb = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 171), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgDefipMgtb.setStatus('current')
agNewCfgDefipMgtb = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 1, 172), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgDefipMgtb.setStatus('current')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('current')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('current')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('current')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('current')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('current')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('current')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('current')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('current')
agCurCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogSev.setStatus('current')
agNewCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogSev.setStatus('current')
agCurCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setStatus('current')
agNewCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setStatus('current')
agCurCfgSyslogConsoleSev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogConsoleSev.setStatus('current')
agNewCfgSyslogConsoleSev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogConsoleSev.setStatus('current')
agCurCfgSyslogFlashSev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFlashSev.setStatus('current')
agNewCfgSyslogFlashSev = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFlashSev.setStatus('current')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('current')
agSyslogMsgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setStatus('current')
agCurCfgSyslogHostPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHostPort.setStatus('current')
agNewCfgSyslogHostPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHostPort.setStatus('current')
agCurCfgSyslog2HostPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2HostPort.setStatus('current')
agNewCfgSyslog2HostPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2HostPort.setStatus('current')
agCurCfgSyslogSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogSrcLoopIf.setStatus('current')
agNewCfgSyslogSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogSrcLoopIf.setStatus('current')
agSyslogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 11), )
if mibBuilder.loadTexts: agSyslogMsgTable.setStatus('current')
agSyslogMsgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 11, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agSyslogMsgIndex"))
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setStatus('current')
agSyslogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgIndex.setStatus('current')
agSyslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMessage.setStatus('current')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('current')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('current')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('current')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('current')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('current')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('current')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('current')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('current')
agNewCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStg.setStatus('current')
agCurCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStg.setStatus('current')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('current')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('current')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('current')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('current')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('current')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('current')
agNewCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapBgp.setStatus('current')
agCurCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapBgp.setStatus('current')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('current')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('current')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('current')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('current')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('current')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('current')
agNewCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setStatus('current')
agCurCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setStatus('current')
agNewCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setStatus('current')
agCurCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setStatus('current')
agNewCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCfg.setStatus('current')
agCurCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCfg.setStatus('current')
agNewCfgSyslogTrapServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapServer.setStatus('current')
agCurCfgSyslogTrapServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapServer.setStatus('current')
agNewCfgSyslogTrapDifftrak = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapDifftrak.setStatus('current')
agCurCfgSyslogTrapDifftrak = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapDifftrak.setStatus('current')
agNewCfgSyslogTrapHotlinks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapHotlinks.setStatus('current')
agCurCfgSyslogTrapHotlinks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapHotlinks.setStatus('current')
agNewCfgSyslogTrapLldp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapLldp.setStatus('current')
agCurCfgSyslogTrapLldp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapLldp.setStatus('current')
agNewCfgSyslogTrapAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapAll.setStatus('current')
agCurCfgSyslogTrapAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapAll.setStatus('current')
agNewCfgSyslogTrapIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIpv6.setStatus('current')
agCurCfgSyslogTrapIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIpv6.setStatus('current')
agNewCfgSyslogTrapFailover = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapFailover.setStatus('current')
agCurCfgSyslogTrapFailover = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapFailover.setStatus('current')
agNewCfgSyslogTrapLacp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapLacp.setStatus('current')
agCurCfgSyslogTrapLacp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapLacp.setStatus('current')
agNewCfgSyslogTrapLink = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapLink.setStatus('current')
agCurCfgSyslogTrapLink = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapLink.setStatus('current')
agNewCfgSyslogTrapOspfv3 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspfv3.setStatus('current')
agCurCfgSyslogTrapOspfv3 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspfv3.setStatus('current')
agNewCfgSyslogTrapDcbx = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapDcbx.setStatus('current')
agCurCfgSyslogTrapDcbx = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapDcbx.setStatus('current')
agNewCfgSyslogTrapFcoe = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapFcoe.setStatus('current')
agCurCfgSyslogTrapFcoe = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapFcoe.setStatus('current')
agNewCfgSyslogTrapVm = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVm.setStatus('current')
agCurCfgSyslogTrapVm = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVm.setStatus('current')
agNewCfgSyslogTrapVnic = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVnic.setStatus('current')
agCurCfgSyslogTrapVnic = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVnic.setStatus('current')
agNewCfgSyslogTrapCfgchg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCfgchg.setStatus('current')
agCurCfgSyslogTrapCfgchg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCfgchg.setStatus('current')
agNewCfgSyslogTrapVlag = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlag.setStatus('current')
agCurCfgSyslogTrapVlag = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlag.setStatus('current')
agNewCfgSyslogTrapIgmpGroup = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIgmpGroup.setStatus('current')
agCurCfgSyslogTrapIgmpGroup = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIgmpGroup.setStatus('current')
agNewCfgSyslogTrapIgmpMrouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIgmpMrouter.setStatus('current')
agCurCfgSyslogTrapIgmpMrouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIgmpMrouter.setStatus('current')
agNewCfgSyslogTrapIgmpQuerier = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIgmpQuerier.setStatus('current')
agCurCfgSyslogTrapIgmpQuerier = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIgmpQuerier.setStatus('current')
agNewCfgSyslogTrapMld = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMld.setStatus('current')
agCurCfgSyslogTrapMld = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 5, 12, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMld.setStatus('current')
agTransferServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferServer.setStatus('current')
agTransferImage = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3), ("boot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferImage.setStatus('current')
agTransferImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferImageFileName.setStatus('current')
agTransferCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferCfgFileName.setStatus('current')
agTransferDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferDumpFileName.setStatus('current')
agTransferAction = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5), ("img-put", 7), ("tsdump-put", 8), ("ca-get", 14), ("hostcert-get", 15), ("hostkey-get", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferAction.setStatus('current')
agTransferLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTransferLastActionStatus.setStatus('current')
agTransferPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferPort.setStatus('current')
agTransferUserName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferUserName.setStatus('current')
agTransferPassword = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferPassword.setStatus('current')
agTransferTSDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferTSDumpFileName.setStatus('current')
agTransferLastConfigurationActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successfully", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTransferLastConfigurationActionStatus.setStatus('current')
agTransferCaFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferCaFileName.setStatus('current')
agTransferHostCertFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferHostCertFileName.setStatus('current')
agTransferHostKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 7, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferHostKeyFileName.setStatus('current')
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('current')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('current')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('current')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('current')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('current')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('current')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('current')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('current')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('current')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('current')
agPortCurCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setStatus('current')
agPortCurCfgDscpRemarking = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDscpRemarking.setStatus('current')
agPortCurCfgPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortAlias.setStatus('current')
agPortCurCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgTagPVID.setStatus('current')
agPortCurCfgLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLearning.setStatus('current')
agPortCurCfgFloodBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFloodBlocking.setStatus('current')
agPortCurCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgType.setStatus('current')
agPortCurCfgLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkType.setStatus('current')
agPortCurCfgEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgEdge.setStatus('current')
agPortCurCfgErrDisableRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgErrDisableRecovery.setStatus('current')
agPortCurCfgUdld = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgUdld.setStatus('current')
agPortCurCfgUdldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("aggressive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgUdldMode.setStatus('current')
agPortCurCfgOam = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgOam.setStatus('current')
agPortCurCfgOamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgOamMode.setStatus('current')
agPortCurCfgBpduGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBpduGuard.setStatus('current')
agPortCurCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThreshold.setStatus('current')
agPortCurCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThresholdRate.setStatus('current')
agPortCurCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThreshold.setStatus('current')
agPortCurCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThresholdRate.setStatus('current')
agPortCurCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThreshold.setStatus('current')
agPortCurCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThresholdRate.setStatus('current')
agPortCurCfgMacAddrNotif = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMacAddrNotif.setStatus('current')
agPortCurCfgStpExtGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("loop", 1), ("root", 2), ("none", 3), ("default", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgStpExtGuard.setStatus('current')
agPortCurCfgLFDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLFDStatus.setStatus('current')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('current')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('current')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('current')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('current')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('current')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('current')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('current')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('current')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('current')
agPortNewCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setStatus('current')
agPortNewCfgDscpRemarking = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDscpRemarking.setStatus('current')
agPortNewCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgTagPVID.setStatus('current')
agPortNewCfgLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLearning.setStatus('current')
agPortNewCfgFloodBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFloodBlocking.setStatus('current')
agPortNewCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgType.setStatus('current')
agPortNewCfgLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agPortNewCfgLinkType.setStatus('current')
agPortNewCfgEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agPortNewCfgEdge.setStatus('current')
agPortNewCfgErrDisableRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgErrDisableRecovery.setStatus('current')
agPortNewCfgUdld = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgUdld.setStatus('current')
agPortNewCfgUdldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("aggressive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgUdldMode.setStatus('current')
agPortNewCfgOam = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgOam.setStatus('current')
agPortNewCfgOamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgOamMode.setStatus('current')
agPortNewCfgBpduGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBpduGuard.setStatus('current')
agPortNewCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThreshold.setStatus('current')
agPortNewCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThresholdRate.setStatus('current')
agPortNewCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThreshold.setStatus('current')
agPortNewCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThresholdRate.setStatus('current')
agPortNewCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThreshold.setStatus('current')
agPortNewCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThresholdRate.setStatus('current')
agPortNewCfgMacAddrNotif = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMacAddrNotif.setStatus('current')
agPortNewCfgStpExtGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("loop", 1), ("root", 2), ("none", 3), ("default", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgStpExtGuard.setStatus('current')
agPortNewCfgLFDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 2, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLFDStatus.setStatus('current')
sshCurCfgScpAdm = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgScpAdm.setStatus('current')
sshNewCfgScpAdm = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgScpAdm.setStatus('current')
sshNewCfgHKeyGen = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generate", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgHKeyGen.setStatus('current')
sshCurCfgSSHPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgSSHPort.setStatus('current')
sshNewCfgSSHPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgSSHPort.setStatus('current')
sshCurCfgScpApplySave = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgScpApplySave.setStatus('current')
sshNewCfgScpApplySave = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgScpApplySave.setStatus('current')
sshCurCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgStatus.setStatus('current')
sshNewCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 22, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgStatus.setStatus('current')
radCurCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryServer.setStatus('current')
radNewCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryServer.setStatus('current')
radCurCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryServer.setStatus('current')
radNewCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryServer.setStatus('current')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('current')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('current')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('current')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('current')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('current')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('current')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('current')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('current')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('current')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('current')
radCurCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgBackdoor.setStatus('current')
radNewCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgBackdoor.setStatus('current')
radCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setStatus('current')
radNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setStatus('current')
radCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecBd.setStatus('current')
radNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecBd.setStatus('current')
radCurCfgPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPorttoUse.setStatus('current')
radNewCfgPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPorttoUse.setStatus('current')
radCurCfgSecPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecPorttoUse.setStatus('current')
radNewCfgSecPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecPorttoUse.setStatus('current')
radCurCfgSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSrcLoopIf.setStatus('current')
radNewCfgSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 3, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSrcLoopIf.setStatus('current')
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('current')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('current')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 44640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('current')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('current')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('current')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('current')
agCurCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setStatus('current')
agNewCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setStatus('current')
agCurCfgNTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServerPort.setStatus('current')
agNewCfgNTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServerPort.setStatus('current')
agCurCfgNTPSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSecServerPort.setStatus('current')
agNewCfgNTPSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSecServerPort.setStatus('current')
agCurCfgNTPSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSrcLoopIf.setStatus('current')
agNewCfgNTPSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 4, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSrcLoopIf.setStatus('current')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('current')
agApplyConfig = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("apply", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfig.setStatus('current')
agApplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyTableSize.setStatus('current')
agApplyTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8, 5), )
if mibBuilder.loadTexts: agApplyTable.setStatus('current')
agApplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agApplyIndex"))
if mibBuilder.loadTexts: agApplyTableEntry.setStatus('current')
agApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyIndex.setStatus('current')
agApplyString = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 8, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyString.setStatus('current')
tacCurCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPrimaryServer.setStatus('current')
tacNewCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPrimaryServer.setStatus('current')
tacCurCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecondaryServer.setStatus('current')
tacNewCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecondaryServer.setStatus('current')
tacCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPort.setStatus('current')
tacNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPort.setStatus('current')
tacCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTimeout.setStatus('current')
tacNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTimeout.setStatus('current')
tacCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgRetries.setStatus('current')
tacNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgRetries.setStatus('current')
tacCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgState.setStatus('current')
tacNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgState.setStatus('current')
tacCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenString.setStatus('current')
tacNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenString.setStatus('current')
tacCurCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgBackdoor.setStatus('current')
tacNewCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgBackdoor.setStatus('current')
tacCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setStatus('current')
tacNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setStatus('current')
tacCurCfgCmdAuthor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmdAuthor.setStatus('current')
tacNewCfgCmdAuthor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmdAuthor.setStatus('current')
tacCurCfgCmdLogging = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmdLogging.setStatus('current')
tacNewCfgCmdLogging = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmdLogging.setStatus('current')
tacCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecBd.setStatus('current')
tacNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecBd.setStatus('current')
tacCurCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmap.setStatus('current')
tacNewCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmap.setStatus('current')
tacCurCfgEnaPassChange = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgEnaPassChange.setStatus('current')
tacNewCfgEnaPassChange = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgEnaPassChange.setStatus('current')
tacChangePassForUser = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacChangePassForUser.setStatus('current')
tacChangePassCurPass = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacChangePassCurPass.setStatus('current')
tacChangePassNewPass = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacChangePassNewPass.setStatus('current')
tacChangePassForServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacChangePassForServer.setStatus('current')
tacCurCfgPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPorttoUse.setStatus('current')
tacNewCfgPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPorttoUse.setStatus('current')
tacCurCfgSecPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecPorttoUse.setStatus('current')
tacNewCfgSecPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecPorttoUse.setStatus('current')
agTacacsUserMapCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 39), )
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTable.setStatus('current')
agTacacsUserMapCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 39, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agTacacsUserMapCurCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTableEntry.setStatus('current')
agTacacsUserMapCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 39, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgUId.setStatus('current')
agTacacsUserMapCurCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgMapping.setStatus('current')
agTacacsUserMapNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 40), )
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTable.setStatus('current')
tacNewCfgDirectedRequest = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("restricted", 2), ("no-truncate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgDirectedRequest.setStatus('current')
tacCurCfgDirectedRequest = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("restricted", 2), ("no-truncate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgDirectedRequest.setStatus('current')
agTacacsUserMapNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 40, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agTacacsUserMapNewCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTableEntry.setStatus('current')
agTacacsUserMapNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgUId.setStatus('current')
agTacacsUserMapNewCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgMapping.setStatus('current')
tacCurCfgAttempts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAttempts.setStatus('current')
tacNewCfgAttempts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAttempts.setStatus('current')
tacCurBypassEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurBypassEnable.setStatus('current')
tacNewBypassEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewBypassEnable.setStatus('current')
tacCurCfgEnableAccounting = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgEnableAccounting.setStatus('current')
tacNewCfgEnableAccounting = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgEnableAccounting.setStatus('current')
tacCurCfgSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSrcLoopIf.setStatus('current')
tacNewCfgSrcLoopIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 11, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSrcLoopIf.setStatus('current')
agMgmtNetTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setStatus('current')
agCurCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 2), )
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setStatus('current')
agCurCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agCurCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setStatus('current')
agCurCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setStatus('current')
agCurCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setStatus('current')
agCurCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setStatus('current')
agNewCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 3), )
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setStatus('current')
agNewCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agNewCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setStatus('current')
agNewCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setStatus('current')
agNewCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setStatus('current')
agNewCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setStatus('current')
agNewCfgMgmtNetDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setStatus('current')
agMgmtNetClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNetClear.setStatus('current')
agCfgBootResetParameters = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootResetParameters.setStatus('current')
agCfgBootReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootReset.setStatus('current')
agCfgBootNxtResetTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgBootNxtResetTime.setStatus('current')
agCfgBootPendingReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("pending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgBootPendingReset.setStatus('current')
agAccessUserMaxUserID = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserMaxUserID.setStatus('current')
agAccessCurStrongPassword = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessCurStrongPassword.setStatus('current')
agAccessNewStrongPassword = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agAccessNewStrongPassword.setStatus('current')
agAccessCurStrongPassValidity = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessCurStrongPassValidity.setStatus('current')
agAccessNewStrongPassValidity = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agAccessNewStrongPassValidity.setStatus('current')
agAccessCurStrongPassWarning = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessCurStrongPassWarning.setStatus('current')
agAccessNewStrongPassWarning = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agAccessNewStrongPassWarning.setStatus('current')
agAccessCurStrongPassFailLog = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessCurStrongPassFailLog.setStatus('current')
agAccessNewStrongPassFailLog = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agAccessNewStrongPassFailLog.setStatus('current')
agAccessCurDefaultAdmin = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessCurDefaultAdmin.setStatus('current')
agAccessNewDefaultAdmin = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agAccessNewDefaultAdmin.setStatus('current')
agAccessCurStrongPassLockout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessCurStrongPassLockout.setStatus('current')
agAccessNewStrongPassLockout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agAccessNewStrongPassLockout.setStatus('current')
agAccessCurStrongPassAttemptsMaxFail = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessCurStrongPassAttemptsMaxFail.setStatus('current')
agAccessNewStrongPassAttemptsMaxFail = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agAccessNewStrongPassAttemptsMaxFail.setStatus('current')
agAccessUserCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 2), )
if mibBuilder.loadTexts: agAccessUserCurCfgTable.setStatus('current')
agAccessUserCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agAccessUserCurCfgUId"))
if mibBuilder.loadTexts: agAccessUserCurCfgTableEntry.setStatus('current')
agAccessUserCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgUId.setStatus('current')
agAccessUserCurCos = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCos.setStatus('current')
agAccessUserCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgName.setStatus('current')
agAccessUserCurCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgPswd.setStatus('current')
agAccessUserCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgState.setStatus('current')
agAccessUserNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3), )
if mibBuilder.loadTexts: agAccessUserNewCfgTable.setStatus('current')
agAccessUserNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agAccessUserNewCfgUId"))
if mibBuilder.loadTexts: agAccessUserNewCfgTableEntry.setStatus('current')
agAccessUserNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserNewCfgUId.setStatus('current')
agAccessUserNewCos = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCos.setStatus('current')
agAccessUserNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgName.setStatus('current')
agAccessUserNewCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgPswd.setStatus('current')
agAccessUserNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgState.setStatus('current')
agAccessUserNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 19, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgDelete.setStatus('current')
ldapCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgPrimaryIpAddr.setStatus('current')
ldapNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgPrimaryIpAddr.setStatus('current')
ldapCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgSecondaryIpAddr.setStatus('current')
ldapNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgSecondaryIpAddr.setStatus('current')
ldapCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgPort.setStatus('current')
ldapNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgPort.setStatus('current')
ldapCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgRetries.setStatus('current')
ldapNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgRetries.setStatus('current')
ldapCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgTimeout.setStatus('current')
ldapNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgTimeout.setStatus('current')
ldapCurCfgDomain = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgDomain.setStatus('current')
ldapNewCfgDomain = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgDomain.setStatus('current')
ldapCurCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgBackdoor.setStatus('current')
ldapNewCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgBackdoor.setStatus('current')
ldapCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgState.setStatus('current')
ldapNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgState.setStatus('current')
ldapCurCfgPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgPorttoUse.setStatus('current')
ldapNewCfgPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgPorttoUse.setStatus('current')
ldapCurCfgSecPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapCurCfgSecPorttoUse.setStatus('current')
ldapNewCfgSecPorttoUse = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 21, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapNewCfgSecPorttoUse.setStatus('current')
sflowCurCfgServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowCurCfgServerAddress.setStatus('current')
sflowNewCfgServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sflowNewCfgServerAddress.setStatus('current')
sflowCurCfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowCurCfgServerPort.setStatus('current')
sflowNewCfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sflowNewCfgServerPort.setStatus('current')
sflowCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowCurCfgState.setStatus('current')
sflowNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sflowNewCfgState.setStatus('current')
sflowCurPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 7), )
if mibBuilder.loadTexts: sflowCurPortCfgTable.setStatus('current')
sflowCurPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "sflowCurPortCfgTableId"))
if mibBuilder.loadTexts: sflowCurPortCfgTableEntry.setStatus('current')
sflowCurPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 7, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowCurPortCfgTableId.setStatus('current')
sflowCurPortSampling = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowCurPortSampling.setStatus('current')
sflowCurPortPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowCurPortPolling.setStatus('current')
sflowNewPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 8), )
if mibBuilder.loadTexts: sflowNewPortCfgTable.setStatus('current')
sflowNewPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "sflowNewPortCfgTableId"))
if mibBuilder.loadTexts: sflowNewPortCfgTableEntry.setStatus('current')
sflowNewPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 8, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowNewPortCfgTableId.setStatus('current')
sflowNewPortSampling = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sflowNewPortSampling.setStatus('current')
sflowNewPortPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sflowNewPortPolling.setStatus('current')
sflowCurCfgMgmtPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sflowCurCfgMgmtPort.setStatus('current')
sflowNewCfgMgmtPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 1, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgta", 2), ("mgtb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sflowNewCfgMgmtPort.setStatus('current')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('current')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('current')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('current')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('current')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('current')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('current')
pktStatsMediumsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setStatus('current')
pktStatsJumbosHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setStatus('current')
pktStatsSmallsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setStatus('current')
mpCpuStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setStatus('current')
mpCpuStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setStatus('current')
mpCpuStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setStatus('current')
cpuUtilProcessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5), )
if mibBuilder.loadTexts: cpuUtilProcessStatsTable.setStatus('current')
cpuUtilProcessStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "processId"))
if mibBuilder.loadTexts: cpuUtilProcessStatsTableEntry.setStatus('current')
processId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processId.setStatus('current')
processName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processName.setStatus('current')
cpuProcessUtil1Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuProcessUtil1Sec.setStatus('current')
cpuProcessUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuProcessUtil5Sec.setStatus('current')
cpuProcessUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuProcessUtil1Min.setStatus('current')
cpuProcessUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuProcessUtil5Min.setStatus('current')
processStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 2, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processStatus.setStatus('current')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
portStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "portStatsIndx"))
if mibBuilder.loadTexts: portStatsTableEntry.setStatus('current')
tcpControlBlocksTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1), )
if mibBuilder.loadTexts: tcpControlBlocksTable.setStatus('current')
tcpControlBlocksTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "tcpControlBlocksIndx"))
if mibBuilder.loadTexts: tcpControlBlocksTableEntry.setStatus('current')
tcpControlBlocksIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpControlBlocksIndx.setStatus('current')
destAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destAddr.setStatus('current')
remotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePort.setStatus('current')
sourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceAddr.setStatus('current')
localPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localPort.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('current')
state = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: state.setStatus('current')
tcpMGMTControlBlocksTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2), )
if mibBuilder.loadTexts: tcpMGMTControlBlocksTable.setStatus('current')
tcpMGMTTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "tcpMGMTIndx"))
if mibBuilder.loadTexts: tcpMGMTTableEntry.setStatus('current')
tcpMGMTIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMGMTIndx.setStatus('current')
recvQ = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvQ.setStatus('current')
sentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentQ.setStatus('current')
localAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localAddress.setStatus('current')
foreignAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignAddress.setStatus('current')
stateMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 21, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateMgmt.setStatus('current')
udpControlBlocksTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 1), )
if mibBuilder.loadTexts: udpControlBlocksTable.setStatus('current')
udpControlBlocksTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "udpMpLocalPort"))
if mibBuilder.loadTexts: udpControlBlocksTableEntry.setStatus('current')
udpMpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpMpLocalPort.setStatus('current')
udpMpState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpMpState.setStatus('current')
udpMGMTControlBlocksTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2), )
if mibBuilder.loadTexts: udpMGMTControlBlocksTable.setStatus('current')
udpMGMTTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "udpMGMTIndx"))
if mibBuilder.loadTexts: udpMGMTTableEntry.setStatus('current')
udpMGMTIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpMGMTIndx.setStatus('current')
recvQUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvQUdp.setStatus('current')
sentQUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentQUdp.setStatus('current')
localAddressUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localAddressUdp.setStatus('current')
foreignAddressUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignAddressUdp.setStatus('current')
stateMgmtUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 22, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateMgmtUdp.setStatus('current')
portStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndx.setStatus('current')
portStatsPhyIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setStatus('current')
portStatsPhyIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setStatus('current')
portStatsPhyIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setStatus('current')
portStatsPhyIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setStatus('current')
portStatsPhyIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setStatus('current')
portStatsPhyIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setStatus('current')
portStatsPhyIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setStatus('current')
portStatsPhyIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setStatus('current')
portStatsPhyIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setStatus('current')
portStatsPhyIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setStatus('current')
portStatsPhyIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setStatus('current')
portStatsPhyIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setStatus('current')
portStatsPhyIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setStatus('current')
portStatsPhyIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setStatus('current')
portStatsPhyIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInMulticastPkts.setStatus('current')
portStatsPhyIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutMulticastPkts.setStatus('current')
portStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatsClear.setStatus('current')
portStatsLinkStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsLinkStateChange.setStatus('current')
portStatsPhyIfInFctlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInFctlPkts.setStatus('current')
portStatsPhyIfOutFctlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutFctlPkts.setStatus('current')
portStatsPhyIfInFctlPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInFctlPktsRate.setStatus('current')
portStatsPhyIfOutFctlPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutFctlPktsRate.setStatus('current')
portStatsDot1PortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsDot1PortInFrames.setStatus('current')
portStatsDot1PortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsDot1PortOutFrames.setStatus('current')
portStatsDot1PortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsDot1PortInDiscards.setStatus('current')
portStatsDot1TpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsDot1TpLearnedEntryDiscards.setStatus('current')
portStatsDot1StpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsDot1StpPortForwardTransitions.setStatus('current')
portMgmtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3), )
if mibBuilder.loadTexts: portMgmtStatsTable.setStatus('current')
portMgmtStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "portMgmtStatsIndx"))
if mibBuilder.loadTexts: portMgmtStatsTableEntry.setStatus('current')
portMgmtStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsIndx.setStatus('current')
portMgmtStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsRxBytes.setStatus('current')
portMgmtStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsTxBytes.setStatus('current')
portMgmtStatsRxpackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsRxpackets.setStatus('current')
portMgmtStatsTxpackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsTxpackets.setStatus('current')
portMgmtStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsRxErrors.setStatus('current')
portMgmtStatsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsTxErrors.setStatus('current')
portMgmtStatsRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsRxDropped.setStatus('current')
portMgmtStatsTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsTxDropped.setStatus('current')
portMgmtStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsRxOverruns.setStatus('current')
portMgmtStatsTxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsTxOverruns.setStatus('current')
portMgmtStatsRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsRxFrame.setStatus('current')
portMgmtStatsTxCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsTxCarrier.setStatus('current')
portMgmtStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsRxMulticast.setStatus('current')
portMgmtStatsTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMgmtStatsTxCollisions.setStatus('current')
allportsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4), )
if mibBuilder.loadTexts: allportsStatsTable.setStatus('current')
allportsStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "allportsStatsIndx"))
if mibBuilder.loadTexts: allportsStatsTableEntry.setStatus('current')
allportsStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsIndx.setStatus('current')
allportsStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsDescr.setStatus('current')
allportsStatsSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5), ("mbs10000", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsSpeed.setStatus('current')
allportsStatsPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsPhysAddress.setStatus('current')
allportsStatsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsAdminStatus.setStatus('current')
allportsStatsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOperStatus.setStatus('current')
allportsStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInOctets.setStatus('current')
allportsStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutOctets.setStatus('current')
allportsStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInPkts.setStatus('current')
allportsStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutPkts.setStatus('current')
allportsStatsInUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInUcast.setStatus('current')
allportsStatsOutUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutUcast.setStatus('current')
allportsStatsInBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInBcast.setStatus('current')
allportsStatsOutBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutBcast.setStatus('current')
allportsStatsInMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInMcast.setStatus('current')
allportsStatsOutMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutMcast.setStatus('current')
allportsStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInDiscards.setStatus('current')
allportsStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutDiscards.setStatus('current')
allportsStatsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInErrors.setStatus('current')
allportsStatsOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutErrors.setStatus('current')
allportsStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInUnknownProtos.setStatus('current')
allportsStatsOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutQLen.setStatus('current')
allportsStatsLinkStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsLinkStateChange.setStatus('current')
allportsStatsInOctetsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInOctetsRate.setStatus('current')
allportsStatsOutOctetsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutOctetsRate.setStatus('current')
allportsStatsInUcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInUcastRate.setStatus('current')
allportsStatsOutUcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutUcastRate.setStatus('current')
allportsStatsInBcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInBcastRate.setStatus('current')
allportsStatsOutBcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutBcastRate.setStatus('current')
allportsStatsInMcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInMcastRate.setStatus('current')
allportsStatsOutMcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutMcastRate.setStatus('current')
allportsStatsInDiscardsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInDiscardsRate.setStatus('current')
allportsStatsOutDiscardsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutDiscardsRate.setStatus('current')
allportsStatsInErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInErrorsRate.setStatus('current')
allportsStatsOutErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutErrorsRate.setStatus('current')
clearPortsStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearPortsStats.setStatus('current')
dot1RateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7), )
if mibBuilder.loadTexts: dot1RateStatsTable.setStatus('current')
dot1RateStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "dot1RateStatsIndx"))
if mibBuilder.loadTexts: dot1RateStatsTableEntry.setStatus('current')
dot1RateStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1RateStatsIndx.setStatus('current')
dot1RatePortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1RatePortInFrames.setStatus('current')
dot1RatePortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1RatePortOutFrames.setStatus('current')
dot1RatePortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1RatePortInDiscards.setStatus('current')
dot1RateTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1RateTpLearnedEntryDiscards.setStatus('current')
dot1RateStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1RateStpPortForwardTransitions.setStatus('current')
dot3RateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8), )
if mibBuilder.loadTexts: dot3RateStatsTable.setStatus('current')
dot3RateStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "dot3RateStatsIndx"))
if mibBuilder.loadTexts: dot3RateStatsTableEntry.setStatus('current')
dot3RateStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsIndx.setStatus('current')
dot3RateStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsAlignmentErrors.setStatus('current')
dot3RateStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsFCSErrors.setStatus('current')
dot3RateStatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsSingleCollisionFrames.setStatus('current')
dot3RateStatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsMultipleCollisionFrames.setStatus('current')
dot3RateStatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsLateCollisions.setStatus('current')
dot3RateStatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsExcessiveCollisions.setStatus('current')
dot3RateStatsInternalMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsInternalMacTransmitErrors.setStatus('current')
dot3RateStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsFrameTooLongs.setStatus('current')
dot3RateStatsInternalMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 3, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3RateStatsInternalMacReceiveErrors.setStatus('current')
ntpPrimaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setStatus('current')
ntpPrimaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setStatus('current')
ntpPrimaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setStatus('current')
ntpSecondaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setStatus('current')
ntpSecondaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setStatus('current')
ntpSecondaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setStatus('current')
ntpLastUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateServer.setStatus('current')
ntpLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateTime.setStatus('current')
ntpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClearStats.setStatus('current')
ntpSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSystemCurrentTime.setStatus('current')
aclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 1), )
if mibBuilder.loadTexts: aclStatsTable.setStatus('current')
aclStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclStatsIndex"))
if mibBuilder.loadTexts: aclStatsTableEntry.setStatus('current')
aclStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatsIndex.setStatus('current')
aclStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatsHits.setStatus('current')
aclClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclClearStats.setStatus('current')
vmapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 2), )
if mibBuilder.loadTexts: vmapStatsTable.setStatus('current')
vmapStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapStatsIndex"))
if mibBuilder.loadTexts: vmapStatsTableEntry.setStatus('current')
vmapStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapStatsIndex.setStatus('current')
vmapStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapStatsHits.setStatus('current')
vmapClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapClearStats.setStatus('current')
acl6StatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 3), )
if mibBuilder.loadTexts: acl6StatsTable.setStatus('current')
acl6StatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclStatsIndex"))
if mibBuilder.loadTexts: acl6StatsTableEntry.setStatus('current')
acl6StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6StatsIndex.setStatus('current')
acl6StatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6StatsHits.setStatus('current')
acl6ClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6ClearStats.setStatus('current')
snmpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpClearStats.setStatus('current')
agDiffState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diff", 1), ("flashdiff", 2), ("idle", 3), ("inprogress", 4), ("complete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agDiffState.setStatus('current')
agDiffTableSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffTableSize.setStatus('current')
agDiffTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 4, 4), )
if mibBuilder.loadTexts: agDiffTable.setStatus('current')
agDiffTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 4, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agDiffIndex"))
if mibBuilder.loadTexts: agDiffTableEntry.setStatus('current')
agDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffIndex.setStatus('current')
agDiffString = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffString.setStatus('current')
agCfgDumpState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dump", 1), ("idle", 2), ("inprogress", 3), ("complete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgDumpState.setStatus('current')
agCfgDumpTableSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpTableSize.setStatus('current')
agCfgDumpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 5, 4), )
if mibBuilder.loadTexts: agCfgDumpTable.setStatus('current')
agCfgDumpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 5, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "agCfgDumpIndex"))
if mibBuilder.loadTexts: agCfgDumpTableEntry.setStatus('current')
agCfgDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpIndex.setStatus('current')
agCfgDumpString = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpString.setStatus('current')
totalMemoryStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMemoryStats.setStatus('current')
memoryFreeStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreeStats.setStatus('current')
memorySharedStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySharedStats.setStatus('current')
memoryBufferStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryBufferStats.setStatus('current')
swapTotalStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapTotalStats.setStatus('current')
swapFreeStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapFreeStats.setStatus('current')
highTotalStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highTotalStats.setStatus('current')
highFreeStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 12, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highFreeStats.setStatus('current')
geaportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 9, 1), )
if mibBuilder.loadTexts: geaportInfoTable.setStatus('current')
geaportInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 9, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "geaportInfoLogicalIndex"))
if mibBuilder.loadTexts: geaportInfoTableEntry.setStatus('current')
geaportInfoLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 9, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoLogicalIndex.setStatus('current')
geaportInfoAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoAlias.setStatus('current')
geaportInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoPort.setStatus('current')
geaportInfoUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoUnit.setStatus('current')
sfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1), )
if mibBuilder.loadTexts: sfpInfoTable.setStatus('current')
sfpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "sfpInfoIndx"))
if mibBuilder.loadTexts: sfpInfoTableEntry.setStatus('current')
sfpInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoIndx.setStatus('current')
sfpInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoPort.setStatus('current')
sfpInfoDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoDevice.setStatus('current')
sfpInfoTXEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("notInstalled", 1), ("enabled", 2), ("disabled", 3), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoTXEnable.setStatus('current')
sfpInfoRXSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("down", 2), ("link", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoRXSignal.setStatus('current')
sfpInfoTXFault = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("fault", 2), ("none", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoTXFault.setStatus('current')
sfpInfoApproved = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("notInstalled", 1), ("notApproved", 2), ("sfpApproved", 3), ("sfpAccepted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoApproved.setStatus('current')
sfpInfoVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoVendor.setStatus('current')
sfpInfoSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoSerial.setStatus('current')
accessInfoClearAllUserFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessInfoClearAllUserFailAttempts.setStatus('current')
accessInfoClearAllUserLocks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessInfoClearAllUserLocks.setStatus('current')
accessUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 3), )
if mibBuilder.loadTexts: accessUserInfoTable.setStatus('current')
accessUserInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "accessUserInfoIndex"))
if mibBuilder.loadTexts: accessUserInfoTableEntry.setStatus('current')
accessUserInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessUserInfoIndex.setStatus('current')
accessUserInfoLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessUserInfoLockState.setStatus('current')
accessUserInfoClearFailAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessUserInfoClearFailAttempts.setStatus('current')
accessUserInfoClearLock = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessUserInfoClearLock.setStatus('current')
layer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2))
layer2Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1))
layer2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2))
layer2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3))
layer2Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 4))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2))
stgCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3))
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4))
lacp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5))
thash = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6))
mstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7))
l2GeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8))
failoverCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10))
failoverCurCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgOnState.setStatus('current')
failoverNewCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failoverNewCfgOnState.setStatus('current')
failoverMaxTriggerEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverMaxTriggerEntries.setStatus('current')
failoverCurCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6), )
if mibBuilder.loadTexts: failoverCurCfgTriggerTable.setStatus('current')
failoverCurCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "failoverCurCfgTriggerId"))
if mibBuilder.loadTexts: failoverCurCfgTriggerTableEntry.setStatus('current')
failoverCurCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerId.setStatus('current')
failoverCurCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerState.setStatus('current')
failoverCurCfgTriggerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerLimit.setStatus('current')
failoverCurCfgTriggerMmonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerMmonPort.setStatus('current')
failoverCurCfgTriggerMmonTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerMmonTrunk.setStatus('current')
failoverCurCfgTriggerMmonKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerMmonKey.setStatus('current')
failoverCurCfgTriggerMconPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerMconPort.setStatus('current')
failoverCurCfgTriggerMconTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerMconTrunk.setStatus('current')
failoverCurCfgTriggerMconKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverCurCfgTriggerMconKey.setStatus('current')
failoverNewCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7), )
if mibBuilder.loadTexts: failoverNewCfgTriggerTable.setStatus('current')
failoverNewCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "failoverNewCfgTriggerId"))
if mibBuilder.loadTexts: failoverNewCfgTriggerTableEntry.setStatus('current')
failoverNewCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverNewCfgTriggerId.setStatus('current')
failoverNewCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failoverNewCfgTriggerState.setStatus('current')
failoverNewCfgTriggerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failoverNewCfgTriggerLimit.setStatus('current')
failoverNewCfgTriggerMmonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonPort.setStatus('current')
failoverNewCfgTriggerMmonPortAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 11), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonPortAdd.setStatus('current')
failoverNewCfgTriggerMmonPortRem = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 12), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonPortRem.setStatus('current')
failoverNewCfgTriggerMmonTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonTrunk.setStatus('current')
failoverNewCfgTriggerMmonTrunkAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonTrunkAdd.setStatus('current')
failoverNewCfgTriggerMmonTrunkRem = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonTrunkRem.setStatus('current')
failoverNewCfgTriggerMmonKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonKey.setStatus('current')
failoverNewCfgTriggerMmonKeyAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonKeyAdd.setStatus('current')
failoverNewCfgTriggerMmonKeyRem = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMmonKeyRem.setStatus('current')
failoverNewCfgTriggerMconPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconPort.setStatus('current')
failoverNewCfgTriggerMconPortAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 20), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconPortAdd.setStatus('current')
failoverNewCfgTriggerMconPortRem = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 21), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconPortRem.setStatus('current')
failoverNewCfgTriggerMconTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconTrunk.setStatus('current')
failoverNewCfgTriggerMconTrunkAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconTrunkAdd.setStatus('current')
failoverNewCfgTriggerMconTrunkRem = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconTrunkRem.setStatus('current')
failoverNewCfgTriggerMconKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconKey.setStatus('current')
failoverNewCfgTriggerMconKeyAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconKeyAdd.setStatus('current')
failoverNewCfgTriggerMconKeyRem = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerMconKeyRem.setStatus('current')
failoverNewCfgTriggerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 10, 7, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: failoverNewCfgTriggerDelete.setStatus('current')
fdb = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13))
hotlinksCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14))
hotlinksCurCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgOnState.setStatus('current')
hotlinksNewCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgOnState.setStatus('current')
hotlinksCurCfgFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgFdbUpdateState.setStatus('current')
hotlinksNewCfgFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgFdbUpdateState.setStatus('current')
hotlinksMaxTriggerEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksMaxTriggerEntries.setStatus('current')
hotlinksCurCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6), )
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTable.setStatus('current')
hotlinksCurCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "hotlinksCurCfgTriggerId"))
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTableEntry.setStatus('current')
hotlinksCurCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerId.setStatus('current')
hotlinksCurCfgTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerName.setStatus('current')
hotlinksCurCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerState.setStatus('current')
hotlinksCurCfgTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerPreemptState.setStatus('current')
hotlinksCurCfgTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerFdelay.setStatus('current')
hotlinksCurCfgTriggerMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterPort.setStatus('current')
hotlinksCurCfgTriggerMasterTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterTrunk.setStatus('current')
hotlinksCurCfgTriggerBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupPort.setStatus('current')
hotlinksCurCfgTriggerBackupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupTrunk.setStatus('current')
hotlinksCurCfgTriggerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerDelete.setStatus('current')
hotlinksCurCfgTriggerMasterAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterAdminkey.setStatus('current')
hotlinksCurCfgTriggerBackupAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupAdminkey.setStatus('current')
hotlinksNewCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7), )
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTable.setStatus('current')
hotlinksNewCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "hotlinksNewCfgTriggerId"))
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTableEntry.setStatus('current')
hotlinksNewCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerId.setStatus('current')
hotlinksNewCfgTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerName.setStatus('current')
hotlinksNewCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerState.setStatus('current')
hotlinksNewCfgTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerPreemptState.setStatus('current')
hotlinksNewCfgTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerFdelay.setStatus('current')
hotlinksNewCfgTriggerMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterPort.setStatus('current')
hotlinksNewCfgTriggerMasterTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterTrunk.setStatus('current')
hotlinksNewCfgTriggerBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupPort.setStatus('current')
hotlinksNewCfgTriggerBackupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupTrunk.setStatus('current')
hotlinksNewCfgTriggerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerDelete.setStatus('current')
hotlinksNewCfgTriggerMasterAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterAdminkey.setStatus('current')
hotlinksNewCfgTriggerBackupAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupAdminkey.setStatus('current')
hotlinksCurCfgBpduState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgBpduState.setStatus('current')
hotlinksNewCfgBpduState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgBpduState.setStatus('current')
hotlinksCurCfgFdbUpdateRate = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgFdbUpdateRate.setStatus('current')
hotlinksNewCfgFdbUpdateRate = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 14, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgFdbUpdateRate.setStatus('current')
lldpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15))
vlagCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18))
vlagIslCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 1))
ecpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 19))
thashL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1))
mirrPortMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1))
mstGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1))
mstCistCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2))
fdbGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 1))
fdbCurCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgAgingTime.setStatus('current')
fdbNewCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbNewCfgAgingTime.setStatus('current')
fdbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 1))
stpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2))
lacpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4))
hotlinksStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6))
hotlinksStatsTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1), )
if mibBuilder.loadTexts: hotlinksStatsTriggerTable.setStatus('current')
hotlinksStatsTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "hotlinksStatsTriggerId"))
if mibBuilder.loadTexts: hotlinksStatsTriggerTableEntry.setStatus('current')
hotlinksStatsTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerId.setStatus('current')
hotlinksStatsTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerName.setStatus('current')
hotlinksStatsTriggerMasterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerMasterActive.setStatus('current')
hotlinksStatsTriggerBackupActive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerBackupActive.setStatus('current')
hotlinksStatsTriggerFdbUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbUpdate.setStatus('current')
hotlinksStatsTriggerFdbFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbFailed.setStatus('current')
lldpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7))
oamStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8))
vlagStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11))
vlagStatsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 1))
vlagStatsIsl = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 2))
vlagStatsHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 3))
vlagStatsLacp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 4))
vlagStatsPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5))
vlagStatsIgmp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 6))
fdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1))
stpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2))
lacpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3))
cistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4))
genInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 7))
vlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 5))
trunkGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9))
hotlinksInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10))
hotlinksInfoOnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoOnState.setStatus('current')
hotlinksInfoFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoFdbUpdateState.setStatus('current')
hotlinksInfoTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3), )
if mibBuilder.loadTexts: hotlinksInfoTriggerTable.setStatus('current')
hotlinksInfoBpduState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoBpduState.setStatus('current')
hotlinksInfoFdbUpdateRate = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoFdbUpdateRate.setStatus('current')
hotlinksInfoTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "hotlinksInfoTriggerId"))
if mibBuilder.loadTexts: hotlinksInfoTriggerTableEntry.setStatus('current')
hotlinksInfoTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerId.setStatus('current')
hotlinksInfoTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerName.setStatus('current')
hotlinksInfoTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerState.setStatus('current')
hotlinksInfoTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerPreemptState.setStatus('current')
hotlinksInfoTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerFdelay.setStatus('current')
hotlinksInfoTriggerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 10, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerActive.setStatus('current')
lldpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11))
cistGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1))
oamInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12))
udldInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13))
failoverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14))
failoverInfoState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoState.setStatus('current')
failoverInfoTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3), )
if mibBuilder.loadTexts: failoverInfoTriggerTable.setStatus('current')
failoverInfoTriggerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "failoverInfoTriggerId"))
if mibBuilder.loadTexts: failoverInfoTriggerEntry.setStatus('current')
failoverInfoTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerId.setStatus('current')
failoverInfoTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerState.setStatus('current')
failoverInfoTriggerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerLimit.setStatus('current')
failoverInfoTriggerMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerMonitorState.setStatus('current')
failoverInfoTriggerMonitorPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerMonitorPorts.setStatus('current')
failoverInfoTriggerControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-controlled", 1), ("auto-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerControlState.setStatus('current')
failoverInfoTriggerControlPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerControlPorts.setStatus('current')
failoverInfoMonPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 4), )
if mibBuilder.loadTexts: failoverInfoMonPortStateTable.setStatus('current')
failoverInfoTriggerMonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "failoverInfoTriggerMonId"), (0, "IBM-GbTOR-10G-L2L3-MIB", "failoverInfoTriggerMonPortId"))
if mibBuilder.loadTexts: failoverInfoTriggerMonPortEntry.setStatus('current')
failoverInfoTriggerMonId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerMonId.setStatus('current')
failoverInfoTriggerMonPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 4, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerMonPortId.setStatus('current')
failoverInfoTriggerMonPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("failed", 0), ("operational", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerMonPortStatus.setStatus('current')
failoverInfoCtlPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 5), )
if mibBuilder.loadTexts: failoverInfoCtlPortStateTable.setStatus('current')
failoverInfoTriggerCtlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "failoverInfoTriggerCtlId"), (0, "IBM-GbTOR-10G-L2L3-MIB", "failoverInfoTriggerCtlPortId"))
if mibBuilder.loadTexts: failoverInfoTriggerCtlPortEntry.setStatus('current')
failoverInfoTriggerCtlId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerCtlId.setStatus('current')
failoverInfoTriggerCtlPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 5, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerCtlPortId.setStatus('current')
failoverInfoTriggerCtlPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 14, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("failed", 0), ("operational", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverInfoTriggerCtlPortStatus.setStatus('current')
vlagInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16))
vlagInfoSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1))
vlagInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2))
vlagInfoIslGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 2))
ecpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17))
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('current')
vlanMaxVlanID = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxVlanID.setStatus('current')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('current')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('current')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('current')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('current')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('current')
vlanCurCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgStg.setStatus('current')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('current')
vlanCurCfgPrVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("isolated", 2), ("community", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPrVlanType.setStatus('current')
vlanCurCfgPrVlanMapPriId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPrVlanMapPriId.setStatus('current')
vlanCurCfgPrVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPrVlanState.setStatus('current')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('current')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('current')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('current')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('current')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('current')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('current')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 5), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('current')
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 6), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('current')
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('current')
vlanNewCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgStg.setStatus('current')
vlanNewCfgPrVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("isolated", 2), ("community", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgPrVlanType.setStatus('current')
vlanNewCfgPrVlanMapPriId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgPrVlanMapPriId.setStatus('current')
vlanNewCfgPrVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgPrVlanState.setStatus('current')
lacpCurSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemPriority.setStatus('current')
lacpNewSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemPriority.setStatus('current')
lacpCurSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setStatus('current')
lacpNewSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setStatus('current')
lacpCurPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 7), )
if mibBuilder.loadTexts: lacpCurPortCfgTable.setStatus('current')
lacpCurPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lacpCurPortCfgTableId"))
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setStatus('current')
lacpCurPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 7, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setStatus('current')
lacpCurPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortState.setStatus('current')
lacpCurPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setStatus('current')
lacpCurPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setStatus('current')
lacpCurPortActorMinLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorMinLinks.setStatus('current')
lacpNewPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8), )
if mibBuilder.loadTexts: lacpNewPortCfgTable.setStatus('current')
lacpNewPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lacpNewPortCfgTableId"))
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setStatus('current')
lacpNewPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setStatus('current')
lacpNewPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortState.setStatus('current')
lacpNewPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setStatus('current')
lacpNewPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setStatus('current')
lacpNewPortActorMinLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorMinLinks.setStatus('current')
lacpNewPortSetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("setDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortSetToDefault.setStatus('current')
lacpDeleteTrunk = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpDeleteTrunk.setStatus('current')
lacpNewSystemSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("setDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemSetToDefault.setStatus('current')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('current')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('current')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('current')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('current')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('current')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('current')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('current')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('current')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('current')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('current')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3, 1, 3), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('current')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3, 1, 4), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('current')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('current')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('current')
trunkLacpGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLacpGroupTableMaxSize.setStatus('current')
trunkLacpGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 5), )
if mibBuilder.loadTexts: trunkLacpGroupCurCfgTable.setStatus('current')
trunkLacpGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "trunkLacpGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkLacpGroupCurCfgTableEntry.setStatus('current')
trunkLacpGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLacpGroupCurCfgIndex.setStatus('current')
trunkLacpGroupCurCfgAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLacpGroupCurCfgAdminKey.setStatus('current')
trunkLacpGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 6), )
if mibBuilder.loadTexts: trunkLacpGroupNewCfgTable.setStatus('current')
trunkLacpGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "trunkLacpGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkLacpGroupNewCfgTableEntry.setStatus('current')
trunkLacpGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLacpGroupNewCfgIndex.setStatus('current')
trunkLacpGroupNewCfgAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkLacpGroupNewCfgAdminKey.setStatus('current')
l2ThashCurCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSmacState.setStatus('current')
l2ThashNewCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSmacState.setStatus('current')
l2ThashCurCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDmacState.setStatus('current')
l2ThashNewCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDmacState.setStatus('current')
l2ThashCurCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSipState.setStatus('current')
l2ThashNewCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSipState.setStatus('current')
l2ThashCurCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDipState.setStatus('current')
l2ThashNewCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDipState.setStatus('current')
stgCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1), )
if mibBuilder.loadTexts: stgCurCfgTable.setStatus('current')
stgCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "stgCurCfgIndex"))
if mibBuilder.loadTexts: stgCurCfgTableEntry.setStatus('current')
stgCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgIndex.setStatus('current')
stgCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgState.setStatus('current')
stgCurCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPriority.setStatus('current')
stgCurCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setStatus('current')
stgCurCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setStatus('current')
stgCurCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setStatus('current')
stgCurCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setStatus('current')
stgNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2), )
if mibBuilder.loadTexts: stgNewCfgTable.setStatus('current')
stgNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "stgNewCfgIndex"))
if mibBuilder.loadTexts: stgNewCfgTableEntry.setStatus('current')
stgNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgIndex.setStatus('current')
stgNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgState.setStatus('current')
stgNewCfgDefaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setStatus('current')
stgNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgAddVlan.setStatus('current')
stgNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setStatus('current')
stgNewCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgPriority.setStatus('current')
stgNewCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setStatus('current')
stgNewCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setStatus('current')
stgNewCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setStatus('current')
stgNewCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setStatus('current')
stgNewCfgRemoveAllVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgRemoveAllVlan.setStatus('current')
stgCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 3), )
if mibBuilder.loadTexts: stgCurCfgPortTable.setStatus('current')
stgCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "stgCurCfgStgIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "stgCurCfgPortIndex"))
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setStatus('current')
stgCurCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgStgIndex.setStatus('current')
stgCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 3, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortIndex.setStatus('current')
stgCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortState.setStatus('current')
stgCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPriority.setStatus('current')
stgCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setStatus('current')
stgNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 4), )
if mibBuilder.loadTexts: stgNewCfgPortTable.setStatus('current')
stgNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "stgNewCfgStgIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "stgNewCfgPortIndex"))
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setStatus('current')
stgNewCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgStgIndex.setStatus('current')
stgNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 4, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgPortIndex.setStatus('current')
stgNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortState.setStatus('current')
stgNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPriority.setStatus('current')
stgNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setStatus('current')
pmCurCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setStatus('current')
pmNewCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setStatus('current')
pmCurCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setStatus('current')
pmCurCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "pmCurCfgPmirrMoniPortIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "pmCurCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setStatus('current')
pmCurCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setStatus('current')
pmCurCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 3, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setStatus('current')
pmCurCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setStatus('current')
pmNewCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 4), )
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setStatus('current')
pmNewCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "pmNewCfgPmirrMoniPortIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "pmNewCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setStatus('current')
pmNewCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setStatus('current')
pmNewCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 4, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setStatus('current')
pmNewCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setStatus('current')
pmNewCfgPmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setStatus('current')
pmNewCfgPmonDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 4, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmonDelete.setStatus('current')
mstCurCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionName.setStatus('current')
mstNewCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionName.setStatus('current')
mstCurCfgRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionRevision.setStatus('current')
mstNewCfgRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionRevision.setStatus('current')
mstCurCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setStatus('current')
mstNewCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setStatus('current')
mstCurCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2), ("pvrst", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgStpMode.setStatus('current')
mstNewCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2), ("pvrst", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgStpMode.setStatus('current')
mstCistDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistDefaultCfg.setStatus('current')
mstCistBridgeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2))
mstCistCurCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setStatus('current')
mstCistNewCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setStatus('current')
mstCistCurCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setStatus('current')
mstCistNewCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setStatus('current')
mstCistCurCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setStatus('current')
mstCistNewCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setStatus('current')
mstCistCurCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgVlanBmap.setStatus('current')
mstCistNewCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgVlanBmap.setStatus('current')
mstCistNewCfgAddVlan = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 2, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgAddVlan.setStatus('current')
mstCistCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3), )
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setStatus('current')
mstCistCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mstCistCurCfgPortIndex"))
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setStatus('current')
mstCistCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setStatus('current')
mstCistCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setStatus('current')
mstCistCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setStatus('current')
mstCistCurCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setStatus('current')
mstCistCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setStatus('current')
mstCistCurCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setStatus('current')
mstCistCurCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setStatus('current')
mstCistCurCfgPortPvstProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPvstProtection.setStatus('current')
mstCistNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4), )
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setStatus('current')
mstCistNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mstCistNewCfgPortIndex"))
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setStatus('current')
mstCistNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setStatus('current')
mstCistNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setStatus('current')
mstCistNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setStatus('current')
mstCistNewCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setStatus('current')
mstCistNewCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setStatus('current')
mstCistNewCfgPortPvstProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 7, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortPvstProtection.setStatus('current')
pvstCompatibilityCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstCompatibilityCurCfgState.setStatus('current')
pvstCompatibilityNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstCompatibilityNewCfgState.setStatus('current')
nostpCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nostpCurCfgState.setStatus('current')
nostpNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nostpNewCfgState.setStatus('current')
stpLoopGuardCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpLoopGuardCurCfgState.setStatus('current')
stpLoopGuardNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpLoopGuardNewCfgState.setStatus('current')
vlanAutoStgCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanAutoStgCurCfgState.setStatus('current')
vlanAutoStgNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAutoStgNewCfgState.setStatus('current')
lldpPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortTableMaxEnt.setStatus('current')
lldpCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2), )
if mibBuilder.loadTexts: lldpCurCfgPortTable.setStatus('current')
lldpCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpCurCfgPortIndx"))
if mibBuilder.loadTexts: lldpCurCfgPortEntry.setStatus('current')
lldpCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortIndx.setStatus('current')
lldpCurCfgPortAdmStat = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabledTxOnly", 1), ("enabledRxOnly", 2), ("enabledRxTx", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortAdmStat.setStatus('current')
lldpCurCfgPortSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortSnmpTrap.setStatus('current')
lldpCurCfgPortportdesctlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortportdesctlv.setStatus('current')
lldpCurCfgPortsysnametlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortsysnametlv.setStatus('current')
lldpCurCfgPortsysdescrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortsysdescrtlv.setStatus('current')
lldpCurCfgPortsyscaptlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortsyscaptlv.setStatus('current')
lldpCurCfgPortmgmtaddrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortmgmtaddrtlv.setStatus('current')
lldpCurCfgPortportvidtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortportvidtlv.setStatus('current')
lldpCurCfgPortportprottlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortportprottlv.setStatus('current')
lldpCurCfgPortvlannametlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortvlannametlv.setStatus('current')
lldpCurCfgPortprotidtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortprotidtlv.setStatus('current')
lldpCurCfgPortmacphytlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortmacphytlv.setStatus('current')
lldpCurCfgPortpowermditlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortpowermditlv.setStatus('current')
lldpCurCfgPortlinkaggrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortlinkaggrtlv.setStatus('current')
lldpCurCfgPortframesztlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortframesztlv.setStatus('current')
lldpCurCfgPortdcbxtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgPortdcbxtlv.setStatus('current')
lldpNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3), )
if mibBuilder.loadTexts: lldpNewCfgPortTable.setStatus('current')
lldpNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpNewCfgPortIndx"))
if mibBuilder.loadTexts: lldpNewCfgPortEntry.setStatus('current')
lldpNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNewCfgPortIndx.setStatus('current')
lldpNewCfgPortAdmStat = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabledTxOnly", 1), ("enabledRxOnly", 2), ("enabledRxTx", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortAdmStat.setStatus('current')
lldpNewCfgPortSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortSnmpTrap.setStatus('current')
lldpNewCfgPortportdesctlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortportdesctlv.setStatus('current')
lldpNewCfgPortsysnametlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortsysnametlv.setStatus('current')
lldpNewCfgPortsysdescrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortsysdescrtlv.setStatus('current')
lldpNewCfgPortsyscaptlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortsyscaptlv.setStatus('current')
lldpNewCfgPortmgmtaddrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortmgmtaddrtlv.setStatus('current')
lldpNewCfgPortportvidtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortportvidtlv.setStatus('current')
lldpNewCfgPortportprottlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortportprottlv.setStatus('current')
lldpNewCfgPortvlannametlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortvlannametlv.setStatus('current')
lldpNewCfgPortprotidtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortprotidtlv.setStatus('current')
lldpNewCfgPortmacphytlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortmacphytlv.setStatus('current')
lldpNewCfgPortpowermditlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortpowermditlv.setStatus('current')
lldpNewCfgPortlinkaggrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortlinkaggrtlv.setStatus('current')
lldpNewCfgPortframesztlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortframesztlv.setStatus('current')
lldpNewCfgPortalltlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortalltlv.setStatus('current')
lldpNewCfgPortdcbxtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgPortdcbxtlv.setStatus('current')
lldpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4))
lldpCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgState.setStatus('current')
lldpNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgState.setStatus('current')
lldpCurCfgMsgTxInt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgMsgTxInt.setStatus('current')
lldpNewCfgMsgTxInt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgMsgTxInt.setStatus('current')
lldpCurCfgMsgTxHld = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgMsgTxHld.setStatus('current')
lldpNewCfgMsgTxHld = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgMsgTxHld.setStatus('current')
lldpCurCfgNotifInt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgNotifInt.setStatus('current')
lldpNewCfgNotifInt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgNotifInt.setStatus('current')
lldpCurCfgTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgTxDelay.setStatus('current')
lldpNewCfgTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgTxDelay.setStatus('current')
lldpCurCfgReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpCurCfgReinitDelay.setStatus('current')
lldpNewCfgReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 15, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpNewCfgReinitDelay.setStatus('current')
lldpStatsTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTableMaxEnt.setStatus('current')
lldpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2), )
if mibBuilder.loadTexts: lldpStatsTable.setStatus('current')
lldpStatsClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpStatsClearAll.setStatus('current')
lldpStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpStatsIndex"))
if mibBuilder.loadTexts: lldpStatsTableEntry.setStatus('current')
lldpStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsIndex.setStatus('current')
lldpStatsFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsFramesOutTotal.setStatus('current')
lldpStatsFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsFramesInTotal.setStatus('current')
lldpStatsFramesInErrorsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsFramesInErrorsTotal.setStatus('current')
lldpStatsFramesDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsFramesDiscardedTotal.setStatus('current')
lldpStatsTLVsUnrecognizedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTLVsUnrecognizedTotal.setStatus('current')
lldpStatsAgeoutsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsAgeoutsTotal.setStatus('current')
lldpStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpStatsClear.setStatus('current')
lldpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1), )
if mibBuilder.loadTexts: lldpInfoPortTable.setStatus('current')
lldpInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpInfoPortIndex"))
if mibBuilder.loadTexts: lldpInfoPortEntry.setStatus('current')
lldpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortIndex.setStatus('current')
lldpInfoPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortAlias.setStatus('current')
lldpInfoPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortMacAddress.setStatus('current')
lldpInfoPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortMtu.setStatus('current')
lldpInfoPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortEnabled.setStatus('current')
lldpInfoPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabledTxOnly", 1), ("enabledRxOnly", 2), ("enabledRxTx", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortAdminStatus.setStatus('current')
lldpInfoPortRxChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortRxChanges.setStatus('current')
lldpInfoPortportdesctlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortportdesctlv.setStatus('current')
lldpInfoPortsysnametlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortsysnametlv.setStatus('current')
lldpInfoPortsysdescrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortsysdescrtlv.setStatus('current')
lldpInfoPortsyscaptlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortsyscaptlv.setStatus('current')
lldpInfoPortmgmtaddrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortmgmtaddrtlv.setStatus('current')
lldpInfoPortportvidtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortportvidtlv.setStatus('current')
lldpInfoPortportprottlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortportprottlv.setStatus('current')
lldpInfoPortvlannametlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortvlannametlv.setStatus('current')
lldpInfoPortprotidtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortprotidtlv.setStatus('current')
lldpInfoPortmacphytlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortmacphytlv.setStatus('current')
lldpInfoPortpowermditlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortpowermditlv.setStatus('current')
lldpInfoPortlinkaggrtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortlinkaggrtlv.setStatus('current')
lldpInfoPortframesztlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortframesztlv.setStatus('current')
lldpInfoPortdcbxtlv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoPortdcbxtlv.setStatus('current')
lldpInfoTxTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2), )
if mibBuilder.loadTexts: lldpInfoTxTable.setStatus('current')
lldpInfoTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpInfoTxIndex"))
if mibBuilder.loadTexts: lldpInfoTxEntry.setStatus('current')
lldpInfoTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxIndex.setStatus('current')
lldpInfoTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txLldpInitialize", 1), ("txIdle", 2), ("txShutdownFrame", 3), ("txInfoFrame", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxState.setStatus('current')
lldpInfoTxLocalChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxLocalChanged.setStatus('current')
lldpInfoTxTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxTTL.setStatus('current')
lldpInfoTxTxTTR = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxTxTTR.setStatus('current')
lldpInfoTxDelayWhile = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxDelayWhile.setStatus('current')
lldpInfoTxShutdownWhile = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxShutdownWhile.setStatus('current')
lldpInfoTxReinitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxReinitDelay.setStatus('current')
lldpInfoTxHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxHoldMultiplier.setStatus('current')
lldpInfoTxTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxTransmitInterval.setStatus('current')
lldpInfoTxTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoTxTransmitDelay.setStatus('current')
lldpInfoRxTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3), )
if mibBuilder.loadTexts: lldpInfoRxTable.setStatus('current')
lldpInfoRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpInfoRxIndex"))
if mibBuilder.loadTexts: lldpInfoRxEntry.setStatus('current')
lldpInfoRxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxIndex.setStatus('current')
lldpInfoRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lldpWaitPortOperational", 1), ("deleteAgedInfo", 2), ("rxLldpInitialize", 3), ("rxWaitForFrame", 4), ("rxFrame", 5), ("deleteInfo", 6), ("updateInfo", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxState.setStatus('current')
lldpInfoRxBadFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxBadFrame.setStatus('current')
lldpInfoRxRcvFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxRcvFrame.setStatus('current')
lldpInfoRxRxInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxRxInfoAge.setStatus('current')
lldpInfoRxRemoteChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxRemoteChanged.setStatus('current')
lldpInfoRxTooManyNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxTooManyNeighbors.setStatus('current')
lldpInfoRxSNMPNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxSNMPNotify.setStatus('current')
lldpInfoRxRxTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxRxTTL.setStatus('current')
lldpInfoRxTooManyNeighborTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRxTooManyNeighborTimer.setStatus('current')
lldpInfoRemoteDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4), )
if mibBuilder.loadTexts: lldpInfoRemoteDevicesTable.setStatus('current')
lldpInfoRemoteDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpInfoRemoteDevicesIndex"))
if mibBuilder.loadTexts: lldpInfoRemoteDevicesEntry.setStatus('current')
lldpInfoRemoteDevicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesIndex.setStatus('current')
lldpInfoRemoteDevicesRemoteTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesRemoteTTL.setStatus('current')
lldpInfoRemoteDevicesRxChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesRxChanges.setStatus('current')
lldpInfoRemoteDevicesLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesLocalPort.setStatus('current')
lldpInfoRemoteDevicesChassisSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("chassisComponent", 1), ("interfaceAlias", 2), ("portComponent", 3), ("macAddress", 4), ("networkAddress", 5), ("interfaceName", 6), ("locallyAssigned", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesChassisSubtype.setStatus('current')
lldpInfoRemoteDevicesChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesChassisId.setStatus('current')
lldpInfoRemoteDevicesPortSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("interfaceAlias", 1), ("portComponent", 2), ("macAddress", 3), ("networkAddress", 4), ("interfaceName", 5), ("agentCircuitId", 6), ("locallyAssigned", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesPortSubtype.setStatus('current')
lldpInfoRemoteDevicesPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesPortId.setStatus('current')
lldpInfoRemoteDevicesSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesSystemName.setStatus('current')
lldpInfoRemoteDevicesSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesSystemDescription.setStatus('current')
lldpInfoRemoteDevicesPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesPortDescription.setStatus('current')
lldpInfoRemoteDevicesSystemCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesSystemCapSupported.setStatus('current')
lldpInfoRemoteDevicesSystemCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesSystemCapEnabled.setStatus('current')
lldpInfoRemoteDevicesManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 5), )
if mibBuilder.loadTexts: lldpInfoRemoteDevicesManAddrTable.setStatus('current')
lldpInfoRemoteDevicesManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lldpInfoRemoteDevicesIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "lldpInfoRemoteDevicesManAddrSubtype"), (0, "IBM-GbTOR-10G-L2L3-MIB", "lldpInfoRemoteDevicesManAddr"))
if mibBuilder.loadTexts: lldpInfoRemoteDevicesManAddrEntry.setStatus('current')
lldpInfoRemoteDevicesManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 65535))).clone(namedValues=NamedValues(("other", 0), ("ipV4", 1), ("ipV6", 2), ("nsap", 3), ("hdlc", 4), ("bbn1822", 5), ("all802", 6), ("e163", 7), ("e164", 8), ("f69", 9), ("x121", 10), ("ipx", 11), ("appletalk", 12), ("decnetIV", 13), ("banyanVines", 14), ("e164withNsap", 15), ("dns", 16), ("distinguishedname", 17), ("asnumber", 18), ("xtpoveripv4", 19), ("xtpoveripv6", 20), ("xtpnativemodextp", 21), ("reserved", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesManAddrSubtype.setStatus('current')
lldpInfoRemoteDevicesManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesManAddr.setStatus('current')
lldpInfoRemoteDevicesManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ifIndex", 2), ("systemPortNumber", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesManAddrIfSubtype.setStatus('current')
lldpInfoRemoteDevicesManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesManAddrIfId.setStatus('current')
lldpInfoRemoteDevicesManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpInfoRemoteDevicesManAddrOID.setStatus('current')
lldpClearMsap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("clearMsap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpClearMsap.setStatus('current')
udldInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1), )
if mibBuilder.loadTexts: udldInfoPortTable.setStatus('current')
udldInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "udldInfoPortIndex"))
if mibBuilder.loadTexts: udldInfoPortEntry.setStatus('current')
udldInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortIndex.setStatus('current')
udldInfoPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortConfig.setStatus('current')
udldInfoPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggresive", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortMode.setStatus('current')
udldInfoPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortLink.setStatus('current')
udldInfoPortOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("inactive", 2), ("linkup", 3), ("advertisement", 4), ("detection", 5), ("extDetection", 6), ("shutdown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortOperationalStatus.setStatus('current')
udldInfoPortBidirectionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("unidirectional", 2), ("bidirectional", 3), ("loop", 4), ("neighborMismatch", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortBidirectionalStatus.setStatus('current')
udldInfoPortInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortInterval.setStatus('current')
udldInfoPortTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortTimeout.setStatus('current')
udldInfoPortNeighborCount = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoPortNeighborCount.setStatus('current')
udldInfoNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2), )
if mibBuilder.loadTexts: udldInfoNeighborTable.setStatus('current')
udldInfoNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "udldInfoNeighborLocalPortIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "udldInfoNeighborIndex"))
if mibBuilder.loadTexts: udldInfoNeighborEntry.setStatus('current')
udldInfoNeighborLocalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoNeighborLocalPortIndex.setStatus('current')
udldInfoNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoNeighborIndex.setStatus('current')
udldInfoNeighborExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoNeighborExpiration.setStatus('current')
udldInfoNeighborDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoNeighborDeviceName.setStatus('current')
udldInfoNeighborDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoNeighborDeviceID.setStatus('current')
udldInfoNeighborPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udldInfoNeighborPortID.setStatus('current')
fdbCurCfgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2), )
if mibBuilder.loadTexts: fdbCurCfgStaticTable.setStatus('current')
fdbCurCfgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fdbCurCfgEntryIndex"))
if mibBuilder.loadTexts: fdbCurCfgStaticEntry.setStatus('current')
fdbCurCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgEntryIndex.setStatus('current')
fdbCurCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgVlan.setStatus('current')
fdbCurCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgPort.setStatus('current')
fdbCurCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgMac.setStatus('current')
fdbCurCfgTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgTrunk.setStatus('current')
fdbCurCfgAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgAdminkey.setStatus('current')
fdbNewCfgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3), )
if mibBuilder.loadTexts: fdbNewCfgStaticTable.setStatus('current')
fdbNewCfgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fdbNewCfgEntryIndex"))
if mibBuilder.loadTexts: fdbNewCfgStaticEntry.setStatus('current')
fdbNewCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbNewCfgEntryIndex.setStatus('current')
fdbNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddVlan.setStatus('current')
fdbNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1, 3), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddPort.setStatus('current')
fdbNewCfgAddMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddMac.setStatus('current')
fdbNewCfgDelStaticEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgDelStaticEntry.setStatus('current')
fdbNewCfgAddTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddTrunk.setStatus('current')
fdbNewCfgAddAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddAdminkey.setStatus('current')
mcastFdbCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 8), )
if mibBuilder.loadTexts: mcastFdbCurCfgTable.setStatus('current')
mcastFdbCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mcastFdbCurCfgEntryIndex"))
if mibBuilder.loadTexts: mcastFdbCurCfgEntry.setStatus('current')
mcastFdbCurCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbCurCfgEntryIndex.setStatus('current')
mcastFdbCurCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbCurCfgVlan.setStatus('current')
mcastFdbCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 8, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbCurCfgPorts.setStatus('current')
mcastFdbCurCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 8, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbCurCfgMac.setStatus('current')
mcastFdbNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9), )
if mibBuilder.loadTexts: mcastFdbNewCfgTable.setStatus('current')
mcastFdbNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mcastFdbNewCfgEntryIndex"))
if mibBuilder.loadTexts: mcastFdbNewCfgEntry.setStatus('current')
mcastFdbNewCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbNewCfgEntryIndex.setStatus('current')
mcastFdbNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastFdbNewCfgAddVlan.setStatus('current')
mcastFdbNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbNewCfgPorts.setStatus('current')
mcastFdbNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1, 4), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastFdbNewCfgAddPort.setStatus('current')
mcastFdbNewCfgRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1, 5), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastFdbNewCfgRemPort.setStatus('current')
mcastFdbNewCfgAddMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastFdbNewCfgAddMac.setStatus('current')
mcastFdbNewCfgDelStaticEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 13, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastFdbNewCfgDelStaticEntry.setStatus('current')
oamInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1), )
if mibBuilder.loadTexts: oamInfoPortTable.setStatus('current')
oamInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "oamInfoPortIndex"))
if mibBuilder.loadTexts: oamInfoPortEntry.setStatus('current')
oamInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortIndex.setStatus('current')
oamInfoPortLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortLocalState.setStatus('current')
oamInfoPortLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("passive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortLocalMode.setStatus('current')
oamInfoPortLocalLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortLocalLinkStatus.setStatus('current')
oamInfoPortLocalStable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("true", 0), ("false", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortLocalStable.setStatus('current')
oamInfoPortLocalSatisfied = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("true", 0), ("false", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortLocalSatisfied.setStatus('current')
oamInfoPortLocalEvaluating = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("true", 0), ("false", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortLocalEvaluating.setStatus('current')
oamInfoPortRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("passive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortRemoteMode.setStatus('current')
oamInfoPortRemoteMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortRemoteMAC.setStatus('current')
oamInfoPortRemoteStable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("true", 0), ("false", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortRemoteStable.setStatus('current')
oamInfoPortRemoteStateValid = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("true", 0), ("false", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortRemoteStateValid.setStatus('current')
oamInfoPortRemoteEvaluating = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("true", 0), ("false", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamInfoPortRemoteEvaluating.setStatus('current')
oamStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1), )
if mibBuilder.loadTexts: oamStatsPortTable.setStatus('current')
oamStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "oamStatsPortIndex"))
if mibBuilder.loadTexts: oamStatsPortEntry.setStatus('current')
oamStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortIndex.setStatus('current')
oamStatsPortInfoTx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortInfoTx.setStatus('current')
oamStatsPortInfoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortInfoRx.setStatus('current')
oamStatsPortUnsupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortUnsupTx.setStatus('current')
oamStatsPortUnsupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortUnsupRx.setStatus('current')
oamStatsPortLocalLinkFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortLocalLinkFaults.setStatus('current')
oamStatsPortLocalCriticalEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortLocalCriticalEvents.setStatus('current')
oamStatsPortLocalDyingGasps = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortLocalDyingGasps.setStatus('current')
oamStatsPortRemoteLinkFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortRemoteLinkFaults.setStatus('current')
oamStatsPortRemoteCriticalEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortRemoteCriticalEvents.setStatus('current')
oamStatsPortRemoteDyingGasps = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamStatsPortRemoteDyingGasps.setStatus('current')
trunkGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 1), )
if mibBuilder.loadTexts: trunkGroupInfoTable.setStatus('current')
trunkGroupInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "trunkGroupInfoIndex"))
if mibBuilder.loadTexts: trunkGroupInfoTableEntry.setStatus('current')
trunkGroupInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoIndex.setStatus('current')
trunkGroupInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoState.setStatus('current')
trunkGroupInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPorts.setStatus('current')
trunkGroupInfoProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoProtocol.setStatus('current')
trunkGroupInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 2), )
if mibBuilder.loadTexts: trunkGroupInfoPortTable.setStatus('current')
trunkGroupInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "trunkGroupInfoPortTrunkId"), (0, "IBM-GbTOR-10G-L2L3-MIB", "trunkGroupInfoPortPortId"))
if mibBuilder.loadTexts: trunkGroupInfoPortTableEntry.setStatus('current')
trunkGroupInfoPortTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPortTrunkId.setStatus('current')
trunkGroupInfoPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 2, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPortPortId.setStatus('current')
trunkGroupInfoPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("blocking", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPortStatus.setStatus('current')
lacpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1), )
if mibBuilder.loadTexts: lacpStatsTable.setStatus('current')
lacpStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lacpStatsIndex"))
if mibBuilder.loadTexts: lacpStatsTableEntry.setStatus('current')
lacpStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpStatsIndex.setStatus('current')
lacpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusRx.setStatus('current')
markerpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusRx.setStatus('current')
markerresponsepdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusRx.setStatus('current')
unknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownRx.setStatus('current')
illegalRx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: illegalRx.setStatus('current')
lacpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusTx.setStatus('current')
markerpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusTx.setStatus('current')
markerresponsepdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusTx.setStatus('current')
lacpClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpClearStats.setStatus('current')
fdbStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCurrent.setStatus('current')
fdbStatsHiwat = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsHiwat.setStatus('current')
fdbStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbStatsClear.setStatus('current')
stgStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1), )
if mibBuilder.loadTexts: stgStatsPortTable.setStatus('current')
stgStatsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "stgStatsStpIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "stgStatsPortIndex"))
if mibBuilder.loadTexts: stgStatsPortTableEntry.setStatus('current')
stgStatsStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsStpIndex.setStatus('current')
stgStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortIndex.setStatus('current')
stgStatsPortRcvCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setStatus('current')
stgStatsPortRcvTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setStatus('current')
stgStatsPortXmtCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setStatus('current')
stgStatsPortXmtTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setStatus('current')
fdbClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClear.setStatus('current')
fdbTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2), )
if mibBuilder.loadTexts: fdbTable.setStatus('current')
fdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fdbMacAddr"))
if mibBuilder.loadTexts: fdbEntry.setStatus('current')
fdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacAddr.setStatus('current')
fdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVlan.setStatus('current')
fdbSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcPort.setStatus('current')
fdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("forward", 2), ("trunk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbState.setStatus('current')
fdbSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcTrunk.setStatus('current')
fdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatus.setStatus('current')
mcastFdbTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 3), )
if mibBuilder.loadTexts: mcastFdbTable.setStatus('current')
mcastFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mcastFdbEntryIndex"))
if mibBuilder.loadTexts: mcastFdbEntry.setStatus('current')
mcastFdbEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbEntryIndex.setStatus('current')
mcastFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbMacAddr.setStatus('current')
mcastFdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbVlan.setStatus('current')
mcastFdbSrcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 1, 3, 1, 4), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFdbSrcPorts.setStatus('current')
stpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1), )
if mibBuilder.loadTexts: stpInfoTable.setStatus('current')
stpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "stpInfoIndex"))
if mibBuilder.loadTexts: stpInfoTableEntry.setStatus('current')
stpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoIndex.setStatus('current')
stpInfoTimeSinceTopChange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setStatus('current')
stpInfoTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTopChanges.setStatus('current')
stpInfoDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setStatus('current')
stpInfoRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootCost.setStatus('current')
stpInfoRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 6), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootPort.setStatus('current')
stpInfoMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoMaxAge.setStatus('current')
stpInfoHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHelloTime.setStatus('current')
stpInfoForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoForwardDelay.setStatus('current')
stpInfoHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHoldTime.setStatus('current')
stpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2), )
if mibBuilder.loadTexts: stpInfoPortTable.setStatus('current')
stpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "stpInfoPortStpIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "stpInfoPortIndex"))
if mibBuilder.loadTexts: stpInfoPortTableEntry.setStatus('current')
stpInfoPortStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortStpIndex.setStatus('current')
stpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortIndex.setStatus('current')
stpInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("discarding", 7), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortState.setStatus('current')
stpInfoPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setStatus('current')
stpInfoPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setStatus('current')
stpInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setStatus('current')
stpInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setStatus('current')
stpInfoPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setStatus('current')
stpInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortPathCost.setStatus('current')
stpInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortRole.setStatus('current')
stpInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortLinkType.setStatus('current')
stpInfoPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortEdge.setStatus('current')
stpInfoPortExtGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("loop-inc", 1), ("root-inc", 2), ("normal", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortExtGuard.setStatus('current')
stpInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortPriority.setStatus('current')
lacpInfoAggrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1), )
if mibBuilder.loadTexts: lacpInfoAggrTable.setStatus('current')
lacpInfoAggrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lacpInfoAggrIndex"))
if mibBuilder.loadTexts: lacpInfoAggrTableEntry.setStatus('current')
lacpInfoAggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrIndex.setStatus('current')
lacpInfoAggrId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrId.setStatus('current')
lacpInfoAggrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrMac.setStatus('current')
lacpInfoAggrActSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActSysPrio.setStatus('current')
lacpInfoAggrActSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActSysId.setStatus('current')
lacpInfoAggrIndivState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrIndivState.setStatus('current')
lacpInfoAggrActAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActAdminKey.setStatus('current')
lacpInfoAggrActOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActOperKey.setStatus('current')
lacpInfoAggrPartSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrPartSysPrio.setStatus('current')
lacpInfoAggrPartSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrPartSysId.setStatus('current')
lacpInfoAggrPartOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrPartOperKey.setStatus('current')
lacpInfoAggrReadyState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrReadyState.setStatus('current')
lacpInfoAggrNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrNumPorts.setStatus('current')
lacpInfoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2))
lacpInfoPortGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1), )
if mibBuilder.loadTexts: lacpInfoPortGeneralTable.setStatus('current')
lacpInfoPortGeneralTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lacpInfoPortGeneralIndex"))
if mibBuilder.loadTexts: lacpInfoPortGeneralTableEntry.setStatus('current')
lacpInfoPortGeneralIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortGeneralIndex.setStatus('current')
lacpInfoPortLacpEna = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortLacpEna.setStatus('current')
lacpInfoPortAdminEna = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortAdminEna.setStatus('current')
lacpInfoPortActSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActSysId.setStatus('current')
lacpInfoPortActSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActSysPrio.setStatus('current')
lacpInfoPortActAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdminKey.setStatus('current')
lacpInfoPortActOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOperKey.setStatus('current')
lacpInfoPortActPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActPortNum.setStatus('current')
lacpInfoPortActPortPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActPortPrio.setStatus('current')
lacpInfoPortIndivState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndivState.setStatus('current')
lacpInfoSelAggrId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoSelAggrId.setStatus('current')
lacpInfoAttAggrId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAttAggrId.setStatus('current')
lacpInfoPortReadyN = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortReadyN.setStatus('current')
lacpInfoPortNtt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortNtt.setStatus('current')
lacpInfoPortSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("selected", 1), ("unselected", 2), ("standby", 3), ("suspended", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortSelected.setStatus('current')
lacpInfoPortMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMoved.setStatus('current')
lacpInfoCollDetState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoCollDetState.setStatus('current')
lacpInfoPortRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortRxState.setStatus('current')
lacpInfoPortMuxState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMuxState.setStatus('current')
lacpInfoPortPerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPerState.setStatus('current')
lacpInfoPortPerTraTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPerTraTimer.setStatus('current')
lacpInfoPortCurWhileTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortCurWhileTimer.setStatus('current')
lacpInfoPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortOperState.setStatus('current')
lacpInfoPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2), )
if mibBuilder.loadTexts: lacpInfoPortAdminTable.setStatus('current')
lacpInfoPortAdminTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lacpInfoPortAdminIndex"))
if mibBuilder.loadTexts: lacpInfoPortAdminTableEntry.setStatus('current')
lacpInfoPortAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortAdminIndex.setStatus('current')
lacpInfoPortActAdPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdPortState.setStatus('current')
lacpInfoPortActAdActiv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdActiv.setStatus('current')
lacpInfoPortActAdSync = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdSync.setStatus('current')
lacpInfoPortActAdDef = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdDef.setStatus('current')
lacpInfoPortActAdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdTimeout.setStatus('current')
lacpInfoPortActAdColl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdColl.setStatus('current')
lacpInfoPortActAdExp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdExp.setStatus('current')
lacpInfoPortActAdAggr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdAggr.setStatus('current')
lacpInfoPortActAdDist = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdDist.setStatus('current')
lacpInfoPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3), )
if mibBuilder.loadTexts: lacpInfoPortOperTable.setStatus('current')
lacpInfoPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "lacpInfoPortOperIndex"))
if mibBuilder.loadTexts: lacpInfoPortOperTableEntry.setStatus('current')
lacpInfoPortOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortOperIndex.setStatus('current')
lacpInfoPortPartOpSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpSysPrio.setStatus('current')
lacpInfoPortPartOpSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpSysId.setStatus('current')
lacpInfoPortPartOpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpKey.setStatus('current')
lacpInfoPortPartOpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpPortNum.setStatus('current')
lacpInfoPortPartOpPortPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpPortPrio.setStatus('current')
lacpInfoPortActOpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpPortState.setStatus('current')
lacpInfoPortActOpActiv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpActiv.setStatus('current')
lacpInfoPortActOpSync = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpSync.setStatus('current')
lacpInfoPortActOpDef = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpDef.setStatus('current')
lacpInfoPortActOpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpTimeout.setStatus('current')
lacpInfoPortActOpColl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpColl.setStatus('current')
lacpInfoPortActOpExp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpExp.setStatus('current')
lacpInfoPortActOpAggr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpAggr.setStatus('current')
lacpInfoPortActOpDist = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpDist.setStatus('current')
lacpInfoPortPartOpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpPortState.setStatus('current')
lacpInfoPortPartOpActiv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpActiv.setStatus('current')
lacpInfoPortPartOpSync = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpSync.setStatus('current')
lacpInfoPortPartOpDef = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpDef.setStatus('current')
lacpInfoPortPartOpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpTimeout.setStatus('current')
lacpInfoPortPartOpColl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpColl.setStatus('current')
lacpInfoPortPartOpExp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpExp.setStatus('current')
lacpInfoPortPartOpAggr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpAggr.setStatus('current')
lacpInfoPortPartOpDist = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 3, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpDist.setStatus('current')
cistRoot = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRoot.setStatus('current')
cistRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPathCost.setStatus('current')
cistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPort.setStatus('current')
cistBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeHelloTime.setStatus('current')
cistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeMaxAge.setStatus('current')
cistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeForwardDelay.setStatus('current')
cistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalRoot.setStatus('current')
cistRegionalPathCost = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalPathCost.setStatus('current')
mstpDigest = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpDigest.setStatus('current')
cistInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2), )
if mibBuilder.loadTexts: cistInfoPortTable.setStatus('current')
cistInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "cistInfoPortIndex"))
if mibBuilder.loadTexts: cistInfoPortTableEntry.setStatus('current')
cistInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortIndex.setStatus('current')
cistInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPriority.setStatus('current')
cistInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPathCost.setStatus('current')
cistInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortState.setStatus('current')
cistInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortRole.setStatus('current')
cistInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setStatus('current')
cistInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setStatus('current')
cistInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortLinkType.setStatus('current')
cistInfoPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortHelloTime.setStatus('current')
cistInfoPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortEdge.setStatus('current')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 5, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
vlanInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 5, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlanInfoId"))
if mibBuilder.loadTexts: vlanInfoTableEntry.setStatus('current')
vlanInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoId.setStatus('current')
vlanInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoName.setStatus('current')
vlanInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoStatus.setStatus('current')
vlanInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoPorts.setStatus('current')
vlagCurIslCfgPortChannel = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurIslCfgPortChannel.setStatus('current')
vlagNewIslCfgPortChannel = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewIslCfgPortChannel.setStatus('current')
vlagCurIslCfgAdminKey = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurIslCfgAdminKey.setStatus('current')
vlagNewIslCfgAdminKey = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewIslCfgAdminKey.setStatus('current')
vlagCurCfgSwitchPriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgSwitchPriority.setStatus('current')
vlagNewCfgSwitchPriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgSwitchPriority.setStatus('current')
vlagCurCfgTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 6), )
if mibBuilder.loadTexts: vlagCurCfgTrunkTable.setStatus('current')
vlagCurCfgTrunkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlagCurCfgTrunkIndex"))
if mibBuilder.loadTexts: vlagCurCfgTrunkTableEntry.setStatus('current')
vlagCurCfgTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgTrunkIndex.setStatus('current')
vlagCurCfgTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgTrunkState.setStatus('current')
vlagNewCfgTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 7), )
if mibBuilder.loadTexts: vlagNewCfgTrunkTable.setStatus('current')
vlagNewCfgTrunkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlagNewCfgTrunkIndex"))
if mibBuilder.loadTexts: vlagNewCfgTrunkTableEntry.setStatus('current')
vlagNewCfgTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgTrunkIndex.setStatus('current')
vlagNewCfgTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgTrunkState.setStatus('current')
vlagCurCfgLacpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 8), )
if mibBuilder.loadTexts: vlagCurCfgLacpTable.setStatus('current')
vlagCurCfgLacpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlagCurCfgLacpKey"))
if mibBuilder.loadTexts: vlagCurCfgLacpTableEntry.setStatus('current')
vlagCurCfgLacpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgLacpKey.setStatus('current')
vlagCurCfgLacpState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgLacpState.setStatus('current')
vlagNewCfgLacpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 9), )
if mibBuilder.loadTexts: vlagNewCfgLacpTable.setStatus('current')
vlagNewCfgLacpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlagNewCfgLacpKey"))
if mibBuilder.loadTexts: vlagNewCfgLacpTableEntry.setStatus('current')
vlagNewCfgLacpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagNewCfgLacpKey.setStatus('current')
vlagNewCfgLacpState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgLacpState.setStatus('current')
vlagCurCfgHlthchkPeerIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 10), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgHlthchkPeerIp.setStatus('current')
vlagNewCfgHlthchkPeerIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgHlthchkPeerIp.setStatus('current')
vlagCurCfgTierId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgTierId.setStatus('current')
vlagNewCfgTierId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgTierId.setStatus('current')
vlagCurCfgStartupDelayInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgStartupDelayInterval.setStatus('current')
vlagNewCfgStartupDelayInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgStartupDelayInterval.setStatus('current')
vlagCurCfgGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgGlobalEnable.setStatus('current')
vlagNewCfgGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgGlobalEnable.setStatus('current')
vlagCurCfgHlthchkConnectRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgHlthchkConnectRetryInterval.setStatus('current')
vlagNewCfgHlthchkConnectRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgHlthchkConnectRetryInterval.setStatus('current')
vlagCurCfgHlthchkKeepaliveAttempts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgHlthchkKeepaliveAttempts.setStatus('current')
vlagNewCfgHlthchkKeepaliveAttempts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgHlthchkKeepaliveAttempts.setStatus('current')
vlagCurCfgHlthchkKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgHlthchkKeepaliveInterval.setStatus('current')
vlagNewCfgHlthchkKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgHlthchkKeepaliveInterval.setStatus('current')
vlagCurCfgAutoRecoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(240, 3600)).clone(300)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagCurCfgAutoRecoveryInterval.setStatus('current')
vlagNewCfgAutoRecoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 18, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(240, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagNewCfgAutoRecoveryInterval.setStatus('current')
vlagInfoState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoState.setStatus('current')
vlagInfoAdminRole = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unelected", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoAdminRole.setStatus('current')
vlagInfoISLId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoISLId.setStatus('current')
vlagInfoLocalMac = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoLocalMac.setStatus('current')
vlagInfoLocalPriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoLocalPriority.setStatus('current')
vlagInfoRemoteMac = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoRemoteMac.setStatus('current')
vlagInfoRemotePriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoRemotePriority.setStatus('current')
vlagInfoHlthchkStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoHlthchkStatus.setStatus('current')
vlagInfoStartupDelayInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoStartupDelayInterval.setStatus('current')
vlagInfoStartupDelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unstarted", 1), ("running", 2), ("finished", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoStartupDelayStatus.setStatus('current')
vlagInfoSystemMac = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoSystemMac.setStatus('current')
vlagInfoOperaRole = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unelected", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoOperaRole.setStatus('current')
vlagInfoAutoRecoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoAutoRecoveryInterval.setStatus('current')
vlagInfoAutoRecoveryStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unstarted", 1), ("running", 2), ("finished", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoAutoRecoveryStatus.setStatus('current')
vlagInfoInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 1), )
if mibBuilder.loadTexts: vlagInfoInstanceTable.setStatus('current')
vlagInfoInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vlagInstanceId"))
if mibBuilder.loadTexts: vlagInfoInstanceEntry.setStatus('current')
vlagInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInstanceId.setStatus('current')
vlagInstanceTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInstanceTrunkId.setStatus('current')
vlagInstanceAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInstanceAdminKey.setStatus('current')
vlagInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("localUp", 2), ("remoteUp", 3), ("formed", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInstanceState.setStatus('current')
vlagInfoIslId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoIslId.setStatus('current')
vlagInfoIslProtocol = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoIslProtocol.setStatus('current')
vlagInfoIslPortchannel = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoIslPortchannel.setStatus('current')
vlagInfoIslAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoIslAdminkey.setStatus('current')
vlagInfoIslPorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoIslPorts.setStatus('current')
vlagInfoIslPortState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 16, 2, 2, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagInfoIslPortState.setStatus('current')
vlagStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlagStatsClear.setStatus('current')
vlagStatsIslInOctets = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsIslInOctets.setStatus('current')
vlagStatsIslInPackets = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsIslInPackets.setStatus('current')
vlagStatsIslOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsIslOutOctets.setStatus('current')
vlagStatsIslOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsIslOutPackets.setStatus('current')
vlagStatsPduSentRoleElection = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentRoleElection.setStatus('current')
vlagStatsPduSentSystemInfo = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentSystemInfo.setStatus('current')
vlagStatsPduSentFdbDynamicAdd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentFdbDynamicAdd.setStatus('current')
vlagStatsPduSentFdbDynamicDel = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentFdbDynamicDel.setStatus('current')
vlagStatsPduSentFdbInactiveAdd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentFdbInactiveAdd.setStatus('current')
vlagStatsPduSentFdbInactiveDel = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentFdbInactiveDel.setStatus('current')
vlagStatsPduSentHlthCheck = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentHlthCheck.setStatus('current')
vlagStatsPduSentOther = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentOther.setStatus('current')
vlagStatsPduSentUnknown = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentUnknown.setStatus('current')
vlagStatsPduRcvRoleElection = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvRoleElection.setStatus('current')
vlagStatsPduRcvSystemInfo = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvSystemInfo.setStatus('current')
vlagStatsPduRcvFdbDynamicAdd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvFdbDynamicAdd.setStatus('current')
vlagStatsPduRcvFdbDynamicDel = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvFdbDynamicDel.setStatus('current')
vlagStatsPduRcvFdbInactiveAdd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvFdbInactiveAdd.setStatus('current')
vlagStatsPduRcvFdbInactiveDel = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvFdbInactiveDel.setStatus('current')
vlagStatsPduRcvHlthCheck = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvHlthCheck.setStatus('current')
vlagStatsPduRcvOther = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvOther.setStatus('current')
vlagStatsPduRcvUnknown = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvUnknown.setStatus('current')
vlagStatsPduSentPeerInstanceEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentPeerInstanceEnable.setStatus('current')
vlagStatsPduSentPeerInstanceDisable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentPeerInstanceDisable.setStatus('current')
vlagStatsPduSentISLHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduSentISLHello.setStatus('current')
vlagStatsPduRcvISLHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvISLHello.setStatus('current')
vlagStatsPduRcvPeerInstanceEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvPeerInstanceEnable.setStatus('current')
vlagStatsPduRcvPeerInstanceDisable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 5, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsPduRcvPeerInstanceDisable.setStatus('current')
vlagStatsIgmpReportsForwarded = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsIgmpReportsForwarded.setStatus('current')
vlagStatsIgmpLeavesForwarded = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 2, 11, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlagStatsIgmpLeavesForwarded.setStatus('current')
ecpCurCfgRetrans = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpCurCfgRetrans.setStatus('current')
ecpNewCfgRetrans = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpNewCfgRetrans.setStatus('current')
ecpChnlInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1), )
if mibBuilder.loadTexts: ecpChnlInfoTable.setStatus('current')
ecpChnlInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ecpChnlInfoEntryIndex"))
if mibBuilder.loadTexts: ecpChnlInfoEntry.setStatus('current')
ecpChnlInfoEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlInfoEntryIndex.setStatus('current')
ecpChnlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlPort.setStatus('current')
ecpChnlStag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlStag.setStatus('current')
ecpChnlSndlen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlSndlen.setStatus('current')
ecpChnlSndnxt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlSndnxt.setStatus('current')
ecpChnlRcvlast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlRcvlast.setStatus('current')
ecpChnlStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlStateMachine.setStatus('current')
ecpChnlRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlRxCnt.setStatus('current')
ecpChnlTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlTxCnt.setStatus('current')
ecpChnlRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlRxDrop.setStatus('current')
ecpChnlTxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlTxDrop.setStatus('current')
ecpChnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlState.setStatus('current')
ecpChnlAckErr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 2, 3, 17, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpChnlAckErr.setStatus('current')
layer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3))
layer3Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1))
layer3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2))
layer3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3))
layer3Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 4))
ipInterfaceCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1))
ipInterfaceLoopbackCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24))
ipGatewayCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2))
ipStaticRouteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3))
ipForwardCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4))
vrrpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6))
arpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 7))
ipBootpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8))
dnsCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9))
ipNwfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10))
ipRmapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11))
bgpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12))
ospfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13))
ipGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 14))
ipStaticArpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15))
rip2Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18))
igmpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19))
ipStaticNbrCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21))
ipGatewayIpv6Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22))
ipStaticRoute6Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23))
ospf3Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26))
pptCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27))
ipv6pmtuCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 28))
mldCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30))
ndprefixCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31))
dhcpsnpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33))
ipsecCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 2))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 4))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5))
ospfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6))
clearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7))
igmpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9))
ipv6Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10))
rip2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13))
ipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16))
icmpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17))
tcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18))
udpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 19))
bootpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20))
ospf3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22))
mldStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23))
ipsecStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24))
dhcpsnpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 25))
ipRoutingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1))
ipEcmpRoutingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19))
ipEcmpHash = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 20))
ipv6PmtuInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 21))
arpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2))
vrrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3))
ospfinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4))
gatewayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 5))
igmpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6))
nbrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12))
gatewayIPv6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 13))
ipRoute6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14))
ipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 8))
ipIntfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9))
ipIntfLoopbackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16))
rip2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10))
bgpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11))
dhcpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15))
ospf3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18))
mldInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22))
ipsecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23))
dhcpsnpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24))
dhcpSnoopingCurCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingCurCfgOnState.setStatus('current')
dhcpSnoopingNewCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingNewCfgOnState.setStatus('current')
dhcpSnoopingCurCfgOption82OnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingCurCfgOption82OnState.setStatus('current')
dhcpSnoopingNewCfgOption82OnState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingNewCfgOption82OnState.setStatus('current')
dhcpSnoopingCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 5), )
if mibBuilder.loadTexts: dhcpSnoopingCurCfgPortTable.setStatus('current')
dhcpSnoopingCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "dhcpSnoopingCurCfgPortId"))
if mibBuilder.loadTexts: dhcpSnoopingCurCfgPortTableEntry.setStatus('current')
dhcpSnoopingCurCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingCurCfgPortId.setStatus('current')
dhcpSnoopingCurCfgPortTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingCurCfgPortTrusted.setStatus('current')
dhcpSnoopingCurCfgPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingCurCfgPortRateLimit.setStatus('current')
dhcpSnoopingNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 6), )
if mibBuilder.loadTexts: dhcpSnoopingNewCfgPortTable.setStatus('current')
dhcpSnoopingNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "dhcpSnoopingNewCfgportId"))
if mibBuilder.loadTexts: dhcpSnoopingNewCfgPortTableEntry.setStatus('current')
dhcpSnoopingNewCfgportId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingNewCfgportId.setStatus('current')
dhcpSnoopingNewCfgportTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingNewCfgportTrusted.setStatus('current')
dhcpSnoopingNewCfgportRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingNewCfgportRateLimit.setStatus('current')
dhcpSnoopingCurCfgVlanTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 7), )
if mibBuilder.loadTexts: dhcpSnoopingCurCfgVlanTable.setStatus('current')
dhcpSnoopingCurCfgVlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "dhcpSnoopingCurCfgVlanId"))
if mibBuilder.loadTexts: dhcpSnoopingCurCfgVlanTableEntry.setStatus('current')
dhcpSnoopingCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingCurCfgVlanId.setStatus('current')
dhcpSnoopingCurCfgVlanOnState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingCurCfgVlanOnState.setStatus('current')
dhcpSnoopingNewCfgVlanTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 8), )
if mibBuilder.loadTexts: dhcpSnoopingNewCfgVlanTable.setStatus('current')
dhcpSnoopingNewCfgVlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "dhcpSnoopingNewCfgVlanId"))
if mibBuilder.loadTexts: dhcpSnoopingNewCfgVlanTableEntry.setStatus('current')
dhcpSnoopingNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingNewCfgVlanId.setStatus('current')
dhcpSnoopingNewCfgVlanOnState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 33, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingNewCfgVlanOnState.setStatus('current')
dhcpSnoopingBindingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1), )
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoTable.setStatus('current')
dhcpSnoopingBindingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "dhcpSnoopingBindingInfoIndex"))
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoEntry.setStatus('current')
dhcpSnoopingBindingInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoIndex.setStatus('current')
dhcpSnoopingBindingInfoMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoMac.setStatus('current')
dhcpSnoopingBindingInfoIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoIp.setStatus('current')
dhcpSnoopingBindingInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoVLAN.setStatus('current')
dhcpSnoopingBindingInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoPort.setStatus('current')
dhcpSnoopingBindingInfoExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoExpiry.setStatus('current')
dhcpSnoopingBindingInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingBindingInfoType.setStatus('current')
dhcpSnoopingStatInPacketRequest = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatInPacketRequest.setStatus('current')
dhcpSnoopingStatInPacketReply = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 25, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatInPacketReply.setStatus('current')
dhcpSnoopingStatDroppedPacketInvalid = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 25, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatDroppedPacketInvalid.setStatus('current')
dhcpSnoopingStatDroppedPacketRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 25, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatDroppedPacketRateLimit.setStatus('current')
dhcpSnoopingStatDroppedPacketOther = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 25, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatDroppedPacketOther.setStatus('current')
vrrpOper = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 4, 1))
dhcpInfoMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoMacAddr.setStatus('current')
dhcpInfoAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoAddr.setStatus('current')
dhcpInfoSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoSubnetMask.setStatus('current')
dhcpInfoDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoDefaultGateway.setStatus('current')
dhcpInfoServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoServer.setStatus('current')
dhcpInfoLeaseObtained = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoLeaseObtained.setStatus('current')
dhcpInfoLeaseExpires = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 15, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoLeaseExpires.setStatus('current')
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('current')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('current')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('current')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('current')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('current')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('current')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('obsolete')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('current')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('current')
ipCurCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setStatus('current')
ipCurCfgIntfRouteAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfRouteAdv.setStatus('current')
ipCurCfgIntfManagedCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfManagedCfg.setStatus('current')
ipCurCfgIntfOtherCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfOtherCfg.setStatus('current')
ipCurCfgIntfAdvLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAdvLifetime.setStatus('current')
ipCurCfgIntfDadAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfDadAttempts.setStatus('current')
ipCurCfgIntfReachTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfReachTime.setStatus('current')
ipCurCfgIntfAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAdvInterval.setStatus('current')
ipCurCfgIntfAdvIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAdvIntervalMin.setStatus('current')
ipCurCfgIntfRetransmitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfRetransmitTimer.setStatus('current')
ipCurCfgIntfHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfHopLimit.setStatus('current')
ipCurCfgIntfAdvMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAdvMtu.setStatus('current')
ipCurCfgIntfIp6Host = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIp6Host.setStatus('current')
ipCurCfgSecIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgSecIntfAddr.setStatus('current')
ipCurCfgSecIntfPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgSecIntfPrefix.setStatus('current')
ipCurCfgIntfAnycast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anycast", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAnycast.setStatus('current')
ipCurCfgSecIntfAnycast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anycast", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgSecIntfAnycast.setStatus('current')
ipCurCfgIntfIp6Dstun = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIp6Dstun.setStatus('current')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('current')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('current')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('current')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('current')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('current')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('current')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('current')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('current')
ipNewCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setStatus('current')
ipNewCfgIntfRouteAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfRouteAdv.setStatus('current')
ipNewCfgIntfManagedCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfManagedCfg.setStatus('current')
ipNewCfgIntfOtherCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfOtherCfg.setStatus('current')
ipNewCfgIntfAdvLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAdvLifetime.setStatus('current')
ipNewCfgIntfDadAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfDadAttempts.setStatus('current')
ipNewCfgIntfReachTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfReachTime.setStatus('current')
ipNewCfgIntfAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAdvInterval.setStatus('current')
ipNewCfgIntfAdvIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAdvIntervalMin.setStatus('current')
ipNewCfgIntfRetransmitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 21), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfRetransmitTimer.setStatus('current')
ipNewCfgIntfHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfHopLimit.setStatus('current')
ipNewCfgIntfAdvMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAdvMtu.setStatus('current')
ipNewCfgIntfIp6Host = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfIp6Host.setStatus('current')
ipNewCfgSecIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgSecIntfAddr.setStatus('current')
ipNewCfgSecIntfPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgSecIntfPrefix.setStatus('current')
ipNewCfgIntfAnycast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anycast", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfAnycast.setStatus('current')
ipNewCfgSecIntfAnycast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anycast", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgSecIntfAnycast.setStatus('current')
ipNewCfgIntfIp6Dstun = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfIp6Dstun.setStatus('current')
ipInterfaceLoopbackTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceLoopbackTableMax.setStatus('current')
ipCurCfgIntfLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfLoopbackTable.setStatus('current')
ipCurCfgIntfLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgIntfLoopbackIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfLoopbackEntry.setStatus('current')
ipCurCfgIntfLoopbackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfLoopbackIndex.setStatus('current')
ipCurCfgIntfLoopbackAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfLoopbackAddr.setStatus('current')
ipCurCfgIntfLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfLoopbackMask.setStatus('current')
ipCurCfgIntfLoopbackBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfLoopbackBroadcast.setStatus('current')
ipCurCfgIntfLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfLoopbackState.setStatus('current')
ipNewCfgIntfLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfLoopbackTable.setStatus('current')
ipNewCfgIntfLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgIntfLoopbackIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfLoopbackEntry.setStatus('current')
ipNewCfgIntfLoopbackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfLoopbackIndex.setStatus('current')
ipNewCfgIntfLoopbackAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfLoopbackAddr.setStatus('current')
ipNewCfgIntfLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfLoopbackMask.setStatus('current')
ipNewCfgIntfLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfLoopbackState.setStatus('current')
ipNewCfgIntfLoopbackDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 24, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfLoopbackDelete.setStatus('current')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('current')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('current')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('current')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('current')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('current')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('current')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('current')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('current')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('current')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('current')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('current')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('current')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('current')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('current')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('current')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('current')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('current')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('current')
ipStaticRouteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setStatus('current')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('current')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('current')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('current')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('current')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('current')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('current')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('current')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('current')
ipStaticRouteClearAllByDestIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAllByDestIp.setStatus('current')
ipStaticRouteClearAllByGatewayIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAllByGatewayIp.setStatus('current')
ipStaticRouteClearAllByInterface = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAllByInterface.setStatus('current')
ipStaticRouteClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAll.setStatus('current')
ipStaticRouteCurPingInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteCurPingInterval.setStatus('current')
ipStaticRouteNewPingInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteNewPingInterval.setStatus('current')
ipStaticRouteCurPingRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteCurPingRetries.setStatus('current')
ipStaticRouteNewPingRetries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteNewPingRetries.setStatus('current')
ipStaticRouteCurEcmpHash = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteCurEcmpHash.setStatus('current')
ipStaticRouteNewEcmpHash = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteNewEcmpHash.setStatus('current')
ipStaticRouteCurHealthcheck = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteCurHealthcheck.setStatus('current')
ipStaticRouteNewHealthcheck = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteNewHealthcheck.setStatus('current')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('current')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('current')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('current')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('current')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('current')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('current')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('current')
ripCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1), )
if mibBuilder.loadTexts: ripCurCfgIntfTable.setStatus('current')
ripCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ripCurCfgIntfIndex"))
if mibBuilder.loadTexts: ripCurCfgIntfEntry.setStatus('current')
ripCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfIndex.setStatus('current')
ripCurCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2), ("ripVersionBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfVersion.setStatus('current')
ripCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfState.setStatus('current')
ripCurCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfListen.setStatus('current')
ripCurCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfTrigUpdate.setStatus('current')
ripCurCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMcastUpdate.setStatus('current')
ripCurCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfPoisonReverse.setStatus('current')
ripCurCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfSupply.setStatus('current')
ripCurCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMetric.setStatus('current')
ripCurCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfAuth.setStatus('current')
ripCurCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfKey.setStatus('current')
ripCurCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfDefault.setStatus('current')
ripCurCfgIntfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfSplitHorizon.setStatus('current')
ripNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2), )
if mibBuilder.loadTexts: ripNewCfgIntfTable.setStatus('current')
ripNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ripNewCfgIntfIndex"))
if mibBuilder.loadTexts: ripNewCfgIntfEntry.setStatus('current')
ripNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgIntfIndex.setStatus('current')
ripNewCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2), ("ripVersionBoth", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfVersion.setStatus('current')
ripNewCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfSupply.setStatus('current')
ripNewCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfListen.setStatus('current')
ripNewCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfTrigUpdate.setStatus('current')
ripNewCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfMcastUpdate.setStatus('current')
ripNewCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfPoisonReverse.setStatus('current')
ripNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfState.setStatus('current')
ripNewCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfMetric.setStatus('current')
ripNewCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfAuth.setStatus('current')
ripNewCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfKey.setStatus('current')
ripNewCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfDefault.setStatus('current')
ripNewCfgIntfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfSplitHorizon.setStatus('current')
ripGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 3))
rip2CurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgState.setStatus('current')
rip2NewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgState.setStatus('current')
rip2CurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgUpdatePeriod.setStatus('current')
rip2NewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgUpdatePeriod.setStatus('current')
ripRouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4))
ripRedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 1))
ripCurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticMetric.setStatus('current')
ripNewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticMetric.setStatus('current')
ripCurCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticOutRmapList.setStatus('current')
ripNewCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgStaticOutRmapList.setStatus('current')
ripNewCfgStaticAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticAddOutRmap.setStatus('current')
ripNewCfgStaticRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticRemoveOutRmap.setStatus('current')
ripRedistributeEbgp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 2))
ripCurCfgEbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEbgpMetric.setStatus('current')
ripNewCfgEbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEbgpMetric.setStatus('current')
ripCurCfgEbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEbgpOutRmapList.setStatus('current')
ripNewCfgEbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgEbgpOutRmapList.setStatus('current')
ripNewCfgEbgpAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEbgpAddOutRmap.setStatus('current')
ripNewCfgEbgpRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEbgpRemoveOutRmap.setStatus('current')
ripRedistributeIbgp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 3))
ripCurCfgIbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIbgpMetric.setStatus('current')
ripNewCfgIbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIbgpMetric.setStatus('current')
ripCurCfgIbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIbgpOutRmapList.setStatus('current')
ripNewCfgIbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgIbgpOutRmapList.setStatus('current')
ripNewCfgIbgpAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIbgpAddOutRmap.setStatus('current')
ripNewCfgIbgpRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIbgpRemoveOutRmap.setStatus('current')
ripRedistributeFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 4))
ripCurCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgFixedMetric.setStatus('current')
ripNewCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedMetric.setStatus('current')
ripCurCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgFixedOutRmapList.setStatus('current')
ripNewCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgFixedOutRmapList.setStatus('current')
ripNewCfgFixedAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedAddOutRmap.setStatus('current')
ripNewCfgFixedRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedRemoveOutRmap.setStatus('current')
ripRedistributeOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 5))
ripCurCfgOspfMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgOspfMetric.setStatus('current')
ripNewCfgOspfMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfMetric.setStatus('current')
ripCurCfgOspfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgOspfOutRmapList.setStatus('current')
ripNewCfgOspfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgOspfOutRmapList.setStatus('current')
ripNewCfgOspfAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfAddOutRmap.setStatus('current')
ripNewCfgOspfRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfRemoveOutRmap.setStatus('current')
ripRedistributeEospf = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 6))
ripCurCfgEospfMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEospfMetric.setStatus('current')
ripNewCfgEospfMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfMetric.setStatus('current')
ripCurCfgEospfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 6, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEospfOutRmapList.setStatus('current')
ripNewCfgEospfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 6, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgEospfOutRmapList.setStatus('current')
ripNewCfgEospfAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfAddOutRmap.setStatus('current')
ripNewCfgEospfRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 18, 4, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfRemoveOutRmap.setStatus('current')
ipFwdGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4, 1))
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('current')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('current')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('current')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('current')
ipFwdCurCfgICMP6Redirect = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgICMP6Redirect.setStatus('current')
ipFwdNewCfgICMP6Redirect = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgICMP6Redirect.setStatus('current')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('current')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('current')
ipCurCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setStatus('current')
ipNewCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setStatus('current')
ipCurCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setStatus('current')
ipNewCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setStatus('current')
ipCurCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpState.setStatus('current')
ipNewCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpState.setStatus('current')
ipCurCfgBootpGlobalServerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 20), )
if mibBuilder.loadTexts: ipCurCfgBootpGlobalServerTable.setStatus('current')
ipCurCfgBootpGlobalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 20, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgBootpGlobalServerIndex"))
if mibBuilder.loadTexts: ipCurCfgBootpGlobalServerEntry.setStatus('current')
ipCurCfgBootpGlobalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpGlobalServerIndex.setStatus('current')
ipCurCfgBootpGlobalServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 20, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpGlobalServerAddress.setStatus('current')
ipNewCfgBootpGlobalServerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 21), )
if mibBuilder.loadTexts: ipNewCfgBootpGlobalServerTable.setStatus('current')
ipNewCfgBootpGlobalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 21, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgBootpGlobalServerIndex"))
if mibBuilder.loadTexts: ipNewCfgBootpGlobalServerEntry.setStatus('current')
ipNewCfgBootpGlobalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgBootpGlobalServerIndex.setStatus('current')
ipNewCfgBootpGlobalServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 21, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpGlobalServerAddress.setStatus('current')
ipCurCfgBootpBcastDomainTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 22), )
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainTable.setStatus('current')
ipCurCfgBootpBcastDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 22, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgBootpBcastDomainIndex"))
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainEntry.setStatus('current')
ipCurCfgBootpBcastDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainIndex.setStatus('current')
ipCurCfgBootpBcastDomainVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainVlan.setStatus('current')
ipCurCfgBootpBcastDomainEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainEnable.setStatus('current')
ipNewCfgBootpBcastDomainTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 23), )
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainTable.setStatus('current')
ipNewCfgBootpBcastDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 23, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgBootpBcastDomainIndex"))
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainEntry.setStatus('current')
ipNewCfgBootpBcastDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainIndex.setStatus('current')
ipNewCfgBootpBcastDomainVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 23, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainVlan.setStatus('current')
ipNewCfgBootpBcastDomainEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainEnable.setStatus('current')
ipNewCfgBootpBcastDomainAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainAction.setStatus('current')
ipCurCfgBootpBcastDomainServerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 24), )
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainServerTable.setStatus('current')
ipCurCfgBootpBcastDomainServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 24, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgBootpBcastDomainBDIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgBootpBcastDomainServIndex"))
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainServerEntry.setStatus('current')
ipCurCfgBootpBcastDomainBDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainBDIndex.setStatus('current')
ipCurCfgBootpBcastDomainServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainServIndex.setStatus('current')
ipCurCfgBootpBcastDomainServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 24, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpBcastDomainServerIP.setStatus('current')
ipNewCfgBootpBcastDomainServerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 25), )
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainServerTable.setStatus('current')
ipNewCfgBootpBcastDomainServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 25, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgBootpBcastDomainBDIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgBootpBcastDomainServIndex"))
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainServerEntry.setStatus('current')
ipNewCfgBootpBcastDomainBDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainBDIndex.setStatus('current')
ipNewCfgBootpBcastDomainServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainServIndex.setStatus('current')
ipNewCfgBootpBcastDomainServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 25, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpBcastDomainServerIP.setStatus('current')
ipCurCfgBootpOpt82State = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpOpt82State.setStatus('current')
ipNewCfgBootpOpt82State = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpOpt82State.setStatus('current')
ipCurCfgBootpOpt82Policy = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("replace", 0), ("drop", 1), ("keep", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpOpt82Policy.setStatus('current')
ipNewCfgBootpOpt82Policy = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 8, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("replace", 0), ("drop", 1), ("keep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpOpt82Policy.setStatus('current')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('current')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('current')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('current')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('current')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('current')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('current')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('current')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('current')
vrrpCurCfgGenHoldoff = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHoldoff.setStatus('current')
vrrpNewCfgGenHoldoff = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHoldoff.setStatus('current')
vrrpVirtRtrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setStatus('current')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('current')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('current')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('current')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('current')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('current')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('current')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('current')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('current')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('current')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('current')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('current')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('current')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('current')
vrrpCurCfgVirtRtrFastAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrFastAdvertisement.setStatus('current')
vrrpCurCfgVirtRtrPreDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreDelay.setStatus('current')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('current')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('current')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('current')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('current')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('current')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('current')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('current')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('current')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('current')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('current')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('current')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('current')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('current')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('current')
vrrpNewCfgVirtRtrFastAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrFastAdvertisement.setStatus('current')
vrrpNewCfgVirtRtrPreDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreDelay.setStatus('current')
vrrpIfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setStatus('current')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 6), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('current')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('current')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('current')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('current')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('current')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 7), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('current')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('current')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('current')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('current')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('current')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('current')
vrrpVirtRtrGrpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setStatus('current')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('current')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('current')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('current')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('current')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('current')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('current')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('current')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('current')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('current')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('current')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('current')
vrrpCurCfgVirtRtrGrpFastAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpFastAdvertisement.setStatus('current')
vrrpCurCfgVirtRtrGrpPredelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPredelay.setStatus('current')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('current')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('current')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('current')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('current')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('current')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('current')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('current')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('current')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('current')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('current')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('current')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('current')
vrrpNewCfgVirtRtrGrpFastAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpFastAdvertisement.setStatus('current')
vrrpNewCfgVirtRtrGrpPredelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 6, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPredelay.setStatus('current')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('current')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('current')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('current')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('current')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('current')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('current')
dnsNewCfgFirstRequestAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgFirstRequestAddr.setStatus('current')
dnsCurCfgFirstRequestAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgFirstRequestAddr.setStatus('current')
dnsCurCfgPriServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgtb", 2), ("mgta", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPriServerPort.setStatus('current')
dnsNewCfgPriServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgtb", 2), ("mgta", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPriServerPort.setStatus('current')
dnsCurCfgSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgtb", 2), ("mgta", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecServerPort.setStatus('current')
dnsNewCfgSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("mgtb", 2), ("mgta", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecServerPort.setStatus('current')
ipNwfTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNwfTableMax.setStatus('current')
ipCurCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 2), )
if mibBuilder.loadTexts: ipCurCfgNwfTable.setStatus('current')
ipCurCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgNwfIndex"))
if mibBuilder.loadTexts: ipCurCfgNwfEntry.setStatus('current')
ipCurCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfIndex.setStatus('current')
ipCurCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfAddr.setStatus('current')
ipCurCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfMask.setStatus('current')
ipCurCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfState.setStatus('current')
ipNewCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 3), )
if mibBuilder.loadTexts: ipNewCfgNwfTable.setStatus('current')
ipNewCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgNwfIndex"))
if mibBuilder.loadTexts: ipNewCfgNwfEntry.setStatus('current')
ipNewCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgNwfIndex.setStatus('current')
ipNewCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfAddr.setStatus('current')
ipNewCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfMask.setStatus('current')
ipNewCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfState.setStatus('current')
ipNewCfgNwfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfDelete.setStatus('current')
ipRmapTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRmapTableMax.setStatus('current')
ipCurCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2), )
if mibBuilder.loadTexts: ipCurCfgRmapTable.setStatus('current')
ipCurCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgRmapIndex"))
if mibBuilder.loadTexts: ipCurCfgRmapEntry.setStatus('current')
ipCurCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapIndex.setStatus('current')
ipCurCfgRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapLp.setStatus('current')
ipCurCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetric.setStatus('current')
ipCurCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapPrec.setStatus('current')
ipCurCfgRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapWeight.setStatus('current')
ipCurCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapState.setStatus('current')
ipCurCfgRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapAp.setStatus('current')
ipCurCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetricType.setStatus('current')
ipCurCfgRmapNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapNexthop.setStatus('current')
ipNewCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3), )
if mibBuilder.loadTexts: ipNewCfgRmapTable.setStatus('current')
ipNewCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgRmapIndex"))
if mibBuilder.loadTexts: ipNewCfgRmapEntry.setStatus('current')
ipNewCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgRmapIndex.setStatus('current')
ipNewCfgRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapLp.setStatus('current')
ipNewCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetric.setStatus('current')
ipNewCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapPrec.setStatus('current')
ipNewCfgRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapWeight.setStatus('current')
ipNewCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapState.setStatus('current')
ipNewCfgRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapAp.setStatus('current')
ipNewCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetricType.setStatus('current')
ipNewCfgRmapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapDelete.setStatus('current')
ipNewCfgRmapNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapNexthop.setStatus('current')
ipAlistTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlistTableMax.setStatus('current')
ipCurCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5), )
if mibBuilder.loadTexts: ipCurCfgAlistTable.setStatus('current')
ipCurCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgAlistRmapIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgAlistIndex"))
if mibBuilder.loadTexts: ipCurCfgAlistEntry.setStatus('current')
ipCurCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistRmapIndex.setStatus('current')
ipCurCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistIndex.setStatus('current')
ipCurCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistNwf.setStatus('current')
ipCurCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistMetric.setStatus('current')
ipCurCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistAction.setStatus('current')
ipCurCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistState.setStatus('current')
ipNewCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6), )
if mibBuilder.loadTexts: ipNewCfgAlistTable.setStatus('current')
ipNewCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgAlistRmapIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgAlistIndex"))
if mibBuilder.loadTexts: ipNewCfgAlistEntry.setStatus('current')
ipNewCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistRmapIndex.setStatus('current')
ipNewCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistIndex.setStatus('current')
ipNewCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistNwf.setStatus('current')
ipNewCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistMetric.setStatus('current')
ipNewCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistAction.setStatus('current')
ipNewCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistState.setStatus('current')
ipNewCfgAlistDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistDelete.setStatus('current')
ipAspathTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAspathTableMax.setStatus('current')
ipCurCfgAspathTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 8), )
if mibBuilder.loadTexts: ipCurCfgAspathTable.setStatus('current')
ipCurCfgAspathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgAspathRmapIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgAlistIndex"))
if mibBuilder.loadTexts: ipCurCfgAspathEntry.setStatus('current')
ipCurCfgAspathRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathRmapIndex.setStatus('current')
ipCurCfgAspathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathIndex.setStatus('current')
ipCurCfgAspathAS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathAS.setStatus('current')
ipCurCfgAspathAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathAction.setStatus('current')
ipCurCfgAspathState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathState.setStatus('current')
ipNewCfgAspathTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9), )
if mibBuilder.loadTexts: ipNewCfgAspathTable.setStatus('current')
ipNewCfgAspathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgAspathRmapIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgAspathIndex"))
if mibBuilder.loadTexts: ipNewCfgAspathEntry.setStatus('current')
ipNewCfgAspathRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAspathRmapIndex.setStatus('current')
ipNewCfgAspathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAspathIndex.setStatus('current')
ipNewCfgAspathAS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathAS.setStatus('current')
ipNewCfgAspathAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathAction.setStatus('current')
ipNewCfgAspathState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathState.setStatus('current')
ipNewCfgAspathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 11, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathDelete.setStatus('current')
bgpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1))
bgpCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgState.setStatus('current')
bgpNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgState.setStatus('current')
bgpCurCfgLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgLocalPref.setStatus('current')
bgpNewCfgLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgLocalPref.setStatus('current')
bgpCurCfgASNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgASNumber.setStatus('current')
bgpNewCfgASNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgASNumber.setStatus('current')
bgpCurCfgEbgpMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgEbgpMaxPaths.setStatus('current')
bgpNewCfgEbgpMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgEbgpMaxPaths.setStatus('current')
bgpCurCfgIbgpMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgIbgpMaxPaths.setStatus('current')
bgpNewCfgIbgpMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgIbgpMaxPaths.setStatus('current')
bgpCurCfgAsn4Comp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAsn4Comp.setStatus('current')
bgpNewCfgAsn4Comp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgAsn4Comp.setStatus('current')
bgpCurCfgDscp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgDscp.setStatus('current')
bgpNewCfgDscp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgDscp.setStatus('current')
bgpNewCfgClusterId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgClusterId.setStatus('current')
bgpCurCfgClusterId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgClusterId.setStatus('current')
bgpNewCfgClientToClientReflection = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgClientToClientReflection.setStatus('current')
bgpCurCfgClientToClientReflection = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgClientToClientReflection.setStatus('current')
bgpPeerTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerTableMax.setStatus('current')
bgpCurCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3), )
if mibBuilder.loadTexts: bgpCurCfgPeerTable.setStatus('current')
bgpCurCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpCurCfgPeerIndex"))
if mibBuilder.loadTexts: bgpCurCfgPeerEntry.setStatus('current')
bgpCurCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerIndex.setStatus('current')
bgpCurCfgPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerRemoteAddr.setStatus('current')
bgpCurCfgPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerRemoteAs.setStatus('current')
bgpCurCfgPeerTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerTtl.setStatus('current')
bgpCurCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerState.setStatus('current')
bgpCurCfgPeerMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerMetric.setStatus('current')
bgpCurCfgPeerDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("import", 2), ("originate", 3), ("redistribute", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerDefaultAction.setStatus('current')
bgpCurCfgPeerOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerOspfState.setStatus('current')
bgpCurCfgPeerFixedState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerFixedState.setStatus('current')
bgpCurCfgPeerStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerStaticState.setStatus('current')
bgpCurCfgPeerInRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerInRmapList.setStatus('current')
bgpCurCfgPeerOutRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerOutRmapList.setStatus('current')
bgpCurCfgPeerHold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerHold.setStatus('current')
bgpCurCfgPeerAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerAlive.setStatus('current')
bgpCurCfgPeerAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerAdvert.setStatus('current')
bgpCurCfgPeerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerRetry.setStatus('current')
bgpCurCfgPeerOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerOrig.setStatus('current')
bgpCurCfgPeerRipState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerRipState.setStatus('current')
bgpCurCfgPeerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerPassword.setStatus('current')
bgpCurCfgPeerPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerPassive.setStatus('current')
bgpCurCfgPeerUpdateSrcIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerUpdateSrcIf.setStatus('current')
bgpCurCfgPeerUpdateSrcLoopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerUpdateSrcLoopIf.setStatus('current')
bgpCurCfgPeerTtlSecHops = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerTtlSecHops.setStatus('current')
bgpCurCfgPeerNexthopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerNexthopSelf.setStatus('current')
bgpCurCfgPeerClient = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerClient.setStatus('current')
bgpNewCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4), )
if mibBuilder.loadTexts: bgpNewCfgPeerTable.setStatus('current')
bgpNewCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpNewCfgPeerIndex"))
if mibBuilder.loadTexts: bgpNewCfgPeerEntry.setStatus('current')
bgpNewCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgPeerIndex.setStatus('current')
bgpNewCfgPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoteAddr.setStatus('current')
bgpNewCfgPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoteAs.setStatus('current')
bgpNewCfgPeerTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerTtl.setStatus('current')
bgpNewCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerState.setStatus('current')
bgpNewCfgPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerDelete.setStatus('current')
bgpNewCfgPeerMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerMetric.setStatus('current')
bgpNewCfgPeerDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("import", 2), ("originate", 3), ("redistribute", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerDefaultAction.setStatus('current')
bgpNewCfgPeerOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerOspfState.setStatus('current')
bgpNewCfgPeerFixedState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerFixedState.setStatus('current')
bgpNewCfgPeerStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerStaticState.setStatus('current')
bgpNewCfgPeerInRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgPeerInRmapList.setStatus('current')
bgpNewCfgPeerOutRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgPeerOutRmapList.setStatus('current')
bgpNewCfgPeerAddInRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerAddInRmap.setStatus('current')
bgpNewCfgPeerAddOutRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerAddOutRmap.setStatus('current')
bgpNewCfgPeerRemoveInRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoveInRmap.setStatus('current')
bgpNewCfgPeerRemoveOutRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoveOutRmap.setStatus('current')
bgpNewCfgPeerHold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerHold.setStatus('current')
bgpNewCfgPeerAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerAlive.setStatus('current')
bgpNewCfgPeerAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerAdvert.setStatus('current')
bgpNewCfgPeerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRetry.setStatus('current')
bgpNewCfgPeerOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerOrig.setStatus('current')
bgpNewCfgPeerRipState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRipState.setStatus('current')
bgpNewCfgPeerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerPassword.setStatus('current')
bgpNewCfgPeerPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerPassive.setStatus('current')
bgpNewCfgPeerUpdateSrcIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerUpdateSrcIf.setStatus('current')
bgpNewCfgPeerUpdateSrcLoopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerUpdateSrcLoopIf.setStatus('current')
bgpNewCfgPeerTtlSecHops = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerTtlSecHops.setStatus('current')
bgpNewCfgPeerNexthopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerNexthopSelf.setStatus('current')
bgpNewCfgPeerClient = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerClient.setStatus('current')
bgpAggrTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpAggrTableMax.setStatus('current')
bgpCurCfgAggrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 6), )
if mibBuilder.loadTexts: bgpCurCfgAggrTable.setStatus('current')
bgpCurCfgAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpCurCfgAggrIndex"))
if mibBuilder.loadTexts: bgpCurCfgAggrEntry.setStatus('current')
bgpCurCfgAggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrIndex.setStatus('current')
bgpCurCfgAggrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrAddr.setStatus('current')
bgpCurCfgAggrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrMask.setStatus('current')
bgpCurCfgAggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrState.setStatus('current')
bgpNewCfgAggrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 7), )
if mibBuilder.loadTexts: bgpNewCfgAggrTable.setStatus('current')
bgpNewCfgAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpNewCfgAggrIndex"))
if mibBuilder.loadTexts: bgpNewCfgAggrEntry.setStatus('current')
bgpNewCfgAggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgAggrIndex.setStatus('current')
bgpNewCfgAggrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrAddr.setStatus('current')
bgpNewCfgAggrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 7, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrMask.setStatus('current')
bgpNewCfgAggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrState.setStatus('current')
bgpNewCfgAggrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrDelete.setStatus('current')
bgpGroupTableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpGroupTableMax.setStatus('current')
bgpCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9), )
if mibBuilder.loadTexts: bgpCurCfgGroupTable.setStatus('current')
bgpCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpCurCfgGroupIndex"))
if mibBuilder.loadTexts: bgpCurCfgGroupEntry.setStatus('current')
bgpCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupIndex.setStatus('current')
bgpCurCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupName.setStatus('current')
bgpCurCfgGroupRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupRemoteAddr.setStatus('current')
bgpCurCfgGroupRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupRemoteMask.setStatus('current')
bgpCurCfgGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupLimit.setStatus('current')
bgpCurCfgGroupUpdateSrcIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupUpdateSrcIf.setStatus('current')
bgpCurCfgGroupUpdateSrcLoopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupUpdateSrcLoopIf.setStatus('current')
bgpCurCfgGroupHold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupHold.setStatus('current')
bgpCurCfgGroupAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupAlive.setStatus('current')
bgpCurCfgGroupAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupAdvert.setStatus('current')
bgpCurCfgGroupOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupOrig.setStatus('current')
bgpCurCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupMetric.setStatus('current')
bgpCurCfgGroupTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupTtl.setStatus('current')
bgpCurCfgGroupDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("import", 2), ("originate", 3), ("redistribute", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupDefaultAction.setStatus('current')
bgpCurCfgGroupOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupOspfState.setStatus('current')
bgpCurCfgGroupRipState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupRipState.setStatus('current')
bgpCurCfgGroupFixedState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupFixedState.setStatus('current')
bgpCurCfgGroupStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupStaticState.setStatus('current')
bgpCurCfgGroupInRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupInRmapList.setStatus('current')
bgpCurCfgGroupOutRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupOutRmapList.setStatus('current')
bgpCurCfgGroupPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupPassword.setStatus('current')
bgpCurCfgGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupState.setStatus('current')
bgpCurCfgGroupTtlSecHops = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupTtlSecHops.setStatus('current')
bgpCurCfgGroupNexthopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupNexthopSelf.setStatus('current')
bgpCurCfgGroupClient = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupClient.setStatus('current')
bgpNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10), )
if mibBuilder.loadTexts: bgpNewCfgGroupTable.setStatus('current')
bgpNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpNewCfgGroupIndex"))
if mibBuilder.loadTexts: bgpNewCfgGroupEntry.setStatus('current')
bgpNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupIndex.setStatus('current')
bgpNewCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupName.setStatus('current')
bgpNewCfgGroupRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupRemoteAddr.setStatus('current')
bgpNewCfgGroupRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupRemoteMask.setStatus('current')
bgpNewCfgGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupLimit.setStatus('current')
bgpNewCfgGroupUpdateSrcIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupUpdateSrcIf.setStatus('current')
bgpNewCfgGroupUpdateSrcLoopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupUpdateSrcLoopIf.setStatus('current')
bgpNewCfgGroupHold = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupHold.setStatus('current')
bgpNewCfgGroupAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupAlive.setStatus('current')
bgpNewCfgGroupAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupAdvert.setStatus('current')
bgpNewCfgGroupOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupOrig.setStatus('current')
bgpNewCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupMetric.setStatus('current')
bgpNewCfgGroupTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupTtl.setStatus('current')
bgpNewCfgGroupDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("import", 2), ("originate", 3), ("redistribute", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupDefaultAction.setStatus('current')
bgpNewCfgGroupOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupOspfState.setStatus('current')
bgpNewCfgGroupRipState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupRipState.setStatus('current')
bgpNewCfgGroupFixedState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupFixedState.setStatus('current')
bgpNewCfgGroupStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupStaticState.setStatus('current')
bgpNewCfgGroupInRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgGroupInRmapList.setStatus('current')
bgpNewCfgGroupOutRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgGroupOutRmapList.setStatus('current')
bgpNewCfgGroupAddInRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupAddInRmap.setStatus('current')
bgpNewCfgGroupAddOutRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupAddOutRmap.setStatus('current')
bgpNewCfgGroupRemoveInRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupRemoveInRmap.setStatus('current')
bgpNewCfgGroupRemoveOutRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupRemoveOutRmap.setStatus('current')
bgpNewCfgGroupPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupPassword.setStatus('current')
bgpNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupDelete.setStatus('current')
bgpNewCfgGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupState.setStatus('current')
bgpNewCfgGroupTtlSecHops = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupTtlSecHops.setStatus('current')
bgpNewCfgGroupNexthopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupNexthopSelf.setStatus('current')
bgpNewCfgGroupClient = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupClient.setStatus('current')
bgpCurCfgGroupRASTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 11), )
if mibBuilder.loadTexts: bgpCurCfgGroupRASTable.setStatus('current')
bgpCurCfgGroupRASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 11, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpCurCfgGroupIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "bgpCurCfgGroupRASIndex"))
if mibBuilder.loadTexts: bgpCurCfgGroupRASEntry.setStatus('current')
bgpCurCfgGroupRASIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupRASIndex.setStatus('current')
bgpCurCfgGroupRAS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgGroupRAS.setStatus('current')
bgpNewCfgGroupRASTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 12), )
if mibBuilder.loadTexts: bgpNewCfgGroupRASTable.setStatus('current')
bgpNewCfgGroupRASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 12, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpNewCfgGroupIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "bgpNewCfgGroupRASIndex"))
if mibBuilder.loadTexts: bgpNewCfgGroupRASEntry.setStatus('current')
bgpNewCfgGroupRASIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgGroupRASIndex.setStatus('current')
bgpNewCfgGroupRAS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 12, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgGroupRAS.setStatus('current')
bgpInfoGroupTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4), )
if mibBuilder.loadTexts: bgpInfoGroupTable.setStatus('current')
bgpInfoGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpInfoGroupIndex"))
if mibBuilder.loadTexts: bgpInfoGroupEntry.setStatus('current')
bgpInfoGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupIndex.setStatus('current')
bgpInfoGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupName.setStatus('current')
bgpInfoGroupRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupRemoteAddr.setStatus('current')
bgpInfoGroupRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupRemoteMask.setStatus('current')
bgpInfoGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupLimit.setStatus('current')
bgpInfoGroupPeersNum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupPeersNum.setStatus('current')
bgpInfoGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupState.setStatus('current')
bgpInfoGroupRASTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 5), )
if mibBuilder.loadTexts: bgpInfoGroupRASTable.setStatus('current')
bgpInfoGroupRASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpInfoGroupIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "bgpInfoGroupRASIndex"))
if mibBuilder.loadTexts: bgpInfoGroupRASEntry.setStatus('current')
bgpInfoGroupRASIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupRASIndex.setStatus('current')
bgpInfoGroupRAS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoGroupRAS.setStatus('current')
bgpInfoDynamicPeerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6), )
if mibBuilder.loadTexts: bgpInfoDynamicPeerTable.setStatus('current')
bgpInfoDynamicPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpInfoDynamicPeerIndex"))
if mibBuilder.loadTexts: bgpInfoDynamicPeerEntry.setStatus('current')
bgpInfoDynamicPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicPeerIndex.setStatus('current')
bgpInfoDynamicPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicPeerRemoteAddr.setStatus('current')
bgpInfoDynamicPeerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicPeerGroup.setStatus('current')
bgpInfoDynamicPeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicPeerVersion.setStatus('current')
bgpInfoDynamicPeerTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicPeerTtl.setStatus('current')
bgpInfoDynamicPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicPeerRemoteAs.setStatus('current')
bgpInfoDynamicPeerRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicPeerRouterId.setStatus('current')
bgpInfoDynamicTotalReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicTotalReceivedPackets.setStatus('current')
bgpInfoDynamicTotalSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicTotalSentPackets.setStatus('current')
bgpInfoDynamicReceivedUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicReceivedUpdates.setStatus('current')
bgpInfoDynamicSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicSentUpdates.setStatus('current')
bgpInfoDynamicKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicKeepalive.setStatus('current')
bgpInfoDynamicHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicHoldtime.setStatus('current')
bgpInfoDynamicMinAdvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoDynamicMinAdvTime.setStatus('current')
ospfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1))
ospfCurCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setStatus('current')
ospfNewCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setStatus('current')
ospfCurCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setStatus('current')
ospfNewCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setStatus('current')
ospfIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setStatus('current')
ospfAreaTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setStatus('current')
ospfRangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setStatus('current')
ospfVirtIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setStatus('current')
ospfHostTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfHostTableMaxSize.setStatus('current')
ospfCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgState.setStatus('current')
ospfNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgState.setStatus('current')
ospfCurCfgLSDB = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgLSDB.setStatus('current')
ospfNewCfgLSDB = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgLSDB.setStatus('current')
ospfCurCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2), )
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setStatus('current')
ospfCurCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfCurCfgAreaIndex"))
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setStatus('current')
ospfCurCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setStatus('current')
ospfCurCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaId.setStatus('current')
ospfCurCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setStatus('current')
ospfCurCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setStatus('current')
ospfCurCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaType.setStatus('current')
ospfCurCfgAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaMetric.setStatus('current')
ospfCurCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaStatus.setStatus('current')
ospfNewCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3), )
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setStatus('current')
ospfNewCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfNewCfgAreaIndex"))
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setStatus('current')
ospfNewCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setStatus('current')
ospfNewCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgAreaId.setStatus('current')
ospfNewCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setStatus('current')
ospfNewCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setStatus('current')
ospfNewCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaType.setStatus('current')
ospfNewCfgAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaMetric.setStatus('current')
ospfNewCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaStatus.setStatus('current')
ospfNewCfgAreaDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaDelete.setStatus('current')
ospfCurCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 12), )
if mibBuilder.loadTexts: ospfCurCfgHostTable.setStatus('current')
ospfCurCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 12, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfCurCfgHostIndex"))
if mibBuilder.loadTexts: ospfCurCfgHostEntry.setStatus('current')
ospfCurCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIndex.setStatus('current')
ospfCurCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIpAddr.setStatus('current')
ospfCurCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostAreaIndex.setStatus('current')
ospfCurCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostCost.setStatus('current')
ospfCurCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostState.setStatus('current')
ospfNewCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13), )
if mibBuilder.loadTexts: ospfNewCfgHostTable.setStatus('current')
ospfNewCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfNewCfgHostIndex"))
if mibBuilder.loadTexts: ospfNewCfgHostEntry.setStatus('current')
ospfNewCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgHostIndex.setStatus('current')
ospfNewCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostIpAddr.setStatus('current')
ospfNewCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostAreaIndex.setStatus('current')
ospfNewCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostCost.setStatus('current')
ospfNewCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostState.setStatus('current')
ospfNewCfgHostDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgHostDelete.setStatus('current')
ospfMdkeyTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfMdkeyTableMaxSize.setStatus('current')
ospfCurCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 5), )
if mibBuilder.loadTexts: ospfCurCfgMdkeyTable.setStatus('current')
ospfCurCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfCurCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfCurCfgMdkeyEntry.setStatus('current')
ospfCurCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyIndex.setStatus('current')
ospfCurCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyKey.setStatus('current')
ospfNewCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 6), )
if mibBuilder.loadTexts: ospfNewCfgMdkeyTable.setStatus('current')
ospfNewCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfNewCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfNewCfgMdkeyEntry.setStatus('current')
ospfNewCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgMdkeyIndex.setStatus('current')
ospfNewCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyKey.setStatus('current')
ospfNewCfgMdkeyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyDelete.setStatus('current')
ospfCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7), )
if mibBuilder.loadTexts: ospfCurCfgIntfTable.setStatus('current')
ospfCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfCurCfgIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgIntfEntry.setStatus('current')
ospfCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfIndex.setStatus('current')
ospfCurCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfArea.setStatus('current')
ospfCurCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfMdkey.setStatus('current')
ospfCurCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfCost.setStatus('current')
ospfCurCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfPrio.setStatus('current')
ospfCurCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfHello.setStatus('current')
ospfCurCfgIntfHelloMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfHelloMS.setStatus('current')
ospfCurCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfDead.setStatus('current')
ospfCurCfgIntfDeadMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfDeadMS.setStatus('current')
ospfCurCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfTrans.setStatus('current')
ospfCurCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfRetra.setStatus('current')
ospfCurCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfAuthKey.setStatus('current')
ospfCurCfgIntfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfPassive.setStatus('current')
ospfCurCfgIntfPtop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfPtop.setStatus('current')
ospfCurCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfStatus.setStatus('current')
ospfNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8), )
if mibBuilder.loadTexts: ospfNewCfgIntfTable.setStatus('current')
ospfNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfNewCfgIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgIntfEntry.setStatus('current')
ospfNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIntfIndex.setStatus('current')
ospfNewCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfArea.setStatus('current')
ospfNewCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfMdkey.setStatus('current')
ospfNewCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfCost.setStatus('current')
ospfNewCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfPrio.setStatus('current')
ospfNewCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfHello.setStatus('current')
ospfNewCfgIntfHelloMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfHelloMS.setStatus('current')
ospfNewCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfDead.setStatus('current')
ospfNewCfgIntfDeadMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfDeadMS.setStatus('current')
ospfNewCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfTrans.setStatus('current')
ospfNewCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfRetra.setStatus('current')
ospfNewCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfAuthKey.setStatus('current')
ospfNewCfgIntfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfPassive.setStatus('current')
ospfNewCfgIntfPtop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfPtop.setStatus('current')
ospfNewCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfStatus.setStatus('current')
ospfNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIntfDelete.setStatus('current')
ospfCurCfgLoopIfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 20), )
if mibBuilder.loadTexts: ospfCurCfgLoopIfTable.setStatus('current')
ospfCurCfgLoopIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 20, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfCurCfgLoopIfIndex"))
if mibBuilder.loadTexts: ospfCurCfgLoopIfEntry.setStatus('current')
ospfCurCfgLoopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgLoopIfIndex.setStatus('current')
ospfCurCfgLoopIfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgLoopIfArea.setStatus('current')
ospfCurCfgLoopIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgLoopIfStatus.setStatus('current')
ospfNewCfgLoopIfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 21), )
if mibBuilder.loadTexts: ospfNewCfgLoopIfTable.setStatus('current')
ospfNewCfgLoopIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 21, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfNewCfgLoopIfIndex"))
if mibBuilder.loadTexts: ospfNewCfgLoopIfEntry.setStatus('current')
ospfNewCfgLoopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgLoopIfIndex.setStatus('current')
ospfNewCfgLoopIfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgLoopIfArea.setStatus('current')
ospfNewCfgLoopIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgLoopIfStatus.setStatus('current')
ospfNewCfgLoopIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgLoopIfDelete.setStatus('current')
ospfCurCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9), )
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTable.setStatus('current')
ospfCurCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfCurCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgVirtIntfEntry.setStatus('current')
ospfCurCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfIndex.setStatus('current')
ospfCurCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAreaId.setStatus('current')
ospfCurCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfNbr.setStatus('current')
ospfCurCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfMdkey.setStatus('current')
ospfCurCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfHello.setStatus('current')
ospfCurCfgVirtIntfHelloMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfHelloMS.setStatus('current')
ospfCurCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfDead.setStatus('current')
ospfCurCfgVirtIntfDeadMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfDeadMS.setStatus('current')
ospfCurCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTrans.setStatus('current')
ospfCurCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfRetra.setStatus('current')
ospfCurCfgVirtIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAuthKey.setStatus('current')
ospfCurCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfStatus.setStatus('current')
ospfNewCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10), )
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTable.setStatus('current')
ospfNewCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfNewCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgVirtIntfEntry.setStatus('current')
ospfNewCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfIndex.setStatus('current')
ospfNewCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAreaId.setStatus('current')
ospfNewCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfNbr.setStatus('current')
ospfNewCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfMdkey.setStatus('current')
ospfNewCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfHello.setStatus('current')
ospfNewCfgVirtIntfHelloMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfHelloMS.setStatus('current')
ospfNewCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDead.setStatus('current')
ospfNewCfgVirtIntfDeadMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDeadMS.setStatus('current')
ospfNewCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTrans.setStatus('current')
ospfNewCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfRetra.setStatus('current')
ospfNewCfgVirtIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAuthKey.setStatus('current')
ospfNewCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfStatus.setStatus('current')
ospfNewCfgVirtIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDelete.setStatus('current')
ospfCurCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14), )
if mibBuilder.loadTexts: ospfCurCfgRangeTable.setStatus('current')
ospfCurCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfCurCfgRangeIndex"))
if mibBuilder.loadTexts: ospfCurCfgRangeEntry.setStatus('current')
ospfCurCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeIndex.setStatus('current')
ospfCurCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAddr.setStatus('current')
ospfCurCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeMask.setStatus('current')
ospfCurCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAreaIndex.setStatus('current')
ospfCurCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeHideState.setStatus('current')
ospfCurCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeState.setStatus('current')
ospfNewCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15), )
if mibBuilder.loadTexts: ospfNewCfgRangeTable.setStatus('current')
ospfNewCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfNewCfgRangeIndex"))
if mibBuilder.loadTexts: ospfNewCfgRangeEntry.setStatus('current')
ospfNewCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRangeIndex.setStatus('current')
ospfNewCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAddr.setStatus('current')
ospfNewCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeMask.setStatus('current')
ospfNewCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAreaIndex.setStatus('current')
ospfNewCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeHideState.setStatus('current')
ospfNewCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeState.setStatus('current')
ospfNewCfgRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeDelete.setStatus('current')
ospfRouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4))
ospfRedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1))
ospfCurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetric.setStatus('current')
ospfNewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetric.setStatus('current')
ospfCurCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetricType.setStatus('current')
ospfNewCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetricType.setStatus('current')
ospfCurCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticOutRmapList.setStatus('current')
ospfNewCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgStaticOutRmapList.setStatus('current')
ospfNewCfgStaticAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticAddOutRmap.setStatus('current')
ospfNewCfgStaticRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticRemoveOutRmap.setStatus('current')
ospfRedistributeEbgp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2))
ospfCurCfgEbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgEbgpMetric.setStatus('current')
ospfNewCfgEbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpMetric.setStatus('current')
ospfCurCfgEbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgEbgpMetricType.setStatus('current')
ospfNewCfgEbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpMetricType.setStatus('current')
ospfCurCfgEbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgEbgpOutRmapList.setStatus('current')
ospfNewCfgEbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgEbgpOutRmapList.setStatus('current')
ospfNewCfgEbgpAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpAddOutRmap.setStatus('current')
ospfNewCfgEbgpRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpRemoveOutRmap.setStatus('current')
ospfRedistributeIbgp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3))
ospfCurCfgIbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIbgpMetric.setStatus('current')
ospfNewCfgIbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpMetric.setStatus('current')
ospfCurCfgIbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIbgpMetricType.setStatus('current')
ospfNewCfgIbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpMetricType.setStatus('current')
ospfCurCfgIbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIbgpOutRmapList.setStatus('current')
ospfNewCfgIbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIbgpOutRmapList.setStatus('current')
ospfNewCfgIbgpAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpAddOutRmap.setStatus('current')
ospfNewCfgIbgpRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpRemoveOutRmap.setStatus('current')
ospfRedistributeFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4))
ospfCurCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetric.setStatus('current')
ospfNewCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetric.setStatus('current')
ospfCurCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetricType.setStatus('current')
ospfNewCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetricType.setStatus('current')
ospfCurCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedOutRmapList.setStatus('current')
ospfNewCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgFixedOutRmapList.setStatus('current')
ospfNewCfgFixedAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedAddOutRmap.setStatus('current')
ospfNewCfgFixedRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedRemoveOutRmap.setStatus('current')
ospfRedistributeRip = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5))
ospfCurCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetric.setStatus('current')
ospfNewCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetric.setStatus('current')
ospfCurCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetricType.setStatus('current')
ospfNewCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetricType.setStatus('current')
ospfCurCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipOutRmapList.setStatus('current')
ospfNewCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRipOutRmapList.setStatus('current')
ospfNewCfgRipAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipAddOutRmap.setStatus('current')
ospfNewCfgRipRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 13, 4, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipRemoveOutRmap.setStatus('current')
ospf3General = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1))
ospf3IntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfTableMaxSize.setStatus('current')
ospf3AreaTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaTableMaxSize.setStatus('current')
ospf3RangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RangeTableMaxSize.setStatus('current')
ospf3ExtRangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3ExtRangeTableMaxSize.setStatus('current')
ospf3RedistTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RedistTableMaxSize.setStatus('current')
ospf3VirtIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIntfTableMaxSize.setStatus('current')
ospf3HostTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3HostTableMaxSize.setStatus('current')
ospf3NbrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NbrTableMaxSize.setStatus('current')
ospf3CurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgState.setStatus('current')
ospf3NewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgState.setStatus('current')
ospf3CurCfgRouterId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRouterId.setStatus('current')
ospf3NewCfgRouterId = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRouterId.setStatus('current')
ospf3CurCfgAbrType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("cisco", 2), ("ibm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAbrType.setStatus('current')
ospf3NewCfgAbrType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("cisco", 2), ("ibm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgAbrType.setStatus('current')
ospf3CurCfgLSDB = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgLSDB.setStatus('current')
ospf3NewCfgLSDB = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgLSDB.setStatus('current')
ospf3CurCfgExitOverflow = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExitOverflow.setStatus('current')
ospf3NewCfgExitOverflow = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgExitOverflow.setStatus('current')
ospf3CurCfgReferenceBw = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgReferenceBw.setStatus('current')
ospf3NewCfgReferenceBw = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgReferenceBw.setStatus('current')
ospf3CurCfgSpfDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgSpfDelay.setStatus('current')
ospf3NewCfgSpfDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgSpfDelay.setStatus('current')
ospf3CurCfgSpfHold = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgSpfHold.setStatus('current')
ospf3NewCfgSpfHold = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgSpfHold.setStatus('current')
ospf3CurCfgNssaAsbrDfRtTrans = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgNssaAsbrDfRtTrans.setStatus('current')
ospf3NewCfgNssaAsbrDfRtTrans = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgNssaAsbrDfRtTrans.setStatus('current')
ospf3CurCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2), )
if mibBuilder.loadTexts: ospf3CurCfgAreaTable.setStatus('current')
ospf3CurCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgAreaIndex"))
if mibBuilder.loadTexts: ospf3CurCfgAreaEntry.setStatus('current')
ospf3CurCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaIndex.setStatus('current')
ospf3CurCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaId.setStatus('current')
ospf3CurCfgAreaStbInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaStbInterval.setStatus('current')
ospf3CurCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transit", 1), ("stub", 2), ("nssa", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaType.setStatus('current')
ospf3CurCfgAreaNoSumm = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaNoSumm.setStatus('current')
ospf3CurCfgAreaDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaDefaultMetric.setStatus('current')
ospf3CurCfgAreaDefaultMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaDefaultMetricType.setStatus('current')
ospf3CurCfgAreaTranslRole = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("candidate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaTranslRole.setStatus('current')
ospf3CurCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgAreaStatus.setStatus('current')
ospf3NewCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3), )
if mibBuilder.loadTexts: ospf3NewCfgAreaTable.setStatus('current')
ospf3NewCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgAreaIndex"))
if mibBuilder.loadTexts: ospf3NewCfgAreaEntry.setStatus('current')
ospf3NewCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgAreaIndex.setStatus('current')
ospf3NewCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgAreaId.setStatus('current')
ospf3NewCfgAreaStbInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgAreaStbInterval.setStatus('current')
ospf3NewCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transit", 1), ("stub", 2), ("nssa", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgAreaType.setStatus('current')
ospf3NewCfgAreaNoSumm = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgAreaNoSumm.setStatus('current')
ospf3NewCfgAreaDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgAreaDefaultMetric.setStatus('current')
ospf3NewCfgAreaDefaultMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgAreaDefaultMetricType.setStatus('current')
ospf3NewCfgAreaTranslRole = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("candidate", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgAreaTranslRole.setStatus('current')
ospf3NewCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgAreaStatus.setStatus('current')
ospf3NewCfgAreaDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgAreaDelete.setStatus('current')
ospf3CurCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 4), )
if mibBuilder.loadTexts: ospf3CurCfgHostTable.setStatus('current')
ospf3CurCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgHostIndex"))
if mibBuilder.loadTexts: ospf3CurCfgHostEntry.setStatus('current')
ospf3CurCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgHostIndex.setStatus('current')
ospf3CurCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgHostIpAddr.setStatus('current')
ospf3CurCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgHostAreaIndex.setStatus('current')
ospf3CurCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgHostCost.setStatus('current')
ospf3CurCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgHostState.setStatus('current')
ospf3NewCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5), )
if mibBuilder.loadTexts: ospf3NewCfgHostTable.setStatus('current')
ospf3NewCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgHostIndex"))
if mibBuilder.loadTexts: ospf3NewCfgHostEntry.setStatus('current')
ospf3NewCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgHostIndex.setStatus('current')
ospf3NewCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgHostIpAddr.setStatus('current')
ospf3NewCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgHostAreaIndex.setStatus('current')
ospf3NewCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgHostCost.setStatus('current')
ospf3NewCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgHostState.setStatus('current')
ospf3NewCfgHostDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgHostDelete.setStatus('current')
ospf3CurCfgNbrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 6), )
if mibBuilder.loadTexts: ospf3CurCfgNbrTable.setStatus('current')
ospf3CurCfgNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgNbrIndex"))
if mibBuilder.loadTexts: ospf3CurCfgNbrEntry.setStatus('current')
ospf3CurCfgNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgNbrIndex.setStatus('current')
ospf3CurCfgNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgNbrIpAddr.setStatus('current')
ospf3CurCfgNbrIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgNbrIntfIndex.setStatus('current')
ospf3CurCfgNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgNbrPriority.setStatus('current')
ospf3CurCfgNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgNbrState.setStatus('current')
ospf3NewCfgNbrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7), )
if mibBuilder.loadTexts: ospf3NewCfgNbrTable.setStatus('current')
ospf3NewCfgNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgNbrIndex"))
if mibBuilder.loadTexts: ospf3NewCfgNbrEntry.setStatus('current')
ospf3NewCfgNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgNbrIndex.setStatus('current')
ospf3NewCfgNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgNbrIpAddr.setStatus('current')
ospf3NewCfgNbrIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgNbrIntfIndex.setStatus('current')
ospf3NewCfgNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgNbrPriority.setStatus('current')
ospf3NewCfgNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgNbrState.setStatus('current')
ospf3NewCfgNbrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgNbrDelete.setStatus('current')
ospf3CurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8), )
if mibBuilder.loadTexts: ospf3CurCfgIntfTable.setStatus('current')
ospf3CurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgIntfIndex"))
if mibBuilder.loadTexts: ospf3CurCfgIntfEntry.setStatus('current')
ospf3CurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfIndex.setStatus('current')
ospf3CurCfgIntfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfInstId.setStatus('current')
ospf3CurCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfArea.setStatus('current')
ospf3CurCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfCost.setStatus('current')
ospf3CurCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfPrio.setStatus('current')
ospf3CurCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfHello.setStatus('current')
ospf3CurCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfDead.setStatus('current')
ospf3CurCfgIntfPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfPoll.setStatus('current')
ospf3CurCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfTrans.setStatus('current')
ospf3CurCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfRetra.setStatus('current')
ospf3CurCfgIntfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfPassive.setStatus('current')
ospf3CurCfgIntfNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("broadcast", 1), ("non-broadcast", 2), ("point-to-point", 3), ("point-to-multipoint", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfNetworkType.setStatus('current')
ospf3CurCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfStatus.setStatus('current')
ospf3CurCfgIntfAuthSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfAuthSpi.setStatus('current')
ospf3CurCfgIntfAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfAuthEnable.setStatus('current')
ospf3CurCfgIntfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 1))).clone(namedValues=NamedValues(("none", 0), ("md5", 2), ("sha1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfAuthType.setStatus('current')
ospf3CurCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfAuthKey.setStatus('current')
ospf3CurCfgIntfEncrySpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfEncrySpi.setStatus('current')
ospf3CurCfgIntfEncryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfEncryEnable.setStatus('current')
ospf3CurCfgIntfEncryType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("null", 0), ("des", 1), ("tripledes", 2), ("aes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfEncryType.setStatus('current')
ospf3CurCfgIntfEncryKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfEncryKey.setStatus('current')
ospf3CurCfgIntfEncryAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 1))).clone(namedValues=NamedValues(("none", 0), ("md5", 2), ("sha1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfEncryAuthType.setStatus('current')
ospf3CurCfgIntfEncryAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfEncryAuthKey.setStatus('current')
ospf3CurCfgIntfLsaSupress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgIntfLsaSupress.setStatus('current')
ospf3NewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9), )
if mibBuilder.loadTexts: ospf3NewCfgIntfTable.setStatus('current')
ospf3NewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgIntfIndex"))
if mibBuilder.loadTexts: ospf3NewCfgIntfEntry.setStatus('current')
ospf3NewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgIntfIndex.setStatus('current')
ospf3NewCfgIntfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfInstId.setStatus('current')
ospf3NewCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfArea.setStatus('current')
ospf3NewCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfCost.setStatus('current')
ospf3NewCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfPrio.setStatus('current')
ospf3NewCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfHello.setStatus('current')
ospf3NewCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfDead.setStatus('current')
ospf3NewCfgIntfPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfPoll.setStatus('current')
ospf3NewCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfTrans.setStatus('current')
ospf3NewCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfRetra.setStatus('current')
ospf3NewCfgIntfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfPassive.setStatus('current')
ospf3NewCfgIntfNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("broadcast", 1), ("non-broadcast", 2), ("point-to-point", 3), ("point-to-multipoint", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfNetworkType.setStatus('current')
ospf3NewCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfStatus.setStatus('current')
ospf3NewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfDelete.setStatus('current')
ospf3NewCfgIntfAuthSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfAuthSpi.setStatus('current')
ospf3NewCfgIntfAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfAuthEnable.setStatus('current')
ospf3NewCfgIntfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 1))).clone(namedValues=NamedValues(("none", 0), ("md5", 2), ("sha1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfAuthType.setStatus('current')
ospf3NewCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfAuthKey.setStatus('current')
ospf3NewCfgIntfAuthReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfAuthReset.setStatus('current')
ospf3NewCfgIntfEncrySpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfEncrySpi.setStatus('current')
ospf3NewCfgIntfEncryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfEncryEnable.setStatus('current')
ospf3NewCfgIntfEncryType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("null", 0), ("des", 1), ("tripledes", 2), ("aes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfEncryType.setStatus('current')
ospf3NewCfgIntfEncryKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfEncryKey.setStatus('current')
ospf3NewCfgIntfEncryAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 1))).clone(namedValues=NamedValues(("none", 0), ("md5", 2), ("sha1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfEncryAuthType.setStatus('current')
ospf3NewCfgIntfEncryAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfEncryAuthKey.setStatus('current')
ospf3NewCfgIntfEncryReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgIntfEncryReset.setStatus('current')
ospf3NewCfgIntfLsaSupress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgIntfLsaSupress.setStatus('current')
ospf3CurCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10), )
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfTable.setStatus('current')
ospf3CurCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfEntry.setStatus('current')
ospf3CurCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfIndex.setStatus('current')
ospf3CurCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfAreaId.setStatus('current')
ospf3CurCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfNbr.setStatus('current')
ospf3CurCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfHello.setStatus('current')
ospf3CurCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfDead.setStatus('current')
ospf3CurCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfTrans.setStatus('current')
ospf3CurCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfRetra.setStatus('current')
ospf3CurCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgVirtIntfStatus.setStatus('current')
ospf3NewCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11), )
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfTable.setStatus('current')
ospf3NewCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfEntry.setStatus('current')
ospf3NewCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfIndex.setStatus('current')
ospf3NewCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfAreaId.setStatus('current')
ospf3NewCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfNbr.setStatus('current')
ospf3NewCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfHello.setStatus('current')
ospf3NewCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfDead.setStatus('current')
ospf3NewCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfTrans.setStatus('current')
ospf3NewCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfRetra.setStatus('current')
ospf3NewCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfStatus.setStatus('current')
ospf3NewCfgVirtIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgVirtIntfDelete.setStatus('current')
ospf3CurCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12), )
if mibBuilder.loadTexts: ospf3CurCfgRangeTable.setStatus('current')
ospf3CurCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgRangeIndex"))
if mibBuilder.loadTexts: ospf3CurCfgRangeEntry.setStatus('current')
ospf3CurCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangeIndex.setStatus('current')
ospf3CurCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangeAddr.setStatus('current')
ospf3CurCfgRangePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangePrefixLen.setStatus('current')
ospf3CurCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangeAreaIndex.setStatus('current')
ospf3CurCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangeHideState.setStatus('current')
ospf3CurCfgRangeLsaType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8195, 8199))).clone(namedValues=NamedValues(("summary", 8195), ("type7", 8199)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangeLsaType.setStatus('current')
ospf3CurCfgRangeRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangeRouteTag.setStatus('current')
ospf3CurCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRangeState.setStatus('current')
ospf3NewCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13), )
if mibBuilder.loadTexts: ospf3NewCfgRangeTable.setStatus('current')
ospf3NewCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgRangeIndex"))
if mibBuilder.loadTexts: ospf3NewCfgRangeEntry.setStatus('current')
ospf3NewCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgRangeIndex.setStatus('current')
ospf3NewCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangeAddr.setStatus('current')
ospf3NewCfgRangePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangePrefixLen.setStatus('current')
ospf3NewCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangeAreaIndex.setStatus('current')
ospf3NewCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangeHideState.setStatus('current')
ospf3NewCfgRangeLsaType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8195, 8199))).clone(namedValues=NamedValues(("summary", 8195), ("type7", 8199)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangeLsaType.setStatus('current')
ospf3NewCfgRangeRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangeRouteTag.setStatus('current')
ospf3NewCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangeState.setStatus('current')
ospf3NewCfgRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRangeDelete.setStatus('current')
ospf3CurCfgExtRangeTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14), )
if mibBuilder.loadTexts: ospf3CurCfgExtRangeTable.setStatus('current')
ospf3CurCfgExtRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgExtRangeIndex"))
if mibBuilder.loadTexts: ospf3CurCfgExtRangeEntry.setStatus('current')
ospf3CurCfgExtRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExtRangeIndex.setStatus('current')
ospf3CurCfgExtRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExtRangeAddr.setStatus('current')
ospf3CurCfgExtRangePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExtRangePrefixLen.setStatus('current')
ospf3CurCfgExtRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExtRangeAreaIndex.setStatus('current')
ospf3CurCfgExtRangeTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExtRangeTranslation.setStatus('current')
ospf3CurCfgExtRangeAggrEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("advertise", 1), ("not-advertise", 2), ("allowAll", 3), ("denyAll", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExtRangeAggrEffect.setStatus('current')
ospf3CurCfgExtRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgExtRangeState.setStatus('current')
ospf3NewCfgExtRangeTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15), )
if mibBuilder.loadTexts: ospf3NewCfgExtRangeTable.setStatus('current')
ospf3NewCfgExtRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgExtRangeIndex"))
if mibBuilder.loadTexts: ospf3NewCfgExtRangeEntry.setStatus('current')
ospf3NewCfgExtRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgExtRangeIndex.setStatus('current')
ospf3NewCfgExtRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgExtRangeAddr.setStatus('current')
ospf3NewCfgExtRangePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgExtRangePrefixLen.setStatus('current')
ospf3NewCfgExtRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgExtRangeAreaIndex.setStatus('current')
ospf3NewCfgExtRangeTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgExtRangeTranslation.setStatus('current')
ospf3NewCfgExtRangeAggrEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("advertise", 1), ("not-advertise", 2), ("allowAll", 3), ("denyAll", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgExtRangeAggrEffect.setStatus('current')
ospf3NewCfgExtRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgExtRangeState.setStatus('current')
ospf3NewCfgExtRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgExtRangeDelete.setStatus('current')
ospf3CurCfgRedistTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16), )
if mibBuilder.loadTexts: ospf3CurCfgRedistTable.setStatus('current')
ospf3CurCfgRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3CurCfgRedistIndex"))
if mibBuilder.loadTexts: ospf3CurCfgRedistEntry.setStatus('current')
ospf3CurCfgRedistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistIndex.setStatus('current')
ospf3CurCfgRedistAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistAddr.setStatus('current')
ospf3CurCfgRedistPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistPrefixLen.setStatus('current')
ospf3CurCfgRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistMetric.setStatus('current')
ospf3CurCfgRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("asExttype1", 3), ("asExttype2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistMetricType.setStatus('current')
ospf3CurCfgRedistRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistRouteTag.setStatus('current')
ospf3CurCfgRedistRouteTagTypeManual = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistRouteTagTypeManual.setStatus('current')
ospf3CurCfgRedistState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgRedistState.setStatus('current')
ospf3NewCfgRedistTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17), )
if mibBuilder.loadTexts: ospf3NewCfgRedistTable.setStatus('current')
ospf3NewCfgRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3NewCfgRedistIndex"))
if mibBuilder.loadTexts: ospf3NewCfgRedistEntry.setStatus('current')
ospf3NewCfgRedistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewCfgRedistIndex.setStatus('current')
ospf3NewCfgRedistAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRedistAddr.setStatus('current')
ospf3NewCfgRedistPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRedistPrefixLen.setStatus('current')
ospf3NewCfgRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRedistMetric.setStatus('current')
ospf3NewCfgRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("asExttype1", 3), ("asExttype2", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRedistMetricType.setStatus('current')
ospf3NewCfgRedistRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRedistRouteTag.setStatus('current')
ospf3NewCfgRedistRouteTagTypeManual = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgRedistRouteTagTypeManual.setStatus('current')
ospf3NewCfgRedistState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRedistState.setStatus('current')
ospf3NewCfgRedistDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospf3NewCfgRedistDelete.setStatus('current')
ospf3RouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18))
ospf3RedistributeConnected = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1))
ospf3CurCfgConnectedMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgConnectedMetric.setStatus('current')
ospf3NewCfgConnectedMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgConnectedMetric.setStatus('current')
ospf3CurCfgConnectedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgConnectedMetricType.setStatus('current')
ospf3NewCfgConnectedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgConnectedMetricType.setStatus('current')
ospf3CurCfgConnectedRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgConnectedRouteTag.setStatus('current')
ospf3NewCfgConnectedRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgConnectedRouteTag.setStatus('current')
ospf3CurCfgConnectedRouteTagTypeManual = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgConnectedRouteTagTypeManual.setStatus('current')
ospf3NewCfgConnectedRouteTagTypeManual = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgConnectedRouteTagTypeManual.setStatus('current')
ospf3RedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2))
ospf3CurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgStaticMetric.setStatus('current')
ospf3NewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgStaticMetric.setStatus('current')
ospf3CurCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgStaticMetricType.setStatus('current')
ospf3NewCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgStaticMetricType.setStatus('current')
ospf3CurCfgStaticRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgStaticRouteTag.setStatus('current')
ospf3NewCfgStaticRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgStaticRouteTag.setStatus('current')
ospf3CurCfgStaticRouteTagTypeManual = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CurCfgStaticRouteTagTypeManual.setStatus('current')
ospf3NewCfgStaticRouteTagTypeManual = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 26, 18, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3NewCfgStaticRouteTagTypeManual.setStatus('current')
ipv6PmtuCurTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6PmtuCurTimeout.setStatus('current')
ipv6PmtuNewTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 28, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6PmtuNewTimeout.setStatus('current')
ipv6PmtuEntriesClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 28, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6PmtuEntriesClearAll.setStatus('current')
ipCurCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 14, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRouterID.setStatus('current')
ipNewCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgRouterID.setStatus('current')
ipFloodCurCfgFlood = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFloodCurCfgFlood.setStatus('current')
ipFloodNewCfgFlood = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFloodNewCfgFlood.setStatus('current')
igmpCurCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgOnOff.setStatus('current')
igmpNewCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgOnOff.setStatus('current')
igmpSnoopCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9))
igmpSnoopCurCfgMrto = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgMrto.setStatus('current')
igmpSnoopNewCfgMrto = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgMrto.setStatus('current')
igmpSnoopCurCfgAggrEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgAggrEnaDis.setStatus('current')
igmpSnoopNewCfgAggrEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgAggrEnaDis.setStatus('current')
igmpSnoopCurCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgEnaDis.setStatus('current')
igmpSnoopNewCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgEnaDis.setStatus('current')
igmpSnoopNewCfgVlanAdd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanAdd.setStatus('current')
igmpSnoopNewCfgVlanRem = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanRem.setStatus('current')
igmpSnoopNewCfgVlanClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanClear.setStatus('current')
igmpSnoopCurCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanBmap.setStatus('current')
igmpSnoopNewCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanBmap.setStatus('current')
igmpSnoopNewCfgVlanFastlvAdd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvAdd.setStatus('current')
igmpSnoopNewCfgVlanFastlvRem = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvRem.setStatus('current')
igmpSnoopCurCfgVlanFastlvBmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanFastlvBmap.setStatus('current')
igmpSnoopNewCfgVlanFastlvBmap = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvBmap.setStatus('current')
igmpSnoopCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgTimeout.setStatus('current')
igmpSnoopNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgTimeout.setStatus('current')
igmpSnoopCurCfgQInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgQInterval.setStatus('current')
igmpSnoopNewCfgQInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgQInterval.setStatus('current')
igmpSnoopCurCfgSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgSrcIp.setStatus('current')
igmpSnoopNewCfgSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgSrcIp.setStatus('current')
igmpSnoopCurCfgFlood = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgFlood.setStatus('current')
igmpSnoopNewCfgFlood = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgFlood.setStatus('current')
igmpSnoopSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("setDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopSetToDefault.setStatus('current')
igmpSnoopCurCfgRtrAlert = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgRtrAlert.setStatus('current')
igmpSnoopNewCfgRtrAlert = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgRtrAlert.setStatus('current')
igmpSnoopCurCfgRobustness = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgRobustness.setStatus('current')
igmpSnoopNewCfgRobustness = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 9, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgRobustness.setStatus('current')
igmpStaticMrtrCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10))
igmpFilterCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11))
igmpV3SnoopCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14))
igmpV3SnoopCurCfgSources = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpV3SnoopCurCfgSources.setStatus('current')
igmpV3SnoopNewCfgSources = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpV3SnoopNewCfgSources.setStatus('current')
igmpV3SnoopCurCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpV3SnoopCurCfgEnaDis.setStatus('current')
igmpV3SnoopNewCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpV3SnoopNewCfgEnaDis.setStatus('current')
igmpV3SnoopCurCfgExcludeEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpV3SnoopCurCfgExcludeEnaDis.setStatus('current')
igmpV3SnoopNewCfgExcludeEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpV3SnoopNewCfgExcludeEnaDis.setStatus('current')
igmpV3SnoopCurCfgV1V2EnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpV3SnoopCurCfgV1V2EnaDis.setStatus('current')
igmpV3SnoopNewCfgV1V2EnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpV3SnoopNewCfgV1V2EnaDis.setStatus('current')
igmpStaticMrtrCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 1), )
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTable.setStatus('current')
igmpStaticMrtrCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpStaticMrtrCurCfgIndx"))
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTableEntry.setStatus('current')
igmpStaticMrtrCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgIndx.setStatus('current')
igmpStaticMrtrCurCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 1, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgPortId.setStatus('current')
igmpStaticMrtrCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVlanId.setStatus('current')
igmpStaticMrtrCurCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVersion.setStatus('current')
igmpStaticMrtrNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 2), )
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTable.setStatus('current')
igmpStaticMrtrNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpStaticMrtrNewCfgIndx"))
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTableEntry.setStatus('current')
igmpStaticMrtrNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgIndx.setStatus('current')
igmpStaticMrtrNewCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 2, 1, 2), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgPortId.setStatus('current')
igmpStaticMrtrNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVlanId.setStatus('current')
igmpStaticMrtrNewCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVersion.setStatus('current')
igmpStaticMrtrNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgDelete.setStatus('current')
igmpStaticMrtrNewCfgClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgClear.setStatus('current')
igmpFltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 1), )
if mibBuilder.loadTexts: igmpFltCurCfgTable.setStatus('current')
igmpFltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpFltCurCfgIndx"))
if mibBuilder.loadTexts: igmpFltCurCfgTableEntry.setStatus('current')
igmpFltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgIndx.setStatus('current')
igmpFltCurCfgMcastIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp1.setStatus('current')
igmpFltCurCfgMcastIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp2.setStatus('current')
igmpFltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgAction.setStatus('current')
igmpFltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgState.setStatus('current')
igmpFltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2), )
if mibBuilder.loadTexts: igmpFltNewCfgTable.setStatus('current')
igmpFltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpFltNewCfgIndx"))
if mibBuilder.loadTexts: igmpFltNewCfgTableEntry.setStatus('current')
igmpFltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgIndx.setStatus('current')
igmpFltNewCfgMcastIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp1.setStatus('current')
igmpFltNewCfgMcastIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp2.setStatus('current')
igmpFltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgAction.setStatus('current')
igmpFltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgState.setStatus('current')
igmpFltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgDelete.setStatus('current')
igmpFltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 3), )
if mibBuilder.loadTexts: igmpFltCurCfgPortTable.setStatus('current')
igmpFltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpFltCurCfgPortIndx"))
if mibBuilder.loadTexts: igmpFltCurCfgPortTableEntry.setStatus('current')
igmpFltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortIndx.setStatus('current')
igmpFltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortState.setStatus('current')
igmpFltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortFiltBmap.setStatus('current')
igmpFltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 4), )
if mibBuilder.loadTexts: igmpFltNewCfgPortTable.setStatus('current')
igmpFltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpFltNewCfgPortIndx"))
if mibBuilder.loadTexts: igmpFltNewCfgPortTableEntry.setStatus('current')
igmpFltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgPortIndx.setStatus('current')
igmpFltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgPortState.setStatus('current')
igmpFltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgPortFiltBmap.setStatus('current')
igmpFltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgPortAddFiltRule.setStatus('current')
igmpFltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgPortRemFiltRule.setStatus('current')
igmpFltCurCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgEnaDis.setStatus('current')
igmpFltNewCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgEnaDis.setStatus('current')
igmpCurQurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15), )
if mibBuilder.loadTexts: igmpCurQurCfgTable.setStatus('current')
igmpCurQurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpCurQurCfgVlanIndex"))
if mibBuilder.loadTexts: igmpCurQurCfgEntry.setStatus('current')
igmpCurQurCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurQurCfgVlanIndex.setStatus('current')
igmpCurQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2), ("checkingMembership", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurQuerierState.setStatus('current')
igmpCurCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQuerier.setStatus('current')
igmpCurCfgQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQueryInterval.setStatus('current')
igmpCurCfgQurSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQurSrcIp.setStatus('current')
igmpCurCfgElectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("macaddr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgElectionType.setStatus('current')
igmpCurCfgQurRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQurRobustness.setStatus('current')
igmpCurCfgQurStartupCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQurStartupCnt.setStatus('current')
igmpCurCfgQurStartupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQurStartupInt.setStatus('current')
igmpCurCfgQurMaxRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQurMaxRespTime.setStatus('current')
igmpCurCfgOtherQurAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgOtherQurAddress.setStatus('current')
igmpCurCfgOtherQurPresentInt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgOtherQurPresentInt.setStatus('current')
igmpCurCfgVlanOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpV1", 1), ("igmpV2", 2), ("igmpV3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgVlanOperVersion.setStatus('current')
igmpCurVlanOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpV1", 1), ("igmpV2", 2), ("igmpV3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurVlanOperVersion.setStatus('current')
igmpCurVlanOlderVerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 15, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurVlanOlderVerTimer.setStatus('current')
igmpNewQurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16), )
if mibBuilder.loadTexts: igmpNewQurCfgTable.setStatus('current')
igmpNewQurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpNewQurCfgVlanIndex"))
if mibBuilder.loadTexts: igmpNewQurCfgEntry.setStatus('current')
igmpNewQurCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNewQurCfgVlanIndex.setStatus('current')
igmpNewQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2), ("checkingMembership", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNewQuerierState.setStatus('current')
igmpNewCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQuerier.setStatus('current')
igmpNewCfgQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQueryInterval.setStatus('current')
igmpNewCfgQurSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQurSrcIp.setStatus('current')
igmpNewCfgElectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("macaddr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgElectionType.setStatus('current')
igmpNewCfgQurRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQurRobustness.setStatus('current')
igmpNewCfgQurStartupCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQurStartupCnt.setStatus('current')
igmpNewCfgQurStartupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQurStartupInt.setStatus('current')
igmpNewCfgQurMaxRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQurMaxRespTime.setStatus('current')
igmpNewCfgOtherQurAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNewCfgOtherQurAddress.setStatus('current')
igmpNewCfgOtherQurPresentInt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNewCfgOtherQurPresentInt.setStatus('current')
igmpNewCfgVlanOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpV1", 1), ("igmpV2", 2), ("igmpV3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgVlanOperVersion.setStatus('current')
igmpNewVlanOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpV1", 1), ("igmpV2", 2), ("igmpV3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNewVlanOperVersion.setStatus('current')
igmpNewVlanOlderVerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNewVlanOlderVerTimer.setStatus('current')
igmpNewCfgQuerierDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQuerierDefault.setStatus('current')
igmpCurCfgQuerierOnOff = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgQuerierOnOff.setStatus('current')
igmpNewCfgQuerierOnOff = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 19, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgQuerierOnOff.setStatus('current')
ipmcStaticRouteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20))
ipmcStaticRouteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcStaticRouteTableMaxSize.setStatus('current')
ipmcCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2), )
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteTable.setStatus('current')
ipmcCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipmcCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteEntry.setStatus('current')
ipmcCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteIndx.setStatus('current')
ipmcCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteDestIp.setStatus('current')
ipmcCurCfgStaticRouteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteVlanId.setStatus('current')
ipmcCurCfgStaticRouteHostBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteHostBmap.setStatus('current')
ipmcCurCfgStaticRouteAdminkeys = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteAdminkeys.setStatus('current')
ipmcCurCfgStaticRouteTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcCurCfgStaticRouteTrunks.setStatus('current')
ipmcNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3), )
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteTable.setStatus('current')
ipmcNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipmcNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteEntry.setStatus('current')
ipmcNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteIndx.setStatus('current')
ipmcNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteDestIp.setStatus('current')
ipmcNewCfgStaticRouteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteVlanId.setStatus('current')
ipmcNewCfgStaticRouteHostBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteHostBmap.setStatus('current')
ipmcNewCfgStaticRouteAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteAddPort.setStatus('current')
ipmcNewCfgStaticRouteRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteRemPort.setStatus('current')
ipmcNewCfgStaticRouteTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteTrunks.setStatus('current')
ipmcNewCfgStaticRouteAddTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteAddTrunk.setStatus('current')
ipmcNewCfgStaticRouteRemTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteRemTrunk.setStatus('current')
ipmcNewCfgStaticRouteAdminkeys = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteAdminkeys.setStatus('current')
ipmcNewCfgStaticRouteAddAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteAddAdminkey.setStatus('current')
ipmcNewCfgStaticRouteRemAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteRemAdminkey.setStatus('current')
ipmcNewCfgStaticRouteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 0))).clone(namedValues=NamedValues(("delete", 2), ("deletehost", 3), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmcNewCfgStaticRouteDelete.setStatus('current')
ipmcStaticRouteClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmcStaticRouteClearAll.setStatus('current')
ipStaticArpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticArpTableMaxSize.setStatus('current')
ipCurCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticArpTable.setStatus('current')
ipCurCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticArpEntry.setStatus('current')
ipCurCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIndx.setStatus('current')
ipCurCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIp.setStatus('current')
ipCurCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpMAC.setStatus('current')
ipCurCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpVlan.setStatus('current')
ipCurCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 2, 1, 5), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpPort.setStatus('current')
ipNewCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticArpTable.setStatus('current')
ipNewCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticArpEntry.setStatus('current')
ipNewCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticArpIndx.setStatus('current')
ipNewCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpIp.setStatus('current')
ipNewCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpMAC.setStatus('current')
ipNewCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpVlan.setStatus('current')
ipNewCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3, 1, 5), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpPort.setStatus('current')
ipNewCfgStaticArpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpAction.setStatus('current')
ipStaticArpClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticArpClearAll.setStatus('current')
ipStaticNbrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticNbrTableMaxSize.setStatus('current')
ipCurCfgStaticNbrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticNbrTable.setStatus('current')
ipCurCfgStaticNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgStaticNbrIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticNbrEntry.setStatus('current')
ipCurCfgStaticNbrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticNbrIndx.setStatus('current')
ipCurCfgStaticNbrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticNbrIp.setStatus('current')
ipCurCfgStaticNbrMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticNbrMAC.setStatus('current')
ipCurCfgStaticNbrVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticNbrVlan.setStatus('current')
ipCurCfgStaticNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 2, 1, 5), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticNbrPort.setStatus('current')
ipNewCfgStaticNbrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticNbrTable.setStatus('current')
ipNewCfgStaticNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgStaticNbrIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticNbrEntry.setStatus('current')
ipNewCfgStaticNbrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticNbrIndx.setStatus('current')
ipNewCfgStaticNbrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticNbrIp.setStatus('current')
ipNewCfgStaticNbrMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticNbrMAC.setStatus('current')
ipNewCfgStaticNbrVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticNbrVlan.setStatus('current')
ipNewCfgStaticNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3, 1, 5), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticNbrPort.setStatus('current')
ipNewCfgStaticNbrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticNbrAction.setStatus('current')
ipStaticNbrClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticNbrClearAll.setStatus('current')
ipStaticRoute6TableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRoute6TableMaxSize.setStatus('current')
ipCurCfgStaticRoute6Table = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticRoute6Table.setStatus('current')
ipCurCfgStaticRoute6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgStaticRoute6Indx"))
if mibBuilder.loadTexts: ipCurCfgStaticRoute6Entry.setStatus('current')
ipCurCfgStaticRoute6Indx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRoute6Indx.setStatus('current')
ipCurCfgStaticRoute6DestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRoute6DestIp.setStatus('current')
ipCurCfgStaticRoute6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRoute6Mask.setStatus('current')
ipCurCfgStaticRoute6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRoute6Gateway.setStatus('current')
ipCurCfgStaticRoute6Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRoute6Interface.setStatus('current')
ipNewCfgStaticRoute6Table = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticRoute6Table.setStatus('current')
ipStaticRoute6ClearAllByDestIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRoute6ClearAllByDestIp.setStatus('current')
ipStaticRoute6ClearAllByGatewayIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRoute6ClearAllByGatewayIp.setStatus('current')
ipStaticRoute6ClearAllByInterface = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRoute6ClearAllByInterface.setStatus('current')
ipStaticRoute6ClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRoute6ClearAll.setStatus('current')
ipNewCfgStaticRoute6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgStaticRoute6Indx"))
if mibBuilder.loadTexts: ipNewCfgStaticRoute6Entry.setStatus('current')
ipNewCfgStaticRoute6Indx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRoute6Indx.setStatus('current')
ipNewCfgStaticRoute6DestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRoute6DestIp.setStatus('current')
ipNewCfgStaticRoute6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRoute6Mask.setStatus('current')
ipNewCfgStaticRoute6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRoute6Gateway.setStatus('current')
ipNewCfgStaticRoute6Action = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRoute6Action.setStatus('current')
ipNewCfgStaticRoute6Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 23, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRoute6Interface.setStatus('current')
ipGatewayIpv6TableMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayIpv6TableMax.setStatus('current')
ipCurCfgGwIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 2), )
if mibBuilder.loadTexts: ipCurCfgGwIpv6Table.setStatus('current')
ipCurCfgGwIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwIpv6Index"))
if mibBuilder.loadTexts: ipCurCfgGwIpv6Entry.setStatus('current')
ipCurCfgGwIpv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIpv6Index.setStatus('current')
ipCurCfgGwIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIpv6Addr.setStatus('current')
ipCurCfgGwIpv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIpv6State.setStatus('current')
ipNewCfgGwIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 3), )
if mibBuilder.loadTexts: ipNewCfgGwIpv6Table.setStatus('current')
ipNewCfgGwIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipNewCfgGwIpv6Index"))
if mibBuilder.loadTexts: ipNewCfgGwIpv6Entry.setStatus('current')
ipNewCfgGwIpv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIpv6Index.setStatus('current')
ipNewCfgGwIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwIpv6Addr.setStatus('current')
ipNewCfgGwIpv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwIpv6State.setStatus('current')
ipNewCfgGwIpv6Delete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwIpv6Delete.setStatus('current')
pptTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptTableMaxSize.setStatus('current')
pptCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 2), )
if mibBuilder.loadTexts: pptCurCfgTable.setStatus('current')
pptCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "pptCurCfgIndx"))
if mibBuilder.loadTexts: pptCurCfgEntry.setStatus('current')
pptCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptCurCfgIndx.setStatus('current')
pptCurCfgPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptCurCfgPrefix.setStatus('current')
pptCurCfgPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptCurCfgPrefixLen.setStatus('current')
pptCurCfgPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptCurCfgPrecedence.setStatus('current')
pptCurCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptCurCfgLabel.setStatus('current')
pptNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3), )
if mibBuilder.loadTexts: pptNewCfgTable.setStatus('current')
pptNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "pptNewCfgIndx"))
if mibBuilder.loadTexts: pptNewCfgEntry.setStatus('current')
pptNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptNewCfgIndx.setStatus('current')
pptNewCfgPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptNewCfgPrefix.setStatus('current')
pptNewCfgPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptNewCfgPrefixLen.setStatus('current')
pptNewCfgPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptNewCfgPrecedence.setStatus('current')
pptNewCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptNewCfgLabel.setStatus('current')
pptNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 27, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptNewCfgAction.setStatus('current')
mldCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurCfgState.setStatus('current')
mldNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewCfgState.setStatus('current')
mldCurInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3), )
if mibBuilder.loadTexts: mldCurInterfaceTable.setStatus('current')
mldCurInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mldCurInterfaceIfIndex"))
if mibBuilder.loadTexts: mldCurInterfaceEntry.setStatus('current')
mldCurInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceIfIndex.setStatus('current')
mldCurInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 2), Integer32().clone(125)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceQueryInterval.setStatus('current')
mldCurInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mldv1", 1), ("mldv2", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceVersion.setStatus('current')
mldCurInterfaceQueryMaxResponseIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 4), Integer32().clone(1000)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceQueryMaxResponseIntvl.setStatus('current')
mldCurInterfaceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 5), Integer32().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceRobustness.setStatus('current')
mldCurInterfaceLastListenQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 6), Integer32().clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceLastListenQueryIntvl.setStatus('current')
mldCurInterfaceDMrtrEna = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceDMrtrEna.setStatus('current')
mldCurInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldCurInterfaceState.setStatus('current')
mldNewInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4), )
if mibBuilder.loadTexts: mldNewInterfaceTable.setStatus('current')
mldNewInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mldNewInterfaceIfIndex"))
if mibBuilder.loadTexts: mldNewInterfaceEntry.setStatus('current')
mldNewInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldNewInterfaceIfIndex.setStatus('current')
mldNewInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535)).clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceQueryInterval.setStatus('current')
mldNewInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mldv1", 1), ("mldv2", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceVersion.setStatus('current')
mldNewInterfaceQueryMaxResponseIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(1000)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceQueryMaxResponseIntvl.setStatus('current')
mldNewInterfaceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceRobustness.setStatus('current')
mldNewInterfaceLastListenQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceLastListenQueryIntvl.setStatus('current')
mldNewInterfaceDMrtrEna = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceDMrtrEna.setStatus('current')
mldNewInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceState.setStatus('current')
mldNewInterfaceDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldNewInterfaceDefault.setStatus('current')
mldDefaultCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldDefaultCfgState.setStatus('current')
ndprefixTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixTableMaxSize.setStatus('current')
ndprefixCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2), )
if mibBuilder.loadTexts: ndprefixCurCfgTable.setStatus('current')
ndprefixCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ndprefixCurCfgIndx"))
if mibBuilder.loadTexts: ndprefixCurCfgEntry.setStatus('current')
ndprefixCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgIndx.setStatus('current')
ndprefixCurCfgPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgPrefix.setStatus('current')
ndprefixCurCfgPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgPrefixLen.setStatus('current')
ndprefixCurCfgInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgInterfaceIndex.setStatus('current')
ndprefixCurCfgProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgProfileIndex.setStatus('current')
ndprefixCurCfgValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgValidLifetime.setStatus('current')
ndprefixCurCfgValidLifetimeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgValidLifetimeFlag.setStatus('current')
ndprefixCurCfgPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgPreferredLifetime.setStatus('current')
ndprefixCurCfgPreferredLifetimeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgPreferredLifetimeFlag.setStatus('current')
ndprefixCurCfgOnlinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgOnlinkFlag.setStatus('current')
ndprefixCurCfgAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgAutonomousFlag.setStatus('current')
ndprefixCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixCurCfgState.setStatus('current')
ndprefixNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3), )
if mibBuilder.loadTexts: ndprefixNewCfgTable.setStatus('current')
ndprefixNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ndprefixNewCfgIndx"))
if mibBuilder.loadTexts: ndprefixNewCfgEntry.setStatus('current')
ndprefixNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndprefixNewCfgIndx.setStatus('current')
ndprefixNewCfgPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgPrefix.setStatus('current')
ndprefixNewCfgPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgPrefixLen.setStatus('current')
ndprefixNewCfgInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgInterfaceIndex.setStatus('current')
ndprefixNewCfgProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgProfileIndex.setStatus('current')
ndprefixNewCfgValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgValidLifetime.setStatus('current')
ndprefixNewCfgValidLifetimeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgValidLifetimeFlag.setStatus('current')
ndprefixNewCfgPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgPreferredLifetime.setStatus('current')
ndprefixNewCfgPreferredLifetimeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgPreferredLifetimeFlag.setStatus('current')
ndprefixNewCfgOnlinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgOnlinkFlag.setStatus('current')
ndprefixNewCfgAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgAutonomousFlag.setStatus('current')
ndprefixNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgState.setStatus('current')
ndprefixNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 31, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 2), ("deleteall", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndprefixNewCfgAction.setStatus('current')
ripStatInPackets = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPackets.setStatus('current')
ripStatOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPackets.setStatus('current')
ripStatInRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInRequestPkts.setStatus('current')
ripStatInResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInResponsePkts.setStatus('current')
ripStatOutRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutRequestPkts.setStatus('current')
ripStatOutResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutResponsePkts.setStatus('current')
ripStatRouteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatRouteTimeout.setStatus('current')
ripStatInBadSizePkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSizePkts.setStatus('current')
ripStatInBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadVersion.setStatus('current')
ripStatInBadZeros = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadZeros.setStatus('current')
ripStatInBadSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourcePort.setStatus('current')
ripStatInBadSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourceIP.setStatus('current')
ripStatInSelfRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 13, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInSelfRcvPkts.setStatus('current')
ipStatsInReceives = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInReceives.setStatus('current')
ipStatsInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInHdrErrors.setStatus('current')
ipStatsInAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInAddrErrors.setStatus('current')
ipStatsInUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInUnknownProtos.setStatus('current')
ipStatsInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInDiscards.setStatus('current')
ipStatsInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInDelivers.setStatus('current')
ipStatsOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsOutRequests.setStatus('current')
ipStatsOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsOutDiscards.setStatus('current')
ipStatsDefaultTTL = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 16, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsDefaultTTL.setStatus('current')
nsnmpInPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInPkts.setStatus('current')
nsnmpInBadCommunityNames = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInBadCommunityNames.setStatus('current')
nsnmpInASNParseErrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInASNParseErrs.setStatus('current')
nsnmpOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutPkts.setStatus('current')
nsnmpInTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInTooBigs.setStatus('current')
nsnmpInBadValues = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInBadValues.setStatus('current')
nsnmpInGenErrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInGenErrs.setStatus('current')
nsnmpInTotalSetVars = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInTotalSetVars.setStatus('current')
nsnmpInGetNexts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInGetNexts.setStatus('current')
nsnmpInGetResponses = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInGetResponses.setStatus('current')
nsnmpOutTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutTooBigs.setStatus('current')
nsnmpOutBadValues = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutBadValues.setStatus('current')
nsnmpOutGenErrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutGenErrs.setStatus('current')
nsnmpOutGetNexts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutGetNexts.setStatus('current')
nsnmpOutGetResponses = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutGetResponses.setStatus('current')
nsnmpSilentDrops = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpSilentDrops.setStatus('current')
nsnmpInBadVersions = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInBadVersions.setStatus('current')
nsnmpInBadCommunityUses = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInBadCommunityUses.setStatus('current')
nsnmpEnableAuthTraps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpEnableAuthTraps.setStatus('current')
nsnmpInBadTypes = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInBadTypes.setStatus('current')
nsnmpInNoSuchNames = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInNoSuchNames.setStatus('current')
nsnmpInReadOnlys = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInReadOnlys.setStatus('current')
nsnmpInTotalReqVars = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInTotalReqVars.setStatus('current')
nsnmpInGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInGetRequests.setStatus('current')
nsnmpInSetRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInSetRequests.setStatus('current')
nsnmpInTraps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpInTraps.setStatus('current')
nsnmpOutNoSuchNames = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutNoSuchNames.setStatus('current')
nsnmpOutReadOnlys = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutReadOnlys.setStatus('current')
nsnmpOutGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutGetRequests.setStatus('current')
nsnmpOutSetRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutSetRequests.setStatus('current')
nsnmpOutTraps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpOutTraps.setStatus('current')
nsnmpProxyDrops = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 2, 20, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsnmpProxyDrops.setStatus('current')
icmpStatsInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInMsgs.setStatus('current')
icmpStatsInErrors = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInErrors.setStatus('current')
icmpStatsInDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInDestUnreachs.setStatus('current')
icmpStatsInTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInTimeExcds.setStatus('current')
icmpStatsInParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInParmProbs.setStatus('current')
icmpStatsInSrcQuenchs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInSrcQuenchs.setStatus('current')
icmpStatsInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInRedirects.setStatus('current')
icmpStatsInEchos = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInEchos.setStatus('current')
icmpStatsInEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInEchoReps.setStatus('current')
icmpStatsInTimestamps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInTimestamps.setStatus('current')
icmpStatsInTimestampReps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInTimestampReps.setStatus('current')
icmpStatsInAddrMasks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInAddrMasks.setStatus('current')
icmpStatsInAddrMaskReps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInAddrMaskReps.setStatus('current')
icmpStatsOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutMsgs.setStatus('current')
icmpStatsOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutErrors.setStatus('current')
icmpStatsOutDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutDestUnreachs.setStatus('current')
icmpStatsOutTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutTimeExcds.setStatus('current')
icmpStatsOutParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutParmProbs.setStatus('current')
icmpStatsOutSrcQuenchs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutSrcQuenchs.setStatus('current')
icmpStatsOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutRedirects.setStatus('current')
icmpStatsOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutEchos.setStatus('current')
icmpStatsOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutEchoReps.setStatus('current')
icmpStatsOutTimestamps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutTimestamps.setStatus('current')
icmpStatsOutTimestampReps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutTimestampReps.setStatus('current')
icmpStatsOutAddrMasks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutAddrMasks.setStatus('current')
icmpStatsOutAddrMaskReps = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 17, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutAddrMaskReps.setStatus('current')
tcpStatsRtoAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRtoAlgorithm.setStatus('current')
tcpStatsRtoMin = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRtoMin.setStatus('current')
tcpStatsRtoMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRtoMax.setStatus('current')
tcpStatsMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsMaxConn.setStatus('current')
tcpStatsActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsActiveOpens.setStatus('current')
tcpStatsPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsPassiveOpens.setStatus('current')
tcpStatsAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsAttemptFails.setStatus('current')
tcpStatsEstabResets = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsEstabResets.setStatus('current')
tcpStatsInSegs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsInSegs.setStatus('current')
tcpStatsOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsOutSegs.setStatus('current')
tcpStatsRetransSegs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRetransSegs.setStatus('current')
tcpStatsInErrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsInErrs.setStatus('current')
tcpStatsCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsCurrEstab.setStatus('current')
tcpStatsCurrConn = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsCurrConn.setStatus('current')
tcpStatsOutRsts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 18, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsOutRsts.setStatus('current')
udpStatsInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 19, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsInDatagrams.setStatus('current')
udpStatsOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 19, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsOutDatagrams.setStatus('current')
udpStatsInErrors = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 19, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsInErrors.setStatus('current')
udpStatsNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsNoPorts.setStatus('current')
bootpRelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1), )
if mibBuilder.loadTexts: bootpRelayStatsTable.setStatus('current')
bootpRelayStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bootpRelayStatsIndex"))
if mibBuilder.loadTexts: bootpRelayStatsTableEntry.setStatus('current')
bootpRelayStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsIndex.setStatus('current')
bootpRelayStatsRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRequestsReceived.setStatus('current')
bootpRelayStatsRequestsRelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRequestsRelayed.setStatus('current')
bootpRelayStatsRequestsDroppedNoRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRequestsDroppedNoRelay.setStatus('current')
bootpRelayStatsRequestsDroppedNoServer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRequestsDroppedNoServer.setStatus('current')
bootpRelayStatsRequestsDroppedError = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRequestsDroppedError.setStatus('current')
bootpRelayStatsRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRepliesReceived.setStatus('current')
bootpRelayStatsRepliesRelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRepliesRelayed.setStatus('current')
bootpRelayStatsRepliesDroppedError = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 20, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpRelayStatsRepliesDroppedError.setStatus('current')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('current')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('current')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('current')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('current')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('current')
routeStatStaticEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatStaticEntries.setStatus('current')
routeStatRipEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatRipEntries.setStatus('current')
routeStatOspfEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatOspfEntries.setStatus('current')
routeStatBgpEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatBgpEntries.setStatus('current')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('current')
routeStatEcmpMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEcmpMaxEntries.setStatus('current')
routeStatEcmpMaxStaticEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEcmpMaxStaticEntries.setStatus('current')
routeStatEcmpMaxDynamicEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEcmpMaxDynamicEntries.setStatus('current')
routeStatEcmpPathsEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEcmpPathsEntries.setStatus('current')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('current')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('current')
dnsStatOutDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatOutDnsRequests.setStatus('current')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('current')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('current')
vrrpStatBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadAdvers.setStatus('current')
vrrpStatBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadVersion.setStatus('current')
vrrpStatBadAddress = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadAddress.setStatus('current')
vrrpStatBadPassword = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadPassword.setStatus('current')
vrrpStatBadVrid = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadVrid.setStatus('current')
vrrpStatBadData = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadData.setStatus('current')
vrrpStatBadInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadInterval.setStatus('current')
vrrpStatOutGratuitousARPs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutGratuitousARPs.setStatus('current')
ipClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipClearStats.setStatus('current')
vrrpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpClearStats.setStatus('current')
ospfClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfClearStats.setStatus('current')
tcpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClearStats.setStatus('current')
udpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpClearStats.setStatus('current')
dnsClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsClearStats.setStatus('current')
arpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpClearStats.setStatus('current')
icmpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpClearStats.setStatus('current')
routeClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeClearStats.setStatus('current')
ipv6ClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ClearStats.setStatus('current')
ipv6ClearIcmpStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ClearIcmpStats.setStatus('current')
ipv6ClearUdpStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ClearUdpStats.setStatus('current')
ospf3ClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospf3ClearStats.setStatus('current')
ripClearStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripClearStats.setStatus('current')
ospfGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1))
ospfCumRxTxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1))
ospfCumNbrChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2))
ospfCumIntfChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3))
ospfTimersKickOffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4))
ospfArea = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2))
ospfAreaRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1), )
if mibBuilder.loadTexts: ospfAreaRxTxStats.setStatus('current')
ospfAreaRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfAreaRxTxIndex"))
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setStatus('current')
ospfAreaRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setStatus('current')
ospfAreaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxPkts.setStatus('current')
ospfAreaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxPkts.setStatus('current')
ospfAreaRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxHello.setStatus('current')
ospfAreaTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxHello.setStatus('current')
ospfAreaRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxDatabase.setStatus('current')
ospfAreaTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxDatabase.setStatus('current')
ospfAreaRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setStatus('current')
ospfAreaTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setStatus('current')
ospfAreaRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setStatus('current')
ospfAreaTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setStatus('current')
ospfAreaRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setStatus('current')
ospfAreaTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setStatus('current')
ospfAreaNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2), )
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setStatus('current')
ospfAreaNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfAreaNbrIndex"))
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setStatus('current')
ospfAreaNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrIndex.setStatus('current')
ospfAreaNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrhello.setStatus('current')
ospfAreaNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrStart.setStatus('current')
ospfAreaNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setStatus('current')
ospfAreaNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setStatus('current')
ospfAreaNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setStatus('current')
ospfAreaNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setStatus('current')
ospfAreaNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setStatus('current')
ospfAreaNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setStatus('current')
ospfAreaNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN1way.setStatus('current')
ospfAreaNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setStatus('current')
ospfAreaNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrDown.setStatus('current')
ospfAreaNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN2way.setStatus('current')
ospfAreaChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3), )
if mibBuilder.loadTexts: ospfAreaChangeStats.setStatus('current')
ospfAreaChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfAreaIntfIndex"))
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setStatus('current')
ospfAreaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfIndex.setStatus('current')
ospfAreaIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfHello.setStatus('current')
ospfAreaIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfDown.setStatus('current')
ospfAreaIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfLoop.setStatus('current')
ospfAreaIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setStatus('current')
ospfAreaIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setStatus('current')
ospfAreaIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfBackup.setStatus('current')
ospfAreaIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setStatus('current')
ospfAreaErrorStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4), )
if mibBuilder.loadTexts: ospfAreaErrorStats.setStatus('current')
ospfAreaErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfAreaErrIndex"))
if mibBuilder.loadTexts: ospfAreaErrorStatsEntry.setStatus('current')
ospfAreaErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrIndex.setStatus('current')
ospfAreaErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrAuthFailure.setStatus('current')
ospfAreaErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrNetmaskMismatch.setStatus('current')
ospfAreaErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrHelloMismatch.setStatus('current')
ospfAreaErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrDeadMismatch.setStatus('current')
ospfAreaErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrOptionsMismatch.setStatus('current')
ospfAreaErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrUnknownNbr.setStatus('current')
ospfAreaErrAreaMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrAreaMismatch.setStatus('current')
ospfAreaErrInvalidSelfOrigLsa = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrInvalidSelfOrigLsa.setStatus('current')
ospfInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3))
ospfIntfRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1), )
if mibBuilder.loadTexts: ospfIntfRxTxStats.setStatus('current')
ospfIntfRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfIntfRxTxIndex"))
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setStatus('current')
ospfIntfRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setStatus('current')
ospfIntfRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxPkts.setStatus('current')
ospfIntfTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxPkts.setStatus('current')
ospfIntfRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxHello.setStatus('current')
ospfIntfTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxHello.setStatus('current')
ospfIntfRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxDatabase.setStatus('current')
ospfIntfTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxDatabase.setStatus('current')
ospfIntfRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setStatus('current')
ospfIntfTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setStatus('current')
ospfIntfRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setStatus('current')
ospfIntfTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setStatus('current')
ospfIntfRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setStatus('current')
ospfIntfTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setStatus('current')
ospfIntfNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2), )
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setStatus('current')
ospfIntfNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfIntfNbrIndex"))
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setStatus('current')
ospfIntfNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrIndex.setStatus('current')
ospfIntfNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrhello.setStatus('current')
ospfIntfNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrStart.setStatus('current')
ospfIntfNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setStatus('current')
ospfIntfNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setStatus('current')
ospfIntfNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setStatus('current')
ospfIntfNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setStatus('current')
ospfIntfNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setStatus('current')
ospfIntfNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setStatus('current')
ospfIntfNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN1way.setStatus('current')
ospfIntfNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setStatus('current')
ospfIntfNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrDown.setStatus('current')
ospfIntfNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN2way.setStatus('current')
ospfIntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3), )
if mibBuilder.loadTexts: ospfIntfChangeStats.setStatus('current')
ospfIntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfIntfIndex"))
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setStatus('current')
ospfIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfIndex.setStatus('current')
ospfIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfHello.setStatus('current')
ospfIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfDown.setStatus('current')
ospfIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfLoop.setStatus('current')
ospfIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfUnloop.setStatus('current')
ospfIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfWaitTimer.setStatus('current')
ospfIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfBackup.setStatus('current')
ospfIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrChange.setStatus('current')
ospfIntfErrorStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4), )
if mibBuilder.loadTexts: ospfIntfErrorStats.setStatus('current')
ospfIntfErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfIntfErrIndex"))
if mibBuilder.loadTexts: ospfIntfErrorStatsEntry.setStatus('current')
ospfIntfErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrIndex.setStatus('current')
ospfIntfErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrAuthFailure.setStatus('current')
ospfIntfErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrNetmaskMismatch.setStatus('current')
ospfIntfErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrHelloMismatch.setStatus('current')
ospfIntfErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrDeadMismatch.setStatus('current')
ospfIntfErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrOptionsMismatch.setStatus('current')
ospfIntfErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrUnknownNbr.setStatus('current')
ospfIntfErrAreaMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrAreaMismatch.setStatus('current')
ospfIntfErrInvalidSelfOrigLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrInvalidSelfOrigLSA.setStatus('current')
ospfCumRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxPkts.setStatus('current')
ospfCumTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxPkts.setStatus('current')
ospfCumRxHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxHello.setStatus('current')
ospfCumTxHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxHello.setStatus('current')
ospfCumRxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxDatabase.setStatus('current')
ospfCumTxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxDatabase.setStatus('current')
ospfCumRxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsReqs.setStatus('current')
ospfCumTxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsReqs.setStatus('current')
ospfCumRxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsAcks.setStatus('current')
ospfCumTxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsAcks.setStatus('current')
ospfCumRxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setStatus('current')
ospfCumTxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setStatus('current')
ospfCumNbrhello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrhello.setStatus('current')
ospfCumNbrStart = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrStart.setStatus('current')
ospfCumNbrAdjointOk = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setStatus('current')
ospfCumNbrNegotiationDone = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setStatus('current')
ospfCumNbrExchangeDone = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setStatus('current')
ospfCumNbrBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setStatus('current')
ospfCumNbrBadSequence = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setStatus('current')
ospfCumNbrLoadingDone = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setStatus('current')
ospfCumNbrN1way = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN1way.setStatus('current')
ospfCumNbrRstAd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrRstAd.setStatus('current')
ospfCumNbrDown = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrDown.setStatus('current')
ospfCumNbrN2way = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN2way.setStatus('current')
ospfCumIntfHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfHello.setStatus('current')
ospfCumIntfDown = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfDown.setStatus('current')
ospfCumIntfLoop = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfLoop.setStatus('current')
ospfCumIntfUnloop = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfUnloop.setStatus('current')
ospfCumIntfWaitTimer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setStatus('current')
ospfCumIntfBackup = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfBackup.setStatus('current')
ospfCumIntfNbrChange = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setStatus('current')
ospfTmrsKckOffHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setStatus('current')
ospfTmrsKckOffRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setStatus('current')
ospfTmrsKckOffLsaLock = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setStatus('current')
ospfTmrsKckOffLsaAck = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setStatus('current')
ospfTmrsKckOffDbage = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setStatus('current')
ospfTmrsKckOffSummary = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setStatus('current')
ospfTmrsKckOffAseExport = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 6, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setStatus('current')
igmpSnoopStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1), )
if mibBuilder.loadTexts: igmpSnoopStats.setStatus('current')
igmpSnoopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpSnoopVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopStatsEntry.setStatus('current')
igmpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setStatus('current')
rxIgmpValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpValidPkts.setStatus('current')
rxIgmpInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpInvalidPkts.setStatus('current')
rxIgmpGenQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpGenQueries.setStatus('current')
rxIgmpGrpSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpGrpSpecificQueries.setStatus('current')
rxIgmpLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpLeaves.setStatus('current')
rxIgmpReports = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpReports.setStatus('current')
txIgmpGrpSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpGrpSpecificQueries.setStatus('current')
txIgmpReports = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpReports.setStatus('current')
txIgmpLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpLeaves.setStatus('current')
rxIgmpGroupSourceSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpGroupSourceSpecificQueries.setStatus('current')
rxIgmpV3CurrentStateRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpV3CurrentStateRecords.setStatus('current')
rxIgmpV3SourceListChangeRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpV3SourceListChangeRecords.setStatus('current')
rxIgmpV3FilterChangeRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpV3FilterChangeRecords.setStatus('current')
txIgmpGenQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpGenQueries.setStatus('current')
rxIgmpDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpDiscardPkts.setStatus('current')
rxIgmpPimHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpPimHellos.setStatus('current')
igmpClearVlanStats = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearVlanStats.setStatus('current')
igmpClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearAllStats.setStatus('current')
igmpStatsTotalIgmpGroups = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStatsTotalIgmpGroups.setStatus('current')
igmpStatsTotalIpmcGroups = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStatsTotalIpmcGroups.setStatus('current')
ipv6InReceives = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InReceives.setStatus('current')
ipv6InMcasts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InMcasts.setStatus('current')
ipv6InDelivers = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InDelivers.setStatus('current')
ipv6InDiscards = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InDiscards.setStatus('current')
ipv6InHdrerrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InHdrerrs.setStatus('current')
ipv6InAddrerrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InAddrerrs.setStatus('current')
ipv6InUnkprots = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUnkprots.setStatus('current')
ipv6InTruncs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InTruncs.setStatus('current')
ipv6OutMcasts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutMcasts.setStatus('current')
ipv6ForwDgrams = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ForwDgrams.setStatus('current')
ipv6TooBigerrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TooBigerrs.setStatus('current')
ipv6OutReqs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutReqs.setStatus('current')
ipv6OutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutDiscards.setStatus('current')
ipv6OutNorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutNorts.setStatus('current')
ipv6Reasmreqs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6Reasmreqs.setStatus('current')
ipv6Reasmoks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6Reasmoks.setStatus('current')
ipv6Reasmfails = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6Reasmfails.setStatus('current')
ipv6Fragoks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6Fragoks.setStatus('current')
ipv6Fragfails = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6Fragfails.setStatus('current')
ipv6Fragcreates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6Fragcreates.setStatus('current')
ipv6InNsols = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InNsols.setStatus('current')
ipv6InNadvs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InNadvs.setStatus('current')
ipv6InRoutsols = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InRoutsols.setStatus('current')
ipv6InRoutadvs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InRoutadvs.setStatus('current')
ipv6InRoutRedirs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InRoutRedirs.setStatus('current')
ipv6OutNsols = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutNsols.setStatus('current')
ipv6OutNadvs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutNadvs.setStatus('current')
ipv6OutRoutadvs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutRoutadvs.setStatus('current')
ipv6OutRedirs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutRedirs.setStatus('current')
ipv6OutRoutSols = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6OutRoutSols.setStatus('current')
ipv6icmpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInMsgs.setStatus('current')
ipv6icmpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInErrs.setStatus('current')
ipv6icmpInBadcode = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInBadcode.setStatus('current')
ipv6icmpInToobig = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInToobig.setStatus('current')
ipv6icmpInDstUnreach = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInDstUnreach.setStatus('current')
ipv6icmpInTmexceeded = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInTmexceeded.setStatus('current')
ipv6icmpInParamprob = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInParamprob.setStatus('current')
ipv6icmpInEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInEchoReq.setStatus('current')
ipv6icmpInEchoResp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInEchoResp.setStatus('current')
ipv6icmpOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutMsgs.setStatus('current')
ipv6icmpOutErrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutErrs.setStatus('current')
ipv6icmpOutDstUnreach = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutDstUnreach.setStatus('current')
ipv6icmpOutToobig = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutToobig.setStatus('current')
ipv6icmpOutTmexceeded = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutTmexceeded.setStatus('current')
ipv6icmpOutParamprob = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutParamprob.setStatus('current')
ipv6icmpOutEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutEchoReq.setStatus('current')
ipv6icmpOutEchoResp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutEchoResp.setStatus('current')
ipv6icmpInRouterSol = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInRouterSol.setStatus('current')
ipv6icmpInRouterAdv = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInRouterAdv.setStatus('current')
ipv6icmpInNeighSol = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInNeighSol.setStatus('current')
ipv6icmpInNeighAdv = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInNeighAdv.setStatus('current')
ipv6icmpInRedir = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInRedir.setStatus('current')
ipv6icmpOutRouterSol = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutRouterSol.setStatus('current')
ipv6icmpOutRouterAdv = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutRouterAdv.setStatus('current')
ipv6icmpOutNeighSol = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutNeighSol.setStatus('current')
ipv6icmpOutNeighAdv = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutNeighAdv.setStatus('current')
ipv6icmpOutRedir = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutRedir.setStatus('current')
ipv6udpInDgrams = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6udpInDgrams.setStatus('current')
ipv6udpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6udpInErrs.setStatus('current')
ipv6udpOutDgrams = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6udpOutDgrams.setStatus('current')
ipv6udpNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6udpNumPorts.setStatus('current')
ipv6icmpInAdminProhib = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpInAdminProhib.setStatus('current')
ipv6icmpOutAdminProhib = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 10, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6icmpOutAdminProhib.setStatus('current')
ospf3GeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1))
ospf3CumRxTxDisdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1))
ospf3CumNbrChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2))
ospf3CumIntfChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3))
ospf3TimersKickOffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 4))
ospf3Area = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2))
ospf3AreaRxTxDisdStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1), )
if mibBuilder.loadTexts: ospf3AreaRxTxDisdStats.setStatus('current')
ospf3AreaRxTxDisdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3AreaRxTxDisdIndex"))
if mibBuilder.loadTexts: ospf3AreaRxTxDisdStatsEntry.setStatus('current')
ospf3AreaRxTxDisdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaRxTxDisdIndex.setStatus('current')
ospf3AreaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaRxPkts.setStatus('current')
ospf3AreaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaTxPkts.setStatus('current')
ospf3AreaDisdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaDisdPkts.setStatus('current')
ospf3AreaRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaRxHello.setStatus('current')
ospf3AreaTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaTxHello.setStatus('current')
ospf3AreaDisdHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaDisdHello.setStatus('current')
ospf3AreaRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaRxDatabase.setStatus('current')
ospf3AreaTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaTxDatabase.setStatus('current')
ospf3AreaDisdDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaDisdDatabase.setStatus('current')
ospf3AreaRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaRxlsReqs.setStatus('current')
ospf3AreaTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaTxlsReqs.setStatus('current')
ospf3AreaDisdlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaDisdlsReqs.setStatus('current')
ospf3AreaRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaRxlsAcks.setStatus('current')
ospf3AreaTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaTxlsAcks.setStatus('current')
ospf3AreaDisdlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaDisdlsAcks.setStatus('current')
ospf3AreaRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaRxlsUpdates.setStatus('current')
ospf3AreaTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaTxlsUpdates.setStatus('current')
ospf3AreaDisdlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaDisdlsUpdates.setStatus('current')
ospf3AreaNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2), )
if mibBuilder.loadTexts: ospf3AreaNbrChangeStats.setStatus('current')
ospf3AreaNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3AreaNbrIndex"))
if mibBuilder.loadTexts: ospf3AreaNbrChangeStatsEntry.setStatus('current')
ospf3AreaNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrIndex.setStatus('current')
ospf3AreaNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrDown.setStatus('current')
ospf3AreaNbrAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrAttempt.setStatus('current')
ospf3AreaNbrInit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrInit.setStatus('current')
ospf3AreaNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrN2way.setStatus('current')
ospf3AreaNbrExStart = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrExStart.setStatus('current')
ospf3AreaNbrExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrExchange.setStatus('current')
ospf3AreaNbrLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrLoading.setStatus('current')
ospf3AreaNbrFull = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrFull.setStatus('current')
ospf3AreaNbrAllEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaNbrAllEvents.setStatus('current')
ospf3AreaIntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3), )
if mibBuilder.loadTexts: ospf3AreaIntfChangeStats.setStatus('current')
ospf3AreaIntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3AreaIntfIndex"))
if mibBuilder.loadTexts: ospf3AreaIntfChangeStatsEntry.setStatus('current')
ospf3AreaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfIndex.setStatus('current')
ospf3AreaIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfDown.setStatus('current')
ospf3AreaIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfLoop.setStatus('current')
ospf3AreaIntfWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfWaiting.setStatus('current')
ospf3AreaIntfPtop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfPtop.setStatus('current')
ospf3AreaIntfDr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfDr.setStatus('current')
ospf3AreaIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfBackup.setStatus('current')
ospf3AreaIntfDrOther = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfDrOther.setStatus('current')
ospf3AreaIntfAllEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaIntfAllEvents.setStatus('current')
ospf3AreaErrorStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4), )
if mibBuilder.loadTexts: ospf3AreaErrorStats.setStatus('current')
ospf3AreaErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3AreaErrIndex"))
if mibBuilder.loadTexts: ospf3AreaErrorStatsEntry.setStatus('current')
ospf3AreaErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrIndex.setStatus('current')
ospf3AreaErrRxOnPasv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrRxOnPasv.setStatus('current')
ospf3AreaErrRxOspfOff = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrRxOspfOff.setStatus('current')
ospf3AreaErrRxOnNotup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrRxOnNotup.setStatus('current')
ospf3AreaErrRxVerMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrRxVerMismatch.setStatus('current')
ospf3AreaErrRxZeroRTRID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrRxZeroRTRID.setStatus('current')
ospf3AreaErrRxSameRTRID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrRxSameRTRID.setStatus('current')
ospf3AreaErrRxMismatchInstID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrRxMismatchInstID.setStatus('current')
ospf3AreaErrBadAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrBadAreaID.setStatus('current')
ospf3AreaErrBadDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrBadDestAddr.setStatus('current')
ospf3AreaErrBadChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrBadChecksum.setStatus('current')
ospf3AreaErrBadNeighbour = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrBadNeighbour.setStatus('current')
ospf3AreaErrBadPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrBadPktType.setStatus('current')
ospf3AreaErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrHelloMismatch.setStatus('current')
ospf3AreaErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrOptionsMismatch.setStatus('current')
ospf3AreaErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrDeadMismatch.setStatus('current')
ospf3AreaErrHelloNoNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaErrHelloNoNbr.setStatus('current')
ospf3Interface = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3))
ospf3IntfRxTxDisdStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1), )
if mibBuilder.loadTexts: ospf3IntfRxTxDisdStats.setStatus('current')
ospf3IntfRxTxDisdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3IntfRxTxDisdIndex"))
if mibBuilder.loadTexts: ospf3IntfRxTxDisdStatsEntry.setStatus('current')
ospf3IntfRxTxDisdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfRxTxDisdIndex.setStatus('current')
ospf3IntfRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfRxPkts.setStatus('current')
ospf3IntfTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfTxPkts.setStatus('current')
ospf3IntfDisdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDisdPkts.setStatus('current')
ospf3IntfRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfRxHello.setStatus('current')
ospf3IntfTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfTxHello.setStatus('current')
ospf3IntfDisdHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDisdHello.setStatus('current')
ospf3IntfRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfRxDatabase.setStatus('current')
ospf3IntfTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfTxDatabase.setStatus('current')
ospf3IntfDisdDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDisdDatabase.setStatus('current')
ospf3IntfRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfRxlsReqs.setStatus('current')
ospf3IntfTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfTxlsReqs.setStatus('current')
ospf3IntfDisdlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDisdlsReqs.setStatus('current')
ospf3IntfRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfRxlsAcks.setStatus('current')
ospf3IntfTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfTxlsAcks.setStatus('current')
ospf3IntfDisdlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDisdlsAcks.setStatus('current')
ospf3IntfRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfRxlsUpdates.setStatus('current')
ospf3IntfTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfTxlsUpdates.setStatus('current')
ospf3IntfDisdlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDisdlsUpdates.setStatus('current')
ospf3IntfNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2), )
if mibBuilder.loadTexts: ospf3IntfNbrChangeStats.setStatus('current')
ospf3IntfNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3IntfNbrIndex"))
if mibBuilder.loadTexts: ospf3IntfNbrChangeStatsEntry.setStatus('current')
ospf3IntfNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrIndex.setStatus('current')
ospf3IntfNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrDown.setStatus('current')
ospf3IntfNbrAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrAttempt.setStatus('current')
ospf3IntfNbrInit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrInit.setStatus('current')
ospf3IntfNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrN2way.setStatus('current')
ospf3IntfNbrExStart = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrExStart.setStatus('current')
ospf3IntfNbrExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrExchange.setStatus('current')
ospf3IntfNbrLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrLoading.setStatus('current')
ospf3IntfNbrFull = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrFull.setStatus('current')
ospf3IntfNbrAllEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfNbrAllEvents.setStatus('current')
ospf3IntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3), )
if mibBuilder.loadTexts: ospf3IntfChangeStats.setStatus('current')
ospf3IntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3IntfIndex"))
if mibBuilder.loadTexts: ospf3IntfChangeStatsEntry.setStatus('current')
ospf3IntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfIndex.setStatus('current')
ospf3IntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDown.setStatus('current')
ospf3IntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfLoop.setStatus('current')
ospf3IntfWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfWaiting.setStatus('current')
ospf3IntfPtop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfPtop.setStatus('current')
ospf3IntfDr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDr.setStatus('current')
ospf3IntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfBackup.setStatus('current')
ospf3IntfDrOther = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfDrOther.setStatus('current')
ospf3IntfAllEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfAllEvents.setStatus('current')
ospf3IntfErrorStats = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4), )
if mibBuilder.loadTexts: ospf3IntfErrorStats.setStatus('current')
ospf3IntfErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3IntfErrIndex"))
if mibBuilder.loadTexts: ospf3IntfErrorStatsEntry.setStatus('current')
ospf3IntfErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrIndex.setStatus('current')
ospf3IntfErrRxOnPasv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrRxOnPasv.setStatus('current')
ospf3IntfErrRxOspfOff = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrRxOspfOff.setStatus('current')
ospf3IntfErrRxOnNotup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrRxOnNotup.setStatus('current')
ospf3IntfErrRxVerMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrRxVerMismatch.setStatus('current')
ospf3IntfErrRxZeroRTRID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrRxZeroRTRID.setStatus('current')
ospf3IntfErrRxSameRTRID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrRxSameRTRID.setStatus('current')
ospf3IntfErrRxMismatchInstID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrRxMismatchInstID.setStatus('current')
ospf3IntfErrBadAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrBadAreaID.setStatus('current')
ospf3IntfErrBadDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrBadDestAddr.setStatus('current')
ospf3IntfErrBadChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrBadChecksum.setStatus('current')
ospf3IntfErrBadNeighbour = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrBadNeighbour.setStatus('current')
ospf3IntfErrBadPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrBadPktType.setStatus('current')
ospf3IntfErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrHelloMismatch.setStatus('current')
ospf3IntfErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrOptionsMismatch.setStatus('current')
ospf3IntfErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrDeadMismatch.setStatus('current')
ospf3IntfErrMTUMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrMTUMismatch.setStatus('current')
ospf3IntfErrHelloNoNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfErrHelloNoNbr.setStatus('current')
ospf3CumRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumRxPkts.setStatus('current')
ospf3CumTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumTxPkts.setStatus('current')
ospf3CumDisdPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumDisdPkts.setStatus('current')
ospf3CumRxHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumRxHello.setStatus('current')
ospf3CumTxHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumTxHello.setStatus('current')
ospf3CumDisdHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumDisdHello.setStatus('current')
ospf3CumRxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumRxDatabase.setStatus('current')
ospf3CumTxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumTxDatabase.setStatus('current')
ospf3CumDisdDatabase = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumDisdDatabase.setStatus('current')
ospf3CumRxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumRxlsReqs.setStatus('current')
ospf3CumTxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumTxlsReqs.setStatus('current')
ospf3CumDisdlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumDisdlsReqs.setStatus('current')
ospf3CumRxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumRxlsAcks.setStatus('current')
ospf3CumTxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumTxlsAcks.setStatus('current')
ospf3CumDisdlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumDisdlsAcks.setStatus('current')
ospf3CumRxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumRxlsUpdates.setStatus('current')
ospf3CumTxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumTxlsUpdates.setStatus('current')
ospf3CumDisdlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumDisdlsUpdates.setStatus('current')
ospf3CumNbrDown = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrDown.setStatus('current')
ospf3CumNbrAttempt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrAttempt.setStatus('current')
ospf3CumNbrInit = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrInit.setStatus('current')
ospf3CumNbrN2way = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrN2way.setStatus('current')
ospf3CumNbrExStart = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrExStart.setStatus('current')
ospf3CumNbrExchange = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrExchange.setStatus('current')
ospf3CumNbrLoading = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrLoading.setStatus('current')
ospf3CumNbrFull = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrFull.setStatus('current')
ospf3CumNbrAllEvents = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumNbrAllEvents.setStatus('current')
ospf3CumIntfDown = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfDown.setStatus('current')
ospf3CumIntfLoop = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfLoop.setStatus('current')
ospf3CumIntfWaiting = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfWaiting.setStatus('current')
ospf3CumIntfPtop = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfPtop.setStatus('current')
ospf3CumIntfDr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfDr.setStatus('current')
ospf3CumIntfBackup = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfBackup.setStatus('current')
ospf3CumIntfDrOther = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfDrOther.setStatus('current')
ospf3CumIntfAllEvents = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3CumIntfAllEvents.setStatus('current')
ospf3TmrsKckOffHello = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TmrsKckOffHello.setStatus('current')
ospf3TmrsKckOffWait = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TmrsKckOffWait.setStatus('current')
ospf3TmrsKckOffPoll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TmrsKckOffPoll.setStatus('current')
ospf3TmrsKckOffNbrProbe = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 22, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TmrsKckOffNbrProbe.setStatus('current')
mldIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1), )
if mibBuilder.loadTexts: mldIfStatsTable.setStatus('current')
mldIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mldIfStatsIfIndex"))
if mibBuilder.loadTexts: mldIfStatsEntry.setStatus('current')
mldIfStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldIfStatsIfIndex.setStatus('current')
rxMldIfStatsGeneralQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsGeneralQuery.setStatus('current')
rxMldIfStatsMASQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsMASQuery.setStatus('current')
rxMldIfStatsMASSQQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsMASSQQuery.setStatus('current')
rxMldIfStatsMLDv1Report = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsMLDv1Report.setStatus('current')
rxMldIfStatsMLDv1Done = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsMLDv1Done.setStatus('current')
rxMldIfStatsMLDv2Report = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsMLDv2Report.setStatus('current')
rxMldIfStatsIncCrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsIncCrsv2.setStatus('current')
rxMldIfStatsExcCrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsExcCrsv2.setStatus('current')
rxMldIfStatsToIncFmcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsToIncFmcrsv2.setStatus('current')
rxMldIfStatsToExcFmcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsToExcFmcrsv2.setStatus('current')
rxMldIfStatsAllowSlcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsAllowSlcrsv2.setStatus('current')
rxMldIfStatsBlockSlcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMldIfStatsBlockSlcrsv2.setStatus('current')
txMldIfStatsGeneralQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsGeneralQuery.setStatus('current')
txMldIfStatsMASQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsMASQuery.setStatus('current')
txMldIfStatsMASSQQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsMASSQQuery.setStatus('current')
txMldIfStatsMLDv1Report = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsMLDv1Report.setStatus('current')
txMldIfStatsMLDv1Done = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsMLDv1Done.setStatus('current')
txMldIfStatsMLDv2Report = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsMLDv2Report.setStatus('current')
txMldIfStatsIncCrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsIncCrsv2.setStatus('current')
txMldIfStatsExcCrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsExcCrsv2.setStatus('current')
txMldIfStatsToIncFmcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsToIncFmcrsv2.setStatus('current')
txMldIfStatsToExcFmcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsToExcFmcrsv2.setStatus('current')
txMldIfStatsAllowSlcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsAllowSlcrsv2.setStatus('current')
txMldIfStatsBlockSlcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMldIfStatsBlockSlcrsv2.setStatus('current')
errMldIfStatsGeneralQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsGeneralQuery.setStatus('current')
errMldIfStatsMASQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsMASQuery.setStatus('current')
errMldIfStatsMASSQQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsMASSQQuery.setStatus('current')
errMldIfStatsMLDv1Report = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsMLDv1Report.setStatus('current')
errMldIfStatsMLDv1Done = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsMLDv1Done.setStatus('current')
errMldIfStatsMLDv2Report = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsMLDv2Report.setStatus('current')
errMldIfStatsIncCrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsIncCrsv2.setStatus('current')
errMldIfStatsExcCrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsExcCrsv2.setStatus('current')
errMldIfStatsToIncFmcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsToIncFmcrsv2.setStatus('current')
errMldIfStatsToExcFmcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsToExcFmcrsv2.setStatus('current')
errMldIfStatsAllowSlcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsAllowSlcrsv2.setStatus('current')
errMldIfStatsBlockSlcrsv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMldIfStatsBlockSlcrsv2.setStatus('current')
mldStatBadLength = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatBadLength.setStatus('current')
mldStatBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatBadChecksum.setStatus('current')
mldStatBadReceiveIf = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatBadReceiveIf.setStatus('current')
mldStatReceiveNonLocal = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatReceiveNonLocal.setStatus('current')
mldStatInvalidPkts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatInvalidPkts.setStatus('current')
mldStatTotalL3Ipv6SgvEntries = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatTotalL3Ipv6SgvEntries.setStatus('current')
mldStatTotalMLDGroups = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatTotalMLDGroups.setStatus('current')
mldStatClearAll = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 23, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStatClearAll.setStatus('current')
ipInfoRouterID = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRouterID.setStatus('current')
ipIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1), )
if mibBuilder.loadTexts: ipIntfInfoTable.setStatus('current')
intfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "intfInfoIndex"))
if mibBuilder.loadTexts: intfInfoEntry.setStatus('current')
intfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoIndex.setStatus('current')
intfInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoAddr.setStatus('current')
intfInfoNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoNetMask.setStatus('current')
intfInfoBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoBcastAddr.setStatus('current')
intfInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoVlan.setStatus('current')
intfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoStatus.setStatus('current')
ipIntfLoopbackInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16, 1), )
if mibBuilder.loadTexts: ipIntfLoopbackInfoTable.setStatus('current')
intfLoopbackInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "intfLoopbackInfoIndex"))
if mibBuilder.loadTexts: intfLoopbackInfoEntry.setStatus('current')
intfLoopbackInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfLoopbackInfoIndex.setStatus('current')
intfLoopbackInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfLoopbackInfoAddr.setStatus('current')
intfLoopbackInfoNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfLoopbackInfoNetMask.setStatus('current')
intfLoopbackInfoBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfLoopbackInfoBcastAddr.setStatus('current')
intfLoopbackInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfLoopbackInfoStatus.setStatus('current')
ipMgmtRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3), )
if mibBuilder.loadTexts: ipMgmtRouteInfoTable.setStatus('current')
ipMgmtRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipMgmtRouteInfoIndx"))
if mibBuilder.loadTexts: ipMgmtRouteInfoEntry.setStatus('current')
ipMgmtRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoIndx.setStatus('current')
ipMgmtRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoDestIp.setStatus('current')
ipMgmtRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoMask.setStatus('current')
ipMgmtRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoGateway.setStatus('current')
ipMgmtRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("fixed", 1), ("static", 2), ("addr", 3), ("rip", 4), ("broadcast", 5), ("martian", 6), ("multicast", 7), ("vip", 8), ("bgp", 9), ("ospf", 10), ("none", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoTag.setStatus('current')
ipMgmtRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoType.setStatus('current')
ipMgmtRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoInterface.setStatus('current')
ipMgmtRouteInfoGateway1 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoGateway1.setStatus('current')
ipMgmtRouteInfoGateway2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoGateway2.setStatus('current')
ipMgmtRouteInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMgmtRouteInfoMetric.setStatus('current')
ipDataRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1), )
if mibBuilder.loadTexts: ipDataRouteInfoTable.setStatus('current')
ipDataRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipDataRouteInfoIndx"))
if mibBuilder.loadTexts: ipDataRouteInfoEntry.setStatus('current')
ipDataRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoIndx.setStatus('current')
ipDataRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoDestIp.setStatus('current')
ipDataRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoMask.setStatus('current')
ipDataRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoGateway.setStatus('current')
ipDataRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("fixed", 1), ("static", 2), ("addr", 3), ("rip", 4), ("broadcast", 5), ("martian", 6), ("multicast", 7), ("vip", 8), ("bgp", 9), ("ospf", 10), ("none", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoTag.setStatus('current')
ipDataRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoType.setStatus('current')
ipDataRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoInterface.setStatus('current')
ipDataRouteInfoGateway1 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoGateway1.setStatus('current')
ipDataRouteInfoGateway2 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoGateway2.setStatus('current')
ipDataRouteInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDataRouteInfoMetric.setStatus('current')
routeTableClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeTableClear.setStatus('current')
ipRouteEcmpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1), )
if mibBuilder.loadTexts: ipRouteEcmpInfoTable.setStatus('current')
ipRouteEcmpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipRouteEcmpInfoDestIndx"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipRouteEcmpInfoGwIndx"))
if mibBuilder.loadTexts: ipRouteEcmpInfoEntry.setStatus('current')
ipRouteEcmpInfoDestIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteEcmpInfoDestIndx.setStatus('current')
ipRouteEcmpInfoGwIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteEcmpInfoGwIndx.setStatus('current')
ipRouteEcmpInfoDest = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteEcmpInfoDest.setStatus('current')
ipRouteEcmpInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteEcmpInfoMask.setStatus('current')
ipRouteEcmpInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteEcmpInfoGateway.setStatus('current')
ipRouteEcmpInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteEcmpInfoInterface.setStatus('current')
ipRouteEcmpInfoGwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 19, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteEcmpInfoGwStatus.setStatus('current')
ipEcmpHashSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 20, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEcmpHashSIPAddr.setStatus('current')
ipEcmpHashDIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEcmpHashDIPAddr.setStatus('current')
ipEcmpHashNumberPaths = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEcmpHashNumberPaths.setStatus('current')
ipEcmpHashRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipEcmpHashRouteNumber.setStatus('current')
mldInfoGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1), )
if mibBuilder.loadTexts: mldInfoGroupsTable.setStatus('current')
mldInfoGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mldInfoGroupIfIndex"))
if mibBuilder.loadTexts: mldInfoGroupEntry.setStatus('current')
mldInfoGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupIfIndex.setStatus('current')
mldInfoGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupAddress.setStatus('current')
mldInfoGroupPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupPortNumber.setStatus('current')
mldInfoGroupVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupVlanID.setStatus('current')
mldInfoGroupLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupLastReporter.setStatus('current')
mldInfoGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupSource.setStatus('current')
mldInfoGroupFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupFilterType.setStatus('current')
mldInfoGroupExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupExpiryTime.setStatus('current')
mldInfoGroupVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupVersion.setStatus('current')
mldInfoGroupFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoGroupFwd.setStatus('current')
mldInfoMRoutersTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2), )
if mibBuilder.loadTexts: mldInfoMRoutersTable.setStatus('current')
mldInfoMRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mldInfoMRouterIfIndex"))
if mibBuilder.loadTexts: mldInfoMRouterEntry.setStatus('current')
mldInfoMRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterIfIndex.setStatus('current')
mldInfoMRouterSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterSrcIp.setStatus('current')
mldInfoMRouterPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterPortNumber.setStatus('current')
mldInfoMRouterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterVlan.setStatus('current')
mldInfoMRouterQrv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterQrv.setStatus('current')
mldInfoMRouterQqic = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterQqic.setStatus('current')
mldInfoMRouterMaxRespDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterMaxRespDelay.setStatus('current')
mldInfoMRouterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterVersion.setStatus('current')
mldInfoMRouterExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoMRouterExpiryTime.setStatus('current')
mldClearTables = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("clearGroups", 1), ("clearMrouters", 2), ("clearAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldClearTables.setStatus('current')
mldInfoInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4), )
if mibBuilder.loadTexts: mldInfoInterfaceTable.setStatus('current')
mldInfoInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "mldInfoInterfaceIfIndex"))
if mibBuilder.loadTexts: mldInfoInterfaceEntry.setStatus('current')
mldInfoInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: mldInfoInterfaceIfIndex.setStatus('current')
mldInfoInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoInterfaceState.setStatus('current')
mldInfoInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 3), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoInterfaceVersion.setStatus('current')
mldInfoInterfaceQuerierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoInterfaceQuerierStatus.setStatus('current')
mldInfoInterfaceQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoInterfaceQuerier.setStatus('current')
mldInfoInterfaceQuerierExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoInterfaceQuerierExpiryTime.setStatus('current')
mldInfoInterfaceQuerierPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoInterfaceQuerierPort.setStatus('current')
mldInfoInterfaceGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 22, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldInfoInterfaceGroups.setStatus('current')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 1), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('current')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('current')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('current')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('current')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('current')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 1, 1, 4), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('current')
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4), ("layer4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('current')
arpCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheClear.setStatus('current')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('current')
vrrpInfoVirtGroupState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtGroupState.setStatus('current')
vrrpInfoVirtGroupPriority = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtGroupPriority.setStatus('current')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('current')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('current')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3), ("holdoff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('current')
vrrpInfoVirtRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("owner", 1), ("renter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setStatus('current')
vrrpInfoVirtRtrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrConfig.setStatus('current')
vrrpInfoVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrID.setStatus('current')
vrrpInfoVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrAddr.setStatus('current')
vrrpInfoVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIfIndex.setStatus('current')
vrrpInfoVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrPriority.setStatus('current')
ospfGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1))
ospfStartTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStartTime.setStatus('current')
ospfProcessUptime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfProcessUptime.setStatus('current')
ospfLsTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsTypesSupported.setStatus('current')
ospfIntfCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfCountForRouter.setStatus('current')
ospfVlinkCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setStatus('current')
ospfTotalNeighbours = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNeighbours.setStatus('current')
ospfNbrInInitState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInInitState.setStatus('current')
ospfNbrInExchState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInExchState.setStatus('current')
ospfNbrInFullState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInFullState.setStatus('current')
ospfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalAreas.setStatus('current')
ospfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalTransitAreas.setStatus('current')
ospfTotalNssaAreas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNssaAreas.setStatus('current')
ospfTotalStubAreas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalStubAreas.setStatus('current')
ospfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2), )
if mibBuilder.loadTexts: ospfAreaInfoTable.setStatus('current')
ospfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfAreaInfoIndex"))
if mibBuilder.loadTexts: ospfAreaInfoEntry.setStatus('current')
ospfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoIndex.setStatus('current')
ospfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoId.setStatus('current')
ospfTotalNumberOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setStatus('current')
ospfNumberOfInterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setStatus('current')
ospfNumberOfLsdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setStatus('current')
ospfAreaInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoAuthType.setStatus('current')
ospfAreaInfoLsTypesAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoLsTypesAccepted.setStatus('current')
ospfAreaInfoSPF = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoSPF.setStatus('current')
ospfAreaInfoAreaBorderRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoAreaBorderRouter.setStatus('current')
ospfAreaInfoASBoundaryRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoASBoundaryRouter.setStatus('current')
ospfAreaInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoTotalNeighbours.setStatus('current')
ospfAreaInfoNeighborsINITstate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoNeighborsINITstate.setStatus('current')
ospfAreaInfoNeighborsEXCHstate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoNeighborsEXCHstate.setStatus('current')
ospfAreaInfoNeighborsFULLstate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoNeighborsFULLstate.setStatus('current')
ospfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3), )
if mibBuilder.loadTexts: ospfIntfInfoTable.setStatus('current')
ospfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfIfInfoIndex"))
if mibBuilder.loadTexts: ospfIntfInfoEntry.setStatus('current')
ospfIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIndex.setStatus('current')
ospfIfInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setStatus('current')
ospfIfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoArea.setStatus('current')
ospfIfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoAdminStatus.setStatus('current')
ospfIfInfoPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoPassive.setStatus('current')
ospfIfInfoPtop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoPtop.setStatus('current')
ospfIfInfoRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoRouterIP.setStatus('current')
ospfIfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 0), ("loopback", 1), ("waiting", 2), ("ptop", 3), ("dr", 4), ("backupdr", 5), ("drother", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoState.setStatus('current')
ospfIfInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoPriority.setStatus('current')
ospfIfInfoDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterIP.setStatus('current')
ospfIfInfoDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterIpAddress.setStatus('current')
ospfIfInfoBackupDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterIP.setStatus('current')
ospfIfInfoBackupDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterIpAddress.setStatus('current')
ospfIfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoHello.setStatus('current')
ospfIfInfoHelloMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoHelloMS.setStatus('current')
ospfIfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDead.setStatus('current')
ospfIfInfoDeadMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDeadMS.setStatus('current')
ospfIfInfoWaitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoWaitInterval.setStatus('current')
ospfIfInfoWaitIntervalMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoWaitIntervalMS.setStatus('current')
ospfIfInfoRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoRetransmit.setStatus('current')
ospfIfInfoTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoTransitDelay.setStatus('current')
ospfIfInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoTotalNeighbours.setStatus('current')
ospfIfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoEvents.setStatus('current')
ospfIfInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoAuthType.setStatus('current')
ospfVirtIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4), )
if mibBuilder.loadTexts: ospfVirtIntfInfoTable.setStatus('current')
ospfVirtIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfVirtIntfInfoIndex"))
if mibBuilder.loadTexts: ospfVirtIntfInfoEntry.setStatus('current')
ospfVirtIntfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoIndex.setStatus('current')
ospfVirtIntfInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoIpAddr.setStatus('current')
ospfVirtIntfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoArea.setStatus('current')
ospfVirtIntfInfoRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoRouterId.setStatus('current')
ospfVirtIntfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoState.setStatus('current')
ospfVirtIntfInfoCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoCost.setStatus('current')
ospfVirtIntfInfoTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoTrans.setStatus('current')
ospfVirtIntfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoHello.setStatus('current')
ospfVirtIntfInfoHelloMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoHelloMS.setStatus('current')
ospfVirtIntfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoDead.setStatus('current')
ospfVirtIntfInfoDeadMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoDeadMS.setStatus('current')
ospfVirtIntfInfoWait = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoWait.setStatus('current')
ospfVirtIntfInfoWaitMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoWaitMS.setStatus('current')
ospfVirtIntfInfoRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoRetra.setStatus('current')
ospfVirtIntfInfoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoAuth.setStatus('current')
ospfVirtIntfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoEvents.setStatus('current')
ospfVirtIntfInfoNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoNbr.setStatus('current')
ospfVirtIntfInfoNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 0), ("attempt", 1), ("init", 2), ("twoway", 3), ("exstart", 4), ("exchange", 5), ("loading", 6), ("full", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoNbrState.setStatus('current')
ospfVirtIntfInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 4, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoAreaId.setStatus('current')
ospfIfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5), )
if mibBuilder.loadTexts: ospfIfNbrTable.setStatus('current')
ospfIfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfIfNbrIntfIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ospfIfNbrIpAddr"))
if mibBuilder.loadTexts: ospfIfNbrEntry.setStatus('current')
ospfIfNbrIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIntfIndex.setStatus('current')
ospfIfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddr.setStatus('current')
ospfIfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrPriority.setStatus('current')
ospfIfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrState.setStatus('current')
ospfIfNbrDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrDesignatedRtr.setStatus('current')
ospfIfNbrBackupDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrBackupDesignatedRtr.setStatus('current')
ospfIfNbrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddress.setStatus('current')
ospfSumRangesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6), )
if mibBuilder.loadTexts: ospfSumRangesInfoTable.setStatus('current')
ospfSumRangesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfSumRangesInfoIndex"))
if mibBuilder.loadTexts: ospfSumRangesInfoEntry.setStatus('current')
ospfSumRangesInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoIndex.setStatus('current')
ospfSumRangesInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoArea.setStatus('current')
ospfSumRangesInfoNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoNetwork.setStatus('current')
ospfSumRangesInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoMask.setStatus('current')
ospfSumRangesInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("propagate", 0), ("hide", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoAction.setStatus('current')
ospfSumRangesInfoListType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-nssa", 0), ("nssa", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoListType.setStatus('current')
ospfRoutesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 7), )
if mibBuilder.loadTexts: ospfRoutesInfoTable.setStatus('current')
ospfRoutesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfRoutesInfoIndex"))
if mibBuilder.loadTexts: ospfRoutesInfoEntry.setStatus('current')
ospfRoutesInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoIndex.setStatus('current')
ospfRoutesInfoDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoDestination.setStatus('current')
ospfRoutesInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoMask.setStatus('current')
ospfRoutesInfoVia = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoVia.setStatus('current')
ospfRoutesInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoType.setStatus('current')
ospfLsdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8), )
if mibBuilder.loadTexts: ospfLsdbInfoTable.setStatus('current')
ospfLsdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfLsdbInfoIndex"))
if mibBuilder.loadTexts: ospfLsdbInfoEntry.setStatus('current')
ospfLsdbInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoIndex.setStatus('current')
ospfLsdbInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoAreaId.setStatus('current')
ospfLsdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoType.setStatus('current')
ospfLsdbInfoLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoLsid.setStatus('current')
ospfLsdbInfoRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoRouterId.setStatus('current')
ospfLsdbInfoSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoSequence.setStatus('current')
ospfLsdbInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoAge.setStatus('current')
ospfLsdbInfoChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoChecksum.setStatus('current')
ospfLsdbInfoAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoAdvertisement.setStatus('current')
ospfExtLsdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9), )
if mibBuilder.loadTexts: ospfExtLsdbInfoTable.setStatus('current')
ospfExtLsdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfExtLsdbInfoIndex"))
if mibBuilder.loadTexts: ospfExtLsdbInfoEntry.setStatus('current')
ospfExtLsdbInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoIndex.setStatus('current')
ospfExtLsdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("asExternalLink", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoType.setStatus('current')
ospfExtLsdbInfoLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoLsid.setStatus('current')
ospfExtLsdbInfoRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoRouterId.setStatus('current')
ospfExtLsdbInfoSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoSequence.setStatus('current')
ospfExtLsdbInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoAge.setStatus('current')
ospfExtLsdbInfoChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoChecksum.setStatus('current')
ospfExtLsdbInfoAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoAdvertisement.setStatus('current')
ospfLoopIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10), )
if mibBuilder.loadTexts: ospfLoopIfInfoTable.setStatus('current')
ospfLoopIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospfLoopIfInfoIndex"))
if mibBuilder.loadTexts: ospfLoopIfInfoEntry.setStatus('current')
ospfLoopIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoIndex.setStatus('current')
ospfLoopIfInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoIpAddress.setStatus('current')
ospfLoopIfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoArea.setStatus('current')
ospfLoopIfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoAdminStatus.setStatus('current')
ospfLoopIfInfoPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoPassive.setStatus('current')
ospfLoopIfInfoPtop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoPtop.setStatus('current')
ospfLoopIfInfoRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoRouterIP.setStatus('current')
ospfLoopIfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 0), ("loopback", 1), ("waiting", 2), ("ptop", 3), ("dr", 4), ("backupdr", 5), ("drother", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoState.setStatus('current')
ospfLoopIfInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoPriority.setStatus('current')
ospfLoopIfInfoDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoDesignatedRouterIP.setStatus('current')
ospfLoopIfInfoDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoDesignatedRouterIpAddress.setStatus('current')
ospfLoopIfInfoBackupDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoBackupDesignatedRouterIP.setStatus('current')
ospfLoopIfInfoBackupDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoBackupDesignatedRouterIpAddress.setStatus('current')
ospfLoopIfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoHello.setStatus('current')
ospfLoopIfInfoHelloMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoHelloMS.setStatus('current')
ospfLoopIfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoDead.setStatus('current')
ospfLoopIfInfoDeadMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoDeadMS.setStatus('current')
ospfLoopIfInfoWaitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoWaitInterval.setStatus('current')
ospfLoopIfInfoWaitIntervalMS = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("milliseconds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoWaitIntervalMS.setStatus('current')
ospfLoopIfInfoRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoRetransmit.setStatus('current')
ospfLoopIfInfoTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoTransitDelay.setStatus('current')
ospfLoopIfInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoTotalNeighbours.setStatus('current')
ospfLoopIfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoEvents.setStatus('current')
ospfLoopIfInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLoopIfInfoAuthType.setStatus('current')
ospf3GeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1))
ospf3Version = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("ospfVersion3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3Version.setStatus('current')
ospf3RouterID = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RouterID.setStatus('current')
ospf3StartTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3StartTime.setStatus('current')
ospf3ProcessUptime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3ProcessUptime.setStatus('current')
ospf3AreaBorderRouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaBorderRouter.setStatus('current')
ospf3ASBoundaryRouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3ASBoundaryRouter.setStatus('current')
ospf3ExternalLsa = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3ExternalLsa.setStatus('current')
ospf3IntfCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IntfCountForRouter.setStatus('current')
ospf3VlinkCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VlinkCountForRouter.setStatus('current')
ospf3NewLsaReceived = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NewLsaReceived.setStatus('current')
ospf3TotalLsaOriginated = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TotalLsaOriginated.setStatus('current')
ospf3TotalNumberOfAsScopeLsas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TotalNumberOfAsScopeLsas.setStatus('current')
ospf3TotalNeighbours = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TotalNeighbours.setStatus('current')
ospf3NbrInXchgOrLoadState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NbrInXchgOrLoadState.setStatus('current')
ospf3TotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TotalAreas.setStatus('current')
ospf3TotalActiveAreas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TotalActiveAreas.setStatus('current')
ospf3TotalNssaAreas = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TotalNssaAreas.setStatus('current')
ospf3OverFlowState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3OverFlowState.setStatus('current')
ospf3SpfDelay = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3SpfDelay.setStatus('current')
ospf3SpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3SpfHoldTime.setStatus('current')
ospf3ABRType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standardABR", 1), ("ciscoABR", 2), ("ibmABR", 3))).clone('standardABR')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3ABRType.setStatus('current')
ospf3NssaAsbrDefRtTrans = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NssaAsbrDefRtTrans.setStatus('current')
ospf3AreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2), )
if mibBuilder.loadTexts: ospf3AreaInfoTable.setStatus('current')
ospf3AreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3AreaInfoIndex"))
if mibBuilder.loadTexts: ospf3AreaInfoEntry.setStatus('current')
ospf3AreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoIndex.setStatus('current')
ospf3AreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoId.setStatus('current')
ospf3AreaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoStatus.setStatus('current')
ospf3TotalNumberOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3TotalNumberOfInterfaces.setStatus('current')
ospf3NumberOfInterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NumberOfInterfacesUp.setStatus('current')
ospf3AreaInfoSPF = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoSPF.setStatus('current')
ospf3NumberOfLsdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3NumberOfLsdbEntries.setStatus('current')
ospf3AreaInfoAreaBorderRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoAreaBorderRouter.setStatus('current')
ospf3AreaInfoASBoundaryRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoASBoundaryRouter.setStatus('current')
ospf3AreaInfoNeighborsFULLstate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoNeighborsFULLstate.setStatus('current')
ospf3AreaInfoVirtNeighborsFULLstate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3AreaInfoVirtNeighborsFULLstate.setStatus('current')
ospf3IntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3), )
if mibBuilder.loadTexts: ospf3IntfInfoTable.setStatus('current')
ospf3IntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3IfInfoIndex"))
if mibBuilder.loadTexts: ospf3IntfInfoEntry.setStatus('current')
ospf3IfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoIndex.setStatus('current')
ospf3IfInfoInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoInstanceID.setStatus('current')
ospf3IfInfoLLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoLLocalAddress.setStatus('current')
ospf3IfInfoAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoAreaID.setStatus('current')
ospf3IfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoAdminStatus.setStatus('current')
ospf3IfInfoPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoPassive.setStatus('current')
ospf3IfInfoNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoNetworkType.setStatus('current')
ospf3IfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7), ("standby", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoState.setStatus('current')
ospf3IfInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoPriority.setStatus('current')
ospf3IfInfoDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoDesignatedRouterID.setStatus('current')
ospf3IfInfoBackupDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoBackupDesignatedRouterID.setStatus('current')
ospf3IfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoHello.setStatus('current')
ospf3IfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoDead.setStatus('current')
ospf3IfInfoPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoPoll.setStatus('current')
ospf3IfInfoRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoRetransmit.setStatus('current')
ospf3IfInfoTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoTransitDelay.setStatus('current')
ospf3IfInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoTotalNeighbours.setStatus('current')
ospf3IfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoEvents.setStatus('current')
ospf3IfInfoMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoMetricCost.setStatus('current')
ospf3IfInfoAuthSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoAuthSpi.setStatus('current')
ospf3IfInfoAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoAuthEnable.setStatus('current')
ospf3IfInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 1))).clone(namedValues=NamedValues(("none", 0), ("md5", 2), ("sha1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoAuthType.setStatus('current')
ospf3IfInfoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoAuthKey.setStatus('current')
ospf3IfInfoEncrySpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoEncrySpi.setStatus('current')
ospf3IfInfoEncryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoEncryEnable.setStatus('current')
ospf3IfInfoEncryType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("null", 0), ("des", 1), ("tripledes", 2), ("aes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoEncryType.setStatus('current')
ospf3IfInfoEncryKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoEncryKey.setStatus('current')
ospf3IfInfoEncryAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 1))).clone(namedValues=NamedValues(("none", 0), ("md5", 2), ("sha1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoEncryAuthType.setStatus('current')
ospf3IfInfoEncryAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoEncryAuthKey.setStatus('current')
ospf3IfInfoLsaSupress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfInfoLsaSupress.setStatus('current')
ospf3VirtIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4), )
if mibBuilder.loadTexts: ospf3VirtIntfInfoTable.setStatus('current')
ospf3VirtIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3VirtIfInfoIndex"))
if mibBuilder.loadTexts: ospf3VirtIntfInfoEntry.setStatus('current')
ospf3VirtIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoIndex.setStatus('current')
ospf3VirtIfInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoAreaId.setStatus('current')
ospf3VirtIfInfoNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoNeighbor.setStatus('current')
ospf3VirtIfInfoTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 5), Integer32().clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoTransitDelay.setStatus('current')
ospf3VirtIfInfoRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 6), Integer32().clone(5)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoRetransInterval.setStatus('current')
ospf3VirtIfInfoHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 7), Integer32().clone(10)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoHelloInterval.setStatus('current')
ospf3VirtIfInfoRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 8), Integer32().clone(60)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoRtrDeadInterval.setStatus('current')
ospf3VirtIfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoState.setStatus('current')
ospf3VirtIfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoEvents.setStatus('current')
ospf3VirtIfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoStatus.setStatus('current')
ospf3VirtIfInfoLinkScopeLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoLinkScopeLsaCount.setStatus('current')
ospf3VirtIfInfoLinkLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3VirtIfInfoLinkLsaCksumSum.setStatus('current')
ospf3IfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5), )
if mibBuilder.loadTexts: ospf3IfNbrTable.setStatus('current')
ospf3IfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3IfNbrInfoIndex"))
if mibBuilder.loadTexts: ospf3IfNbrEntry.setStatus('current')
ospf3IfNbrInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrInfoIndex.setStatus('current')
ospf3IfNbrIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrIntfIndex.setStatus('current')
ospf3IfNbrIntfInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrIntfInstanceID.setStatus('current')
ospf3IfNbrRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrRtrID.setStatus('current')
ospf3IfNbrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrIpAddress.setStatus('current')
ospf3IfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrPriority.setStatus('current')
ospf3IfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrState.setStatus('current')
ospf3IfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3IfNbrEvents.setStatus('current')
ospf3RoutesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6), )
if mibBuilder.loadTexts: ospf3RoutesInfoTable.setStatus('current')
ospf3RoutesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ospf3RoutesInfoIndex"))
if mibBuilder.loadTexts: ospf3RoutesInfoEntry.setStatus('current')
ospf3RoutesInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoIndex.setStatus('current')
ospf3RoutesInfoDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoDestination.setStatus('current')
ospf3RoutesInfoPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoPrefixLen.setStatus('current')
ospf3RoutesInfoNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoNextHop.setStatus('current')
ospf3RoutesInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("intraArea", 1), ("interArea", 2), ("type1External", 3), ("type2External", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoType.setStatus('current')
ospf3RoutesInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoAreaId.setStatus('current')
ospf3RoutesInfoCost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoCost.setStatus('current')
ospf3RoutesInfoType2Cost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoType2Cost.setStatus('current')
ospf3RoutesInfoInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 18, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospf3RoutesInfoInterfaceIndex.setStatus('current')
gatewayInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 5, 1), )
if mibBuilder.loadTexts: gatewayInfoTable.setStatus('current')
gatewayInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 5, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "gatewayInfoIndex"))
if mibBuilder.loadTexts: gatewayInfoEntry.setStatus('current')
gatewayInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoIndex.setStatus('current')
gatewayInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoAddr.setStatus('current')
gatewayInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoStatus.setStatus('current')
ipInfoBootpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayState.setStatus('current')
ipInfoBootpRelayAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 8, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayAddr.setStatus('current')
ipInfoBootpRelayAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 8, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayAddr2.setStatus('current')
ipInfoFwdState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoFwdState.setStatus('current')
ipInfoFwdDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoFwdDirectedBcast.setStatus('current')
igmpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1), )
if mibBuilder.loadTexts: igmpInfoTable.setStatus('current')
igmpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpInfoIndex"))
if mibBuilder.loadTexts: igmpInfoEntry.setStatus('current')
igmpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoIndex.setStatus('current')
igmpInfoGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoGroupId.setStatus('current')
igmpInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoVlanId.setStatus('current')
igmpInfoSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoSrcTrunk.setStatus('current')
igmpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 5), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoSrcPort.setStatus('current')
igmpInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v3", 1), ("v2", 2), ("v1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoVersion.setStatus('current')
igmpInfoExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoExpires.setStatus('current')
igmpInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exclude", 1), ("include", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoMode.setStatus('current')
igmpInfoSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoSourceIp.setStatus('current')
igmpInfoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoFwd.setStatus('current')
igmpInfoGrpExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoGrpExpires.setStatus('current')
igmpMrtrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2), )
if mibBuilder.loadTexts: igmpMrtrInfoTable.setStatus('current')
igmpMrtrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "igmpMrtrInfoIndex"))
if mibBuilder.loadTexts: igmpMrtrInfoEntry.setStatus('current')
igmpMrtrInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoIndex.setStatus('current')
igmpMrtrInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoVlanId.setStatus('current')
igmpMrtrInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoPortId.setStatus('current')
igmpMrtrInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3), ("pim", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoVersion.setStatus('current')
igmpMrtrInfoExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoExpires.setStatus('current')
igmpMrtrInfoMrt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoMrt.setStatus('current')
igmpMrtrInfoQrv = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoQrv.setStatus('current')
igmpMrtrInfoQqic = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoQqic.setStatus('current')
igmpMrtrInfoSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoSrcIp.setStatus('current')
igmpClearTables = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("clearGroups", 1), ("clearMrouters", 2), ("clearAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearTables.setStatus('current')
nbrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1), )
if mibBuilder.loadTexts: nbrInfoTable.setStatus('current')
nbrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "nbrInfoIndex"))
if mibBuilder.loadTexts: nbrInfoEntry.setStatus('current')
nbrInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoIndex.setStatus('current')
nbrInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoDestIp.setStatus('current')
nbrInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reach", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoState.setStatus('current')
nbrInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoMacAddr.setStatus('current')
nbrInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoVlanId.setStatus('current')
nbrInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoPortNum.setStatus('current')
nbrInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoAge.setStatus('current')
nbrInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrInfoInterface.setStatus('current')
nbrClear = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbrClear.setStatus('current')
ipv6PmtuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 21, 1), )
if mibBuilder.loadTexts: ipv6PmtuInfoTable.setStatus('current')
ipv6PmtuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 21, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipv6PmtuInfoIndx"))
if mibBuilder.loadTexts: ipv6PmtuInfoEntry.setStatus('current')
ipv6PmtuInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6PmtuInfoIndx.setStatus('current')
ipv6PmtuInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6PmtuInfoDestIp.setStatus('current')
ipv6PmtuInfoSinceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 21, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6PmtuInfoSinceTime.setStatus('current')
ipv6PmtuInfoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6PmtuInfoValue.setStatus('current')
ipRoute6InfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1), )
if mibBuilder.loadTexts: ipRoute6InfoTable.setStatus('current')
ipRoute6InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipRoute6InfoIndx"))
if mibBuilder.loadTexts: ipRoute6InfoEntry.setStatus('current')
ipRoute6InfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoIndx.setStatus('current')
ipRoute6InfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoDestIp.setStatus('current')
ipRoute6InfoPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoPrefLen.setStatus('current')
ipRoute6InfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoInterface.setStatus('current')
ipRoute6InfoNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoNextHop.setStatus('current')
ipRoute6InfoProto = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 10, 11))).clone(namedValues=NamedValues(("local", 2), ("static", 3), ("nbrdis", 4), ("ripng", 5), ("ospf", 6), ("intmgmt", 10), ("extmgmt", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoProto.setStatus('current')
gatewayIPv6InfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 13, 1), )
if mibBuilder.loadTexts: gatewayIPv6InfoTable.setStatus('current')
gatewayIPv6InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 13, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipGatewayIPv6InfoIndex"))
if mibBuilder.loadTexts: gatewayIPv6InfoEntry.setStatus('current')
ipGatewayIPv6InfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayIPv6InfoIndex.setStatus('current')
ipGatewayIPv6InfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 13, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayIPv6InfoAddr.setStatus('current')
ipGatewayIPv6InfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayIPv6InfoState.setStatus('current')
rip2GeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 1))
ripInfoState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoState.setStatus('current')
ripInfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoUpdatePeriod.setStatus('current')
rip2InfoIntfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2), )
if mibBuilder.loadTexts: rip2InfoIntfTable.setStatus('current')
ripInfoIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ripInfoIntfIndex"))
if mibBuilder.loadTexts: ripInfoIntfEntry.setStatus('current')
ripInfoIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfIndex.setStatus('current')
ripInfoIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2), ("ripVersionBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfVersion.setStatus('current')
ripInfoIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAddress.setStatus('current')
ripInfoIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfState.setStatus('current')
ripInfoIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfListen.setStatus('current')
ripInfoIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfTrigUpdate.setStatus('current')
ripInfoIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMcastUpdate.setStatus('current')
ripInfoIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfPoisonReverse.setStatus('current')
ripInfoIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfSupply.setStatus('current')
ripInfoIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMetric.setStatus('current')
ripInfoIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAuth.setStatus('current')
ripInfoIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfKey.setStatus('current')
ripInfoIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfDefault.setStatus('current')
bgpInfoPeerTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1), )
if mibBuilder.loadTexts: bgpInfoPeerTable.setStatus('current')
bgpInfoPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpInfoPeerIndex"))
if mibBuilder.loadTexts: bgpInfoPeerEntry.setStatus('current')
bgpInfoPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerIndex.setStatus('current')
bgpInfoPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerRemoteAddr.setStatus('current')
bgpInfoPeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerVersion.setStatus('current')
bgpInfoPeerTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerTtl.setStatus('current')
bgpInfoPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerRemoteAs.setStatus('current')
bgpInfoPeerRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerRouterId.setStatus('current')
bgpInfoPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("openSent", 4), ("openConfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerState.setStatus('current')
bgpInfoPeerLastState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("openSent", 4), ("openConfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPeerLastState.setStatus('current')
bgpInfoTotalReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoTotalReceivedPackets.setStatus('current')
bgpInfoTotalSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoTotalSentPackets.setStatus('current')
bgpInfoReceivedUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoReceivedUpdates.setStatus('current')
bgpInfoSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSentUpdates.setStatus('current')
bgpInfoKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoKeepalive.setStatus('current')
bgpInfoHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoHoldtime.setStatus('current')
bgpInfoMinAdvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoMinAdvTime.setStatus('current')
bgpInfoLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoLastErrorCode.setStatus('current')
bgpInfoLastErrorSubCode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoLastErrorSubCode.setStatus('current')
bgpInfoEstTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoEstTransitions.setStatus('current')
bgpInfoSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2), )
if mibBuilder.loadTexts: bgpInfoSummaryTable.setStatus('current')
bgpInfoSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpInfoSummaryIndex"))
if mibBuilder.loadTexts: bgpInfoSummaryEntry.setStatus('current')
bgpInfoSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSummaryIndex.setStatus('current')
bgpInfoSummaryRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSummaryRemoteAddr.setStatus('current')
bgpInfoSummaryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSummaryVersion.setStatus('current')
bgpInfoSummaryRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSummaryRemoteAs.setStatus('current')
bgpInfoSummaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("openSent", 4), ("openConfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSummaryState.setStatus('current')
bgpInfoSummaryTotalReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSummaryTotalReceivedPackets.setStatus('current')
bgpInfoSummaryTotalSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoSummaryTotalSentPackets.setStatus('current')
bgpInfoRtrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3), )
if mibBuilder.loadTexts: bgpInfoRtrTable.setStatus('current')
bgpInfoRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "bgpInfoIndex"))
if mibBuilder.loadTexts: bgpInfoRtrTableEntry.setStatus('current')
bgpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoIndex.setStatus('current')
bgpInfoNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoNetwork.setStatus('current')
bgpInfoNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoNextHop.setStatus('current')
bgpInfoMetr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoMetr.setStatus('current')
bgpInfoLcPrf = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoLcPrf.setStatus('current')
bgpInfoWght = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoWght.setStatus('current')
bgpInfoPath = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoPath.setStatus('current')
bgpInfoOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoOrigin.setStatus('current')
bgpInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 11, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpInfoMask.setStatus('current')
vrrpOperVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 4, 1, 1), )
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setStatus('current')
vrrpOperVirtRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 4, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vrrpOperVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setStatus('current')
vrrpOperVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setStatus('current')
vrrpOperVirtRtrBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setStatus('current')
vrrpOperVirtRtrGroupBackup = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setStatus('current')
class IPsecKeyString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1024a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1024)

ikeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1))
ikeCurCfgProposal = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 1))
ikeCurCfgPropCipher = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("triple-des", 2), ("aes-cbc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPropCipher.setStatus('current')
ikeCurCfgPropAuth = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sha1", 1), ("md5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPropAuth.setStatus('current')
ikeCurCfgPropGroup = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dhGroup1", 1), ("dhGroup2", 2), ("dhGroup5", 3), ("dhGroup14", 4), ("dhGroup24", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPropGroup.setStatus('current')
ikeNewCfgProposal = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 2))
ikeNewCfgPropCipher = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("triple-des", 2), ("aes-cbc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgPropCipher.setStatus('current')
ikeNewCfgPropAuth = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sha1", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgPropAuth.setStatus('current')
ikeNewCfgPropGroup = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dhGroup1", 1), ("dhGroup2", 2), ("dhGroup5", 3), ("dhGroup14", 4), ("dhGroup24", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgPropGroup.setStatus('current')
ikeCurCfgPsk = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3))
ikeCurCfgPskLocalKey = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3, 1), IPsecKeyString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPskLocalKey.setStatus('current')
ikeCurCfgPskRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3, 2), )
if mibBuilder.loadTexts: ikeCurCfgPskRemoteTable.setStatus('current')
ikeCurCfgPskRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ikeCurCfgPskRemoteIndex"))
if mibBuilder.loadTexts: ikeCurCfgPskRemoteEntry.setStatus('current')
ikeCurCfgPskRemoteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPskRemoteIndex.setStatus('current')
ikeCurCfgPskRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPskRemoteAddr.setStatus('current')
ikeCurCfgPskRemoteKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3, 2, 1, 3), IPsecKeyString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPskRemoteKey.setStatus('current')
ikeCurCfgPskRemoteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgPskRemoteDelete.setStatus('current')
ikeNewCfgPsk = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4))
ikeNewCfgPskLocalKey = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4, 1), IPsecKeyString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgPskLocalKey.setStatus('current')
ikeNewCfgPskRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4, 2), )
if mibBuilder.loadTexts: ikeNewCfgPskRemoteTable.setStatus('current')
ikeNewCfgPskRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ikeNewCfgPskRemoteIndex"))
if mibBuilder.loadTexts: ikeNewCfgPskRemoteEntry.setStatus('current')
ikeNewCfgPskRemoteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeNewCfgPskRemoteIndex.setStatus('current')
ikeNewCfgPskRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ikeNewCfgPskRemoteAddr.setStatus('current')
ikeNewCfgPskRemoteKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4, 2, 1, 3), IPsecKeyString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ikeNewCfgPskRemoteKey.setStatus('current')
ikeNewCfgPskRemoteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgPskRemoteDelete.setStatus('current')
ikeCurCfgIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 5))
ikeCurCfgIdType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipv6-addr", 0), ("fqdn", 1), ("email", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgIdType.setStatus('current')
ikeCurCfgIdData = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgIdData.setStatus('current')
ikeNewCfgIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 6))
ikeNewCfgIdType = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipv6-addr", 0), ("fqdn", 1), ("email", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgIdType.setStatus('current')
ikeNewCfgIdData = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgIdData.setStatus('current')
ikeCurCfgTxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgTxTimeout.setStatus('current')
ikeNewCfgTxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgTxTimeout.setStatus('current')
ikeCurCfgCookie = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeCurCfgCookie.setStatus('current')
ikeNewCfgCookie = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeNewCfgCookie.setStatus('current')
ipsecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2))
ipsecCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgState.setStatus('current')
ipsecNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecNewCfgState.setStatus('current')
ipsecCurCfgTxformTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3), )
if mibBuilder.loadTexts: ipsecCurCfgTxformTable.setStatus('current')
ipsecCurCfgTxformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecCurCfgTxformIndex"))
if mibBuilder.loadTexts: ipsecCurCfgTxformEntry.setStatus('current')
ipsecCurCfgTxformIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgTxformIndex.setStatus('current')
ipsecCurCfgTxformAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("ah-sha1", 1), ("ah-md5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgTxformAuth.setStatus('current')
ipsecCurCfgTxformCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("esp-null", 0), ("esp-des", 1), ("esp-3des", 2), ("esp-aes-cbc", 3), ("unspecified", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgTxformCipher.setStatus('current')
ipsecCurCfgTxformIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("esp-sha1", 1), ("esp-md5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgTxformIntegrity.setStatus('current')
ipsecCurCfgTxformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transport", 1), ("tunnel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgTxformMode.setStatus('current')
ipsecCurCfgTxformDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgTxformDelete.setStatus('current')
ipsecNewCfgTxformTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4), )
if mibBuilder.loadTexts: ipsecNewCfgTxformTable.setStatus('current')
ipsecNewCfgTxformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecNewCfgTxformIndex"))
if mibBuilder.loadTexts: ipsecNewCfgTxformEntry.setStatus('current')
ipsecNewCfgTxformIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecNewCfgTxformIndex.setStatus('current')
ipsecNewCfgTxformAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("ah-sha1", 1), ("ah-md5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgTxformAuth.setStatus('current')
ipsecNewCfgTxformCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("esp-null", 0), ("esp-des", 1), ("esp-3des", 2), ("esp-aes-cbc", 3), ("unspecified", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgTxformCipher.setStatus('current')
ipsecNewCfgTxformIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("esp-sha1", 1), ("esp-md5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgTxformIntegrity.setStatus('current')
ipsecNewCfgTxformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transport", 1), ("tunnel", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgTxformMode.setStatus('current')
ipsecNewCfgTxformDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecNewCfgTxformDelete.setStatus('current')
ipsecCurCfgSelectorTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5), )
if mibBuilder.loadTexts: ipsecCurCfgSelectorTable.setStatus('current')
ipsecCurCfgSelectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecCurCfgSelectorIndex"))
if mibBuilder.loadTexts: ipsecCurCfgSelectorEntry.setStatus('current')
ipsecCurCfgSelectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorIndex.setStatus('current')
ipsecCurCfgSelectorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unspecified", 0), ("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorAction.setStatus('current')
ipsecCurCfgSelectorProto = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 0), ("tcp", 1), ("icmp", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorProto.setStatus('current')
ipsecCurCfgSelectorIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorIcmpType.setStatus('current')
ipsecCurCfgSelectorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorDst.setStatus('current')
ipsecCurCfgSelectorDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorDstPrefix.setStatus('current')
ipsecCurCfgSelectorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorSrc.setStatus('current')
ipsecCurCfgSelectorDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgSelectorDelete.setStatus('current')
ipsecNewCfgSelectorTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6), )
if mibBuilder.loadTexts: ipsecNewCfgSelectorTable.setStatus('current')
ipsecNewCfgSelectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecNewCfgSelectorIndex"))
if mibBuilder.loadTexts: ipsecNewCfgSelectorEntry.setStatus('current')
ipsecNewCfgSelectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecNewCfgSelectorIndex.setStatus('current')
ipsecNewCfgSelectorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unspecified", 0), ("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgSelectorAction.setStatus('current')
ipsecNewCfgSelectorProto = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 0), ("tcp", 1), ("icmp", 2), ("any", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgSelectorProto.setStatus('current')
ipsecNewCfgSelectorIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgSelectorIcmpType.setStatus('current')
ipsecNewCfgSelectorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgSelectorDst.setStatus('current')
ipsecNewCfgSelectorDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgSelectorDstPrefix.setStatus('current')
ipsecNewCfgSelectorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgSelectorSrc.setStatus('current')
ipsecNewCfgSelectorDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecNewCfgSelectorDelete.setStatus('current')
ipsecCurCfgDynamicPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7), )
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyTable.setStatus('current')
ipsecCurCfgDynamicPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecCurCfgDynamicPolicyIndex"))
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyEntry.setStatus('current')
ipsecCurCfgDynamicPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyIndex.setStatus('current')
ipsecCurCfgDynamicPolicyPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyPeer.setStatus('current')
ipsecCurCfgDynamicPolicySelector = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicySelector.setStatus('current')
ipsecCurCfgDynamicPolicyTxform = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyTxform.setStatus('current')
ipsecCurCfgDynamicPolicyLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(120, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyLifetime.setStatus('current')
ipsecCurCfgDynamicPolicyPfs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyPfs.setStatus('current')
ipsecCurCfgDynamicPolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgDynamicPolicyDelete.setStatus('current')
ipsecNewCfgDynamicPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8), )
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyTable.setStatus('current')
ipsecNewCfgDynamicPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecNewCfgDynamicPolicyIndex"))
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyEntry.setStatus('current')
ipsecNewCfgDynamicPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyIndex.setStatus('current')
ipsecNewCfgDynamicPolicyPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyPeer.setStatus('current')
ipsecNewCfgDynamicPolicySelector = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicySelector.setStatus('current')
ipsecNewCfgDynamicPolicyTxform = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyTxform.setStatus('current')
ipsecNewCfgDynamicPolicyLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(120, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyLifetime.setStatus('current')
ipsecNewCfgDynamicPolicyPfs = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyPfs.setStatus('current')
ipsecNewCfgDynamicPolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecNewCfgDynamicPolicyDelete.setStatus('current')
ipsecCurCfgManualPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9), )
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyTable.setStatus('current')
ipsecCurCfgManualPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecCurCfgManualPolicyIndex"))
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyEntry.setStatus('current')
ipsecCurCfgManualPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyIndex.setStatus('current')
ipsecCurCfgManualPolicyPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyPeer.setStatus('current')
ipsecCurCfgManualPolicySelector = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicySelector.setStatus('current')
ipsecCurCfgManualPolicyTxform = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyTxform.setStatus('current')
ipsecCurCfgManualPolicyInAhKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyInAhKey.setStatus('current')
ipsecCurCfgManualPolicyInAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyInAhSpi.setStatus('current')
ipsecCurCfgManualPolicyOutAhKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyOutAhKey.setStatus('current')
ipsecCurCfgManualPolicyOutAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyOutAhSpi.setStatus('current')
ipsecCurCfgManualPolicyInEspEncKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyInEspEncKey.setStatus('current')
ipsecCurCfgManualPolicyInEspAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyInEspAuthKey.setStatus('current')
ipsecCurCfgManualPolicyInEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyInEspSpi.setStatus('current')
ipsecCurCfgManualPolicyOutEspEncKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyOutEspEncKey.setStatus('current')
ipsecCurCfgManualPolicyOutEspAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyOutEspAuthKey.setStatus('current')
ipsecCurCfgManualPolicyOutEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyOutEspSpi.setStatus('current')
ipsecCurCfgManualPolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgManualPolicyDelete.setStatus('current')
ipsecNewCfgManualPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10), )
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyTable.setStatus('current')
ipsecNewCfgManualPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecNewCfgManualPolicyIndex"))
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyEntry.setStatus('current')
ipsecNewCfgManualPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyIndex.setStatus('current')
ipsecNewCfgManualPolicyPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyPeer.setStatus('current')
ipsecNewCfgManualPolicySelector = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicySelector.setStatus('current')
ipsecNewCfgManualPolicyTxform = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyTxform.setStatus('current')
ipsecNewCfgManualPolicyInAhKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyInAhKey.setStatus('current')
ipsecNewCfgManualPolicyInAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyInAhSpi.setStatus('current')
ipsecNewCfgManualPolicyOutAhKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyOutAhKey.setStatus('current')
ipsecNewCfgManualPolicyOutAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyOutAhSpi.setStatus('current')
ipsecNewCfgManualPolicyInEspEncKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyInEspEncKey.setStatus('current')
ipsecNewCfgManualPolicyInEspAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyInEspAuthKey.setStatus('current')
ipsecNewCfgManualPolicyInEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyInEspSpi.setStatus('current')
ipsecNewCfgManualPolicyOutEspEncKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyOutEspEncKey.setStatus('current')
ipsecNewCfgManualPolicyOutEspAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyOutEspAuthKey.setStatus('current')
ipsecNewCfgManualPolicyOutEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyOutEspSpi.setStatus('current')
ipsecNewCfgManualPolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecNewCfgManualPolicyDelete.setStatus('current')
ipsecCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 11), )
if mibBuilder.loadTexts: ipsecCurCfgIfTable.setStatus('current')
ipsecCurCfgIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 11, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecCurCfgIfIndex"))
if mibBuilder.loadTexts: ipsecCurCfgIfEntry.setStatus('current')
ipsecCurCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgIfIndex.setStatus('current')
ipsecCurCfgIfDynamicPolicyBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgIfDynamicPolicyBmap.setStatus('current')
ipsecCurCfgIfManualPolicyBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgIfManualPolicyBmap.setStatus('current')
ipsecCurCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCurCfgIfDelete.setStatus('current')
ipsecNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12), )
if mibBuilder.loadTexts: ipsecNewCfgIfTable.setStatus('current')
ipsecNewCfgIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecNewCfgIfIndex"))
if mibBuilder.loadTexts: ipsecNewCfgIfEntry.setStatus('current')
ipsecNewCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecNewCfgIfIndex.setStatus('current')
ipsecNewCfgIfDynamicPolicyBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecNewCfgIfDynamicPolicyBmap.setStatus('current')
ipsecNewCfgIfAddDynamicPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgIfAddDynamicPolicy.setStatus('current')
ipsecNewCfgIfDelDynamicPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgIfDelDynamicPolicy.setStatus('current')
ipsecNewCfgIfManualPolicyBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecNewCfgIfManualPolicyBmap.setStatus('current')
ipsecNewCfgIfAddManualPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgIfAddManualPolicy.setStatus('current')
ipsecNewCfgIfDelManualPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecNewCfgIfDelManualPolicy.setStatus('current')
ipsecNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 1, 32, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecNewCfgIfDelete.setStatus('current')
ipsecSaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1), )
if mibBuilder.loadTexts: ipsecSaStatsTable.setStatus('current')
ipsecSaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecSaStatsIndex"))
if mibBuilder.loadTexts: ipsecSaStatsEntry.setStatus('current')
ipsecSaStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatsIndex.setStatus('current')
ipsecSaStatsSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatsSpi.setStatus('current')
ipsecSaStatsProto = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("ah", 1), ("esp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatsProto.setStatus('current')
ipsecSaStatsDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatsDstAddr.setStatus('current')
ipsecSaStatsUsageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatsUsageTime.setStatus('current')
ipsecSaStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatsBytes.setStatus('current')
ipsecSaStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 2, 24, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatsPkts.setStatus('current')
ipsecSaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1), )
if mibBuilder.loadTexts: ipsecSaInfoTable.setStatus('current')
ipsecSaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecSaInfoIndex"))
if mibBuilder.loadTexts: ipsecSaInfoEntry.setStatus('current')
ipsecSaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoIndex.setStatus('current')
ipsecSaInfoSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoSpi.setStatus('current')
ipsecSaInfoProto = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 51, 50))).clone(namedValues=NamedValues(("any", 0), ("ah", 51), ("esp", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoProto.setStatus('current')
ipsecSaInfoDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoDstAddr.setStatus('current')
ipsecSaInfoSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoSrcAddr.setStatus('current')
ipsecSaInfoFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoFlags.setStatus('current')
ipsecSaInfoUlp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoUlp.setStatus('current')
ipsecSaInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("transport", 1), ("tunnel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoMode.setStatus('current')
ipsecSaInfoAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("md5", 1), ("sha1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoAuthAlg.setStatus('current')
ipsecSaInfoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoAuthKey.setStatus('current')
ipsecSaInfoEncrAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 0), ("des", 1), ("triple-des", 2), ("blowfish", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoEncrAlg.setStatus('current')
ipsecSaInfoEncrKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaInfoEncrKey.setStatus('current')
ipsecSpdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2), )
if mibBuilder.loadTexts: ipsecSpdInfoTable.setStatus('current')
ipsecSpdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecSpdInfoIndex"))
if mibBuilder.loadTexts: ipsecSpdInfoEntry.setStatus('current')
ipsecSpdInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoIndex.setStatus('current')
ipsecSpdInfoFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoFlags.setStatus('current')
ipsecSpdInfoULP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoULP.setStatus('current')
ipsecSpdInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("apply", 2), ("permit", 3), ("bypass", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoAction.setStatus('current')
ipsecSpdInfoDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoDstAddr.setStatus('current')
ipsecSpdInfoSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoSrcAddr.setStatus('current')
ipsecSpdInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("transport", 1), ("tunnel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoMode.setStatus('current')
ipsecSpdInfoSaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoSaSize.setStatus('current')
ipsecSpdInfoSaTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 3), )
if mibBuilder.loadTexts: ipsecSpdInfoSaTable.setStatus('current')
ipsecSpdInfoSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecSpdInfoIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ipsecSpdInfoSaIndex"))
if mibBuilder.loadTexts: ipsecSpdInfoSaEntry.setStatus('current')
ipsecSpdInfoSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoSaIndex.setStatus('current')
ipsecSpdInfoSaSecuProto = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ah", 0), ("esp", 1), ("esp-auth", 2), ("esp-null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoSaSecuProto.setStatus('current')
ipsecSpdInfoSaAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("md5", 1), ("sha1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoSaAuthAlg.setStatus('current')
ipsecSpdInfoSaEncrAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 0), ("des", 1), ("triple-des", 2), ("blowfish", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoSaEncrAlg.setStatus('current')
ipsecSpdInfoSaEncrKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 3, 3, 23, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpdInfoSaEncrKeyLen.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7))
swTrapDisplayString = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrapDisplayString.setStatus('current')
ibmSNMPv2Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7, 0))
swPrimaryPowerSupplyFailureNotify = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7, 0, 1)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swPrimaryPowerSupplyFailureNotify.setStatus('current')
swPrimaryPowerSupplyFixedNotify = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7, 0, 97)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swPrimaryPowerSupplyFixedNotify.setStatus('current')
swPrimaryPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,1)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swDefGwUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,2)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwIndex"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swDefGwDown = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,3)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwIndex"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swDefGwInService = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,4)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwIndex"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swDefGwNotInService = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,5)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwIndex"), ("IBM-GbTOR-10G-L2L3-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVrrpNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,16)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgVirtRtrIndx"), ("IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgVirtRtrAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVrrpNewBackup = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,17)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgVirtRtrIndx"), ("IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgVirtRtrAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVrrpAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,18)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgIfIndx"), ("IBM-GbTOR-10G-L2L3-MIB", "vrrpCurCfgIfPasswd"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,19)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swTempExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,22)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,24)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swValidLogin = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,25)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swApplyComplete = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,27)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swSaveComplete = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,28)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swFwDownloadSucess = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,29)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swFwDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,30)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swFanFailureFixed = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,33)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swStgNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,42)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "stgCurCfgIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swCistNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,43)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swStgTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,44)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("IBM-GbTOR-10G-L2L3-MIB", "stgCurCfgIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swCistTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,45)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swHotlinksMasterUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,46)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swHotlinksMasterDn = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,47)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swHotlinksBackupUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,48)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swHotlinksBackupDn = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,49)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swHotlinksNone = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,50)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swNTPSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,61)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swNTPUpdateClock = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,62)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swValidLogout = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,63)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swECMPGatewayUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,65)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swECMPGatewayDown = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,66)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swTeamingCtrlUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,67)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swTeamingCtrlDown = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,68)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swTeamingCtrlDownTearDownBlked = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,69)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swTeamingCtrlError = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,70)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swTempReturnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,31)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swLACPPortBlocked = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,71)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swLACPPortUnblocked = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,72)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVMGroupVMotion = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,77)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVMGroupVMOnline = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,78)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVMGroupVMVlanChange = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,79)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swPrimaryPowerSupplyFixed = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,97)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swLFDPortErrdisabled = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,103)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVlagInstanceUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,106)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVlagInstanceRemoteUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,107)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVlagInstanceLocalUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,108)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVlagInstanceDown = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,109)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVlagIslUp = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,110)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swVlagIslDown = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,111)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
sw8021x = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,158)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swDefAdminDisable = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,162)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swAcntStrngPswdNotMet = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,163)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swAcntLocked = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,164)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
swAcntUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 7) + (0,165)).setObjects(("IBM-GbTOR-10G-L2L3-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8))
qosConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1))
qos8021p = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1))
qosdscp = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2))
qosCurCfgPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 1), )
if mibBuilder.loadTexts: qosCurCfgPortPriorityTable.setStatus('current')
qosCurCfgPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosCurCfgPortIndex"))
if mibBuilder.loadTexts: qosCurCfgPortPriorityEntry.setStatus('current')
qosCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPortIndex.setStatus('current')
qosCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPortPriority.setStatus('current')
qosNewCfgPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 2), )
if mibBuilder.loadTexts: qosNewCfgPortPriorityTable.setStatus('current')
qosNewCfgPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosNewCfgPortIndex"))
if mibBuilder.loadTexts: qosNewCfgPortPriorityEntry.setStatus('current')
qosNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgPortIndex.setStatus('current')
qosNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgPortPriority.setStatus('current')
qosCurCfgPriorityCoSTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 3), )
if mibBuilder.loadTexts: qosCurCfgPriorityCoSTable.setStatus('current')
qosCurCfgPriorityCoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosCurCfgPriorityIndex"))
if mibBuilder.loadTexts: qosCurCfgPriorityCoSEntry.setStatus('current')
qosCurCfgPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPriorityIndex.setStatus('current')
qosCurCfgPriorityCoSq = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPriorityCoSq.setStatus('current')
qosNewCfgPriorityCoSTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 4), )
if mibBuilder.loadTexts: qosNewCfgPriorityCoSTable.setStatus('current')
qosNewCfgPriorityCoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosNewCfgPriorityIndex"))
if mibBuilder.loadTexts: qosNewCfgPriorityCoSEntry.setStatus('current')
qosNewCfgPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgPriorityIndex.setStatus('current')
qosNewCfgPriorityCoSq = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgPriorityCoSq.setStatus('current')
qosCurCfgCosWeightTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 5), )
if mibBuilder.loadTexts: qosCurCfgCosWeightTable.setStatus('current')
qosCurCfgCosWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosCurCfgCosIndex"))
if mibBuilder.loadTexts: qosCurCfgCosWeightEntry.setStatus('current')
qosCurCfgCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgCosIndex.setStatus('current')
qosCurCfgCosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgCosWeight.setStatus('current')
qosNewCfgCosWeightTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 6), )
if mibBuilder.loadTexts: qosNewCfgCosWeightTable.setStatus('current')
qosNewCfgCosWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosNewCfgCosIndex"))
if mibBuilder.loadTexts: qosNewCfgCosWeightEntry.setStatus('current')
qosNewCfgCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgCosIndex.setStatus('current')
qosNewCfgCosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgCosWeight.setStatus('current')
qosDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("defaultCosNum", 1), ("defaultWeight", 2), ("defaultPriority", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDefaultCfg.setStatus('current')
qosCurCfgDscpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 1), )
if mibBuilder.loadTexts: qosCurCfgDscpTable.setStatus('current')
qosCurCfgDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosCurCfgDscpIndex"))
if mibBuilder.loadTexts: qosCurCfgDscpEntry.setStatus('current')
qosCurCfgDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgDscpIndex.setStatus('current')
qosCurCfgMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgMapDscp.setStatus('current')
qosCurCfgMap8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgMap8021p.setStatus('current')
qosNewCfgDscpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 2), )
if mibBuilder.loadTexts: qosNewCfgDscpTable.setStatus('current')
qosNewCfgDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "qosNewCfgDscpIndex"))
if mibBuilder.loadTexts: qosNewCfgDscpEntry.setStatus('current')
qosNewCfgDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgDscpIndex.setStatus('current')
qosNewCfgMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgMapDscp.setStatus('current')
qosNewCfgMap8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgMap8021p.setStatus('current')
qosCurCfgDscpState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgDscpState.setStatus('current')
qosNewCfgDscpState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 8, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgDscpState.setStatus('current')
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9))
acConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1))
acList = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1))
aclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4))
vmapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3))
acl6List = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5))
aclLog = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 6))
aclCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1), )
if mibBuilder.loadTexts: aclCurCfgTable.setStatus('current')
aclCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclCurCfgIndex"))
if mibBuilder.loadTexts: aclCurCfgEntry.setStatus('current')
aclCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgIndex.setStatus('current')
aclCurCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3), ("changevlan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgFilterAction.setStatus('current')
aclCurCfgFilterActionSetPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("prio0", 1), ("prio1", 2), ("prio2", 3), ("prio3", 4), ("prio4", 5), ("prio5", 6), ("prio6", 7), ("prio7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgFilterActionSetPrio.setStatus('current')
aclCurCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcMACAddress.setStatus('current')
aclCurCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcMACMask.setStatus('current')
aclCurCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstMACAddress.setStatus('current')
aclCurCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstMACMask.setStatus('current')
aclCurCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthernetTypeName.setStatus('current')
aclCurCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthernetTypeValue.setStatus('current')
aclCurCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgVLanId.setStatus('current')
aclCurCfgVLanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgVLanMask.setStatus('current')
aclCurCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfg8021pPriority.setStatus('current')
aclCurCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTypeOfService.setStatus('current')
aclCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgProtocol.setStatus('current')
aclCurCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcIPAddress.setStatus('current')
aclCurCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcIPMask.setStatus('current')
aclCurCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstIPAddress.setStatus('current')
aclCurCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstIPMask.setStatus('current')
aclCurCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcPort.setStatus('current')
aclCurCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcPortMask.setStatus('current')
aclCurCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstPort.setStatus('current')
aclCurCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstPortMask.setStatus('current')
aclCurCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 28), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTCPFlags.setStatus('current')
aclCurCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 39), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTCPFlagsMask.setStatus('current')
aclCurCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgStatistics.setStatus('current')
aclCurCfgMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfigured", 0), ("outdrop", 1), ("outpass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgMeterAction.setStatus('current')
aclCurCfgMeterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgMeterEnable.setStatus('current')
aclCurCfgKbitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgKbitsSec.setStatus('current')
aclCurCfgKbitsBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("kbits32", 32), ("kbits64", 64), ("kbits128", 128), ("kbits256", 256), ("kbits512", 512), ("kbits1024", 1024), ("kbits2048", 2048), ("kbits4096", 4096)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgKbitsBurst.setStatus('current')
aclCurCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgUser.setStatus('current')
aclCurCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgInprofDscp.setStatus('current')
aclCurCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgInprofDscpEnable.setStatus('current')
aclCurCfgOutprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgOutprofDscpEnable.setStatus('current')
aclCurCfgMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgMirrorPort.setStatus('current')
aclCurCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgLog.setStatus('current')
aclCurCfgFilterActionChangeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgFilterActionChangeVlan.setStatus('current')
aclNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2), )
if mibBuilder.loadTexts: aclNewCfgTable.setStatus('current')
aclNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclNewCfgIndex"))
if mibBuilder.loadTexts: aclNewCfgEntry.setStatus('current')
aclNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgIndex.setStatus('current')
aclNewCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3), ("changevlan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgFilterAction.setStatus('current')
aclNewCfgFilterActionSetPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("prio0", 1), ("prio1", 2), ("prio2", 3), ("prio3", 4), ("prio4", 5), ("prio5", 6), ("prio6", 7), ("prio7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgFilterActionSetPrio.setStatus('current')
aclNewCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcMACAddress.setStatus('current')
aclNewCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcMACMask.setStatus('current')
aclNewCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstMACAddress.setStatus('current')
aclNewCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstMACMask.setStatus('current')
aclNewCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetTypeName.setStatus('current')
aclNewCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetTypeValue.setStatus('current')
aclNewCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgVLanId.setStatus('current')
aclNewCfgVLanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgVLanMask.setStatus('current')
aclNewCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfg8021pPriority.setStatus('current')
aclNewCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTypeOfService.setStatus('current')
aclNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgProtocol.setStatus('current')
aclNewCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcIPAddress.setStatus('current')
aclNewCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcIPMask.setStatus('current')
aclNewCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstIPAddress.setStatus('current')
aclNewCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstIPMask.setStatus('current')
aclNewCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcPort.setStatus('current')
aclNewCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcPortMask.setStatus('current')
aclNewCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstPort.setStatus('current')
aclNewCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstPortMask.setStatus('current')
aclNewCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 28), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTCPFlags.setStatus('current')
aclNewCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 39), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTCPFlagsMask.setStatus('current')
aclNewCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgStatistics.setStatus('current')
aclNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDelete.setStatus('current')
aclNewCfgMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfigured", 0), ("outdrop", 1), ("outpass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgMeterAction.setStatus('current')
aclNewCfgMeterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgMeterEnable.setStatus('current')
aclNewCfgMbitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(128, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgMbitsSec.setStatus('current')
aclNewCfgKbitsBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("kbits32", 32), ("kbits64", 64), ("kbits128", 128), ("kbits256", 256), ("kbits512", 512), ("kbits1024", 1024), ("kbits2048", 2048), ("kbits4096", 4096)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgKbitsBurst.setStatus('current')
aclNewCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgUser.setStatus('current')
aclNewCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgInprofDscp.setStatus('current')
aclNewCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgInprofDscpEnable.setStatus('current')
aclNewCfgOutprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgOutprofDscpEnable.setStatus('current')
aclNewCfgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgReset.setStatus('current')
aclNewCfgEthernetReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetReset.setStatus('current')
aclNewCfgIpv4Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgIpv4Reset.setStatus('current')
aclNewCfgTcpudpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTcpudpReset.setStatus('current')
aclNewCfgMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgMirrorPort.setStatus('current')
aclNewCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgLog.setStatus('current')
aclNewCfgFilterActionChangeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 2, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgFilterActionChangeVlan.setStatus('current')
aclCurCfgRemarkOutProfDscpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 3), )
if mibBuilder.loadTexts: aclCurCfgRemarkOutProfDscpTable.setStatus('current')
aclCurCfgRemarkOutProfDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclCurCfgRemarkOutProfDscpIndex"))
if mibBuilder.loadTexts: aclCurCfgRemarkOutProfDscpEntry.setStatus('current')
aclCurCfgRemarkOutProfDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgRemarkOutProfDscpIndex.setStatus('current')
aclCurCfgRemarkOutProfDscpMkdnDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgRemarkOutProfDscpMkdnDscp.setStatus('current')
aclNewCfgRemarkOutProfDscpTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 4), )
if mibBuilder.loadTexts: aclNewCfgRemarkOutProfDscpTable.setStatus('current')
aclNewCfgRemarkOutProfDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclNewCfgRemarkOutProfDscpIndex"))
if mibBuilder.loadTexts: aclNewCfgRemarkOutProfDscpEntry.setStatus('current')
aclNewCfgRemarkOutProfDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgRemarkOutProfDscpIndex.setStatus('current')
aclNewCfgRemarkOutProfDscpMkdnDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgRemarkOutProfDscpMkdnDscp.setStatus('current')
acl6CurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1), )
if mibBuilder.loadTexts: acl6CurCfgTable.setStatus('current')
acl6CurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "acl6CurCfgIndex"))
if mibBuilder.loadTexts: acl6CurCfgEntry.setStatus('current')
acl6CurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgIndex.setStatus('current')
acl6CurCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3), ("changevlan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgFilterAction.setStatus('current')
acl6CurCfgSrcIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgSrcIPv6Address.setStatus('current')
acl6CurCfgSrcIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgSrcIPv6PrefixLen.setStatus('current')
acl6CurCfgDstIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgDstIPv6Address.setStatus('current')
acl6CurCfgDstIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgDstIPv6PrefixLen.setStatus('current')
acl6CurCfgIPv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgIPv6FlowLabel.setStatus('current')
acl6CurCfgIPv6TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgIPv6TrafficClass.setStatus('current')
acl6CurCfgIPv6NextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgIPv6NextHeader.setStatus('current')
acl6CurCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgSrcPort.setStatus('current')
acl6CurCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgSrcPortMask.setStatus('current')
acl6CurCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgDstPort.setStatus('current')
acl6CurCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgDstPortMask.setStatus('current')
acl6CurCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 16), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgTCPFlags.setStatus('current')
acl6CurCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 17), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgTCPFlagsMask.setStatus('current')
acl6CurCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgStatistics.setStatus('current')
acl6CurCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgUser.setStatus('current')
acl6CurCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgInprofDscp.setStatus('current')
acl6CurCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgInprofDscpEnable.setStatus('current')
acl6CurCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgLog.setStatus('current')
acl6CurCfgFilterActionChangeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6CurCfgFilterActionChangeVlan.setStatus('current')
acl6NewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2), )
if mibBuilder.loadTexts: acl6NewCfgTable.setStatus('current')
acl6NewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "acl6NewCfgIndex"))
if mibBuilder.loadTexts: acl6NewCfgEntry.setStatus('current')
acl6NewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6NewCfgIndex.setStatus('current')
acl6NewCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3), ("changevlan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgFilterAction.setStatus('current')
acl6NewCfgSrcIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgSrcIPv6Address.setStatus('current')
acl6NewCfgSrcIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgSrcIPv6PrefixLen.setStatus('current')
acl6NewCfgDstIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgDstIPv6Address.setStatus('current')
acl6NewCfgDstIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgDstIPv6PrefixLen.setStatus('current')
acl6NewCfgIPv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgIPv6FlowLabel.setStatus('current')
acl6NewCfgIPv6TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgIPv6TrafficClass.setStatus('current')
acl6NewCfgIPv6NextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgIPv6NextHeader.setStatus('current')
acl6NewCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgSrcPort.setStatus('current')
acl6NewCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgSrcPortMask.setStatus('current')
acl6NewCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgDstPort.setStatus('current')
acl6NewCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgDstPortMask.setStatus('current')
acl6NewCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 16), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgTCPFlags.setStatus('current')
acl6NewCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 17), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgTCPFlagsMask.setStatus('current')
acl6NewCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgStatistics.setStatus('current')
acl6NewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgDelete.setStatus('current')
acl6NewCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgUser.setStatus('current')
acl6NewCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgInprofDscp.setStatus('current')
acl6NewCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgInprofDscpEnable.setStatus('current')
acl6NewCfgIPv6Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgIPv6Reset.setStatus('current')
acl6NewCfgTcpudpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgTcpudpReset.setStatus('current')
acl6NewCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgLog.setStatus('current')
acl6NewCfgFilterActionChangeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acl6NewCfgFilterActionChangeVlan.setStatus('current')
aclLogCurInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclLogCurInterval.setStatus('current')
aclLogNewInterval = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclLogNewInterval.setStatus('current')
aclLogCurRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclLogCurRateLimit.setStatus('current')
aclLogNewRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclLogNewRateLimit.setStatus('current')
aclCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 1), )
if mibBuilder.loadTexts: aclCurCfgPortTable.setStatus('current')
aclCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclCurCfgPortIndex"))
if mibBuilder.loadTexts: aclCurCfgPortTableEntry.setStatus('current')
aclCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortIndex.setStatus('current')
aclCurCfgPortAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortAclBmap.setStatus('current')
aclCurCfgPortAcl6Bmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortAcl6Bmap.setStatus('current')
aclNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2), )
if mibBuilder.loadTexts: aclNewCfgPortTable.setStatus('current')
aclNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "aclNewCfgPortIndex"))
if mibBuilder.loadTexts: aclNewCfgPortTableEntry.setStatus('current')
aclNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortIndex.setStatus('current')
aclNewCfgPortAddAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortAddAcl.setStatus('current')
aclNewCfgPortRemoveAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortRemoveAcl.setStatus('current')
aclNewCfgPortAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortAclBmap.setStatus('current')
aclNewCfgPortAddAcl6 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortAddAcl6.setStatus('current')
aclNewCfgPortRemoveAcl6 = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortRemoveAcl6.setStatus('current')
aclNewCfgPortAcl6Bmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 1, 4, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortAcl6Bmap.setStatus('current')
vmapList = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1))
vmapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2))
vmapVlanCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1))
vmapGroupCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2))
vmapVlanCfgNonServerPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1))
vmapVlanCfgServerPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2))
vmapVlanCfgAllPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3))
vmapGroupCfgNonServerPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1))
vmapGroupCfgServerPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2))
vmapGroupCfgAllPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3))
vmapCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1), )
if mibBuilder.loadTexts: vmapCurCfgTable.setStatus('current')
vmapCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapCurCfgIndex"))
if mibBuilder.loadTexts: vmapCurCfgEntry.setStatus('current')
vmapCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgIndex.setStatus('current')
vmapCurCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3), ("changevlan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgFilterAction.setStatus('current')
vmapCurCfgFilterActionSetPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("prio0", 1), ("prio1", 2), ("prio2", 3), ("prio3", 4), ("prio4", 5), ("prio5", 6), ("prio6", 7), ("prio7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgFilterActionSetPrio.setStatus('current')
vmapCurCfgEthFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ethernet2", 1), ("snap", 2), ("llc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgEthFmt.setStatus('current')
vmapCurCfgTagFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("any", 2), ("untagged", 3), ("tagged", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgTagFmt.setStatus('current')
vmapCurCfgIPFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ipv4", 2), ("ipv6", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgIPFmt.setStatus('current')
vmapCurCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgSrcMACAddress.setStatus('current')
vmapCurCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgSrcMACMask.setStatus('current')
vmapCurCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgDstMACAddress.setStatus('current')
vmapCurCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgDstMACMask.setStatus('current')
vmapCurCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgEthernetTypeName.setStatus('current')
vmapCurCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgEthernetTypeValue.setStatus('current')
vmapCurCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfg8021pPriority.setStatus('current')
vmapCurCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgTypeOfService.setStatus('current')
vmapCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgProtocol.setStatus('current')
vmapCurCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgSrcIPAddress.setStatus('current')
vmapCurCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgSrcIPMask.setStatus('current')
vmapCurCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgDstIPAddress.setStatus('current')
vmapCurCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgDstIPMask.setStatus('current')
vmapCurCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgSrcPort.setStatus('current')
vmapCurCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgSrcPortMask.setStatus('current')
vmapCurCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgDstPort.setStatus('current')
vmapCurCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgDstPortMask.setStatus('current')
vmapCurCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 24), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgTCPFlags.setStatus('current')
vmapCurCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 25), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgTCPFlagsMask.setStatus('current')
vmapCurCfgEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgEgressPorts.setStatus('current')
vmapCurCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgStatistics.setStatus('current')
vmapCurCfgMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfigured", 0), ("outdrop", 1), ("outpass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgMeterAction.setStatus('current')
vmapCurCfgMeterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgMeterEnable.setStatus('current')
vmapCurCfgKbitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgKbitsSec.setStatus('current')
vmapCurCfgKbitsBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("kbits32", 32), ("kbits64", 64), ("kbits128", 128), ("kbits256", 256), ("kbits512", 512), ("kbits1024", 1024), ("kbits2048", 2048), ("kbits4096", 4096)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgKbitsBurst.setStatus('current')
vmapCurCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgUser.setStatus('current')
vmapCurCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgInprofDscp.setStatus('current')
vmapCurCfgTos = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgTos.setStatus('current')
vmapCurCfgOutprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgOutprofDscp.setStatus('current')
vmapCurCfgUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("userdefined", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgUserEnable.setStatus('current')
vmapCurCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgInprofDscpEnable.setStatus('current')
vmapCurCfgOutprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgOutprofDscpEnable.setStatus('current')
vmapCurCfgMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgMirrorPort.setStatus('current')
vmapCurCfgFilterActionChangeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapCurCfgFilterActionChangeVlan.setStatus('current')
vmapNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2), )
if mibBuilder.loadTexts: vmapNewCfgTable.setStatus('current')
vmapNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapNewCfgIndex"))
if mibBuilder.loadTexts: vmapNewCfgEntry.setStatus('current')
vmapNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapNewCfgIndex.setStatus('current')
vmapNewCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3), ("changevlan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgFilterAction.setStatus('current')
vmapNewCfgFilterActionSetPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("prio0", 1), ("prio1", 2), ("prio2", 3), ("prio3", 4), ("prio4", 5), ("prio5", 6), ("prio6", 7), ("prio7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgFilterActionSetPrio.setStatus('current')
vmapNewCfgEthFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ethernet2", 1), ("snap", 2), ("llc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgEthFmt.setStatus('current')
vmapNewCfgTagFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("any", 2), ("none", 3), ("tagged", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgTagFmt.setStatus('current')
vmapNewCfgIPFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ipv4", 2), ("ipv6", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgIPFmt.setStatus('current')
vmapNewCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgSrcMACAddress.setStatus('current')
vmapNewCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgSrcMACMask.setStatus('current')
vmapNewCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgDstMACAddress.setStatus('current')
vmapNewCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgDstMACMask.setStatus('current')
vmapNewCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgEthernetTypeName.setStatus('current')
vmapNewCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgEthernetTypeValue.setStatus('current')
vmapNewCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfg8021pPriority.setStatus('current')
vmapNewCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgTypeOfService.setStatus('current')
vmapNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgProtocol.setStatus('current')
vmapNewCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgSrcIPAddress.setStatus('current')
vmapNewCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgSrcIPMask.setStatus('current')
vmapNewCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgDstIPAddress.setStatus('current')
vmapNewCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgDstIPMask.setStatus('current')
vmapNewCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgSrcPort.setStatus('current')
vmapNewCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgSrcPortMask.setStatus('current')
vmapNewCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgDstPort.setStatus('current')
vmapNewCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgDstPortMask.setStatus('current')
vmapNewCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 24), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgTCPFlags.setStatus('current')
vmapNewCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 25), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgTCPFlagsMask.setStatus('current')
vmapNewCfgEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapNewCfgEgressPorts.setStatus('current')
vmapNewCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgStatistics.setStatus('current')
vmapNewCfgAddEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 28), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgAddEgressPort.setStatus('current')
vmapNewCfgRemoveEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 29), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgRemoveEgressPort.setStatus('current')
vmapNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgDelete.setStatus('current')
vmapNewCfgMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfigured", 0), ("outdrop", 1), ("outpass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgMeterAction.setStatus('current')
vmapNewCfgMeterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgMeterEnable.setStatus('current')
vmapNewCfgKbitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgKbitsSec.setStatus('current')
vmapNewCfgKbitsBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("kbits32", 32), ("kbits64", 64), ("kbits128", 128), ("kbits256", 256), ("kbits512", 512), ("kbits1024", 1024), ("kbits2048", 2048), ("kbits4096", 4096)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgKbitsBurst.setStatus('current')
vmapNewCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgUser.setStatus('current')
vmapNewCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgInprofDscp.setStatus('current')
vmapNewCfgTos = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgTos.setStatus('current')
vmapNewCfgOutprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgOutprofDscp.setStatus('current')
vmapNewCfgUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("userdefined", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgUserEnable.setStatus('current')
vmapNewCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgInprofDscpEnable.setStatus('current')
vmapNewCfgOutprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgOutprofDscpEnable.setStatus('current')
vmapNewCfgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgReset.setStatus('current')
vmapNewCfgEthernetReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgEthernetReset.setStatus('current')
vmapNewCfgIpv4Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgIpv4Reset.setStatus('current')
vmapNewCfgTcpudpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgTcpudpReset.setStatus('current')
vmapNewCfgMeterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgMeterReset.setStatus('current')
vmapNewCfgRemarkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgRemarkReset.setStatus('current')
vmapNewCfgRemarkInprofReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgRemarkInprofReset.setStatus('current')
vmapNewCfgRemarkOutprofReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgRemarkOutprofReset.setStatus('current')
vmapNewCfgPktfmtReset = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgPktfmtReset.setStatus('current')
vmapNewCfgMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgMirrorPort.setStatus('current')
vmapNewCfgFilterActionChangeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapNewCfgFilterActionChangeVlan.setStatus('current')
vmapVlanCurCfgNonServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 1), )
if mibBuilder.loadTexts: vmapVlanCurCfgNonServerPortsTable.setStatus('current')
vmapVlanCurCfgNonServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapVlanCurCfgNonServerPortsVlanIdx"))
if mibBuilder.loadTexts: vmapVlanCurCfgNonServerPortsTableEntry.setStatus('current')
vmapVlanCurCfgNonServerPortsVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanCurCfgNonServerPortsVlanIdx.setStatus('current')
vmapVlanCurCfgNonServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanCurCfgNonServerPortsVmapBitmap.setStatus('current')
vmapVlanNewCfgNonServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vmapVlanNewCfgNonServerPortsTable.setStatus('current')
vmapVlanNewCfgNonServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapVlanNewCfgNonServerPortsVlanIdx"))
if mibBuilder.loadTexts: vmapVlanNewCfgNonServerPortsTableEntry.setStatus('current')
vmapVlanNewCfgNonServerPortsVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanNewCfgNonServerPortsVlanIdx.setStatus('current')
vmapVlanNewCfgNonServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanNewCfgNonServerPortsVmapBitmap.setStatus('current')
vmapVlanNewCfgNonServerPortsAddVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapVlanNewCfgNonServerPortsAddVmap.setStatus('current')
vmapVlanNewCfgNonServerPortsRemVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapVlanNewCfgNonServerPortsRemVmap.setStatus('current')
vmapVlanCurCfgServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 1), )
if mibBuilder.loadTexts: vmapVlanCurCfgServerPortsTable.setStatus('current')
vmapVlanCurCfgServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapVlanCurCfgServerPortsVlanIdx"))
if mibBuilder.loadTexts: vmapVlanCurCfgServerPortsTableEntry.setStatus('current')
vmapVlanCurCfgServerPortsVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanCurCfgServerPortsVlanIdx.setStatus('current')
vmapVlanCurCfgServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanCurCfgServerPortsVmapBitmap.setStatus('current')
vmapVlanNewCfgServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 2), )
if mibBuilder.loadTexts: vmapVlanNewCfgServerPortsTable.setStatus('current')
vmapVlanNewCfgServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapVlanNewCfgServerPortsVlanIdx"))
if mibBuilder.loadTexts: vmapVlanNewCfgServerPortsTableEntry.setStatus('current')
vmapVlanNewCfgServerPortsVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanNewCfgServerPortsVlanIdx.setStatus('current')
vmapVlanNewCfgServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanNewCfgServerPortsVmapBitmap.setStatus('current')
vmapVlanNewCfgServerPortsAddVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapVlanNewCfgServerPortsAddVmap.setStatus('current')
vmapVlanNewCfgServerPortsRemVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapVlanNewCfgServerPortsRemVmap.setStatus('current')
vmapVlanCurCfgAllPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 1), )
if mibBuilder.loadTexts: vmapVlanCurCfgAllPortsTable.setStatus('current')
vmapVlanCurCfgAllPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapVlanCurCfgAllPortsVlanIdx"))
if mibBuilder.loadTexts: vmapVlanCurCfgAllPortsTableEntry.setStatus('current')
vmapVlanCurCfgAllPortsVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanCurCfgAllPortsVlanIdx.setStatus('current')
vmapVlanCurCfgAllPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanCurCfgAllPortsVmapBitmap.setStatus('current')
vmapVlanNewCfgAllPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 2), )
if mibBuilder.loadTexts: vmapVlanNewCfgAllPortsTable.setStatus('current')
vmapVlanNewCfgAllPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapVlanNewCfgAllPortsVlanIdx"))
if mibBuilder.loadTexts: vmapVlanNewCfgAllPortsTableEntry.setStatus('current')
vmapVlanNewCfgAllPortsVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanNewCfgAllPortsVlanIdx.setStatus('current')
vmapVlanNewCfgAllPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapVlanNewCfgAllPortsVmapBitmap.setStatus('current')
vmapVlanNewCfgAllPortsAddVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapVlanNewCfgAllPortsAddVmap.setStatus('current')
vmapVlanNewCfgAllPortsRemVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapVlanNewCfgAllPortsRemVmap.setStatus('current')
vmapGroupCurCfgNonServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 1), )
if mibBuilder.loadTexts: vmapGroupCurCfgNonServerPortsTable.setStatus('current')
vmapGroupCurCfgNonServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapGroupCurCfgNonServerPortsGroupIdx"))
if mibBuilder.loadTexts: vmapGroupCurCfgNonServerPortsTableEntry.setStatus('current')
vmapGroupCurCfgNonServerPortsGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupCurCfgNonServerPortsGroupIdx.setStatus('current')
vmapGroupCurCfgNonServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupCurCfgNonServerPortsVmapBitmap.setStatus('current')
vmapGroupNewCfgNonServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 2), )
if mibBuilder.loadTexts: vmapGroupNewCfgNonServerPortsTable.setStatus('current')
vmapGroupNewCfgNonServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapGroupNewCfgNonServerPortsGroupIdx"))
if mibBuilder.loadTexts: vmapGroupNewCfgNonServerPortsTableEntry.setStatus('current')
vmapGroupNewCfgNonServerPortsGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupNewCfgNonServerPortsGroupIdx.setStatus('current')
vmapGroupNewCfgNonServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupNewCfgNonServerPortsVmapBitmap.setStatus('current')
vmapGroupNewCfgNonServerPortsAddVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapGroupNewCfgNonServerPortsAddVmap.setStatus('current')
vmapGroupNewCfgNonServerPortsRemVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapGroupNewCfgNonServerPortsRemVmap.setStatus('current')
vmapGroupCurCfgServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 1), )
if mibBuilder.loadTexts: vmapGroupCurCfgServerPortsTable.setStatus('current')
vmapGroupCurCfgServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapGroupCurCfgServerPortsGroupIdx"))
if mibBuilder.loadTexts: vmapGroupCurCfgServerPortsTableEntry.setStatus('current')
vmapGroupCurCfgServerPortsGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupCurCfgServerPortsGroupIdx.setStatus('current')
vmapGroupCurCfgServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupCurCfgServerPortsVmapBitmap.setStatus('current')
vmapGroupNewCfgServerPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 2), )
if mibBuilder.loadTexts: vmapGroupNewCfgServerPortsTable.setStatus('current')
vmapGroupNewCfgServerPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapGroupNewCfgServerPortsGroupIdx"))
if mibBuilder.loadTexts: vmapGroupNewCfgServerPortsTableEntry.setStatus('current')
vmapGroupNewCfgServerPortsGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupNewCfgServerPortsGroupIdx.setStatus('current')
vmapGroupNewCfgServerPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupNewCfgServerPortsVmapBitmap.setStatus('current')
vmapGroupNewCfgServerPortsAddVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapGroupNewCfgServerPortsAddVmap.setStatus('current')
vmapGroupNewCfgServerPortsRemVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapGroupNewCfgServerPortsRemVmap.setStatus('current')
vmapGroupCurCfgAllPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 1), )
if mibBuilder.loadTexts: vmapGroupCurCfgAllPortsTable.setStatus('current')
vmapGroupCurCfgAllPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapGroupCurCfgAllPortsGroupIdx"))
if mibBuilder.loadTexts: vmapGroupCurCfgAllPortsTableEntry.setStatus('current')
vmapGroupCurCfgAllPortsGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupCurCfgAllPortsGroupIdx.setStatus('current')
vmapGroupCurCfgAllPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupCurCfgAllPortsVmapBitmap.setStatus('current')
vmapGroupNewCfgAllPortsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 2), )
if mibBuilder.loadTexts: vmapGroupNewCfgAllPortsTable.setStatus('current')
vmapGroupNewCfgAllPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmapGroupNewCfgAllPortsGroupIdx"))
if mibBuilder.loadTexts: vmapGroupNewCfgAllPortsTableEntry.setStatus('current')
vmapGroupNewCfgAllPortsGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupNewCfgAllPortsGroupIdx.setStatus('current')
vmapGroupNewCfgAllPortsVmapBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmapGroupNewCfgAllPortsVmapBitmap.setStatus('current')
vmapGroupNewCfgAllPortsAddVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapGroupNewCfgAllPortsAddVmap.setStatus('current')
vmapGroupNewCfgAllPortsRemVmap = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 9, 3, 2, 2, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmapGroupNewCfgAllPortsRemVmap.setStatus('current')
cee = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 13))
ceeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 13, 1))
ceeCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceeCurCfgState.setStatus('current')
ceeNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceeNewCfgState.setStatus('current')
fcoe = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14))
fcoeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1))
fcoeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2))
fcoeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3))
fcoeOper = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 4))
fipsCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3))
fipsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1))
fipsOper = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 4, 1))
fipsInfoFcf = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2))
fipsInfoFcoe = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3))
fipsInfoVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 4))
fipsCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsCurCfgState.setStatus('current')
fipsNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fipsNewCfgState.setStatus('current')
fipsCurAclTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsCurAclTimeout.setStatus('current')
fipsNewAclTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fipsNewAclTimeout.setStatus('current')
fipsCurAutoVlan = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsCurAutoVlan.setStatus('current')
fipsNewAutoVlan = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fipsNewAutoVlan.setStatus('current')
fipsPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 7), )
if mibBuilder.loadTexts: fipsPortCurCfgTable.setStatus('current')
fipsPortCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fipsPortCurCfgIndex"))
if mibBuilder.loadTexts: fipsPortCurCfgEntry.setStatus('current')
fipsPortCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 7, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsPortCurCfgIndex.setStatus('current')
fipsPortCurCfgFcfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsPortCurCfgFcfMode.setStatus('current')
fipsPortCurCfgFipsEna = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsPortCurCfgFipsEna.setStatus('current')
fipsPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 8), )
if mibBuilder.loadTexts: fipsPortNewCfgTable.setStatus('current')
fipsPortNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fipsPortNewCfgIndex"))
if mibBuilder.loadTexts: fipsPortNewCfgEntry.setStatus('current')
fipsPortNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 8, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsPortNewCfgIndex.setStatus('current')
fipsPortNewCfgFcfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fipsPortNewCfgFcfMode.setStatus('current')
fipsPortNewCfgFipsEna = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fipsPortNewCfgFipsEna.setStatus('current')
fipsInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 1), )
if mibBuilder.loadTexts: fipsInfoPortTable.setStatus('current')
fipsInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fipsInfoPortIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "fipsInfoAclSequencer"))
if mibBuilder.loadTexts: fipsInfoPortEntry.setStatus('current')
fipsInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoPortIndex.setStatus('current')
fipsInfoAclSequencer = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoAclSequencer.setStatus('current')
fipsInfoAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoAcl.setStatus('current')
fipsInfoFcfCount = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcfCount.setStatus('current')
fipsInfoFcfTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2, 2), )
if mibBuilder.loadTexts: fipsInfoFcfTable.setStatus('current')
fipsInfoFcfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fipsInfoFcfIndex"))
if mibBuilder.loadTexts: fipsInfoFcfEntry.setStatus('current')
fipsInfoFcfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcfIndex.setStatus('current')
fipsInfoFcfMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcfMac.setStatus('current')
fipsInfoFcfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcfPort.setStatus('current')
fipsInfoFcfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcfVlan.setStatus('current')
fipsInfoVlansTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 4, 1), )
if mibBuilder.loadTexts: fipsInfoVlansTable.setStatus('current')
fipsInfoVlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 4, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fipsInfoVlansId"), (0, "IBM-GbTOR-10G-L2L3-MIB", "fipsInfoVlansFeatureIndex"))
if mibBuilder.loadTexts: fipsInfoVlansEntry.setStatus('current')
fipsInfoVlansId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoVlansId.setStatus('current')
fipsInfoVlansFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoVlansFeatureIndex.setStatus('current')
fipsInfoVlansCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoVlansCreator.setStatus('current')
fipsInfoVlansPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoVlansPorts.setStatus('current')
fipsInfoFcoeCount = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcoeCount.setStatus('current')
fipsInfoFcoeTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 2), )
if mibBuilder.loadTexts: fipsInfoFcoeTable.setStatus('current')
fipsInfoFcoeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fipsInfoFcoeIndex"))
if mibBuilder.loadTexts: fipsInfoFcoeEntry.setStatus('current')
fipsInfoFcoeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcoeIndex.setStatus('current')
fipsInfoFcoeVNPortMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcoeVNPortMac.setStatus('current')
fipsInfoFcoeFcfMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcoeFcfMac.setStatus('current')
fipsInfoFcoePort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcoePort.setStatus('current')
fipsInfoFcoeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsInfoFcoeVlan.setStatus('current')
fipsOperFcfDelete = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fipsOperFcfDelete.setStatus('current')
fcoeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 1), )
if mibBuilder.loadTexts: fcoeStatsTable.setStatus('current')
fcoeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "fcoeStatsIndex"))
if mibBuilder.loadTexts: fcoeStatsEntry.setStatus('current')
fcoeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcoeStatsIndex.setStatus('current')
fcoeStatsFcfAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcoeStatsFcfAdded.setStatus('current')
fcoeStatsFcfRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcoeStatsFcfRemoved.setStatus('current')
fcoeStatsFcoeAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcoeStatsFcoeAdded.setStatus('current')
fcoeStatsFcoeRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcoeStatsFcoeRemoved.setStatus('current')
fcoeStatsResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 14, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("others", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcoeStatsResetAllCounters.setStatus('current')
virt = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15))
virtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1))
vmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2))
vmPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3))
vmbw = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1))
vmProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4))
virtVMware = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5))
vmCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7))
virtCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgState.setStatus('current')
virtNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgState.setStatus('current')
virtCurCfgHbPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgHbPort.setStatus('current')
virtNewCfgHbPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgHbPort.setStatus('current')
virtCurCfgVirtCenterIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgVirtCenterIp.setStatus('current')
virtNewCfgVirtCenterIp = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVirtCenterIp.setStatus('current')
virtCurCfgVirtCenterUser = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgVirtCenterUser.setStatus('current')
virtNewCfgVirtCenterUser = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVirtCenterUser.setStatus('current')
virtCurCfgVirtCenterSSLAuth = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgVirtCenterSSLAuth.setStatus('current')
virtNewCfgVirtCenterSSLAuth = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVirtCenterSSLAuth.setStatus('current')
virtNewCfgVirtCenterPasswd = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVirtCenterPasswd.setStatus('current')
virtNewCfgVirtCenterDelete = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVirtCenterDelete.setStatus('current')
vmCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1), )
if mibBuilder.loadTexts: vmCurCfgGroupTable.setStatus('current')
vmCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmCurCfgGroupIndex"))
if mibBuilder.loadTexts: vmCurCfgGroupEntry.setStatus('current')
vmNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2), )
if mibBuilder.loadTexts: vmNewCfgGroupTable.setStatus('current')
vmNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmNewCfgGroupIndex"))
if mibBuilder.loadTexts: vmNewCfgGroupEntry.setStatus('current')
vmCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupIndex.setStatus('current')
vmCurCfgGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupVlan.setStatus('current')
vmCurCfgGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupPorts.setStatus('current')
vmCurCfgGroupTagState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupTagState.setStatus('current')
vmCurCfgGroupStg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupStg.setStatus('current')
vmCurCfgGroupProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupProfileName.setStatus('current')
vmCurCfgGroupValidateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupValidateMode.setStatus('current')
vmNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgGroupIndex.setStatus('current')
vmNewCfgGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupVlan.setStatus('current')
vmNewCfgGroupAddVm = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupAddVm.setStatus('current')
vmNewCfgGroupRemVm = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupRemVm.setStatus('current')
vmNewCfgGroupAddVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupAddVmIdx.setStatus('current')
vmNewCfgGroupRemVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupRemVmIdx.setStatus('current')
vmNewCfgGroupAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 8), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupAddPort.setStatus('current')
vmNewCfgGroupRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 9), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupRemPort.setStatus('current')
vmNewCfgGroupAddTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupAddTrunk.setStatus('current')
vmNewCfgGroupRemTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupRemTrunk.setStatus('current')
vmNewCfgGroupTagState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupTagState.setStatus('current')
vmNewCfgGroupAddLacpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupAddLacpKey.setStatus('current')
vmNewCfgGroupRemLacpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupRemLacpKey.setStatus('current')
vmNewCfgGroupAddProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupAddProfile.setStatus('current')
vmNewCfgGroupRemProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("remove", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupRemProfile.setStatus('current')
vmNewCfgGroupProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgGroupProfileName.setStatus('current')
vmNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupDelete.setStatus('current')
vmNewCfgGroupStg = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupStg.setStatus('current')
vmNewCfgGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgGroupPorts.setStatus('current')
vmNewCfgGroupValidateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noValidation", 0), ("basicCheck", 1), ("advancedCheck", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgGroupValidateMode.setStatus('current')
vmCurCfgGroupMacTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 3), )
if mibBuilder.loadTexts: vmCurCfgGroupMacTable.setStatus('current')
vmCurCfgGroupMaclistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmCurCfgGroupMacGroupIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "vmCurCfgGroupMacVMIndex"))
if mibBuilder.loadTexts: vmCurCfgGroupMaclistEntry.setStatus('current')
vmCurCfgGroupMacGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupMacGroupIndex.setStatus('current')
vmCurCfgGroupMacVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupMacVMIndex.setStatus('current')
vmCurCfgGroupMacVMMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 3, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgGroupMacVMMac.setStatus('current')
vmNewCfgGroupMacTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 4), )
if mibBuilder.loadTexts: vmNewCfgGroupMacTable.setStatus('current')
vmNewCfgGroupMaclistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmNewCfgGroupMacGroupIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "vmNewCfgGroupMacVMIndex"))
if mibBuilder.loadTexts: vmNewCfgGroupMaclistEntry.setStatus('current')
vmNewCfgGroupMacGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgGroupMacGroupIndex.setStatus('current')
vmNewCfgGroupMacVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgGroupMacVMIndex.setStatus('current')
vmNewCfgGroupMacVMMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 2, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgGroupMacVMMac.setStatus('current')
vmbwCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 1), )
if mibBuilder.loadTexts: vmbwCurCfgTable.setStatus('current')
vmbwCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmbwCurCfgMac"))
if mibBuilder.loadTexts: vmbwCurCfgEntry.setStatus('current')
vmbwCurCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmbwCurCfgMac.setStatus('current')
vmbwCurCfgTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmbwCurCfgTxRate.setStatus('current')
vmbwCurCfgTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmbwCurCfgTxBurst.setStatus('current')
vmbwCurCfgTxAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmbwCurCfgTxAclId.setStatus('current')
vmbwCurCfgCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmbwCurCfgCtrl.setStatus('current')
vmbwNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2), )
if mibBuilder.loadTexts: vmbwNewCfgTable.setStatus('current')
vmbwNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmbwNewCfgMac"))
if mibBuilder.loadTexts: vmbwNewCfgEntry.setStatus('current')
vmbwNewCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmbwNewCfgMac.setStatus('current')
vmbwNewCfgTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmbwNewCfgTxRate.setStatus('current')
vmbwNewCfgTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmbwNewCfgTxBurst.setStatus('current')
vmbwNewCfgTxAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmbwNewCfgTxAclId.setStatus('current')
vmbwNewCfgCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmbwNewCfgCtrl.setStatus('current')
vmbwNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmbwNewCfgDelete.setStatus('current')
vmCurCfgCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 1))
vmNewCfgCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 2))
vmCurCfgCheckActionBasic = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("log", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgCheckActionBasic.setStatus('current')
vmCurCfgCheckActionAdvanced = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("log", 1), ("link", 2), ("acl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgCheckActionAdvanced.setStatus('current')
vmCurCfgCheckAclsMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgCheckAclsMax.setStatus('current')
vmCurCfgCheckTrust = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgCheckTrust.setStatus('current')
vmNewCfgCheckActionBasic = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("log", 1), ("link", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgCheckActionBasic.setStatus('current')
vmNewCfgCheckActionAdvanced = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("log", 1), ("link", 2), ("acl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgCheckActionAdvanced.setStatus('current')
vmNewCfgCheckAclsMax = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgCheckAclsMax.setStatus('current')
vmNewCfgCheckTrust = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 2, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgCheckTrust.setStatus('current')
vmNewCfgCheckTrustAddPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 2, 5), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgCheckTrustAddPort.setStatus('current')
vmNewCfgCheckTrustRemPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 7, 2, 6), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgCheckTrustRemPort.setStatus('current')
vmCurCfgProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1), )
if mibBuilder.loadTexts: vmCurCfgProfilesTable.setStatus('current')
vmCurCfgProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmCurCfgProfileIndex"))
if mibBuilder.loadTexts: vmCurCfgProfileEntry.setStatus('current')
vmCurCfgProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileIndex.setStatus('current')
vmCurCfgProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileName.setStatus('current')
vmCurCfgProfileVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileVlan.setStatus('current')
vmCurCfgProfileShapingAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileShapingAverage.setStatus('current')
vmCurCfgProfileShapingBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileShapingBurst.setStatus('current')
vmCurCfgProfileShapingPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileShapingPeak.setStatus('current')
vmCurCfgProfileEgressShapingAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileEgressShapingAverage.setStatus('current')
vmCurCfgProfileEgressShapingBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileEgressShapingBurst.setStatus('current')
vmCurCfgProfileEgressShapingPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmCurCfgProfileEgressShapingPeak.setStatus('current')
vmNewCfgProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2), )
if mibBuilder.loadTexts: vmNewCfgProfilesTable.setStatus('current')
vmNewCfgProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmNewCfgProfileIndex"))
if mibBuilder.loadTexts: vmNewCfgProfileEntry.setStatus('current')
vmNewCfgProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmNewCfgProfileIndex.setStatus('current')
vmNewCfgProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileName.setStatus('current')
vmNewCfgProfileVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileVlan.setStatus('current')
vmNewCfgProfileShapingAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileShapingAverage.setStatus('current')
vmNewCfgProfileShapingBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileShapingBurst.setStatus('current')
vmNewCfgProfileShapingPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileShapingPeak.setStatus('current')
vmNewCfgProfileDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileDelete.setStatus('current')
vmNewCfgProfileEgressShapingAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileEgressShapingAverage.setStatus('current')
vmNewCfgProfileEgressShapingBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileEgressShapingBurst.setStatus('current')
vmNewCfgProfileEgressShapingPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNewCfgProfileEgressShapingPeak.setStatus('current')
virtVMwareNameTableUpdate = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("get", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtVMwareNameTableUpdate.setStatus('current')
virtVMwareHostNameTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 2), )
if mibBuilder.loadTexts: virtVMwareHostNameTable.setStatus('current')
virtVMwareHostNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "virtVMwareHostNameIndex"))
if mibBuilder.loadTexts: virtVMwareHostNameEntry.setStatus('current')
virtVMwareHostNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostNameIndex.setStatus('current')
virtVMwareHostNameUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostNameUUID.setStatus('current')
virtVMwareHostNameIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostNameIpAddress.setStatus('current')
virtVMwareHostNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostNameName.setStatus('current')
virtVMwareVMNameTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 3), )
if mibBuilder.loadTexts: virtVMwareVMNameTable.setStatus('current')
virtVMwareVMNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 3, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "virtVMwareVMNameIndex"))
if mibBuilder.loadTexts: virtVMwareVMNameEntry.setStatus('current')
virtVMwareVMNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMNameIndex.setStatus('current')
virtVMwareVMNameUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMNameUUID.setStatus('current')
virtVMwareVMNameVMwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMNameVMwareName.setStatus('current')
virtVMwareVMNameOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMNameOsName.setStatus('current')
virtVMwareVMNameIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMNameIpAddress.setStatus('current')
virtVMwareHost = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtVMwareHost.setStatus('current')
virtVMwareHostVswitchTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 5), )
if mibBuilder.loadTexts: virtVMwareHostVswitchTable.setStatus('current')
virtVMwareHostVswitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "virtVMwareHostVswitchIndex"))
if mibBuilder.loadTexts: virtVMwareHostVswitchEntry.setStatus('current')
virtVMwareHostVswitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostVswitchIndex.setStatus('current')
virtVMwareHostVswitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostVswitchName.setStatus('current')
virtVMwareHostPGTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 6), )
if mibBuilder.loadTexts: virtVMwareHostPGTable.setStatus('current')
virtVMwareHostPGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 6, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "virtVMwareHostPGIndex"))
if mibBuilder.loadTexts: virtVMwareHostPGEntry.setStatus('current')
virtVMwareHostPGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostPGIndex.setStatus('current')
virtVMwareHostPGName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostPGName.setStatus('current')
virtVMwareHostPGVswitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostPGVswitchName.setStatus('current')
virtVMwareHostDetailInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7), )
if mibBuilder.loadTexts: virtVMwareHostDetailInfoTable.setStatus('current')
virtVMwareHostDetailInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "virtVMwareHostDetailInfoIndex"))
if mibBuilder.loadTexts: virtVMwareHostDetailInfoEntry.setStatus('current')
virtVMwareHostDetailInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoIndex.setStatus('current')
virtVMwareHostDetailInfoMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoMACAddr.setStatus('current')
virtVMwareHostDetailInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoPort.setStatus('current')
virtVMwareHostDetailInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoType.setStatus('current')
virtVMwareHostDetailInfoIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoIPAddr.setStatus('current')
virtVMwareHostDetailInfoUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoUUID.setStatus('current')
virtVMwareHostDetailInfoVswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoVswitch.setStatus('current')
virtVMwareHostDetailInfoPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoPortGroup.setStatus('current')
virtVMwareHostDetailInfoVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoVlanID.setStatus('current')
virtVMwareHostDetailInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoHostName.setStatus('current')
virtVMwareHostDetailInfoVMVCenterName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoVMVCenterName.setStatus('current')
virtVMwareHostDetailInfoVMOSHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoVMOSHostName.setStatus('current')
virtVMwareHostDetailInfoVMCurrentHost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareHostDetailInfoVMCurrentHost.setStatus('current')
virtVMwareVM = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtVMwareVM.setStatus('current')
virtVMwareVMInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9), )
if mibBuilder.loadTexts: virtVMwareVMInfoTable.setStatus('current')
virtVMwareVMInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "virtVMwareVMInfoIndex"))
if mibBuilder.loadTexts: virtVMwareVMInfoEntry.setStatus('current')
virtVMwareVMInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoIndex.setStatus('current')
virtVMwareVMInfoMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoMACAddr.setStatus('current')
virtVMwareVMInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoPort.setStatus('current')
virtVMwareVMInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoType.setStatus('current')
virtVMwareVMInfoIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoIPAddr.setStatus('current')
virtVMwareVMInfoUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoUUID.setStatus('current')
virtVMwareVMInfoVswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoVswitch.setStatus('current')
virtVMwareVMInfoPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoPortGroup.setStatus('current')
virtVMwareVMInfoVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoVlanID.setStatus('current')
virtVMwareVMInfoVMVCenterName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoVMVCenterName.setStatus('current')
virtVMwareVMInfoVMOSHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoVMOSHostName.setStatus('current')
virtVMwareVMInfoVMCurrentHost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 9, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtVMwareVMInfoVMCurrentHost.setStatus('current')
virtCurCfgVMwareHello = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 10))
virtNewCfgVMwareHello = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 11))
virtCurCfgVMwareHelloEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgVMwareHelloEnable.setStatus('current')
virtCurCfgVMwareHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgVMwareHelloTimer.setStatus('current')
virtCurCfgVMwareHelloPorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 10, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgVMwareHelloPorts.setStatus('current')
virtCurCfgVMwareHelloAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 10, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtCurCfgVMwareHelloAddr.setStatus('current')
virtNewCfgVMwareHelloEnable = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVMwareHelloEnable.setStatus('current')
virtNewCfgVMwareHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVMwareHelloTimer.setStatus('current')
virtNewCfgVMwareHelloPorts = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 11, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtNewCfgVMwareHelloPorts.setStatus('current')
virtNewCfgVMwareHelloAddPort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 11, 4), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVMwareHelloAddPort.setStatus('current')
virtNewCfgVMwareHelloRemovePort = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 11, 5), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVMwareHelloRemovePort.setStatus('current')
virtNewCfgVMwareHelloAddr = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 15, 5, 11, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtNewCfgVMwareHelloAddr.setStatus('current')
agVMGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12))
vmGroupInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1), )
if mibBuilder.loadTexts: vmGroupInfoTbl.setStatus('current')
vmGroupInfolistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vmGroupInfoIdx"))
if mibBuilder.loadTexts: vmGroupInfolistEntry.setStatus('current')
vmGroupInfoIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoIdx.setStatus('current')
vmGroupInfoMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoMac.setStatus('current')
vmGroupInfoIP = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoIP.setStatus('current')
vmGroupInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 4), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoPort.setStatus('current')
vmGroupInfoGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoGroup.setStatus('current')
vmGroupInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoVlan.setStatus('current')
vmGroupInfoIsESXSvcCon = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoIsESXSvcCon.setStatus('current')
vmGroupInfoIsVMK = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoIsVMK.setStatus('current')
vmGroupInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoName.setStatus('current')
vmGroupInfoUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoUUID.setStatus('current')
vmGroupInfoVSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoVSwitch.setStatus('current')
vmGroupInfoPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoPortGroup.setStatus('current')
vmGroupInfoHost = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 1, 3, 12, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmGroupInfoHost.setStatus('current')
vnic = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16))
vnicCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgState.setStatus('current')
vnicNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgState.setStatus('current')
vnicCurCfgVnicTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7), )
if mibBuilder.loadTexts: vnicCurCfgVnicTable.setStatus('current')
vnicCurCfgVnicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vnicCurCfgVnicPortIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "vnicCurCfgVnicIndex"))
if mibBuilder.loadTexts: vnicCurCfgVnicEntry.setStatus('current')
vnicCurCfgVnicPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgVnicPortIndex.setStatus('current')
vnicCurCfgVnicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgVnicIndex.setStatus('current')
vnicCurCfgVnicState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgVnicState.setStatus('current')
vnicCurCfgVnicBw = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgVnicBw.setStatus('current')
vnicCurCfgVnicType = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("fcoe", 2), ("iscsi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgVnicType.setStatus('current')
vnicCurCfgVnicMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgVnicMAC.setStatus('current')
vnicNewCfgVnicTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 8), )
if mibBuilder.loadTexts: vnicNewCfgVnicTable.setStatus('current')
vnicNewCfgVnicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 8, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vnicNewCfgVnicPortIndex"), (0, "IBM-GbTOR-10G-L2L3-MIB", "vnicNewCfgVnicIndex"))
if mibBuilder.loadTexts: vnicNewCfgVnicEntry.setStatus('current')
vnicNewCfgVnicPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 8, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicNewCfgVnicPortIndex.setStatus('current')
vnicNewCfgVnicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicNewCfgVnicIndex.setStatus('current')
vnicNewCfgVnicState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgVnicState.setStatus('current')
vnicNewCfgVnicBw = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgVnicBw.setStatus('current')
vnicCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9), )
if mibBuilder.loadTexts: vnicCurCfgGroupTable.setStatus('current')
vnicCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vnicCurCfgGroupIndex"))
if mibBuilder.loadTexts: vnicCurCfgGroupEntry.setStatus('current')
vnicCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgGroupIndex.setStatus('current')
vnicCurCfgGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgGroupState.setStatus('current')
vnicCurCfgGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgGroupVlan.setStatus('current')
vnicCurCfgGroupFailoverState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgGroupFailoverState.setStatus('current')
vnicCurCfgGroupVnics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgGroupVnics.setStatus('current')
vnicCurCfgGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgGroupPorts.setStatus('current')
vnicCurCfgGroupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicCurCfgGroupTrunk.setStatus('current')
vnicNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10), )
if mibBuilder.loadTexts: vnicNewCfgGroupTable.setStatus('current')
vnicNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "vnicNewCfgGroupIndex"))
if mibBuilder.loadTexts: vnicNewCfgGroupEntry.setStatus('current')
vnicNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicNewCfgGroupIndex.setStatus('current')
vnicNewCfgGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupState.setStatus('current')
vnicNewCfgGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupVlan.setStatus('current')
vnicNewCfgGroupFailoverState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupFailoverState.setStatus('current')
vnicNewCfgGroupAddVnic = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupAddVnic.setStatus('current')
vnicNewCfgGroupRemVnic = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupRemVnic.setStatus('current')
vnicNewCfgGroupAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupAddPort.setStatus('current')
vnicNewCfgGroupRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupRemPort.setStatus('current')
vnicNewCfgGroupAddTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupAddTrunk.setStatus('current')
vnicNewCfgGroupRemTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupRemTrunk.setStatus('current')
vnicNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnicNewCfgGroupDelete.setStatus('current')
vnicNewCfgGroupVnics = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicNewCfgGroupVnics.setStatus('current')
vnicNewCfgGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicNewCfgGroupPorts.setStatus('current')
vnicNewCfgGroupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 2, 7, 4, 16, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnicNewCfgGroupTrunk.setStatus('current')
ibmnos_BladeSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102)).setLabel("ibmnos-BladeSwitch")
ibmnoscfa = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 27))
pysmi_if = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 27, 1)).setLabel("if")
ifMainTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 102, 27, 1, 4), )
if mibBuilder.loadTexts: ifMainTable.setStatus('current')
ifMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 102, 27, 1, 4, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ifMainIndex"))
if mibBuilder.loadTexts: ifMainEntry.setStatus('current')
ifMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 27, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ifMainIndex.setStatus('current')
ifMainPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 27, 1, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMainPortName.setStatus('current')
ibmnos = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 81))
ibmnosSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1))
ibmnosConfigControl = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2))
ibmnosConfigSaveOption = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noSave", 1), ("flashSave", 2), ("remoteTftpSave", 3), ("startupConfig", 4), ("backupConfig", 5), ("remoteTftpRestore", 6))).clone('noSave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosConfigSaveOption.setStatus('current')
ibmnosConfigSaveFileName = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('iss.conf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosConfigSaveFileName.setStatus('current')
ibmnosInitiateConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosInitiateConfigSave.setStatus('current')
ibmnosConfigSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("saveInProgress", 1), ("saveSuccessful", 2), ("saveFailed", 3), ("notInitiated", 4), ("saveNotRequired", 5))).clone('notInitiated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosConfigSaveStatus.setStatus('current')
ibmnosConfigRestoreOption = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("activeConfig", 2), ("backupConfig", 3))).clone('factory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosConfigRestoreOption.setStatus('current')
ibmnosLoggingOption = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("console", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosLoggingOption.setStatus('current')
ibmnosLoginAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remoteRadius", 2), ("remoteTacacs", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosLoginAuthentication.setStatus('current')
ibmnosConfigRestoreFileVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 81, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosConfigRestoreFileVersion.setStatus('current')
ibmnosPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2, 2), )
if mibBuilder.loadTexts: ibmnosPortCtrlTable.setStatus('current')
ibmnosPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2, 2, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ibmnosPortCtrlIndex"))
if mibBuilder.loadTexts: ibmnosPortCtrlEntry.setStatus('current')
ibmnosPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ibmnosPortCtrlIndex.setStatus('current')
ibmnosPortCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("noNegotiation", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosPortCtrlMode.setStatus('current')
ibmnosPortCtrlDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosPortCtrlDuplex.setStatus('current')
ibmnosPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tenMBPS", 1), ("hundredMBPS", 2), ("oneGB", 3), ("tenGB", 4), ("any", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosPortCtrlSpeed.setStatus('current')
ibmnosPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 81, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("send", 3), ("receive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosPortCtrlFlowControl.setStatus('current')
toraddon = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102))
cfa = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102, 2))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102, 7))
ibmnosFdb = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13))
tor_switch = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14)).setLabel("tor-switch")
ibmnosBladeHarmony = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18))
dataCollection = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1))
imageConfigTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 3))
ibmnosFdbTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5), )
if mibBuilder.loadTexts: ibmnosFdbTable.setStatus('current')
ibmnosFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ibmnosFdbVlan"), (0, "IBM-GbTOR-10G-L2L3-MIB", "ibmnosFdbMacAddr"))
if mibBuilder.loadTexts: ibmnosFdbEntry.setStatus('current')
ibmnosFdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: ibmnosFdbVlan.setStatus('current')
ibmnosFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 2), PhysAddress())
if mibBuilder.loadTexts: ibmnosFdbMacAddr.setStatus('current')
ibmnosFdbMacAddrStr = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosFdbMacAddrStr.setStatus('current')
ibmnosFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosFdbVlanId.setStatus('current')
ibmnosFdbSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosFdbSrcPort.setStatus('current')
ibmnosFdbSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosFdbSrcTrunk.setStatus('current')
ibmnosFdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("forward", 2), ("trunk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosFdbState.setStatus('current')
ibmnosFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosFdbStatus.setStatus('current')
ibmnosFdbClearMac = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 13, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosFdbClearMac.setStatus('current')
ibmnosPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 102, 102, 2, 1), )
if mibBuilder.loadTexts: ibmnosPortCfgTable.setStatus('current')
ibmnosPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 102, 102, 2, 1, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ibmnosPortCfgIndx"))
if mibBuilder.loadTexts: ibmnosPortCfgTableEntry.setStatus('current')
ibmnosPortCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ibmnosPortCfgIndx.setStatus('current')
ibmnosPortCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosPortCfgVlanTag.setStatus('current')
agImageForNextReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNextReset.setStatus('current')
hardwarePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarePartNumber.setStatus('current')
hardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRevision.setStatus('current')
hardwareLastBoot = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unkownReason", 0), ("powerCycle", 1), ("resetFromConsole", 2), ("resetFromTelnetOrSSH", 3), ("resetFromSNMP", 4), ("resetFromWEBUI", 5), ("resetFromScheduled", 6), ("resetFromWatchdogTimer", 7), ("resetFromSWPANIC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareLastBoot.setStatus('current')
hardwareMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareMACAddress.setStatus('current')
hardwareSwitchRunningSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareSwitchRunningSwVersion.setStatus('current')
hardwareFlashConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("factory", 0), ("active", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareFlashConfiguration.setStatus('current')
hardwarePCBAPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarePCBAPartNumber.setStatus('current')
hardwareFABNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareFABNumber.setStatus('current')
hardwareSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareSerialNumber.setStatus('current')
hardwareManufacturingDate = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareManufacturingDate.setStatus('current')
hwTemperatureSensor1 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemperatureSensor1.setStatus('current')
hwTemperatureSensor2 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemperatureSensor2.setStatus('current')
hwTemperatureSensor3 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemperatureSensor3.setStatus('current')
hwFan1RPMValue = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFan1RPMValue.setStatus('current')
hwFan2RPMValue = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFan2RPMValue.setStatus('current')
hwFan3RPMValue = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFan3RPMValue.setStatus('current')
hwFan4RPMValue = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFan4RPMValue.setStatus('current')
hwFan5RPMValue = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFan5RPMValue.setStatus('current')
hwBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBoardRevision.setStatus('current')
hwPowerSupply1State = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupply1State.setStatus('current')
hwPowerSupply2State = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupply2State.setStatus('current')
ibmnosSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 22), )
if mibBuilder.loadTexts: ibmnosSfpInfoTable.setStatus('current')
ibmnosSfpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 22, 1), ).setIndexNames((0, "IBM-GbTOR-10G-L2L3-MIB", "ibmnosSfpInfoIndx"))
if mibBuilder.loadTexts: ibmnosSfpInfoTableEntry.setStatus('current')
ibmnosSfpInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosSfpInfoIndx.setStatus('current')
ibmnosSfpInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6))).clone(namedValues=NamedValues(("none", 0), ("sfp", 1), ("cx4", 2), ("sfpplus", 3), ("dac", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosSfpInfoDescription.setStatus('current')
ibmnosSfpInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosSfpInfoSerialNumber.setStatus('current')
ibmnosSfpInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 22, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosSfpInfoPartNumber.setStatus('current')
ibmnosSfpInfoHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 22, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosSfpInfoHWRevision.setStatus('current')
swImage1Version = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swImage1Version.setStatus('current')
swImage2Version = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swImage2Version.setStatus('current')
swBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootVersion.setStatus('current')
hwFan6RPMValue = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFan6RPMValue.setStatus('current')
hwTemperatureSensor4 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemperatureSensor4.setStatus('current')
hwTemperatureSensor5 = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 14, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemperatureSensor5.setStatus('current')
ibmnosPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosPortTableMaxEnt.setStatus('current')
ibmnosImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosImage1Ver.setStatus('current')
ibmnosImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosImage2Ver.setStatus('current')
hwSwitchSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSwitchSoftwareVersion.setStatus('current')
hwSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSerialNum.setStatus('current')
hwManufacturingDate = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwManufacturingDate.setStatus('current')
ibmnosReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosReset.setStatus('current')
ibmnosBootVer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosBootVer.setStatus('current')
ibmnosConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmnosConfigForNxtReset.setStatus('current')
ibmnosSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnosSoftwareVersion.setStatus('current')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 26543, 102, 102, 18, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('current')
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", lldpInfoRxBadFrame=lldpInfoRxBadFrame, ripStatInBadVersion=ripStatInBadVersion, agCurCfgLFDStatus=agCurCfgLFDStatus, stpInfoPortIndex=stpInfoPortIndex, acl6CurCfgIPv6NextHeader=acl6CurCfgIPv6NextHeader, lacpNewPortSetToDefault=lacpNewPortSetToDefault, agCurCfgSyslogTrapHotlinks=agCurCfgSyslogTrapHotlinks, agCurCfgLFDFlaps=agCurCfgLFDFlaps, nsnmpProxyDrops=nsnmpProxyDrops, ipv6PmtuInfoDestIp=ipv6PmtuInfoDestIp, ospf3AreaTableMaxSize=ospf3AreaTableMaxSize, agRtcTime=agRtcTime, ospf3RoutesInfoEntry=ospf3RoutesInfoEntry, agCurCfgReminders=agCurCfgReminders, ipCurCfgIntfAnycast=ipCurCfgIntfAnycast, igmpInfoSrcTrunk=igmpInfoSrcTrunk, agCfgBootPendingReset=agCfgBootPendingReset, ospfNewCfgAreaStatus=ospfNewCfgAreaStatus, mstCistNewCfgBridgeMaxAge=mstCistNewCfgBridgeMaxAge, ipsecCurCfgIfDynamicPolicyBmap=ipsecCurCfgIfDynamicPolicyBmap, ipCurCfgIntfIp6Host=ipCurCfgIntfIp6Host, ipNewCfgIntfBootpRelay=ipNewCfgIntfBootpRelay, ipsecSaInfoFlags=ipsecSaInfoFlags, agTransfer=agTransfer, ospfAreaInfoTotalNeighbours=ospfAreaInfoTotalNeighbours, ospfNewCfgLoopIfStatus=ospfNewCfgLoopIfStatus, ospfLoopIfInfoArea=ospfLoopIfInfoArea, ipsecCurCfgManualPolicyEntry=ipsecCurCfgManualPolicyEntry, agChassis=agChassis, nbrInfoDestIp=nbrInfoDestIp, vmapGroupNewCfgAllPortsTable=vmapGroupNewCfgAllPortsTable, ospf3NewCfgIntfEncrySpi=ospf3NewCfgIntfEncrySpi, swHotlinksNone=swHotlinksNone, aclNewCfgMirrorPort=aclNewCfgMirrorPort, vnicNewCfgGroupIndex=vnicNewCfgGroupIndex, lacpCurPortState=lacpCurPortState, bgpCurCfgGroupLimit=bgpCurCfgGroupLimit, aclNewCfgSrcPort=aclNewCfgSrcPort, ospfCurCfgRangeAddr=ospfCurCfgRangeAddr, ripInfoIntfDefault=ripInfoIntfDefault, qosCurCfgCosIndex=qosCurCfgCosIndex, ipNewCfgAspathAction=ipNewCfgAspathAction, aclStatsTable=aclStatsTable, tacCurCfgPort=tacCurCfgPort, aclNewCfgDstMACMask=aclNewCfgDstMACMask, bgpInfoPeerEntry=bgpInfoPeerEntry, ospf3NewCfgRedistTable=ospf3NewCfgRedistTable, portStatsDot1PortInDiscards=portStatsDot1PortInDiscards, ipNewCfgAlistAction=ipNewCfgAlistAction, acl6NewCfgIPv6FlowLabel=acl6NewCfgIPv6FlowLabel, hardwareFABNumber=hardwareFABNumber, vrrpInfoVirtRtrID=vrrpInfoVirtRtrID, ospf3VirtIfInfoLinkLsaCksumSum=ospf3VirtIfInfoLinkLsaCksumSum, ospfCumIntfBackup=ospfCumIntfBackup, mldCurInterfaceIfIndex=mldCurInterfaceIfIndex, aclNewCfgSrcIPAddress=aclNewCfgSrcIPAddress, ospfCurCfgFixedOutRmapList=ospfCurCfgFixedOutRmapList, trunkGroupCurCfgTable=trunkGroupCurCfgTable, dhcpsnpCfg=dhcpsnpCfg, pktStatsAllocs=pktStatsAllocs, ipGatewayIPv6InfoState=ipGatewayIPv6InfoState, bgpCurCfgPeerStaticState=bgpCurCfgPeerStaticState, ospf3CurCfgReferenceBw=ospf3CurCfgReferenceBw, ripStatInRequestPkts=ripStatInRequestPkts, lacpInfoAggrPartSysId=lacpInfoAggrPartSysId, nsnmpInASNParseErrs=nsnmpInASNParseErrs, vmGroupInfoUUID=vmGroupInfoUUID, agAccessNewStrongPassword=agAccessNewStrongPassword, cpuUtilProcessStatsTable=cpuUtilProcessStatsTable, ipCurCfgGwEntry=ipCurCfgGwEntry, ipsecCurCfgManualPolicyOutAhSpi=ipsecCurCfgManualPolicyOutAhSpi, ipStatsInDelivers=ipStatsInDelivers, portStatsPhyIfOutNUcastPkts=portStatsPhyIfOutNUcastPkts, ospf3NewCfgAreaEntry=ospf3NewCfgAreaEntry, igmpFltNewCfgDelete=igmpFltNewCfgDelete, ospfCumIntfUnloop=ospfCumIntfUnloop, fdbNewCfgAddVlan=fdbNewCfgAddVlan, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd, qosNewCfgPortIndex=qosNewCfgPortIndex, ipNewCfgGwTable=ipNewCfgGwTable, vlagInfoIslPortchannel=vlagInfoIslPortchannel, ospf3NewCfgExtRangeAddr=ospf3NewCfgExtRangeAddr, agCurCfgDcbx=agCurCfgDcbx, trunkGroupInfoTableEntry=trunkGroupInfoTableEntry, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, nsnmpInTraps=nsnmpInTraps, igmpSnoopNewCfgVlanBmap=igmpSnoopNewCfgVlanBmap, vmapNewCfgEntry=vmapNewCfgEntry, igmpNewCfgQurRobustness=igmpNewCfgQurRobustness, vmapGroupNewCfgAllPortsVmapBitmap=vmapGroupNewCfgAllPortsVmapBitmap, nsnmpOutGetNexts=nsnmpOutGetNexts, bgpNewCfgPeerTtlSecHops=bgpNewCfgPeerTtlSecHops, ipsecNewCfgSelectorDstPrefix=ipsecNewCfgSelectorDstPrefix, tacCurCfgCmap=tacCurCfgCmap, ospf3IfInfoEncryKey=ospf3IfInfoEncryKey, ospf3AreaDisdHello=ospf3AreaDisdHello, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, portMgmtStatsRxFrame=portMgmtStatsRxFrame, lacpInfoPortActAdPortState=lacpInfoPortActAdPortState, agPortNewCfgBpduGuard=agPortNewCfgBpduGuard, virtVMwareNameTableUpdate=virtVMwareNameTableUpdate, vmapVlanCfgServerPorts=vmapVlanCfgServerPorts, mcastFdbNewCfgDelStaticEntry=mcastFdbNewCfgDelStaticEntry, ospf3AreaErrBadDestAddr=ospf3AreaErrBadDestAddr, failoverNewCfgTriggerMmonPort=failoverNewCfgTriggerMmonPort, agCfgDumpState=agCfgDumpState, ipv6icmpInNeighAdv=ipv6icmpInNeighAdv, agNewCfgBootp=agNewCfgBootp, sshCurCfgStatus=sshCurCfgStatus, mcastFdbNewCfgAddMac=mcastFdbNewCfgAddMac, lacpInfoPortPartOpActiv=lacpInfoPortPartOpActiv, bgpNewCfgClusterId=bgpNewCfgClusterId, ospfNewCfgVirtIntfAuthKey=ospfNewCfgVirtIntfAuthKey, agLdapConfig=agLdapConfig, ospf3CurCfgIntfEncryAuthKey=ospf3CurCfgIntfEncryAuthKey, intfInfoStatus=intfInfoStatus, ipsecCurCfgSelectorTable=ipsecCurCfgSelectorTable, fcoeConfig=fcoeConfig, ipNewCfgNwfIndex=ipNewCfgNwfIndex, mldNewInterfaceTable=mldNewInterfaceTable, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, cistBridgeMaxAge=cistBridgeMaxAge, ipsecNewCfgManualPolicyOutAhKey=ipsecNewCfgManualPolicyOutAhKey, igmpCurCfgQueryInterval=igmpCurCfgQueryInterval, ipDataRouteInfoTable=ipDataRouteInfoTable, bgpNewCfgAggrMask=bgpNewCfgAggrMask, lacpInfoPortSelected=lacpInfoPortSelected, ospfVirtIntfInfoEntry=ospfVirtIntfInfoEntry, vmapNewCfgRemoveEgressPort=vmapNewCfgRemoveEgressPort, ipv6udpNumPorts=ipv6udpNumPorts, cistBridgeForwardDelay=cistBridgeForwardDelay, lacpInfoPortAdminEna=lacpInfoPortAdminEna, bgpInfoDynamicPeerRouterId=bgpInfoDynamicPeerRouterId, agTransferDumpFileName=agTransferDumpFileName, ipFloodNewCfgFlood=ipFloodNewCfgFlood, vmapNewCfgFilterActionChangeVlan=vmapNewCfgFilterActionChangeVlan, ntpSecondaryServerRespRcvd=ntpSecondaryServerRespRcvd, ospfCurCfgLoopIfIndex=ospfCurCfgLoopIfIndex, hotlinksCurCfgTriggerMasterAdminkey=hotlinksCurCfgTriggerMasterAdminkey, icmpStatsInSrcQuenchs=icmpStatsInSrcQuenchs, virtNewCfgVMwareHelloTimer=virtNewCfgVMwareHelloTimer, ospfNewCfgAreaSpfInterval=ospfNewCfgAreaSpfInterval, ospfCumTxPkts=ospfCumTxPkts, nbrInfoInterface=nbrInfoInterface, aclCurCfgIndex=aclCurCfgIndex, virtVMwareHostPGEntry=virtVMwareHostPGEntry, vlagNewCfgLacpTableEntry=vlagNewCfgLacpTableEntry, ospfIfInfoBackupDesignatedRouterIP=ospfIfInfoBackupDesignatedRouterIP, bgpNewCfgPeerTtl=bgpNewCfgPeerTtl, ospfIntfInfoEntry=ospfIntfInfoEntry, ospf3NewCfgRedistState=ospf3NewCfgRedistState, ipsecCurCfgSelectorAction=ipsecCurCfgSelectorAction, vlagStatsPduSentFdbInactiveAdd=vlagStatsPduSentFdbInactiveAdd, dot3RateStatsTableEntry=dot3RateStatsTableEntry, radCurCfgTimeout=radCurCfgTimeout, nsnmpInBadCommunityUses=nsnmpInBadCommunityUses, ospfCurCfgVirtIntfEntry=ospfCurCfgVirtIntfEntry, ospf3CurCfgVirtIntfTable=ospf3CurCfgVirtIntfTable, ospfNewCfgStaticAddOutRmap=ospfNewCfgStaticAddOutRmap, ibm_switch=ibm_switch, txMldIfStatsMASQuery=txMldIfStatsMASQuery, vmapConfig=vmapConfig, mstCistNewCfgBridgeForwardDelay=mstCistNewCfgBridgeForwardDelay, ospfVirtIntfInfoWaitMS=ospfVirtIntfInfoWaitMS, virtNewCfgHbPort=virtNewCfgHbPort, ipv6Reasmreqs=ipv6Reasmreqs, bgpNewCfgPeerOspfState=bgpNewCfgPeerOspfState, ospfIntfNbrStart=ospfIntfNbrStart, agTransferCfgFileName=agTransferCfgFileName, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, ospfCurCfgIntfMdkey=ospfCurCfgIntfMdkey, ospf3CurCfgLSDB=ospf3CurCfgLSDB, agAccessUserCurCfgTableEntry=agAccessUserCurCfgTableEntry, vmNewCfgProfileEgressShapingBurst=vmNewCfgProfileEgressShapingBurst, agPortNewCfgBroadcastThreshold=agPortNewCfgBroadcastThreshold, agPortCurCfgTagPVID=agPortCurCfgTagPVID, vmapCurCfgUserEnable=vmapCurCfgUserEnable, ndprefixNewCfgValidLifetimeFlag=ndprefixNewCfgValidLifetimeFlag, vlagNewCfgTierId=vlagNewCfgTierId, pmNewCfgPortMirrState=pmNewCfgPortMirrState, ospfNewCfgFixedOutRmapList=ospfNewCfgFixedOutRmapList, ospfAreaIntfLoop=ospfAreaIntfLoop, bootpStats=bootpStats, ospf3AreaIntfPtop=ospf3AreaIntfPtop, mstCistCurCfgPortEdge=mstCistCurCfgPortEdge, ospfCurCfgStaticMetric=ospfCurCfgStaticMetric, virtVMwareHostDetailInfoIPAddr=virtVMwareHostDetailInfoIPAddr, ipNewCfgStaticRoute6Interface=ipNewCfgStaticRoute6Interface, vrrpStatOutGratuitousARPs=vrrpStatOutGratuitousARPs, mstCistCfg=mstCistCfg, ecpChnlRxCnt=ecpChnlRxCnt, ikeNewCfgPskRemoteTable=ikeNewCfgPskRemoteTable, aclClearStats=aclClearStats, ipv6OutReqs=ipv6OutReqs, ospf3IfNbrEvents=ospf3IfNbrEvents, vmapNewCfgDstMACAddress=vmapNewCfgDstMACAddress, tcpMGMTControlBlocksTable=tcpMGMTControlBlocksTable, recvQUdp=recvQUdp, ospfIfInfoState=ospfIfInfoState, vlagCurIslCfgPortChannel=vlagCurIslCfgPortChannel, layer2Stats=layer2Stats, aclNewCfgEntry=aclNewCfgEntry, vlagNewCfgGlobalEnable=vlagNewCfgGlobalEnable, ospf3IfInfoEncryEnable=ospf3IfInfoEncryEnable, vmNewCfgProfileVlan=vmNewCfgProfileVlan, aclNewCfgPortTableEntry=aclNewCfgPortTableEntry, agAccessUserNewCfgDelete=agAccessUserNewCfgDelete, stgNewCfgPortIndex=stgNewCfgPortIndex, lldpInfoRxTable=lldpInfoRxTable, lacp=lacp, ospfNewCfgAreaId=ospfNewCfgAreaId, private_mibs=private_mibs, ospfLoopIfInfoPtop=ospfLoopIfInfoPtop, ospfCurCfgAreaEntry=ospfCurCfgAreaEntry, ospf3TotalLsaOriginated=ospf3TotalLsaOriginated, ospfRoutesInfoIndex=ospfRoutesInfoIndex, fipsInfoAcl=fipsInfoAcl, mldIfStatsIfIndex=mldIfStatsIfIndex, vmCurCfgGroupMacVMMac=vmCurCfgGroupMacVMMac, lldpInfoRemoteDevicesPortSubtype=lldpInfoRemoteDevicesPortSubtype, portOperRmon=portOperRmon, acl6NewCfgSrcIPv6PrefixLen=acl6NewCfgSrcIPv6PrefixLen, ipCurCfgBootpBcastDomainEnable=ipCurCfgBootpBcastDomainEnable, igmpStaticMrtrCurCfgTable=igmpStaticMrtrCurCfgTable, ospf3AreaRxTxDisdStatsEntry=ospf3AreaRxTxDisdStatsEntry, radNewCfgBackdoor=radNewCfgBackdoor, fipsInfoFcoeVlan=fipsInfoFcoeVlan, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, ipStaticRouteCurPingInterval=ipStaticRouteCurPingInterval, ospfVirtIntfInfoIndex=ospfVirtIntfInfoIndex, swVlagInstanceDown=swVlagInstanceDown, aclNewCfgTcpudpReset=aclNewCfgTcpudpReset, ipStaticRouteNewPingRetries=ipStaticRouteNewPingRetries, sflowCurPortCfgTableEntry=sflowCurPortCfgTableEntry, ospfAreaTxlsAcks=ospfAreaTxlsAcks, ipNewCfgIntfDelete=ipNewCfgIntfDelete, acl6StatsTableEntry=acl6StatsTableEntry, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, bgpNewCfgPeerIndex=bgpNewCfgPeerIndex, failoverNewCfgTriggerMconTrunkRem=failoverNewCfgTriggerMconTrunkRem, vmNewCfgCheckTrustAddPort=vmNewCfgCheckTrustAddPort, stgNewCfgRemoveVlan=stgNewCfgRemoveVlan, qosNewCfgDscpState=qosNewCfgDscpState, ospf3AreaNbrChangeStatsEntry=ospf3AreaNbrChangeStatsEntry, ipCurCfgAlistEntry=ipCurCfgAlistEntry, agTransferPort=agTransferPort, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, ospf3NewCfgIntfEncryAuthType=ospf3NewCfgIntfEncryAuthType, fdbNewCfgEntryIndex=fdbNewCfgEntryIndex, ospf3StartTime=ospf3StartTime, mldCurCfgState=mldCurCfgState, ipsecNewCfgTxformIndex=ipsecNewCfgTxformIndex, hotlinksCurCfgTriggerName=hotlinksCurCfgTriggerName, ospfCurCfgState=ospfCurCfgState)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", igmpCurCfgOtherQurPresentInt=igmpCurCfgOtherQurPresentInt, ipv6icmpInRouterAdv=ipv6icmpInRouterAdv, ospf3NewCfgExtRangeAreaIndex=ospf3NewCfgExtRangeAreaIndex, ospf3Cfg=ospf3Cfg, ipCurCfgGwRetry=ipCurCfgGwRetry, ospf3AreaNbrIndex=ospf3AreaNbrIndex, ifMainIndex=ifMainIndex, allportsStatsPhysAddress=allportsStatsPhysAddress, aclNewCfgPortAddAcl=aclNewCfgPortAddAcl, sflowNewPortCfgTableEntry=sflowNewPortCfgTableEntry, igmpV3SnoopNewCfgSources=igmpV3SnoopNewCfgSources, ipCurCfgAspathAS=ipCurCfgAspathAS, ldapCurCfgPrimaryIpAddr=ldapCurCfgPrimaryIpAddr, mldCurInterfaceQueryInterval=mldCurInterfaceQueryInterval, pktStatsMediums=pktStatsMediums, agNewCfgMgmtNetEntry=agNewCfgMgmtNetEntry, bgpNewCfgGroupRemoteAddr=bgpNewCfgGroupRemoteAddr, stgNewCfgTableEntry=stgNewCfgTableEntry, dataCollection=dataCollection, ospfCurCfgAreaSpfInterval=ospfCurCfgAreaSpfInterval, ipCurCfgStaticRoute6Table=ipCurCfgStaticRoute6Table, routeClearStats=routeClearStats, ipCurCfgIntfIp6Dstun=ipCurCfgIntfIp6Dstun, agCurCfgSyslogTrapLink=agCurCfgSyslogTrapLink, ipsecCurCfgManualPolicyInEspSpi=ipsecCurCfgManualPolicyInEspSpi, lldpInfoPortsyscaptlv=lldpInfoPortsyscaptlv, ipsecNewCfgDynamicPolicyEntry=ipsecNewCfgDynamicPolicyEntry, ibmnosImage1Ver=ibmnosImage1Ver, ospf3CurCfgStaticMetricType=ospf3CurCfgStaticMetricType, ipsecCurCfgManualPolicyInAhKey=ipsecCurCfgManualPolicyInAhKey, lacpInfoPortActAdminKey=lacpInfoPortActAdminKey, virtVMware=virtVMware, igmpStaticMrtrNewCfgVersion=igmpStaticMrtrNewCfgVersion, vrrpStatBadAdvers=vrrpStatBadAdvers, agAccessUserCurCfgUId=agAccessUserCurCfgUId, qosCurCfgPriorityCoSEntry=qosCurCfgPriorityCoSEntry, ospfIntfErrNetmaskMismatch=ospfIntfErrNetmaskMismatch, ipv6OutDiscards=ipv6OutDiscards, ipNewCfgBootpBcastDomainServIndex=ipNewCfgBootpBcastDomainServIndex, vlanNewCfgVlanId=vlanNewCfgVlanId, ospfRedistributeStatic=ospfRedistributeStatic, igmpStatsTotalIgmpGroups=igmpStatsTotalIgmpGroups, ospf3AreaRxDatabase=ospf3AreaRxDatabase, igmpFltNewCfgPortState=igmpFltNewCfgPortState, agAccessUserMaxUserID=agAccessUserMaxUserID, lacpNewPortCfgTableId=lacpNewPortCfgTableId, vmapNewCfgUserEnable=vmapNewCfgUserEnable, ipNewCfgBootpBcastDomainEntry=ipNewCfgBootpBcastDomainEntry, lldpInfoPortprotidtlv=lldpInfoPortprotidtlv, markerresponsepdusTx=markerresponsepdusTx, vmPolicy=vmPolicy, ospf3NewCfgStaticRouteTag=ospf3NewCfgStaticRouteTag, ospfAreaNbrStart=ospfAreaNbrStart, vmapNewCfgAddEgressPort=vmapNewCfgAddEgressPort, bootpRelayStatsRepliesReceived=bootpRelayStatsRepliesReceived, ipNewCfgAspathAS=ipNewCfgAspathAS, lldpStatsTableEntry=lldpStatsTableEntry, igmpV3SnoopNewCfgEnaDis=igmpV3SnoopNewCfgEnaDis, vlagStatsIgmpReportsForwarded=vlagStatsIgmpReportsForwarded, ikeCurCfgIdentity=ikeCurCfgIdentity, acl6NewCfgDelete=acl6NewCfgDelete, vmapCurCfgTCPFlags=vmapCurCfgTCPFlags, dot1RateStatsTableEntry=dot1RateStatsTableEntry, ntpPrimaryServerReqSent=ntpPrimaryServerReqSent, ospf3NumberOfInterfacesUp=ospf3NumberOfInterfacesUp, ospf3NewCfgIntfNetworkType=ospf3NewCfgIntfNetworkType, vmGroupInfoPortGroup=vmGroupInfoPortGroup, ospf3CumNbrLoading=ospf3CumNbrLoading, fipsInfoFcfEntry=fipsInfoFcfEntry, ipIntfLoopbackInfoTable=ipIntfLoopbackInfoTable, lldpNewCfgPortportdesctlv=lldpNewCfgPortportdesctlv, agNewCfgSyslogSrcLoopIf=agNewCfgSyslogSrcLoopIf, failoverInfoTriggerMonId=failoverInfoTriggerMonId, ospf3CurCfgIntfInstId=ospf3CurCfgIntfInstId, lacpNewPortState=lacpNewPortState, acl6ClearStats=acl6ClearStats, aclNewCfgMbitsSec=aclNewCfgMbitsSec, vmapCurCfgDstIPAddress=vmapCurCfgDstIPAddress, lacpInfoPortActOpTimeout=lacpInfoPortActOpTimeout, ikeNewCfgPsk=ikeNewCfgPsk, igmpSnoopNewCfgVlanFastlvRem=igmpSnoopNewCfgVlanFastlvRem, stgCurCfgPortState=stgCurCfgPortState, acl6CurCfgIndex=acl6CurCfgIndex, ipNewCfgIntfLoopbackState=ipNewCfgIntfLoopbackState, bgpInfoLastErrorSubCode=bgpInfoLastErrorSubCode, aclNewCfgVLanId=aclNewCfgVLanId, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, mldStatTotalL3Ipv6SgvEntries=mldStatTotalL3Ipv6SgvEntries, ospf3CurCfgStaticRouteTagTypeManual=ospf3CurCfgStaticRouteTagTypeManual, agAccessUserNewCfgUId=agAccessUserNewCfgUId, hwFan2RPMValue=hwFan2RPMValue, bgpInfoGroupEntry=bgpInfoGroupEntry, portInfoLearning=portInfoLearning, aclNewCfgTable=aclNewCfgTable, ospfNewCfgMdkeyIndex=ospfNewCfgMdkeyIndex, agPortCurCfgLinkType=agPortCurCfgLinkType, igmpInfoExpires=igmpInfoExpires, bgpCurCfgGroupRipState=bgpCurCfgGroupRipState, vmapVlanNewCfgNonServerPortsVmapBitmap=vmapVlanNewCfgNonServerPortsVmapBitmap, mstNewCfgStpMode=mstNewCfgStpMode, ospf3IntfNbrExchange=ospf3IntfNbrExchange, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, ospfNewCfgFixedMetric=ospfNewCfgFixedMetric, ripNewCfgOspfOutRmapList=ripNewCfgOspfOutRmapList, ospf3NewCfgExtRangeEntry=ospf3NewCfgExtRangeEntry, ibmnosPortCfgTable=ibmnosPortCfgTable, ipv6InHdrerrs=ipv6InHdrerrs, pktStatsAllocFails=pktStatsAllocFails, ospf3NewCfgRangeState=ospf3NewCfgRangeState, failoverMaxTriggerEntries=failoverMaxTriggerEntries, pptNewCfgEntry=pptNewCfgEntry, qosNewCfgPriorityCoSTable=qosNewCfgPriorityCoSTable, allportsStatsOutOctetsRate=allportsStatsOutOctetsRate, ospfIntfLoop=ospfIntfLoop, bgpNewCfgAggrDelete=bgpNewCfgAggrDelete, stgCurCfgPortPriority=stgCurCfgPortPriority, vnicCurCfgVnicBw=vnicCurCfgVnicBw, ibmnosPortCfgIndx=ibmnosPortCfgIndx, ipv6PmtuEntriesClearAll=ipv6PmtuEntriesClearAll, vlagStats=vlagStats, mldCurInterfaceState=mldCurInterfaceState, agMgmtNetClear=agMgmtNetClear, vnicNewCfgGroupFailoverState=vnicNewCfgGroupFailoverState, ipMgmtRouteInfoType=ipMgmtRouteInfoType, dhcpSnoopingStatInPacketRequest=dhcpSnoopingStatInPacketRequest, ipsecNewCfgDynamicPolicyTable=ipsecNewCfgDynamicPolicyTable, allportsStatsOutBcast=allportsStatsOutBcast, vrrpCurCfgGenHoldoff=vrrpCurCfgGenHoldoff, ipsecSaStatsDstAddr=ipsecSaStatsDstAddr, aclNewCfgMeterEnable=aclNewCfgMeterEnable, vrrpVirtRtrGrpTableMaxSize=vrrpVirtRtrGrpTableMaxSize, ospfLsdbInfoAreaId=ospfLsdbInfoAreaId, swFwDownloadFailure=swFwDownloadFailure, ospfIntfTxlsUpdates=ospfIntfTxlsUpdates, vrrpInfoVirtRtrIfIndex=vrrpInfoVirtRtrIfIndex, agNewRFC4741NetconfSshPort=agNewRFC4741NetconfSshPort, vmapNewCfgSrcPort=vmapNewCfgSrcPort, ospf3IntfTxlsAcks=ospf3IntfTxlsAcks, vmapCurCfgKbitsBurst=vmapCurCfgKbitsBurst, lldpNewCfgPortmgmtaddrtlv=lldpNewCfgPortmgmtaddrtlv, agNewCfgSyslogTrapIgmpQuerier=agNewCfgSyslogTrapIgmpQuerier, icmpStatsInTimestamps=icmpStatsInTimestamps, igmpCurCfgElectionType=igmpCurCfgElectionType, mldInfoGroupAddress=mldInfoGroupAddress, agCurCfgHttpsServerPort=agCurCfgHttpsServerPort, fipsNewAutoVlan=fipsNewAutoVlan, ospf3NewCfgReferenceBw=ospf3NewCfgReferenceBw, fipsInfoFcfMac=fipsInfoFcfMac, agPortCurCfgLinkTrap=agPortCurCfgLinkTrap, ospf3CurCfgConnectedMetricType=ospf3CurCfgConnectedMetricType, ospfNumberOfLsdbEntries=ospfNumberOfLsdbEntries, igmpFltCurCfgEnaDis=igmpFltCurCfgEnaDis, ipCurCfgStaticArpTable=ipCurCfgStaticArpTable, ldapNewCfgTimeout=ldapNewCfgTimeout, agImage1Ver=agImage1Ver, stgCurCfgBrgForwardDelay=stgCurCfgBrgForwardDelay, ospfIntfTxDatabase=ospfIntfTxDatabase, ipCurCfgAlistNwf=ipCurCfgAlistNwf, ospfExtLsdbInfoAdvertisement=ospfExtLsdbInfoAdvertisement, ospfExtLsdbInfoLsid=ospfExtLsdbInfoLsid, sshNewCfgScpApplySave=sshNewCfgScpApplySave, ipCurCfgRmapEntry=ipCurCfgRmapEntry, ipsecSaStatsTable=ipsecSaStatsTable, ipNewCfgNwfMask=ipNewCfgNwfMask, aclCurCfgTCPFlags=aclCurCfgTCPFlags, lacpInfoPortAdminTable=lacpInfoPortAdminTable, bgpInfoGroupRemoteMask=bgpInfoGroupRemoteMask, ipNewCfgStaticNbrIp=ipNewCfgStaticNbrIp, failoverNewCfgTriggerMconTrunk=failoverNewCfgTriggerMconTrunk, mcastFdbCurCfgEntryIndex=mcastFdbCurCfgEntryIndex, ipv6InNadvs=ipv6InNadvs, igmpMrtrInfoQrv=igmpMrtrInfoQrv, vmapList=vmapList, portStatsClear=portStatsClear, agNewCfgMgmtNetSubnet=agNewCfgMgmtNetSubnet, ipNewCfgBootpBcastDomainBDIndex=ipNewCfgBootpBcastDomainBDIndex, lldpInfoRemoteDevicesEntry=lldpInfoRemoteDevicesEntry, lldpNewCfgPortsysnametlv=lldpNewCfgPortsysnametlv, igmpNewCfgQurStartupInt=igmpNewCfgQurStartupInt, VlanId=VlanId, hotlinksNewCfgTriggerMasterTrunk=hotlinksNewCfgTriggerMasterTrunk, igmpNewQuerierState=igmpNewQuerierState, acl6NewCfgDstPort=acl6NewCfgDstPort, vlanNewCfgDelete=vlanNewCfgDelete, ipStaticRouteClearAll=ipStaticRouteClearAll, lacpInfoAggrId=lacpInfoAggrId, ipCurCfgIntfBootpRelay=ipCurCfgIntfBootpRelay, lacpInfoAggrTable=lacpInfoAggrTable, aclCurCfgSrcIPMask=aclCurCfgSrcIPMask, vlanNewCfgAddPort=vlanNewCfgAddPort, ipsecSaStatsIndex=ipsecSaStatsIndex, bgpCurCfgPeerRemoteAs=bgpCurCfgPeerRemoteAs, ipNewCfgRmapTable=ipNewCfgRmapTable, vmapCurCfgStatistics=vmapCurCfgStatistics, ospfCurCfgEbgpMetricType=ospfCurCfgEbgpMetricType, vlagInfoRemotePriority=vlagInfoRemotePriority, stgNewCfgVlanBmap=stgNewCfgVlanBmap, ibmnosBladeHarmony=ibmnosBladeHarmony, failoverInfoCtlPortStateTable=failoverInfoCtlPortStateTable, ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, ipv6TooBigerrs=ipv6TooBigerrs, lldpInfoPortsysdescrtlv=lldpInfoPortsysdescrtlv, vmapNewCfgDelete=vmapNewCfgDelete, agNewCfgSyslogFlashSev=agNewCfgSyslogFlashSev, vmapCurCfgFilterAction=vmapCurCfgFilterAction, bgpInfoNetwork=bgpInfoNetwork, ipCurCfgNwfIndex=ipCurCfgNwfIndex, vmbwCurCfgTxAclId=vmbwCurCfgTxAclId, vmbwCurCfgTxRate=vmbwCurCfgTxRate, mstNewCfgRegionName=mstNewCfgRegionName, fipsInfoVlansFeatureIndex=fipsInfoVlansFeatureIndex, ipsecSpdInfoIndex=ipsecSpdInfoIndex, pptNewCfgPrefix=pptNewCfgPrefix, ibmnosFdbStatus=ibmnosFdbStatus, dhcpSnoopingNewCfgportRateLimit=dhcpSnoopingNewCfgportRateLimit, arpStats=arpStats, fipsInfoFcoe=fipsInfoFcoe, bgpInfoGroupName=bgpInfoGroupName, ipNewCfgBootpState=ipNewCfgBootpState, igmpFltCurCfgMcastIp2=igmpFltCurCfgMcastIp2, aclNewCfgEthernetTypeName=aclNewCfgEthernetTypeName, bgpNewCfgLocalPref=bgpNewCfgLocalPref, tacChangePassCurPass=tacChangePassCurPass, virtVMwareHostVswitchEntry=virtVMwareHostVswitchEntry, agAccessUserCurCfgName=agAccessUserCurCfgName, lldpNewCfgReinitDelay=lldpNewCfgReinitDelay, cistInfoPortEdge=cistInfoPortEdge, mstCistCurCfgPortLinkType=mstCistCurCfgPortLinkType, swValidLogin=swValidLogin, ospf3CurCfgStaticMetric=ospf3CurCfgStaticMetric, ripNewCfgIntfListen=ripNewCfgIntfListen, agCurCfgSyslogTrapServer=agCurCfgSyslogTrapServer, igmpSnoopCurCfgQInterval=igmpSnoopCurCfgQInterval, icmpStatsInAddrMasks=icmpStatsInAddrMasks, ospf3IntfRxDatabase=ospf3IntfRxDatabase, ripRedistributeFixed=ripRedistributeFixed, fipsInfoVlansId=fipsInfoVlansId, ospf3VirtIfInfoAreaId=ospf3VirtIfInfoAreaId, acl6CurCfgFilterActionChangeVlan=acl6CurCfgFilterActionChangeVlan, ospfNbrInExchState=ospfNbrInExchState, ospfTotalAreas=ospfTotalAreas, allportsStatsInErrors=allportsStatsInErrors, lldpCurCfgPortportprottlv=lldpCurCfgPortportprottlv, ospf3AreaRxTxDisdIndex=ospf3AreaRxTxDisdIndex, intfInfoAddr=intfInfoAddr, ipInfoBootpRelayState=ipInfoBootpRelayState, vmapStatsTable=vmapStatsTable, nbrInfoPortNum=nbrInfoPortNum, vlagCurCfgHlthchkKeepaliveAttempts=vlagCurCfgHlthchkKeepaliveAttempts, sfpInfoPort=sfpInfoPort, acl6CurCfgDstPortMask=acl6CurCfgDstPortMask, ospfNewCfgStaticRemoveOutRmap=ospfNewCfgStaticRemoveOutRmap, vmapGroupCfgAllPorts=vmapGroupCfgAllPorts, qosCurCfgDscpTable=qosCurCfgDscpTable)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", ospfIfInfoHello=ospfIfInfoHello, sourceAddr=sourceAddr, fdbSrcTrunk=fdbSrcTrunk, ospfLoopIfInfoBackupDesignatedRouterIpAddress=ospfLoopIfInfoBackupDesignatedRouterIpAddress, lldpInfoRemoteDevicesManAddrTable=lldpInfoRemoteDevicesManAddrTable, ospfVirtIntfInfoDeadMS=ospfVirtIntfInfoDeadMS, qosNewCfgPriorityCoSEntry=qosNewCfgPriorityCoSEntry, stgCurCfgTable=stgCurCfgTable, pvstCompatibilityNewCfgState=pvstCompatibilityNewCfgState, vmbwNewCfgTable=vmbwNewCfgTable, ipNewCfgGwIpv6Entry=ipNewCfgGwIpv6Entry, ospf3ABRType=ospf3ABRType, ecpChnlRxDrop=ecpChnlRxDrop, ospfGeneral=ospfGeneral, virtVMwareHostDetailInfoVswitch=virtVMwareHostDetailInfoVswitch, lacpCurSystemPriority=lacpCurSystemPriority, nbrInfoEntry=nbrInfoEntry, vmGroups=vmGroups, ospf3RoutesInfoCost=ospf3RoutesInfoCost, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, lldpNewCfgPortSnmpTrap=lldpNewCfgPortSnmpTrap, nbrInfoVlanId=nbrInfoVlanId, ipNewCfgBootpOpt82State=ipNewCfgBootpOpt82State, ceeConfig=ceeConfig, qosConfig=qosConfig, ospf3CurCfgIntfDead=ospf3CurCfgIntfDead, bgpCurCfgGroupNexthopSelf=bgpCurCfgGroupNexthopSelf, lldpCurCfgPortlinkaggrtlv=lldpCurCfgPortlinkaggrtlv, ospfNewCfgIbgpAddOutRmap=ospfNewCfgIbgpAddOutRmap, stpInfoTableEntry=stpInfoTableEntry, ospfRoutesInfoTable=ospfRoutesInfoTable, ospf3CurCfgNbrTable=ospf3CurCfgNbrTable, virtVMwareHostDetailInfoVMCurrentHost=virtVMwareHostDetailInfoVMCurrentHost, fdbState=fdbState, aclCurCfgStatistics=aclCurCfgStatistics, oamStatsPortLocalCriticalEvents=oamStatsPortLocalCriticalEvents, igmpSnoopCurCfgSrcIp=igmpSnoopCurCfgSrcIp, fcoe=fcoe, bgpNewCfgGroupFixedState=bgpNewCfgGroupFixedState, layer2Configs=layer2Configs, acl6NewCfgIPv6NextHeader=acl6NewCfgIPv6NextHeader, ipv6PmtuInfoSinceTime=ipv6PmtuInfoSinceTime, ipsecCurCfgTxformTable=ipsecCurCfgTxformTable, ipsecSaInfoIndex=ipsecSaInfoIndex, fipsInfoFcoeTable=fipsInfoFcoeTable, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, agMgmtNetTableMaxSize=agMgmtNetTableMaxSize, lldpCurCfgPortEntry=lldpCurCfgPortEntry, fdbStatsCurrent=fdbStatsCurrent, ospf3AreaDisdDatabase=ospf3AreaDisdDatabase, ecpChnlTxDrop=ecpChnlTxDrop, ospfAreaNbrChangeStatsEntry=ospfAreaNbrChangeStatsEntry, vlagInfoIslPortState=vlagInfoIslPortState, nbrInfoState=nbrInfoState, ospf3CurCfgHostAreaIndex=ospf3CurCfgHostAreaIndex, bgpCurCfgAggrEntry=bgpCurCfgAggrEntry, igmpSnoopNewCfgVlanAdd=igmpSnoopNewCfgVlanAdd, ospf3CumTxlsUpdates=ospf3CumTxlsUpdates, ospfSumRangesInfoTable=ospfSumRangesInfoTable, agConfigForNxtReset=agConfigForNxtReset, ceeCurCfgState=ceeCurCfgState, intfLoopbackInfoEntry=intfLoopbackInfoEntry, vmapCurCfgEthernetTypeValue=vmapCurCfgEthernetTypeValue, fipsPortCurCfgFipsEna=fipsPortCurCfgFipsEna, lldpNewCfgPortIndx=lldpNewCfgPortIndx, mldInfo=mldInfo, ospfIntfNbrDown=ospfIntfNbrDown, ipsecSpdInfoSaIndex=ipsecSpdInfoSaIndex, fdbNewCfgAgingTime=fdbNewCfgAgingTime, ospfLoopIfInfoDead=ospfLoopIfInfoDead, igmpInfoMode=igmpInfoMode, agClearStats=agClearStats, ospfAreaRxPkts=ospfAreaRxPkts, ospfTotalStubAreas=ospfTotalStubAreas, radNewCfgRetries=radNewCfgRetries, agPortNewCfgRmon=agPortNewCfgRmon, igmpCurCfgQurSrcIp=igmpCurCfgQurSrcIp, gatewayInfoIndex=gatewayInfoIndex, ospfTmrsKckOffSummary=ospfTmrsKckOffSummary, vlanInfoStatus=vlanInfoStatus, mstpDigest=mstpDigest, fipsPortNewCfgEntry=fipsPortNewCfgEntry, ospfIfInfoDesignatedRouterIP=ospfIfInfoDesignatedRouterIP, genInfo=genInfo, bgpInfoDynamicPeerTtl=bgpInfoDynamicPeerTtl, ospfCumIntfWaitTimer=ospfCumIntfWaitTimer, udldInfoNeighborPortID=udldInfoNeighborPortID, agNewCfgSyslog2Sev=agNewCfgSyslog2Sev, ripCurCfgIntfMcastUpdate=ripCurCfgIntfMcastUpdate, ldapNewCfgBackdoor=ldapNewCfgBackdoor, vmNewCfgGroupIndex=vmNewCfgGroupIndex, ospfIfNbrIpAddress=ospfIfNbrIpAddress, pmCurCfgPmirrMirrPortIndex=pmCurCfgPmirrMirrPortIndex, ripRedistributeEospf=ripRedistributeEospf, ripStatOutPackets=ripStatOutPackets, cistRootPort=cistRootPort, vmNewCfgGroupEntry=vmNewCfgGroupEntry, lacpInfoAggrMac=lacpInfoAggrMac, radCurCfgSecPorttoUse=radCurCfgSecPorttoUse, aclCurCfgEthernetTypeName=aclCurCfgEthernetTypeName, agCurRFC4741NetconfSshPort=agCurRFC4741NetconfSshPort, portStatsPhyIfInFctlPkts=portStatsPhyIfInFctlPkts, vmNewCfgProfileEgressShapingAverage=vmNewCfgProfileEgressShapingAverage, vmapNewCfgTable=vmapNewCfgTable, ospfCurCfgMdkeyEntry=ospfCurCfgMdkeyEntry, ibmnosFdbTable=ibmnosFdbTable, aclNewCfgMeterAction=aclNewCfgMeterAction, bgpNewCfgGroupIndex=bgpNewCfgGroupIndex, ospf3IntfLoop=ospf3IntfLoop, bgpNewCfgClientToClientReflection=bgpNewCfgClientToClientReflection, vmapNewCfgDstIPMask=vmapNewCfgDstIPMask, dot1RatePortInDiscards=dot1RatePortInDiscards, markerresponsepdusRx=markerresponsepdusRx, ipCurCfgGwIndex=ipCurCfgGwIndex, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, vlagNewCfgSwitchPriority=vlagNewCfgSwitchPriority, virtVMwareVMInfoMACAddr=virtVMwareVMInfoMACAddr, qosCurCfgPriorityCoSq=qosCurCfgPriorityCoSq, lldpNewCfgPortlinkaggrtlv=lldpNewCfgPortlinkaggrtlv, ospf3IfInfoTransitDelay=ospf3IfInfoTransitDelay, mstCistCurCfgPortIndex=mstCistCurCfgPortIndex, igmpFltNewCfgMcastIp2=igmpFltNewCfgMcastIp2, nsnmpSilentDrops=nsnmpSilentDrops, ospfAreaNbrLoadingDone=ospfAreaNbrLoadingDone, ibmnosSystem=ibmnosSystem, agPortNewCfgIndx=agPortNewCfgIndx, failoverInfoTriggerMonitorState=failoverInfoTriggerMonitorState, failoverNewCfgTriggerMmonKeyRem=failoverNewCfgTriggerMmonKeyRem, ospfLoopIfInfoHelloMS=ospfLoopIfInfoHelloMS, swLoginFailure=swLoginFailure, agMgmtNetConfig=agMgmtNetConfig, ipCurCfgStaticArpMAC=ipCurCfgStaticArpMAC, agNewBootNxtCliModePrompt=agNewBootNxtCliModePrompt, hwFan5RPMValue=hwFan5RPMValue, agPortNewCfgPVID=agPortNewCfgPVID, ndprefixNewCfgValidLifetime=ndprefixNewCfgValidLifetime, qosdscp=qosdscp, ospf3NewCfgIntfDelete=ospf3NewCfgIntfDelete, vrrpVirtRtrTableMaxSize=vrrpVirtRtrTableMaxSize, arpStatEntries=arpStatEntries, ospfSumRangesInfoArea=ospfSumRangesInfoArea, lldpStatsClear=lldpStatsClear, bgpCurCfgPeerTable=bgpCurCfgPeerTable, lacpStatsTable=lacpStatsTable, vmapNewCfgTagFmt=vmapNewCfgTagFmt, aclNewCfgPortAclBmap=aclNewCfgPortAclBmap, vrrpCurCfgVirtRtrGrpFastAdvertisement=vrrpCurCfgVirtRtrGrpFastAdvertisement, igmpSnoopCurCfgFlood=igmpSnoopCurCfgFlood, vrrpCurCfgVirtRtrGrpPredelay=vrrpCurCfgVirtRtrGrpPredelay, dot1RateStpPortForwardTransitions=dot1RateStpPortForwardTransitions, ipNewCfgAlistIndex=ipNewCfgAlistIndex, aclNewCfgFilterActionChangeVlan=aclNewCfgFilterActionChangeVlan, ripStatOutRequestPkts=ripStatOutRequestPkts, ospfAreaInfoSPF=ospfAreaInfoSPF, aclCurCfgMirrorPort=aclCurCfgMirrorPort, ospfIntfNbrChange=ospfIntfNbrChange, failoverNewCfgTriggerDelete=failoverNewCfgTriggerDelete, swApplyComplete=swApplyComplete, ospfSumRangesInfoAction=ospfSumRangesInfoAction, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, agAccessUserNewCfgPswd=agAccessUserNewCfgPswd, agCurCfgMgmtNetMask=agCurCfgMgmtNetMask, ospf3CurCfgNbrPriority=ospf3CurCfgNbrPriority, igmpCurQurCfgVlanIndex=igmpCurQurCfgVlanIndex, bgpNewCfgPeerTable=bgpNewCfgPeerTable, aclNewCfgDstPort=aclNewCfgDstPort, ldapCurCfgSecondaryIpAddr=ldapCurCfgSecondaryIpAddr, trunkgroup=trunkgroup, ipEcmpRoutingInfo=ipEcmpRoutingInfo, mstCfg=mstCfg, igmpSnoopNewCfgVlanClear=igmpSnoopNewCfgVlanClear, ospfGeneralInfo=ospfGeneralInfo, acl6CurCfgInprofDscpEnable=acl6CurCfgInprofDscpEnable, agCurCfgSyslog2Host=agCurCfgSyslog2Host, lldpInfoTxTransmitInterval=lldpInfoTxTransmitInterval, ospf3IntfInfoTable=ospf3IntfInfoTable, ibmnosPortCtrlEntry=ibmnosPortCtrlEntry, rxIgmpPimHellos=rxIgmpPimHellos, vmNewCfgGroupMacGroupIndex=vmNewCfgGroupMacGroupIndex, igmpStaticMrtrNewCfgTableEntry=igmpStaticMrtrNewCfgTableEntry, mldInfoMRouterIfIndex=mldInfoMRouterIfIndex, ipsecNewCfgDynamicPolicySelector=ipsecNewCfgDynamicPolicySelector, tcpControlBlocksTable=tcpControlBlocksTable, hotlinksNewCfgTriggerFdelay=hotlinksNewCfgTriggerFdelay, oamStatsPortEntry=oamStatsPortEntry, sflowNewCfgServerAddress=sflowNewCfgServerAddress, sfpInfoTable=sfpInfoTable, mldCurInterfaceQueryMaxResponseIntvl=mldCurInterfaceQueryMaxResponseIntvl, ospfNewCfgHostIndex=ospfNewCfgHostIndex, ospfCumTxDatabase=ospfCumTxDatabase, vmapVlanCurCfgNonServerPortsVlanIdx=vmapVlanCurCfgNonServerPortsVlanIdx, pptCfg=pptCfg, ripNewCfgStaticOutRmapList=ripNewCfgStaticOutRmapList, allportsStatsOutErrors=allportsStatsOutErrors, ospf3NssaAsbrDefRtTrans=ospf3NssaAsbrDefRtTrans, vmNewCfgGroupRemVm=vmNewCfgGroupRemVm, pmCurCfgPmirrDirection=pmCurCfgPmirrDirection, oamInfoPortRemoteEvaluating=oamInfoPortRemoteEvaluating, bgpInfoMetr=bgpInfoMetr, vlagStatsPduSentSystemInfo=vlagStatsPduSentSystemInfo, ibmnosPortCtrlTable=ibmnosPortCtrlTable, agPortNewCfgType=agPortNewCfgType, virtVMwareVMInfoVlanID=virtVMwareVMInfoVlanID, ospfinfo=ospfinfo, ipv6ForwDgrams=ipv6ForwDgrams, ipDataRouteInfoTag=ipDataRouteInfoTag, ldapCurCfgBackdoor=ldapCurCfgBackdoor, vmCurCfgGroupProfileName=vmCurCfgGroupProfileName, cpuProcessUtil1Min=cpuProcessUtil1Min, ospfCurCfgIbgpMetric=ospfCurCfgIbgpMetric, qosCurCfgMap8021p=qosCurCfgMap8021p, vlanNewCfgPorts=vlanNewCfgPorts, ipmcNewCfgStaticRouteIndx=ipmcNewCfgStaticRouteIndx, ipCurCfgAlistTable=ipCurCfgAlistTable, agNewCfgDhcpMgta=agNewCfgDhcpMgta, ospfCurCfgFixedMetricType=ospfCurCfgFixedMetricType, ospf3IfInfoLsaSupress=ospf3IfInfoLsaSupress, swDefGwDown=swDefGwDown, agCfgMtm=agCfgMtm, oamInfoPortTable=oamInfoPortTable, ipNewCfgIntfAddr=ipNewCfgIntfAddr, ospf3CurCfgExtRangeTranslation=ospf3CurCfgExtRangeTranslation, cistBridgeHelloTime=cistBridgeHelloTime, bgpNewCfgGroupOspfState=bgpNewCfgGroupOspfState, errMldIfStatsMASQuery=errMldIfStatsMASQuery, ikeCurCfgPropAuth=ikeCurCfgPropAuth, ospf3IfInfoBackupDesignatedRouterID=ospf3IfInfoBackupDesignatedRouterID, stgStatsPortRcvTcnBpdus=stgStatsPortRcvTcnBpdus, igmpSnoopNewCfgQInterval=igmpSnoopNewCfgQInterval, vmCurCfgCheckActionBasic=vmCurCfgCheckActionBasic, hotlinksCurCfgFdbUpdateState=hotlinksCurCfgFdbUpdateState, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, tacNewCfgCmap=tacNewCfgCmap, ospfNewCfgRipRemoveOutRmap=ospfNewCfgRipRemoveOutRmap, lacpInfoPortPartOpKey=lacpInfoPortPartOpKey, ipmcNewCfgStaticRouteEntry=ipmcNewCfgStaticRouteEntry, ospfVirtIntfInfoState=ospfVirtIntfInfoState, bgpInfoGroupTable=bgpInfoGroupTable, agentOper=agentOper, hotlinksInfoOnState=hotlinksInfoOnState, routeStatStaticEntries=routeStatStaticEntries, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, tacNewCfgRetries=tacNewCfgRetries, rxIgmpInvalidPkts=rxIgmpInvalidPkts, ospfIfNbrState=ospfIfNbrState, ospf3IfInfoDead=ospf3IfInfoDead, l2ThashCurCfgSmacState=l2ThashCurCfgSmacState, stpInfoPortForwardTransitions=stpInfoPortForwardTransitions, failoverInfoTriggerTable=failoverInfoTriggerTable, vrrpCurCfgIfTable=vrrpCurCfgIfTable, aclNewCfgInprofDscp=aclNewCfgInprofDscp, ospfNewCfgStaticMetric=ospfNewCfgStaticMetric, lacpInfoPortNtt=lacpInfoPortNtt, lldpNewCfgPortpowermditlv=lldpNewCfgPortpowermditlv)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", dot1RatePortInFrames=dot1RatePortInFrames, ipv6InRoutadvs=ipv6InRoutadvs, mldInfoGroupVlanID=mldInfoGroupVlanID, oamInfo=oamInfo, igmpFltNewCfgTable=igmpFltNewCfgTable, lldpCurCfgPortvlannametlv=lldpCurCfgPortvlannametlv, fipsInfoFcoeIndex=fipsInfoFcoeIndex, ospf3CumNbrExStart=ospf3CumNbrExStart, bgpInfoSummaryRemoteAs=bgpInfoSummaryRemoteAs, ipInterfaceTableMax=ipInterfaceTableMax, agApplyTable=agApplyTable, bgpCurCfgLocalPref=bgpCurCfgLocalPref, vmapCurCfgMirrorPort=vmapCurCfgMirrorPort, ikeCurCfgPsk=ikeCurCfgPsk, ripCurCfgEbgpMetric=ripCurCfgEbgpMetric, lldpInfoTxTable=lldpInfoTxTable, ipMgmtRouteInfoIndx=ipMgmtRouteInfoIndx, tacCurCfgRetries=tacCurCfgRetries, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, ipv6pmtuCfg=ipv6pmtuCfg, ipBootpCfg=ipBootpCfg, ipCurCfgNwfTable=ipCurCfgNwfTable, ipMgmtRouteInfoMask=ipMgmtRouteInfoMask, ifMainEntry=ifMainEntry, agCurCfgSyslogTrapCfgchg=agCurCfgSyslogTrapCfgchg, agPortNewCfgOamMode=agPortNewCfgOamMode, ospf3AreaTxDatabase=ospf3AreaTxDatabase, ikeNewCfgPropGroup=ikeNewCfgPropGroup, aclCurCfgRemarkOutProfDscpIndex=aclCurCfgRemarkOutProfDscpIndex, ospf3IfNbrRtrID=ospf3IfNbrRtrID, ospf3AreaTxlsAcks=ospf3AreaTxlsAcks, vmGroupInfoName=vmGroupInfoName, portInfoPhyIfMtu=portInfoPhyIfMtu, aclNewCfgEthernetReset=aclNewCfgEthernetReset, aclLog=aclLog, ospfCurCfgAreaId=ospfCurCfgAreaId, igmpStaticMrtrNewCfgVlanId=igmpStaticMrtrNewCfgVlanId, ospf3IfInfoPassive=ospf3IfInfoPassive, ipStatsDefaultTTL=ipStatsDefaultTTL, bootpRelayStatsRequestsReceived=bootpRelayStatsRequestsReceived, oamInfoPortLocalSatisfied=oamInfoPortLocalSatisfied, vrrpInfoVirtRtrOwnership=vrrpInfoVirtRtrOwnership, allportsStatsInErrorsRate=allportsStatsInErrorsRate, igmpStaticMrtrNewCfgTable=igmpStaticMrtrNewCfgTable, ikeNewCfgPskRemoteKey=ikeNewCfgPskRemoteKey, ospfVirtIntfInfoHelloMS=ospfVirtIntfInfoHelloMS, nsnmpOutReadOnlys=nsnmpOutReadOnlys, tcpStatsCurrEstab=tcpStatsCurrEstab, allportsStatsInOctetsRate=allportsStatsInOctetsRate, igmpFltCurCfgPortIndx=igmpFltCurCfgPortIndx, failoverInfoTriggerEntry=failoverInfoTriggerEntry, ripNewCfgIntfPoisonReverse=ripNewCfgIntfPoisonReverse, agTransferServer=agTransferServer, lldpStatsFramesDiscardedTotal=lldpStatsFramesDiscardedTotal, vrrpInfoVirtRtrPriority=vrrpInfoVirtRtrPriority, tacCurCfgPorttoUse=tacCurCfgPorttoUse, fipsInfoFcfPort=fipsInfoFcfPort, vmNewCfgGroupAddLacpKey=vmNewCfgGroupAddLacpKey, ospf3AreaNbrLoading=ospf3AreaNbrLoading, ndprefixCurCfgAutonomousFlag=ndprefixCurCfgAutonomousFlag, ospfAreaNbrChangeStats=ospfAreaNbrChangeStats, bgpCurCfgGroupFixedState=bgpCurCfgGroupFixedState, ripStatInSelfRcvPkts=ripStatInSelfRcvPkts, ecpCfg=ecpCfg, vnicNewCfgState=vnicNewCfgState, lacpCurPortActorMinLinks=lacpCurPortActorMinLinks, ospfCfg=ospfCfg, ikeNewCfgPskRemoteIndex=ikeNewCfgPskRemoteIndex, ospf3NewCfgIntfDead=ospf3NewCfgIntfDead, fdbNewCfgDelStaticEntry=fdbNewCfgDelStaticEntry, ipv6icmpOutEchoReq=ipv6icmpOutEchoReq, dot3RateStatsInternalMacReceiveErrors=dot3RateStatsInternalMacReceiveErrors, layer3Stats=layer3Stats, agentStats=agentStats, ospf3Area=ospf3Area, nsnmpInGetRequests=nsnmpInGetRequests, vnicCurCfgVnicPortIndex=vnicCurCfgVnicPortIndex, ospf3CurCfgAreaStbInterval=ospf3CurCfgAreaStbInterval, udldInfoPortBidirectionalStatus=udldInfoPortBidirectionalStatus, ospfRedistributeFixed=ospfRedistributeFixed, hotlinksCurCfgTriggerId=hotlinksCurCfgTriggerId, icmpStatsInErrors=icmpStatsInErrors, ospfCumRxDatabase=ospfCumRxDatabase, ipCurCfgIntfTable=ipCurCfgIntfTable, ospf3IfInfoInstanceID=ospf3IfInfoInstanceID, ospf3CurCfgAreaStatus=ospf3CurCfgAreaStatus, ipCurCfgIntfIndex=ipCurCfgIntfIndex, ospfNewCfgHostTable=ospfNewCfgHostTable, ospf3AreaInfoTable=ospf3AreaInfoTable, ipv6PmtuNewTimeout=ipv6PmtuNewTimeout, udpMpLocalPort=udpMpLocalPort, ospf3IntfErrDeadMismatch=ospf3IntfErrDeadMismatch, vmCurCfgGroupStg=vmCurCfgGroupStg, ipCurCfgStaticArpEntry=ipCurCfgStaticArpEntry, ospf3IfInfoIndex=ospf3IfInfoIndex, routeStatEcmpMaxStaticEntries=routeStatEcmpMaxStaticEntries, ospfIfNbrDesignatedRtr=ospfIfNbrDesignatedRtr, ospf3NewCfgIntfEncryReset=ospf3NewCfgIntfEncryReset, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, ospfIfInfoEvents=ospfIfInfoEvents, udldInfoNeighborTable=udldInfoNeighborTable, stpInfoForwardDelay=stpInfoForwardDelay, nsnmpInBadTypes=nsnmpInBadTypes, igmpNewCfgQuerierDefault=igmpNewCfgQuerierDefault, vlagStatsPduRcvFdbInactiveDel=vlagStatsPduRcvFdbInactiveDel, oamInfoPortEntry=oamInfoPortEntry, ibm_switch_mgmt=ibm_switch_mgmt, sfpInfoDevice=sfpInfoDevice, lacpInfoPortActAdDist=lacpInfoPortActAdDist, ipCurCfgRmapNexthop=ipCurCfgRmapNexthop, ospf3CurCfgIntfPrio=ospf3CurCfgIntfPrio, vlanAutoStgCurCfgState=vlanAutoStgCurCfgState, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, dot3RateStatsExcessiveCollisions=dot3RateStatsExcessiveCollisions, ospf3NewCfgRedistMetric=ospf3NewCfgRedistMetric, ripNewCfgEospfOutRmapList=ripNewCfgEospfOutRmapList, mldNewInterfaceLastListenQueryIntvl=mldNewInterfaceLastListenQueryIntvl, ospf3NewCfgHostIndex=ospf3NewCfgHostIndex, ipsecNewCfgManualPolicyOutEspAuthKey=ipsecNewCfgManualPolicyOutEspAuthKey, ipStatsOutDiscards=ipStatsOutDiscards, lldpInfoRemoteDevicesIndex=lldpInfoRemoteDevicesIndex, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, ipv6icmpInRouterSol=ipv6icmpInRouterSol, swTempReturnThreshold=swTempReturnThreshold, ospfNewCfgRangeMask=ospfNewCfgRangeMask, ospf3CurCfgIntfEncryType=ospf3CurCfgIntfEncryType, ibmnosPortCtrlSpeed=ibmnosPortCtrlSpeed, tcpStatsRetransSegs=tcpStatsRetransSegs, ospf3CurCfgExtRangePrefixLen=ospf3CurCfgExtRangePrefixLen, lldpInfoTxLocalChanged=lldpInfoTxLocalChanged, ospf3IfInfoTotalNeighbours=ospf3IfInfoTotalNeighbours, vrrpStatOutAdvers=vrrpStatOutAdvers, ipsecCurCfgIfTable=ipsecCurCfgIfTable, bgpCurCfgState=bgpCurCfgState, ipDataRouteInfoGateway=ipDataRouteInfoGateway, ospfCurCfgIntfDeadMS=ospfCurCfgIntfDeadMS, acl6CurCfgTable=acl6CurCfgTable, vrrpInfoVirtRtrAddr=vrrpInfoVirtRtrAddr, ipRouteEcmpInfoInterface=ipRouteEcmpInfoInterface, rxMldIfStatsMLDv1Report=rxMldIfStatsMLDv1Report, txIgmpGrpSpecificQueries=txIgmpGrpSpecificQueries, ipsecSpdInfoAction=ipsecSpdInfoAction, vlagCurCfgTrunkTableEntry=vlagCurCfgTrunkTableEntry, dhcpsnpInfo=dhcpsnpInfo, ipNewCfgStaticArpEntry=ipNewCfgStaticArpEntry, ospfAreaIntfUnloop=ospfAreaIntfUnloop, mstCistCurCfgBridgeForwardDelay=mstCistCurCfgBridgeForwardDelay, bgpInfo=bgpInfo, acl6NewCfgInprofDscpEnable=acl6NewCfgInprofDscpEnable, swTeamingCtrlDownTearDownBlked=swTeamingCtrlDownTearDownBlked, dhcpSnoopingNewCfgPortTableEntry=dhcpSnoopingNewCfgPortTableEntry, agCurCfgSyslogSrcLoopIf=agCurCfgSyslogSrcLoopIf, sflowNewCfgMgmtPort=sflowNewCfgMgmtPort, ipStaticArpClearAll=ipStaticArpClearAll, ipEcmpHash=ipEcmpHash, ospf3SpfHoldTime=ospf3SpfHoldTime, ipCurCfgIntfAdvInterval=ipCurCfgIntfAdvInterval, sflowNewPortCfgTableId=sflowNewPortCfgTableId, bgpCurCfgClusterId=bgpCurCfgClusterId, vmapCurCfgUser=vmapCurCfgUser, ospfNewCfgEbgpOutRmapList=ospfNewCfgEbgpOutRmapList, ospf3IntfTxlsReqs=ospf3IntfTxlsReqs, allportsStatsOutPkts=allportsStatsOutPkts, portInfoPvid=portInfoPvid, agTacacsUserMapCurCfgUId=agTacacsUserMapCurCfgUId, ospfNewCfgRangeIndex=ospfNewCfgRangeIndex, aclNewCfgFilterAction=aclNewCfgFilterAction, gatewayIPv6Info=gatewayIPv6Info, vmCurCfgGroupPorts=vmCurCfgGroupPorts, ospfIfNbrBackupDesignatedRtr=ospfIfNbrBackupDesignatedRtr, ospf3IntfRxlsAcks=ospf3IntfRxlsAcks, aclNewCfgRemarkOutProfDscpMkdnDscp=aclNewCfgRemarkOutProfDscpMkdnDscp, ospf3NewCfgExtRangeTable=ospf3NewCfgExtRangeTable, ibmnosImage2Ver=ibmnosImage2Ver, mirrPortMirr=mirrPortMirr, ospfCumNbrExchangeDone=ospfCumNbrExchangeDone, agNewCfgNTPSecServer=agNewCfgNTPSecServer, mstCistNewCfgPortPvstProtection=mstCistNewCfgPortPvstProtection, aclStatsTableEntry=aclStatsTableEntry, acl6NewCfgUser=acl6NewCfgUser, stpStats=stpStats, snmpStats=snmpStats, ospfCurCfgVirtIntfNbr=ospfCurCfgVirtIntfNbr, processName=processName, agNewCfgMgmtNetMask=agNewCfgMgmtNetMask, ospf3IntfErrBadNeighbour=ospf3IntfErrBadNeighbour, pptCurCfgEntry=pptCurCfgEntry, igmpSnoopNewCfgVlanRem=igmpSnoopNewCfgVlanRem, ipsecCurCfgDynamicPolicyPeer=ipsecCurCfgDynamicPolicyPeer, ipsecNewCfgManualPolicyIndex=ipsecNewCfgManualPolicyIndex, lldpCurCfgPortsysnametlv=lldpCurCfgPortsysnametlv, virtVMwareVMNameVMwareName=virtVMwareVMNameVMwareName, ospfCurCfgRangeState=ospfCurCfgRangeState, ospf3NewCfgIntfPrio=ospf3NewCfgIntfPrio, ospf3CumNbrChangeStats=ospf3CumNbrChangeStats, igmpStaticMrtrCurCfgVlanId=igmpStaticMrtrCurCfgVlanId, virtVMwareVMInfoUUID=virtVMwareVMInfoUUID, virtVMwareVMNameUUID=virtVMwareVMNameUUID, ipCurCfgStaticNbrPort=ipCurCfgStaticNbrPort, ospf3CumIntfDr=ospf3CumIntfDr, ospf3NewCfgAreaStatus=ospf3NewCfgAreaStatus, trunkGroupInfoPortStatus=trunkGroupInfoPortStatus, vmapNewCfgMeterAction=vmapNewCfgMeterAction, ospf3NewCfgIntfIndex=ospf3NewCfgIntfIndex, virtVMwareVMInfoVswitch=virtVMwareVMInfoVswitch, lacpdusRx=lacpdusRx, ipCurCfgRouterID=ipCurCfgRouterID, bgpNewCfgPeerFixedState=bgpNewCfgPeerFixedState, ospfSumRangesInfoNetwork=ospfSumRangesInfoNetwork, ospf3NewCfgIntfCost=ospf3NewCfgIntfCost, ipNewCfgStaticRoute6Indx=ipNewCfgStaticRoute6Indx, ipv6Stats=ipv6Stats, arpCacheClear=arpCacheClear, mstCistCurCfgPortPvstProtection=mstCistCurCfgPortPvstProtection, ipFwdCurCfgICMP6Redirect=ipFwdCurCfgICMP6Redirect, ospf3NewCfgSpfHold=ospf3NewCfgSpfHold, ospf3AreaRxTxDisdStats=ospf3AreaRxTxDisdStats, virtVMwareVMInfoPort=virtVMwareVMInfoPort, agNewCfgIdleCLITimeout=agNewCfgIdleCLITimeout, stgNewCfgAddVlan=stgNewCfgAddVlan, igmpSnoopCurCfgTimeout=igmpSnoopCurCfgTimeout, geaportInfoTable=geaportInfoTable, ospfIntfErrAreaMismatch=ospfIntfErrAreaMismatch, ipsecSpdInfoULP=ipsecSpdInfoULP, ipStats=ipStats, ipCurCfgBootpBcastDomainTable=ipCurCfgBootpBcastDomainTable, bgpCurCfgPeerFixedState=bgpCurCfgPeerFixedState, vmapNewCfgEthernetReset=vmapNewCfgEthernetReset, hotlinksStatsTriggerFdbUpdate=hotlinksStatsTriggerFdbUpdate, vmapNewCfgTCPFlags=vmapNewCfgTCPFlags, ospf3NewCfgNbrIpAddr=ospf3NewCfgNbrIpAddr, swTeamingCtrlUp=swTeamingCtrlUp, oamInfoPortRemoteMode=oamInfoPortRemoteMode, gatewayInfo=gatewayInfo, ripCurCfgIntfEntry=ripCurCfgIntfEntry, ospfNewCfgIntfIndex=ospfNewCfgIntfIndex, agCfgDumpTableSize=agCfgDumpTableSize, ipFwdNewCfgICMP6Redirect=ipFwdNewCfgICMP6Redirect, ecpChnlStag=ecpChnlStag, ospfCurCfgMdkeyTable=ospfCurCfgMdkeyTable, ipNewCfgRouterID=ipNewCfgRouterID, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, ospfAreaInfoNeighborsINITstate=ospfAreaInfoNeighborsINITstate, ospfNewCfgRangeAreaIndex=ospfNewCfgRangeAreaIndex, failoverInfoTriggerMonPortId=failoverInfoTriggerMonPortId, ipCurCfgAspathTable=ipCurCfgAspathTable, ospfLsdbInfoEntry=ospfLsdbInfoEntry, ipMgmtRouteInfoGateway1=ipMgmtRouteInfoGateway1, ipCurCfgStaticRoute6Interface=ipCurCfgStaticRoute6Interface, ospf3NewCfgExtRangeTranslation=ospf3NewCfgExtRangeTranslation, vmapNewCfgKbitsSec=vmapNewCfgKbitsSec, ospf3CurCfgSpfHold=ospf3CurCfgSpfHold, agDiffString=agDiffString, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", ospfNewCfgHostDelete=ospfNewCfgHostDelete, ospfAreaChangeStats=ospfAreaChangeStats, ipCurCfgRmapTable=ipCurCfgRmapTable, ospfNewCfgFixedRemoveOutRmap=ospfNewCfgFixedRemoveOutRmap, vmGroupInfolistEntry=vmGroupInfolistEntry, vnicCurCfgGroupPorts=vnicCurCfgGroupPorts, ikeCurCfgPropCipher=ikeCurCfgPropCipher, tacCurCfgAuthenString=tacCurCfgAuthenString, ripCurCfgIntfKey=ripCurCfgIntfKey, ipsecCurCfgManualPolicySelector=ipsecCurCfgManualPolicySelector, ospf3CurCfgExtRangeTable=ospf3CurCfgExtRangeTable, igmpSnoopNewCfgRobustness=igmpSnoopNewCfgRobustness, ospfNewCfgVirtIntfStatus=ospfNewCfgVirtIntfStatus, ospf3RedistributeConnected=ospf3RedistributeConnected, vlagInfoIslProtocol=vlagInfoIslProtocol, vmNewCfgGroupRemPort=vmNewCfgGroupRemPort, mstCistCurCfgPortTable=mstCistCurCfgPortTable, vmbwNewCfgMac=vmbwNewCfgMac, ospf3CumIntfBackup=ospf3CumIntfBackup, vmbwCurCfgEntry=vmbwCurCfgEntry, fipsOper=fipsOper, agNewCfgDhcpMgtb=agNewCfgDhcpMgtb, virtVMwareVMNameEntry=virtVMwareVMNameEntry, ospfCurCfgIntfEntry=ospfCurCfgIntfEntry, ospf3IntfNbrChangeStats=ospf3IntfNbrChangeStats, bgpCurCfgPeerRemoteAddr=bgpCurCfgPeerRemoteAddr, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, aclCurCfgPortIndex=aclCurCfgPortIndex, ospfNewCfgIntfTable=ospfNewCfgIntfTable, ospfVirtIntfInfoNbr=ospfVirtIntfInfoNbr, swECMPGatewayDown=swECMPGatewayDown, virtVMwareVMNameIndex=virtVMwareVMNameIndex, vmCurCfgGroupIndex=vmCurCfgGroupIndex, agentInfo=agentInfo, lldpInfoPortEntry=lldpInfoPortEntry, ospfAreaNbrN2way=ospfAreaNbrN2way, vmapVlanNewCfgNonServerPortsRemVmap=vmapVlanNewCfgNonServerPortsRemVmap, vmCheck=vmCheck, bgpInfoHoldtime=bgpInfoHoldtime, ipsecNewCfgState=ipsecNewCfgState, trunkLacpGroupNewCfgTableEntry=trunkLacpGroupNewCfgTableEntry, ospf3VirtIfInfoState=ospf3VirtIfInfoState, lacpInfoAggrReadyState=lacpInfoAggrReadyState, ospfNewCfgIntfMdkey=ospfNewCfgIntfMdkey, ospf3NewCfgExtRangePrefixLen=ospf3NewCfgExtRangePrefixLen, ospf3CurCfgIntfRetra=ospf3CurCfgIntfRetra, ripRedistributeIbgp=ripRedistributeIbgp, igmpFltNewCfgAction=igmpFltNewCfgAction, aclNewCfgDstIPMask=aclNewCfgDstIPMask, swAcntStrngPswdNotMet=swAcntStrngPswdNotMet, vlagNewIslCfgAdminKey=vlagNewIslCfgAdminKey, vmapVlanNewCfgNonServerPortsTableEntry=vmapVlanNewCfgNonServerPortsTableEntry, agNetbootCfgFile=agNetbootCfgFile, ldapCurCfgPort=ldapCurCfgPort, udpStatsNoPorts=udpStatsNoPorts, ipGatewayIPv6InfoAddr=ipGatewayIPv6InfoAddr, ipsecNewCfgIfDelete=ipsecNewCfgIfDelete, agPortNewCfgStpExtGuard=agPortNewCfgStpExtGuard, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, lacpInfoPortReadyN=lacpInfoPortReadyN, bgpCurCfgGroupPassword=bgpCurCfgGroupPassword, mldInfoInterfaceQuerier=mldInfoInterfaceQuerier, icmpStatsOutTimestampReps=icmpStatsOutTimestampReps, ipv6ClearIcmpStats=ipv6ClearIcmpStats, portStatsPhyIfInNUcastPkts=portStatsPhyIfInNUcastPkts, ospfAreaErrIndex=ospfAreaErrIndex, ospfExtLsdbInfoAge=ospfExtLsdbInfoAge, ipmcCurCfgStaticRouteVlanId=ipmcCurCfgStaticRouteVlanId, igmpCurVlanOperVersion=igmpCurVlanOperVersion, lacpCurPortCfgTable=lacpCurPortCfgTable, agNewCfgMgmtNetIndex=agNewCfgMgmtNetIndex, ripInfoIntfTrigUpdate=ripInfoIntfTrigUpdate, aclNewCfgFilterActionSetPrio=aclNewCfgFilterActionSetPrio, ipNewCfgIntfDadAttempts=ipNewCfgIntfDadAttempts, bgpNewCfgPeerUpdateSrcIf=bgpNewCfgPeerUpdateSrcIf, virtVMwareHostNameTable=virtVMwareHostNameTable, agNewCfgSyslogTrapVlag=agNewCfgSyslogTrapVlag, ripCurCfgEbgpOutRmapList=ripCurCfgEbgpOutRmapList, lldpInfoPortlinkaggrtlv=lldpInfoPortlinkaggrtlv, ripNewCfgEbgpRemoveOutRmap=ripNewCfgEbgpRemoveOutRmap, stgStatsPortIndex=stgStatsPortIndex, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, virtNewCfgVMwareHelloEnable=virtNewCfgVMwareHelloEnable, ripRedistributeStatic=ripRedistributeStatic, rip2Info=rip2Info, igmpCurCfgQuerier=igmpCurCfgQuerier, fipsPortNewCfgTable=fipsPortNewCfgTable, lldpInfoRxRcvFrame=lldpInfoRxRcvFrame, ospfIfNbrIntfIndex=ospfIfNbrIntfIndex, failoverNewCfgTriggerMmonTrunk=failoverNewCfgTriggerMmonTrunk, aclNewCfgPortAcl6Bmap=aclNewCfgPortAcl6Bmap, sys=sys, ospf3AreaInfoIndex=ospf3AreaInfoIndex, ipDataRouteInfoInterface=ipDataRouteInfoInterface, ipRmapCfg=ipRmapCfg, ospfCurCfgIntfHello=ospfCurCfgIntfHello, ospf3NewCfgRedistMetricType=ospf3NewCfgRedistMetricType, errMldIfStatsExcCrsv2=errMldIfStatsExcCrsv2, acl6NewCfgSrcPortMask=acl6NewCfgSrcPortMask, ospfCumNbrStart=ospfCumNbrStart, ospf3NewCfgRouterId=ospf3NewCfgRouterId, stpInfoPortLinkType=stpInfoPortLinkType, mldInfoInterfaceIfIndex=mldInfoInterfaceIfIndex, ospfLsdbInfoSequence=ospfLsdbInfoSequence, fipsCurCfgState=fipsCurCfgState, ipsecSpdInfoEntry=ipsecSpdInfoEntry, bgpInfoDynamicPeerTable=bgpInfoDynamicPeerTable, aclNewCfgTypeOfService=aclNewCfgTypeOfService, ospfLsdbInfoAdvertisement=ospfLsdbInfoAdvertisement, trunkGroupInfoTable=trunkGroupInfoTable, acl6NewCfgTCPFlags=acl6NewCfgTCPFlags, ospfLoopIfInfoEvents=ospfLoopIfInfoEvents, routeStatBgpEntries=routeStatBgpEntries, lldpNewCfgPortframesztlv=lldpNewCfgPortframesztlv, ipNewCfgAlistEntry=ipNewCfgAlistEntry, ospf3IntfNbrN2way=ospf3IntfNbrN2way, ripCurCfgIntfDefault=ripCurCfgIntfDefault, ripInfoUpdatePeriod=ripInfoUpdatePeriod, ospfIntfHello=ospfIntfHello, ospfCumTxlsAcks=ospfCumTxlsAcks, ipmcNewCfgStaticRouteVlanId=ipmcNewCfgStaticRouteVlanId, ospf3IfInfoAuthSpi=ospf3IfInfoAuthSpi, agAccessUserCurCfgPswd=agAccessUserCurCfgPswd, vmNewCfgGroupRemVmIdx=vmNewCfgGroupRemVmIdx, failoverInfoTriggerState=failoverInfoTriggerState, rxMldIfStatsExcCrsv2=rxMldIfStatsExcCrsv2, ospfAreaInfoAreaBorderRouter=ospfAreaInfoAreaBorderRouter, ipCurCfgBootpAddr=ipCurCfgBootpAddr, ospfCurCfgHostTable=ospfCurCfgHostTable, ospf3NewCfgIntfEncryAuthKey=ospf3NewCfgIntfEncryAuthKey, ospf3IntfNbrDown=ospf3IntfNbrDown, virtVMwareHostDetailInfoEntry=virtVMwareHostDetailInfoEntry, vmapStatsIndex=vmapStatsIndex, tacNewCfgSecBd=tacNewCfgSecBd, portStatsPhyIfOutFctlPkts=portStatsPhyIfOutFctlPkts, tacNewCfgEnaPassChange=tacNewCfgEnaPassChange, ipEcmpHashDIPAddr=ipEcmpHashDIPAddr, lldpInfoRemoteDevicesSystemDescription=lldpInfoRemoteDevicesSystemDescription, mldInfoMRouterPortNumber=mldInfoMRouterPortNumber, ipsecCurCfgSelectorIcmpType=ipsecCurCfgSelectorIcmpType, stgNewCfgPortPathCost=stgNewCfgPortPathCost, ospfCumNbrN2way=ospfCumNbrN2way, txMldIfStatsMASSQQuery=txMldIfStatsMASSQQuery, dot1RatePortOutFrames=dot1RatePortOutFrames, agCurCfgNTPServerPort=agCurCfgNTPServerPort, oamInfoPortIndex=oamInfoPortIndex, hotlinksNewCfgTriggerTableEntry=hotlinksNewCfgTriggerTableEntry, agNewCfgSyslogTrapOspf=agNewCfgSyslogTrapOspf, virtVMwareVMInfoType=virtVMwareVMInfoType, ipStaticRouteCurHealthcheck=ipStaticRouteCurHealthcheck, swVrrpNewMaster=swVrrpNewMaster, udldInfoNeighborDeviceID=udldInfoNeighborDeviceID, mstCistCurCfgPortTableEntry=mstCistCurCfgPortTableEntry, radCurCfgPrimaryServer=radCurCfgPrimaryServer, udpMpState=udpMpState, portStatsPhyIfOutQLen=portStatsPhyIfOutQLen, ospf3NewCfgIntfAuthType=ospf3NewCfgIntfAuthType, ripNewCfgFixedAddOutRmap=ripNewCfgFixedAddOutRmap, ipNewCfgBootpOpt82Policy=ipNewCfgBootpOpt82Policy, vmCurCfgProfileVlan=vmCurCfgProfileVlan, igmpSnoopCurCfgEnaDis=igmpSnoopCurCfgEnaDis, vmCurCfgProfilesTable=vmCurCfgProfilesTable, virtCurCfgVMwareHelloTimer=virtCurCfgVMwareHelloTimer, aclCurCfgTypeOfService=aclCurCfgTypeOfService, agNewCfgSyslogTrapHotlinks=agNewCfgSyslogTrapHotlinks, agCurCfgBootp=agCurCfgBootp, ospfCurCfgMdkeyKey=ospfCurCfgMdkeyKey, ipsecCurCfgManualPolicyOutEspEncKey=ipsecCurCfgManualPolicyOutEspEncKey, ipNewCfgBootpBcastDomainEnable=ipNewCfgBootpBcastDomainEnable, failoverCurCfgTriggerId=failoverCurCfgTriggerId, ospf3CumRxlsUpdates=ospf3CumRxlsUpdates, ospfCurCfgVirtIntfHelloMS=ospfCurCfgVirtIntfHelloMS, ipMgmtRouteInfoMetric=ipMgmtRouteInfoMetric, ipCurCfgBootpBcastDomainEntry=ipCurCfgBootpBcastDomainEntry, ikeCurCfgPskLocalKey=ikeCurCfgPskLocalKey, agNewCfgCpuRateLimitBpdu=agNewCfgCpuRateLimitBpdu, ospf3AreaErrOptionsMismatch=ospf3AreaErrOptionsMismatch, agLastSetErrorReason=agLastSetErrorReason, stpInfoHelloTime=stpInfoHelloTime, fdbCurCfgAdminkey=fdbCurCfgAdminkey, udldInfoPortNeighborCount=udldInfoPortNeighborCount, failoverCurCfgTriggerMconKey=failoverCurCfgTriggerMconKey, ldapNewCfgSecondaryIpAddr=ldapNewCfgSecondaryIpAddr, icmpStatsInRedirects=icmpStatsInRedirects, trunkGroupCurCfgState=trunkGroupCurCfgState, portStatsDot1TpLearnedEntryDiscards=portStatsDot1TpLearnedEntryDiscards, ospfCurCfgStaticOutRmapList=ospfCurCfgStaticOutRmapList, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, ipNewCfgRmapState=ipNewCfgRmapState, vmapGroupCurCfgNonServerPortsTableEntry=vmapGroupCurCfgNonServerPortsTableEntry, snmpClearStats=snmpClearStats, ipNewCfgIntfLoopbackTable=ipNewCfgIntfLoopbackTable, ospfAreaInfoLsTypesAccepted=ospfAreaInfoLsTypesAccepted, agCurCfgTftpServerPort=agCurCfgTftpServerPort, ntpPrimaryServerUpdates=ntpPrimaryServerUpdates, ospf3IfNbrEntry=ospf3IfNbrEntry, gatewayInfoEntry=gatewayInfoEntry, stgCurCfgPortPathCost=stgCurCfgPortPathCost, nsnmpInBadCommunityNames=nsnmpInBadCommunityNames, fcoeStatsFcoeRemoved=fcoeStatsFcoeRemoved, agNewCfgSyslog2HostPort=agNewCfgSyslog2HostPort, vlagCurCfgLacpKey=vlagCurCfgLacpKey, sfpInfoTXEnable=sfpInfoTXEnable, ospfCurCfgEbgpMetric=ospfCurCfgEbgpMetric, ipsecCurCfgManualPolicyOutEspSpi=ipsecCurCfgManualPolicyOutEspSpi, tacNewCfgState=tacNewCfgState, arpInfoEntry=arpInfoEntry, agNewCfgLFDTime=agNewCfgLFDTime, agSyslogMsgIndex=agSyslogMsgIndex, failoverNewCfgTriggerMconKey=failoverNewCfgTriggerMconKey, vmGroupInfoVSwitch=vmGroupInfoVSwitch, pptCurCfgPrecedence=pptCurCfgPrecedence, agPortCurCfgPortName=agPortCurCfgPortName, ipsecCurCfgIfManualPolicyBmap=ipsecCurCfgIfManualPolicyBmap, ecpCurCfgRetrans=ecpCurCfgRetrans, ldapNewCfgPort=ldapNewCfgPort, allportsStatsSpeed=allportsStatsSpeed, bgpNewCfgPeerRemoveInRmap=bgpNewCfgPeerRemoveInRmap, ipNewCfgBootpGlobalServerAddress=ipNewCfgBootpGlobalServerAddress, fipsInfoFcoeCount=fipsInfoFcoeCount, dhcpInfo=dhcpInfo, igmpInfoGroupId=igmpInfoGroupId, mstCistDefaultCfg=mstCistDefaultCfg, portStatsPhyIfOutDiscards=portStatsPhyIfOutDiscards, ospfCumIntfLoop=ospfCumIntfLoop, hwFan4RPMValue=hwFan4RPMValue, ipRoute6Info=ipRoute6Info, vlagStatsPduSentOther=vlagStatsPduSentOther, ospfNewCfgMdkeyTable=ospfNewCfgMdkeyTable, ospfCumRxlsUpdates=ospfCumRxlsUpdates, portInfoPhyIfPhysAddress=portInfoPhyIfPhysAddress, ospf3RoutesInfoIndex=ospf3RoutesInfoIndex, ipv6Fragfails=ipv6Fragfails, igmpCurCfgQuerierOnOff=igmpCurCfgQuerierOnOff, errMldIfStatsGeneralQuery=errMldIfStatsGeneralQuery, agSoftwareVersion=agSoftwareVersion, radCurCfgAuthenSecondString=radCurCfgAuthenSecondString, agNewCfgSyslogTrapIgmpGroup=agNewCfgSyslogTrapIgmpGroup, rxMldIfStatsBlockSlcrsv2=rxMldIfStatsBlockSlcrsv2, ospfLoopIfInfoTotalNeighbours=ospfLoopIfInfoTotalNeighbours, bgpCurCfgPeerClient=bgpCurCfgPeerClient, nbrInfo=nbrInfo, agTransferLastActionStatus=agTransferLastActionStatus, ospf3IntfErrOptionsMismatch=ospf3IntfErrOptionsMismatch, hwManufacturingDate=hwManufacturingDate, bgpCurCfgPeerIndex=bgpCurCfgPeerIndex, virtVMwareHostDetailInfoHostName=virtVMwareHostDetailInfoHostName, ibmnosFdbVlanId=ibmnosFdbVlanId, ospf3NewCfgNssaAsbrDfRtTrans=ospf3NewCfgNssaAsbrDfRtTrans, dhcpInfoMacAddr=dhcpInfoMacAddr, agCurCfgNTPServer=agCurCfgNTPServer, vlagNewCfgLacpKey=vlagNewCfgLacpKey, swLACPPortUnblocked=swLACPPortUnblocked)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", ripNewCfgIntfTrigUpdate=ripNewCfgIntfTrigUpdate, ospfNewCfgRangeDelete=ospfNewCfgRangeDelete, dhcpSnoopingBindingInfoTable=dhcpSnoopingBindingInfoTable, dnsNewCfgFirstRequestAddr=dnsNewCfgFirstRequestAddr, fdbStatsClear=fdbStatsClear, ospf3AreaDisdlsAcks=ospf3AreaDisdlsAcks, aclNewCfgDstMACAddress=aclNewCfgDstMACAddress, vmNewCfgProfileShapingBurst=vmNewCfgProfileShapingBurst, tcpControlBlocksTableEntry=tcpControlBlocksTableEntry, radNewCfgTimeout=radNewCfgTimeout, ospfCurCfgMdkeyIndex=ospfCurCfgMdkeyIndex, aclCurCfgDstPortMask=aclCurCfgDstPortMask, vmCurCfgGroupTagState=vmCurCfgGroupTagState, bgpCurCfgPeerDefaultAction=bgpCurCfgPeerDefaultAction, bgpNewCfgAsn4Comp=bgpNewCfgAsn4Comp, igmpNewVlanOperVersion=igmpNewVlanOperVersion, ipsecSaStatsUsageTime=ipsecSaStatsUsageTime, icmpStatsInMsgs=icmpStatsInMsgs, ospf3TotalNumberOfInterfaces=ospf3TotalNumberOfInterfaces, swFanFailureFixed=swFanFailureFixed, ospf3CurCfgIntfAuthEnable=ospf3CurCfgIntfAuthEnable, igmpSnoopNewCfgVlanFastlvAdd=igmpSnoopNewCfgVlanFastlvAdd, tacCurCfgSrcLoopIf=tacCurCfgSrcLoopIf, oamStatsPortUnsupTx=oamStatsPortUnsupTx, failoverNewCfgTriggerId=failoverNewCfgTriggerId, ospf3CurCfgExtRangeAreaIndex=ospf3CurCfgExtRangeAreaIndex, virtVMwareHostDetailInfoUUID=virtVMwareHostDetailInfoUUID, ospf3AreaNbrExStart=ospf3AreaNbrExStart, ipsecNewCfgIfAddManualPolicy=ipsecNewCfgIfAddManualPolicy, tcpStats=tcpStats, vmapNewCfgEthernetTypeName=vmapNewCfgEthernetTypeName, icmpStatsOutMsgs=icmpStatsOutMsgs, bgpInfoDynamicReceivedUpdates=bgpInfoDynamicReceivedUpdates, ospfCurCfgLSDB=ospfCurCfgLSDB, agCfgBootNxtResetTime=agCfgBootNxtResetTime, ripNewCfgEbgpOutRmapList=ripNewCfgEbgpOutRmapList, swDefAdminDisable=swDefAdminDisable, bgpInfoGroupState=bgpInfoGroupState, vlanCurCfgVlanName=vlanCurCfgVlanName, igmpNewCfgQurMaxRespTime=igmpNewCfgQurMaxRespTime, aclNewCfgDstPortMask=aclNewCfgDstPortMask, ospf3CumRxHello=ospf3CumRxHello, ospf3IntfErrHelloNoNbr=ospf3IntfErrHelloNoNbr, vnicNewCfgVnicPortIndex=vnicNewCfgVnicPortIndex, aclCurCfgSrcMACAddress=aclCurCfgSrcMACAddress, lldpNewCfgMsgTxInt=lldpNewCfgMsgTxInt, ipsecSpdInfoSaSecuProto=ipsecSpdInfoSaSecuProto, ospf3IntfRxlsUpdates=ospf3IntfRxlsUpdates, portInfoPhyIfDescr=portInfoPhyIfDescr, igmpCurCfgQurStartupInt=igmpCurCfgQurStartupInt, igmpCurCfgQurRobustness=igmpCurCfgQurRobustness, ibmnosReset=ibmnosReset, ipRoute6InfoNextHop=ipRoute6InfoNextHop, agCurCfgDefipMgtb=agCurCfgDefipMgtb, localPort=localPort, ospf3NewCfgAreaDefaultMetric=ospf3NewCfgAreaDefaultMetric, ripInfoIntfAddress=ripInfoIntfAddress, agPortNewCfgDLFThreshold=agPortNewCfgDLFThreshold, radNewCfgPort=radNewCfgPort, ipmcCurCfgStaticRouteHostBmap=ipmcCurCfgStaticRouteHostBmap, bgpInfoPeerTtl=bgpInfoPeerTtl, agCurCfgSyslogTrapLacp=agCurCfgSyslogTrapLacp, bgpInfoDynamicPeerGroup=bgpInfoDynamicPeerGroup, ospf3IntfErrRxOnPasv=ospf3IntfErrRxOnPasv, vlagInfoInstanceEntry=vlagInfoInstanceEntry, ipv6PmtuInfoTable=ipv6PmtuInfoTable, vmapVlanCurCfgAllPortsTableEntry=vmapVlanCurCfgAllPortsTableEntry, vmNewCfgGroupAddVmIdx=vmNewCfgGroupAddVmIdx, highTotalStats=highTotalStats, tcpStatsCurrConn=tcpStatsCurrConn, ipNewCfgRmapLp=ipNewCfgRmapLp, bgpNewCfgGroupUpdateSrcIf=bgpNewCfgGroupUpdateSrcIf, rip2CurCfgState=rip2CurCfgState, rxMldIfStatsMASQuery=rxMldIfStatsMASQuery, bgpCurCfgGroupMetric=bgpCurCfgGroupMetric, agPortNewCfgUdld=agPortNewCfgUdld, agNewRFC4741NetconfAccess=agNewRFC4741NetconfAccess, stgStatsPortTableEntry=stgStatsPortTableEntry, ospf3NewCfgIntfLsaSupress=ospf3NewCfgIntfLsaSupress, aclNewCfgOutprofDscpEnable=aclNewCfgOutprofDscpEnable, failoverNewCfgOnState=failoverNewCfgOnState, ntpSecondaryServerUpdates=ntpSecondaryServerUpdates, mldInfoGroupFwd=mldInfoGroupFwd, fipsInfoFcf=fipsInfoFcf, ipNewCfgRmapNexthop=ipNewCfgRmapNexthop, stgStatsStpIndex=stgStatsStpIndex, vmNewCfgGroupVlan=vmNewCfgGroupVlan, agPortTableMaxEnt=agPortTableMaxEnt, virtVMwareHostDetailInfoPort=virtVMwareHostDetailInfoPort, ospfIntfErrorStatsEntry=ospfIntfErrorStatsEntry, ospfNewCfgVirtIntfTable=ospfNewCfgVirtIntfTable, vnicNewCfgGroupState=vnicNewCfgGroupState, mcastFdbNewCfgAddPort=mcastFdbNewCfgAddPort, ipsecNewCfgDynamicPolicyLifetime=ipsecNewCfgDynamicPolicyLifetime, dhcpSnoopingBindingInfoEntry=dhcpSnoopingBindingInfoEntry, ospfExtLsdbInfoTable=ospfExtLsdbInfoTable, igmpSnoopSetToDefault=igmpSnoopSetToDefault, vnicNewCfgGroupEntry=vnicNewCfgGroupEntry, ipsecCurCfgManualPolicyOutAhKey=ipsecCurCfgManualPolicyOutAhKey, ipNewCfgStaticArpTable=ipNewCfgStaticArpTable, ospf3NewCfgHostState=ospf3NewCfgHostState, swValidLogout=swValidLogout, ipNewCfgGwIpv6Addr=ipNewCfgGwIpv6Addr, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, vmapCurCfgTos=vmapCurCfgTos, ospf3CurCfgExitOverflow=ospf3CurCfgExitOverflow, fipsPortCurCfgFcfMode=fipsPortCurCfgFcfMode, lldpInfoPortvlannametlv=lldpInfoPortvlannametlv, radCurCfgSecBd=radCurCfgSecBd, ipCurCfgIntfAdvMtu=ipCurCfgIntfAdvMtu, ospf3IntfDisdDatabase=ospf3IntfDisdDatabase, ipNewCfgStaticNbrVlan=ipNewCfgStaticNbrVlan, hwFan3RPMValue=hwFan3RPMValue, ospfAreaInfoIndex=ospfAreaInfoIndex, gatewayInfoAddr=gatewayInfoAddr, ospf3Version=ospf3Version, agCurCfgSyslogFlashSev=agCurCfgSyslogFlashSev, vmapCurCfgTypeOfService=vmapCurCfgTypeOfService, ospf3AreaInfoVirtNeighborsFULLstate=ospf3AreaInfoVirtNeighborsFULLstate, aclLogNewRateLimit=aclLogNewRateLimit, ospfCurCfgVirtIntfAuthKey=ospfCurCfgVirtIntfAuthKey, hwSwitchSoftwareVersion=hwSwitchSoftwareVersion, agPortNewCfgFloodBlocking=agPortNewCfgFloodBlocking, acl6CurCfgDstIPv6PrefixLen=acl6CurCfgDstIPv6PrefixLen, ospfAreaChangeStatsEntry=ospfAreaChangeStatsEntry, dhcpSnoopingBindingInfoPort=dhcpSnoopingBindingInfoPort, ipmcCurCfgStaticRouteAdminkeys=ipmcCurCfgStaticRouteAdminkeys, failoverNewCfgTriggerMconPort=failoverNewCfgTriggerMconPort, agCurCfgSyslogTrapFailover=agCurCfgSyslogTrapFailover, lldpNewCfgNotifInt=lldpNewCfgNotifInt, ospfNewCfgIntfTrans=ospfNewCfgIntfTrans, ipsecCurCfgDynamicPolicyIndex=ipsecCurCfgDynamicPolicyIndex, nsnmpInReadOnlys=nsnmpInReadOnlys, ipv6icmpInParamprob=ipv6icmpInParamprob, cistInfoPortPathCost=cistInfoPortPathCost, ipsecCurCfgSelectorProto=ipsecCurCfgSelectorProto, tacNewCfgSrcLoopIf=tacNewCfgSrcLoopIf, portMgmtStatsRxpackets=portMgmtStatsRxpackets, allportsStatsInDiscards=allportsStatsInDiscards, agPortCurCfgDLFThresholdRate=agPortCurCfgDLFThresholdRate, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, ipNewCfgAlistDelete=ipNewCfgAlistDelete, tacNewCfgBackdoor=tacNewCfgBackdoor, stgCurCfgState=stgCurCfgState, bootpRelayStatsRequestsDroppedNoRelay=bootpRelayStatsRequestsDroppedNoRelay, sfpInfoTableEntry=sfpInfoTableEntry, lacpInfoPortActOpAggr=lacpInfoPortActOpAggr, bgpCurCfgPeerUpdateSrcLoopIf=bgpCurCfgPeerUpdateSrcLoopIf, lacpInfoPortOperTableEntry=lacpInfoPortOperTableEntry, ospfNewCfgIntfRetra=ospfNewCfgIntfRetra, ipNewCfgAlistState=ipNewCfgAlistState, ospfIntfChangeStatsEntry=ospfIntfChangeStatsEntry, ipNewCfgStaticRoute6Entry=ipNewCfgStaticRoute6Entry, igmpSnoopStatsEntry=igmpSnoopStatsEntry, bgpCurCfgDscp=bgpCurCfgDscp, udldInfoPortOperationalStatus=udldInfoPortOperationalStatus, ospf3CurCfgConnectedRouteTag=ospf3CurCfgConnectedRouteTag, ospfNewCfgIntfDead=ospfNewCfgIntfDead, dot3RateStatsFCSErrors=dot3RateStatsFCSErrors, bgpNewCfgGroupNexthopSelf=bgpNewCfgGroupNexthopSelf, vmapGroupCfg=vmapGroupCfg, agApplyTableEntry=agApplyTableEntry, ospf3NewCfgAreaIndex=ospf3NewCfgAreaIndex, vmNewCfgGroupAddPort=vmNewCfgGroupAddPort, bgpNewCfgAggrAddr=bgpNewCfgAggrAddr, failoverNewCfgTriggerMconKeyAdd=failoverNewCfgTriggerMconKeyAdd, vlagStatsIslInOctets=vlagStatsIslInOctets, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, agAccessUserCurCfgState=agAccessUserCurCfgState, ospfNewCfgIntfStatus=ospfNewCfgIntfStatus, ospf3NewCfgIntfAuthReset=ospf3NewCfgIntfAuthReset, agNewHttpAcces=agNewHttpAcces, hotlinksInfoBpduState=hotlinksInfoBpduState, igmpV3SnoopCurCfgExcludeEnaDis=igmpV3SnoopCurCfgExcludeEnaDis, ipv6OutNorts=ipv6OutNorts, agCurCfgLoginNotice=agCurCfgLoginNotice, ospf3IfNbrIntfInstanceID=ospf3IfNbrIntfInstanceID, ospfIntfNbrIndex=ospfIntfNbrIndex, ospfNewCfgVirtIntfDelete=ospfNewCfgVirtIntfDelete, nbrClear=nbrClear, vmapCurCfgMeterAction=vmapCurCfgMeterAction, fdbNewCfgAddAdminkey=fdbNewCfgAddAdminkey, ospfRoutesInfoType=ospfRoutesInfoType, lacpNewSystemTimeoutTime=lacpNewSystemTimeoutTime, vlagStatsPduSentISLHello=vlagStatsPduSentISLHello, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, ospf3TmrsKckOffNbrProbe=ospf3TmrsKckOffNbrProbe, hotlinksStatsTriggerTableEntry=hotlinksStatsTriggerTableEntry, stgStatsPortTable=stgStatsPortTable, vlanCurCfgPrVlanMapPriId=vlanCurCfgPrVlanMapPriId, lacpClearStats=lacpClearStats, stpInfoMaxAge=stpInfoMaxAge, agNewCfgSyslog2Host=agNewCfgSyslog2Host, pmNewCfgPmirrDirection=pmNewCfgPmirrDirection, ndprefixNewCfgState=ndprefixNewCfgState, ospfNewCfgHostState=ospfNewCfgHostState, ikeNewCfgPropCipher=ikeNewCfgPropCipher, lacpInfoAggrNumPorts=lacpInfoAggrNumPorts, lldpInfoPortportdesctlv=lldpInfoPortportdesctlv, lacpInfoPortRxState=lacpInfoPortRxState, agPortCurCfgType=agPortCurCfgType, ospfCurCfgRangeMask=ospfCurCfgRangeMask, ipNewCfgBootpBcastDomainIndex=ipNewCfgBootpBcastDomainIndex, ipv6InUnkprots=ipv6InUnkprots, ndprefixNewCfgOnlinkFlag=ndprefixNewCfgOnlinkFlag, ndprefixNewCfgEntry=ndprefixNewCfgEntry, ospf3CurCfgIntfEncryAuthType=ospf3CurCfgIntfEncryAuthType, vlagStatsPduRcvOther=vlagStatsPduRcvOther, ipv6InMcasts=ipv6InMcasts, ipmcCurCfgStaticRouteTrunks=ipmcCurCfgStaticRouteTrunks, bgpNewCfgGroupClient=bgpNewCfgGroupClient, vrrpOperVirtRtrIndex=vrrpOperVirtRtrIndex, vlagInstanceState=vlagInstanceState, vlagInfoHlthchkStatus=vlagInfoHlthchkStatus, fipsInfoVlansTable=fipsInfoVlansTable, bgpNewCfgGroupOutRmapList=bgpNewCfgGroupOutRmapList, vmapGroupNewCfgNonServerPortsTableEntry=vmapGroupNewCfgNonServerPortsTableEntry, PortNumber=PortNumber, ospfCumNbrN1way=ospfCumNbrN1way, virtNewCfgVirtCenterIp=virtNewCfgVirtCenterIp, vmbwCurCfgTxBurst=vmbwCurCfgTxBurst, ibmnosFdb=ibmnosFdb, vmbwCurCfgCtrl=vmbwCurCfgCtrl, vrrpNewCfgVirtRtrGrpPredelay=vrrpNewCfgVirtRtrGrpPredelay, nsnmpInBadVersions=nsnmpInBadVersions, ospf3CurCfgRangeState=ospf3CurCfgRangeState, ipCurCfgIntfOtherCfg=ipCurCfgIntfOtherCfg, ospfArea=ospfArea, virt=virt, agCurCfgIdleCLITimeout=agCurCfgIdleCLITimeout, ospfNewCfgIbgpMetricType=ospfNewCfgIbgpMetricType, agCurCfgSyslogTrapIgmpQuerier=agCurCfgSyslogTrapIgmpQuerier, hotlinksCurCfgTriggerBackupPort=hotlinksCurCfgTriggerBackupPort, hotlinksCurCfgTriggerMasterPort=hotlinksCurCfgTriggerMasterPort, vlanCurCfgTable=vlanCurCfgTable, virtCurCfgVMwareHelloAddr=virtCurCfgVMwareHelloAddr, ospfExtLsdbInfoEntry=ospfExtLsdbInfoEntry, aclNewCfgDstIPAddress=aclNewCfgDstIPAddress, pmNewCfgPmirrMirrPortIndex=pmNewCfgPmirrMirrPortIndex, ndprefixCurCfgPrefixLen=ndprefixCurCfgPrefixLen, destAddr=destAddr, lacpNewPortActorMinLinks=lacpNewPortActorMinLinks, ipStaticNbrCfg=ipStaticNbrCfg, vmapGroupCurCfgNonServerPortsTable=vmapGroupCurCfgNonServerPortsTable, agNewCfgNTPSrcLoopIf=agNewCfgNTPSrcLoopIf, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, ospfNewCfgFixedMetricType=ospfNewCfgFixedMetricType, bgpInfoGroupRASIndex=bgpInfoGroupRASIndex, ospf3ExternalLsa=ospf3ExternalLsa, vnicNewCfgGroupAddVnic=vnicNewCfgGroupAddVnic, bgpNewCfgGroupOrig=bgpNewCfgGroupOrig, ipMgmtRouteInfoGateway2=ipMgmtRouteInfoGateway2, bgpNewCfgPeerState=bgpNewCfgPeerState, PYSNMP_MODULE_ID=ibmGbTORG8124MIB)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", agPortConfig=agPortConfig, vlagInfoOperaRole=vlagInfoOperaRole, agCurCfgHttpsServerAccess=agCurCfgHttpsServerAccess, dot1RateStatsTable=dot1RateStatsTable, agPortNewCfgState=agPortNewCfgState, ospfCurCfgIntfRetra=ospfCurCfgIntfRetra, agNewCfgNTPServer=agNewCfgNTPServer, vmapGroupCurCfgAllPortsTableEntry=vmapGroupCurCfgAllPortsTableEntry, agNewCfgSyslogTrapMld=agNewCfgSyslogTrapMld, hwTemperatureSensor3=hwTemperatureSensor3, ospf3CurCfgNbrIndex=ospf3CurCfgNbrIndex, thashL2=thashL2, vlanNewCfgTable=vlanNewCfgTable, dhcpSnoopingBindingInfoType=dhcpSnoopingBindingInfoType, ipv6icmpInNeighSol=ipv6icmpInNeighSol, hotlinksNewCfgBpduState=hotlinksNewCfgBpduState, lacpInfoPortActSysPrio=lacpInfoPortActSysPrio, hotlinksNewCfgTriggerMasterAdminkey=hotlinksNewCfgTriggerMasterAdminkey, bgpNewCfgPeerStaticState=bgpNewCfgPeerStaticState, bgpNewCfgGroupStaticState=bgpNewCfgGroupStaticState, agCurCfgDhcpMgta=agCurCfgDhcpMgta, hwTemperatureSensor1=hwTemperatureSensor1, ipCurCfgStaticRoute6DestIp=ipCurCfgStaticRoute6DestIp, ospf3AreaIntfAllEvents=ospf3AreaIntfAllEvents, ospfNewCfgAreaMetric=ospfNewCfgAreaMetric, mstCistCurCfgBridgePriority=mstCistCurCfgBridgePriority, ipGatewayIpv6TableMax=ipGatewayIpv6TableMax, ikeNewCfgPskRemoteEntry=ikeNewCfgPskRemoteEntry, sflowCurCfgServerPort=sflowCurCfgServerPort, ripCurCfgIbgpOutRmapList=ripCurCfgIbgpOutRmapList, bgpNewCfgGroupRemoveInRmap=bgpNewCfgGroupRemoveInRmap, agSavePending=agSavePending, agCurCfgSyslogConsoleSev=agCurCfgSyslogConsoleSev, ospf3CumDisdlsReqs=ospf3CumDisdlsReqs, pmCurCfgPortMonitorTable=pmCurCfgPortMonitorTable, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, vmapNewCfgProtocol=vmapNewCfgProtocol, mpTcbStats=mpTcbStats, ospf3CurCfgExtRangeIndex=ospf3CurCfgExtRangeIndex, ospf3VirtIntfInfoTable=ospf3VirtIntfInfoTable, agCurCfgTrapSrcLoopIf=agCurCfgTrapSrcLoopIf, ipsecNewCfgIfDelDynamicPolicy=ipsecNewCfgIfDelDynamicPolicy, ospfCurCfgAreaAuthType=ospfCurCfgAreaAuthType, lacpNewPortCfgTable=lacpNewPortCfgTable, igmpMrtrInfoTable=igmpMrtrInfoTable, ipAlistTableMax=ipAlistTableMax, ospfCurCfgIntfPtop=ospfCurCfgIntfPtop, bgpInfoDynamicHoldtime=bgpInfoDynamicHoldtime, agPortCurCfgFloodBlocking=agPortCurCfgFloodBlocking, ospf3IntfDrOther=ospf3IntfDrOther, ldapCurCfgDomain=ldapCurCfgDomain, ripCurCfgIntfPoisonReverse=ripCurCfgIntfPoisonReverse, fipsNewCfgState=fipsNewCfgState, lldpInfoPortpowermditlv=lldpInfoPortpowermditlv, vnicNewCfgGroupDelete=vnicNewCfgGroupDelete, ipv6icmpOutParamprob=ipv6icmpOutParamprob, portStatsPhyIfInFctlPktsRate=portStatsPhyIfInFctlPktsRate, ospf3AreaErrRxVerMismatch=ospf3AreaErrRxVerMismatch, agPortNewCfgMacAddrNotif=agPortNewCfgMacAddrNotif, ripCurCfgOspfOutRmapList=ripCurCfgOspfOutRmapList, lldpInfoRxTooManyNeighborTimer=lldpInfoRxTooManyNeighborTimer, igmpMrtrInfoVlanId=igmpMrtrInfoVlanId, failoverNewCfgTriggerMmonPortRem=failoverNewCfgTriggerMmonPortRem, ikeCurCfgPskRemoteKey=ikeCurCfgPskRemoteKey, bgpInfoIndex=bgpInfoIndex, ripInfoIntfMcastUpdate=ripInfoIntfMcastUpdate, agTransferHostCertFileName=agTransferHostCertFileName, bgpCurCfgAsn4Comp=bgpCurCfgAsn4Comp, vrrpCurCfgVirtRtrPreDelay=vrrpCurCfgVirtRtrPreDelay, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, oamInfoPortRemoteStable=oamInfoPortRemoteStable, igmpFltNewCfgPortTable=igmpFltNewCfgPortTable, ospf3AreaErrRxMismatchInstID=ospf3AreaErrRxMismatchInstID, aclNewCfgIndex=aclNewCfgIndex, nsnmpOutPkts=nsnmpOutPkts, ripInfoIntfPoisonReverse=ripInfoIntfPoisonReverse, agPortCurCfgIndx=agPortCurCfgIndx, sentQUdp=sentQUdp, hwBoardRevision=hwBoardRevision, lldpInfoTxHoldMultiplier=lldpInfoTxHoldMultiplier, fdbNewCfgStaticTable=fdbNewCfgStaticTable, ospf3AreaInfoSPF=ospf3AreaInfoSPF, ospfNewCfgIntfEntry=ospfNewCfgIntfEntry, virtVMwareHostDetailInfoVMVCenterName=virtVMwareHostDetailInfoVMVCenterName, trunkGroupInfoPortTable=trunkGroupInfoPortTable, mstCistNewCfgPortPriority=mstCistNewCfgPortPriority, trunkGroupTableMaxSize=trunkGroupTableMaxSize, bgpInfoTotalSentPackets=bgpInfoTotalSentPackets, bgpNewCfgGroupRASIndex=bgpNewCfgGroupRASIndex, vrrpInfoVirtGroupPriority=vrrpInfoVirtGroupPriority, ospf3AreaIntfDrOther=ospf3AreaIntfDrOther, lacpInfoAggrTableEntry=lacpInfoAggrTableEntry, aclCurCfgDstMACMask=aclCurCfgDstMACMask, mldInfoGroupIfIndex=mldInfoGroupIfIndex, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, vmapCurCfgOutprofDscp=vmapCurCfgOutprofDscp, ospf3AreaNbrDown=ospf3AreaNbrDown, trunkGroupInfoState=trunkGroupInfoState, agNewCfgHprompt=agNewCfgHprompt, failoverInfoTriggerCtlId=failoverInfoTriggerCtlId, aclNewCfg8021pPriority=aclNewCfg8021pPriority, tacNewCfgDirectedRequest=tacNewCfgDirectedRequest, lacpInfoPortActOpExp=lacpInfoPortActOpExp, sfpInfo=sfpInfo, vmCurCfgProfileEgressShapingAverage=vmCurCfgProfileEgressShapingAverage, dnsCfg=dnsCfg, dhcpSnoopingStatDroppedPacketOther=dhcpSnoopingStatDroppedPacketOther, bgpCurCfgGroupRASEntry=bgpCurCfgGroupRASEntry, vrrpStatBadData=vrrpStatBadData, hotlinksCurCfgTriggerMasterTrunk=hotlinksCurCfgTriggerMasterTrunk, ospfAreaRxlsReqs=ospfAreaRxlsReqs, ospf3CurCfgRangeAddr=ospf3CurCfgRangeAddr, agPortCurCfgState=agPortCurCfgState, vmapCurCfgInprofDscp=vmapCurCfgInprofDscp, vlanNewCfgState=vlanNewCfgState, portMgmtStatsTxCollisions=portMgmtStatsTxCollisions, nsnmpOutTooBigs=nsnmpOutTooBigs, ipsecNewCfgManualPolicyInEspSpi=ipsecNewCfgManualPolicyInEspSpi, igmpMrtrInfoMrt=igmpMrtrInfoMrt, bgpInfoDynamicKeepalive=bgpInfoDynamicKeepalive, ipNewCfgStaticArpVlan=ipNewCfgStaticArpVlan, allportsStatsOutOctets=allportsStatsOutOctets, accessUserInfoClearLock=accessUserInfoClearLock, vlagStatsPduSentHlthCheck=vlagStatsPduSentHlthCheck, acl6NewCfgIPv6Reset=acl6NewCfgIPv6Reset, lacpNewSystemSetToDefault=lacpNewSystemSetToDefault, ospfNewCfgFixedAddOutRmap=ospfNewCfgFixedAddOutRmap, cistRegionalPathCost=cistRegionalPathCost, lldpInfoRxState=lldpInfoRxState, ospf3ExtRangeTableMaxSize=ospf3ExtRangeTableMaxSize, swCistNewRoot=swCistNewRoot, hotlinksNewCfgOnState=hotlinksNewCfgOnState, ospf3IntfChangeStatsEntry=ospf3IntfChangeStatsEntry, markerpdusRx=markerpdusRx, ospf3CurCfgRedistEntry=ospf3CurCfgRedistEntry, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, vmapNewCfgDstPort=vmapNewCfgDstPort, failoverInfoTriggerMonitorPorts=failoverInfoTriggerMonitorPorts, ospf3NewCfgRangeAddr=ospf3NewCfgRangeAddr, vmapVlanCurCfgAllPortsVmapBitmap=vmapVlanCurCfgAllPortsVmapBitmap, acl6CurCfgSrcIPv6Address=acl6CurCfgSrcIPv6Address, vnicNewCfgGroupTrunk=vnicNewCfgGroupTrunk, ospf3TimersKickOffStats=ospf3TimersKickOffStats, vlagCurCfgLacpTable=vlagCurCfgLacpTable, agDiffTableSize=agDiffTableSize, ecpChnlTxCnt=ecpChnlTxCnt, fdbCurCfgVlan=fdbCurCfgVlan, ospf3CurCfgNbrState=ospf3CurCfgNbrState, ipCurCfgBootpGlobalServerIndex=ipCurCfgBootpGlobalServerIndex, cistInfoPortTableEntry=cistInfoPortTableEntry, vrrpStatBadInterval=vrrpStatBadInterval, lacpInfoPortPartOpPortPrio=lacpInfoPortPartOpPortPrio, ipDataRouteInfoType=ipDataRouteInfoType, nbrInfoTable=nbrInfoTable, ospfIntfNbrChangeStats=ospfIntfNbrChangeStats, agApplyConfiguration=agApplyConfiguration, swLFDPortErrdisabled=swLFDPortErrdisabled, lacpInfoPortActOpColl=lacpInfoPortActOpColl, ospfAreaNbrIndex=ospfAreaNbrIndex, ospfExtLsdbInfoChecksum=ospfExtLsdbInfoChecksum, agTacacsUserMapCurCfgTableEntry=agTacacsUserMapCurCfgTableEntry, portOperLearning=portOperLearning, agClrSyslogMsgs=agClrSyslogMsgs, ipDataRouteInfoMetric=ipDataRouteInfoMetric, ospf3AreaInfoStatus=ospf3AreaInfoStatus, ikeCurCfgCookie=ikeCurCfgCookie, ipsecSaInfoAuthKey=ipsecSaInfoAuthKey, agNewCfgSyslogConsoleSev=agNewCfgSyslogConsoleSev, aclCurCfgSrcPort=aclCurCfgSrcPort, ospfNewCfgIntfHello=ospfNewCfgIntfHello, vlagInfoState=vlagInfoState, ospfNewCfgAreaType=ospfNewCfgAreaType, ospf3NewCfgExtRangeState=ospf3NewCfgExtRangeState, ipNewCfgGwIndex=ipNewCfgGwIndex, stpInfoHoldTime=stpInfoHoldTime, ipFwdCurCfgState=ipFwdCurCfgState, ospfNewCfgLoopIfIndex=ospfNewCfgLoopIfIndex, pptCurCfgPrefix=pptCurCfgPrefix, ipsecSpdInfoTable=ipsecSpdInfoTable, ospfVlinkCountForRouter=ospfVlinkCountForRouter, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, igmpNewCfgElectionType=igmpNewCfgElectionType, failoverNewCfgTriggerMconKeyRem=failoverNewCfgTriggerMconKeyRem, ipv6icmpInToobig=ipv6icmpInToobig, ipsecNewCfgSelectorIndex=ipsecNewCfgSelectorIndex, ospf3NewCfgVirtIntfDead=ospf3NewCfgVirtIntfDead, vmapNewCfgTos=vmapNewCfgTos, vmCurCfgProfileIndex=vmCurCfgProfileIndex, ipNewCfgIntfIp6Host=ipNewCfgIntfIp6Host, qosCurCfgDscpState=qosCurCfgDscpState, pktStatsFrees=pktStatsFrees, vmapGroupNewCfgNonServerPortsAddVmap=vmapGroupNewCfgNonServerPortsAddVmap, agPortNewCfgLFDStatus=agPortNewCfgLFDStatus, lldpNewCfgPortvlannametlv=lldpNewCfgPortvlannametlv, ospf3CurCfgNbrEntry=ospf3CurCfgNbrEntry, igmpFltCurCfgIndx=igmpFltCurCfgIndx, mldInfoInterfaceQuerierPort=mldInfoInterfaceQuerierPort, aclCurCfgInprofDscpEnable=aclCurCfgInprofDscpEnable, agPortOperTable=agPortOperTable, portStatsPhyIfOutUcastPkts=portStatsPhyIfOutUcastPkts, rip2Cfg=rip2Cfg, fdbCurCfgMac=fdbCurCfgMac, ospf3CurCfgExtRangeAggrEffect=ospf3CurCfgExtRangeAggrEffect, ipCurCfgIntfReachTime=ipCurCfgIntfReachTime, ospfVirtIntfInfoCost=ospfVirtIntfInfoCost, lacpInfoAggrActSysPrio=lacpInfoAggrActSysPrio, ikeCurCfgPskRemoteIndex=ikeCurCfgPskRemoteIndex, bgpNewCfgPeerUpdateSrcLoopIf=bgpNewCfgPeerUpdateSrcLoopIf, vlagStatsLacp=vlagStatsLacp, ospfIntfInfoTable=ospfIntfInfoTable, ipv6udpInErrs=ipv6udpInErrs, tacChangePassNewPass=tacChangePassNewPass, ipv6Fragcreates=ipv6Fragcreates, ospf3IfInfoNetworkType=ospf3IfInfoNetworkType, vmCurCfgGroupVlan=vmCurCfgGroupVlan, ospf3Stats=ospf3Stats, sshCurCfgSSHPort=sshCurCfgSSHPort, ospfNewCfgLoopIfEntry=ospfNewCfgLoopIfEntry, registration=registration, ospf3NewCfgVirtIntfNbr=ospf3NewCfgVirtIntfNbr, ospf3CurCfgConnectedRouteTagTypeManual=ospf3CurCfgConnectedRouteTagTypeManual, ospfNewCfgIntfArea=ospfNewCfgIntfArea, vmapNewCfgIpv4Reset=vmapNewCfgIpv4Reset, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, ipsecNewCfgSelectorDelete=ipsecNewCfgSelectorDelete, cistInfo=cistInfo, vmapVlanCurCfgServerPortsVmapBitmap=vmapVlanCurCfgServerPortsVmapBitmap, ospf3IntfErrRxSameRTRID=ospf3IntfErrRxSameRTRID, igmpClearTables=igmpClearTables, ospf3NewCfgHostCost=ospf3NewCfgHostCost, ipNewCfgGwAddr=ipNewCfgGwAddr, mstCurCfgRegionName=mstCurCfgRegionName, agAccessUserNewCfgName=agAccessUserNewCfgName, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, ospf3CurCfgIntfCost=ospf3CurCfgIntfCost, swTeamingCtrlDown=swTeamingCtrlDown, dhcpSnoopingCurCfgVlanTable=dhcpSnoopingCurCfgVlanTable, vmCurCfgProfileShapingAverage=vmCurCfgProfileShapingAverage, bgpNewCfgPeerDefaultAction=bgpNewCfgPeerDefaultAction, tacCurCfgAuthenSecondString=tacCurCfgAuthenSecondString, ipsecCurCfgTxformEntry=ipsecCurCfgTxformEntry, hwRevision=hwRevision, vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, mstCistCurCfgPortHelloTime=mstCistCurCfgPortHelloTime, mldStatClearAll=mldStatClearAll, routeTableClear=routeTableClear, bootpRelayStatsIndex=bootpRelayStatsIndex, vmapNewCfgStatistics=vmapNewCfgStatistics, ospfIfInfoPassive=ospfIfInfoPassive, ospfCumIntfHello=ospfCumIntfHello, ipIntfInfoTable=ipIntfInfoTable, ospf3VirtIfInfoRtrDeadInterval=ospf3VirtIfInfoRtrDeadInterval, ospfIntfNbrAdjointOk=ospfIntfNbrAdjointOk)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", fcoeStatsIndex=fcoeStatsIndex, udpStats=udpStats, agAccessNewStrongPassAttemptsMaxFail=agAccessNewStrongPassAttemptsMaxFail, lldpInfoPortIndex=lldpInfoPortIndex, acl6List=acl6List, vnicCurCfgGroupIndex=vnicCurCfgGroupIndex, ospfTmrsKckOffRetransmit=ospfTmrsKckOffRetransmit, igmpSnoopCfg=igmpSnoopCfg, ipv6icmpOutNeighAdv=ipv6icmpOutNeighAdv, vmapGroupCurCfgNonServerPortsVmapBitmap=vmapGroupCurCfgNonServerPortsVmapBitmap, ipMgmtRouteInfoTag=ipMgmtRouteInfoTag, ospfIntfErrAuthFailure=ospfIntfErrAuthFailure, ntpStats=ntpStats, agAccessUserNewCfgTable=agAccessUserNewCfgTable, hwFanStatus=hwFanStatus, agNewCfgSysDlight=agNewCfgSysDlight, dnsNewCfgSecServerPort=dnsNewCfgSecServerPort, localAddressUdp=localAddressUdp, mpCpuStatsUtil64Seconds=mpCpuStatsUtil64Seconds, agCurCfgSysDlight=agCurCfgSysDlight, portStatsPhyIfOutOctets=portStatsPhyIfOutOctets, vmapNewCfgDstMACMask=vmapNewCfgDstMACMask, lldpInfoRemoteDevicesManAddrSubtype=lldpInfoRemoteDevicesManAddrSubtype, ospfAreaErrorStatsEntry=ospfAreaErrorStatsEntry, lldpNewCfgPortAdmStat=lldpNewCfgPortAdmStat, igmpFltNewCfgTableEntry=igmpFltNewCfgTableEntry, vlagNewCfgLacpState=vlagNewCfgLacpState, ospfCumNbrBadSequence=ospfCumNbrBadSequence, fdbNewCfgStaticEntry=fdbNewCfgStaticEntry, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, ibmnosPortCfgTableEntry=ibmnosPortCfgTableEntry, aclLogCurInterval=aclLogCurInterval, ospfNewCfgIntfDeadMS=ospfNewCfgIntfDeadMS, pktStatsSmallsHiWatermark=pktStatsSmallsHiWatermark, agNewCfgHttpsServerAccess=agNewCfgHttpsServerAccess, vmNewCfgGroupProfileName=vmNewCfgGroupProfileName, aclNewCfgRemarkOutProfDscpEntry=aclNewCfgRemarkOutProfDscpEntry, failoverCurCfgTriggerMmonTrunk=failoverCurCfgTriggerMmonTrunk, hotlinksNewCfgTriggerPreemptState=hotlinksNewCfgTriggerPreemptState, igmpMrtrInfoIndex=igmpMrtrInfoIndex, tcpStatsActiveOpens=tcpStatsActiveOpens, fdbStatus=fdbStatus, ripNewCfgIbgpAddOutRmap=ripNewCfgIbgpAddOutRmap, agCurBootNxtCliMode=agCurBootNxtCliMode, intfLoopbackInfoAddr=intfLoopbackInfoAddr, ospfIntfNbrNegotiationDone=ospfIntfNbrNegotiationDone, swVlagInstanceRemoteUp=swVlagInstanceRemoteUp, bgpInfoPeerRemoteAddr=bgpInfoPeerRemoteAddr, lldpStatsFramesInTotal=lldpStatsFramesInTotal, failoverInfoTriggerLimit=failoverInfoTriggerLimit, ospfVirtIntfInfoEvents=ospfVirtIntfInfoEvents, lldpNewCfgPortEntry=lldpNewCfgPortEntry, ospfIntfNbrBadSequence=ospfIntfNbrBadSequence, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, vmNewCfgGroupMacVMIndex=vmNewCfgGroupMacVMIndex, vmapVlanNewCfgAllPortsTable=vmapVlanNewCfgAllPortsTable, ospf3IntfErrRxOnNotup=ospf3IntfErrRxOnNotup, mldInfoInterfaceGroups=mldInfoInterfaceGroups, ipv6icmpInEchoResp=ipv6icmpInEchoResp, ibmnosSfpInfoIndx=ibmnosSfpInfoIndx, mldInfoMRouterEntry=mldInfoMRouterEntry, ospf3IntfPtop=ospf3IntfPtop, lldpInfoPortMacAddress=lldpInfoPortMacAddress, aclNewCfgIpv4Reset=aclNewCfgIpv4Reset, agNTPOper=agNTPOper, vmCurCfgGroupMacTable=vmCurCfgGroupMacTable, ospfAreaErrNetmaskMismatch=ospfAreaErrNetmaskMismatch, vlagNewCfgTrunkTableEntry=vlagNewCfgTrunkTableEntry, ripNewCfgStaticAddOutRmap=ripNewCfgStaticAddOutRmap, hardwareSwitchRunningSwVersion=hardwareSwitchRunningSwVersion, lacpInfoPortActOperKey=lacpInfoPortActOperKey, errMldIfStatsMLDv1Report=errMldIfStatsMLDv1Report, ospfAreaErrorStats=ospfAreaErrorStats, swPrimaryPowerSupplyFixedNotify=swPrimaryPowerSupplyFixedNotify, ospf3IntfNbrAllEvents=ospf3IntfNbrAllEvents, vlagCurCfgLacpTableEntry=vlagCurCfgLacpTableEntry, ospfVirtIntfInfoAuth=ospfVirtIntfInfoAuth, ripCurCfgFixedOutRmapList=ripCurCfgFixedOutRmapList, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, vmNewCfgGroupTagState=vmNewCfgGroupTagState, ospfNewCfgRangeAddr=ospfNewCfgRangeAddr, ipsecCurCfgSelectorEntry=ipsecCurCfgSelectorEntry, ipNewCfgStaticNbrIndx=ipNewCfgStaticNbrIndx, vlagStatsIsl=vlagStatsIsl, ospfTmrsKckOffAseExport=ospfTmrsKckOffAseExport, ndprefixNewCfgInterfaceIndex=ndprefixNewCfgInterfaceIndex, igmpNewCfgQurStartupCnt=igmpNewCfgQurStartupCnt, swFanFailure=swFanFailure, ipNewCfgIntfIndex=ipNewCfgIntfIndex, udldInfoPortEntry=udldInfoPortEntry, virtVMwareHostDetailInfoTable=virtVMwareHostDetailInfoTable, vmapVlanNewCfgServerPortsAddVmap=vmapVlanNewCfgServerPortsAddVmap, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, tcpStatsInSegs=tcpStatsInSegs, vmapGroupCurCfgServerPortsTable=vmapGroupCurCfgServerPortsTable, vmapClearStats=vmapClearStats, agNewCfgSyslogTrapFcoe=agNewCfgSyslogTrapFcoe, hardwarePartNumber=hardwarePartNumber, ospfLoopIfInfoIndex=ospfLoopIfInfoIndex, vnicCurCfgVnicType=vnicCurCfgVnicType, ospf3IntfNbrLoading=ospf3IntfNbrLoading, agNewCfgSyslogTrapFailover=agNewCfgSyslogTrapFailover, ipsecSpdInfoSaEncrKeyLen=ipsecSpdInfoSaEncrKeyLen, ospf3NewCfgConnectedMetricType=ospf3NewCfgConnectedMetricType, ipNewCfgAspathRmapIndex=ipNewCfgAspathRmapIndex, ipInfo=ipInfo, mldInfoGroupLastReporter=mldInfoGroupLastReporter, hotlinksStatsTriggerBackupActive=hotlinksStatsTriggerBackupActive, vmNewCfgGroupMaclistEntry=vmNewCfgGroupMaclistEntry, nsnmpInSetRequests=nsnmpInSetRequests, ospfRoutesInfoVia=ospfRoutesInfoVia, dot3RateStatsSingleCollisionFrames=dot3RateStatsSingleCollisionFrames, agRackId=agRackId, agNewCfgSyslogTrapBgp=agNewCfgSyslogTrapBgp, vmapCurCfgDstMACAddress=vmapCurCfgDstMACAddress, agNewCfgSyslogTrapVnic=agNewCfgSyslogTrapVnic, ipStaticRoute6Cfg=ipStaticRoute6Cfg, vmapCurCfgSrcIPAddress=vmapCurCfgSrcIPAddress, ospf3AreaErrRxOspfOff=ospf3AreaErrRxOspfOff, ospf3TmrsKckOffHello=ospf3TmrsKckOffHello, acl6NewCfgStatistics=acl6NewCfgStatistics, virtVMwareHostPGIndex=virtVMwareHostPGIndex, oamStatsPortInfoRx=oamStatsPortInfoRx, agNewCfgCpuRateLimitCntl=agNewCfgCpuRateLimitCntl, ipStaticRouteNewHealthcheck=ipStaticRouteNewHealthcheck, bgpNewCfgPeerAddInRmap=bgpNewCfgPeerAddInRmap, ospf3NewCfgRangeRouteTag=ospf3NewCfgRangeRouteTag, ipNewCfgStaticRoute6Gateway=ipNewCfgStaticRoute6Gateway, ipsecNewCfgDynamicPolicyTxform=ipsecNewCfgDynamicPolicyTxform, aclCfg=aclCfg, ibmnosFdbMacAddrStr=ibmnosFdbMacAddrStr, igmpCurQurCfgTable=igmpCurQurCfgTable, ipsecCurCfgTxformCipher=ipsecCurCfgTxformCipher, aclCurCfgDstIPMask=aclCurCfgDstIPMask, agRevertApply=agRevertApply, ipmcCurCfgStaticRouteTable=ipmcCurCfgStaticRouteTable, stpInfoTimeSinceTopChange=stpInfoTimeSinceTopChange, vmapCurCfgIPFmt=vmapCurCfgIPFmt, lacpNewPortCfgTableEntry=lacpNewPortCfgTableEntry, stpInfoPortTable=stpInfoPortTable, acl6NewCfgEntry=acl6NewCfgEntry, vmapNewCfgIndex=vmapNewCfgIndex, ospf3CurCfgVirtIntfIndex=ospf3CurCfgVirtIntfIndex, dot3RateStatsTable=dot3RateStatsTable, stpInfoPortStpIndex=stpInfoPortStpIndex, vmapGroupNewCfgServerPortsAddVmap=vmapGroupNewCfgServerPortsAddVmap, vlagStatsSystem=vlagStatsSystem, fipsInfo=fipsInfo, ospf3CurCfgRouterId=ospf3CurCfgRouterId, ospf3NewCfgIntfAuthEnable=ospf3NewCfgIntfAuthEnable, vlagCurCfgTrunkState=vlagCurCfgTrunkState, lldpInfoRemoteDevicesSystemCapSupported=lldpInfoRemoteDevicesSystemCapSupported, rip2InfoIntfTable=rip2InfoIntfTable, ipStaticRoute6ClearAllByInterface=ipStaticRoute6ClearAllByInterface, ospfIntfRxTxStats=ospfIntfRxTxStats, stgCurCfgIndex=stgCurCfgIndex, agTacacsUserMapNewCfgTable=agTacacsUserMapNewCfgTable, agApply=agApply, fcoeStatsResetAllCounters=fcoeStatsResetAllCounters, virtVMwareHostDetailInfoIndex=virtVMwareHostDetailInfoIndex, mldCurInterfaceTable=mldCurInterfaceTable, igmpSnoopNewCfgRtrAlert=igmpSnoopNewCfgRtrAlert, vmCurCfgGroupMaclistEntry=vmCurCfgGroupMaclistEntry, pmCurCfgPmirrMoniPortIndex=pmCurCfgPmirrMoniPortIndex, nsnmpOutSetRequests=nsnmpOutSetRequests, ospf3IfInfoMetricCost=ospf3IfInfoMetricCost, ospf3CurCfgNbrIntfIndex=ospf3CurCfgNbrIntfIndex, ipCurCfgIntfDadAttempts=ipCurCfgIntfDadAttempts, lldpStatsTLVsUnrecognizedTotal=lldpStatsTLVsUnrecognizedTotal, virtVMwareVMInfoIPAddr=virtVMwareVMInfoIPAddr, igmpInfoFwd=igmpInfoFwd, acList=acList, agCurCfgSyslogTrapMld=agCurCfgSyslogTrapMld, ospf3AreaRxHello=ospf3AreaRxHello, ospfAreaTxlsUpdates=ospfAreaTxlsUpdates, ipNewCfgAlistMetric=ipNewCfgAlistMetric, ospfIntfIndex=ospfIntfIndex, vmapCurCfgMeterEnable=vmapCurCfgMeterEnable, lacpInfoSelAggrId=lacpInfoSelAggrId, ospf3RoutesInfoType2Cost=ospf3RoutesInfoType2Cost, oamStats=oamStats, mldStats=mldStats, ospfAreaErrInvalidSelfOrigLsa=ospfAreaErrInvalidSelfOrigLsa, agPortCurCfgEdge=agPortCurCfgEdge, ospfIntfRxlsUpdates=ospfIntfRxlsUpdates, ipCurCfgBootpOpt82Policy=ipCurCfgBootpOpt82Policy, vmapVlanNewCfgAllPortsRemVmap=vmapVlanNewCfgAllPortsRemVmap, igmpFltNewCfgPortRemFiltRule=igmpFltNewCfgPortRemFiltRule, dhcpSnoopingStatDroppedPacketRateLimit=dhcpSnoopingStatDroppedPacketRateLimit, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, hotlinksNewCfgTriggerBackupAdminkey=hotlinksNewCfgTriggerBackupAdminkey, bgpNewCfgPeerRemoteAs=bgpNewCfgPeerRemoteAs, pmNewCfgPortMonitorTable=pmNewCfgPortMonitorTable, igmpStats=igmpStats, cistGeneralInfo=cistGeneralInfo, dhcpInfoServer=dhcpInfoServer, ipDataRouteInfoDestIp=ipDataRouteInfoDestIp, mpCpuStats=mpCpuStats, ipCurCfgBootpGlobalServerTable=ipCurCfgBootpGlobalServerTable, vlagCurCfgAutoRecoveryInterval=vlagCurCfgAutoRecoveryInterval, dhcpSnoopingNewCfgOption82OnState=dhcpSnoopingNewCfgOption82OnState, bgpCurCfgGroupOutRmapList=bgpCurCfgGroupOutRmapList, bgpNewCfgAggrTable=bgpNewCfgAggrTable, oamStatsPortRemoteLinkFaults=oamStatsPortRemoteLinkFaults, pktStatsSmalls=pktStatsSmalls, vmapVlanNewCfgAllPortsVmapBitmap=vmapVlanNewCfgAllPortsVmapBitmap, vrrpClearStats=vrrpClearStats, vnicNewCfgGroupRemPort=vnicNewCfgGroupRemPort, ospf3AreaIntfChangeStats=ospf3AreaIntfChangeStats, agCfgDumpTable=agCfgDumpTable, ospfLoopIfInfoBackupDesignatedRouterIP=ospfLoopIfInfoBackupDesignatedRouterIP, lldpStatsTable=lldpStatsTable, ipStatsInDiscards=ipStatsInDiscards, ospf3NewCfgIntfPassive=ospf3NewCfgIntfPassive, ospf3NewLsaReceived=ospf3NewLsaReceived, acl6NewCfgSrcPort=acl6NewCfgSrcPort, ipCurCfgStaticArpVlan=ipCurCfgStaticArpVlan, fdb=fdb, accessUserInfoIndex=accessUserInfoIndex, hotlinksNewCfgTriggerId=hotlinksNewCfgTriggerId, lldpCurCfgNotifInt=lldpCurCfgNotifInt, ospfNewCfgMdkeyEntry=ospfNewCfgMdkeyEntry, vmapGroupCurCfgServerPortsGroupIdx=vmapGroupCurCfgServerPortsGroupIdx, ospfRangeTableMaxSize=ospfRangeTableMaxSize, hotlinksMaxTriggerEntries=hotlinksMaxTriggerEntries, ipGatewayTableMax=ipGatewayTableMax, mstCistCurCfgBridgeMaxAge=mstCistCurCfgBridgeMaxAge, ospf3CurCfgIntfHello=ospf3CurCfgIntfHello, intfLoopbackInfoNetMask=intfLoopbackInfoNetMask, vlagInfoLocalPriority=vlagInfoLocalPriority, ipsecInfo=ipsecInfo, layer3=layer3, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, ipv6PmtuInfoEntry=ipv6PmtuInfoEntry, ospf3CurCfgExtRangeEntry=ospf3CurCfgExtRangeEntry, swVrrpAuthFailure=swVrrpAuthFailure, vmapCurCfgProtocol=vmapCurCfgProtocol, virtVMwareVMNameOsName=virtVMwareVMNameOsName, lldpInfoPortportprottlv=lldpInfoPortportprottlv, bgpNewCfgGroupRAS=bgpNewCfgGroupRAS, agImageForNxtReset=agImageForNxtReset, ospf3CurCfgIntfIndex=ospf3CurCfgIntfIndex, pptCurCfgLabel=pptCurCfgLabel, swSaveComplete=swSaveComplete, allportsStatsOutUcast=allportsStatsOutUcast, ospfIfInfoTransitDelay=ospfIfInfoTransitDelay, ibmnosPortCtrlMode=ibmnosPortCtrlMode, agCurCfgSyslogTrapIpv6=agCurCfgSyslogTrapIpv6, ospf3VirtIfInfoLinkScopeLsaCount=ospf3VirtIfInfoLinkScopeLsaCount, ripNewCfgIntfSupply=ripNewCfgIntfSupply, ospf3NewCfgRedistRouteTagTypeManual=ospf3NewCfgRedistRouteTagTypeManual, dhcpSnoopingCurCfgOption82OnState=dhcpSnoopingCurCfgOption82OnState, bgpCurCfgASNumber=bgpCurCfgASNumber, ospfAreaIntfBackup=ospfAreaIntfBackup)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", ospf3IntfErrBadChecksum=ospf3IntfErrBadChecksum, ospfAreaRxTxStats=ospfAreaRxTxStats, ipsecNewCfgManualPolicyInEspEncKey=ipsecNewCfgManualPolicyInEspEncKey, mstCistNewCfgPortTable=mstCistNewCfgPortTable, ipsecNewCfgManualPolicyOutAhSpi=ipsecNewCfgManualPolicyOutAhSpi, ospfCurCfgRipMetricType=ospfCurCfgRipMetricType, ospf3RedistributeStatic=ospf3RedistributeStatic, bgpInfoSummaryRemoteAddr=bgpInfoSummaryRemoteAddr, vlagCurCfgSwitchPriority=vlagCurCfgSwitchPriority, agNetboot=agNetboot, failoverInfoTriggerCtlPortStatus=failoverInfoTriggerCtlPortStatus, lacpInfoAggrActAdminKey=lacpInfoAggrActAdminKey, stpInfoTopChanges=stpInfoTopChanges, ospfAreaIntfIndex=ospfAreaIntfIndex, ipStaticArpCfg=ipStaticArpCfg, vlanCurCfgTableEntry=vlanCurCfgTableEntry, ospf3CurCfgIntfTrans=ospf3CurCfgIntfTrans, vrrpNewCfgGenHoldoff=vrrpNewCfgGenHoldoff, mldInfoGroupEntry=mldInfoGroupEntry, oamStatsPortInfoTx=oamStatsPortInfoTx, stgNewCfgBrgMaxAge=stgNewCfgBrgMaxAge, allportsStatsInBcastRate=allportsStatsInBcastRate, dnsCurCfgSecServerPort=dnsCurCfgSecServerPort, ibmnosConfigSaveFileName=ibmnosConfigSaveFileName, acl6CurCfgDstPort=acl6CurCfgDstPort, stateMgmtUdp=stateMgmtUdp, vmapVlanNewCfgServerPortsRemVmap=vmapVlanNewCfgServerPortsRemVmap, ospf3IfInfoAuthType=ospf3IfInfoAuthType, virtNewCfgVirtCenterPasswd=virtNewCfgVirtCenterPasswd, agCurCfgSysCustomDstState=agCurCfgSysCustomDstState, stgStatsPortXmtTcnBpdus=stgStatsPortXmtTcnBpdus, ipsecNewCfgTxformIntegrity=ipsecNewCfgTxformIntegrity, agNewCfgSysCustomDstEnd=agNewCfgSysCustomDstEnd, ospfNewCfgRangeHideState=ospfNewCfgRangeHideState, agNewCfgSyslogTrapOspfv3=agNewCfgSyslogTrapOspfv3, sflowCurPortPolling=sflowCurPortPolling, ospfCurCfgLoopIfArea=ospfCurCfgLoopIfArea, bgpCurCfgGroupIndex=bgpCurCfgGroupIndex, igmpNewCfgQurSrcIp=igmpNewCfgQurSrcIp, stpInfo=stpInfo, rxIgmpGroupSourceSpecificQueries=rxIgmpGroupSourceSpecificQueries, pktStatsMediumsHiWatermark=pktStatsMediumsHiWatermark, qosCurCfgDscpEntry=qosCurCfgDscpEntry, lacpInfoPortAdminTableEntry=lacpInfoPortAdminTableEntry, agNewCfgCpuRateLimitArp=agNewCfgCpuRateLimitArp, ipCurCfgBootpBcastDomainIndex=ipCurCfgBootpBcastDomainIndex, ospfCumIntfDown=ospfCumIntfDown, ripStatInBadSourcePort=ripStatInBadSourcePort, ospfAreaErrHelloMismatch=ospfAreaErrHelloMismatch, bgpCurCfgClientToClientReflection=bgpCurCfgClientToClientReflection, vlanInfoPorts=vlanInfoPorts, vlagInfo=vlagInfo, ipNewCfgGwIpv6Table=ipNewCfgGwIpv6Table, pptNewCfgTable=pptNewCfgTable, allportsStatsLinkStateChange=allportsStatsLinkStateChange, ospf3AreaRxlsAcks=ospf3AreaRxlsAcks, portInfoLink=portInfoLink, ipInterfaceLoopbackCfg=ipInterfaceLoopbackCfg, mcastFdbEntryIndex=mcastFdbEntryIndex, bgpNewCfgGroupTtl=bgpNewCfgGroupTtl, ospf3IntfWaiting=ospf3IntfWaiting, ipCurCfgIntfMask=ipCurCfgIntfMask, mldDefaultCfgState=mldDefaultCfgState, ospfCurCfgRangeEntry=ospfCurCfgRangeEntry, ospf3CumDisdDatabase=ospf3CumDisdDatabase, bgpNewCfgPeerInRmapList=bgpNewCfgPeerInRmapList, ospfIntfTxHello=ospfIntfTxHello, ospf3IfNbrIntfIndex=ospf3IfNbrIntfIndex, ipv6icmpInDstUnreach=ipv6icmpInDstUnreach, ipRouteEcmpInfoDestIndx=ipRouteEcmpInfoDestIndx, ospf3CurCfgVirtIntfStatus=ospf3CurCfgVirtIntfStatus, ospfVirtIntfTableMaxSize=ospfVirtIntfTableMaxSize, ipCurCfgAspathRmapIndex=ipCurCfgAspathRmapIndex, fdbCurCfgPort=fdbCurCfgPort, nsnmpOutTraps=nsnmpOutTraps, igmpClearAllStats=igmpClearAllStats, mldCurInterfaceEntry=mldCurInterfaceEntry, portType=portType, dhcpInfoSubnetMask=dhcpInfoSubnetMask, igmpMrtrInfoQqic=igmpMrtrInfoQqic, bgpNewCfgPeerAddOutRmap=bgpNewCfgPeerAddOutRmap, agTransferHostKeyFileName=agTransferHostKeyFileName, vlagStatsPduSentRoleElection=vlagStatsPduSentRoleElection, aclNewCfgSrcIPMask=aclNewCfgSrcIPMask, agApplyPending=agApplyPending, bgpInfoSummaryVersion=bgpInfoSummaryVersion, IPsecKeyString=IPsecKeyString, fipsPortCurCfgEntry=fipsPortCurCfgEntry, vmapVlanCurCfgAllPortsVlanIdx=vmapVlanCurCfgAllPortsVlanIdx, lldpStatsAgeoutsTotal=lldpStatsAgeoutsTotal, ospf3AreaErrRxOnNotup=ospf3AreaErrRxOnNotup, portInfoIndx=portInfoIndx, ripCurCfgIntfSplitHorizon=ripCurCfgIntfSplitHorizon, dhcpSnoopingCurCfgVlanId=dhcpSnoopingCurCfgVlanId, lldpNewCfgPortsyscaptlv=lldpNewCfgPortsyscaptlv, vlagStatsPduRcvISLHello=vlagStatsPduRcvISLHello, agent=agent, qosNewCfgCosWeightEntry=qosNewCfgCosWeightEntry, ospf3IfInfoAuthEnable=ospf3IfInfoAuthEnable, portMgmtStatsRxOverruns=portMgmtStatsRxOverruns, dnsCurCfgFirstRequestAddr=dnsCurCfgFirstRequestAddr, allportsStatsOutDiscards=allportsStatsOutDiscards, ospfNewCfgRipMetric=ospfNewCfgRipMetric, failoverNewCfgTriggerState=failoverNewCfgTriggerState, ospfTmrsKckOffDbage=ospfTmrsKckOffDbage, agCurCfgCpuRateLimitBpdu=agCurCfgCpuRateLimitBpdu, ospf3CurCfgIntfTable=ospf3CurCfgIntfTable, mstCistNewCfgAddVlan=mstCistNewCfgAddVlan, ospf3IntfRxTxDisdStatsEntry=ospf3IntfRxTxDisdStatsEntry, agCurCfgLFDTime=agCurCfgLFDTime, agAccessCurDefaultAdmin=agAccessCurDefaultAdmin, aclNewCfgDelete=aclNewCfgDelete, aclNewCfgPortRemoveAcl=aclNewCfgPortRemoveAcl, lacpInfoPortPartOpPortNum=lacpInfoPortPartOpPortNum, pptNewCfgPrefixLen=pptNewCfgPrefixLen, agPortCurCfgTable=agPortCurCfgTable, bgpCurCfgPeerTtlSecHops=bgpCurCfgPeerTtlSecHops, ospf3CurCfgAreaTranslRole=ospf3CurCfgAreaTranslRole, radCurCfgRetries=radCurCfgRetries, ospf3CurCfgRangeHideState=ospf3CurCfgRangeHideState, qosNewCfgDscpTable=qosNewCfgDscpTable, processId=processId, lacpInfoPortActSysId=lacpInfoPortActSysId, ospfNewCfgVirtIntfDead=ospfNewCfgVirtIntfDead, ospf3NewCfgVirtIntfHello=ospf3NewCfgVirtIntfHello, ipsecNewCfgManualPolicyTxform=ipsecNewCfgManualPolicyTxform, arpStatHighWater=arpStatHighWater, ospf3CumNbrFull=ospf3CumNbrFull, ibmnosConfigForNxtReset=ibmnosConfigForNxtReset, ospf3NewCfgConnectedRouteTagTypeManual=ospf3NewCfgConnectedRouteTagTypeManual, ospf3IfInfoAuthKey=ospf3IfInfoAuthKey, vlagInfoSystem=vlagInfoSystem, agCurCfgSyslogTrapOspf=agCurCfgSyslogTrapOspf, lldpStatsClearAll=lldpStatsClearAll, ospf3CurCfgExtRangeAddr=ospf3CurCfgExtRangeAddr, lldpCurCfgPortportvidtlv=lldpCurCfgPortportvidtlv, ospf3NewCfgExtRangeIndex=ospf3NewCfgExtRangeIndex, udpStatsInDatagrams=udpStatsInDatagrams, igmpCurQuerierState=igmpCurQuerierState, routeStatRipEntries=routeStatRipEntries, agPortCurCfgUdld=agPortCurCfgUdld, ospf3NewCfgIntfRetra=ospf3NewCfgIntfRetra, mcastFdbTable=mcastFdbTable, pmNewCfgPortMonitorEntry=pmNewCfgPortMonitorEntry, ripClearStats=ripClearStats, ibmnosSfpInfoDescription=ibmnosSfpInfoDescription, ipCurCfgAlistAction=ipCurCfgAlistAction, fipsInfoAclSequencer=fipsInfoAclSequencer, ipInterfaceLoopbackTableMax=ipInterfaceLoopbackTableMax, igmpStaticMrtrNewCfgPortId=igmpStaticMrtrNewCfgPortId, ospf3VirtIfInfoRetransInterval=ospf3VirtIfInfoRetransInterval, ipNewCfgSecIntfAddr=ipNewCfgSecIntfAddr, trunkGroupInfoPortPortId=trunkGroupInfoPortPortId, bgpCurCfgGroupTtlSecHops=bgpCurCfgGroupTtlSecHops, lldpInfoTxEntry=lldpInfoTxEntry, ipmcNewCfgStaticRouteAddTrunk=ipmcNewCfgStaticRouteAddTrunk, agCurCfgSyslogTrapStg=agCurCfgSyslogTrapStg, bgpInfoDynamicTotalSentPackets=bgpInfoDynamicTotalSentPackets, ecpChnlAckErr=ecpChnlAckErr, ikeCurCfgPskRemoteEntry=ikeCurCfgPskRemoteEntry, ipNewCfgBootpBcastDomainServerTable=ipNewCfgBootpBcastDomainServerTable, ospfCurCfgEbgpOutRmapList=ospfCurCfgEbgpOutRmapList, tcpStatsRtoMin=tcpStatsRtoMin, ipCurCfgAspathIndex=ipCurCfgAspathIndex, bgpNewCfgAggrIndex=bgpNewCfgAggrIndex, bgpNewCfgPeerOutRmapList=bgpNewCfgPeerOutRmapList, ospf3GeneralInfo=ospf3GeneralInfo, acl6CurCfgFilterAction=acl6CurCfgFilterAction, nsnmpOutGenErrs=nsnmpOutGenErrs, allportsStatsOutUcastRate=allportsStatsOutUcastRate, lacpInfoAggrActSysId=lacpInfoAggrActSysId, ipAspathTableMax=ipAspathTableMax, lacpInfoPortMuxState=lacpInfoPortMuxState, aclCurCfgOutprofDscpEnable=aclCurCfgOutprofDscpEnable, swHotlinksBackupUp=swHotlinksBackupUp, failoverCurCfgTriggerState=failoverCurCfgTriggerState, tacNewCfgPrimaryServer=tacNewCfgPrimaryServer, ospf3NewCfgVirtIntfTrans=ospf3NewCfgVirtIntfTrans, virtVMwareHostDetailInfoPortGroup=virtVMwareHostDetailInfoPortGroup, geaportInfoPort=geaportInfoPort, portInfoFlowCtrl=portInfoFlowCtrl, ecpChnlPort=ecpChnlPort, ospfAreaInfoId=ospfAreaInfoId, swVlagInstanceUp=swVlagInstanceUp, lacpInfoPort=lacpInfoPort, vlagCurCfgLacpState=vlagCurCfgLacpState, lacpInfoPortActAdSync=lacpInfoPortActAdSync, pvstCompatibilityCurCfgState=pvstCompatibilityCurCfgState, fipsPortCurCfgIndex=fipsPortCurCfgIndex, ospfNewCfgLoopIfTable=ospfNewCfgLoopIfTable, agAccessCurStrongPassFailLog=agAccessCurStrongPassFailLog, vlagCurIslCfgAdminKey=vlagCurIslCfgAdminKey, agPortCurCfgOam=agPortCurCfgOam, mcastFdbSrcPorts=mcastFdbSrcPorts, ospf3CurCfgAreaDefaultMetricType=ospf3CurCfgAreaDefaultMetricType, ospfVirtIntfInfoAreaId=ospfVirtIntfInfoAreaId, agCurBootProfile=agCurBootProfile, ospf3NewCfgRedistAddr=ospf3NewCfgRedistAddr, igmpCurCfgOnOff=igmpCurCfgOnOff, agHavePanicDump=agHavePanicDump, ipStaticNbrClearAll=ipStaticNbrClearAll, ospfIfInfoDeadMS=ospfIfInfoDeadMS, ospf3IfInfoLLocalAddress=ospf3IfInfoLLocalAddress, nbrInfoAge=nbrInfoAge, aclCurCfgLog=aclCurCfgLog, ldapNewCfgState=ldapNewCfgState, aclCurCfgTable=aclCurCfgTable, layer2Info=layer2Info, aclNewCfgPortIndex=aclNewCfgPortIndex, ripCurCfgIntfState=ripCurCfgIntfState, ospfTotalTransitAreas=ospfTotalTransitAreas, hwPartNumber=hwPartNumber, vmNewCfgGroupRemLacpKey=vmNewCfgGroupRemLacpKey, vlanInfoTable=vlanInfoTable, bgpNewCfgGroupAdvert=bgpNewCfgGroupAdvert, ipv6icmpOutDstUnreach=ipv6icmpOutDstUnreach, hardwarePCBAPartNumber=hardwarePCBAPartNumber, agCurCfgSyslogTrapRmon=agCurCfgSyslogTrapRmon, mstCistNewCfgPortHelloTime=mstCistNewCfgPortHelloTime, bgpNewCfgPeerAlive=bgpNewCfgPeerAlive, vlagNewCfgHlthchkKeepaliveInterval=vlagNewCfgHlthchkKeepaliveInterval, ripCurCfgIntfAuth=ripCurCfgIntfAuth, ipNewCfgGwIpv6Delete=ipNewCfgGwIpv6Delete, rip2GeneralInfo=rip2GeneralInfo, vrrpInfoVirtGroupState=vrrpInfoVirtGroupState, txIgmpLeaves=txIgmpLeaves, lldpNewCfgPortalltlv=lldpNewCfgPortalltlv, allportsStatsInPkts=allportsStatsInPkts, hotlinksCurCfgOnState=hotlinksCurCfgOnState, ikeNewCfgPskRemoteDelete=ikeNewCfgPskRemoteDelete, rxMldIfStatsToExcFmcrsv2=rxMldIfStatsToExcFmcrsv2, agPortCurCfgBroadcastThresholdRate=agPortCurCfgBroadcastThresholdRate, ipNewCfgAspathEntry=ipNewCfgAspathEntry, ospfIntfNbrBadRequests=ospfIntfNbrBadRequests, vlanCurCfgVlanId=vlanCurCfgVlanId, ipNewCfgAspathDelete=ipNewCfgAspathDelete, lacpInfoAttAggrId=lacpInfoAttAggrId, bgpCurCfgGroupOspfState=bgpCurCfgGroupOspfState, ospf3AreaDisdlsReqs=ospf3AreaDisdlsReqs, ospf3CurCfgHostState=ospf3CurCfgHostState, bgpNewCfgPeerHold=bgpNewCfgPeerHold, ldapCurCfgState=ldapCurCfgState, ipNewCfgIntfLoopbackEntry=ipNewCfgIntfLoopbackEntry, dhcpSnoopingBindingInfoExpiry=dhcpSnoopingBindingInfoExpiry, agNewCfgSyslogTrapCfg=agNewCfgSyslogTrapCfg, ospfIntfRxHello=ospfIntfRxHello, accessUserInfoClearFailAttempts=accessUserInfoClearFailAttempts, agTacacsUserMapNewCfgMapping=agTacacsUserMapNewCfgMapping, rxIgmpV3FilterChangeRecords=rxIgmpV3FilterChangeRecords, ripInfoIntfListen=ripInfoIntfListen, ipCurCfgIntfAdvLifetime=ipCurCfgIntfAdvLifetime, tcpStatsRtoMax=tcpStatsRtoMax, ospf3IntfDisdlsUpdates=ospf3IntfDisdlsUpdates, ospf3CumRxDatabase=ospf3CumRxDatabase)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", ipNewCfgIntfLoopbackDelete=ipNewCfgIntfLoopbackDelete, aclCurCfgVLanId=aclCurCfgVLanId, vmapVlanNewCfgServerPortsVmapBitmap=vmapVlanNewCfgServerPortsVmapBitmap, fipsInfoVlansPorts=fipsInfoVlansPorts, ndprefixNewCfgPreferredLifetime=ndprefixNewCfgPreferredLifetime, fdbMacAddr=fdbMacAddr, ipsecSpdInfoSrcAddr=ipsecSpdInfoSrcAddr, agPortNewCfgLearning=agPortNewCfgLearning, vlagInfoGroup=vlagInfoGroup, ospfCurCfgIntfArea=ospfCurCfgIntfArea, ipDataRouteInfoIndx=ipDataRouteInfoIndx, ospfVirtIntfInfoWait=ospfVirtIntfInfoWait, ibmnosPortCfgVlanTag=ibmnosPortCfgVlanTag, dnsNewCfgDomainName=dnsNewCfgDomainName, virtNewCfgVirtCenterUser=virtNewCfgVirtCenterUser, ipCurCfgIntfHopLimit=ipCurCfgIntfHopLimit, acl6CurCfgUser=acl6CurCfgUser, lldpStatsFramesOutTotal=lldpStatsFramesOutTotal, bgpCurCfgPeerAdvert=bgpCurCfgPeerAdvert, ospfNewCfgStaticMetricType=ospfNewCfgStaticMetricType, tacNewCfgAuthenSecondString=tacNewCfgAuthenSecondString, arpStatMaxEntries=arpStatMaxEntries, bgpInfoGroupLimit=bgpInfoGroupLimit, vmCurCfgCheckActionAdvanced=vmCurCfgCheckActionAdvanced, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, ospfIfNbrTable=ospfIfNbrTable, ipRoute6InfoInterface=ipRoute6InfoInterface, memoryStats=memoryStats, routeStatEcmpPathsEntries=routeStatEcmpPathsEntries, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, igmpSnoopNewCfgSrcIp=igmpSnoopNewCfgSrcIp, vmNewCfgGroupDelete=vmNewCfgGroupDelete, ospfAreaIntfWaitTimer=ospfAreaIntfWaitTimer, ospf3IfNbrState=ospf3IfNbrState, ripInfoIntfMetric=ripInfoIntfMetric, swAcntLocked=swAcntLocked, ripNewCfgIntfState=ripNewCfgIntfState, igmpSnoopNewCfgVlanFastlvBmap=igmpSnoopNewCfgVlanFastlvBmap, ipRoute6InfoPrefLen=ipRoute6InfoPrefLen, bgpInfoMinAdvTime=bgpInfoMinAdvTime, acl6NewCfgTCPFlagsMask=acl6NewCfgTCPFlagsMask, ospfHostTableMaxSize=ospfHostTableMaxSize, lacpInfoPortPartOpDist=lacpInfoPortPartOpDist, ospfLoopIfInfoAuthType=ospfLoopIfInfoAuthType, ospf3AreaErrRxOnPasv=ospf3AreaErrRxOnPasv, tacCurCfgEnableAccounting=tacCurCfgEnableAccounting, dhcpSnoopingCurCfgPortId=dhcpSnoopingCurCfgPortId, ospfAreaNbrNegotiationDone=ospfAreaNbrNegotiationDone, agPortNewCfgVlanTag=agPortNewCfgVlanTag, ospfAreaTxHello=ospfAreaTxHello, ospfCurCfgRangeHideState=ospfCurCfgRangeHideState, hardware=hardware, failoverInfoTriggerControlState=failoverInfoTriggerControlState, agNewCfgLoginBanner=agNewCfgLoginBanner, trunkLacpGroupNewCfgAdminKey=trunkLacpGroupNewCfgAdminKey, ipStaticRouteClearAllByDestIp=ipStaticRouteClearAllByDestIp, ikeNewCfgPropAuth=ikeNewCfgPropAuth, ipStaticNbrTableMaxSize=ipStaticNbrTableMaxSize, ipCurCfgIntfLoopbackState=ipCurCfgIntfLoopbackState, icmpStatsOutAddrMasks=icmpStatsOutAddrMasks, ospf3IfInfoRetransmit=ospf3IfInfoRetransmit, vmapNewCfgEgressPorts=vmapNewCfgEgressPorts, l2ThashCurCfgDmacState=l2ThashCurCfgDmacState, qosCurCfgCosWeight=qosCurCfgCosWeight, vlagNewCfgTrunkIndex=vlagNewCfgTrunkIndex, ipsecCurCfgIfDelete=ipsecCurCfgIfDelete, mldCurInterfaceVersion=mldCurInterfaceVersion, ripInfoState=ripInfoState, vlagStatsIgmp=vlagStatsIgmp, agCurCfgErrDisableRecovery=agCurCfgErrDisableRecovery, ospf3NewCfgExtRangeDelete=ospf3NewCfgExtRangeDelete, mldCurInterfaceDMrtrEna=mldCurInterfaceDMrtrEna, dhcpInfoLeaseObtained=dhcpInfoLeaseObtained, mpUdpStats=mpUdpStats, agNewCfgSyslogTrapIgmpMrouter=agNewCfgSyslogTrapIgmpMrouter, ospf3NewCfgRangePrefixLen=ospf3NewCfgRangePrefixLen, stgStatsPortRcvCfgBpdus=stgStatsPortRcvCfgBpdus, aclCurCfgFilterActionSetPrio=aclCurCfgFilterActionSetPrio, lacpCurPortCfgTableId=lacpCurPortCfgTableId, ospfIfNbrIpAddr=ospfIfNbrIpAddr, igmpStaticMrtrNewCfgIndx=igmpStaticMrtrNewCfgIndx, ospf3IntfNbrExStart=ospf3IntfNbrExStart, lldpInfoPortframesztlv=lldpInfoPortframesztlv, ospf3TotalNssaAreas=ospf3TotalNssaAreas, virtVMwareHostNameEntry=virtVMwareHostNameEntry, ospf3CumIntfPtop=ospf3CumIntfPtop, vmbwNewCfgTxBurst=vmbwNewCfgTxBurst, ipmcCurCfgStaticRouteEntry=ipmcCurCfgStaticRouteEntry, bgpCurCfgGroupTable=bgpCurCfgGroupTable, tcpStatsPassiveOpens=tcpStatsPassiveOpens, agSyslogMsgTable=agSyslogMsgTable, ipCurCfgStaticNbrIp=ipCurCfgStaticNbrIp, lacpInfoPortOperState=lacpInfoPortOperState, stgNewCfgPortState=stgNewCfgPortState, l2ThashNewCfgDmacState=l2ThashNewCfgDmacState, mldStatReceiveNonLocal=mldStatReceiveNonLocal, portInfoVlanTag=portInfoVlanTag, agCurCfgTelnetServerPort=agCurCfgTelnetServerPort, lldpInfoRemoteDevicesPortId=lldpInfoRemoteDevicesPortId, vmapStatsHits=vmapStatsHits, ipsecNewCfgSelectorSrc=ipsecNewCfgSelectorSrc, aclCurCfgDstPort=aclCurCfgDstPort, ipv6InRoutsols=ipv6InRoutsols, ipsecNewCfgIfEntry=ipsecNewCfgIfEntry, acl6NewCfgDstPortMask=acl6NewCfgDstPortMask, ipStaticRouteNewEcmpHash=ipStaticRouteNewEcmpHash, ipCurCfgAlistState=ipCurCfgAlistState, illegalRx=illegalRx, ospfIfInfoHelloMS=ospfIfInfoHelloMS, ospfCumNbrChangeStats=ospfCumNbrChangeStats, vmapVlanNewCfgAllPortsVlanIdx=vmapVlanNewCfgAllPortsVlanIdx, agPortNewCfgMulticastThreshold=agPortNewCfgMulticastThreshold, ospfExtLsdbInfoIndex=ospfExtLsdbInfoIndex, ospf3IntfErrRxZeroRTRID=ospf3IntfErrRxZeroRTRID, agDiff=agDiff, agTransferCaFileName=agTransferCaFileName, agSlotNumber=agSlotNumber, ipsecCurCfgManualPolicyOutEspAuthKey=ipsecCurCfgManualPolicyOutEspAuthKey, lldpCurCfgReinitDelay=lldpCurCfgReinitDelay, ospf3CurCfgExtRangeState=ospf3CurCfgExtRangeState, agCfgDumpTableEntry=agCfgDumpTableEntry, vmapNewCfgEthFmt=vmapNewCfgEthFmt, ifMainPortName=ifMainPortName, agAccessUserNewCfgTableEntry=agAccessUserNewCfgTableEntry, lacpNewPortActorAdminKey=lacpNewPortActorAdminKey, stgCurCfgStgIndex=stgCurCfgStgIndex, vnicCurCfgGroupEntry=vnicCurCfgGroupEntry, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, lacpInfoPortPartOpColl=lacpInfoPortPartOpColl, dot3RateStatsAlignmentErrors=dot3RateStatsAlignmentErrors, tor_switch=tor_switch, bgpCurCfgPeerInRmapList=bgpCurCfgPeerInRmapList, ospfNewCfgHostCost=ospfNewCfgHostCost, blade=blade, ospf3CumRxPkts=ospf3CumRxPkts, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, igmpMrtrInfoSrcIp=igmpMrtrInfoSrcIp, ipsecSaInfoTable=ipsecSaInfoTable, ospfNewCfgVirtIntfEntry=ospfNewCfgVirtIntfEntry, fcoeStatsFcfRemoved=fcoeStatsFcfRemoved, acl6CurCfgTCPFlagsMask=acl6CurCfgTCPFlagsMask, swStgNewRoot=swStgNewRoot, ospf3IfInfoEvents=ospf3IfInfoEvents, agTacacsUserMapCurCfgTable=agTacacsUserMapCurCfgTable, accessInfo=accessInfo, radNewCfgAuthenSecondString=radNewCfgAuthenSecondString, aclCurCfgRemarkOutProfDscpTable=aclCurCfgRemarkOutProfDscpTable, ipv6icmpInMsgs=ipv6icmpInMsgs, ipv6icmpOutRouterAdv=ipv6icmpOutRouterAdv, ospf3NewCfgHostDelete=ospf3NewCfgHostDelete, ospf3CurCfgHostIpAddr=ospf3CurCfgHostIpAddr, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, ospfCurCfgDefaultRouteMetricType=ospfCurCfgDefaultRouteMetricType, ospfIntfErrHelloMismatch=ospfIntfErrHelloMismatch, ipMgmtRouteInfoTable=ipMgmtRouteInfoTable, agNewCfgNTPService=agNewCfgNTPService, agNewCfgSyslogTrapStg=agNewCfgSyslogTrapStg, acl6NewCfgFilterActionChangeVlan=acl6NewCfgFilterActionChangeVlan, ospf3CurCfgRedistTable=ospf3CurCfgRedistTable, ospf3CumNbrInit=ospf3CumNbrInit, ospf3RoutesInfoNextHop=ospf3RoutesInfoNextHop, agCurRFC4741NetconfAccess=agCurRFC4741NetconfAccess, ospfIfInfoTotalNeighbours=ospfIfInfoTotalNeighbours, vmCurCfgProfileShapingPeak=vmCurCfgProfileShapingPeak, ipStatsInReceives=ipStatsInReceives, ospfNewCfgHostIpAddr=ospfNewCfgHostIpAddr, qosCurCfgCosWeightEntry=qosCurCfgCosWeightEntry, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, igmpFltNewCfgPortAddFiltRule=igmpFltNewCfgPortAddFiltRule, stpInfoIndex=stpInfoIndex, ospf3NewCfgVirtIntfEntry=ospf3NewCfgVirtIntfEntry, fcoeStatsFcoeAdded=fcoeStatsFcoeAdded, lacpInfoPortPartOpExp=lacpInfoPortPartOpExp, ipCurCfgStaticRoute6Gateway=ipCurCfgStaticRoute6Gateway, ospf3IntfDisdHello=ospf3IntfDisdHello, fcoeStatsEntry=fcoeStatsEntry, ospf3CumIntfChangeStats=ospf3CumIntfChangeStats, igmpNewVlanOlderVerTimer=igmpNewVlanOlderVerTimer, ipv6icmpOutRouterSol=ipv6icmpOutRouterSol, ipmcNewCfgStaticRouteRemTrunk=ipmcNewCfgStaticRouteRemTrunk, ospfCurCfgVirtIntfAreaId=ospfCurCfgVirtIntfAreaId, ipNewCfgNwfEntry=ipNewCfgNwfEntry, vmGroupInfoPort=vmGroupInfoPort, vmbwCurCfgTable=vmbwCurCfgTable, ospfIntfTableMaxSize=ospfIntfTableMaxSize, ospfNewCfgRipOutRmapList=ospfNewCfgRipOutRmapList, hotlinksCfg=hotlinksCfg, errMldIfStatsBlockSlcrsv2=errMldIfStatsBlockSlcrsv2, agAccessCurStrongPassWarning=agAccessCurStrongPassWarning, ldapNewCfgPorttoUse=ldapNewCfgPorttoUse, vrrpInfoVirtRtrConfig=vrrpInfoVirtRtrConfig, vmCurCfgProfileEgressShapingPeak=vmCurCfgProfileEgressShapingPeak, ospf3IfInfoEncryAuthType=ospf3IfInfoEncryAuthType, lldpCurCfgPortframesztlv=lldpCurCfgPortframesztlv, ospfCurCfgAreaTable=ospfCurCfgAreaTable, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, ipNewCfgRmapMetric=ipNewCfgRmapMetric, qosCurCfgDscpIndex=qosCurCfgDscpIndex, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, ipsecSaInfoMode=ipsecSaInfoMode, pktStats=pktStats, ipv6udpOutDgrams=ipv6udpOutDgrams, vmapCurCfgSrcMACMask=vmapCurCfgSrcMACMask, ospfLsdbInfoType=ospfLsdbInfoType, ripRedistributeEbgp=ripRedistributeEbgp, ospfCumNbrAdjointOk=ospfCumNbrAdjointOk, ospf3NewCfgAreaStbInterval=ospf3NewCfgAreaStbInterval, l2ThashNewCfgSmacState=l2ThashNewCfgSmacState, ipNewCfgBootpBcastDomainServerEntry=ipNewCfgBootpBcastDomainServerEntry, pptCurCfgTable=pptCurCfgTable, ospfAreaErrAreaMismatch=ospfAreaErrAreaMismatch, ospf3CumTxHello=ospf3CumTxHello, igmpInfo=igmpInfo, hotlinksCurCfgTriggerFdelay=hotlinksCurCfgTriggerFdelay, ikeCurCfgProposal=ikeCurCfgProposal, ospf3IfNbrIpAddress=ospf3IfNbrIpAddress, mstNewCfgRegionRevision=mstNewCfgRegionRevision, ibmnosPortCtrlIndex=ibmnosPortCtrlIndex, ospfCurCfgHostState=ospfCurCfgHostState, portStatsPhyIfInUnknownProtos=portStatsPhyIfInUnknownProtos, ipsecSpdInfoSaTable=ipsecSpdInfoSaTable, vmGroupInfoVlan=vmGroupInfoVlan, agCurCfgDhcpMgtb=agCurCfgDhcpMgtb, ipCurCfgStaticArpPort=ipCurCfgStaticArpPort, agTftpServer=agTftpServer, stgCurCfgBrgMaxAge=stgCurCfgBrgMaxAge, ospf3CurCfgVirtIntfNbr=ospf3CurCfgVirtIntfNbr, ntpLastUpdateServer=ntpLastUpdateServer, failoverCfg=failoverCfg, ipRouteEcmpInfoGwStatus=ipRouteEcmpInfoGwStatus, ndprefixNewCfgPrefix=ndprefixNewCfgPrefix, sentQ=sentQ, stgCurCfgTableEntry=stgCurCfgTableEntry, vlagStatsPduRcvFdbDynamicAdd=vlagStatsPduRcvFdbDynamicAdd, ospfAreaNbrAdjointOk=ospfAreaNbrAdjointOk, agNewCfgSyslogHost=agNewCfgSyslogHost, sw8021x=sw8021x, ospf3CurCfgConnectedMetric=ospf3CurCfgConnectedMetric, lacpInfoPortMoved=lacpInfoPortMoved, ipv6InReceives=ipv6InReceives, ospf3IntfTxlsUpdates=ospf3IntfTxlsUpdates, vmapCurCfgOutprofDscpEnable=vmapCurCfgOutprofDscpEnable, agTransferPassword=agTransferPassword, ldapNewCfgDomain=ldapNewCfgDomain, vmGroupInfoIsESXSvcCon=vmGroupInfoIsESXSvcCon, ospf3CumDisdlsAcks=ospf3CumDisdlsAcks, ipsecCurCfgSelectorDstPrefix=ipsecCurCfgSelectorDstPrefix, mldInfoGroupsTable=mldInfoGroupsTable, ipCurCfgIntfLoopbackMask=ipCurCfgIntfLoopbackMask, ipCurCfgAspathAction=ipCurCfgAspathAction, ipmcStaticRouteCfg=ipmcStaticRouteCfg, stpInfoPortTableEntry=stpInfoPortTableEntry, portStatsTableEntry=portStatsTableEntry, hotlinksNewCfgFdbUpdateRate=hotlinksNewCfgFdbUpdateRate)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", lacpInfoPortActOpActiv=lacpInfoPortActOpActiv, rxMldIfStatsMASSQQuery=rxMldIfStatsMASSQQuery, allportsStatsTable=allportsStatsTable, ospf3NewCfgRedistEntry=ospf3NewCfgRedistEntry, ibmnosConfigSaveOption=ibmnosConfigSaveOption, agPortCurCfgStpExtGuard=agPortCurCfgStpExtGuard, lldpInfoRemoteDevicesPortDescription=lldpInfoRemoteDevicesPortDescription, swPrimaryPowerSupplyFixed=swPrimaryPowerSupplyFixed, ospf3AreaErrRxSameRTRID=ospf3AreaErrRxSameRTRID, agPortCurCfgUdldMode=agPortCurCfgUdldMode, vmapNewCfgSrcIPAddress=vmapNewCfgSrcIPAddress, bgpInfoDynamicPeerRemoteAs=bgpInfoDynamicPeerRemoteAs, bgpNewCfgGroupRASTable=bgpNewCfgGroupRASTable, vnicCurCfgVnicState=vnicCurCfgVnicState, ospfIntfRxDatabase=ospfIntfRxDatabase, ipCurCfgRmapMetric=ipCurCfgRmapMetric, ospf3CurCfgNssaAsbrDfRtTrans=ospf3CurCfgNssaAsbrDfRtTrans, agNewCfgHttpsServerPort=agNewCfgHttpsServerPort, rxMldIfStatsGeneralQuery=rxMldIfStatsGeneralQuery, ospf3IfInfoDesignatedRouterID=ospf3IfInfoDesignatedRouterID, ipStatsOutRequests=ipStatsOutRequests, bgpNewCfgPeerPassword=bgpNewCfgPeerPassword, vmapNewCfgTypeOfService=vmapNewCfgTypeOfService, ipsecCurCfgDynamicPolicyDelete=ipsecCurCfgDynamicPolicyDelete, ipCurCfgRmapWeight=ipCurCfgRmapWeight, ospfIntfErrIndex=ospfIntfErrIndex, ospfTotalNeighbours=ospfTotalNeighbours, igmpSnoopNewCfgAggrEnaDis=igmpSnoopNewCfgAggrEnaDis, agPortCurCfgVlanTag=agPortCurCfgVlanTag, nostpCurCfgState=nostpCurCfgState, fdbStatsHiwat=fdbStatsHiwat, lldpInfoTxReinitDelay=lldpInfoTxReinitDelay, ecpChnlInfoTable=ecpChnlInfoTable, dhcpInfoDefaultGateway=dhcpInfoDefaultGateway, tacNewCfgSecondaryServer=tacNewCfgSecondaryServer, ipv6icmpOutErrs=ipv6icmpOutErrs, ipNewCfgStaticRoute6Mask=ipNewCfgStaticRoute6Mask, swAcntUnlocked=swAcntUnlocked, ipsecNewCfgTxformDelete=ipsecNewCfgTxformDelete, bgpInfoDynamicPeerEntry=bgpInfoDynamicPeerEntry, agNewCfgDefipMgta=agNewCfgDefipMgta, ospf3NewCfgAreaTable=ospf3NewCfgAreaTable, lacpInfoPortAdminIndex=lacpInfoPortAdminIndex, ospf3VirtIfInfoStatus=ospf3VirtIfInfoStatus, cistInfoPortTable=cistInfoPortTable, ipStaticRoute6ClearAll=ipStaticRoute6ClearAll, lldpNewCfgPortprotidtlv=lldpNewCfgPortprotidtlv, vlanMaxEnt=vlanMaxEnt, ospfVirtIntfInfoIpAddr=ospfVirtIntfInfoIpAddr, ospfCurCfgIntfIndex=ospfCurCfgIntfIndex, ipv6OutNadvs=ipv6OutNadvs, ospfNewCfgVirtIntfDeadMS=ospfNewCfgVirtIntfDeadMS, vmapVlanNewCfgNonServerPortsAddVmap=vmapVlanNewCfgNonServerPortsAddVmap, dot1RateStatsIndx=dot1RateStatsIndx, ospfCumIntfChangeStats=ospfCumIntfChangeStats, bgpInfoPeerRouterId=bgpInfoPeerRouterId, ipNewCfgNwfState=ipNewCfgNwfState, vrrpNewCfgVirtRtrGrpFastAdvertisement=vrrpNewCfgVirtRtrGrpFastAdvertisement, failoverNewCfgTriggerTableEntry=failoverNewCfgTriggerTableEntry, ipsecCurCfgManualPolicyPeer=ipsecCurCfgManualPolicyPeer, lldpInfo=lldpInfo, ospfTimersKickOffStats=ospfTimersKickOffStats, vnicNewCfgVnicTable=vnicNewCfgVnicTable, routeStatEcmpMaxDynamicEntries=routeStatEcmpMaxDynamicEntries, ospfCurCfgRangeAreaIndex=ospfCurCfgRangeAreaIndex, trunkLacpGroupNewCfgTable=trunkLacpGroupNewCfgTable, tcpStatsAttemptFails=tcpStatsAttemptFails, arpInfoFlag=arpInfoFlag, ospfIntfWaitTimer=ospfIntfWaitTimer, ipsecCurCfgTxformIndex=ipsecCurCfgTxformIndex, lldpInfoRemoteDevicesManAddrOID=lldpInfoRemoteDevicesManAddrOID, failoverNewCfgTriggerMconTrunkAdd=failoverNewCfgTriggerMconTrunkAdd, pktStatsJumbosHiWatermark=pktStatsJumbosHiWatermark, bgpNewCfgEbgpMaxPaths=bgpNewCfgEbgpMaxPaths, vlagIslCfg=vlagIslCfg, ipmcNewCfgStaticRouteHostBmap=ipmcNewCfgStaticRouteHostBmap, igmpInfoVersion=igmpInfoVersion, vmapCurCfgSrcPort=vmapCurCfgSrcPort, ospf3NewCfgHostIpAddr=ospf3NewCfgHostIpAddr, ospf3NewCfgHostEntry=ospf3NewCfgHostEntry, ospf3VlinkCountForRouter=ospf3VlinkCountForRouter, ospf3NewCfgRangeIndex=ospf3NewCfgRangeIndex, stpInfoPortDesignatedPort=stpInfoPortDesignatedPort, vmapGroupNewCfgAllPortsGroupIdx=vmapGroupNewCfgAllPortsGroupIdx, vmapVlanCurCfgServerPortsTableEntry=vmapVlanCurCfgServerPortsTableEntry, vmNewCfgGroupAddTrunk=vmNewCfgGroupAddTrunk, geaportInfoLogicalIndex=geaportInfoLogicalIndex, geaportInfoUnit=geaportInfoUnit, ipRouteEcmpInfoTable=ipRouteEcmpInfoTable, vmapNewCfgMeterEnable=vmapNewCfgMeterEnable, sshNewCfgHKeyGen=sshNewCfgHKeyGen, bgpInfoGroupIndex=bgpInfoGroupIndex, acl6NewCfgDstIPv6Address=acl6NewCfgDstIPv6Address, vlagInfoSystemMac=vlagInfoSystemMac, ospf3RoutesInfoType=ospf3RoutesInfoType, bgpCurCfgPeerRipState=bgpCurCfgPeerRipState, ospfIfNbrPriority=ospfIfNbrPriority, ospf3NewCfgVirtIntfStatus=ospf3NewCfgVirtIntfStatus, intfInfoNetMask=intfInfoNetMask, agNewCfgDefipData=agNewCfgDefipData, bgpNewCfgPeerRemoveOutRmap=bgpNewCfgPeerRemoveOutRmap, hardwareManufacturingDate=hardwareManufacturingDate, bootpRelayStatsRequestsDroppedNoServer=bootpRelayStatsRequestsDroppedNoServer, mstCistNewCfgBridgePriority=mstCistNewCfgBridgePriority, fipsPortNewCfgFipsEna=fipsPortNewCfgFipsEna, lldpInfoRxRemoteChanged=lldpInfoRxRemoteChanged, hotlinksNewCfgTriggerBackupTrunk=hotlinksNewCfgTriggerBackupTrunk, lldpCurCfgPortportdesctlv=lldpCurCfgPortportdesctlv, ospf3ClearStats=ospf3ClearStats, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, sflowCurPortCfgTableId=sflowCurPortCfgTableId, ipNewCfgGwRetry=ipNewCfgGwRetry, bgpInfoSummaryState=bgpInfoSummaryState, aclNewCfgSrcMACAddress=aclNewCfgSrcMACAddress, swVMGroupVMotion=swVMGroupVMotion, ripNewCfgIntfSplitHorizon=ripNewCfgIntfSplitHorizon, g8124_mgmt=g8124_mgmt, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, oamInfoPortLocalLinkStatus=oamInfoPortLocalLinkStatus, ecpChnlInfoEntryIndex=ecpChnlInfoEntryIndex, agCurCfgResetControl=agCurCfgResetControl, ipCurCfgStaticNbrTable=ipCurCfgStaticNbrTable, ipv6OutRoutadvs=ipv6OutRoutadvs, ipNewCfgBootpBcastDomainTable=ipNewCfgBootpBcastDomainTable, agSyslogMsgTableMaxSize=agSyslogMsgTableMaxSize, allportsStatsInUcast=allportsStatsInUcast, ospfNewCfgVirtIntfMdkey=ospfNewCfgVirtIntfMdkey, vmapNewCfgInprofDscp=vmapNewCfgInprofDscp, igmpStaticMrtrCurCfgPortId=igmpStaticMrtrCurCfgPortId, agCurCfgSyslogHostPort=agCurCfgSyslogHostPort, vlagNewCfgLacpTable=vlagNewCfgLacpTable, mcastFdbNewCfgRemPort=mcastFdbNewCfgRemPort, stgNewCfgStgIndex=stgNewCfgStgIndex, bgpNewCfgASNumber=bgpNewCfgASNumber, virtVMwareHostPGName=virtVMwareHostPGName, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, vlanAutoStgNewCfgState=vlanAutoStgNewCfgState, vmapCurCfgEntry=vmapCurCfgEntry, ipCurCfgStaticNbrIndx=ipCurCfgStaticNbrIndx, ospfNewCfgVirtIntfAreaId=ospfNewCfgVirtIntfAreaId, ospfCurCfgHostCost=ospfCurCfgHostCost, mldInfoGroupPortNumber=mldInfoGroupPortNumber, allportsStatsOutBcastRate=allportsStatsOutBcastRate, ripNewCfgIntfDefault=ripNewCfgIntfDefault, hardwareFlashConfiguration=hardwareFlashConfiguration, vlanNewCfgTableEntry=vlanNewCfgTableEntry, lldpInfoRemoteDevicesManAddr=lldpInfoRemoteDevicesManAddr, portMgmtStatsTxDropped=portMgmtStatsTxDropped, agCurCfgSyslogTrapDcbx=agCurCfgSyslogTrapDcbx, ospf3NewCfgVirtIntfIndex=ospf3NewCfgVirtIntfIndex, fdbStats=fdbStats, ospf3NewCfgRangeDelete=ospf3NewCfgRangeDelete, igmpNewCfgVlanOperVersion=igmpNewCfgVlanOperVersion, lldpNewCfgPortTable=lldpNewCfgPortTable, ibmnosBootVer=ibmnosBootVer, acl6NewCfgFilterAction=acl6NewCfgFilterAction, tacCurCfgTimeout=tacCurCfgTimeout, ospfLoopIfInfoDesignatedRouterIpAddress=ospfLoopIfInfoDesignatedRouterIpAddress, virtVMwareHostPGTable=virtVMwareHostPGTable, ospf3AreaDisdlsUpdates=ospf3AreaDisdlsUpdates, igmpV3SnoopNewCfgV1V2EnaDis=igmpV3SnoopNewCfgV1V2EnaDis, aclNewCfgRemarkOutProfDscpTable=aclNewCfgRemarkOutProfDscpTable, sflowCurCfgState=sflowCurCfgState, lldpClearMsap=lldpClearMsap, mldInfoMRoutersTable=mldInfoMRoutersTable, virtVMwareHostNameIpAddress=virtVMwareHostNameIpAddress, ipNewCfgIntfAdvLifetime=ipNewCfgIntfAdvLifetime, ipNewCfgStaticNbrEntry=ipNewCfgStaticNbrEntry, icmpClearStats=icmpClearStats, ospf3SpfDelay=ospf3SpfDelay, ipNewCfgBootpBcastDomainAction=ipNewCfgBootpBcastDomainAction, ospf3OverFlowState=ospf3OverFlowState, hotlinksNewCfgFdbUpdateState=hotlinksNewCfgFdbUpdateState, ospf3AreaIntfIndex=ospf3AreaIntfIndex, failoverInfoTriggerMonPortEntry=failoverInfoTriggerMonPortEntry, vlagNewCfgHlthchkKeepaliveAttempts=vlagNewCfgHlthchkKeepaliveAttempts, ipCurCfgGwIpv6Addr=ipCurCfgGwIpv6Addr, ipNewCfgIntfAdvMtu=ipNewCfgIntfAdvMtu, ipRoute6InfoDestIp=ipRoute6InfoDestIp, ipStaticRouteCurEcmpHash=ipStaticRouteCurEcmpHash, vlanCurCfgState=vlanCurCfgState, agAccess=agAccess, agImageForNextReset=agImageForNextReset, bgpInfoLcPrf=bgpInfoLcPrf, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, ospfIntfErrInvalidSelfOrigLSA=ospfIntfErrInvalidSelfOrigLSA, acl6StatsIndex=acl6StatsIndex, vmapNewCfg8021pPriority=vmapNewCfg8021pPriority, ospfNewCfgEbgpMetric=ospfNewCfgEbgpMetric, swVMGroupVMVlanChange=swVMGroupVMVlanChange, swHotlinksMasterDn=swHotlinksMasterDn, vmGroupInfoIP=vmGroupInfoIP, ospf3NewCfgAreaId=ospf3NewCfgAreaId, ipStatsInHdrErrors=ipStatsInHdrErrors, icmpStatsOutEchos=icmpStatsOutEchos, agAccessUserCurCfgTable=agAccessUserCurCfgTable, lacpInfoPortActAdColl=lacpInfoPortActAdColl, ospf3CumTxlsReqs=ospf3CumTxlsReqs, mldInfoGroupVersion=mldInfoGroupVersion, ikeCurCfgPskRemoteDelete=ikeCurCfgPskRemoteDelete, agApplyString=agApplyString, mstCistCurCfgPortPathCost=mstCistCurCfgPortPathCost, trunkLacpGroupCurCfgTableEntry=trunkLacpGroupCurCfgTableEntry, ospf3RouteRedistribution=ospf3RouteRedistribution, vlagInfoInstanceTable=vlagInfoInstanceTable, ibmnoscfa=ibmnoscfa, ipCurCfgStaticNbrEntry=ipCurCfgStaticNbrEntry, ndprefixNewCfgIndx=ndprefixNewCfgIndx, ospf3General=ospf3General, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, hotlinksNewCfgTriggerState=hotlinksNewCfgTriggerState, ospf3NewCfgVirtIntfDelete=ospf3NewCfgVirtIntfDelete, failoverCurCfgTriggerMconPort=failoverCurCfgTriggerMconPort, vmCurCfgCheckAclsMax=vmCurCfgCheckAclsMax, swLACPPortBlocked=swLACPPortBlocked, sflowNewPortPolling=sflowNewPortPolling, vmapCurCfgTagFmt=vmapCurCfgTagFmt, stpInfoDesignatedRoot=stpInfoDesignatedRoot, lacpInfoPortOperTable=lacpInfoPortOperTable, ndprefixCurCfgIndx=ndprefixCurCfgIndx, ospfLoopIfInfoIpAddress=ospfLoopIfInfoIpAddress, qosCurCfgPriorityCoSTable=qosCurCfgPriorityCoSTable, ospf3NewCfgNbrTable=ospf3NewCfgNbrTable, ospfExtLsdbInfoRouterId=ospfExtLsdbInfoRouterId, ospfCurCfgIntfAuthKey=ospfCurCfgIntfAuthKey, fcoeOper=fcoeOper, hotlinksInfoFdbUpdateRate=hotlinksInfoFdbUpdateRate, vmapCurCfgDstMACMask=vmapCurCfgDstMACMask, virtVMwareVM=virtVMwareVM, ipCurCfgIntfEntry=ipCurCfgIntfEntry, ipCurCfgAlistRmapIndex=ipCurCfgAlistRmapIndex, ripNewCfgOspfMetric=ripNewCfgOspfMetric, ipCurCfgStaticRoute6Indx=ipCurCfgStaticRoute6Indx, ibmnosFdbSrcTrunk=ibmnosFdbSrcTrunk, bgpInfoSummaryTotalReceivedPackets=bgpInfoSummaryTotalReceivedPackets, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, agCurBootNxtCliModePrompt=agCurBootNxtCliModePrompt, icmpStatsOutTimeExcds=icmpStatsOutTimeExcds, vmapGroupNewCfgAllPortsRemVmap=vmapGroupNewCfgAllPortsRemVmap, ospf3CumTxDatabase=ospf3CumTxDatabase, ipDataRouteInfoMask=ipDataRouteInfoMask, bgpInfoPeerState=bgpInfoPeerState, vmapNewCfgSrcIPMask=vmapNewCfgSrcIPMask, bootpRelayStatsRequestsRelayed=bootpRelayStatsRequestsRelayed, bgpNewCfgGroupAddOutRmap=bgpNewCfgGroupAddOutRmap, ospf3IntfErrRxVerMismatch=ospf3IntfErrRxVerMismatch, vlagInstanceId=vlagInstanceId, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, agentConfig=agentConfig, errMldIfStatsMLDv2Report=errMldIfStatsMLDv2Report, igmpSnoopCurCfgVlanBmap=igmpSnoopCurCfgVlanBmap, vnicCurCfgVnicMAC=vnicCurCfgVnicMAC, ospf3IfInfoState=ospf3IfInfoState, ospf3CurCfgRedistState=ospf3CurCfgRedistState)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", vmapStatsTableEntry=vmapStatsTableEntry, vmapVlanNewCfgAllPortsTableEntry=vmapVlanNewCfgAllPortsTableEntry, vlagStatsPduRcvFdbDynamicDel=vlagStatsPduRcvFdbDynamicDel, ospf3CurCfgVirtIntfRetra=ospf3CurCfgVirtIntfRetra, aclNewCfgReset=aclNewCfgReset, hotlinksNewCfgTriggerBackupPort=hotlinksNewCfgTriggerBackupPort, agClearFlashDump=agClearFlashDump, ipsecSpdInfoMode=ipsecSpdInfoMode, ospf3CurCfgVirtIntfAreaId=ospf3CurCfgVirtIntfAreaId, igmpV3SnoopCfg=igmpV3SnoopCfg, tacCurCfgAttempts=tacCurCfgAttempts, lldpNewCfgPortsysdescrtlv=lldpNewCfgPortsysdescrtlv, ospfRouteRedistribution=ospfRouteRedistribution, ikeCurCfgPskRemoteAddr=ikeCurCfgPskRemoteAddr, bgpCurCfgGroupEntry=bgpCurCfgGroupEntry, ospfAreaNbrDown=ospfAreaNbrDown, arpInfo=arpInfo, lacpInfoAggrActOperKey=lacpInfoAggrActOperKey, vlanInfoId=vlanInfoId, virtCurCfgVMwareHello=virtCurCfgVMwareHello, ibmnosFdbSrcPort=ibmnosFdbSrcPort, agPortCurCfgDscpRemarking=agPortCurCfgDscpRemarking, acl6NewCfgSrcIPv6Address=acl6NewCfgSrcIPv6Address, failoverNewCfgTriggerTable=failoverNewCfgTriggerTable, sshNewCfgSSHPort=sshNewCfgSSHPort, trunkGroupInfoPortTrunkId=trunkGroupInfoPortTrunkId, udpStatsOutDatagrams=udpStatsOutDatagrams, ospf3IntfTxDatabase=ospf3IntfTxDatabase, dnsNewCfgPriServerPort=dnsNewCfgPriServerPort, ipNewCfgStaticRoute6Action=ipNewCfgStaticRoute6Action, ospfIntfRxlsReqs=ospfIntfRxlsReqs, mstCurCfgStpMode=mstCurCfgStpMode, ospf3CumNbrDown=ospf3CumNbrDown, vnicCurCfgGroupState=vnicCurCfgGroupState, mldStatBadLength=mldStatBadLength, portMgmtStatsTxErrors=portMgmtStatsTxErrors, agCurCfgErrDisableTimeout=agCurCfgErrDisableTimeout, ospf3IntfErrRxOspfOff=ospf3IntfErrRxOspfOff, agAccessCurStrongPassAttemptsMaxFail=agAccessCurStrongPassAttemptsMaxFail, ipCurCfgBootpBcastDomainServerTable=ipCurCfgBootpBcastDomainServerTable, vmapCurCfgFilterActionChangeVlan=vmapCurCfgFilterActionChangeVlan, lacpInfoAggrPartSysPrio=lacpInfoAggrPartSysPrio, ipsecSaStatsEntry=ipsecSaStatsEntry, bgpInfoPeerTable=bgpInfoPeerTable, dhcpSnoopingBindingInfoIp=dhcpSnoopingBindingInfoIp, ospfCumRxPkts=ospfCumRxPkts, ipCurCfgBootpBcastDomainVlan=ipCurCfgBootpBcastDomainVlan, ecpChnlSndlen=ecpChnlSndlen, vlanInfo=vlanInfo, tacNewCfgEnableAccounting=tacNewCfgEnableAccounting, ibmnos_BladeSwitch=ibmnos_BladeSwitch, hotlinksNewCfgTriggerDelete=hotlinksNewCfgTriggerDelete, vmapGroupNewCfgNonServerPortsRemVmap=vmapGroupNewCfgNonServerPortsRemVmap, ospf3Info=ospf3Info, hotlinksNewCfgTriggerMasterPort=hotlinksNewCfgTriggerMasterPort, ipCurCfgBootpAddr2=ipCurCfgBootpAddr2, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, failoverInfoTriggerCtlPortId=failoverInfoTriggerCtlPortId, ipmcNewCfgStaticRouteTable=ipmcNewCfgStaticRouteTable, ospf3TotalActiveAreas=ospf3TotalActiveAreas, ospf3AreaTxHello=ospf3AreaTxHello, mstCurCfgRegionRevision=mstCurCfgRegionRevision, vlagStatsClear=vlagStatsClear, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, portInfoErrDisableRecovery=portInfoErrDisableRecovery, radNewCfgSrcLoopIf=radNewCfgSrcLoopIf, swHotlinksBackupDn=swHotlinksBackupDn, ndprefixCurCfgTable=ndprefixCurCfgTable, lldpNewCfgMsgTxHld=lldpNewCfgMsgTxHld, vlagInstanceAdminKey=vlagInstanceAdminKey, ospf3NewCfgVirtIntfRetra=ospf3NewCfgVirtIntfRetra, vmCurCfgGroupValidateMode=vmCurCfgGroupValidateMode, portMgmtStatsTxpackets=portMgmtStatsTxpackets, nsnmpInGetNexts=nsnmpInGetNexts, ospfNewCfgState=ospfNewCfgState, lldpGeneral=lldpGeneral, lldpInfoRemoteDevicesTable=lldpInfoRemoteDevicesTable, vmapNewCfgInprofDscpEnable=vmapNewCfgInprofDscpEnable, hwPowerSupply1State=hwPowerSupply1State, ipCurCfgRmapPrec=ipCurCfgRmapPrec, ospfNewCfgHostEntry=ospfNewCfgHostEntry, vmNewCfgGroupRemProfile=vmNewCfgGroupRemProfile, sflowCurCfgServerAddress=sflowCurCfgServerAddress, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, lacpStatsIndex=lacpStatsIndex, dot1RateTpLearnedEntryDiscards=dot1RateTpLearnedEntryDiscards, ipCurCfgGwIpv6Index=ipCurCfgGwIpv6Index, pptNewCfgAction=pptNewCfgAction, aclNewCfgTCPFlagsMask=aclNewCfgTCPFlagsMask, ospf3CurCfgRangeRouteTag=ospf3CurCfgRangeRouteTag, vnicNewCfgVnicEntry=vnicNewCfgVnicEntry, agNewCfgErrDisableRecovery=agNewCfgErrDisableRecovery, ipv6OutNsols=ipv6OutNsols, ospf3TotalNumberOfAsScopeLsas=ospf3TotalNumberOfAsScopeLsas, tacCurCfgCmdAuthor=tacCurCfgCmdAuthor, ipv6InRoutRedirs=ipv6InRoutRedirs, hotlinksNewCfgTriggerName=hotlinksNewCfgTriggerName, ospfNewCfgAreaTable=ospfNewCfgAreaTable, radNewCfgPrimaryServer=radNewCfgPrimaryServer, agAccessUserNewCos=agAccessUserNewCos, sflowNewCfgState=sflowNewCfgState, sshNewCfgScpAdm=sshNewCfgScpAdm, pmNewCfgPmonDelete=pmNewCfgPmonDelete, ospf3IntfChangeStats=ospf3IntfChangeStats, agCfgDumpString=agCfgDumpString, lldpInfoPortportvidtlv=lldpInfoPortportvidtlv, vmapGroupCurCfgNonServerPortsGroupIdx=vmapGroupCurCfgNonServerPortsGroupIdx, ospf3NewCfgIntfEncryKey=ospf3NewCfgIntfEncryKey, hwFanSpeed=hwFanSpeed, ipInfoBootpRelayAddr=ipInfoBootpRelayAddr, aclCurCfgEthernetTypeValue=aclCurCfgEthernetTypeValue, ospf3IntfErrBadAreaID=ospf3IntfErrBadAreaID, bootpRelayStatsRequestsDroppedError=bootpRelayStatsRequestsDroppedError, bgpInfoDynamicPeerIndex=bgpInfoDynamicPeerIndex, aclLogCurRateLimit=aclLogCurRateLimit, vmapNewCfgMirrorPort=vmapNewCfgMirrorPort, bgpCurCfgPeerAlive=bgpCurCfgPeerAlive, vlagCfg=vlagCfg, igmpInfoVlanId=igmpInfoVlanId, rxMldIfStatsAllowSlcrsv2=rxMldIfStatsAllowSlcrsv2, ospf3VirtIfInfoTransitDelay=ospf3VirtIfInfoTransitDelay, ospfNewCfgVirtIntfHello=ospfNewCfgVirtIntfHello, bgpInfoPeerLastState=bgpInfoPeerLastState, igmpFltCurCfgTableEntry=igmpFltCurCfgTableEntry, ipv6ClearUdpStats=ipv6ClearUdpStats, lacpInfoCollDetState=lacpInfoCollDetState, tacNewCfgCmdLogging=tacNewCfgCmdLogging, dhcpSnoopingBindingInfoIndex=dhcpSnoopingBindingInfoIndex, igmpCurCfgOtherQurAddress=igmpCurCfgOtherQurAddress, bgpInfoKeepalive=bgpInfoKeepalive, vmapCurCfgTable=vmapCurCfgTable, lacpInfoPortActOpDef=lacpInfoPortActOpDef, udldInfoNeighborIndex=udldInfoNeighborIndex, lldpCurCfgMsgTxHld=lldpCurCfgMsgTxHld, ripCurCfgIntfMetric=ripCurCfgIntfMetric, ipNewCfgAspathState=ipNewCfgAspathState, agAccessNewStrongPassValidity=agAccessNewStrongPassValidity, nsnmpEnableAuthTraps=nsnmpEnableAuthTraps, oamStatsPortRemoteDyingGasps=oamStatsPortRemoteDyingGasps, ipsecSaInfoEncrAlg=ipsecSaInfoEncrAlg, agNewCfgSysCustomDstStart=agNewCfgSysCustomDstStart, failoverNewCfgTriggerMmonKeyAdd=failoverNewCfgTriggerMmonKeyAdd, swImage1Version=swImage1Version, swVlagIslDown=swVlagIslDown, ipsecNewCfgIfManualPolicyBmap=ipsecNewCfgIfManualPolicyBmap, ospf3NewCfgExtRangeAggrEffect=ospf3NewCfgExtRangeAggrEffect, ipsecCurCfgTxformMode=ipsecCurCfgTxformMode, ospf3IntfDr=ospf3IntfDr, udldInfoPortConfig=udldInfoPortConfig, ipsecNewCfgTxformEntry=ipsecNewCfgTxformEntry, bgpInfoPeerVersion=bgpInfoPeerVersion, lldpInfoRxRxTTL=lldpInfoRxRxTTL, ripCurCfgEospfOutRmapList=ripCurCfgEospfOutRmapList, ipNewCfgIntfOtherCfg=ipNewCfgIntfOtherCfg, nsnmpInBadValues=nsnmpInBadValues, cistRootPathCost=cistRootPathCost, ipDataRouteInfoGateway2=ipDataRouteInfoGateway2, igmpMrtrInfoExpires=igmpMrtrInfoExpires, ipStaticRouteNewPingInterval=ipStaticRouteNewPingInterval, dhcpSnoopingBindingInfoVLAN=dhcpSnoopingBindingInfoVLAN, hardwareSerialNumber=hardwareSerialNumber, portMgmtStatsTable=portMgmtStatsTable, ripInfoIntfState=ripInfoIntfState, ndprefixNewCfgPreferredLifetimeFlag=ndprefixNewCfgPreferredLifetimeFlag, failoverCurCfgTriggerLimit=failoverCurCfgTriggerLimit, igmpMrtrInfoVersion=igmpMrtrInfoVersion, txMldIfStatsMLDv1Report=txMldIfStatsMLDv1Report, ospf3NewCfgConnectedRouteTag=ospf3NewCfgConnectedRouteTag, ospfAreaRxHello=ospfAreaRxHello, vmNewCfgProfileEgressShapingPeak=vmNewCfgProfileEgressShapingPeak, ospf3AreaNbrChangeStats=ospf3AreaNbrChangeStats, ospfAreaTxlsReqs=ospfAreaTxlsReqs, agCurCfgHprompt=agCurCfgHprompt, ospf3CumNbrN2way=ospf3CumNbrN2way, agPortCurCfgOamMode=agPortCurCfgOamMode, agCurCfgDefipData=agCurCfgDefipData, ipNewCfgIntfHopLimit=ipNewCfgIntfHopLimit, agCfgBootReset=agCfgBootReset, ipCurCfgRmapState=ipCurCfgRmapState, agAccessNewDefaultAdmin=agAccessNewDefaultAdmin, ospf3NewCfgIntfTable=ospf3NewCfgIntfTable, ospf3CurCfgVirtIntfTrans=ospf3CurCfgVirtIntfTrans, ospf3CurCfgRangeAreaIndex=ospf3CurCfgRangeAreaIndex, lacpInfoPortLacpEna=lacpInfoPortLacpEna, hardwareRevision=hardwareRevision, agNetbootTftpAddr=agNetbootTftpAddr, bgpCurCfgGroupAdvert=bgpCurCfgGroupAdvert, portState=portState, vmapVlanCurCfgServerPortsVlanIdx=vmapVlanCurCfgServerPortsVlanIdx, fdbCurCfgStaticEntry=fdbCurCfgStaticEntry, bgpInfoLastErrorCode=bgpInfoLastErrorCode, stgCurCfgBrgHelloTime=stgCurCfgBrgHelloTime, vmNewCfgCheckActionBasic=vmNewCfgCheckActionBasic, hwTempSensors=hwTempSensors, ospf3NewCfgNbrPriority=ospf3NewCfgNbrPriority, agCurCfgDefipMgta=agCurCfgDefipMgta, ipStaticRoute6ClearAllByGatewayIp=ipStaticRoute6ClearAllByGatewayIp, ospf3NewCfgRangeAreaIndex=ospf3NewCfgRangeAreaIndex, agBoot=agBoot, ospfAreaRxDatabase=ospfAreaRxDatabase, vmapVlanNewCfgNonServerPortsTable=vmapVlanNewCfgNonServerPortsTable, ospfRoutesInfoEntry=ospfRoutesInfoEntry, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, bgpCurCfgAggrAddr=bgpCurCfgAggrAddr, vmapGroupCurCfgAllPortsTable=vmapGroupCurCfgAllPortsTable, dhcpInfoLeaseExpires=dhcpInfoLeaseExpires, vmapVlanCfgNonServerPorts=vmapVlanCfgNonServerPorts, ipsecSpdInfoSaAuthAlg=ipsecSpdInfoSaAuthAlg, vmNewCfgCheckActionAdvanced=vmNewCfgCheckActionAdvanced, ripNewCfgStaticRemoveOutRmap=ripNewCfgStaticRemoveOutRmap, acl6CurCfgSrcIPv6PrefixLen=acl6CurCfgSrcIPv6PrefixLen, cistInfoPortRole=cistInfoPortRole, Timeout=Timeout, agCurCfgSyslogHost=agCurCfgSyslogHost, ikeGroup=ikeGroup, cpuProcessUtil5Min=cpuProcessUtil5Min, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, portInfoPhyIfOperStatus=portInfoPhyIfOperStatus, lldpInfoRxRxInfoAge=lldpInfoRxRxInfoAge, ipsecCurCfgSelectorIndex=ipsecCurCfgSelectorIndex, ipRouteEcmpInfoEntry=ipRouteEcmpInfoEntry, mldInfoMRouterExpiryTime=mldInfoMRouterExpiryTime, ripInfoIntfEntry=ripInfoIntfEntry, vmNewCfgGroupMacVMMac=vmNewCfgGroupMacVMMac, agCurCfgSyslog2Sev=agCurCfgSyslog2Sev, igmpFilterCfg=igmpFilterCfg, ospfRedistributeIbgp=ospfRedistributeIbgp, bootpRelayStatsRepliesRelayed=bootpRelayStatsRepliesRelayed, vnicNewCfgGroupPorts=vnicNewCfgGroupPorts, ospfIfInfoRetransmit=ospfIfInfoRetransmit, ospf3AreaErrBadPktType=ospf3AreaErrBadPktType, agPortCurCfgBpduGuard=agPortCurCfgBpduGuard, fdbNewCfgAddTrunk=fdbNewCfgAddTrunk, ospfCurCfgVirtIntfStatus=ospfCurCfgVirtIntfStatus, igmpNewCfgQueryInterval=igmpNewCfgQueryInterval, aclCurCfgPortTableEntry=aclCurCfgPortTableEntry, ospfIfInfoDead=ospfIfInfoDead, vnicCurCfgGroupTrunk=vnicCurCfgGroupTrunk, serverPortsCurCfgPorts=serverPortsCurCfgPorts, ripInfoIntfIndex=ripInfoIntfIndex, agPortNewCfgPortName=agPortNewCfgPortName, ikeCurCfgIdData=ikeCurCfgIdData, acl6CurCfgEntry=acl6CurCfgEntry, aclNewCfgVLanMask=aclNewCfgVLanMask, ipv6icmpInErrs=ipv6icmpInErrs, aclNewCfgRemarkOutProfDscpIndex=aclNewCfgRemarkOutProfDscpIndex, ospf3CurCfgAreaEntry=ospf3CurCfgAreaEntry, pmCurCfgPortMonitorEntry=pmCurCfgPortMonitorEntry, ospf3IntfRxPkts=ospf3IntfRxPkts, ipsecSaStatsPkts=ipsecSaStatsPkts, ospfVirtIntfInfoNbrState=ospfVirtIntfInfoNbrState, ospf3CurCfgIntfEncryEnable=ospf3CurCfgIntfEncryEnable, ripInfoIntfAuth=ripInfoIntfAuth, ospfSumRangesInfoMask=ospfSumRangesInfoMask)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", gatewayIPv6InfoEntry=gatewayIPv6InfoEntry, igmpFltNewCfgPortTableEntry=igmpFltNewCfgPortTableEntry, failoverInfoTriggerCtlPortEntry=failoverInfoTriggerCtlPortEntry, bgpNewCfgGroupState=bgpNewCfgGroupState, l2ThashCurCfgDipState=l2ThashCurCfgDipState, nostpNewCfgState=nostpNewCfgState, ipsecNewCfgDynamicPolicyIndex=ipsecNewCfgDynamicPolicyIndex, ripStatInPackets=ripStatInPackets, ipmcStaticRouteTableMaxSize=ipmcStaticRouteTableMaxSize, lacpCurPortActorPortPriority=lacpCurPortActorPortPriority, mcastFdbNewCfgEntryIndex=mcastFdbNewCfgEntryIndex, ospf3VirtIfInfoNeighbor=ospf3VirtIfInfoNeighbor, vlagStatsPduSentFdbInactiveDel=vlagStatsPduSentFdbInactiveDel, mldInfoInterfaceVersion=mldInfoInterfaceVersion, memorySharedStats=memorySharedStats, ospfAreaIntfHello=ospfAreaIntfHello, agBootVer=agBootVer, agPortOperTableEntry=agPortOperTableEntry, sshCurCfgScpAdm=sshCurCfgScpAdm, ospfCurCfgLoopIfEntry=ospfCurCfgLoopIfEntry, ospf3NewCfgStaticRouteTagTypeManual=ospf3NewCfgStaticRouteTagTypeManual, ripCurCfgIntfTable=ripCurCfgIntfTable, bgpGroupTableMax=bgpGroupTableMax, vlagInstanceTrunkId=vlagInstanceTrunkId, ibmnosPortCtrlDuplex=ibmnosPortCtrlDuplex, nsnmpOutBadValues=nsnmpOutBadValues, igmpSnoopCurCfgVlanFastlvBmap=igmpSnoopCurCfgVlanFastlvBmap, ibmnosPortTableMaxEnt=ibmnosPortTableMaxEnt, ospfCurCfgVirtIntfDead=ospfCurCfgVirtIntfDead, vmNewCfgGroupRemTrunk=vmNewCfgGroupRemTrunk, ospfCumNbrBadRequests=ospfCumNbrBadRequests, ipsecSpdInfoDstAddr=ipsecSpdInfoDstAddr, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, ospf3IntfDisdPkts=ospf3IntfDisdPkts, ndprefixNewCfgPrefixLen=ndprefixNewCfgPrefixLen, sflowCurPortSampling=sflowCurPortSampling, ripNewCfgIntfEntry=ripNewCfgIntfEntry, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, ipCurCfgIntfRouteAdv=ipCurCfgIntfRouteAdv, ipsecNewCfgManualPolicyInAhKey=ipsecNewCfgManualPolicyInAhKey, agCurCfgSyslogTrapDifftrak=agCurCfgSyslogTrapDifftrak, ipRouteEcmpInfoMask=ipRouteEcmpInfoMask, vmNewCfgCheckTrustRemPort=vmNewCfgCheckTrustRemPort, ospfVirtIntfInfoTrans=ospfVirtIntfInfoTrans, vrrpStatBadVersion=vrrpStatBadVersion, ipv6icmpOutTmexceeded=ipv6icmpOutTmexceeded, failoverInfo=failoverInfo, aclCurCfgRemarkOutProfDscpMkdnDscp=aclCurCfgRemarkOutProfDscpMkdnDscp, ipsecCurCfgManualPolicyTable=ipsecCurCfgManualPolicyTable, ipmcNewCfgStaticRouteAddPort=ipmcNewCfgStaticRouteAddPort, ospf3AreaRxlsUpdates=ospf3AreaRxlsUpdates, vmapNewCfgFilterAction=vmapNewCfgFilterAction, ospf3ASBoundaryRouter=ospf3ASBoundaryRouter, mstCistCurCfgPortPriority=mstCistCurCfgPortPriority, ipNewCfgStaticNbrPort=ipNewCfgStaticNbrPort, acl6NewCfgIPv6TrafficClass=acl6NewCfgIPv6TrafficClass, udldInfoNeighborLocalPortIndex=udldInfoNeighborLocalPortIndex, agCurCfgSyslogTrapVnic=agCurCfgSyslogTrapVnic, lldpInfoRemoteDevicesChassisId=lldpInfoRemoteDevicesChassisId, ipsecSaInfoProto=ipsecSaInfoProto, virtVMwareHostPGVswitchName=virtVMwareHostPGVswitchName, agCurCfgSyslogTrapIgmpGroup=agCurCfgSyslogTrapIgmpGroup, vlanInfoTableEntry=vlanInfoTableEntry, unknownRx=unknownRx, txIgmpReports=txIgmpReports, g8124=g8124, ipCurCfgNwfAddr=ipCurCfgNwfAddr, failoverCurCfgTriggerMmonKey=failoverCurCfgTriggerMmonKey, vmNewCfgProfileIndex=vmNewCfgProfileIndex, ospfIfInfoIpAddress=ospfIfInfoIpAddress, sshNewCfgStatus=sshNewCfgStatus, qosNewCfgPriorityCoSq=qosNewCfgPriorityCoSq, acl6CurCfgTCPFlags=acl6CurCfgTCPFlags, lacpInfoPortActAdDef=lacpInfoPortActAdDef, lldpCurCfgPortprotidtlv=lldpCurCfgPortprotidtlv, ospf3NewCfgExitOverflow=ospf3NewCfgExitOverflow, ospf3AreaRxlsReqs=ospf3AreaRxlsReqs, ospfAreaInfoAuthType=ospfAreaInfoAuthType, stpInfoPortDesignatedBridge=stpInfoPortDesignatedBridge, ospf3CumDisdHello=ospf3CumDisdHello, ospfTmrsKckOffHello=ospfTmrsKckOffHello, ikeCurCfgPropGroup=ikeCurCfgPropGroup, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp, agCurCfgNTPSecServerPort=agCurCfgNTPSecServerPort, radCurCfgPort=radCurCfgPort, agRadiusConfig=agRadiusConfig, sfpInfoApproved=sfpInfoApproved, lacpInfoPortPerState=lacpInfoPortPerState, aclCurCfgFilterActionChangeVlan=aclCurCfgFilterActionChangeVlan, ospf3IntfNbrIndex=ospf3IntfNbrIndex, sfpInfoVendor=sfpInfoVendor, intfInfoIndex=intfInfoIndex, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, vmapCurCfgDstPortMask=vmapCurCfgDstPortMask, vnicNewCfgGroupAddPort=vnicNewCfgGroupAddPort, failoverCurCfgTriggerMmonPort=failoverCurCfgTriggerMmonPort, igmpStaticMrtrCurCfgVersion=igmpStaticMrtrCurCfgVersion, vlagCurCfgHlthchkConnectRetryInterval=vlagCurCfgHlthchkConnectRetryInterval, ipv6InDiscards=ipv6InDiscards, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, ospfClearStats=ospfClearStats, clearPortsStats=clearPortsStats, mcastFdbVlan=mcastFdbVlan, dnsClearStats=dnsClearStats, ospfNewCfgDefaultRouteMetricType=ospfNewCfgDefaultRouteMetricType, vmapCurCfgSrcPortMask=vmapCurCfgSrcPortMask, ripNewCfgOspfRemoveOutRmap=ripNewCfgOspfRemoveOutRmap, ipCurCfgStaticArpIp=ipCurCfgStaticArpIp, ipStaticRouteClearAllByInterface=ipStaticRouteClearAllByInterface, vmapNewCfgEthernetTypeValue=vmapNewCfgEthernetTypeValue, ospf3IntfErrorStatsEntry=ospf3IntfErrorStatsEntry, ospf3NewCfgAreaDelete=ospf3NewCfgAreaDelete, vrrpGeneral=vrrpGeneral, vrrpNewCfgGenState=vrrpNewCfgGenState, portStats=portStats, stpInfoRootPort=stpInfoRootPort, vlagStatsPduRcvSystemInfo=vlagStatsPduRcvSystemInfo, vlagInfoAdminRole=vlagInfoAdminRole, agCurCfgSyslogTrapOspfv3=agCurCfgSyslogTrapOspfv3, lldpInfoPortAdminStatus=lldpInfoPortAdminStatus, cistInfoPortIndex=cistInfoPortIndex, portInfoErrDisableTimeLeft=portInfoErrDisableTimeLeft, ipv6Reasmoks=ipv6Reasmoks, igmpNewQurCfgTable=igmpNewQurCfgTable, ospfCurCfgVirtIntfTable=ospfCurCfgVirtIntfTable, pmNewCfgPmirrMoniPortIndex=pmNewCfgPmirrMoniPortIndex, aclStatsIndex=aclStatsIndex, markerpdusTx=markerpdusTx, imageConfigTransfer=imageConfigTransfer, ipCurCfgAspathEntry=ipCurCfgAspathEntry, aclNewCfgPortRemoveAcl6=aclNewCfgPortRemoveAcl6, igmpNewQurCfgVlanIndex=igmpNewQurCfgVlanIndex, ospf3CurCfgHostEntry=ospf3CurCfgHostEntry, mldInfoGroupSource=mldInfoGroupSource, mcastFdbCurCfgVlan=mcastFdbCurCfgVlan, bgpInfoDynamicPeerRemoteAddr=bgpInfoDynamicPeerRemoteAddr, igmpFltNewCfgMcastIp1=igmpFltNewCfgMcastIp1, oamInfoPortLocalMode=oamInfoPortLocalMode, vrrpInfo=vrrpInfo, oamStatsPortTable=oamStatsPortTable, ikeNewCfgPskRemoteAddr=ikeNewCfgPskRemoteAddr, agCurCfgSysCustomDstStart=agCurCfgSysCustomDstStart, vmapVlanNewCfgNonServerPortsVlanIdx=vmapVlanNewCfgNonServerPortsVlanIdx, ibmnosInitiateConfigSave=ibmnosInitiateConfigSave, ospfNewCfgAreaAuthType=ospfNewCfgAreaAuthType, agNewCfgLFDStatus=agNewCfgLFDStatus, bgpInfoDynamicPeerVersion=bgpInfoDynamicPeerVersion, ipNewCfgIntfIp6Dstun=ipNewCfgIntfIp6Dstun, vmapGroupNewCfgServerPortsVmapBitmap=vmapGroupNewCfgServerPortsVmapBitmap, igmpCurCfgQurStartupCnt=igmpCurCfgQurStartupCnt, virtVMwareVMInfoVMCurrentHost=virtVMwareVMInfoVMCurrentHost, ospf3RoutesInfoAreaId=ospf3RoutesInfoAreaId, ibmnosFdbEntry=ibmnosFdbEntry, ipNewCfgStaticArpIndx=ipNewCfgStaticArpIndx, igmpFltCurCfgMcastIp1=igmpFltCurCfgMcastIp1, ospfNewCfgLSDB=ospfNewCfgLSDB, hotlinksStatsTriggerTable=hotlinksStatsTriggerTable, vmNewCfgGroupPorts=vmNewCfgGroupPorts, ipNewCfgStaticArpMAC=ipNewCfgStaticArpMAC, agTransferImageFileName=agTransferImageFileName, mpCpuStatsUtil4Seconds=mpCpuStatsUtil4Seconds, ospfCurCfgAreaStatus=ospfCurCfgAreaStatus, oamStatsPortUnsupRx=oamStatsPortUnsupRx, ospf3NewCfgRangeHideState=ospf3NewCfgRangeHideState, vmapVlanCurCfgAllPortsTable=vmapVlanCurCfgAllPortsTable, portStatsTable=portStatsTable, mstGeneralCfg=mstGeneralCfg, ospfCurCfgHostIpAddr=ospfCurCfgHostIpAddr, mstNewCfgMaxHopCount=mstNewCfgMaxHopCount, ospf3VirtIfInfoHelloInterval=ospf3VirtIfInfoHelloInterval, tacCurCfgPrimaryServer=tacCurCfgPrimaryServer, bgpNewCfgGroupTable=bgpNewCfgGroupTable, ospf3IfInfoPoll=ospf3IfInfoPoll, vrrpIfTableMaxSize=vrrpIfTableMaxSize, ospf3CurCfgAbrType=ospf3CurCfgAbrType, ipNewCfgAlistTable=ipNewCfgAlistTable, icmpStatsInTimeExcds=icmpStatsInTimeExcds, arpInfoMacAddr=arpInfoMacAddr, ospfIntfNbrLoadingDone=ospfIntfNbrLoadingDone, ibmnosFdbMacAddr=ibmnosFdbMacAddr, ipNewCfgBootpBcastDomainVlan=ipNewCfgBootpBcastDomainVlan, rxIgmpV3SourceListChangeRecords=rxIgmpV3SourceListChangeRecords, igmpFltCurCfgState=igmpFltCurCfgState, ospf3IntfTableMaxSize=ospf3IntfTableMaxSize, ospfNewCfgEbgpAddOutRmap=ospfNewCfgEbgpAddOutRmap, tacCurCfgSecondaryServer=tacCurCfgSecondaryServer, ospf3CurCfgIntfArea=ospf3CurCfgIntfArea, acl6CurCfgSrcPort=acl6CurCfgSrcPort, agNewCfgMgmtNetTable=agNewCfgMgmtNetTable, ospfCurCfgIntfStatus=ospfCurCfgIntfStatus, ospfNumberOfInterfacesUp=ospfNumberOfInterfacesUp, mldInfoInterfaceQuerierExpiryTime=mldInfoInterfaceQuerierExpiryTime, agAccessCurStrongPassLockout=agAccessCurStrongPassLockout, vlagInfoStartupDelayStatus=vlagInfoStartupDelayStatus, ipNewCfgAspathIndex=ipNewCfgAspathIndex, lldpInfoTxTxTTR=lldpInfoTxTxTTR, rxMldIfStatsIncCrsv2=rxMldIfStatsIncCrsv2, bgpNewCfgPeerRipState=bgpNewCfgPeerRipState, dhcpSnoopingNewCfgPortTable=dhcpSnoopingNewCfgPortTable, agPortNewCfgErrDisableRecovery=agPortNewCfgErrDisableRecovery, agNewCfgSyslogTrapDifftrak=agNewCfgSyslogTrapDifftrak, agTacacsUserMapNewCfgTableEntry=agTacacsUserMapNewCfgTableEntry, failoverCurCfgTriggerMconTrunk=failoverCurCfgTriggerMconTrunk, bgpCurCfgGroupTtl=bgpCurCfgGroupTtl, ospf3CurCfgHostIndex=ospf3CurCfgHostIndex, fipsCfg=fipsCfg, stpLoopGuardNewCfgState=stpLoopGuardNewCfgState, tacNewCfgPort=tacNewCfgPort, rxMldIfStatsMLDv2Report=rxMldIfStatsMLDv2Report, mldNewInterfaceDMrtrEna=mldNewInterfaceDMrtrEna, ospfNewCfgEbgpRemoveOutRmap=ospfNewCfgEbgpRemoveOutRmap, qosCurCfgCosWeightTable=qosCurCfgCosWeightTable, lldpCurCfgPortpowermditlv=lldpCurCfgPortpowermditlv, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, aclCurCfg8021pPriority=aclCurCfg8021pPriority, ospf3AreaErrBadAreaID=ospf3AreaErrBadAreaID, ospf3AreaErrHelloMismatch=ospf3AreaErrHelloMismatch, ecpChnlState=ecpChnlState, allportsStatsIndx=allportsStatsIndx, fdbCurCfgAgingTime=fdbCurCfgAgingTime, ipCurCfgBootpGlobalServerEntry=ipCurCfgBootpGlobalServerEntry, vmapGroupNewCfgServerPortsTableEntry=vmapGroupNewCfgServerPortsTableEntry, ipCurCfgGwArp=ipCurCfgGwArp, ndprefixCurCfgState=ndprefixCurCfgState, ripNewCfgFixedMetric=ripNewCfgFixedMetric, igmpInfoGrpExpires=igmpInfoGrpExpires, stgNewCfgIndex=stgNewCfgIndex, agTacacsUserMapNewCfgUId=agTacacsUserMapNewCfgUId, tacCurCfgBackdoor=tacCurCfgBackdoor, ipsecSaInfoAuthAlg=ipsecSaInfoAuthAlg, ospfVirtIntfInfoRetra=ospfVirtIntfInfoRetra, ripInfoIntfKey=ripInfoIntfKey, lacpInfoPortActAdExp=lacpInfoPortActAdExp, fipsCurAclTimeout=fipsCurAclTimeout, bootpRelayStatsTable=bootpRelayStatsTable, ipmcNewCfgStaticRouteAdminkeys=ipmcNewCfgStaticRouteAdminkeys, ospf3CurCfgAreaType=ospf3CurCfgAreaType, hwFan1RPMValue=hwFan1RPMValue, ipStaticRouteCfg=ipStaticRouteCfg, stgNewCfgPortTable=stgNewCfgPortTable, fdbNewCfgAddMac=fdbNewCfgAddMac, ipNewCfgIntfEntry=ipNewCfgIntfEntry, ipFwdGeneralCfg=ipFwdGeneralCfg, ospf3NewCfgIntfAuthSpi=ospf3NewCfgIntfAuthSpi, ospf3CurCfgRedistIndex=ospf3CurCfgRedistIndex, tcpMGMTTableEntry=tcpMGMTTableEntry, bgpCurCfgPeerPassive=bgpCurCfgPeerPassive, bgpNewCfgPeerOrig=bgpNewCfgPeerOrig, ospf3IntfNbrInit=ospf3IntfNbrInit, ospfCumRxHello=ospfCumRxHello, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, oamInfoPortRemoteStateValid=oamInfoPortRemoteStateValid, ospf3CumRxlsReqs=ospf3CumRxlsReqs, tacNewCfgCmdAuthor=tacNewCfgCmdAuthor)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", bgpCfg=bgpCfg, allportsStatsOutMcastRate=allportsStatsOutMcastRate, hotlinksInfoTriggerTableEntry=hotlinksInfoTriggerTableEntry, ospfAreaIntfNbrChange=ospfAreaIntfNbrChange, agPortNewCfgTagPVID=agPortNewCfgTagPVID, stgNewCfgBrgForwardDelay=stgNewCfgBrgForwardDelay, lldpCurCfgPortsyscaptlv=lldpCurCfgPortsyscaptlv, vmapCurCfgEthFmt=vmapCurCfgEthFmt, agCurCfgSyslogTrapFcoe=agCurCfgSyslogTrapFcoe, igmpCurVlanOlderVerTimer=igmpCurVlanOlderVerTimer, ipCurCfgIntfLoopbackTable=ipCurCfgIntfLoopbackTable, hotlinksCurCfgTriggerBackupAdminkey=hotlinksCurCfgTriggerBackupAdminkey, vnicCurCfgGroupTable=vnicCurCfgGroupTable, qosCurCfgPortPriority=qosCurCfgPortPriority, ospfNewCfgRangeTable=ospfNewCfgRangeTable, igmpFltCurCfgAction=igmpFltCurCfgAction, ipCurCfgIntfAdvIntervalMin=ipCurCfgIntfAdvIntervalMin, lldpCurCfgPortmgmtaddrtlv=lldpCurCfgPortmgmtaddrtlv, udpControlBlocksTable=udpControlBlocksTable, acl6NewCfgTable=acl6NewCfgTable, bgpInfoEstTransitions=bgpInfoEstTransitions, fipsInfoFcoeVNPortMac=fipsInfoFcoeVNPortMac, icmpStatsInEchos=icmpStatsInEchos, ospfExtLsdbInfoSequence=ospfExtLsdbInfoSequence, ospf3VirtIfInfoEvents=ospf3VirtIfInfoEvents, aclCurCfgSrcPortMask=aclCurCfgSrcPortMask, mldInfoMRouterQrv=mldInfoMRouterQrv, virtNewCfgVMwareHello=virtNewCfgVMwareHello, ndprefixNewCfgAutonomousFlag=ndprefixNewCfgAutonomousFlag, igmpNewCfgQuerierOnOff=igmpNewCfgQuerierOnOff, ripCurCfgStaticMetric=ripCurCfgStaticMetric, tacNewCfgAuthenString=tacNewCfgAuthenString, ospf3NewCfgStaticMetricType=ospf3NewCfgStaticMetricType, aclCurCfgFilterAction=aclCurCfgFilterAction, ospf3AreaErrorStatsEntry=ospf3AreaErrorStatsEntry, bgpInfoPath=bgpInfoPath, igmpSnoopCurCfgMrto=igmpSnoopCurCfgMrto, mldNewCfgState=mldNewCfgState, ospfStartTime=ospfStartTime, ospf3AreaBorderRouter=ospf3AreaBorderRouter, mldNewInterfaceVersion=mldNewInterfaceVersion, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, ospfCumNbrRstAd=ospfCumNbrRstAd, ibmGbTORG8124MIB=ibmGbTORG8124MIB, agNewCfgHttpServerPort=agNewCfgHttpServerPort, lldpInfoRemoteDevicesManAddrIfSubtype=lldpInfoRemoteDevicesManAddrIfSubtype, vmapCurCfg8021pPriority=vmapCurCfg8021pPriority, igmpFltNewCfgEnaDis=igmpFltNewCfgEnaDis, vmapNewCfgRemarkReset=vmapNewCfgRemarkReset, ospfCurCfgFixedMetric=ospfCurCfgFixedMetric, vmbw=vmbw, errMldIfStatsMASSQQuery=errMldIfStatsMASSQQuery, vmbwCurCfgMac=vmbwCurCfgMac, qosNewCfgDscpIndex=qosNewCfgDscpIndex, stgCurCfgVlanBmap=stgCurCfgVlanBmap, ldapCurCfgTimeout=ldapCurCfgTimeout, tacNewBypassEnable=tacNewBypassEnable, vlanNewCfgPrVlanType=vlanNewCfgPrVlanType, tcpStatsMaxConn=tcpStatsMaxConn, ipsecGroup=ipsecGroup, fipsPortCurCfgTable=fipsPortCurCfgTable, ripNewCfgIntfAuth=ripNewCfgIntfAuth, mcastFdbNewCfgTable=mcastFdbNewCfgTable, routeStatOspfEntries=routeStatOspfEntries, ospf3CumDisdlsUpdates=ospf3CumDisdlsUpdates, lacpInfoPortActPortNum=lacpInfoPortActPortNum, routeStatEntries=routeStatEntries, mldInfoInterfaceEntry=mldInfoInterfaceEntry, agCurCfgMgmtNetSubnet=agCurCfgMgmtNetSubnet, stpInfoPortRole=stpInfoPortRole, ospfLoopIfInfoRouterIP=ospfLoopIfInfoRouterIP, vmapNewCfgRemarkInprofReset=vmapNewCfgRemarkInprofReset, ospfLoopIfInfoPriority=ospfLoopIfInfoPriority, ipsecCurCfgDynamicPolicyTable=ipsecCurCfgDynamicPolicyTable, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, agNewCfgCpuRateLimitOther=agNewCfgCpuRateLimitOther, agPortNewCfgUdldMode=agPortNewCfgUdldMode, failoverNewCfgTriggerMmonPortAdd=failoverNewCfgTriggerMmonPortAdd, bgpNewCfgDscp=bgpNewCfgDscp, ospfAreaRxlsAcks=ospfAreaRxlsAcks, igmpSnoopNewCfgMrto=igmpSnoopNewCfgMrto, ipRouteEcmpInfoGwIndx=ipRouteEcmpInfoGwIndx, stgCurCfgPortIndex=stgCurCfgPortIndex, radNewCfgSecondaryServer=radNewCfgSecondaryServer, ospf3NewCfgConnectedMetric=ospf3NewCfgConnectedMetric, fipsPortNewCfgIndex=fipsPortNewCfgIndex, ipsecCurCfgManualPolicyTxform=ipsecCurCfgManualPolicyTxform, ospfTotalNssaAreas=ospfTotalNssaAreas, ospfIntfTxlsReqs=ospfIntfTxlsReqs, ipsecCfg=ipsecCfg, ipCurCfgBootpBcastDomainServerIP=ipCurCfgBootpBcastDomainServerIP, ipsecNewCfgTxformAuth=ipsecNewCfgTxformAuth, allportsStatsOutErrorsRate=allportsStatsOutErrorsRate, ipMgmtRouteInfoInterface=ipMgmtRouteInfoInterface, ospfAreaNbrN1way=ospfAreaNbrN1way, ospfNewCfgVirtIntfNbr=ospfNewCfgVirtIntfNbr, lldpInfoPortdcbxtlv=lldpInfoPortdcbxtlv, failoverInfoTriggerId=failoverInfoTriggerId, ospf3CurCfgVirtIntfHello=ospf3CurCfgVirtIntfHello, ospf3CurCfgAreaTable=ospf3CurCfgAreaTable, agCurCfgConsole=agCurCfgConsole, ipNewCfgNwfDelete=ipNewCfgNwfDelete, virtVMwareHostDetailInfoMACAddr=virtVMwareHostDetailInfoMACAddr, lldpCurCfgPortAdmStat=lldpCurCfgPortAdmStat, vmapVlanNewCfgServerPortsTable=vmapVlanNewCfgServerPortsTable, ipNewCfgStaticNbrAction=ipNewCfgStaticNbrAction, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, ipNwfCfg=ipNwfCfg, virtVMwareHostVswitchName=virtVMwareHostVswitchName, ospf3CurCfgIntfPassive=ospf3CurCfgIntfPassive, acl6CurCfgLog=acl6CurCfgLog, stgStatsPortXmtCfgBpdus=stgStatsPortXmtCfgBpdus, ospfLoopIfInfoEntry=ospfLoopIfInfoEntry, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, ipsecCurCfgSelectorDelete=ipsecCurCfgSelectorDelete, tacChangePassForServer=tacChangePassForServer, agPortNewCfgMulticastThresholdRate=agPortNewCfgMulticastThresholdRate, ospfAreaTableMaxSize=ospfAreaTableMaxSize, intfLoopbackInfoBcastAddr=intfLoopbackInfoBcastAddr, routeStats=routeStats, ipv6PmtuCurTimeout=ipv6PmtuCurTimeout, ospf3NewCfgState=ospf3NewCfgState, ospfCurCfgLoopIfStatus=ospfCurCfgLoopIfStatus, txMldIfStatsGeneralQuery=txMldIfStatsGeneralQuery, ospfCurCfgVirtIntfMdkey=ospfCurCfgVirtIntfMdkey, ospfInterface=ospfInterface, ospf3CumIntfWaiting=ospf3CumIntfWaiting, vlagCurCfgStartupDelayInterval=vlagCurCfgStartupDelayInterval, ospfCurCfgVirtIntfDeadMS=ospfCurCfgVirtIntfDeadMS, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, ipCurCfgGwIpv6Entry=ipCurCfgGwIpv6Entry, portStatsPhyIfOutErrors=portStatsPhyIfOutErrors, ipmcCurCfgStaticRouteIndx=ipmcCurCfgStaticRouteIndx, hotlinksCurCfgFdbUpdateRate=hotlinksCurCfgFdbUpdateRate, ospf3AreaIntfChangeStatsEntry=ospf3AreaIntfChangeStatsEntry, hotlinksInfoTriggerPreemptState=hotlinksInfoTriggerPreemptState, ospf3HostTableMaxSize=ospf3HostTableMaxSize, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, txMldIfStatsExcCrsv2=txMldIfStatsExcCrsv2, lldpNewCfgPortportvidtlv=lldpNewCfgPortportvidtlv, ipsecCurCfgIfIndex=ipsecCurCfgIfIndex, vmGroupInfoMac=vmGroupInfoMac, ipRmapTableMax=ipRmapTableMax, ospfCurCfgAreaType=ospfCurCfgAreaType, lacpInfoAggrIndivState=lacpInfoAggrIndivState, lacpCurPortActorAdminKey=lacpCurPortActorAdminKey, ospfCumRxlsReqs=ospfCumRxlsReqs, udldInfoNeighborExpiration=udldInfoNeighborExpiration, igmpCfg=igmpCfg, cpuUtilProcessStatsTableEntry=cpuUtilProcessStatsTableEntry, bootpRelayStatsRepliesDroppedError=bootpRelayStatsRepliesDroppedError, swPrimaryPowerSupplyFailure=swPrimaryPowerSupplyFailure, ipNewCfgIntfAdvIntervalMin=ipNewCfgIntfAdvIntervalMin, vmapVlanCurCfgNonServerPortsVmapBitmap=vmapVlanCurCfgNonServerPortsVmapBitmap, ripCurCfgFixedMetric=ripCurCfgFixedMetric, ospf3NewCfgIntfEncryEnable=ospf3NewCfgIntfEncryEnable, bgpNewCfgPeerDelete=bgpNewCfgPeerDelete, vlagStatsPduSentPeerInstanceDisable=vlagStatsPduSentPeerInstanceDisable, accessUserInfoTable=accessUserInfoTable, bgpNewCfgGroupRemoveOutRmap=bgpNewCfgGroupRemoveOutRmap, ripStatInBadSourceIP=ripStatInBadSourceIP, dhcpSnoopingNewCfgportTrusted=dhcpSnoopingNewCfgportTrusted, fipsNewAclTimeout=fipsNewAclTimeout, igmpStaticMrtrNewCfgClear=igmpStaticMrtrNewCfgClear, ospfIfInfoPriority=ospfIfInfoPriority, ospfVirtIntfInfoRouterId=ospfVirtIntfInfoRouterId, agNewCfgReminders=agNewCfgReminders, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, lldpStatsTableMaxEnt=lldpStatsTableMaxEnt, vrrpStatBadVrid=vrrpStatBadVrid, lacpInfoPortPartOpAggr=lacpInfoPortPartOpAggr, udpMGMTIndx=udpMGMTIndx, ibmnosFdbState=ibmnosFdbState, agTacacsUserMapCurCfgMapping=agTacacsUserMapCurCfgMapping, ipsecCurCfgState=ipsecCurCfgState, portInfoMode=portInfoMode, mldInfoGroupExpiryTime=mldInfoGroupExpiryTime, ospf3IntfInfoEntry=ospf3IntfInfoEntry, allportsStatsInUnknownProtos=allportsStatsInUnknownProtos, virtVMwareHostDetailInfoType=virtVMwareHostDetailInfoType, udpControlBlocksTableEntry=udpControlBlocksTableEntry, ipDataRouteInfoEntry=ipDataRouteInfoEntry, ospfLoopIfInfoDesignatedRouterIP=ospfLoopIfInfoDesignatedRouterIP, ospfCurCfgIntfHelloMS=ospfCurCfgIntfHelloMS, vmapNewCfgOutprofDscp=vmapNewCfgOutprofDscp, ipsecNewCfgIfDelManualPolicy=ipsecNewCfgIfDelManualPolicy, aclCurCfgPortAcl6Bmap=aclCurCfgPortAcl6Bmap, ospf3IntfRxTxDisdStats=ospf3IntfRxTxDisdStats, igmpFltCurCfgPortTableEntry=igmpFltCurCfgPortTableEntry, intfLoopbackInfoIndex=intfLoopbackInfoIndex, lldpInfoPortsysnametlv=lldpInfoPortsysnametlv, ospf3RoutesInfoTable=ospf3RoutesInfoTable, ospf3CumNbrExchange=ospf3CumNbrExchange, acl6CurCfgInprofDscp=acl6CurCfgInprofDscp, bootpRelayStatsTableEntry=bootpRelayStatsTableEntry, ndprefixCfg=ndprefixCfg, swDefGwInService=swDefGwInService, vlagInfoLocalMac=vlagInfoLocalMac, ospf3CurCfgIntfEntry=ospf3CurCfgIntfEntry, ibmnosConfigControl=ibmnosConfigControl, lldpStats=lldpStats, bgpCurCfgGroupRemoteAddr=bgpCurCfgGroupRemoteAddr, pptCurCfgIndx=pptCurCfgIndx, icmpStatsInDestUnreachs=icmpStatsInDestUnreachs, vlagInfoIslAdminkey=vlagInfoIslAdminkey, ospf3IntfErrRxMismatchInstID=ospf3IntfErrRxMismatchInstID, bgpCurCfgAggrTable=bgpCurCfgAggrTable, ospf3IfNbrTable=ospf3IfNbrTable, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, hotlinksCurCfgTriggerBackupTrunk=hotlinksCurCfgTriggerBackupTrunk, ospfIfInfoArea=ospfIfInfoArea, ospf3CurCfgSpfDelay=ospf3CurCfgSpfDelay, bgpNewCfgGroupMetric=bgpNewCfgGroupMetric, portStatsIndx=portStatsIndx, mldInfoMRouterVersion=mldInfoMRouterVersion, ospf3AreaInfoId=ospf3AreaInfoId, ospf3IntfCountForRouter=ospf3IntfCountForRouter, vlagInfoRemoteMac=vlagInfoRemoteMac, ipsecNewCfgIfDynamicPolicyBmap=ipsecNewCfgIfDynamicPolicyBmap, ipv6PmtuInfoValue=ipv6PmtuInfoValue, ospfAreaErrOptionsMismatch=ospfAreaErrOptionsMismatch, hotlinksInfoFdbUpdateState=hotlinksInfoFdbUpdateState, cistRoot=cistRoot, ipsecStats=ipsecStats, ipsecNewCfgManualPolicyInEspAuthKey=ipsecNewCfgManualPolicyInEspAuthKey, ospfCurCfgIbgpOutRmapList=ospfCurCfgIbgpOutRmapList, vnicNewCfgGroupRemTrunk=vnicNewCfgGroupRemTrunk, ospf3IntfNbrFull=ospf3IntfNbrFull, intfLoopbackInfoStatus=intfLoopbackInfoStatus, ipsecCurCfgDynamicPolicyLifetime=ipsecCurCfgDynamicPolicyLifetime, lldpInfoTxTTL=lldpInfoTxTTL, ipNewCfgRmapAp=ipNewCfgRmapAp, ospf3AreaInfoAreaBorderRouter=ospf3AreaInfoAreaBorderRouter, lacpInfoPortPartOpSync=lacpInfoPortPartOpSync, ipsecSpdInfoSaSize=ipsecSpdInfoSaSize, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, bgpCurCfgPeerHold=bgpCurCfgPeerHold, ospf3CurCfgIntfAuthSpi=ospf3CurCfgIntfAuthSpi, icmpStats=icmpStats, ipsecSaInfoSpi=ipsecSaInfoSpi, ospfNewCfgAreaIndex=ospfNewCfgAreaIndex, vmCurCfgProfileName=vmCurCfgProfileName, fdbGeneralCfg=fdbGeneralCfg, ipGatewayIpv6Cfg=ipGatewayIpv6Cfg, dhcpSnoopingBindingInfoMac=dhcpSnoopingBindingInfoMac, ospf3CurCfgStaticRouteTag=ospf3CurCfgStaticRouteTag, ipNewCfgBootpGlobalServerEntry=ipNewCfgBootpGlobalServerEntry, ipv6OutMcasts=ipv6OutMcasts, virtVMwareVMInfoEntry=virtVMwareVMInfoEntry, agCurCfgSyslogTrapVm=agCurCfgSyslogTrapVm, lacpInfoPortActAdAggr=lacpInfoPortActAdAggr, ospf3AreaNbrInit=ospf3AreaNbrInit, txMldIfStatsMLDv1Done=txMldIfStatsMLDv1Done, ipRoute6InfoProto=ipRoute6InfoProto)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", ospfRedistributeRip=ospfRedistributeRip, ndprefixCurCfgValidLifetime=ndprefixCurCfgValidLifetime, tacNewCfgTimeout=tacNewCfgTimeout, ripStatRouteTimeout=ripStatRouteTimeout, agCurCfgSyslogFac=agCurCfgSyslogFac, vmapVlanCfgAllPorts=vmapVlanCfgAllPorts, agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, agNewCfgUserBBI=agNewCfgUserBBI, agNewCfgConsole=agNewCfgConsole, arpClearStats=arpClearStats, trunkGroupInfo=trunkGroupInfo, vlagCurCfgTrunkIndex=vlagCurCfgTrunkIndex, ospfExtLsdbInfoType=ospfExtLsdbInfoType, ipGeneralCfg=ipGeneralCfg, cfa=cfa, ipCurCfgIntfState=ipCurCfgIntfState, vmapGroupNewCfgServerPortsTable=vmapGroupNewCfgServerPortsTable, agNewRFC4741NetconfSshAccess=agNewRFC4741NetconfSshAccess, vmNewCfgProfileDelete=vmNewCfgProfileDelete, bgpCurCfgGroupUpdateSrcLoopIf=bgpCurCfgGroupUpdateSrcLoopIf, virtNewCfgVirtCenterSSLAuth=virtNewCfgVirtCenterSSLAuth, vrrpStatBadAddress=vrrpStatBadAddress, nsnmpInPkts=nsnmpInPkts, totalMemoryStats=totalMemoryStats, qosNewCfgPortPriority=qosNewCfgPortPriority, cistInfoPortDesignatedPort=cistInfoPortDesignatedPort, ospfIntfNbrExchangeDone=ospfIntfNbrExchangeDone, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, intfInfoBcastAddr=intfInfoBcastAddr, ipsecNewCfgSelectorIcmpType=ipsecNewCfgSelectorIcmpType, swTeamingCtrlError=swTeamingCtrlError, swVlagIslUp=swVlagIslUp, ospfCurCfgVirtIntfTrans=ospfCurCfgVirtIntfTrans, ospfNewCfgIbgpMetric=ospfNewCfgIbgpMetric, mldIfStatsEntry=mldIfStatsEntry, lacpInfoPortGeneralTable=lacpInfoPortGeneralTable, aclCurCfgKbitsBurst=aclCurCfgKbitsBurst, ipStaticRouteCurPingRetries=ipStaticRouteCurPingRetries, swapTotalStats=swapTotalStats, ospf3NewCfgNbrIntfIndex=ospf3NewCfgNbrIntfIndex, vmapCurCfgInprofDscpEnable=vmapCurCfgInprofDscpEnable, nsnmpInTotalSetVars=nsnmpInTotalSetVars, igmpInfoSrcPort=igmpInfoSrcPort, mirroring=mirroring, trunkLacpGroupCurCfgAdminKey=trunkLacpGroupCurCfgAdminKey, acl6CurCfgStatistics=acl6CurCfgStatistics, ripCurCfgIntfSupply=ripCurCfgIntfSupply, agCurCfgSyslogTrapBgp=agCurCfgSyslogTrapBgp, trunkGroupInfoIndex=trunkGroupInfoIndex, aclCurCfgMeterAction=aclCurCfgMeterAction, acl6StatsHits=acl6StatsHits, ospfCurCfgIntfDead=ospfCurCfgIntfDead, vmNewCfgGroupStg=vmNewCfgGroupStg, rxIgmpGenQueries=rxIgmpGenQueries, ibmnosConfigRestoreFileVersion=ibmnosConfigRestoreFileVersion, portStatsPhyIfOutBroadcastPkts=portStatsPhyIfOutBroadcastPkts, igmpInfoTable=igmpInfoTable, ospf3CurCfgIntfPoll=ospf3CurCfgIntfPoll, ospf3CumTxPkts=ospf3CumTxPkts, fipsInfoPortEntry=fipsInfoPortEntry, ipNewCfgRmapEntry=ipNewCfgRmapEntry, ecpChnlRcvlast=ecpChnlRcvlast, bgpCurCfgPeerRetry=bgpCurCfgPeerRetry, agTransferAction=agTransferAction, ospfAreaInfoNeighborsEXCHstate=ospfAreaInfoNeighborsEXCHstate, vrrpCurCfgGenState=vrrpCurCfgGenState, ospfIntfTxPkts=ospfIntfTxPkts, ospf3IfInfoEncrySpi=ospf3IfInfoEncrySpi, ntpSecondaryServerReqSent=ntpSecondaryServerReqSent, ipNewCfgIntfLoopbackAddr=ipNewCfgIntfLoopbackAddr, ipsecSaInfoDstAddr=ipsecSaInfoDstAddr, ipv6icmpInEchoReq=ipv6icmpInEchoReq, agCfgDumpIndex=agCfgDumpIndex, nbrInfoIndex=nbrInfoIndex, ndprefixCurCfgOnlinkFlag=ndprefixCurCfgOnlinkFlag, ripNewCfgIbgpMetric=ripNewCfgIbgpMetric, oamInfoPortLocalEvaluating=oamInfoPortLocalEvaluating, failoverNewCfgTriggerMconPortAdd=failoverNewCfgTriggerMconPortAdd, agCurCfgSyslogSev=agCurCfgSyslogSev, vmProfiles=vmProfiles, igmpCurCfgVlanOperVersion=igmpCurCfgVlanOperVersion, vnicCurCfgVnicEntry=vnicCurCfgVnicEntry, txMldIfStatsMLDv2Report=txMldIfStatsMLDv2Report, vnicCurCfgGroupFailoverState=vnicCurCfgGroupFailoverState, ospfNewCfgIntfPtop=ospfNewCfgIntfPtop, agDiffIndex=agDiffIndex, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, ipCurCfgIntfLoopbackAddr=ipCurCfgIntfLoopbackAddr, ospf3TotalNeighbours=ospf3TotalNeighbours, stgNewCfgRemoveAllVlan=stgNewCfgRemoveAllVlan, ipGatewayIPv6InfoIndex=ipGatewayIPv6InfoIndex, oamStatsPortLocalDyingGasps=oamStatsPortLocalDyingGasps, agCurCfgCpuRateLimitCntl=agCurCfgCpuRateLimitCntl, agCurCfgSyslogTrapVlag=agCurCfgSyslogTrapVlag, ospf3CumDisdPkts=ospf3CumDisdPkts, vmNewCfgCheckTrust=vmNewCfgCheckTrust, vnicCurCfgState=vnicCurCfgState, ipsecNewCfgSelectorTable=ipsecNewCfgSelectorTable, agSyslog=agSyslog, ospfCurCfgRipOutRmapList=ospfCurCfgRipOutRmapList, bgpGeneral=bgpGeneral, vmapCurCfgDstPort=vmapCurCfgDstPort, rxIgmpReports=rxIgmpReports, allportsStatsInDiscardsRate=allportsStatsInDiscardsRate, mldIfStatsTable=mldIfStatsTable, aclNewCfgUser=aclNewCfgUser, rip2NewCfgUpdatePeriod=rip2NewCfgUpdatePeriod, bgpNewCfgPeerEntry=bgpNewCfgPeerEntry, ospfNewCfgVirtIntfRetra=ospfNewCfgVirtIntfRetra, swDefGwUp=swDefGwUp, stpInfoPortEdge=stpInfoPortEdge, ospf3TmrsKckOffPoll=ospf3TmrsKckOffPoll, vlagCurCfgTierId=vlagCurCfgTierId, udldInfoNeighborDeviceName=udldInfoNeighborDeviceName, ripNewCfgIntfMetric=ripNewCfgIntfMetric, gatewayInfoStatus=gatewayInfoStatus, sfpInfoRXSignal=sfpInfoRXSignal, stgNewCfgPortPriority=stgNewCfgPortPriority, agNewCfgSyslogTrapLacp=agNewCfgSyslogTrapLacp, rip2Stats=rip2Stats, vmCurCfgGroupEntry=vmCurCfgGroupEntry, mldInfoInterfaceTable=mldInfoInterfaceTable, bgpNewCfgGroupRipState=bgpNewCfgGroupRipState, vlanCurCfgStg=vlanCurCfgStg, ipsecCurCfgDynamicPolicyEntry=ipsecCurCfgDynamicPolicyEntry, vlanCurCfgPrVlanType=vlanCurCfgPrVlanType, portInfoPhyIfType=portInfoPhyIfType, txMldIfStatsToExcFmcrsv2=txMldIfStatsToExcFmcrsv2, foreignAddress=foreignAddress, ipsecSaInfoUlp=ipsecSaInfoUlp, bgpInfoWght=bgpInfoWght, vlagInfoISLId=vlagInfoISLId, agTransferImage=agTransferImage, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, ospf3CurCfgIntfNetworkType=ospf3CurCfgIntfNetworkType, ipv6OutRedirs=ipv6OutRedirs, agCfgBootResetParameters=agCfgBootResetParameters, lacpInfoPortGeneralTableEntry=lacpInfoPortGeneralTableEntry, bgpNewCfgState=bgpNewCfgState, agCurDaylightSavings=agCurDaylightSavings, icmpStatsInEchoReps=icmpStatsInEchoReps, ospf3GeneralStats=ospf3GeneralStats, agNewCfgTelnetServerPort=agNewCfgTelnetServerPort, lldpCfg=lldpCfg, trunkLacpGroupTableMaxSize=trunkLacpGroupTableMaxSize, ipCurCfgRmapIndex=ipCurCfgRmapIndex, ospfNewCfgEbgpMetricType=ospfNewCfgEbgpMetricType, agNewCfgSyslogSev=agNewCfgSyslogSev, virtNewCfgVMwareHelloPorts=virtNewCfgVMwareHelloPorts, agPortNewCfgLinkType=agPortNewCfgLinkType, stpInfoRootCost=stpInfoRootCost, agImage2Ver=agImage2Ver, vmapVlanCurCfgNonServerPortsTableEntry=vmapVlanCurCfgNonServerPortsTableEntry, portStatsPhyIfInErrors=portStatsPhyIfInErrors, agPortCurCfgPortAlias=agPortCurCfgPortAlias, ndprefixCurCfgInterfaceIndex=ndprefixCurCfgInterfaceIndex, stgNewCfgPriority=stgNewCfgPriority, mldClearTables=mldClearTables, lacpInfoPortActAdTimeout=lacpInfoPortActAdTimeout, ospfCumNbrLoadingDone=ospfCumNbrLoadingDone, ipv6icmpOutAdminProhib=ipv6icmpOutAdminProhib, ospf3NewCfgVirtIntfAreaId=ospf3NewCfgVirtIntfAreaId, aclCurCfgPortTable=aclCurCfgPortTable, aclStatsHits=aclStatsHits, bgpCurCfgPeerEntry=bgpCurCfgPeerEntry, ospf3VirtIntfTableMaxSize=ospf3VirtIntfTableMaxSize, lldpInfoPortMtu=lldpInfoPortMtu, ripNewCfgIbgpRemoveOutRmap=ripNewCfgIbgpRemoveOutRmap, agTransferTSDumpFileName=agTransferTSDumpFileName, stateMgmt=stateMgmt, igmpInfoIndex=igmpInfoIndex, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval, ipNewCfgGwState=ipNewCfgGwState, ospfRoutesInfoDestination=ospfRoutesInfoDestination, ospf3AreaInfoEntry=ospf3AreaInfoEntry, vlagNewCfgTrunkTable=vlagNewCfgTrunkTable, lacpInfoAggrPartOperKey=lacpInfoAggrPartOperKey, mstCistCurCfgVlanBmap=mstCistCurCfgVlanBmap, bgpCurCfgPeerOrig=bgpCurCfgPeerOrig, dhcpSnoopingCurCfgVlanTableEntry=dhcpSnoopingCurCfgVlanTableEntry, radCurCfgPorttoUse=radCurCfgPorttoUse, ospf3NewCfgStaticMetric=ospf3NewCfgStaticMetric, ndprefixCurCfgValidLifetimeFlag=ndprefixCurCfgValidLifetimeFlag, ospf3CurCfgRangeLsaType=ospf3CurCfgRangeLsaType, hwTemperatureSensor5=hwTemperatureSensor5, ospf3AreaInfoASBoundaryRouter=ospf3AreaInfoASBoundaryRouter, vlagStatsIgmpLeavesForwarded=vlagStatsIgmpLeavesForwarded, ospf3CurCfgIntfEncrySpi=ospf3CurCfgIntfEncrySpi, bgpCurCfgAggrIndex=bgpCurCfgAggrIndex, ospfIntfErrUnknownNbr=ospfIntfErrUnknownNbr, ospf3AreaTxlsUpdates=ospf3AreaTxlsUpdates, bgpInfoDynamicMinAdvTime=bgpInfoDynamicMinAdvTime, ospfNewCfgIntfDelete=ospfNewCfgIntfDelete, aclCurCfgInprofDscp=aclCurCfgInprofDscp, rip2NewCfgState=rip2NewCfgState, ipCurCfgStaticRoute6Entry=ipCurCfgStaticRoute6Entry, tcpMGMTIndx=tcpMGMTIndx, vmGroupInfoTbl=vmGroupInfoTbl, ospfCumRxTxStats=ospfCumRxTxStats, vmapVlanNewCfgAllPortsAddVmap=vmapVlanNewCfgAllPortsAddVmap, acl6CurCfgSrcPortMask=acl6CurCfgSrcPortMask, bgpInfoPeerIndex=bgpInfoPeerIndex, lldpInfoRemoteDevicesChassisSubtype=lldpInfoRemoteDevicesChassisSubtype, ospf3NewCfgLSDB=ospf3NewCfgLSDB, agCurCfgSysCustomDstEnd=agCurCfgSysCustomDstEnd, ospfCumNbrhello=ospfCumNbrhello, fdbClear=fdbClear, geaportInfoTableEntry=geaportInfoTableEntry, lacpStats=lacpStats, ospfIntfNbrhello=ospfIntfNbrhello, ripRedistributeOspf=ripRedistributeOspf, agCurCfgUserBBI=agCurCfgUserBBI, hwTemperatureSensor2=hwTemperatureSensor2, agPortCurCfgMulticastThresholdRate=agPortCurCfgMulticastThresholdRate, bgpInfoDynamicSentUpdates=bgpInfoDynamicSentUpdates, lldpInfoPortmacphytlv=lldpInfoPortmacphytlv, ipNewCfgRmapIndex=ipNewCfgRmapIndex, ipv6InTruncs=ipv6InTruncs, ripNewCfgEospfRemoveOutRmap=ripNewCfgEospfRemoveOutRmap, ospf3CurCfgHostCost=ospf3CurCfgHostCost, agAccessUserCurCos=agAccessUserCurCos, bgpNewCfgPeerClient=bgpNewCfgPeerClient, bgpCurCfgGroupOrig=bgpCurCfgGroupOrig, hardwareLastBoot=hardwareLastBoot, ipNewCfgStaticRoute6Table=ipNewCfgStaticRoute6Table, sflowNewPortCfgTable=sflowNewPortCfgTable, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, vlagNewCfgHlthchkConnectRetryInterval=vlagNewCfgHlthchkConnectRetryInterval, vmapVlanCfg=vmapVlanCfg, vmapCurCfgKbitsSec=vmapCurCfgKbitsSec, mstCistNewCfgPortStpState=mstCistNewCfgPortStpState, agNewCfgSyslogTrapAll=agNewCfgSyslogTrapAll, lldpInfoRemoteDevicesManAddrIfId=lldpInfoRemoteDevicesManAddrIfId, stpInfoPortPriority=stpInfoPortPriority, ospf3CumIntfDrOther=ospf3CumIntfDrOther, lacpCurPortCfgTableEntry=lacpCurPortCfgTableEntry, cistInfoPortDesignatedBridge=cistInfoPortDesignatedBridge, ipsecNewCfgManualPolicyOutEspSpi=ipsecNewCfgManualPolicyOutEspSpi, lldpNewCfgPortportprottlv=lldpNewCfgPortportprottlv, agNewCfgSyslogTrapCfgchg=agNewCfgSyslogTrapCfgchg, sflowCurCfgMgmtPort=sflowCurCfgMgmtPort, hardwareMACAddress=hardwareMACAddress, ospfMdkeyTableMaxSize=ospfMdkeyTableMaxSize, portMgmtStatsRxMulticast=portMgmtStatsRxMulticast, igmpFltCurCfgPortTable=igmpFltCurCfgPortTable, agPortNewCfgDLFThresholdRate=agPortNewCfgDLFThresholdRate, ipRoutingInfo=ipRoutingInfo, ospf3RoutesInfoInterfaceIndex=ospf3RoutesInfoInterfaceIndex, agSaveConfiguration=agSaveConfiguration, agNewCfgTftpServerPort=agNewCfgTftpServerPort, hotlinksStats=hotlinksStats, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, agNewCfgTrapSrcIf=agNewCfgTrapSrcIf, ipsecNewCfgSelectorEntry=ipsecNewCfgSelectorEntry)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", cistInfoPortState=cistInfoPortState, vlagStatsIslOutPackets=vlagStatsIslOutPackets, agPortCurCfgRmon=agPortCurCfgRmon, igmpSnoopCurCfgAggrEnaDis=igmpSnoopCurCfgAggrEnaDis, agNewRFC4741NetconfSessionTimeout=agNewRFC4741NetconfSessionTimeout, fipsInfoPortTable=fipsInfoPortTable, bgpCurCfgGroupRASIndex=bgpCurCfgGroupRASIndex, ospfLoopIfInfoDeadMS=ospfLoopIfInfoDeadMS, swNTPSyncFailed=swNTPSyncFailed, ipNewCfgIntfRouteAdv=ipNewCfgIntfRouteAdv, vmNewCfgGroupAddProfile=vmNewCfgGroupAddProfile, trunkGroupInfoPorts=trunkGroupInfoPorts, bgpInfoSummaryIndex=bgpInfoSummaryIndex, mldStatBadChecksum=mldStatBadChecksum, bgpInfoDynamicTotalReceivedPackets=bgpInfoDynamicTotalReceivedPackets, ibmnosFdbClearMac=ibmnosFdbClearMac, bgpInfoTotalReceivedPackets=bgpInfoTotalReceivedPackets, pmNewCfgPmirrDelete=pmNewCfgPmirrDelete, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, vlagCurCfgTrunkTable=vlagCurCfgTrunkTable, bgpNewCfgGroupHold=bgpNewCfgGroupHold, qosNewCfgPortPriorityEntry=qosNewCfgPortPriorityEntry, agRevert=agRevert, swFwDownloadSucess=swFwDownloadSucess, vmbwNewCfgDelete=vmbwNewCfgDelete, agPortNewCfgDscpRemarking=agPortNewCfgDscpRemarking, ospfIntfNbrN1way=ospfIntfNbrN1way, ipsecSpdInfoFlags=ipsecSpdInfoFlags, ipCurCfgBootpBcastDomainServerEntry=ipCurCfgBootpBcastDomainServerEntry, swImage2Version=swImage2Version, lldpInfoRxIndex=lldpInfoRxIndex, ipmcNewCfgStaticRouteDelete=ipmcNewCfgStaticRouteDelete, aclNewCfgEthernetTypeValue=aclNewCfgEthernetTypeValue, hwGlobalHealthStatus=hwGlobalHealthStatus, layer2=layer2, geaportInfo=geaportInfo, ospf3CurCfgState=ospf3CurCfgState, fipsInfoVlans=fipsInfoVlans, ospfCurCfgIntfCost=ospfCurCfgIntfCost, igmpStatsTotalIpmcGroups=igmpStatsTotalIpmcGroups, lldpInfoRemoteDevicesSystemCapEnabled=lldpInfoRemoteDevicesSystemCapEnabled, ospfIntfBackup=ospfIntfBackup, cistInfoPortHelloTime=cistInfoPortHelloTime, ipRoute6InfoTable=ipRoute6InfoTable, ntpOperSendReq=ntpOperSendReq, vmapNewCfgPktfmtReset=vmapNewCfgPktfmtReset, mpCpuStatsUtil1Second=mpCpuStatsUtil1Second, ripNewCfgIntfIndex=ripNewCfgIntfIndex, virtVMwareHostVswitchIndex=virtVMwareHostVswitchIndex, ipCurCfgSecIntfPrefix=ipCurCfgSecIntfPrefix, ospf3NewCfgRedistRouteTag=ospf3NewCfgRedistRouteTag, agAccessCurStrongPassValidity=agAccessCurStrongPassValidity, ospf3CurCfgHostTable=ospf3CurCfgHostTable, stpInfoPortDesignatedCost=stpInfoPortDesignatedCost, vrrpStatInAdvers=vrrpStatInAdvers, gatewayInfoTable=gatewayInfoTable, vlagStatsPduRcvPeerInstanceDisable=vlagStatsPduRcvPeerInstanceDisable, agPortNewCfgTable=agPortNewCfgTable, ripNewCfgEbgpAddOutRmap=ripNewCfgEbgpAddOutRmap, bgpInfoReceivedUpdates=bgpInfoReceivedUpdates, vmapGroupCurCfgAllPortsVmapBitmap=vmapGroupCurCfgAllPortsVmapBitmap, vmCurCfgCheckTrust=vmCurCfgCheckTrust, vmbwNewCfgCtrl=vmbwNewCfgCtrl, ndprefixNewCfgTable=ndprefixNewCfgTable, ospfNewCfgVirtIntfIndex=ospfNewCfgVirtIntfIndex, allportsStatsOperStatus=allportsStatsOperStatus, icmpStatsOutEchoReps=icmpStatsOutEchoReps, ipsecSpdInfoSaEntry=ipsecSpdInfoSaEntry, ntpSystemCurrentTime=ntpSystemCurrentTime, ospf3NewCfgRangeTable=ospf3NewCfgRangeTable, udldInfoPortTable=udldInfoPortTable, agNewCfgSnmpTimeout=agNewCfgSnmpTimeout, ospf3CumIntfAllEvents=ospf3CumIntfAllEvents, ospfLoopIfInfoWaitInterval=ospfLoopIfInfoWaitInterval, ospf3IntfNbrAttempt=ospf3IntfNbrAttempt, ospfIntfDown=ospfIntfDown, aclNewCfgKbitsBurst=aclNewCfgKbitsBurst, bgpCurCfgGroupRAS=bgpCurCfgGroupRAS, ospfNewCfgRangeState=ospfNewCfgRangeState, ospfLoopIfInfoState=ospfLoopIfInfoState, vmapCurCfgSrcMACAddress=vmapCurCfgSrcMACAddress, ospfIfInfoAuthType=ospfIfInfoAuthType, vlagInfoIslGroup=vlagInfoIslGroup, ripNewCfgIntfTable=ripNewCfgIntfTable, portInfoLFDState=portInfoLFDState, ipInterfaceCfg=ipInterfaceCfg, mldCurInterfaceLastListenQueryIntvl=mldCurInterfaceLastListenQueryIntvl, bgpInfoGroupPeersNum=bgpInfoGroupPeersNum, ospf3IntfTxHello=ospf3IntfTxHello, lldpInfoRxTooManyNeighbors=lldpInfoRxTooManyNeighbors, ipsecCurCfgDynamicPolicyTxform=ipsecCurCfgDynamicPolicyTxform, lacpInfoPortPartOpPortState=lacpInfoPortPartOpPortState, ospf3NbrInXchgOrLoadState=ospf3NbrInXchgOrLoadState, ospf3VirtIntfInfoEntry=ospf3VirtIntfInfoEntry, ospf3CurCfgAreaDefaultMetric=ospf3CurCfgAreaDefaultMetric, ipNewCfgRmapDelete=ipNewCfgRmapDelete, acl6CurCfgIPv6FlowLabel=acl6CurCfgIPv6FlowLabel, aclCurCfgEntry=aclCurCfgEntry, ospf3AreaIntfDr=ospf3AreaIntfDr, txMldIfStatsAllowSlcrsv2=txMldIfStatsAllowSlcrsv2, ipStatsInAddrErrors=ipStatsInAddrErrors, dhcpSnoopingStatInPacketReply=dhcpSnoopingStatInPacketReply, ospfIntfUnloop=ospfIntfUnloop, vlagStatsPduRcvHlthCheck=vlagStatsPduRcvHlthCheck, ipIntfInfo=ipIntfInfo, swapFreeStats=swapFreeStats, stpInfoTable=stpInfoTable, ospf3RoutesInfoDestination=ospf3RoutesInfoDestination, acl6NewCfgDstIPv6PrefixLen=acl6NewCfgDstIPv6PrefixLen, aclCurCfgDstIPAddress=aclCurCfgDstIPAddress, agNewCfgSyslogFac=agNewCfgSyslogFac, ospfIntfErrorStats=ospfIntfErrorStats, trunkLacpGroupNewCfgIndex=trunkLacpGroupNewCfgIndex, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, lldpCurCfgPortmacphytlv=lldpCurCfgPortmacphytlv, ospf3NewCfgAreaType=ospf3NewCfgAreaType, radCurCfgSecondaryServer=radCurCfgSecondaryServer, toraddon=toraddon, ospfCurCfgRangeIndex=ospfCurCfgRangeIndex, ipCurCfgBootpState=ipCurCfgBootpState, nsnmpInTotalReqVars=nsnmpInTotalReqVars, ipv6ClearStats=ipv6ClearStats, hotlinksCurCfgTriggerTable=hotlinksCurCfgTriggerTable, serverPortsNewCfgRemovePort=serverPortsNewCfgRemovePort, bgpCurCfgEbgpMaxPaths=bgpCurCfgEbgpMaxPaths, ospfLoopIfInfoTransitDelay=ospfLoopIfInfoTransitDelay, aclNewCfgSrcMACMask=aclNewCfgSrcMACMask, lldpInfoPortRxChanges=lldpInfoPortRxChanges, ipCurCfgBootpOpt82State=ipCurCfgBootpOpt82State, allportsStatsAdminStatus=allportsStatsAdminStatus, routeStatEcmpMaxEntries=routeStatEcmpMaxEntries, virtGeneral=virtGeneral, ipsecNewCfgIfAddDynamicPolicy=ipsecNewCfgIfAddDynamicPolicy, ntpClearStats=ntpClearStats, ospf3IntfRxTxDisdIndex=ospf3IntfRxTxDisdIndex, pktStatsJumbos=pktStatsJumbos, virtNewCfgVMwareHelloAddPort=virtNewCfgVMwareHelloAddPort, vmapCurCfgSrcIPMask=vmapCurCfgSrcIPMask, ospfVirtIntfInfoTable=ospfVirtIntfInfoTable, vmapGroupCurCfgServerPortsTableEntry=vmapGroupCurCfgServerPortsTableEntry, ikeNewCfgIdType=ikeNewCfgIdType, tacCurBypassEnable=tacCurBypassEnable, sflowNewCfgServerPort=sflowNewCfgServerPort, hotlinksCurCfgTriggerState=hotlinksCurCfgTriggerState, hwPowerSupply2State=hwPowerSupply2State, qosNewCfgCosIndex=qosNewCfgCosIndex, ipNewCfgNwfTable=ipNewCfgNwfTable, igmpSnoopNewCfgEnaDis=igmpSnoopNewCfgEnaDis, ipCurCfgIntfRetransmitTimer=ipCurCfgIntfRetransmitTimer, fcoeInfo=fcoeInfo, portMgmtStatsTableEntry=portMgmtStatsTableEntry, ospf3CurCfgRedistRouteTagTypeManual=ospf3CurCfgRedistRouteTagTypeManual, virtVMwareVMInfoPortGroup=virtVMwareVMInfoPortGroup, aclNewCfgInprofDscpEnable=aclNewCfgInprofDscpEnable, bgpNewCfgPeerRetry=bgpNewCfgPeerRetry, stgNewCfgPortTableEntry=stgNewCfgPortTableEntry, ipNewCfgAspathTable=ipNewCfgAspathTable, stgCurCfgPortTableEntry=stgCurCfgPortTableEntry, ipFwdNewCfgState=ipFwdNewCfgState, vlagStatsPduSentFdbDynamicDel=vlagStatsPduSentFdbDynamicDel, ospf3CurCfgRangeEntry=ospf3CurCfgRangeEntry, icmpStatsInParmProbs=icmpStatsInParmProbs, bgpNewCfgPeerAdvert=bgpNewCfgPeerAdvert, lldpCurCfgMsgTxInt=lldpCurCfgMsgTxInt, ospfIfNbrEntry=ospfIfNbrEntry, ipStatsInUnknownProtos=ipStatsInUnknownProtos, vmapNewCfgIPFmt=vmapNewCfgIPFmt, vnicCurCfgVnicIndex=vnicCurCfgVnicIndex, dhcpSnoopingCurCfgPortTable=dhcpSnoopingCurCfgPortTable, ospfIntfRxTxIndex=ospfIntfRxTxIndex, nsnmpOutGetRequests=nsnmpOutGetRequests, bgpInfoSentUpdates=bgpInfoSentUpdates, vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, lldpInfoRxSNMPNotify=lldpInfoRxSNMPNotify, ikeNewCfgProposal=ikeNewCfgProposal, ipCurCfgBootpBcastDomainServIndex=ipCurCfgBootpBcastDomainServIndex, qosNewCfgPriorityIndex=qosNewCfgPriorityIndex, failoverNewCfgTriggerMmonKey=failoverNewCfgTriggerMmonKey, ipCurCfgGwAddr=ipCurCfgGwAddr, ospfCurCfgHostEntry=ospfCurCfgHostEntry, hotlinksStatsTriggerId=hotlinksStatsTriggerId, ipsecNewCfgSelectorDst=ipsecNewCfgSelectorDst, ospf3AreaErrIndex=ospf3AreaErrIndex, ospfCurCfgIntfTable=ospfCurCfgIntfTable, agNewCfgSyslogTrapRmon=agNewCfgSyslogTrapRmon, vmapGroupNewCfgAllPortsTableEntry=vmapGroupNewCfgAllPortsTableEntry, aclCurCfgPortAclBmap=aclCurCfgPortAclBmap, vmGroupInfoIsVMK=vmGroupInfoIsVMK, ospf3RoutesInfoPrefixLen=ospf3RoutesInfoPrefixLen, ospfLsTypesSupported=ospfLsTypesSupported, vlagStatsIslOutOctets=vlagStatsIslOutOctets, ospf3CurCfgAreaId=ospf3CurCfgAreaId, allportsStatsOutQLen=allportsStatsOutQLen, lacpInfoPortPartOpSysId=lacpInfoPortPartOpSysId, dhcpsnpStats=dhcpsnpStats, ripInfoIntfVersion=ripInfoIntfVersion, vlagInfoIslPorts=vlagInfoIslPorts, layer3Oper=layer3Oper, ipNwfTableMax=ipNwfTableMax, ipv6OutRoutSols=ipv6OutRoutSols, ipsecCurCfgDynamicPolicyPfs=ipsecCurCfgDynamicPolicyPfs, ipCurCfgIntfVlan=ipCurCfgIntfVlan, ipCurCfgIntfAddr=ipCurCfgIntfAddr, ospfNewCfgLoopIfDelete=ospfNewCfgLoopIfDelete, nsnmpInTooBigs=nsnmpInTooBigs, ospf3AreaErrHelloNoNbr=ospf3AreaErrHelloNoNbr, mstCistCurCfgPortStpState=mstCistCurCfgPortStpState, agAccessNewStrongPassLockout=agAccessNewStrongPassLockout, arpInfoDestIp=arpInfoDestIp, vmapNewCfgReset=vmapNewCfgReset, lldpInfoTxShutdownWhile=lldpInfoTxShutdownWhile, ibmSNMPv2Notifications=ibmSNMPv2Notifications, ipRoute6InfoIndx=ipRoute6InfoIndx, ospfCurCfgStaticMetricType=ospfCurCfgStaticMetricType, igmpV3SnoopCurCfgEnaDis=igmpV3SnoopCurCfgEnaDis, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, ospf3CurCfgRangeTable=ospf3CurCfgRangeTable, virtVMwareHostNameName=virtVMwareHostNameName, vlanNewCfgVlanName=vlanNewCfgVlanName, failoverInfoTriggerControlPorts=failoverInfoTriggerControlPorts, ifMainTable=ifMainTable, swTrapDisplayString=swTrapDisplayString, ipv6PmtuInfoIndx=ipv6PmtuInfoIndx, ospfIntfTxlsAcks=ospfIntfTxlsAcks, ospfLsdbInfoAge=ospfLsdbInfoAge, ipCurCfgNwfState=ipCurCfgNwfState, ipsecCurCfgTxformIntegrity=ipsecCurCfgTxformIntegrity, ospfSumRangesInfoEntry=ospfSumRangesInfoEntry, vlagStatsIslInPackets=vlagStatsIslInPackets, ipsecCurCfgDynamicPolicySelector=ipsecCurCfgDynamicPolicySelector, ipNewCfgIntfVlan=ipNewCfgIntfVlan, ospfIntfNbrChangeStatsEntry=ospfIntfNbrChangeStatsEntry, ospfCurCfgIbgpMetricType=ospfCurCfgIbgpMetricType, agPortNewCfgLinkTrap=agPortNewCfgLinkTrap, qosCurCfgMapDscp=qosCurCfgMapDscp, ipCurCfgBootpGlobalServerAddress=ipCurCfgBootpGlobalServerAddress, bgpNewCfgPeerNexthopSelf=bgpNewCfgPeerNexthopSelf, rxIgmpDiscardPkts=rxIgmpDiscardPkts, agAccessNewStrongPassFailLog=agAccessNewStrongPassFailLog, swBootVersion=swBootVersion, agNewCfgSysCustomDstState=agNewCfgSysCustomDstState, mldStatInvalidPkts=mldStatInvalidPkts, igmpSnoopVlanIndex=igmpSnoopVlanIndex, ripCurCfgIntfVersion=ripCurCfgIntfVersion, ospfAreaNbrExchangeDone=ospfAreaNbrExchangeDone, dhcpSnoopingCurCfgPortTableEntry=dhcpSnoopingCurCfgPortTableEntry, swDefGwNotInService=swDefGwNotInService, acl6StatsTable=acl6StatsTable, accessUserInfoTableEntry=accessUserInfoTableEntry, ospfIntfCountForRouter=ospfIntfCountForRouter, ospf3RedistTableMaxSize=ospf3RedistTableMaxSize, vmNewCfgGroupTable=vmNewCfgGroupTable, agNewDaylightSavings=agNewDaylightSavings, agNTP=agNTP)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", aclStats=aclStats, tacCurCfgSecBd=tacCurCfgSecBd, vmCurCfgProfileShapingBurst=vmCurCfgProfileShapingBurst, ipForwardCfg=ipForwardCfg, ipsecNewCfgIfTable=ipsecNewCfgIfTable, ipCurCfgSecIntfAddr=ipCurCfgSecIntfAddr, mldCurInterfaceRobustness=mldCurInterfaceRobustness, aclNewCfgPortAddAcl6=aclNewCfgPortAddAcl6, failoverCurCfgTriggerTable=failoverCurCfgTriggerTable, tacCurCfgState=tacCurCfgState, lldpCurCfgState=lldpCurCfgState, ipsecCurCfgSelectorDst=ipsecCurCfgSelectorDst, ospfCurCfgHostAreaIndex=ospfCurCfgHostAreaIndex, virtVMwareHost=virtVMwareHost, stpInfoPortDesignatedRoot=stpInfoPortDesignatedRoot, trunkGroupNewCfgState=trunkGroupNewCfgState, ripNewCfgIntfVersion=ripNewCfgIntfVersion, udldInfoPortInterval=udldInfoPortInterval, ospfIntfRxPkts=ospfIntfRxPkts, aclLogNewInterval=aclLogNewInterval, agAccessUserNewCfgState=agAccessUserNewCfgState, virtVMwareHostDetailInfoVMOSHostName=virtVMwareHostDetailInfoVMOSHostName, rxMldIfStatsToIncFmcrsv2=rxMldIfStatsToIncFmcrsv2, ecpNewCfgRetrans=ecpNewCfgRetrans, ospfAreaNbrBadSequence=ospfAreaNbrBadSequence, ospf3NbrTableMaxSize=ospf3NbrTableMaxSize, vrrpOperVirtRtrBackup=vrrpOperVirtRtrBackup, ospfVirtIntfInfoDead=ospfVirtIntfInfoDead, allportsStatsDescr=allportsStatsDescr, agSystem=agSystem, ipsecCurCfgTxformDelete=ipsecCurCfgTxformDelete, lacpInfoPortPerTraTimer=lacpInfoPortPerTraTimer, fcoeStatsFcfAdded=fcoeStatsFcfAdded, portOperState=portOperState, failoverNewCfgTriggerLimit=failoverNewCfgTriggerLimit, l2ThashCurCfgSipState=l2ThashCurCfgSipState, lacpStatsTableEntry=lacpStatsTableEntry, qosNewCfgCosWeightTable=qosNewCfgCosWeightTable, hotlinksInfoTriggerFdelay=hotlinksInfoTriggerFdelay, lacpInfoPortActOpPortState=lacpInfoPortActOpPortState, ospfNewCfgIntfAuthKey=ospfNewCfgIntfAuthKey, lldpCurCfgPortSnmpTrap=lldpCurCfgPortSnmpTrap, fdbCurCfgEntryIndex=fdbCurCfgEntryIndex, ripInfoIntfSupply=ripInfoIntfSupply, ibmnosFdbVlan=ibmnosFdbVlan, dhcpSnoopingNewCfgVlanId=dhcpSnoopingNewCfgVlanId, ripNewCfgFixedRemoveOutRmap=ripNewCfgFixedRemoveOutRmap, ospfCurCfgLoopIfTable=ospfCurCfgLoopIfTable, ospfLsdbInfoLsid=ospfLsdbInfoLsid, hwMainBoardRevision=hwMainBoardRevision, ipsecNewCfgSelectorAction=ipsecNewCfgSelectorAction, bgpNewCfgGroupLimit=bgpNewCfgGroupLimit, vmCurCfgCheck=vmCurCfgCheck, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, ripNewCfgEospfMetric=ripNewCfgEospfMetric, tacNewCfgSecPorttoUse=tacNewCfgSecPorttoUse, igmpInfoSourceIp=igmpInfoSourceIp, ospfAreaInfoASBoundaryRouter=ospfAreaInfoASBoundaryRouter, icmpStatsInTimestampReps=icmpStatsInTimestampReps, ipCurCfgStaticArpIndx=ipCurCfgStaticArpIndx, fipsInfoFcoeEntry=fipsInfoFcoeEntry, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, ipmcNewCfgStaticRouteRemAdminkey=ipmcNewCfgStaticRouteRemAdminkey, ospf3CurCfgIntfAuthType=ospf3CurCfgIntfAuthType, radNewCfgSecPorttoUse=radNewCfgSecPorttoUse, ipStaticRoute6ClearAllByDestIp=ipStaticRoute6ClearAllByDestIp, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, lldpInfoRemoteDevicesManAddrEntry=lldpInfoRemoteDevicesManAddrEntry, ripNewCfgEbgpMetric=ripNewCfgEbgpMetric, vmapVlanCurCfgServerPortsTable=vmapVlanCurCfgServerPortsTable, vlagInfoStartupDelayInterval=vlagInfoStartupDelayInterval, igmpNewCfgOnOff=igmpNewCfgOnOff, ipsecNewCfgDynamicPolicyPfs=ipsecNewCfgDynamicPolicyPfs, bgpNewCfgAggrEntry=bgpNewCfgAggrEntry, ospf3NewCfgNbrState=ospf3NewCfgNbrState, ospfNewCfgVirtIntfHelloMS=ospfNewCfgVirtIntfHelloMS, ospfAreaErrDeadMismatch=ospfAreaErrDeadMismatch, txMldIfStatsBlockSlcrsv2=txMldIfStatsBlockSlcrsv2, aclCurCfgDstMACAddress=aclCurCfgDstMACAddress, lacpInfoPortPartOpDef=lacpInfoPortPartOpDef, ipInfoRouterID=ipInfoRouterID, vmapNewCfgSrcMACMask=vmapNewCfgSrcMACMask, ipsecCurCfgManualPolicyInEspAuthKey=ipsecCurCfgManualPolicyInEspAuthKey, ipsecCurCfgIfEntry=ipsecCurCfgIfEntry, ipCurCfgStaticNbrMAC=ipCurCfgStaticNbrMAC, fipsOperFcfDelete=fipsOperFcfDelete, icmpStatsOutParmProbs=icmpStatsOutParmProbs, lldpInfoTxDelayWhile=lldpInfoTxDelayWhile, ipv6icmpInRedir=ipv6icmpInRedir, qosNewCfgCosWeight=qosNewCfgCosWeight, fipsCurAutoVlan=fipsCurAutoVlan, dhcpInfoAddr=dhcpInfoAddr, bgpCurCfgGroupClient=bgpCurCfgGroupClient, vnicNewCfgVnicIndex=vnicNewCfgVnicIndex, ipsecCurCfgTxformAuth=ipsecCurCfgTxformAuth, oamStatsPortLocalLinkFaults=oamStatsPortLocalLinkFaults, ospfLoopIfInfoHello=ospfLoopIfInfoHello, fdbNewCfgAddPort=fdbNewCfgAddPort, ndprefixNewCfgProfileIndex=ndprefixNewCfgProfileIndex, hotlinksStatsTriggerName=hotlinksStatsTriggerName, dot3RateStatsInternalMacTransmitErrors=dot3RateStatsInternalMacTransmitErrors, highFreeStats=highFreeStats, lldpCurCfgPortdcbxtlv=lldpCurCfgPortdcbxtlv, ndprefixNewCfgAction=ndprefixNewCfgAction, bgpCurCfgPeerMetric=bgpCurCfgPeerMetric, sshCurCfgScpApplySave=sshCurCfgScpApplySave, failoverInfoTriggerMonPortStatus=failoverInfoTriggerMonPortStatus, ceeNewCfgState=ceeNewCfgState, foreignAddressUdp=foreignAddressUdp, igmpSnoopNewCfgFlood=igmpSnoopNewCfgFlood, portStatsLinkStateChange=portStatsLinkStateChange, lldpInfoTxTransmitDelay=lldpInfoTxTransmitDelay, ripStatInBadSizePkts=ripStatInBadSizePkts, vmapGroupCfgServerPorts=vmapGroupCfgServerPorts, ospf3CurCfgRedistPrefixLen=ospf3CurCfgRedistPrefixLen, ospfCumNbrDown=ospfCumNbrDown, ipNewCfgIntfTable=ipNewCfgIntfTable, lacpInfoPortOperIndex=lacpInfoPortOperIndex, vlagNewCfgTrunkState=vlagNewCfgTrunkState, ripNewCfgIbgpOutRmapList=ripNewCfgIbgpOutRmapList, portStatsDot1PortOutFrames=portStatsDot1PortOutFrames, qosCurCfgPriorityIndex=qosCurCfgPriorityIndex, aclCurCfgUser=aclCurCfgUser, agCurCfgLoginBanner=agCurCfgLoginBanner, portMgmtStatsTxCarrier=portMgmtStatsTxCarrier, ospf3AreaErrRxZeroRTRID=ospf3AreaErrRxZeroRTRID, rip2CurCfgUpdatePeriod=rip2CurCfgUpdatePeriod, bgpCurCfgGroupHold=bgpCurCfgGroupHold, vnicNewCfgGroupVlan=vnicNewCfgGroupVlan, nsnmpInGetResponses=nsnmpInGetResponses, lldpInfoPortmgmtaddrtlv=lldpInfoPortmgmtaddrtlv, ospfNewCfgVirtIntfTrans=ospfNewCfgVirtIntfTrans, ospf3CurCfgIntfStatus=ospf3CurCfgIntfStatus, ipStaticRouteTableMaxSize=ipStaticRouteTableMaxSize, bgpCurCfgPeerNexthopSelf=bgpCurCfgPeerNexthopSelf, ospf3IntfErrBadPktType=ospf3IntfErrBadPktType, stgNewCfgDefaultCfg=stgNewCfgDefaultCfg, geaportInfoAlias=geaportInfoAlias, ipGatewayCfg=ipGatewayCfg, lacpInfoPortPartOpTimeout=lacpInfoPortPartOpTimeout, portMgmtStatsRxDropped=portMgmtStatsRxDropped, nsnmpOutGetResponses=nsnmpOutGetResponses, dnsStatOutDnsRequests=dnsStatOutDnsRequests, vmapNewCfgTcpudpReset=vmapNewCfgTcpudpReset, rxIgmpLeaves=rxIgmpLeaves, ipsecSaInfoSrcAddr=ipsecSaInfoSrcAddr, agNewCfgDefipMgtb=agNewCfgDefipMgtb, cee=cee, agNewCfgTrapSrcLoopIf=agNewCfgTrapSrcLoopIf, lldpInfoRemoteDevicesLocalPort=lldpInfoRemoteDevicesLocalPort, portInfoExtGuard=portInfoExtGuard, ipCurCfgNwfMask=ipCurCfgNwfMask, ospf3CurCfgVirtIntfEntry=ospf3CurCfgVirtIntfEntry, ipsecCurCfgSelectorSrc=ipsecCurCfgSelectorSrc, aclNewCfgPortTable=aclNewCfgPortTable, ipRouteEcmpInfoDest=ipRouteEcmpInfoDest, allportsStatsOutMcast=allportsStatsOutMcast, oamInfoPortLocalState=oamInfoPortLocalState, ospfProcessUptime=ospfProcessUptime, bgpCurCfgGroupRASTable=bgpCurCfgGroupRASTable, ospf3AreaNbrExchange=ospf3AreaNbrExchange, ripCurCfgIntfTrigUpdate=ripCurCfgIntfTrigUpdate, ospf3AreaTxlsReqs=ospf3AreaTxlsReqs, vrrpNewCfgVirtRtrFastAdvertisement=vrrpNewCfgVirtRtrFastAdvertisement, portStatsPhyIfInMulticastPkts=portStatsPhyIfInMulticastPkts, ipStaticArpTableMaxSize=ipStaticArpTableMaxSize, pptNewCfgIndx=pptNewCfgIndx, dnsCurCfgDomainName=dnsCurCfgDomainName, mldCfg=mldCfg, vmNewCfgGroupValidateMode=vmNewCfgGroupValidateMode, aclNewCfgTCPFlags=aclNewCfgTCPFlags, ripStatInBadZeros=ripStatInBadZeros, vmapVlanCurCfgNonServerPortsTable=vmapVlanCurCfgNonServerPortsTable, vmapNewCfgMeterReset=vmapNewCfgMeterReset, ldapNewCfgPrimaryIpAddr=ldapNewCfgPrimaryIpAddr, ipNewCfgGwEntry=ipNewCfgGwEntry, ipEcmpHashNumberPaths=ipEcmpHashNumberPaths, ikeNewCfgIdData=ikeNewCfgIdData, ospfLsdbInfoRouterId=ospfLsdbInfoRouterId, vrrpStatBadPassword=vrrpStatBadPassword, ipNewCfgIntfManagedCfg=ipNewCfgIntfManagedCfg, agPortCurCfgMulticastThreshold=agPortCurCfgMulticastThreshold, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, portMgmtStatsRxBytes=portMgmtStatsRxBytes, lldpInfoRemoteDevicesSystemName=lldpInfoRemoteDevicesSystemName, dhcpSnoopingNewCfgVlanTable=dhcpSnoopingNewCfgVlanTable, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, hotlinksStatsTriggerMasterActive=hotlinksStatsTriggerMasterActive, ipCurCfgIntfLoopbackEntry=ipCurCfgIntfLoopbackEntry, lacpdusTx=lacpdusTx, failoverInfoMonPortStateTable=failoverInfoMonPortStateTable, hotlinksCurCfgTriggerPreemptState=hotlinksCurCfgTriggerPreemptState, mldNewInterfaceDefault=mldNewInterfaceDefault, aclCurCfgSrcMACMask=aclCurCfgSrcMACMask, ipCurCfgIntfLoopbackIndex=ipCurCfgIntfLoopbackIndex, ibmnosPortCtrlFlowControl=ibmnosPortCtrlFlowControl, ipsecSaStatsBytes=ipsecSaStatsBytes, fdbSrcPort=fdbSrcPort, ripCurCfgStaticOutRmapList=ripCurCfgStaticOutRmapList, intfInfoVlan=intfInfoVlan, sflowNewPortSampling=sflowNewPortSampling, txMldIfStatsToIncFmcrsv2=txMldIfStatsToIncFmcrsv2, hwTemperatureSensor4=hwTemperatureSensor4, ospf3IfInfoPriority=ospf3IfInfoPriority, agNewCfgSyslogHostPort=agNewCfgSyslogHostPort, mstCistBridgeCfg=mstCistBridgeCfg, ospf3NewCfgAbrType=ospf3NewCfgAbrType, fipsPortNewCfgFcfMode=fipsPortNewCfgFcfMode, lldpCurCfgPortIndx=lldpCurCfgPortIndx, ospf3CurCfgIntfLsaSupress=ospf3CurCfgIntfLsaSupress, mstCistNewCfgPortIndex=mstCistNewCfgPortIndex, portInfoSpeed=portInfoSpeed, ospf3NewCfgHostAreaIndex=ospf3NewCfgHostAreaIndex, vnicNewCfgVnicState=vnicNewCfgVnicState, ospf3NewCfgAreaNoSumm=ospf3NewCfgAreaNoSumm, ospf3CurCfgRedistMetric=ospf3CurCfgRedistMetric, ipv6Fragoks=ipv6Fragoks, bgpNewCfgGroupDefaultAction=bgpNewCfgGroupDefaultAction, ipNewCfgNwfAddr=ipNewCfgNwfAddr, failoverNewCfgTriggerMmonTrunkAdd=failoverNewCfgTriggerMmonTrunkAdd, ospf3NewCfgIntfHello=ospf3NewCfgIntfHello, bgpCurCfgPeerUpdateSrcIf=bgpCurCfgPeerUpdateSrcIf, agCurCfgTrapSrcIf=agCurCfgTrapSrcIf, ripRouteRedistribution=ripRouteRedistribution, radCurCfgState=radCurCfgState, lacpInfoPortActOpSync=lacpInfoPortActOpSync, lacpInfoPortCurWhileTimer=lacpInfoPortCurWhileTimer, pptNewCfgLabel=pptNewCfgLabel, ipsecNewCfgIfIndex=ipsecNewCfgIfIndex, udpStatsInErrors=udpStatsInErrors, ospf3AreaErrDeadMismatch=ospf3AreaErrDeadMismatch, acl6NewCfgLog=acl6NewCfgLog, vmapGroupCurCfgServerPortsVmapBitmap=vmapGroupCurCfgServerPortsVmapBitmap, ospf3TotalAreas=ospf3TotalAreas, qosNewCfgPortPriorityTable=qosNewCfgPortPriorityTable, ikeNewCfgPskLocalKey=ikeNewCfgPskLocalKey, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, ndprefixCurCfgEntry=ndprefixCurCfgEntry, ipv6icmpOutNeighSol=ipv6icmpOutNeighSol, virtVMwareVMInfoVMVCenterName=virtVMwareVMInfoVMVCenterName, failoverNewCfgTriggerMconPortRem=failoverNewCfgTriggerMconPortRem, igmpFltCurCfgPortFiltBmap=igmpFltCurCfgPortFiltBmap, ospf3IfInfoAdminStatus=ospf3IfInfoAdminStatus, ospf3IfInfoEncryType=ospf3IfInfoEncryType, lacpInfoPortIndivState=lacpInfoPortIndivState, igmpCurCfgQurMaxRespTime=igmpCurCfgQurMaxRespTime, ospf3AreaIntfDown=ospf3AreaIntfDown, acl6NewCfgTcpudpReset=acl6NewCfgTcpudpReset, ospf3RangeTableMaxSize=ospf3RangeTableMaxSize, failoverCurCfgTriggerTableEntry=failoverCurCfgTriggerTableEntry, agNewCfgLFDFlaps=agNewCfgLFDFlaps, ripNewCfgOspfAddOutRmap=ripNewCfgOspfAddOutRmap, hwFan6RPMValue=hwFan6RPMValue, lldpNewCfgPortmacphytlv=lldpNewCfgPortmacphytlv)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", udldInfoPortMode=udldInfoPortMode, ipsecCurCfgManualPolicyDelete=ipsecCurCfgManualPolicyDelete, ospfNbrInInitState=ospfNbrInInitState, mldNewInterfaceQueryMaxResponseIntvl=mldNewInterfaceQueryMaxResponseIntvl, ipsecSaStatsProto=ipsecSaStatsProto, vlanCurCfgPorts=vlanCurCfgPorts, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, igmpNewCfgOtherQurAddress=igmpNewCfgOtherQurAddress, vrrpStats=vrrpStats, ndprefixCurCfgPrefix=ndprefixCurCfgPrefix, ospf3NewCfgIntfPoll=ospf3NewCfgIntfPoll, trunkGroupNewCfgTable=trunkGroupNewCfgTable, vlagCurCfgHlthchkPeerIp=vlagCurCfgHlthchkPeerIp, vlanNewCfgRemovePort=vlanNewCfgRemovePort, lldpInfoRemoteDevicesRemoteTTL=lldpInfoRemoteDevicesRemoteTTL, vmNewCfgProfileEntry=vmNewCfgProfileEntry, dhcpSnoopingStatDroppedPacketInvalid=dhcpSnoopingStatDroppedPacketInvalid, ipmcNewCfgStaticRouteRemPort=ipmcNewCfgStaticRouteRemPort, arpInfoTable=arpInfoTable, vmapGroupNewCfgNonServerPortsGroupIdx=vmapGroupNewCfgNonServerPortsGroupIdx, ospf3NewCfgSpfDelay=ospf3NewCfgSpfDelay, ipNewCfgRmapPrec=ipNewCfgRmapPrec, ipsecNewCfgManualPolicyInAhSpi=ipsecNewCfgManualPolicyInAhSpi, errMldIfStatsAllowSlcrsv2=errMldIfStatsAllowSlcrsv2, qosNewCfgMapDscp=qosNewCfgMapDscp, agSyslogMessage=agSyslogMessage, vmNewCfgGroupMacTable=vmNewCfgGroupMacTable, ipsecCurCfgManualPolicyIndex=ipsecCurCfgManualPolicyIndex, radNewCfgPorttoUse=radNewCfgPorttoUse, ipsecSaInfoEntry=ipsecSaInfoEntry, ipv6PmtuInfo=ipv6PmtuInfo, agDiffTable=agDiffTable, fipsInfoFcfIndex=fipsInfoFcfIndex, icmpStatsOutRedirects=icmpStatsOutRedirects, bgpInfoGroupRASTable=bgpInfoGroupRASTable, ospf3AreaIntfWaiting=ospf3AreaIntfWaiting, arpCfg=arpCfg, vlagNewCfgAutoRecoveryInterval=vlagNewCfgAutoRecoveryInterval, virtVMwareVMNameIpAddress=virtVMwareVMNameIpAddress, vmapCfg=vmapCfg, lacpCurSystemTimeoutTime=lacpCurSystemTimeoutTime, ipCurCfgRmapMetricType=ipCurCfgRmapMetricType, ospf3NewCfgRedistPrefixLen=ospf3NewCfgRedistPrefixLen, ipMgmtRouteInfoDestIp=ipMgmtRouteInfoDestIp, aclCurCfgSrcIPAddress=aclCurCfgSrcIPAddress, ipRoute6InfoEntry=ipRoute6InfoEntry, ipsecNewCfgManualPolicyDelete=ipsecNewCfgManualPolicyDelete, ipNewCfgGwArp=ipNewCfgGwArp, localAddress=localAddress, tacCurCfgDirectedRequest=tacCurCfgDirectedRequest, lldpNewCfgPortdcbxtlv=lldpNewCfgPortdcbxtlv, virtVMwareVMNameTable=virtVMwareVMNameTable, radCurCfgBackdoor=radCurCfgBackdoor, vlan=vlan, stgCurCfgPriority=stgCurCfgPriority, ipEcmpHashSIPAddr=ipEcmpHashSIPAddr, vlagInfoIslId=vlagInfoIslId, ospfNewCfgIbgpRemoveOutRmap=ospfNewCfgIbgpRemoveOutRmap, lldpStatsIndex=lldpStatsIndex, ipsecNewCfgDynamicPolicyDelete=ipsecNewCfgDynamicPolicyDelete, lacpInfoPortActOpDist=lacpInfoPortActOpDist, radNewCfgSecBd=radNewCfgSecBd, mldNewInterfaceEntry=mldNewInterfaceEntry, bgpNewCfgGroupPassword=bgpNewCfgGroupPassword, allportsStatsInMcastRate=allportsStatsInMcastRate, ospfCurCfgIntfPassive=ospfCurCfgIntfPassive, ikeNewCfgIdentity=ikeNewCfgIdentity, ospfIfInfoPtop=ospfIfInfoPtop, ospfNewCfgIntfPassive=ospfNewCfgIntfPassive, virtNewCfgVMwareHelloAddr=virtNewCfgVMwareHelloAddr, ospfTotalNumberOfInterfaces=ospfTotalNumberOfInterfaces, ospfNewCfgMdkeyDelete=ospfNewCfgMdkeyDelete, ospfIfInfoIndex=ospfIfInfoIndex, agDiffTableEntry=agDiffTableEntry, ibmnosLoggingOption=ibmnosLoggingOption, oamInfoPortLocalStable=oamInfoPortLocalStable, agCurCfgMgmtNetTable=agCurCfgMgmtNetTable, ipNewCfgSecIntfPrefix=ipNewCfgSecIntfPrefix, agCurRFC4741NetconfSessionTimeout=agCurRFC4741NetconfSessionTimeout, virtCurCfgVMwareHelloPorts=virtCurCfgVMwareHelloPorts, vlagCurCfgHlthchkKeepaliveInterval=vlagCurCfgHlthchkKeepaliveInterval, agCurRFC4741NetconfSshAccess=agCurRFC4741NetconfSshAccess, igmpFltNewCfgPortIndx=igmpFltNewCfgPortIndx, ospf3IntfDown=ospf3IntfDown, qos8021p=qos8021p, ntpLastUpdateTime=ntpLastUpdateTime, vrrpCurCfgVirtRtrFastAdvertisement=vrrpCurCfgVirtRtrFastAdvertisement, ipv6InDelivers=ipv6InDelivers, ipsecNewCfgManualPolicySelector=ipsecNewCfgManualPolicySelector, ipNewCfgStaticArpIp=ipNewCfgStaticArpIp, nbrInfoMacAddr=nbrInfoMacAddr, ipNewCfgRmapWeight=ipNewCfgRmapWeight, bgpCurCfgGroupRemoteMask=bgpCurCfgGroupRemoteMask, agNewCfgDcbx=agNewCfgDcbx, bgpCurCfgGroupAlive=bgpCurCfgGroupAlive, errMldIfStatsToIncFmcrsv2=errMldIfStatsToIncFmcrsv2, dot3RateStatsLateCollisions=dot3RateStatsLateCollisions, igmpFltNewCfgState=igmpFltNewCfgState, agCurHttpAcces=agCurHttpAcces, ospfLoopIfInfoAdminStatus=ospfLoopIfInfoAdminStatus, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, ospfAreaInfoNeighborsFULLstate=ospfAreaInfoNeighborsFULLstate, ospf3NewCfgNbrEntry=ospf3NewCfgNbrEntry, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, ospfNewCfgRipAddOutRmap=ospfNewCfgRipAddOutRmap, errMldIfStatsToExcFmcrsv2=errMldIfStatsToExcFmcrsv2, ipInfoBootpRelayAddr2=ipInfoBootpRelayAddr2, icmpStatsOutDestUnreachs=icmpStatsOutDestUnreachs, igmpV3SnoopCurCfgV1V2EnaDis=igmpV3SnoopCurCfgV1V2EnaDis, agCurCfgSyslogTrapAll=agCurCfgSyslogTrapAll, portStatsDot1PortInFrames=portStatsDot1PortInFrames, vmCurCfgProfileEntry=vmCurCfgProfileEntry, ospf3NewCfgRedistIndex=ospf3NewCfgRedistIndex, dnsStats=dnsStats, ospf3NewCfgVirtIntfTable=ospf3NewCfgVirtIntfTable, ipsecNewCfgManualPolicyEntry=ipsecNewCfgManualPolicyEntry, igmpInfoEntry=igmpInfoEntry, ospfAreaErrAuthFailure=ospfAreaErrAuthFailure, vnicCurCfgGroupVnics=vnicCurCfgGroupVnics, bgpInfoSummaryTable=bgpInfoSummaryTable, ospf3NewCfgIntfStatus=ospf3NewCfgIntfStatus, ospfAreaNbrBadRequests=ospfAreaNbrBadRequests, lldpCurCfgPortsysdescrtlv=lldpCurCfgPortsysdescrtlv, fipsInfoVlansEntry=fipsInfoVlansEntry, ripCurCfgIntfIndex=ripCurCfgIntfIndex, portMgmtStatsTxOverruns=portMgmtStatsTxOverruns, accessInfoClearAllUserFailAttempts=accessInfoClearAllUserFailAttempts, ipMgmtRouteInfoEntry=ipMgmtRouteInfoEntry, vrrpOperVirtRtrTable=vrrpOperVirtRtrTable, lacpNewPortActorPortPriority=lacpNewPortActorPortPriority, ospf3IntfBackup=ospf3IntfBackup, virtNewCfgState=virtNewCfgState, vmNewCfgProfileShapingAverage=vmNewCfgProfileShapingAverage, agNewCfgErrDisableTimeout=agNewCfgErrDisableTimeout, agNewCfgMgmtNetDelete=agNewCfgMgmtNetDelete, vmNewCfgGroupAddVm=vmNewCfgGroupAddVm, acl6NewCfgIndex=acl6NewCfgIndex, agSyslogMsgTableEntry=agSyslogMsgTableEntry, aclCurCfgTCPFlagsMask=aclCurCfgTCPFlagsMask, ospfAreaTxDatabase=ospfAreaTxDatabase, qosCurCfgPortIndex=qosCurCfgPortIndex, agSSHConfig=agSSHConfig, bgpInfoGroupRASEntry=bgpInfoGroupRASEntry, pptTableMaxSize=pptTableMaxSize, ospf3CurCfgRedistAddr=ospf3CurCfgRedistAddr, ipmcCurCfgStaticRouteDestIp=ipmcCurCfgStaticRouteDestIp, vmapGroupNewCfgServerPortsGroupIdx=vmapGroupNewCfgServerPortsGroupIdx, agNewCfgNTPServerPort=agNewCfgNTPServerPort, swVrrpNewBackup=swVrrpNewBackup, portStatsPhyIfInBroadcastPkts=portStatsPhyIfInBroadcastPkts, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, sfpInfoSerial=sfpInfoSerial, failoverCurCfgOnState=failoverCurCfgOnState, trunkLacpGroupCurCfgTable=trunkLacpGroupCurCfgTable, bgpNewCfgGroupDelete=bgpNewCfgGroupDelete, ospf3VirtIfInfoIndex=ospf3VirtIfInfoIndex, udldInfo=udldInfo, ipStaticRoute6TableMaxSize=ipStaticRoute6TableMaxSize, ospfNewCfgHostAreaIndex=ospfNewCfgHostAreaIndex, ipMgmtRouteInfoGateway=ipMgmtRouteInfoGateway, bgpCurCfgPeerPassword=bgpCurCfgPeerPassword, bgpCurCfgGroupName=bgpCurCfgGroupName, layer3Info=layer3Info, mldInfoMRouterVlan=mldInfoMRouterVlan, agPortCurCfgMacAddrNotif=agPortCurCfgMacAddrNotif, ipsecNewCfgTxformCipher=ipsecNewCfgTxformCipher, bgpCurCfgGroupInRmapList=bgpCurCfgGroupInRmapList, rxMldIfStatsMLDv1Done=rxMldIfStatsMLDv1Done, mcastFdbCurCfgTable=mcastFdbCurCfgTable, agPortCurCfgLearning=agPortCurCfgLearning, ospfCumTxlsUpdates=ospfCumTxlsUpdates, vmapCurCfgTCPFlagsMask=vmapCurCfgTCPFlagsMask, vrrpOperVirtRtrEntry=vrrpOperVirtRtrEntry, swVlagInstanceLocalUp=swVlagInstanceLocalUp, lldpCurCfgPortTable=lldpCurCfgPortTable, ipNewCfgIntfReachTime=ipNewCfgIntfReachTime, ipNewCfgStaticArpAction=ipNewCfgStaticArpAction, agRtcDate=agRtcDate, recvQ=recvQ, acl6CurCfgIPv6TrafficClass=acl6CurCfgIPv6TrafficClass, agPortNewCfgEdge=agPortNewCfgEdge, ipsecCurCfgManualPolicyInEspEncKey=ipsecCurCfgManualPolicyInEspEncKey, ospfCurCfgHostIndex=ospfCurCfgHostIndex, bgpCurCfgIbgpMaxPaths=bgpCurCfgIbgpMaxPaths, tacNewCfgPorttoUse=tacNewCfgPorttoUse, ospfNewCfgMdkeyKey=ospfNewCfgMdkeyKey, ibmnosConfigSaveStatus=ibmnosConfigSaveStatus, processStatus=processStatus, ospfNewCfgIntfHelloMS=ospfNewCfgIntfHelloMS, ospf3IntfDisdlsReqs=ospf3IntfDisdlsReqs, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, ipmcNewCfgStaticRouteAddAdminkey=ipmcNewCfgStaticRouteAddAdminkey, ospfCumNbrNegotiationDone=ospfCumNbrNegotiationDone, dot3RateStatsIndx=dot3RateStatsIndx, ipNewCfgBootpAddr=ipNewCfgBootpAddr, vmCurCfgGroupTable=vmCurCfgGroupTable, fipsInfoFcfVlan=fipsInfoFcfVlan, agTransferLastConfigurationActionStatus=agTransferLastConfigurationActionStatus, acl6CurCfgDstIPv6Address=acl6CurCfgDstIPv6Address, gatewayIPv6InfoTable=gatewayIPv6InfoTable, fipsInfoFcoeFcfMac=fipsInfoFcoeFcfMac, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, ospf3AreaRxPkts=ospf3AreaRxPkts, igmpNewCfgOtherQurPresentInt=igmpNewCfgOtherQurPresentInt, ospfNewCfgDefaultRouteMetric=ospfNewCfgDefaultRouteMetric, swVMGroupVMOnline=swVMGroupVMOnline, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, ipmcStaticRouteClearAll=ipmcStaticRouteClearAll, ipNewCfgIntfAnycast=ipNewCfgIntfAnycast, ecpChnlSndnxt=ecpChnlSndnxt, ospfNewCfgRipMetricType=ospfNewCfgRipMetricType, ipv6icmpInTmexceeded=ipv6icmpInTmexceeded, tacChangePassForUser=tacChangePassForUser, mldNewInterfaceRobustness=mldNewInterfaceRobustness, aclNewCfgLog=aclNewCfgLog, lldpInfoTxIndex=lldpInfoTxIndex, vmNewCfgProfilesTable=vmNewCfgProfilesTable, lldpStatsFramesInErrorsTotal=lldpStatsFramesInErrorsTotal, cpuProcessUtil1Sec=cpuProcessUtil1Sec, ipsecNewCfgSelectorProto=ipsecNewCfgSelectorProto, ospfCurCfgRipMetric=ospfCurCfgRipMetric, ospf3RouterID=ospf3RouterID, allportsStatsInBcast=allportsStatsInBcast, ldapCurCfgRetries=ldapCurCfgRetries, tacCurCfgEnaPassChange=tacCurCfgEnaPassChange, igmpSnoopNewCfgTimeout=igmpSnoopNewCfgTimeout, lldpInfoRemoteDevicesRxChanges=lldpInfoRemoteDevicesRxChanges, bgpCurCfgPeerOutRmapList=bgpCurCfgPeerOutRmapList, vmapGroupCfgNonServerPorts=vmapGroupCfgNonServerPorts, ibmnosSfpInfoPartNumber=ibmnosSfpInfoPartNumber, ikeCurCfgTxTimeout=ikeCurCfgTxTimeout, ospfAreaRxTxStatsEntry=ospfAreaRxTxStatsEntry, ndprefixCurCfgPreferredLifetime=ndprefixCurCfgPreferredLifetime, pptCurCfgPrefixLen=pptCurCfgPrefixLen, ospfVirtIntfInfoHello=ospfVirtIntfInfoHello, ldapCurCfgPorttoUse=ldapCurCfgPorttoUse, ospfCurCfgAreaMetric=ospfCurCfgAreaMetric, ipCurCfgRmapAp=ipCurCfgRmapAp, vmapNewCfgDstPortMask=vmapNewCfgDstPortMask, vmapNewCfgDstIPAddress=vmapNewCfgDstIPAddress, ospf3AreaErrorStats=ospf3AreaErrorStats, ripCurCfgIntfListen=ripCurCfgIntfListen, ospfNewCfgStaticOutRmapList=ospfNewCfgStaticOutRmapList, agAccessNewStrongPassWarning=agAccessNewStrongPassWarning, agLog=agLog, dhcpSnoopingCurCfgOnState=dhcpSnoopingCurCfgOnState, dot3RateStatsFrameTooLongs=dot3RateStatsFrameTooLongs, ospf3CumIntfLoop=ospf3CumIntfLoop, bgpNewCfgGroupEntry=bgpNewCfgGroupEntry, agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, lldpInfoTxState=lldpInfoTxState, fipsInfoFcfTable=fipsInfoFcfTable, ipNewCfgGwIpv6Index=ipNewCfgGwIpv6Index, vmapCurCfgDstIPMask=vmapCurCfgDstIPMask)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", agPortCurCfgBroadcastThreshold=agPortCurCfgBroadcastThreshold, ospf3NewCfgNbrDelete=ospf3NewCfgNbrDelete, cistInfoPortPriority=cistInfoPortPriority, ipNewCfgIntfLoopbackIndex=ipNewCfgIntfLoopbackIndex, vlagNewIslCfgPortChannel=vlagNewIslCfgPortChannel, dhcpSnoopingNewCfgOnState=dhcpSnoopingNewCfgOnState, ospf3IntfIndex=ospf3IntfIndex, ipCurCfgIntfLoopbackBroadcast=ipCurCfgIntfLoopbackBroadcast, rxIgmpGrpSpecificQueries=rxIgmpGrpSpecificQueries, ospfAreaInfoEntry=ospfAreaInfoEntry, swStgTopologyChanged=swStgTopologyChanged, ospf3AreaNbrN2way=ospf3AreaNbrN2way, ospf3NumberOfLsdbEntries=ospf3NumberOfLsdbEntries, ospfLoopIfInfoPassive=ospfLoopIfInfoPassive, virtVMwareVMInfoTable=virtVMwareVMInfoTable, ospfIfInfoRouterIP=ospfIfInfoRouterIP, vlanMaxVlanID=vlanMaxVlanID, accessUserInfoLockState=accessUserInfoLockState, acConfig=acConfig, vmapNewCfgSrcPortMask=vmapNewCfgSrcPortMask, bgpInfoGroupRemoteAddr=bgpInfoGroupRemoteAddr, ospfLsdbInfoIndex=ospfLsdbInfoIndex, ecpInfo=ecpInfo, ospf3CurCfgNbrIpAddr=ospf3CurCfgNbrIpAddr, vlagStatsPduRcvFdbInactiveAdd=vlagStatsPduRcvFdbInactiveAdd, lacpInfoPortPartOpSysPrio=lacpInfoPortPartOpSysPrio, vrrpOperVirtRtrGroupBackup=vrrpOperVirtRtrGroupBackup, vmbwNewCfgTxAclId=vmbwNewCfgTxAclId, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, bgpNewCfgGroupTtlSecHops=bgpNewCfgGroupTtlSecHops, vmapCurCfgFilterActionSetPrio=vmapCurCfgFilterActionSetPrio, ospf3NewCfgIntfTrans=ospf3NewCfgIntfTrans, portInfoBpduGuard=portInfoBpduGuard, virtCurCfgVirtCenterIp=virtCurCfgVirtCenterIp, radNewCfgAuthenString=radNewCfgAuthenString, l2ThashNewCfgDipState=l2ThashNewCfgDipState, ospf3NewCfgRedistDelete=ospf3NewCfgRedistDelete, ospf3TmrsKckOffWait=ospf3TmrsKckOffWait, agCurCfgMgmtNetEntry=agCurCfgMgmtNetEntry, ospf3IntfErrBadDestAddr=ospf3IntfErrBadDestAddr, ipv6icmpOutRedir=ipv6icmpOutRedir, bgpInfoPeerRemoteAs=bgpInfoPeerRemoteAs, ibmnosConfigRestoreOption=ibmnosConfigRestoreOption, agCurCfgNTPService=agCurCfgNTPService, tcpStatsRtoAlgorithm=tcpStatsRtoAlgorithm, mldInfoGroupFilterType=mldInfoGroupFilterType, udpClearStats=udpClearStats, txMldIfStatsIncCrsv2=txMldIfStatsIncCrsv2, ipFloodCurCfgFlood=ipFloodCurCfgFlood, ipv6Reasmfails=ipv6Reasmfails, lacpInfo=lacpInfo, hotlinksStatsTriggerFdbFailed=hotlinksStatsTriggerFdbFailed, ospfNewCfgIntfPrio=ospfNewCfgIntfPrio, bgpNewCfgPeerPassive=bgpNewCfgPeerPassive, nsnmpInNoSuchNames=nsnmpInNoSuchNames, igmpV3SnoopNewCfgExcludeEnaDis=igmpV3SnoopNewCfgExcludeEnaDis, mcastFdbCurCfgPorts=mcastFdbCurCfgPorts, agNewCfgSyslogTrapLink=agNewCfgSyslogTrapLink, ipCurCfgIntfManagedCfg=ipCurCfgIntfManagedCfg, ipsecSpdInfoSaEncrAlg=ipsecSpdInfoSaEncrAlg, ospf3CurCfgRedistRouteTag=ospf3CurCfgRedistRouteTag, bgpAggrTableMax=bgpAggrTableMax, fdbCurCfgTrunk=fdbCurCfgTrunk, lacpInfoPortGeneralIndex=lacpInfoPortGeneralIndex, ipsecNewCfgDynamicPolicyPeer=ipsecNewCfgDynamicPolicyPeer, virtVMwareVMInfoIndex=virtVMwareVMInfoIndex, ospf3IfInfoAreaID=ospf3IfInfoAreaID, virtVMwareHostNameUUID=virtVMwareHostNameUUID, ospfLoopIfInfoRetransmit=ospfLoopIfInfoRetransmit, sflowCurPortCfgTable=sflowCurPortCfgTable, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, vmapVlanNewCfgServerPortsVlanIdx=vmapVlanNewCfgServerPortsVlanIdx, ospfIntfNbrN2way=ospfIntfNbrN2way, failoverNewCfgTriggerMmonTrunkRem=failoverNewCfgTriggerMmonTrunkRem, qosNewCfgMap8021p=qosNewCfgMap8021p, portStatsPhyIfInUcastPkts=portStatsPhyIfInUcastPkts, igmpFltNewCfgIndx=igmpFltNewCfgIndx, allportsStatsInMcast=allportsStatsInMcast, arpInfoSrcPort=arpInfoSrcPort, pmCurCfgPortMirrState=pmCurCfgPortMirrState, udldInfoNeighborEntry=udldInfoNeighborEntry, ipNewCfgStaticArpPort=ipNewCfgStaticArpPort, clearStats=clearStats, portMgmtStatsIndx=portMgmtStatsIndx, mldInfoMRouterQqic=mldInfoMRouterQqic, l2ThashNewCfgSipState=l2ThashNewCfgSipState, ospfNewCfgIbgpOutRmapList=ospfNewCfgIbgpOutRmapList, ospf3CumRxTxDisdStats=ospf3CumRxTxDisdStats, vnicNewCfgGroupVnics=vnicNewCfgGroupVnics, hotlinksInfoTriggerTable=hotlinksInfoTriggerTable, ospfLoopIfInfoTable=ospfLoopIfInfoTable, ripCurCfgIbgpMetric=ripCurCfgIbgpMetric, ospf3IfInfoHello=ospf3IfInfoHello, hotlinksInfoTriggerState=hotlinksInfoTriggerState, lldpInfoPortTable=lldpInfoPortTable, ospf3AreaNbrAttempt=ospf3AreaNbrAttempt, ipCurCfgGwIpv6Table=ipCurCfgGwIpv6Table, vmapCurCfgEthernetTypeName=vmapCurCfgEthernetTypeName, lldpCurCfgTxDelay=lldpCurCfgTxDelay, ospf3AreaErrBadChecksum=ospf3AreaErrBadChecksum, aclCurCfgKbitsSec=aclCurCfgKbitsSec, vmCurCfgGroupMacGroupIndex=vmCurCfgGroupMacGroupIndex, virtVMwareHostDetailInfoVlanID=virtVMwareHostDetailInfoVlanID, igmpSnoopCurCfgRobustness=igmpSnoopCurCfgRobustness, vmCurCfgGroupMacVMIndex=vmCurCfgGroupMacVMIndex, agCurCfgCpuRateLimitOther=agCurCfgCpuRateLimitOther, ospf3IfNbrInfoIndex=ospf3IfNbrInfoIndex, lacpInfoAggrIndex=lacpInfoAggrIndex, ospf3IntfErrorStats=ospf3IntfErrorStats, ospfSumRangesInfoListType=ospfSumRangesInfoListType, aclCurCfgRemarkOutProfDscpEntry=aclCurCfgRemarkOutProfDscpEntry, lldpPortTableMaxEnt=lldpPortTableMaxEnt, ospfAreaTxPkts=ospfAreaTxPkts, ospf3NewCfgIntfEntry=ospf3NewCfgIntfEntry, igmpMrtrInfoPortId=igmpMrtrInfoPortId, agCurCfgNTPSecServer=agCurCfgNTPSecServer, ospfNewCfgLoopIfArea=ospfNewCfgLoopIfArea, ospf3IntfErrMTUMismatch=ospf3IntfErrMTUMismatch, bgpPeerTableMax=bgpPeerTableMax, ospfRedistributeEbgp=ospfRedistributeEbgp, stgCurCfgPortTable=stgCurCfgPortTable, ospf3CumNbrAllEvents=ospf3CumNbrAllEvents, dhcpSnoopingNewCfgVlanOnState=dhcpSnoopingNewCfgVlanOnState, ldapCurCfgSecPorttoUse=ldapCurCfgSecPorttoUse, ikeNewCfgCookie=ikeNewCfgCookie, agPortCurCfgDLFThreshold=agPortCurCfgDLFThreshold, failoverInfoState=failoverInfoState, stgCfg=stgCfg, bgpInfoSummaryEntry=bgpInfoSummaryEntry, tcpStatsInErrs=tcpStatsInErrs, routeStatMaxEntries=routeStatMaxEntries, vmapCurCfgIndex=vmapCurCfgIndex, agsFlowConfig=agsFlowConfig, agCurCfgNTPSrcLoopIf=agCurCfgNTPSrcLoopIf, agCurCfgSyslogTrapCfg=agCurCfgSyslogTrapCfg, bgpNewCfgGroupAlive=bgpNewCfgGroupAlive, qosNewCfgDscpEntry=qosNewCfgDscpEntry, udldInfoPortTimeout=udldInfoPortTimeout, vmNewCfgProfileName=vmNewCfgProfileName, arpInfoVLAN=arpInfoVLAN, fdbVlan=fdbVlan, igmpNewCfgQuerier=igmpNewCfgQuerier, ipsecNewCfgManualPolicyOutEspEncKey=ipsecNewCfgManualPolicyOutEspEncKey, ipv6udpInDgrams=ipv6udpInDgrams, layer2Oper=layer2Oper, dnsCurCfgPriServerPort=dnsCurCfgPriServerPort, ipCurCfgBootpBcastDomainBDIndex=ipCurCfgBootpBcastDomainBDIndex, hotlinksInfoTriggerActive=hotlinksInfoTriggerActive, vrrpNewCfgIfTable=vrrpNewCfgIfTable, ipNewCfgBootpBcastDomainServerIP=ipNewCfgBootpBcastDomainServerIP, ipCurCfgAspathState=ipCurCfgAspathState, virtVMwareHostNameIndex=virtVMwareHostNameIndex, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, ospf3NewCfgIntfArea=ospf3NewCfgIntfArea, vlagNewCfgHlthchkPeerIp=vlagNewCfgHlthchkPeerIp, lacpDeleteTrunk=lacpDeleteTrunk, qosDefaultCfg=qosDefaultCfg, mldInfoInterfaceState=mldInfoInterfaceState, bgpNewCfgAggrState=bgpNewCfgAggrState, cpuProcessUtil5Sec=cpuProcessUtil5Sec, mstCistNewCfgPortPathCost=mstCistNewCfgPortPathCost, ospf3NewCfgRangeEntry=ospf3NewCfgRangeEntry, ospf3NewCfgAreaTranslRole=ospf3NewCfgAreaTranslRole, qosCurCfgPortPriorityEntry=qosCurCfgPortPriorityEntry, agPortCurCfgPVID=agPortCurCfgPVID, ospfCurCfgRangeTable=ospfCurCfgRangeTable, ipsecCurCfgManualPolicyInAhSpi=ipsecCurCfgManualPolicyInAhSpi, ipNewCfgIntfLoopbackMask=ipNewCfgIntfLoopbackMask, ikeNewCfgTxTimeout=ikeNewCfgTxTimeout, agApplyConfig=agApplyConfig, ipCurCfgGwIpv6State=ipCurCfgGwIpv6State, ripCurCfgOspfMetric=ripCurCfgOspfMetric, ospfNewCfgRangeEntry=ospfNewCfgRangeEntry, ospf3CurCfgRedistMetricType=ospf3CurCfgRedistMetricType, agTransferUserName=agTransferUserName, portInfoTableEntry=portInfoTableEntry, ospfCurCfgVirtIntfRetra=ospfCurCfgVirtIntfRetra, mstCurCfgMaxHopCount=mstCurCfgMaxHopCount, ospf3NewCfgRangeLsaType=ospf3NewCfgRangeLsaType, vnicNewCfgGroupTable=vnicNewCfgGroupTable, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, vlagCurCfgGlobalEnable=vlagCurCfgGlobalEnable, ipsecNewCfgManualPolicyPeer=ipsecNewCfgManualPolicyPeer, ospfIfInfoBackupDesignatedRouterIpAddress=ospfIfInfoBackupDesignatedRouterIpAddress, portMgmtStatsRxErrors=portMgmtStatsRxErrors, igmpStaticMrtrNewCfgDelete=igmpStaticMrtrNewCfgDelete, agNewCfgSyslogTrapIpv6=agNewCfgSyslogTrapIpv6, vlagStatsHealth=vlagStatsHealth, ospfVirtIntfInfoArea=ospfVirtIntfInfoArea, state=state, ibmnosSfpInfoHWRevision=ibmnosSfpInfoHWRevision, dhcpSnoopingCurCfgPortTrusted=dhcpSnoopingCurCfgPortTrusted, ospfIfInfoWaitInterval=ospfIfInfoWaitInterval, udldInfoPortIndex=udldInfoPortIndex, agNewCfgSyslogTrapVm=agNewCfgSyslogTrapVm, radCurCfgSrcLoopIf=radCurCfgSrcLoopIf, vlagStatsPduRcvUnknown=vlagStatsPduRcvUnknown, bgpNewCfgGroupName=bgpNewCfgGroupName, ospf3IfInfoEncryAuthKey=ospf3IfInfoEncryAuthKey, ipNewCfgBootpGlobalServerIndex=ipNewCfgBootpGlobalServerIndex, ipv6icmpOutEchoResp=ipv6icmpOutEchoResp, agPortNewCfgBroadcastThresholdRate=agPortNewCfgBroadcastThresholdRate, ipv6icmpOutToobig=ipv6icmpOutToobig, pysmi_if=pysmi_if, bgpInfoOrigin=bgpInfoOrigin, vmapNewCfgFilterActionSetPrio=vmapNewCfgFilterActionSetPrio, tcpControlBlocksIndx=tcpControlBlocksIndx, swNTPUpdateClock=swNTPUpdateClock, mldInfoMRouterSrcIp=mldInfoMRouterSrcIp, lacpNewSystemPriority=lacpNewSystemPriority, mldInfoInterfaceQuerierStatus=mldInfoInterfaceQuerierStatus, ospfIntfChangeStats=ospfIntfChangeStats, mldInfoMRouterMaxRespDelay=mldInfoMRouterMaxRespDelay, vmapNewCfgKbitsBurst=vmapNewCfgKbitsBurst, agNewCfgSyslogTrapDcbx=agNewCfgSyslogTrapDcbx, ripNewCfgIntfMcastUpdate=ripNewCfgIntfMcastUpdate, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, ospf3AreaIntfBackup=ospf3AreaIntfBackup, igmpStaticMrtrCurCfgIndx=igmpStaticMrtrCurCfgIndx, vmapNewCfgSrcMACAddress=vmapNewCfgSrcMACAddress, memoryFreeStats=memoryFreeStats, igmpStaticMrtrCurCfgTableEntry=igmpStaticMrtrCurCfgTableEntry, ospfCurCfgAreaIndex=ospfCurCfgAreaIndex, vmGroupInfoGroup=vmGroupInfoGroup, igmpSnoopCurCfgRtrAlert=igmpSnoopCurCfgRtrAlert, dot3RateStatsMultipleCollisionFrames=dot3RateStatsMultipleCollisionFrames, qos=qos, ibmnos=ibmnos, ospf3CurCfgAreaIndex=ospf3CurCfgAreaIndex, portStatsPhyIfOutFctlPktsRate=portStatsPhyIfOutFctlPktsRate, ipStaticRouteClearAllByGatewayIp=ipStaticRouteClearAllByGatewayIp, lldpInfoRxEntry=lldpInfoRxEntry, agReset=agReset, nsnmpInGenErrs=nsnmpInGenErrs, agApplyTableSize=agApplyTableSize, ipClearStats=ipClearStats, allportsStatsTableEntry=allportsStatsTableEntry, fdbInfo=fdbInfo, hotlinksInfoTriggerId=hotlinksInfoTriggerId, ipRouteEcmpInfoGateway=ipRouteEcmpInfoGateway, bgpInfoGroupRAS=bgpInfoGroupRAS, ospfAreaRxTxIndex=ospfAreaRxTxIndex, virtVMwareVMInfoVMOSHostName=virtVMwareVMInfoVMOSHostName, ospfCumRxlsAcks=ospfCumRxlsAcks, bgpInfoRtrTable=bgpInfoRtrTable, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, ecpChnlInfoEntry=ecpChnlInfoEntry, vmapCurCfgEgressPorts=vmapCurCfgEgressPorts, ipIntfLoopbackInfo=ipIntfLoopbackInfo, stpInfoPortExtGuard=stpInfoPortExtGuard, ospfAreaNbrhello=ospfAreaNbrhello, ospfIntfRxlsAcks=ospfIntfRxlsAcks, ospfAreaIntfDown=ospfAreaIntfDown, vrrpOper=vrrpOper)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", ospfRoutesInfoMask=ospfRoutesInfoMask, bgpCurCfgGroupState=bgpCurCfgGroupState, ospf3CurCfgAreaNoSumm=ospf3CurCfgAreaNoSumm, ndprefixCurCfgPreferredLifetimeFlag=ndprefixCurCfgPreferredLifetimeFlag, ospf3Interface=ospf3Interface, stpInfoPortPathCost=stpInfoPortPathCost, agAccessCurStrongPassword=agAccessCurStrongPassword, ospfSumRangesInfoIndex=ospfSumRangesInfoIndex, ipNewCfgGwInterval=ipNewCfgGwInterval, agPortCurCfgLFDStatus=agPortCurCfgLFDStatus, vmapNewCfgTCPFlagsMask=vmapNewCfgTCPFlagsMask, vmGroupInfoHost=vmGroupInfoHost, vmapGroupNewCfgServerPortsRemVmap=vmapGroupNewCfgServerPortsRemVmap, sfpInfoIndx=sfpInfoIndx, hotlinksCurCfgBpduState=hotlinksCurCfgBpduState, ospf3CumRxlsAcks=ospf3CumRxlsAcks, tacCurCfgCmdLogging=tacCurCfgCmdLogging, ospf3IntfNbrChangeStatsEntry=ospf3IntfNbrChangeStatsEntry, agNewCfgSyslogTrapServer=agNewCfgSyslogTrapServer, ospfCurCfgVirtIntfIndex=ospfCurCfgVirtIntfIndex, serverPortsNewCfgAddPort=serverPortsNewCfgAddPort, mcastFdbCurCfgEntry=mcastFdbCurCfgEntry, ospf3NewCfgIntfEncryType=ospf3NewCfgIntfEncryType, vlanNewCfgPrVlanMapPriId=vlanNewCfgPrVlanMapPriId, cistInfoPortLinkType=cistInfoPortLinkType, vmapNewCfgOutprofDscpEnable=vmapNewCfgOutprofDscpEnable, agDiffState=agDiffState, ipDataRouteInfoGateway1=ipDataRouteInfoGateway1, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, ospf3IfNbrPriority=ospf3IfNbrPriority, ospf3ProcessUptime=ospf3ProcessUptime, ldapNewCfgRetries=ldapNewCfgRetries, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, vmapVlanNewCfgServerPortsTableEntry=vmapVlanNewCfgServerPortsTableEntry, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, ospf3IntfTxPkts=ospf3IntfTxPkts, bgpNewCfgGroupRemoteMask=bgpNewCfgGroupRemoteMask, radCurCfgAuthenString=radCurCfgAuthenString, virtNewCfgVMwareHelloRemovePort=virtNewCfgVMwareHelloRemovePort, lldpInfoPortEnabled=lldpInfoPortEnabled, dhcpSnoopingCurCfgPortRateLimit=dhcpSnoopingCurCfgPortRateLimit, igmpFltCurCfgPortState=igmpFltCurCfgPortState, ospfIntfRxTxStatsEntry=ospfIntfRxTxStatsEntry, vmbwNewCfgEntry=vmbwNewCfgEntry, ipsecNewCfgTxformMode=ipsecNewCfgTxformMode, vmCurCfgProfileEgressShapingBurst=vmCurCfgProfileEgressShapingBurst, dhcpSnoopingCurCfgVlanOnState=dhcpSnoopingCurCfgVlanOnState, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, ipNewCfgIntfRetransmitTimer=ipNewCfgIntfRetransmitTimer, ipNewCfgBootpGlobalServerTable=ipNewCfgBootpGlobalServerTable, ospfCurCfgDefaultRouteMetric=ospfCurCfgDefaultRouteMetric, mldStatBadReceiveIf=mldStatBadReceiveIf, virtCurCfgHbPort=virtCurCfgHbPort, fdbTable=fdbTable, vlanCurCfgPrVlanState=vlanCurCfgPrVlanState, intfInfoEntry=intfInfoEntry, ospfIfInfoDesignatedRouterIpAddress=ospfIfInfoDesignatedRouterIpAddress, igmpFltNewCfgPortFiltBmap=igmpFltNewCfgPortFiltBmap, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, ospf3NewCfgNbrIndex=ospf3NewCfgNbrIndex, agPortCurCfgErrDisableRecovery=agPortCurCfgErrDisableRecovery, stgNewCfgTable=stgNewCfgTable, ospfCumIntfNbrChange=ospfCumIntfNbrChange, igmpFltCurCfgTable=igmpFltCurCfgTable, ospf3CurCfgVirtIntfDead=ospf3CurCfgVirtIntfDead, ipv6icmpInBadcode=ipv6icmpInBadcode, bgpCurCfgPeerTtl=bgpCurCfgPeerTtl, ipsecSaStatsSpi=ipsecSaStatsSpi, vmapGroupNewCfgAllPortsAddVmap=vmapGroupNewCfgAllPortsAddVmap, mldStatTotalMLDGroups=mldStatTotalMLDGroups, bgpNewCfgGroupInRmapList=bgpNewCfgGroupInRmapList, agPortCurCfgTableEntry=agPortCurCfgTableEntry, ipNewCfgStaticRoute6DestIp=ipNewCfgStaticRoute6DestIp, ospf3CurCfgRangeIndex=ospf3CurCfgRangeIndex, bgpCurCfgPeerOspfState=bgpCurCfgPeerOspfState, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, serverPortsNewCfgPorts=serverPortsNewCfgPorts, fipsInfoFcfCount=fipsInfoFcfCount, vrrpCfg=vrrpCfg, mldNewInterfaceQueryInterval=mldNewInterfaceQueryInterval, ikeCurCfgIdType=ikeCurCfgIdType, ipCurCfgAlistMetric=ipCurCfgAlistMetric, icmpStatsOutErrors=icmpStatsOutErrors, ibmnosLoginAuthentication=ibmnosLoginAuthentication, tcpStatsOutSegs=tcpStatsOutSegs, ospfAreaInfoTable=ospfAreaInfoTable, ipmcNewCfgStaticRouteDestIp=ipmcNewCfgStaticRouteDestIp, lldpNewCfgTxDelay=lldpNewCfgTxDelay, vlagInfoAutoRecoveryStatus=vlagInfoAutoRecoveryStatus, bgpNewCfgPeerMetric=bgpNewCfgPeerMetric, trunkGroupInfoProtocol=trunkGroupInfoProtocol, ipNewCfgGwIpv6State=ipNewCfgGwIpv6State, ipCurCfgRmapLp=ipCurCfgRmapLp, ospfIntfNbrRstAd=ospfIntfNbrRstAd, portStatsDot1StpPortForwardTransitions=portStatsDot1StpPortForwardTransitions, ndprefixCurCfgProfileIndex=ndprefixCurCfgProfileIndex, ipsecNewCfgTxformTable=ipsecNewCfgTxformTable, ipmcNewCfgStaticRouteTrunks=ipmcNewCfgStaticRouteTrunks, cistRegionalRoot=cistRegionalRoot, ospfNbrInFullState=ospfNbrInFullState, agApplyIndex=agApplyIndex, ospf3AreaTxPkts=ospf3AreaTxPkts, oamStatsPortRemoteCriticalEvents=oamStatsPortRemoteCriticalEvents, agCurCfgMgmtNetIndex=agCurCfgMgmtNetIndex, vmapNewCfgRemarkOutprofReset=vmapNewCfgRemarkOutprofReset, swTempExceedThreshold=swTempExceedThreshold, igmpMrtrInfoEntry=igmpMrtrInfoEntry, ipInfoFwdState=ipInfoFwdState, txIgmpGenQueries=txIgmpGenQueries, portStatsPhyIfInOctets=portStatsPhyIfInOctets, vmGroupInfoIdx=vmGroupInfoIdx, ospf3CumNbrAttempt=ospf3CumNbrAttempt, aclNewCfgSrcPortMask=aclNewCfgSrcPortMask, vlagStatsPduRcvPeerInstanceEnable=vlagStatsPduRcvPeerInstanceEnable, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, ospf3NewCfgAreaDefaultMetricType=ospf3NewCfgAreaDefaultMetricType, aclCurCfgProtocol=aclCurCfgProtocol, agNewCfgResetControl=agNewCfgResetControl, vlanNewCfgPrVlanState=vlanNewCfgPrVlanState, hotlinksNewCfgTriggerTable=hotlinksNewCfgTriggerTable, vlagStatsPduSentFdbDynamicAdd=vlagStatsPduSentFdbDynamicAdd, errMldIfStatsIncCrsv2=errMldIfStatsIncCrsv2, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, bgpNewCfgGroupUpdateSrcLoopIf=bgpNewCfgGroupUpdateSrcLoopIf, portMgmtStatsTxBytes=portMgmtStatsTxBytes, igmpV3SnoopCurCfgSources=igmpV3SnoopCurCfgSources, ospfLoopIfInfoWaitIntervalMS=ospfLoopIfInfoWaitIntervalMS, ipv6InNsols=ipv6InNsols, vlagStatsPduSentPeerInstanceEnable=vlagStatsPduSentPeerInstanceEnable, ospfLsdbInfoChecksum=ospfLsdbInfoChecksum, vnicCurCfgGroupVlan=vnicCurCfgGroupVlan, ripNewCfgEospfAddOutRmap=ripNewCfgEospfAddOutRmap, mcastFdbCurCfgMac=mcastFdbCurCfgMac, aclCurCfgMeterEnable=aclCurCfgMeterEnable, vmapGroupCurCfgAllPortsGroupIdx=vmapGroupCurCfgAllPortsGroupIdx, aclCurCfgVLanMask=aclCurCfgVLanMask, virtVMwareHostVswitchTable=virtVMwareHostVswitchTable, ipsecSaInfoEncrKey=ipsecSaInfoEncrKey, portInfo=portInfo, ibmnosSfpInfoSerialNumber=ibmnosSfpInfoSerialNumber, ospf3IntfErrHelloMismatch=ospf3IntfErrHelloMismatch, trunkLacpGroupCurCfgIndex=trunkLacpGroupCurCfgIndex, vnic=vnic, mstCistNewCfgPortTableEntry=mstCistNewCfgPortTableEntry, ecpChnlStateMachine=ecpChnlStateMachine, bgpNewCfgIbgpMaxPaths=bgpNewCfgIbgpMaxPaths, ipCurCfgStaticNbrVlan=ipCurCfgStaticNbrVlan, agTacacsConfig=agTacacsConfig, lacpInfoPortActPortPrio=lacpInfoPortActPortPrio, udpMGMTControlBlocksTable=udpMGMTControlBlocksTable, icmpStatsOutAddrMaskReps=icmpStatsOutAddrMaskReps, ospfIfInfoAdminStatus=ospfIfInfoAdminStatus, ripStatInResponsePkts=ripStatInResponsePkts, agNewCfgNTPSecServerPort=agNewCfgNTPSecServerPort, radNewCfgState=radNewCfgState, bgpInfoRtrTableEntry=bgpInfoRtrTableEntry, agNewCfgTelnetAccess=agNewCfgTelnetAccess, oamInfoPortRemoteMAC=oamInfoPortRemoteMAC, mldNewInterfaceIfIndex=mldNewInterfaceIfIndex, ospf3AreaDisdPkts=ospf3AreaDisdPkts, ospf3AreaIntfLoop=ospf3AreaIntfLoop, pptNewCfgPrecedence=pptNewCfgPrecedence, ospfTmrsKckOffLsaAck=ospfTmrsKckOffLsaAck, qosCurCfgPortPriorityTable=qosCurCfgPortPriorityTable, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, fcoeStatsTable=fcoeStatsTable, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, vrrpNewCfgVirtRtrPreDelay=vrrpNewCfgVirtRtrPreDelay, trunkGroupInfoPortTableEntry=trunkGroupInfoPortTableEntry, ospf3AreaNbrFull=ospf3AreaNbrFull, traps=traps, igmpSnoopStats=igmpSnoopStats, nsnmpOutNoSuchNames=nsnmpOutNoSuchNames, ospfAreaNbrRstAd=ospfAreaNbrRstAd, accessInfoClearAllUserLocks=accessInfoClearAllUserLocks, oamStatsPortIndex=oamStatsPortIndex, vlanNewCfgStg=vlanNewCfgStg, rxIgmpValidPkts=rxIgmpValidPkts, l2GeneralCfg=l2GeneralCfg, stpLoopGuardCurCfgState=stpLoopGuardCurCfgState, agPortNewCfgOam=agPortNewCfgOam, udldInfoPortLink=udldInfoPortLink, tacNewCfgAttempts=tacNewCfgAttempts, icmpStatsInAddrMaskReps=icmpStatsInAddrMaskReps, dhcpSnoopingNewCfgVlanTableEntry=dhcpSnoopingNewCfgVlanTableEntry, vlanInfoName=vlanInfoName, vmapGroupNewCfgNonServerPortsTable=vmapGroupNewCfgNonServerPortsTable, ospf3CurCfgIntfAuthKey=ospf3CurCfgIntfAuthKey, mcastFdbEntry=mcastFdbEntry, ospf3CurCfgRangePrefixLen=ospf3CurCfgRangePrefixLen, ipCurCfgGwInterval=ipCurCfgGwInterval, bgpInfoNextHop=bgpInfoNextHop, ospf3IntfAllEvents=ospf3IntfAllEvents, mstCistNewCfgVlanBmap=mstCistNewCfgVlanBmap, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, fipsInfoFcoePort=fipsInfoFcoePort, icmpStatsOutTimestamps=icmpStatsOutTimestamps, ospfAreaErrUnknownNbr=ospfAreaErrUnknownNbr, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, agCurCfgSnmpTimeout=agCurCfgSnmpTimeout, igmpClearVlanStats=igmpClearVlanStats, portInfoTable=portInfoTable, ospfCurCfgIntfTrans=ospfCurCfgIntfTrans, allportsStatsInOctets=allportsStatsInOctets, mcastFdbMacAddr=mcastFdbMacAddr, ipCurCfgGwState=ipCurCfgGwState, routeStatHighWater=routeStatHighWater, ospfIfInfoWaitIntervalMS=ospfIfInfoWaitIntervalMS, agCfgDump=agCfgDump, bgpInfoSummaryTotalSentPackets=bgpInfoSummaryTotalSentPackets, agCurCfgSyslogTrapLldp=agCurCfgSyslogTrapLldp, ripCurCfgEospfMetric=ripCurCfgEospfMetric, thash=thash, swECMPGatewayUp=swECMPGatewayUp, hotlinksInfoTriggerName=hotlinksInfoTriggerName, ospfCurCfgVirtIntfHello=ospfCurCfgVirtIntfHello, dhcpSnoopingNewCfgportId=dhcpSnoopingNewCfgportId, bgpInfoMask=bgpInfoMask, vlagStatsPduRcvRoleElection=vlagStatsPduRcvRoleElection, ipv6InAddrerrs=ipv6InAddrerrs, ospf3CumTxlsAcks=ospf3CumTxlsAcks, ipNewCfgStaticNbrMAC=ipNewCfgStaticNbrMAC, ospfNewCfgIntfCost=ospfNewCfgIntfCost, agVMGroupInfo=agVMGroupInfo, ipv6icmpInAdminProhib=ipv6icmpInAdminProhib, fdbCurCfgStaticTable=fdbCurCfgStaticTable, ospf3AreaNbrAllEvents=ospf3AreaNbrAllEvents, ospf3NewCfgIntfAuthKey=ospf3NewCfgIntfAuthKey, bgpCurCfgGroupDefaultAction=bgpCurCfgGroupDefaultAction, vnicNewCfgVnicBw=vnicNewCfgVnicBw, ipEcmpHashRouteNumber=ipEcmpHashRouteNumber, mldNewInterfaceState=mldNewInterfaceState, lacpInfoPortActAdActiv=lacpInfoPortActAdActiv, remotePort=remotePort, ospf3AreaErrBadNeighbour=ospf3AreaErrBadNeighbour, ospf3NewCfgIntfInstId=ospf3NewCfgIntfInstId, errMldIfStatsMLDv1Done=errMldIfStatsMLDv1Done, ipNewCfgSecIntfAnycast=ipNewCfgSecIntfAnycast, agNewBootProfile=agNewBootProfile, fcoeStats=fcoeStats, agNewCfgSyslogTrapLldp=agNewCfgSyslogTrapLldp, udpMGMTTableEntry=udpMGMTTableEntry, portStatsPhyIfInDiscards=portStatsPhyIfInDiscards, bgpNewCfgGroupAddInRmap=bgpNewCfgGroupAddInRmap, igmpStaticMrtrCfg=igmpStaticMrtrCfg, ripNewCfgStaticMetric=ripNewCfgStaticMetric, ipNewCfgAlistNwf=ipNewCfgAlistNwf, tacCurCfgSecPorttoUse=tacCurCfgSecPorttoUse, swHotlinksMasterUp=swHotlinksMasterUp, stgNewCfgState=stgNewCfgState, ripGeneral=ripGeneral, ipNewCfgIntfAdvInterval=ipNewCfgIntfAdvInterval, ipv6icmpOutMsgs=ipv6icmpOutMsgs)
mibBuilder.exportSymbols("IBM-GbTOR-10G-L2L3-MIB", agNewBootNxtCliMode=agNewBootNxtCliMode, agPortNewCfgTableEntry=agPortNewCfgTableEntry, hotlinksInfo=hotlinksInfo, mcastFdbNewCfgPorts=mcastFdbNewCfgPorts, ipNewCfgGwDelete=ipNewCfgGwDelete, vlagInfoAutoRecoveryInterval=vlagInfoAutoRecoveryInterval, ospfIntfErrOptionsMismatch=ospfIntfErrOptionsMismatch, aclNewCfgProtocol=aclNewCfgProtocol, mcastFdbNewCfgEntry=mcastFdbNewCfgEntry, vmNewCfgCheck=vmNewCfgCheck, agCurCfgHttpServerPort=agCurCfgHttpServerPort, ospfNewCfgAreaDelete=ospfNewCfgAreaDelete, lldpInfoPortAlias=lldpInfoPortAlias, swCistTopologyChanged=swCistTopologyChanged, ospfCurCfgIntfPrio=ospfCurCfgIntfPrio, ndprefixTableMaxSize=ndprefixTableMaxSize, lldpNewCfgState=lldpNewCfgState, sfpInfoTXFault=sfpInfoTXFault, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, ospfGeneralStats=ospfGeneralStats, agCurCfgCpuRateLimitArp=agCurCfgCpuRateLimitArp, ipNewCfgStaticNbrTable=ipNewCfgStaticNbrTable, ospfCumTxlsReqs=ospfCumTxlsReqs, ipCurCfgSecIntfAnycast=ipCurCfgSecIntfAnycast, ospfIntfErrDeadMismatch=ospfIntfErrDeadMismatch, agCurCfgTelnetAccess=agCurCfgTelnetAccess, ospfCumTxHello=ospfCumTxHello, ospf3IntfErrIndex=ospf3IntfErrIndex, ospfNewCfgAreaEntry=ospfNewCfgAreaEntry, mcastFdbNewCfgAddVlan=mcastFdbNewCfgAddVlan, ipNewCfgAlistRmapIndex=ipNewCfgAlistRmapIndex, bgpNewCfgPeerRemoteAddr=bgpNewCfgPeerRemoteAddr, stgNewCfgBrgHelloTime=stgNewCfgBrgHelloTime, stpInfoPortState=stpInfoPortState, ripNewCfgIntfKey=ripNewCfgIntfKey, ospf3IntfRxlsReqs=ospf3IntfRxlsReqs, vmapNewCfgUser=vmapNewCfgUser, agCurCfgSyslogTrapIgmpMrouter=agCurCfgSyslogTrapIgmpMrouter, ipNewCfgIntfState=ipNewCfgIntfState, ospfLsdbInfoTable=ospfLsdbInfoTable, ospf3IntfRxHello=ospf3IntfRxHello, ospfTmrsKckOffLsaLock=ospfTmrsKckOffLsaLock, agNewCfgLoginNotice=agNewCfgLoginNotice, tcpStatsEstabResets=tcpStatsEstabResets, vlagNewCfgStartupDelayInterval=vlagNewCfgStartupDelayInterval, hotlinksCurCfgTriggerDelete=hotlinksCurCfgTriggerDelete, ipInfoFwdDirectedBcast=ipInfoFwdDirectedBcast, ipNewCfgIntfMask=ipNewCfgIntfMask, ospf3NewCfgHostTable=ospf3NewCfgHostTable, vmNewCfgProfileShapingPeak=vmNewCfgProfileShapingPeak, ibmnosSfpInfoTableEntry=ibmnosSfpInfoTableEntry, ospfAreaRxlsUpdates=ospfAreaRxlsUpdates, memoryBufferStats=memoryBufferStats, portInfoPhyIfLastChange=portInfoPhyIfLastChange, vlagStatsPdu=vlagStatsPdu, fipsInfoVlansCreator=fipsInfoVlansCreator, acl=acl, ripNewCfgFixedOutRmapList=ripNewCfgFixedOutRmapList, virtCurCfgVMwareHelloEnable=virtCurCfgVMwareHelloEnable, fdbEntry=fdbEntry, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, ipCurCfgGwTable=ipCurCfgGwTable, vnicNewCfgGroupAddTrunk=vnicNewCfgGroupAddTrunk, bgpCurCfgPeerState=bgpCurCfgPeerState, vnicNewCfgGroupRemVnic=vnicNewCfgGroupRemVnic, allportsStatsOutDiscardsRate=allportsStatsOutDiscardsRate, igmpNewQurCfgEntry=igmpNewQurCfgEntry, hotlinksCurCfgTriggerTableEntry=hotlinksCurCfgTriggerTableEntry, ibmnosSoftwareVersion=ibmnosSoftwareVersion, vmNewCfgCheckAclsMax=vmNewCfgCheckAclsMax, vmbwNewCfgTxRate=vmbwNewCfgTxRate, ospf3AreaInfoNeighborsFULLstate=ospf3AreaInfoNeighborsFULLstate, tcpStatsOutRsts=tcpStatsOutRsts, ospf3CumIntfDown=ospf3CumIntfDown, fipsInfoPortIndex=fipsInfoPortIndex, bgpCurCfgAggrMask=bgpCurCfgAggrMask, igmpCurQurCfgEntry=igmpCurQurCfgEntry, icmpStatsOutSrcQuenchs=icmpStatsOutSrcQuenchs, ripStatOutResponsePkts=ripStatOutResponsePkts, vmapGroupNewCfgNonServerPortsVmapBitmap=vmapGroupNewCfgNonServerPortsVmapBitmap, tcpClearStats=tcpClearStats, allportsStatsInUcastRate=allportsStatsInUcastRate, ipsecNewCfgManualPolicyTable=ipsecNewCfgManualPolicyTable, ldapNewCfgSecPorttoUse=ldapNewCfgSecPorttoUse, vlagStatsPduSentUnknown=vlagStatsPduSentUnknown, ikeCurCfgPskRemoteTable=ikeCurCfgPskRemoteTable, bgpCurCfgAggrState=bgpCurCfgAggrState, bgpNewCfgGroupRASEntry=bgpNewCfgGroupRASEntry, hwSerialNum=hwSerialNum, agCurCfgSyslog2HostPort=agCurCfgSyslog2HostPort, ipNewCfgRmapMetricType=ipNewCfgRmapMetricType, ipNewCfgBootpAddr2=ipNewCfgBootpAddr2, portOperIdx=portOperIdx, bgpCurCfgGroupUpdateSrcIf=bgpCurCfgGroupUpdateSrcIf, ntpPrimaryServerRespRcvd=ntpPrimaryServerRespRcvd, ipCurCfgNwfEntry=ipCurCfgNwfEntry, ipCurCfgAlistIndex=ipCurCfgAlistIndex, swPrimaryPowerSupplyFailureNotify=swPrimaryPowerSupplyFailureNotify, virtNewCfgVirtCenterDelete=virtNewCfgVirtCenterDelete, bgpCurCfgGroupStaticState=bgpCurCfgGroupStaticState, virtCurCfgVirtCenterUser=virtCurCfgVirtCenterUser, portStatsPhyIfOutMulticastPkts=portStatsPhyIfOutMulticastPkts, ipCurCfgStaticRoute6Mask=ipCurCfgStaticRoute6Mask, virtCurCfgState=virtCurCfgState, vnicCurCfgVnicTable=vnicCurCfgVnicTable, aclNewCfgStatistics=aclNewCfgStatistics, rxIgmpV3CurrentStateRecords=rxIgmpV3CurrentStateRecords, layer3Configs=layer3Configs, ospf3CurCfgIntfEncryKey=ospf3CurCfgIntfEncryKey, ibmnosSfpInfoTable=ibmnosSfpInfoTable, acl6NewCfgInprofDscp=acl6NewCfgInprofDscp, virtCurCfgVirtCenterSSLAuth=virtCurCfgVirtCenterSSLAuth, ospf3IntfDisdlsAcks=ospf3IntfDisdlsAcks, ospfStats=ospfStats)
