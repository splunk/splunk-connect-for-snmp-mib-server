#
# PySNMP MIB module NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ntntechInterfaceModule, NtnDisplayString = mibBuilder.importSymbols("NTNTECH-ROOT-MIB", "ntntechInterfaceModule", "NtnDisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, Unsigned32, Gauge32, NotificationType, TimeTicks, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Unsigned32", "Gauge32", "NotificationType", "TimeTicks", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter32", "ModuleIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ntntechInterfaceModuleConfigurationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1))
ntntechInterfaceModuleConfigurationMIB.setRevisions(('1902-08-06 11:50', '1902-08-28 10:23', '1902-10-11 09:40', '1902-10-22 02:00', '1903-09-30 10:59', '1904-10-11 09:32', '1904-11-17 10:59',))
if mibBuilder.loadTexts: ntntechInterfaceModuleConfigurationMIB.setLastUpdated('0411171059Z')
if mibBuilder.loadTexts: ntntechInterfaceModuleConfigurationMIB.setOrganization('Paradyne Corporation')
ifModCfgMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1))
ifModCfgParameterConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1))
prmCfgInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 1))
prmCfgInterfacePort = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2))
ifCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ifCfgPortTable.setStatus('current')
ifCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgSlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgPortIndex"))
if mibBuilder.loadTexts: ifCfgPortEntry.setStatus('current')
ifCfgSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgSlotIndex.setStatus('current')
ifCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgPortIndex.setStatus('current')
ifCfgPortCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortCircuitID.setStatus('current')
ifCfgPortFltrIp1Start = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortFltrIp1Start.setStatus('current')
ifCfgPortFltrIp1End = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortFltrIp1End.setStatus('current')
ifCfgPortFltrIp2Start = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortFltrIp2Start.setStatus('current')
ifCfgPortFltrIp2End = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortFltrIp2End.setStatus('current')
ifCfgPortBackboneVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4085))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortBackboneVlan.setStatus('current')
ifCfgPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortVlanPriority.setStatus('current')
ifCfgPortFloodMde = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uplFlood", 1), ("vlnFlood", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortFloodMde.setStatus('current')
ifCfgPortIpFltProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protocolALL", 1), ("protocolIP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortIpFltProtocol.setStatus('current')
ifCfgPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortReset.setStatus('current')
ifCfgPortBkBoneEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethtype8100", 1), ("ethtype9100", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortBkBoneEthType.setStatus('current')
ifCfgPortVLANTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ifCfgPortVLANTable.setStatus('current')
ifCfgPortVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgIfSlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgIfPortIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgVLANIndex"))
if mibBuilder.loadTexts: ifCfgPortVLANEntry.setStatus('current')
ifCfgIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgIfSlotIndex.setStatus('current')
ifCfgIfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgIfPortIndex.setStatus('current')
ifCfgVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgVLANIndex.setStatus('current')
ifCfgVLANIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4085))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgVLANIdStart.setStatus('current')
ifCfgVLANIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4085))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgVLANIdEnd.setStatus('current')
ifCfgPortAdslTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: ifCfgPortAdslTable.setStatus('current')
ifCfgPortAdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgAdslSlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgAdslPortIndex"))
if mibBuilder.loadTexts: ifCfgPortAdslEntry.setStatus('current')
ifCfgAdslSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgAdslSlotIndex.setStatus('current')
ifCfgAdslPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgAdslPortIndex.setStatus('current')
ifCfgPortAdslPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("adaptive", 3), ("fixedadaptive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslPortMode.setStatus('current')
ifCfgPortAdslVpiVciDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslVpiVciDetect.setStatus('current')
ifCfgPortAdslRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslRxRate.setStatus('current')
ifCfgPortAdslTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 252))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslTxRate.setStatus('current')
ifCfgPortAdslFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frameType1483LLC", 1), ("frameType1483VCM", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslFrameType.setStatus('current')
ifCfgPortAdslVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslVpi.setStatus('current')
ifCfgPortAdslVci = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslVci.setStatus('current')
ifCfgPortAdslStandardMde = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("t1413", 1), ("gLite", 2), ("gDMT", 3), ("multiMode", 4), ("aLCATEL", 5), ("gDMT-BIS", 6), ("gDMT-BISplus", 7), ("gDMT-BIS-Annex-L", 8), ("gDMT-BIS-Annex-M", 9), ("stdMdeNoLink", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslStandardMde.setStatus('current')
ifCfgPortAdslCorrectionUp = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("corr125us", 1), ("corr250us", 2), ("corr500us", 3), ("corr1ms", 4), ("corr2ms", 5), ("corr4ms", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslCorrectionUp.setStatus('current')
ifCfgPortAdslCorrectionDn = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("corr125us", 1), ("corr250us", 2), ("corr500us", 3), ("corr1ms", 4), ("corr2ms", 5), ("corr4ms", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslCorrectionDn.setStatus('current')
ifCfgPortAdslDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("delay1ms", 1), ("delay2ms", 2), ("delay4ms", 3), ("delay8ms", 4), ("delay16ms", 5), ("delay32ms", 6), ("delay64ms", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslDelayUp.setStatus('current')
ifCfgPortAdslDelayDn = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("delay1ms", 1), ("delay2ms", 2), ("delay4ms", 3), ("delay8ms", 4), ("delay16ms", 5), ("delay32ms", 6), ("delay64ms", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslDelayDn.setStatus('current')
ifCfgPortAdslEcFdm = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ec", 1), ("fdm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslEcFdm.setStatus('current')
ifCfgPortAdslFastBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslFastBuffer.setStatus('current')
ifCfgPortAdslSnrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslSnrUp.setStatus('current')
ifCfgPortAdslSnrDn = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortAdslSnrDn.setStatus('current')
ifCfgPortAdslActualRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgPortAdslActualRxRate.setStatus('current')
ifCfgPortAdslActualTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgPortAdslActualTxRate.setStatus('current')
ifCfgPortAdslActualStandardMde = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("t1413", 1), ("gLite", 2), ("gDMT", 3), ("multiMode", 4), ("aLCATEL", 5), ("gDMT-BIS", 6), ("gDMT-BISplus", 7), ("gDMT-BIS-Annex-L", 8), ("gDMT-BIS-Annex-M", 9), ("stdMdeNoLink", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgPortAdslActualStandardMde.setStatus('current')
ifCfgPortAdslActualDepthUp = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgPortAdslActualDepthUp.setStatus('current')
ifCfgPortAdslActualDepthDn = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgPortAdslActualDepthDn.setStatus('current')
ifCfgPortIdslTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: ifCfgPortIdslTable.setStatus('current')
ifCfgPortIdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgIdslSlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgIdslPortIndex"))
if mibBuilder.loadTexts: ifCfgPortIdslEntry.setStatus('current')
ifCfgIdslSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgIdslSlotIndex.setStatus('current')
ifCfgIdslPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgIdslPortIndex.setStatus('current')
ifCfgPortIdslRxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("idslRxTxRateDefect", 0), ("idslRxTxRate128", 1), ("idslRxTxRate144", 2), ("idslRxTxRateOff", 255)))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortIdslRxTxRate.setStatus('current')
ifCfgPortSdslTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 5), )
if mibBuilder.loadTexts: ifCfgPortSdslTable.setStatus('current')
ifCfgPortSdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 5, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgSdslSlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgSdslPortIndex"))
if mibBuilder.loadTexts: ifCfgPortSdslEntry.setStatus('current')
ifCfgSdslSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgSdslSlotIndex.setStatus('current')
ifCfgSdslPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgSdslPortIndex.setStatus('current')
ifCfgPortSdslRxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 255))).clone(namedValues=NamedValues(("sdslRxTxRateDefect", 0), ("sdslRxTxRate144", 1), ("sdslRxTxRate272", 2), ("sdslRxTxRate400", 3), ("sdslRxTxRate528", 4), ("sdslRxTxRate784", 5), ("sdslRxTxRate1040", 6), ("sdslRxTxRate1168", 7), ("sdslRxTxRate1552", 8), ("sdslRxTxRate2064", 9), ("sdslRxTxRate2320", 10), ("sdslRxTxRateOff", 255)))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortSdslRxTxRate.setStatus('current')
ifCfgPortSdslLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lineCodeCap", 1), ("lineCode2B1Q", 2), ("lineCodeGSHDSL", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortSdslLineCode.setStatus('current')
ifCfgPortT1Table = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6), )
if mibBuilder.loadTexts: ifCfgPortT1Table.setStatus('current')
ifCfgPortT1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgT1SlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgT1PortIndex"))
if mibBuilder.loadTexts: ifCfgPortT1Entry.setStatus('current')
ifCfgT1SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgT1SlotIndex.setStatus('current')
ifCfgT1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgT1PortIndex.setStatus('current')
ifCfgPortT1RxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("t1RxTxRateDefect", 0), ("t1RxTxRate192", 1), ("t1RxTxRate384", 2), ("t1RxTxRate576", 3), ("t1RxTxRate768", 4), ("t1RxTxRate960", 5), ("t1RxTxRate1152", 6), ("t1RxTxRate1344", 7), ("t1RxTxRate1536", 8), ("t1RxTxRateOff", 255)))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortT1RxTxRate.setStatus('current')
ifCfgPortT1FrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1frameTypeESF", 1), ("t1frameTypeSFD4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortT1FrameType.setStatus('current')
ifCfgPortT1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1lineCodeB8ZS", 1), ("t1lineCodeAMI", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortT1LineCode.setStatus('current')
ifCfgPortT1TxBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1TxBuildOut0db", 1), ("t1TxBuildOutN7p5db", 2), ("t1TxBuildOutN15db", 3), ("t1TxBuildOutN22db", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortT1TxBuildOut.setStatus('current')
ifCfgPortT1ClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1ClockSrcLocal", 1), ("t1ClockSrcLoop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortT1ClockSrc.setStatus('current')
ifCfgPortE1Table = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7), )
if mibBuilder.loadTexts: ifCfgPortE1Table.setStatus('current')
ifCfgPortE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgE1SlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", "ifCfgE1PortIndex"))
if mibBuilder.loadTexts: ifCfgPortE1Entry.setStatus('current')
ifCfgE1SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgE1SlotIndex.setStatus('current')
ifCfgE1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCfgE1PortIndex.setStatus('current')
ifCfgPortE1RxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("e1RxTxRateDefect", 0), ("e1RxTxRate256", 1), ("e1RxTxRate512", 2), ("e1RxTxRate768", 3), ("e1RxTxRate1024", 4), ("e1RxTxRate1280", 5), ("e1RxTxRate1536", 6), ("e1RxTxRate1792", 7), ("e1RxTxRate1984", 8), ("e1RxTxRateOff", 255)))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortE1RxTxRate.setStatus('current')
ifCfgPortE1FrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e1frameTypeCRC", 1), ("e1frameTypeNoCRC", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortE1FrameType.setStatus('current')
ifCfgPortE1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e1lineCodeHDB3", 1), ("e1lineCodeAMI", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortE1LineCode.setStatus('current')
ifCfgPortE1ClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 1, 1, 1, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e1ClockSrcLocal", 1), ("e1ClockSrcLoop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifCfgPortE1ClockSrc.setStatus('current')
mibBuilder.exportSymbols("NTNTECH-INTERFACE-MODULE-CONFIGURATION-MIB", ifCfgSlotIndex=ifCfgSlotIndex, ifCfgPortIpFltProtocol=ifCfgPortIpFltProtocol, ifCfgPortAdslVpi=ifCfgPortAdslVpi, ifCfgVLANIndex=ifCfgVLANIndex, ifCfgPortFloodMde=ifCfgPortFloodMde, ifCfgPortE1FrameType=ifCfgPortE1FrameType, ifCfgPortAdslVci=ifCfgPortAdslVci, ifModCfgMIBObjects=ifModCfgMIBObjects, ifCfgPortIdslRxTxRate=ifCfgPortIdslRxTxRate, ifCfgPortAdslActualDepthDn=ifCfgPortAdslActualDepthDn, ifCfgPortAdslEcFdm=ifCfgPortAdslEcFdm, ifCfgPortT1FrameType=ifCfgPortT1FrameType, ifCfgPortIndex=ifCfgPortIndex, ifCfgPortVLANEntry=ifCfgPortVLANEntry, ifCfgPortVlanPriority=ifCfgPortVlanPriority, ifCfgT1SlotIndex=ifCfgT1SlotIndex, ifCfgPortAdslPortMode=ifCfgPortAdslPortMode, ifCfgPortE1ClockSrc=ifCfgPortE1ClockSrc, ifCfgPortAdslVpiVciDetect=ifCfgPortAdslVpiVciDetect, ifCfgPortT1Table=ifCfgPortT1Table, ifCfgPortTable=ifCfgPortTable, ifCfgPortAdslDelayUp=ifCfgPortAdslDelayUp, ifCfgVLANIdEnd=ifCfgVLANIdEnd, ifCfgE1SlotIndex=ifCfgE1SlotIndex, ifCfgT1PortIndex=ifCfgT1PortIndex, ifCfgPortFltrIp2End=ifCfgPortFltrIp2End, ifCfgPortAdslTable=ifCfgPortAdslTable, ifCfgPortE1RxTxRate=ifCfgPortE1RxTxRate, ifCfgPortAdslFrameType=ifCfgPortAdslFrameType, ifCfgPortEntry=ifCfgPortEntry, ifCfgPortAdslRxRate=ifCfgPortAdslRxRate, PYSNMP_MODULE_ID=ntntechInterfaceModuleConfigurationMIB, ifModCfgParameterConfiguration=ifModCfgParameterConfiguration, ifCfgPortFltrIp1End=ifCfgPortFltrIp1End, ifCfgPortT1RxTxRate=ifCfgPortT1RxTxRate, ifCfgPortAdslCorrectionUp=ifCfgPortAdslCorrectionUp, ifCfgIdslSlotIndex=ifCfgIdslSlotIndex, ifCfgPortAdslActualStandardMde=ifCfgPortAdslActualStandardMde, ifCfgPortSdslRxTxRate=ifCfgPortSdslRxTxRate, ifCfgAdslPortIndex=ifCfgAdslPortIndex, ifCfgPortE1Table=ifCfgPortE1Table, ifCfgPortIdslTable=ifCfgPortIdslTable, ifCfgPortVLANTable=ifCfgPortVLANTable, prmCfgInterfacePort=prmCfgInterfacePort, ifCfgPortFltrIp1Start=ifCfgPortFltrIp1Start, ifCfgPortAdslTxRate=ifCfgPortAdslTxRate, ifCfgPortAdslEntry=ifCfgPortAdslEntry, ifCfgVLANIdStart=ifCfgVLANIdStart, ifCfgPortFltrIp2Start=ifCfgPortFltrIp2Start, ifCfgIfSlotIndex=ifCfgIfSlotIndex, ifCfgPortAdslActualTxRate=ifCfgPortAdslActualTxRate, ifCfgPortE1Entry=ifCfgPortE1Entry, ifCfgPortAdslSnrDn=ifCfgPortAdslSnrDn, ifCfgPortBackboneVlan=ifCfgPortBackboneVlan, ifCfgPortAdslFastBuffer=ifCfgPortAdslFastBuffer, prmCfgInterface=prmCfgInterface, ifCfgPortAdslActualDepthUp=ifCfgPortAdslActualDepthUp, ifCfgPortAdslDelayDn=ifCfgPortAdslDelayDn, ifCfgPortAdslSnrUp=ifCfgPortAdslSnrUp, ifCfgPortE1LineCode=ifCfgPortE1LineCode, ifCfgPortBkBoneEthType=ifCfgPortBkBoneEthType, ifCfgPortT1ClockSrc=ifCfgPortT1ClockSrc, ifCfgIfPortIndex=ifCfgIfPortIndex, ifCfgPortAdslActualRxRate=ifCfgPortAdslActualRxRate, ifCfgPortSdslLineCode=ifCfgPortSdslLineCode, ifCfgPortReset=ifCfgPortReset, ifCfgSdslPortIndex=ifCfgSdslPortIndex, ifCfgIdslPortIndex=ifCfgIdslPortIndex, ifCfgPortAdslStandardMde=ifCfgPortAdslStandardMde, ifCfgPortT1Entry=ifCfgPortT1Entry, ifCfgPortT1TxBuildOut=ifCfgPortT1TxBuildOut, ifCfgPortAdslCorrectionDn=ifCfgPortAdslCorrectionDn, ifCfgPortCircuitID=ifCfgPortCircuitID, ifCfgPortSdslTable=ifCfgPortSdslTable, ntntechInterfaceModuleConfigurationMIB=ntntechInterfaceModuleConfigurationMIB, ifCfgPortT1LineCode=ifCfgPortT1LineCode, ifCfgPortSdslEntry=ifCfgPortSdslEntry, ifCfgE1PortIndex=ifCfgE1PortIndex, ifCfgPortIdslEntry=ifCfgPortIdslEntry, ifCfgSdslSlotIndex=ifCfgSdslSlotIndex, ifCfgAdslSlotIndex=ifCfgAdslSlotIndex)
