#
# PySNMP MIB module RADLAN-QCN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-QCN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:40:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
rnd, Percents = mibBuilder.importSymbols("RADLAN-MIB", "rnd", "Percents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, Unsigned32, iso, Bits, ObjectIdentity, TimeTicks, ModuleIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Unsigned32", "iso", "Bits", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Gauge32")
RowStatus, DisplayString, TextualConvention, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue", "RowPointer")
rlQcnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 202))
if mibBuilder.loadTexts: rlQcnMib.setLastUpdated('201003210000A')
if mibBuilder.loadTexts: rlQcnMib.setOrganization('Marvell Computer Communications Ltd.')
rlQcnFeatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnFeatureStatus.setStatus('current')
rlQcnPriorityStateTable = MibTable((1, 3, 6, 1, 4, 1, 89, 202, 2), )
if mibBuilder.loadTexts: rlQcnPriorityStateTable.setStatus('current')
rlQcnPriorityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 202, 2, 1), ).setIndexNames((0, "RADLAN-QCN-MIB", "rlQcnPriorityStatePriority"))
if mibBuilder.loadTexts: rlQcnPriorityStateEntry.setStatus('current')
rlQcnPriorityStatePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: rlQcnPriorityStatePriority.setStatus('current')
rlQcnPriorityAdminStateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnPriorityAdminStateEnable.setStatus('current')
rlQcnPriorityOperStateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQcnPriorityOperStateEnable.setStatus('current')
rlQcnPriorityAdminStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("queue0", 2), ("sharedQueue", 3))).clone('ok')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQcnPriorityAdminStateReason.setStatus('current')
rlQcnPriorityStateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnPriorityStateStatus.setStatus('current')
rlQcnIfStateTable = MibTable((1, 3, 6, 1, 4, 1, 89, 202, 3), )
if mibBuilder.loadTexts: rlQcnIfStateTable.setStatus('current')
rlQcnIfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 202, 3, 1), ).setIndexNames((0, "RADLAN-QCN-MIB", "rlQcnIfStateIfIndex"))
if mibBuilder.loadTexts: rlQcnIfStateEntry.setStatus('current')
rlQcnIfStateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQcnIfStateIfIndex.setStatus('current')
rlQcnIfStateCpCreationEn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnIfStateCpCreationEn.setStatus('current')
rlQcnIfStateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnIfStateStatus.setStatus('current')
rlQcnCmnPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCmnPriority.setStatus('current')
rlQcnCpPfcSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 5), Integer32().clone(26112)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpPfcSetPoint.setStatus('obsolete')
rlQcnCpNonPfcSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 6), Integer32().clone(26112)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpNonPfcSetPoint.setStatus('obsolete')
rlQcnCpFeedbackWeight = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpFeedbackWeight.setStatus('current')
rlQcnCpMinSampleBase = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 8), Integer32().clone(150000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpMinSampleBase.setStatus('current')
rlQcnCpSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 9), Integer32().clone(26112)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpSetPoint.setStatus('current')
mibBuilder.exportSymbols("RADLAN-QCN-MIB", rlQcnCpMinSampleBase=rlQcnCpMinSampleBase, rlQcnCmnPriority=rlQcnCmnPriority, rlQcnIfStateStatus=rlQcnIfStateStatus, rlQcnPriorityAdminStateEnable=rlQcnPriorityAdminStateEnable, rlQcnCpFeedbackWeight=rlQcnCpFeedbackWeight, rlQcnPriorityAdminStateReason=rlQcnPriorityAdminStateReason, rlQcnFeatureStatus=rlQcnFeatureStatus, rlQcnPriorityStateTable=rlQcnPriorityStateTable, rlQcnMib=rlQcnMib, rlQcnCpPfcSetPoint=rlQcnCpPfcSetPoint, rlQcnPriorityStatePriority=rlQcnPriorityStatePriority, rlQcnPriorityStateEntry=rlQcnPriorityStateEntry, rlQcnIfStateTable=rlQcnIfStateTable, rlQcnCpSetPoint=rlQcnCpSetPoint, rlQcnPriorityOperStateEnable=rlQcnPriorityOperStateEnable, rlQcnIfStateEntry=rlQcnIfStateEntry, rlQcnPriorityStateStatus=rlQcnPriorityStateStatus, rlQcnCpNonPfcSetPoint=rlQcnCpNonPfcSetPoint, PYSNMP_MODULE_ID=rlQcnMib, rlQcnIfStateIfIndex=rlQcnIfStateIfIndex, rlQcnIfStateCpCreationEn=rlQcnIfStateCpCreationEn)
