#
# PySNMP MIB module TOS-IDS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TOS-IDS
# Produced by pysmi-0.3.4 at Mon Apr 29 21:16:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Counter64, MibIdentifier, Integer32, Gauge32, Bits, ObjectIdentity, Gauge, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, NotificationType, Opaque, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter64", "MibIdentifier", "Integer32", "Gauge32", "Bits", "ObjectIdentity", "Gauge", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "NotificationType", "Opaque", "IpAddress")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
tosMib, = mibBuilder.importSymbols("TOS-SMI", "tosMib")
tosIDS = ModuleIdentity((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11))
tosIDS.setRevisions(('1970-01-01 00:00', '1970-01-01 00:00',))
if mibBuilder.loadTexts: tosIDS.setLastUpdated('08-03-14')
if mibBuilder.loadTexts: tosIDS.setOrganization('TOPSEC')
idsTotal = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsTotal.setStatus('current')
idsIpoption = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsIpoption.setStatus('current')
idsIpprotocol = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsIpprotocol.setStatus('current')
idsPort = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsPort.setStatus('current')
idsTcpscan = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsTcpscan.setStatus('current')
idsWinnuke = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsWinnuke.setStatus('current')
idsIcmpContent = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsIcmpContent.setStatus('current')
idsSmurf = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsSmurf.setStatus('current')
idsLand = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsLand.setStatus('current')
idsPingofdeath = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsPingofdeath.setStatus('current')
idsTeardrop = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsTeardrop.setStatus('current')
idsTarga3 = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsTarga3.setStatus('current')
idsIpspoof = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsIpspoof.setStatus('current')
idsPortscan = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsPortscan.setStatus('current')
idsSynflood = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsSynflood.setStatus('current')
idsUdpflood = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsUdpflood.setStatus('current')
idsIcmpflood = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsIcmpflood.setStatus('current')
idsIpsweep = MibScalar((1, 3, 6, 1, 4, 1, 14331, 5, 5, 1, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsIpsweep.setStatus('current')
mibBuilder.exportSymbols("TOS-IDS", PYSNMP_MODULE_ID=tosIDS, idsSynflood=idsSynflood, idsIpsweep=idsIpsweep, idsPortscan=idsPortscan, idsTeardrop=idsTeardrop, idsPingofdeath=idsPingofdeath, idsIcmpContent=idsIcmpContent, idsIcmpflood=idsIcmpflood, idsIpoption=idsIpoption, idsWinnuke=idsWinnuke, idsTotal=idsTotal, idsTcpscan=idsTcpscan, idsTarga3=idsTarga3, idsPort=idsPort, idsSmurf=idsSmurf, tosIDS=tosIDS, idsUdpflood=idsUdpflood, idsLand=idsLand, idsIpspoof=idsIpspoof, idsIpprotocol=idsIpprotocol)
