#
# PySNMP MIB module ADTRAN-AOS-MUX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-AOS-MUX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adGenAOSConformance, adGenAOSCommon = mibBuilder.importSymbols("ADTRAN-AOS", "adGenAOSConformance", "adGenAOSCommon")
adIdentity, = mibBuilder.importSymbols("ADTRAN-MIB", "adIdentity")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, MibIdentifier, Counter32, Integer32, Gauge32, Unsigned32, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Bits, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Counter32", "Integer32", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Bits", "ObjectIdentity", "NotificationType")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
adGenAOSMuxID = ModuleIdentity((1, 3, 6, 1, 4, 1, 664, 6, 10000, 53, 1, 5))
if mibBuilder.loadTexts: adGenAOSMuxID.setLastUpdated('200410150000Z')
if mibBuilder.loadTexts: adGenAOSMuxID.setOrganization('ADTRAN, Inc.')
adGenAOSMux = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5))
adGenAOSXConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1))
adGenAOSTdmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2))
adGenAOSMuxConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 99))
adGenAOSMuxCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 99, 1))
adGenAOSMuxMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 99, 2))
adGenAOSXConnectTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1), )
if mibBuilder.loadTexts: adGenAOSXConnectTable.setStatus('current')
adGenAOSXConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectIndex"))
if mibBuilder.loadTexts: adGenAOSXConnectEntry.setStatus('current')
adGenAOSXConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectIndex.setStatus('current')
adGenAOSXConnectFirstIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAssigned", 0), ("dds", 1), ("t1E1", 2), ("eth", 3), ("serial", 4), ("shdsl", 5), ("fxs", 6), ("frameRelay", 7), ("ppp", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectFirstIfType.setStatus('current')
adGenAOSXConnectFirstIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectFirstIfNumber.setStatus('current')
adGenAOSXConnectFirstSubIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1007))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectFirstSubIfNumber.setStatus('current')
adGenAOSXConnectFirstIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectFirstIfSlot.setStatus('current')
adGenAOSXConnectFirstIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectFirstIfPort.setStatus('current')
adGenAOSXConnectFirstTdmGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectFirstTdmGroup.setStatus('current')
adGenAOSXConnectFirstTdmGroupDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectFirstTdmGroupDS0.setStatus('current')
adGenAOSXConnectSecondIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAssigned", 0), ("dds", 1), ("t1E1", 2), ("eth", 3), ("serial", 4), ("shdsl", 5), ("fxs", 6), ("frameRelay", 7), ("ppp", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectSecondIfType.setStatus('current')
adGenAOSXConnectSecondIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectSecondIfNumber.setStatus('current')
adGenAOSXConnectSecondSubIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1007))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectSecondSubIfNumber.setStatus('current')
adGenAOSXConnectSecondIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectSecondIfSlot.setStatus('current')
adGenAOSXConnectSecondIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectSecondIfPort.setStatus('current')
adGenAOSXConnectSecondTdmGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectSecondTdmGroup.setStatus('current')
adGenAOSXConnectSecondTdmGroupDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectSecondTdmGroupDS0.setStatus('current')
adGenAOSXConnectPreserveRbs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectPreserveRbs.setStatus('current')
adGenAOSXConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 1, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSXConnectRowStatus.setStatus('current')
adGenAOSTdmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2, 1), )
if mibBuilder.loadTexts: adGenAOSTdmGroupTable.setStatus('current')
adGenAOSTdmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupIfSlot"), (0, "ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupIfPort"), (0, "ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupID"))
if mibBuilder.loadTexts: adGenAOSTdmGroupEntry.setStatus('current')
adGenAOSTdmGroupIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSTdmGroupIfSlot.setStatus('current')
adGenAOSTdmGroupIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSTdmGroupIfPort.setStatus('current')
adGenAOSTdmGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSTdmGroupID.setStatus('current')
adGenAOSTdmGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSTdmGroupMask.setStatus('current')
adGenAOSTdmGroupUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fiftySixKbps", 1), ("sixtyFourKbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSTdmGroupUsage.setStatus('current')
adGenAOSMuxConformancemModule = ModuleCompliance((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 99, 1, 1)).setObjects(("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectGrp"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSMuxConformancemModule = adGenAOSMuxConformancemModule.setStatus('current')
adGenAOSXConnectGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 99, 2, 1)).setObjects(("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectIndex"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectFirstIfType"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectFirstIfNumber"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectFirstSubIfNumber"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectFirstIfSlot"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectFirstIfPort"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectFirstTdmGroup"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectFirstTdmGroupDS0"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectSecondIfType"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectSecondIfNumber"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectSecondSubIfNumber"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectSecondIfSlot"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectSecondIfPort"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectSecondTdmGroup"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectSecondTdmGroupDS0"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectPreserveRbs"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSXConnectRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSXConnectGrp = adGenAOSXConnectGrp.setStatus('current')
adGenAOSTdmGroupGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 5, 99, 2, 2)).setObjects(("ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupIfSlot"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupIfPort"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupID"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupMask"), ("ADTRAN-AOS-MUX-MIB", "adGenAOSTdmGroupUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSTdmGroupGrp = adGenAOSTdmGroupGrp.setStatus('current')
mibBuilder.exportSymbols("ADTRAN-AOS-MUX-MIB", adGenAOSXConnectRowStatus=adGenAOSXConnectRowStatus, adGenAOSTdmGroupTable=adGenAOSTdmGroupTable, adGenAOSXConnectGrp=adGenAOSXConnectGrp, adGenAOSXConnectSecondTdmGroupDS0=adGenAOSXConnectSecondTdmGroupDS0, adGenAOSXConnectFirstTdmGroupDS0=adGenAOSXConnectFirstTdmGroupDS0, adGenAOSMuxConformancemModule=adGenAOSMuxConformancemModule, adGenAOSMuxID=adGenAOSMuxID, adGenAOSTdmGroupUsage=adGenAOSTdmGroupUsage, adGenAOSXConnectFirstIfNumber=adGenAOSXConnectFirstIfNumber, adGenAOSXConnectSecondIfSlot=adGenAOSXConnectSecondIfSlot, adGenAOSTdmGroupIfPort=adGenAOSTdmGroupIfPort, adGenAOSXConnectFirstTdmGroup=adGenAOSXConnectFirstTdmGroup, adGenAOSXConnectSecondIfType=adGenAOSXConnectSecondIfType, adGenAOSMux=adGenAOSMux, adGenAOSXConnectFirstIfSlot=adGenAOSXConnectFirstIfSlot, adGenAOSTdmGroupID=adGenAOSTdmGroupID, adGenAOSXConnectSecondIfNumber=adGenAOSXConnectSecondIfNumber, adGenAOSXConnectTable=adGenAOSXConnectTable, adGenAOSXConnect=adGenAOSXConnect, adGenAOSTdmGroup=adGenAOSTdmGroup, adGenAOSXConnectFirstIfType=adGenAOSXConnectFirstIfType, adGenAOSXConnectSecondSubIfNumber=adGenAOSXConnectSecondSubIfNumber, adGenAOSTdmGroupMask=adGenAOSTdmGroupMask, adGenAOSXConnectFirstSubIfNumber=adGenAOSXConnectFirstSubIfNumber, adGenAOSXConnectEntry=adGenAOSXConnectEntry, adGenAOSMuxConformance=adGenAOSMuxConformance, adGenAOSXConnectFirstIfPort=adGenAOSXConnectFirstIfPort, adGenAOSXConnectSecondTdmGroup=adGenAOSXConnectSecondTdmGroup, adGenAOSTdmGroupGrp=adGenAOSTdmGroupGrp, adGenAOSTdmGroupEntry=adGenAOSTdmGroupEntry, adGenAOSMuxCompliance=adGenAOSMuxCompliance, adGenAOSTdmGroupIfSlot=adGenAOSTdmGroupIfSlot, adGenAOSXConnectPreserveRbs=adGenAOSXConnectPreserveRbs, PYSNMP_MODULE_ID=adGenAOSMuxID, adGenAOSXConnectIndex=adGenAOSXConnectIndex, adGenAOSMuxMibGroups=adGenAOSMuxMibGroups, adGenAOSXConnectSecondIfPort=adGenAOSXConnectSecondIfPort)
