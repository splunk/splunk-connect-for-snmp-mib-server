#
# PySNMP MIB module ZXR10-LSPPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXR10-LSPPING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:42:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, experimental, Unsigned32, IpAddress, iso, ModuleIdentity, Bits, Counter64, Counter32, Integer32, Gauge32, mgmt, MibIdentifier, ObjectIdentity, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "experimental", "Unsigned32", "IpAddress", "iso", "ModuleIdentity", "Bits", "Counter64", "Counter32", "Integer32", "Gauge32", "mgmt", "MibIdentifier", "ObjectIdentity", "enterprises", "TimeTicks")
MacAddress, DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
zxr10L2vpn, = mibBuilder.importSymbols("ZXR10-SMI", "zxr10L2vpn")
zxr10LspPingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5))
class DisplayString(OctetString):
    pass

lspPingTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1), )
if mibBuilder.loadTexts: lspPingTable.setStatus('current')
lspPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1), ).setIndexNames((0, "ZXR10-LSPPING-MIB", "lspPingSerial"))
if mibBuilder.loadTexts: lspPingEntry.setStatus('current')
lspPingSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingSerial.setStatus('current')
lspPingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ldp", 0), ("rsvp-te", 1), ("vccv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingType.setStatus('current')
lspPingLdpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingLdpPrefix.setStatus('current')
lspPingLdpPrefixlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingLdpPrefixlen.setStatus('current')
lspPingMplsTeTunnelIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingMplsTeTunnelIfName.setStatus('current')
lspPingAtomDesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingAtomDesAddr.setStatus('current')
lspPingAtomVcid = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingAtomVcid.setStatus('current')
lspPingIfOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("option", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingIfOption.setStatus('current')
lspPingPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 9), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingPacketCount.setStatus('current')
lspPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingTimeOut.setStatus('current')
lspPingDataLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 8192)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingDataLen.setStatus('current')
lspPingTrapOncompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingTrapOncompletion.setStatus('current')
lspPingRosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("start-ping", 2), ("ping-processing", 3), ("ping-completed", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingRosStatus.setStatus('current')
lspPingEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingEntryOwner.setStatus('current')
lspPingResultTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2), )
if mibBuilder.loadTexts: lspPingResultTable.setStatus('current')
lspPingResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1), ).setIndexNames((0, "ZXR10-LSPPING-MIB", "lspPingResultSerial"))
if mibBuilder.loadTexts: lspPingResultEntry.setStatus('current')
lspPingResultSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultSerial.setStatus('current')
lspPingResultSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultSentPkts.setStatus('current')
lspPingResultRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRcvPkts.setStatus('current')
lspPingResultRoundTripMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundTripMinTime.setStatus('current')
lspPingResultRoundTripMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundTripMaxTime.setStatus('current')
lspPingResultRoundTripAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundTripAvgTime.setStatus('current')
lspPingResultEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultEntryOwner.setStatus('current')
lspPingResultRoundWobbleMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundWobbleMinTime.setStatus('current')
lspPingResultRoundWobbleMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundWobbleMaxTime.setStatus('current')
lspPingResultRoundWobbleAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundWobbleAvgTime.setStatus('current')
lsppingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 3))
lsppingTrapResult = NotificationType((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 3, 1)).setObjects(("ZXR10-LSPPING-MIB", "lspPingResultSerial"), ("ZXR10-LSPPING-MIB", "lspPingResultSentPkts"), ("ZXR10-LSPPING-MIB", "lspPingResultRcvPkts"), ("ZXR10-LSPPING-MIB", "lspPingResultRoundTripMinTime"), ("ZXR10-LSPPING-MIB", "lspPingResultRoundTripMaxTime"), ("ZXR10-LSPPING-MIB", "lspPingResultRoundTripAvgTime"))
if mibBuilder.loadTexts: lsppingTrapResult.setStatus('current')
mibBuilder.exportSymbols("ZXR10-LSPPING-MIB", lspPingType=lspPingType, lspPingResultRcvPkts=lspPingResultRcvPkts, lspPingRosStatus=lspPingRosStatus, lspPingAtomVcid=lspPingAtomVcid, lspPingLdpPrefixlen=lspPingLdpPrefixlen, lsppingNotifications=lsppingNotifications, lspPingPacketCount=lspPingPacketCount, lspPingResultSentPkts=lspPingResultSentPkts, lspPingIfOption=lspPingIfOption, DisplayString=DisplayString, lspPingResultTable=lspPingResultTable, lspPingResultRoundTripMaxTime=lspPingResultRoundTripMaxTime, lspPingResultRoundTripMinTime=lspPingResultRoundTripMinTime, lspPingResultEntryOwner=lspPingResultEntryOwner, lspPingTimeOut=lspPingTimeOut, lspPingResultSerial=lspPingResultSerial, lspPingEntry=lspPingEntry, lspPingResultRoundWobbleAvgTime=lspPingResultRoundWobbleAvgTime, lspPingTable=lspPingTable, lspPingDataLen=lspPingDataLen, lspPingTrapOncompletion=lspPingTrapOncompletion, lspPingEntryOwner=lspPingEntryOwner, lspPingResultRoundWobbleMaxTime=lspPingResultRoundWobbleMaxTime, lspPingMplsTeTunnelIfName=lspPingMplsTeTunnelIfName, lspPingResultRoundTripAvgTime=lspPingResultRoundTripAvgTime, lspPingLdpPrefix=lspPingLdpPrefix, lspPingResultRoundWobbleMinTime=lspPingResultRoundWobbleMinTime, lspPingAtomDesAddr=lspPingAtomDesAddr, zxr10LspPingMIB=zxr10LspPingMIB, lspPingResultEntry=lspPingResultEntry, lsppingTrapResult=lsppingTrapResult, lspPingSerial=lspPingSerial)
