#
# PySNMP MIB module NETSCREEN-SET-GLB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-SET-GLB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
netscreenSettingMibModule, netscreenSetting = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSettingMibModule", "netscreenSetting")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, NotificationType, IpAddress, ModuleIdentity, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Unsigned32, Counter32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "NotificationType", "IpAddress", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Unsigned32", "Counter32", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenSetGlbMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 10))
netscreenSetGlbMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2001-09-28 00:00', '2001-05-27 00:00',))
if mibBuilder.loadTexts: netscreenSetGlbMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenSetGlbMibModule.setOrganization('Juniper Networks, Inc.')
nsSetGlbMng = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10))
nsSetGlbMngVPNEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngVPNEnable.setStatus('current')
nsSetGlbMngEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngEnable.setStatus('current')
nsSetGlbProEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbProEnable.setStatus('current')
nsSetGlbManagerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4))
nsSetGlbMngSerName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSerName.setStatus('current')
nsSetGlbMngSerTCP = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSerTCP.setStatus('current')
nsSetGlbMngSerUDP = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSerUDP.setStatus('current')
nsSetGlbMngLocal = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngLocal.setStatus('current')
nsSetGlbProManagerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10, 5))
nsSetGlbProPriSer = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbProPriSer.setStatus('current')
nsSetGlbProSecSer = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbProSecSer.setStatus('current')
nsSetGlbMngSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6))
nsSetGlbMngProtDist = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngProtDist.setStatus('current')
nsSetGlbMngEthStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngEthStatis.setStatus('current')
nsSetGlbMngAttStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngAttStatis.setStatus('current')
nsSetGlbMngPlyStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngPlyStatis.setStatus('current')
nsSetGlbMngFlowStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngFlowStatis.setStatus('current')
nsSetGlbMngTrafAlm = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngTrafAlm.setStatus('current')
nsSetGlbMngAttAlm = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngAttAlm.setStatus('current')
nsSetGlbMngEvtAlm = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngEvtAlm.setStatus('current')
nsSetGlbMngCfgLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngCfgLog.setStatus('current')
nsSetGlbMngTrafLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngTrafLog.setStatus('current')
nsSetGlbMngInfoLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngInfoLog.setStatus('current')
nsSetGlbMngSelfLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSelfLog.setStatus('current')
mibBuilder.exportSymbols("NETSCREEN-SET-GLB-MIB", nsSetGlbMngTrafAlm=nsSetGlbMngTrafAlm, nsSetGlbMngAttStatis=nsSetGlbMngAttStatis, nsSetGlbMngPlyStatis=nsSetGlbMngPlyStatis, nsSetGlbMngSerName=nsSetGlbMngSerName, nsSetGlbMngSelfLog=nsSetGlbMngSelfLog, nsSetGlbProPriSer=nsSetGlbProPriSer, nsSetGlbMngEnable=nsSetGlbMngEnable, nsSetGlbMngProtDist=nsSetGlbMngProtDist, PYSNMP_MODULE_ID=netscreenSetGlbMibModule, nsSetGlbProManagerSetting=nsSetGlbProManagerSetting, nsSetGlbMngFlowStatis=nsSetGlbMngFlowStatis, nsSetGlbMngEthStatis=nsSetGlbMngEthStatis, nsSetGlbMngSetting=nsSetGlbMngSetting, nsSetGlbMngSerTCP=nsSetGlbMngSerTCP, nsSetGlbMngCfgLog=nsSetGlbMngCfgLog, nsSetGlbMngLocal=nsSetGlbMngLocal, nsSetGlbMngAttAlm=nsSetGlbMngAttAlm, nsSetGlbMngVPNEnable=nsSetGlbMngVPNEnable, nsSetGlbMngEvtAlm=nsSetGlbMngEvtAlm, nsSetGlbProSecSer=nsSetGlbProSecSer, nsSetGlbManagerSetting=nsSetGlbManagerSetting, nsSetGlbMngInfoLog=nsSetGlbMngInfoLog, nsSetGlbMngSerUDP=nsSetGlbMngSerUDP, nsSetGlbMngTrafLog=nsSetGlbMngTrafLog, nsSetGlbProEnable=nsSetGlbProEnable, netscreenSetGlbMibModule=netscreenSetGlbMibModule, nsSetGlbMng=nsSetGlbMng)
