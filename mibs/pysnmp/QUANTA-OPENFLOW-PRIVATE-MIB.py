#
# PySNMP MIB module QUANTA-OPENFLOW-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QUANTA-OPENFLOW-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:35:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
switch, = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter64, ObjectIdentity, NotificationType, iso, Counter32, Unsigned32, Gauge32, TimeTicks, Integer32, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ObjectIdentity", "NotificationType", "iso", "Counter32", "Unsigned32", "Gauge32", "TimeTicks", "Integer32", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, RowStatus, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "DisplayString")
openFlow = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 200))
openFlow.setRevisions(('2011-03-06 00:00',))
if mibBuilder.loadTexts: openFlow.setLastUpdated('201103060000Z')
if mibBuilder.loadTexts: openFlow.setOrganization('Quanta Corporation')
agentOpenFlowGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1))
agentOpenFlowGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 1))
agentOpenFlowAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOpenFlowAdminMode.setStatus('current')
agentOpenFlowVariant = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("openFlow10Mode", 2), ("openFlow11Mode", 3), ("openFlow12Mode", 4), ("openFlow13Mode", 5))).clone('openFlow10Mode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOpenFlowVariant.setStatus('current')
agentOpenFlowCfgControllerTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3), )
if mibBuilder.loadTexts: agentOpenFlowCfgControllerTable.setStatus('current')
agentOpenFlowCfgControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1), ).setIndexNames((0, "QUANTA-OPENFLOW-PRIVATE-MIB", "agentOpenFlowCfgCtrlIPAddress"), (0, "QUANTA-OPENFLOW-PRIVATE-MIB", "agentOpenFlowCfgCtrlIPPort"))
if mibBuilder.loadTexts: agentOpenFlowCfgControllerEntry.setStatus('current')
agentOpenFlowCfgCtrlIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlIPAddress.setStatus('current')
agentOpenFlowCfgCtrlIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(6632)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlIPPort.setStatus('current')
agentOpenFlowCfgCtrlConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ssl", 1), ("tcp", 2))).clone('ssl')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlConnectionMode.setStatus('current')
agentOpenFlowCfgCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlStatus.setStatus('current')
agentOpenFlowGlobalStatusParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 6))
agentOpenFlowOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enablePending", 3), ("disablePending", 4))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowOperationalStatus.setStatus('current')
agentOpenFlowDisableReason = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("administrativelyDisabled", 2), ("noSuitableIPInterface", 3), ("noSSLCertificates", 4))).clone('administrativelyDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowDisableReason.setStatus('current')
agentOpenFlowGlobalCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 7))
agentOpenFlowEraseOpenFlowManagerCertificates = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alwaysReturnedOnRead", 1), ("eraseCertificates", 2))).clone('alwaysReturnedOnRead')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOpenFlowEraseOpenFlowManagerCertificates.setStatus('current')
agentOpenFlowFlowTableStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8), )
if mibBuilder.loadTexts: agentOpenFlowFlowTableStatusTable.setStatus('current')
agentOpenFlowFlowTableStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1), ).setIndexNames((0, "QUANTA-OPENFLOW-PRIVATE-MIB", "agentOpenFlowFlowTable"))
if mibBuilder.loadTexts: agentOpenFlowFlowTableStatusEntry.setStatus('current')
agentOpenFlowFlowTable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowTable.setStatus('current')
agentOpenFlowFlowTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowTableName.setStatus('current')
agentOpenFlowFlowTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowTableDescription.setStatus('current')
agentOpenFlowMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowMaximumSize.setStatus('current')
agentOpenFlowNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowNumberOfEntries.setStatus('current')
agentOpenFlowHardwareEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowHardwareEntries.setStatus('current')
agentOpenFlowSoftwareOnlyEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowSoftwareOnlyEntries.setStatus('current')
agentOpenFlowWaitingForSpaceEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowWaitingForSpaceEntries.setStatus('current')
agentOpenFlowFlowInsertionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowInsertionCount.setStatus('current')
agentOpenFlowFlowDeletionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowDeletionCount.setStatus('current')
agentOpenFlowInsertionFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowInsertionFailureCount.setStatus('current')
mibBuilder.exportSymbols("QUANTA-OPENFLOW-PRIVATE-MIB", agentOpenFlowGlobalCommands=agentOpenFlowGlobalCommands, agentOpenFlowCfgCtrlIPPort=agentOpenFlowCfgCtrlIPPort, agentOpenFlowFlowDeletionCount=agentOpenFlowFlowDeletionCount, agentOpenFlowCfgCtrlIPAddress=agentOpenFlowCfgCtrlIPAddress, agentOpenFlowMaximumSize=agentOpenFlowMaximumSize, agentOpenFlowFlowTableStatusEntry=agentOpenFlowFlowTableStatusEntry, agentOpenFlowSoftwareOnlyEntries=agentOpenFlowSoftwareOnlyEntries, agentOpenFlowFlowTableDescription=agentOpenFlowFlowTableDescription, agentOpenFlowEraseOpenFlowManagerCertificates=agentOpenFlowEraseOpenFlowManagerCertificates, agentOpenFlowFlowInsertionCount=agentOpenFlowFlowInsertionCount, agentOpenFlowFlowTableStatusTable=agentOpenFlowFlowTableStatusTable, agentOpenFlowGlobalStatusParameters=agentOpenFlowGlobalStatusParameters, PYSNMP_MODULE_ID=openFlow, agentOpenFlowVariant=agentOpenFlowVariant, agentOpenFlowNumberOfEntries=agentOpenFlowNumberOfEntries, agentOpenFlowGlobalConfigGroup=agentOpenFlowGlobalConfigGroup, agentOpenFlowCfgCtrlStatus=agentOpenFlowCfgCtrlStatus, agentOpenFlowCfgControllerTable=agentOpenFlowCfgControllerTable, agentOpenFlowGroup=agentOpenFlowGroup, agentOpenFlowHardwareEntries=agentOpenFlowHardwareEntries, openFlow=openFlow, agentOpenFlowFlowTable=agentOpenFlowFlowTable, agentOpenFlowOperationalStatus=agentOpenFlowOperationalStatus, agentOpenFlowFlowTableName=agentOpenFlowFlowTableName, agentOpenFlowAdminMode=agentOpenFlowAdminMode, agentOpenFlowCfgCtrlConnectionMode=agentOpenFlowCfgCtrlConnectionMode, agentOpenFlowCfgControllerEntry=agentOpenFlowCfgControllerEntry, agentOpenFlowInsertionFailureCount=agentOpenFlowInsertionFailureCount, agentOpenFlowWaitingForSpaceEntries=agentOpenFlowWaitingForSpaceEntries, agentOpenFlowDisableReason=agentOpenFlowDisableReason)
