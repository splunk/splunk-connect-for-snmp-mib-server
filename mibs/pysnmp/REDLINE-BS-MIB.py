#
# PySNMP MIB module REDLINE-BS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDLINE-BS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
redlineSystem, = mibBuilder.importSymbols("REDLINE-MIB", "redlineSystem")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, IpAddress, MibIdentifier, TimeTicks, ModuleIdentity, iso, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "IpAddress", "MibIdentifier", "TimeTicks", "ModuleIdentity", "iso", "Counter64", "Unsigned32")
DisplayString, RowStatus, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime")
redlineBsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2))
redlineBsMib.setRevisions(('2005-10-28 15:43',))
if mibBuilder.loadTexts: redlineBsMib.setLastUpdated('200510281543Z')
if mibBuilder.loadTexts: redlineBsMib.setOrganization('Redline Communications Inc.')
redlineBsDhcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 1))
redlineBsIpAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsIpAddressSource.setStatus('current')
redlineBsDhcpPacketsRelay = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relay", 1), ("notRelay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsDhcpPacketsRelay.setStatus('current')
redlineBsSntpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2))
redlineBsRefreshTime = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsRefreshTime.setStatus('current')
redlineBsDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsDayLightSaving.setStatus('current')
redlineBsTimezone = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimezone.setStatus('current')
redlineBsTimeServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 4), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimeServerIpAddressType.setStatus('current')
redlineBsTimeServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimeServerIpAddress.setStatus('current')
redlineBsTimezoneMin = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimezoneMin.setStatus('current')
redlineBsConfigSaveObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 3))
redlineBsSnmpConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsSnmpConfigSave.setStatus('current')
redlineBsSfConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsSfConfigSave.setStatus('current')
redlineBsSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 4))
redlineBsRadioType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsRadioType.setStatus('current')
redlineBsRfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 5))
redlineBsDownlinkChanFreq = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 5, 1), Unsigned32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsDownlinkChanFreq.setStatus('current')
redlineBsUplinkChanFreq = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 5, 2), Unsigned32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsUplinkChanFreq.setStatus('current')
redlineBsPhyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 6))
redlineBsChannelSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 6, 1), Unsigned32()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsChannelSize.setStatus('current')
redlineBsEthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7))
redlineBsManagementAccess = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dataPort", 1), ("mgtPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsManagementAccess.setStatus('current')
redlineBsDataPortSettings = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoDetect", 1), ("fullDuplex100", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("halfDuplex10", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsDataPortSettings.setStatus('current')
redlineBsMgtPortSettings = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoDetect", 1), ("fullDuplex100", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("halfDuplex10", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsMgtPortSettings.setStatus('current')
redlineBsVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 8))
redlineBsVlanTrafficTagging = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsVlanTrafficTagging.setStatus('current')
redlineBsVlanId = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsVlanId.setStatus('current')
redlineBsSmcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 9))
redlineBsSmcCurrentOperMode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("maintenance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsSmcCurrentOperMode.setStatus('current')
redlineBsPowerSupplyAndCoolingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10))
redlineBsPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1), )
if mibBuilder.loadTexts: redlineBsPowerSupplyTable.setStatus('current')
redlineBsPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsPowerSupplyIndex"))
if mibBuilder.loadTexts: redlineBsPowerSupplyEntry.setStatus('current')
redlineBsPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsPowerSupplyIndex.setStatus('current')
redlineBsPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsPowerSupplyName.setStatus('current')
redlineBsPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("externalShared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsPowerSupplyType.setStatus('current')
redlineBsPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsPowerSupplyStatus.setStatus('current')
redlineBsTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2), )
if mibBuilder.loadTexts: redlineBsTemperatureTable.setStatus('current')
redlineBsTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsUnitIndex"))
if mibBuilder.loadTexts: redlineBsTemperatureEntry.setStatus('current')
redlineBsUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsUnitIndex.setStatus('current')
redlineBsUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsUnitName.setStatus('current')
redlineBsUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsUnitType.setStatus('current')
redlineBsCurrTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 100))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsCurrTemperature.setStatus('current')
redlineBsTempThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3), )
if mibBuilder.loadTexts: redlineBsTempThresholdTable.setStatus('current')
redlineBsTempThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsUnitIndex"), (0, "REDLINE-BS-MIB", "redlineBsTempThresholdIndex"))
if mibBuilder.loadTexts: redlineBsTempThresholdEntry.setStatus('current')
redlineBsTempThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsTempThresholdIndex.setStatus('current')
redlineBsTempTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 100))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTempTrapThreshold.setStatus('current')
redlineBsTempTrapClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 100))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTempTrapClrThreshold.setStatus('current')
redlineBsTempThresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTempThresholdName.setStatus('current')
redlineBsTemperatureTrapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperatureRising", 1), ("temperatureFalling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTemperatureTrapTrigger.setStatus('current')
redlineBsFanTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4), )
if mibBuilder.loadTexts: redlineBsFanTable.setStatus('current')
redlineBsFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsFanIndex"))
if mibBuilder.loadTexts: redlineBsFanEntry.setStatus('current')
redlineBsFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsFanIndex.setStatus('current')
redlineBsFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsFanName.setStatus('current')
redlineBsFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsFanStatus.setStatus('current')
redlineBsNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11))
redlineBsTrapMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1))
redlineBsTrapType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapSet", 1), ("trapClr", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapType.setStatus('current')
redlineBsTrapPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapPowerSupplyIndex.setStatus('current')
redlineBsTrapUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapUnitIndex.setStatus('current')
redlineBsTrapTempThresholdIndex = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapTempThresholdIndex.setStatus('current')
redlineBsTrapDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 0))
redlineBsPowerSupplyStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 0, 1)).setObjects(("REDLINE-BS-MIB", "redlineBsTrapPowerSupplyIndex"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyStatus"))
if mibBuilder.loadTexts: redlineBsPowerSupplyStatusTrap.setStatus('current')
redlineBsTempThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 0, 2)).setObjects(("REDLINE-BS-MIB", "redlineBsTrapUnitIndex"), ("REDLINE-BS-MIB", "redlineBsTrapTempThresholdIndex"), ("REDLINE-BS-MIB", "redlineBsCurrTemperature"), ("REDLINE-BS-MIB", "redlineBsTemperatureTrapTrigger"), ("REDLINE-BS-MIB", "redlineBsTrapType"))
if mibBuilder.loadTexts: redlineBsTempThresholdTrap.setStatus('current')
redlineBsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12))
redlineBsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1))
redlineBsCompls = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 2))
redlineBsDhcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 1)).setObjects(("REDLINE-BS-MIB", "redlineBsIpAddressSource"), ("REDLINE-BS-MIB", "redlineBsDhcpPacketsRelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsDhcpGroup = redlineBsDhcpGroup.setStatus('current')
redlineBsSntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 2)).setObjects(("REDLINE-BS-MIB", "redlineBsRefreshTime"), ("REDLINE-BS-MIB", "redlineBsDayLightSaving"), ("REDLINE-BS-MIB", "redlineBsTimezone"), ("REDLINE-BS-MIB", "redlineBsTimeServerIpAddressType"), ("REDLINE-BS-MIB", "redlineBsTimeServerIpAddress"), ("REDLINE-BS-MIB", "redlineBsTimezoneMin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsSntpGroup = redlineBsSntpGroup.setStatus('current')
redlineBsConfigSaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 3)).setObjects(("REDLINE-BS-MIB", "redlineBsSnmpConfigSave"), ("REDLINE-BS-MIB", "redlineBsSfConfigSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsConfigSaveGroup = redlineBsConfigSaveGroup.setStatus('current')
redlineBsSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 4)).setObjects(("REDLINE-BS-MIB", "redlineBsRadioType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsSystemGroup = redlineBsSystemGroup.setStatus('current')
redlineBsRfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 5)).setObjects(("REDLINE-BS-MIB", "redlineBsDownlinkChanFreq"), ("REDLINE-BS-MIB", "redlineBsUplinkChanFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsRfGroup = redlineBsRfGroup.setStatus('current')
redlineBsPhyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 6)).setObjects(("REDLINE-BS-MIB", "redlineBsChannelSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsPhyGroup = redlineBsPhyGroup.setStatus('current')
redlineBsEthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 7)).setObjects(("REDLINE-BS-MIB", "redlineBsManagementAccess"), ("REDLINE-BS-MIB", "redlineBsDataPortSettings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsEthGroup = redlineBsEthGroup.setStatus('current')
redlineBsVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 8)).setObjects(("REDLINE-BS-MIB", "redlineBsVlanTrafficTagging"), ("REDLINE-BS-MIB", "redlineBsVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsVlanGroup = redlineBsVlanGroup.setStatus('current')
redlineBsSmcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 9)).setObjects(("REDLINE-BS-MIB", "redlineBsSmcCurrentOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsSmcGroup = redlineBsSmcGroup.setStatus('current')
redlineBsPowerSupplyAndCoolingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 10)).setObjects(("REDLINE-BS-MIB", "redlineBsPowerSupplyName"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyType"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyStatus"), ("REDLINE-BS-MIB", "redlineBsUnitName"), ("REDLINE-BS-MIB", "redlineBsUnitType"), ("REDLINE-BS-MIB", "redlineBsCurrTemperature"), ("REDLINE-BS-MIB", "redlineBsTempTrapThreshold"), ("REDLINE-BS-MIB", "redlineBsTempTrapClrThreshold"), ("REDLINE-BS-MIB", "redlineBsTempThresholdName"), ("REDLINE-BS-MIB", "redlineBsTemperatureTrapTrigger"), ("REDLINE-BS-MIB", "redlineBsFanName"), ("REDLINE-BS-MIB", "redlineBsFanStatus"), ("REDLINE-BS-MIB", "redlineBsTrapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsPowerSupplyAndCoolingGroup = redlineBsPowerSupplyAndCoolingGroup.setStatus('current')
redlineBsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 11)).setObjects(("REDLINE-BS-MIB", "redlineBsPowerSupplyStatusTrap"), ("REDLINE-BS-MIB", "redlineBsTempThresholdTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsNotificationGroup = redlineBsNotificationGroup.setStatus('current')
redlineBsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 2, 1)).setObjects(("REDLINE-BS-MIB", "redlineBsDhcpGroup"), ("REDLINE-BS-MIB", "redlineBsSntpGroup"), ("REDLINE-BS-MIB", "redlineBsConfigSaveGroup"), ("REDLINE-BS-MIB", "redlineBsSystemGroup"), ("REDLINE-BS-MIB", "redlineBsRfGroup"), ("REDLINE-BS-MIB", "redlineBsPhyGroup"), ("REDLINE-BS-MIB", "redlineBsEthGroup"), ("REDLINE-BS-MIB", "redlineBsVlanGroup"), ("REDLINE-BS-MIB", "redlineBsSmcGroup"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyAndCoolingGroup"), ("REDLINE-BS-MIB", "redlineBsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsCompliance = redlineBsCompliance.setStatus('current')
mibBuilder.exportSymbols("REDLINE-BS-MIB", redlineBsFanIndex=redlineBsFanIndex, redlineBsUnitType=redlineBsUnitType, redlineBsSmcObjects=redlineBsSmcObjects, redlineBsConfigSaveGroup=redlineBsConfigSaveGroup, redlineBsTempTrapThreshold=redlineBsTempTrapThreshold, redlineBsTimezoneMin=redlineBsTimezoneMin, redlineBsTemperatureTable=redlineBsTemperatureTable, redlineBsPowerSupplyIndex=redlineBsPowerSupplyIndex, redlineBsUnitIndex=redlineBsUnitIndex, redlineBsSfConfigSave=redlineBsSfConfigSave, redlineBsTrapTempThresholdIndex=redlineBsTrapTempThresholdIndex, redlineBsDataPortSettings=redlineBsDataPortSettings, redlineBsTrapMibObjects=redlineBsTrapMibObjects, redlineBsTrapUnitIndex=redlineBsTrapUnitIndex, redlineBsChannelSize=redlineBsChannelSize, redlineBsTrapType=redlineBsTrapType, redlineBsPowerSupplyAndCoolingObjects=redlineBsPowerSupplyAndCoolingObjects, redlineBsTempThresholdIndex=redlineBsTempThresholdIndex, redlineBsManagementAccess=redlineBsManagementAccess, redlineBsDownlinkChanFreq=redlineBsDownlinkChanFreq, redlineBsCompls=redlineBsCompls, redlineBsDhcpObjects=redlineBsDhcpObjects, redlineBsRefreshTime=redlineBsRefreshTime, redlineBsTempTrapClrThreshold=redlineBsTempTrapClrThreshold, redlineBsDhcpGroup=redlineBsDhcpGroup, redlineBsPhyGroup=redlineBsPhyGroup, redlineBsPowerSupplyAndCoolingGroup=redlineBsPowerSupplyAndCoolingGroup, redlineBsPowerSupplyTable=redlineBsPowerSupplyTable, redlineBsTempThresholdTrap=redlineBsTempThresholdTrap, redlineBsSystemObjects=redlineBsSystemObjects, redlineBsNotificationGroup=redlineBsNotificationGroup, redlineBsSnmpConfigSave=redlineBsSnmpConfigSave, redlineBsTempThresholdTable=redlineBsTempThresholdTable, redlineBsPowerSupplyStatus=redlineBsPowerSupplyStatus, redlineBsMib=redlineBsMib, redlineBsRadioType=redlineBsRadioType, redlineBsCurrTemperature=redlineBsCurrTemperature, redlineBsCompliance=redlineBsCompliance, redlineBsFanTable=redlineBsFanTable, redlineBsVlanObjects=redlineBsVlanObjects, redlineBsSmcGroup=redlineBsSmcGroup, redlineBsSystemGroup=redlineBsSystemGroup, redlineBsTempThresholdName=redlineBsTempThresholdName, redlineBsTimeServerIpAddressType=redlineBsTimeServerIpAddressType, redlineBsEthObjects=redlineBsEthObjects, redlineBsSmcCurrentOperMode=redlineBsSmcCurrentOperMode, redlineBsVlanTrafficTagging=redlineBsVlanTrafficTagging, redlineBsTemperatureEntry=redlineBsTemperatureEntry, redlineBsFanEntry=redlineBsFanEntry, redlineBsFanName=redlineBsFanName, redlineBsPowerSupplyType=redlineBsPowerSupplyType, redlineBsConformance=redlineBsConformance, redlineBsConfigSaveObjects=redlineBsConfigSaveObjects, redlineBsRfGroup=redlineBsRfGroup, redlineBsTimezone=redlineBsTimezone, redlineBsVlanGroup=redlineBsVlanGroup, redlineBsPowerSupplyStatusTrap=redlineBsPowerSupplyStatusTrap, redlineBsTimeServerIpAddress=redlineBsTimeServerIpAddress, redlineBsNotificationObjects=redlineBsNotificationObjects, redlineBsPhyObjects=redlineBsPhyObjects, redlineBsUnitName=redlineBsUnitName, redlineBsTrapPowerSupplyIndex=redlineBsTrapPowerSupplyIndex, redlineBsTrapDefinitions=redlineBsTrapDefinitions, redlineBsDayLightSaving=redlineBsDayLightSaving, redlineBsSntpObjects=redlineBsSntpObjects, redlineBsPowerSupplyName=redlineBsPowerSupplyName, redlineBsPowerSupplyEntry=redlineBsPowerSupplyEntry, redlineBsSntpGroup=redlineBsSntpGroup, PYSNMP_MODULE_ID=redlineBsMib, redlineBsUplinkChanFreq=redlineBsUplinkChanFreq, redlineBsIpAddressSource=redlineBsIpAddressSource, redlineBsGroups=redlineBsGroups, redlineBsFanStatus=redlineBsFanStatus, redlineBsMgtPortSettings=redlineBsMgtPortSettings, redlineBsVlanId=redlineBsVlanId, redlineBsTempThresholdEntry=redlineBsTempThresholdEntry, redlineBsRfObjects=redlineBsRfObjects, redlineBsDhcpPacketsRelay=redlineBsDhcpPacketsRelay, redlineBsTemperatureTrapTrigger=redlineBsTemperatureTrapTrigger, redlineBsEthGroup=redlineBsEthGroup)
