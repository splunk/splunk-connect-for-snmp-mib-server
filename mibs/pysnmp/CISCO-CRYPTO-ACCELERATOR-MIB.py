#
# PySNMP MIB module CISCO-CRYPTO-ACCELERATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CRYPTO-ACCELERATOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:36:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleOperType, = mibBuilder.importSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", "ModuleOperType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Bits, ModuleIdentity, Counter32, iso, NotificationType, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, IpAddress, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "ModuleIdentity", "Counter32", "iso", "NotificationType", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "IpAddress", "Counter64", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoCryptoAcceleratorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 467))
ciscoCryptoAcceleratorMIB.setRevisions(('2005-03-08 00:00',))
if mibBuilder.loadTexts: ciscoCryptoAcceleratorMIB.setLastUpdated('200503080000Z')
if mibBuilder.loadTexts: ciscoCryptoAcceleratorMIB.setOrganization('Cisco Systems, Inc.')
class CAModuleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("other", 1), ("software", 2), ("integrated", 3), ("sep", 4), ("sepe", 5), ("a1700VpnModule", 6), ("aimVpnIBp", 7), ("aimVpnIEp", 8), ("aimVpnIIBp", 9), ("aimVpnIIEp", 10), ("aimVpnIIHp", 11), ("isa", 12), ("vam", 13), ("vam2", 14), ("vam2plus", 15), ("vpnsm", 16), ("caviumNitrox", 17), ("caviumNitroxII", 18), ("caviumNitroxLite", 19))

class CAModuleCount(TextualConvention, Unsigned32):
    status = 'current'

class CAProtocolType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("ikev1", 2), ("ikev2", 3), ("ipsec", 4), ("ssl", 5), ("ssh", 6), ("srtp", 7))

ciscoCryAcceleratorMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 0))
ciscoCryAcceleratorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 1))
ciscoCryAccleratorMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 2))
ccaCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 1))
ccaActivity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2))
ccaGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1))
ccaProtocolActivity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3))
ccaAcNotifCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 3))
ccaSupportsHwCrypto = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaSupportsHwCrypto.setStatus('current')
ccaSupportsModularHwCrypto = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaSupportsModularHwCrypto.setStatus('current')
ccaMaxAccelerators = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaMaxAccelerators.setStatus('current')
ccaMaxCryptoThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 1, 4), Unsigned32()).setUnits('megabits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaMaxCryptoThroughput.setStatus('current')
ccaMaxCryptoConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaMaxCryptoConnections.setStatus('current')
ccaGlobalNumActiveAccelerators = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1, 1), CAModuleCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaGlobalNumActiveAccelerators.setStatus('current')
ccaGlobalNumNonOperAccelerators = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1, 2), CAModuleCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaGlobalNumNonOperAccelerators.setStatus('current')
ccaGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaGlobalInOctets.setStatus('current')
ccaGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaGlobalOutOctets.setStatus('current')
ccaGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaGlobalInPkts.setStatus('current')
ccaGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaGlobalOutPkts.setStatus('current')
ccaGlobalOutErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaGlobalOutErrPkts.setStatus('current')
ccaAcceleratorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2), )
if mibBuilder.loadTexts: ccaAcceleratorTable.setStatus('current')
ccaAcceleratorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclIndex"))
if mibBuilder.loadTexts: ccaAcceleratorEntry.setStatus('current')
ccaAcclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: ccaAcclIndex.setStatus('current')
ccaAcclEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclEntPhysicalIndex.setStatus('current')
ccaAcclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 3), ModuleOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclStatus.setStatus('current')
ccaAcclType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 4), CAModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclType.setStatus('current')
ccaAcclVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclVersion.setStatus('current')
ccaAcclSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclSlot.setStatus('current')
ccaAcclActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 7), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclActiveTime.setStatus('current')
ccaAcclInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclInPkts.setStatus('current')
ccaAcclOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclOutPkts.setStatus('current')
ccaAcclOutBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclOutBadPkts.setStatus('current')
ccaAcclInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclInOctets.setStatus('current')
ccaAcclOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclOutOctets.setStatus('current')
ccaAcclHashOutboundPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclHashOutboundPkts.setStatus('current')
ccaAcclHashOutboundOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclHashOutboundOctets.setStatus('current')
ccaAcclHashInboundPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclHashInboundPkts.setStatus('current')
ccaAcclHashInboundOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclHashInboundOctets.setStatus('current')
ccaAcclEncryptPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclEncryptPkts.setStatus('current')
ccaAcclEncryptOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclEncryptOctets.setStatus('current')
ccaAcclDecryptPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDecryptPkts.setStatus('current')
ccaAcclDecryptOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDecryptOctets.setStatus('current')
ccaAcclTransformsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclTransformsTotal.setStatus('current')
ccaAcclDropsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDropsPkts.setStatus('current')
ccaAcclRandRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRandRequests.setStatus('current')
ccaAcclRandReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRandReqFails.setStatus('current')
ccaAcclDHKeysGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDHKeysGenerated.setStatus('current')
ccaAcclDHDerivedSecretKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDHDerivedSecretKeys.setStatus('current')
ccaAcclRSAKeysGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRSAKeysGenerated.setStatus('current')
ccaAcclRSASignings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRSASignings.setStatus('current')
ccaAcclRSAVerifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRSAVerifications.setStatus('current')
ccaAcclRSAEncryptPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRSAEncryptPkts.setStatus('current')
ccaAcclRSAEncryptOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRSAEncryptOctets.setStatus('current')
ccaAcclRSADecryptPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRSADecryptPkts.setStatus('current')
ccaAcclRSADecryptOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclRSADecryptOctets.setStatus('current')
ccaAcclDSAKeysGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDSAKeysGenerated.setStatus('current')
ccaAcclDSASignings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDSASignings.setStatus('current')
ccaAcclDSAVerifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclDSAVerifications.setStatus('current')
ccaAcclOutboundSSLRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclOutboundSSLRecords.setStatus('current')
ccaAcclInboundSSLRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaAcclInboundSSLRecords.setStatus('current')
ccaProtocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1), )
if mibBuilder.loadTexts: ccaProtocolStatsTable.setStatus('current')
ccaProtocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtId"))
if mibBuilder.loadTexts: ccaProtocolStatsEntry.setStatus('current')
ccaProtId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 1), CAProtocolType())
if mibBuilder.loadTexts: ccaProtId.setStatus('current')
ccaProtPktEncryptsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtPktEncryptsReqs.setStatus('current')
ccaProtPktDecryptsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtPktDecryptsReqs.setStatus('current')
ccaProtHmacCalcReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtHmacCalcReqs.setStatus('current')
ccaProtSaCreateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtSaCreateReqs.setStatus('current')
ccaProtSaRekeyReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtSaRekeyReqs.setStatus('current')
ccaProtSaDeleteReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtSaDeleteReqs.setStatus('current')
ccaProtPktEncapReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtPktEncapReqs.setStatus('current')
ccaProtPktDecapReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtPktDecapReqs.setStatus('current')
ccaProtNextPhaseKeyAllocReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtNextPhaseKeyAllocReqs.setStatus('current')
ccaProtRndGenReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtRndGenReqs.setStatus('current')
ccaProtFailedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 2, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccaProtFailedReqs.setStatus('current')
ccaNotifCntlAcclInserted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccaNotifCntlAcclInserted.setStatus('current')
ccaNotifCntlAcclRemoved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccaNotifCntlAcclRemoved.setStatus('current')
ccaNotifCntlAcclOperational = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccaNotifCntlAcclOperational.setStatus('current')
ccaNotifCntlAcclDisabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 467, 1, 3, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccaNotifCntlAcclDisabled.setStatus('current')
ciscoCryAccelInserted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 467, 0, 1)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclSlot"))
if mibBuilder.loadTexts: ciscoCryAccelInserted.setStatus('current')
ciscoCryAccelRemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 467, 0, 2)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclSlot"))
if mibBuilder.loadTexts: ciscoCryAccelRemoved.setStatus('current')
ciscoCryAccelOperational = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 467, 0, 3)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclSlot"))
if mibBuilder.loadTexts: ciscoCryAccelOperational.setStatus('current')
ciscoCryAccelDisabled = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 467, 0, 4)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclSlot"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclStatus"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclActiveTime"))
if mibBuilder.loadTexts: ciscoCryAccelDisabled.setStatus('current')
ciscoCryAccelMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 1))
ciscoCryAccelMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 2))
ciscoCryAccelMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 1, 1)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccCapacityGroup"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccSummaryActivityGroup"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccModuleActivityGroup"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccProtocolActivityGroup"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccNotifsGroup"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccNotifsCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCryAccelMIBCompliance = ciscoCryAccelMIBCompliance.setStatus('current')
ciscoCryAccCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 2, 1)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaSupportsHwCrypto"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaSupportsModularHwCrypto"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaMaxAccelerators"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaMaxCryptoThroughput"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaMaxCryptoConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCryAccCapacityGroup = ciscoCryAccCapacityGroup.setStatus('current')
ciscoCryAccSummaryActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 2, 2)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaGlobalNumActiveAccelerators"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaGlobalNumNonOperAccelerators"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaGlobalInOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaGlobalOutOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaGlobalInPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaGlobalOutPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaGlobalOutErrPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCryAccSummaryActivityGroup = ciscoCryAccSummaryActivityGroup.setStatus('current')
ciscoCryAccModuleActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 2, 3)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclEntPhysicalIndex"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclStatus"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclType"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclVersion"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclSlot"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclActiveTime"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclInPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclOutPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclOutBadPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclInOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclOutOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclHashOutboundPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclHashOutboundOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclHashInboundPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclHashInboundOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclEncryptPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclEncryptOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDecryptPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDecryptOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclTransformsTotal"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDropsPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRandRequests"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRandReqFails"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDHKeysGenerated"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDHDerivedSecretKeys"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRSAKeysGenerated"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRSASignings"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRSAVerifications"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRSAEncryptPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRSAEncryptOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRSADecryptPkts"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclRSADecryptOctets"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDSAKeysGenerated"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDSASignings"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclDSAVerifications"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclOutboundSSLRecords"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaAcclInboundSSLRecords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCryAccModuleActivityGroup = ciscoCryAccModuleActivityGroup.setStatus('current')
ciscoCryAccProtocolActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 2, 4)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtPktEncryptsReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtPktDecryptsReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtHmacCalcReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtSaCreateReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtSaRekeyReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtSaDeleteReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtPktEncapReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtPktDecapReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtNextPhaseKeyAllocReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtRndGenReqs"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaProtFailedReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCryAccProtocolActivityGroup = ciscoCryAccProtocolActivityGroup.setStatus('current')
ciscoCryAccNotifsCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 2, 5)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaNotifCntlAcclInserted"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaNotifCntlAcclRemoved"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaNotifCntlAcclOperational"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ccaNotifCntlAcclDisabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCryAccNotifsCntlGroup = ciscoCryAccNotifsCntlGroup.setStatus('current')
ciscoCryAccNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 467, 2, 2, 6)).setObjects(("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccelInserted"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccelRemoved"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccelOperational"), ("CISCO-CRYPTO-ACCELERATOR-MIB", "ciscoCryAccelDisabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCryAccNotifsGroup = ciscoCryAccNotifsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CRYPTO-ACCELERATOR-MIB", PYSNMP_MODULE_ID=ciscoCryptoAcceleratorMIB, ccaAcclDecryptOctets=ccaAcclDecryptOctets, ccaAcclType=ccaAcclType, ccaAcclRSAKeysGenerated=ccaAcclRSAKeysGenerated, ccaAcNotifCntl=ccaAcNotifCntl, ciscoCryAccelMIBGroups=ciscoCryAccelMIBGroups, ccaProtPktDecapReqs=ccaProtPktDecapReqs, ccaAcclDSASignings=ccaAcclDSASignings, ciscoCryAccModuleActivityGroup=ciscoCryAccModuleActivityGroup, CAProtocolType=CAProtocolType, ccaAcclRandRequests=ccaAcclRandRequests, ccaAcclDHKeysGenerated=ccaAcclDHKeysGenerated, ccaAcclDropsPkts=ccaAcclDropsPkts, ccaAcclRandReqFails=ccaAcclRandReqFails, ciscoCryAccelOperational=ciscoCryAccelOperational, ciscoCryAccProtocolActivityGroup=ciscoCryAccProtocolActivityGroup, ccaAcclDHDerivedSecretKeys=ccaAcclDHDerivedSecretKeys, ccaAcclInOctets=ccaAcclInOctets, ccaAcclInboundSSLRecords=ccaAcclInboundSSLRecords, ccaGlobalNumNonOperAccelerators=ccaGlobalNumNonOperAccelerators, ccaAcclEncryptOctets=ccaAcclEncryptOctets, ciscoCryAccNotifsCntlGroup=ciscoCryAccNotifsCntlGroup, ccaAcclVersion=ccaAcclVersion, ccaProtocolStatsEntry=ccaProtocolStatsEntry, ciscoCryAccelMIBCompliances=ciscoCryAccelMIBCompliances, ccaAcclHashOutboundPkts=ccaAcclHashOutboundPkts, ccaAcclRSAEncryptOctets=ccaAcclRSAEncryptOctets, ccaAcclDecryptPkts=ccaAcclDecryptPkts, ciscoCryAccelMIBCompliance=ciscoCryAccelMIBCompliance, ccaGlobalOutOctets=ccaGlobalOutOctets, ciscoCryptoAcceleratorMIB=ciscoCryptoAcceleratorMIB, CAModuleCount=CAModuleCount, CAModuleType=CAModuleType, ccaAcclRSASignings=ccaAcclRSASignings, ccaAcclOutOctets=ccaAcclOutOctets, ccaProtFailedReqs=ccaProtFailedReqs, ccaAcclSlot=ccaAcclSlot, ccaNotifCntlAcclOperational=ccaNotifCntlAcclOperational, ccaActivity=ccaActivity, ccaGlobalNumActiveAccelerators=ccaGlobalNumActiveAccelerators, ccaAcclRSADecryptOctets=ccaAcclRSADecryptOctets, ccaGlobalOutPkts=ccaGlobalOutPkts, ccaAcclRSADecryptPkts=ccaAcclRSADecryptPkts, ccaGlobalInOctets=ccaGlobalInOctets, ccaProtHmacCalcReqs=ccaProtHmacCalcReqs, ccaProtSaDeleteReqs=ccaProtSaDeleteReqs, ccaProtSaCreateReqs=ccaProtSaCreateReqs, ciscoCryAccCapacityGroup=ciscoCryAccCapacityGroup, ccaAcclOutboundSSLRecords=ccaAcclOutboundSSLRecords, ccaCapability=ccaCapability, ccaMaxCryptoConnections=ccaMaxCryptoConnections, ccaProtocolActivity=ccaProtocolActivity, ccaAcclStatus=ccaAcclStatus, ccaProtPktDecryptsReqs=ccaProtPktDecryptsReqs, ccaAcclOutBadPkts=ccaAcclOutBadPkts, ccaAcclEncryptPkts=ccaAcclEncryptPkts, ciscoCryAccleratorMIBConform=ciscoCryAccleratorMIBConform, ccaProtRndGenReqs=ccaProtRndGenReqs, ccaGlobalOutErrPkts=ccaGlobalOutErrPkts, ccaAcclDSAVerifications=ccaAcclDSAVerifications, ccaProtPktEncapReqs=ccaProtPktEncapReqs, ccaAcclActiveTime=ccaAcclActiveTime, ciscoCryAccSummaryActivityGroup=ciscoCryAccSummaryActivityGroup, ccaAcclTransformsTotal=ccaAcclTransformsTotal, ciscoCryAcceleratorMIBNotifs=ciscoCryAcceleratorMIBNotifs, ccaAcclRSAVerifications=ccaAcclRSAVerifications, ccaAcclRSAEncryptPkts=ccaAcclRSAEncryptPkts, ccaGlobalStats=ccaGlobalStats, ccaAcceleratorTable=ccaAcceleratorTable, ccaProtSaRekeyReqs=ccaProtSaRekeyReqs, ccaMaxAccelerators=ccaMaxAccelerators, ciscoCryAccNotifsGroup=ciscoCryAccNotifsGroup, ccaAcclHashInboundOctets=ccaAcclHashInboundOctets, ccaNotifCntlAcclInserted=ccaNotifCntlAcclInserted, ccaNotifCntlAcclDisabled=ccaNotifCntlAcclDisabled, ccaSupportsModularHwCrypto=ccaSupportsModularHwCrypto, ccaAcclOutPkts=ccaAcclOutPkts, ciscoCryAcceleratorMIBObjects=ciscoCryAcceleratorMIBObjects, ccaSupportsHwCrypto=ccaSupportsHwCrypto, ccaProtPktEncryptsReqs=ccaProtPktEncryptsReqs, ciscoCryAccelRemoved=ciscoCryAccelRemoved, ccaAcclInPkts=ccaAcclInPkts, ccaAcclDSAKeysGenerated=ccaAcclDSAKeysGenerated, ccaProtocolStatsTable=ccaProtocolStatsTable, ccaProtNextPhaseKeyAllocReqs=ccaProtNextPhaseKeyAllocReqs, ccaGlobalInPkts=ccaGlobalInPkts, ccaNotifCntlAcclRemoved=ccaNotifCntlAcclRemoved, ccaAcceleratorEntry=ccaAcceleratorEntry, ccaMaxCryptoThroughput=ccaMaxCryptoThroughput, ccaAcclHashOutboundOctets=ccaAcclHashOutboundOctets, ccaProtId=ccaProtId, ccaAcclIndex=ccaAcclIndex, ccaAcclHashInboundPkts=ccaAcclHashInboundPkts, ciscoCryAccelInserted=ciscoCryAccelInserted, ciscoCryAccelDisabled=ciscoCryAccelDisabled, ccaAcclEntPhysicalIndex=ccaAcclEntPhysicalIndex)
