#
# PySNMP MIB module GDCUAS7022-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCUAS7022-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, Counter64, TimeTicks, Integer32, Unsigned32, MibIdentifier, ObjectIdentity, iso, Bits, IpAddress, enterprises, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Counter64", "TimeTicks", "Integer32", "Unsigned32", "MibIdentifier", "ObjectIdentity", "iso", "Bits", "IpAddress", "enterprises", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
uas7022 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13))
uas7022Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 1))
uas7022Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 2))
uas7022Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 3))
uas7022Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 4))
uas7022Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 5))
uas7022Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6))
uas7022AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 7))
uas7022MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022MIBversion.setStatus('mandatory')
uas7022VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2), )
if mibBuilder.loadTexts: uas7022VersionTable.setStatus('mandatory')
uas7022VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022VersionIndex"))
if mibBuilder.loadTexts: uas7022VersionEntry.setStatus('mandatory')
uas7022VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022VersionIndex.setStatus('mandatory')
uas7022ActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022ActiveFirmwareRev.setStatus('mandatory')
uas7022StoredFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022StoredFirmwareRev.setStatus('mandatory')
uas7022StoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6), ("statDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022StoredFirmwareStatus.setStatus('mandatory')
uas7022SwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022SwitchActiveFirmware.setStatus('mandatory')
uas7022DownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022DownloadingMode.setStatus('mandatory')
uas7022MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1), )
if mibBuilder.loadTexts: uas7022MaintenanceTable.setStatus('mandatory')
uas7022MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022MaintenanceLineIndex"))
if mibBuilder.loadTexts: uas7022MaintenanceEntry.setStatus('mandatory')
uas7022MaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022MaintenanceLineIndex.setStatus('mandatory')
uas7022SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022SoftReset.setStatus('mandatory')
uas7022SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022SysUpTime.setStatus('mandatory')
uas7022DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022DefaultInit.setStatus('mandatory')
uas7022LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022LedStatus.setStatus('mandatory')
uas7022AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022AlarmStatus.setStatus('mandatory')
uas7022NearEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022NearEndResetStats.setStatus('mandatory')
uas7022FarEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022FarEndResetStats.setStatus('mandatory')
uas7022NearEndStatLastInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndStatLastInit.setStatus('mandatory')
uas7022FarEndStatLastInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndStatLastInit.setStatus('mandatory')
uas7022NearEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndValidIntervals.setStatus('mandatory')
uas7022FarEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndValidIntervals.setStatus('mandatory')
uas7022NIUaCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022NIUaCircuitID.setStatus('mandatory')
uas7022SystemTimingGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clk8khz", 2), ("clk4mhz", 3), ("clk8khzand4mhz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022SystemTimingGenStatus.setStatus('mandatory')
uas7022NIUbCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022NIUbCircuitID.setStatus('mandatory')
uas7022ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1), )
if mibBuilder.loadTexts: uas7022ConfigTable.setStatus('mandatory')
uas7022ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022ConfigIndex"))
if mibBuilder.loadTexts: uas7022ConfigEntry.setStatus('mandatory')
uas7022ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022ConfigIndex.setStatus('mandatory')
uas7022RcvrRange = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022RcvrRange.setStatus('mandatory')
uas7022Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cCSwithoutCRC4", 1), ("cASwithoutCRC4", 2), ("cCSwithCRC4", 3), ("cASwithCRC4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022Framing.setStatus('mandatory')
uas7022SysTimingGen = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022SysTimingGen.setStatus('mandatory')
uas7022Highway = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAssigned", 1), ("highway1", 2), ("highway2", 3), ("highway3", 4), ("highway4", 5), ("highway5", 6), ("highway6", 7), ("highway7", 8), ("highway8", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022Highway.setStatus('mandatory')
uas7022TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022TransmitClockSource.setStatus('mandatory')
uas7022FallbackClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022FallbackClockSource.setStatus('mandatory')
uas7022InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("unassigned", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022InterfaceType.setStatus('mandatory')
uas7022FDLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022FDLMode.setStatus('mandatory')
uas7022TimeSlot16Content = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("marks", 2), ("data", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022TimeSlot16Content.setStatus('mandatory')
uas7022Impedance = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("impedance120Ohm", 1), ("impedance75Ohm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022Impedance.setStatus('mandatory')
uas7022DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 4, 1), )
if mibBuilder.loadTexts: uas7022DiagTable.setStatus('mandatory')
uas7022DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 4, 1, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022DiagIndex"))
if mibBuilder.loadTexts: uas7022DiagEntry.setStatus('mandatory')
uas7022DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022DiagIndex.setStatus('mandatory')
uas7022DiagConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoopback", 2), ("payloadLoopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022DiagConfig.setStatus('mandatory')
uas7022TestLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testTime10Mins", 1), ("testTime20Mins", 2), ("noLimit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022TestLimit.setStatus('mandatory')
uas7022TestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("notInTest", 1), ("testInProgress", 2), ("testCompleted", 4), ("testCompletedNotInTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022TestExecutionStatus.setStatus('mandatory')
uas7022TestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022TestExceptions.setStatus('mandatory')
uas7022NearEndCurrent15MinTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 1), )
if mibBuilder.loadTexts: uas7022NearEndCurrent15MinTable.setStatus('mandatory')
uas7022NearEndCurrent15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 1, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022NearEndCurrent15MinIndex"))
if mibBuilder.loadTexts: uas7022NearEndCurrent15MinEntry.setStatus('mandatory')
uas7022NearEndCurrent15MinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndCurrent15MinIndex.setStatus('mandatory')
uas7022NearEndCurrent15MinStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndCurrent15MinStat.setStatus('mandatory')
uas7022NearEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 2), )
if mibBuilder.loadTexts: uas7022NearEndIntervalTable.setStatus('mandatory')
uas7022NearEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 2, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022NearEndIntervalIndex"), (0, "GDCUAS7022-MIB", "uas7022NearEndIntervalNumber"))
if mibBuilder.loadTexts: uas7022NearEndIntervalEntry.setStatus('mandatory')
uas7022NearEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndIntervalIndex.setStatus('mandatory')
uas7022NearEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndIntervalNumber.setStatus('mandatory')
uas7022NearEndIntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndIntervalStat.setStatus('mandatory')
uas7022NearEndCurrent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 3), )
if mibBuilder.loadTexts: uas7022NearEndCurrent24HrTable.setStatus('mandatory')
uas7022NearEndCurrent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 3, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022NearEndCurrent24HrIndex"))
if mibBuilder.loadTexts: uas7022NearEndCurrent24HrEntry.setStatus('mandatory')
uas7022NearEndCurrent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndCurrent24HrIndex.setStatus('mandatory')
uas7022NearEndCurrent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndCurrent24HrStat.setStatus('mandatory')
uas7022NearEndRecent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 4), )
if mibBuilder.loadTexts: uas7022NearEndRecent24HrTable.setStatus('mandatory')
uas7022NearEndRecent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 4, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022NearEndRecent24HrIndex"))
if mibBuilder.loadTexts: uas7022NearEndRecent24HrEntry.setStatus('mandatory')
uas7022NearEndRecent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndRecent24HrIndex.setStatus('mandatory')
uas7022NearEndRecent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndRecent24HrStat.setStatus('mandatory')
uas7022NearEndUnavailableTimeRegTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 9), )
if mibBuilder.loadTexts: uas7022NearEndUnavailableTimeRegTable.setStatus('mandatory')
uas7022NearEndUnavailableTimeRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 9, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022NearEndUnavailableTimeRegIndex"), (0, "GDCUAS7022-MIB", "uas7022NearEndUnavailableTimeRegNumber"))
if mibBuilder.loadTexts: uas7022NearEndUnavailableTimeRegEntry.setStatus('mandatory')
uas7022NearEndUnavailableTimeRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndUnavailableTimeRegIndex.setStatus('mandatory')
uas7022NearEndUnavailableTimeRegNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndUnavailableTimeRegNumber.setStatus('mandatory')
uas7022NearEndUnavailableTimeRegStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndUnavailableTimeRegStart.setStatus('mandatory')
uas7022NearEndUnavailableTimeRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndUnavailableTimeRegStop.setStatus('mandatory')
uas7022FarEndCurrent15MinTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 5), )
if mibBuilder.loadTexts: uas7022FarEndCurrent15MinTable.setStatus('mandatory')
uas7022FarEndCurrent15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 5, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022FarEndCurrent15MinIndex"))
if mibBuilder.loadTexts: uas7022FarEndCurrent15MinEntry.setStatus('mandatory')
uas7022FarEndCurrent15MinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndCurrent15MinIndex.setStatus('mandatory')
uas7022FarEndCurrent15MinStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndCurrent15MinStat.setStatus('mandatory')
uas7022FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 6), )
if mibBuilder.loadTexts: uas7022FarEndIntervalTable.setStatus('mandatory')
uas7022FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 6, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022FarEndIntervalIndex"), (0, "GDCUAS7022-MIB", "uas7022FarEndIntervalNumber"))
if mibBuilder.loadTexts: uas7022FarEndIntervalEntry.setStatus('mandatory')
uas7022FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndIntervalIndex.setStatus('mandatory')
uas7022FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndIntervalNumber.setStatus('mandatory')
uas7022FarEndIntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndIntervalStat.setStatus('mandatory')
uas7022FarEndCurrent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 7), )
if mibBuilder.loadTexts: uas7022FarEndCurrent24HrTable.setStatus('mandatory')
uas7022FarEndCurrent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 7, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022FarEndCurrent24HrIndex"))
if mibBuilder.loadTexts: uas7022FarEndCurrent24HrEntry.setStatus('mandatory')
uas7022FarEndCurrent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndCurrent24HrIndex.setStatus('mandatory')
uas7022FarEndCurrent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndCurrent24HrStat.setStatus('mandatory')
uas7022FarEndRecent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 8), )
if mibBuilder.loadTexts: uas7022FarEndRecent24HrTable.setStatus('mandatory')
uas7022FarEndRecent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 8, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022FarEndRecent24HrIndex"))
if mibBuilder.loadTexts: uas7022FarEndRecent24HrEntry.setStatus('mandatory')
uas7022FarEndRecent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndRecent24HrIndex.setStatus('mandatory')
uas7022FarEndRecent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndRecent24HrStat.setStatus('mandatory')
uas7022FarEndUnavailableTimeRegTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 10), )
if mibBuilder.loadTexts: uas7022FarEndUnavailableTimeRegTable.setStatus('mandatory')
uas7022FarEndUnavailableTimeRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 10, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022FarEndUnavailableTimeRegIndex"), (0, "GDCUAS7022-MIB", "uas7022FarEndUnavailableTimeRegNumber"))
if mibBuilder.loadTexts: uas7022FarEndUnavailableTimeRegEntry.setStatus('mandatory')
uas7022FarEndUnavailableTimeRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndUnavailableTimeRegIndex.setStatus('mandatory')
uas7022FarEndUnavailableTimeRegNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndUnavailableTimeRegNumber.setStatus('mandatory')
uas7022FarEndUnavailableTimeRegStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndUnavailableTimeRegStart.setStatus('mandatory')
uas7022FarEndUnavailableTimeRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndUnavailableTimeRegStop.setStatus('mandatory')
uas7022NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 1))
uas7022DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 2))
uas7022PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 3))
uas7022TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 4))
uas7022LCV = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 5))
uas7022LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 6))
uas7022LossOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 7))
uas7022AlarmIndSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 8))
uas7022NEES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 9))
uas7022NEBBE = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 10))
uas7022NESES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 11))
uas7022NEUAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 12))
uas7022FEES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 13))
uas7022FEBBE = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 14))
uas7022FESES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 15))
uas7022FEUAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 16))
uas7022RAI = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 13, 6, 17))
uas7022NearEndAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 1), )
if mibBuilder.loadTexts: uas7022NearEndAlarmConfigTable.setStatus('mandatory')
uas7022NearEndAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 1, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022NearEndAlarmConfigIndex"), (0, "GDCUAS7022-MIB", "uas7022NearEndAlarmConfigIdentifier"))
if mibBuilder.loadTexts: uas7022NearEndAlarmConfigEntry.setStatus('mandatory')
uas7022NearEndAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndAlarmConfigIndex.setStatus('mandatory')
uas7022NearEndAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022NearEndAlarmConfigIdentifier.setStatus('mandatory')
uas7022NearEndAlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022NearEndAlarmCountWindow.setStatus('mandatory')
uas7022NearEndAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022NearEndAlarmCountThreshold.setStatus('mandatory')
uas7022FarEndAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 2), )
if mibBuilder.loadTexts: uas7022FarEndAlarmConfigTable.setStatus('mandatory')
uas7022FarEndAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 2, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022FarEndAlarmConfigIndex"), (0, "GDCUAS7022-MIB", "uas7022FarEndAlarmConfigIdentifier"))
if mibBuilder.loadTexts: uas7022FarEndAlarmConfigEntry.setStatus('mandatory')
uas7022FarEndAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndAlarmConfigIndex.setStatus('mandatory')
uas7022FarEndAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022FarEndAlarmConfigIdentifier.setStatus('mandatory')
uas7022FarEndAlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022FarEndAlarmCountWindow.setStatus('mandatory')
uas7022FarEndAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022FarEndAlarmCountThreshold.setStatus('mandatory')
uas7022LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3), )
if mibBuilder.loadTexts: uas7022LocalAlarmConfigTable.setStatus('mandatory')
uas7022LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1), ).setIndexNames((0, "GDCUAS7022-MIB", "uas7022LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: uas7022LocalAlarmConfigEntry.setStatus('mandatory')
uas7022LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7022LocalAlarmConfigIndex.setStatus('mandatory')
uas7022UASNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022UASNE.setStatus('mandatory')
uas7022SESNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022SESNE.setStatus('mandatory')
uas7022BBENE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022BBENE.setStatus('mandatory')
uas7022ESNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022ESNE.setStatus('mandatory')
uas7022UASFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022UASFE.setStatus('mandatory')
uas7022SESFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022SESFE.setStatus('mandatory')
uas7022BBEFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022BBEFE.setStatus('mandatory')
uas7022ESFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022ESFE.setStatus('mandatory')
uas7022LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022LOS.setStatus('mandatory')
uas7022LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022LOF.setStatus('mandatory')
uas7022AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022AIS.setStatus('mandatory')
uas7022TmgLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022TmgLoss.setStatus('mandatory')
uas7022LCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022LCVs.setStatus('mandatory')
uas7022NtwkRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 13, 7, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7022NtwkRAI.setStatus('mandatory')
mibBuilder.exportSymbols("GDCUAS7022-MIB", uas7022NearEndUnavailableTimeRegStop=uas7022NearEndUnavailableTimeRegStop, uas7022DiagRxErrAlm=uas7022DiagRxErrAlm, uas7022NearEndResetStats=uas7022NearEndResetStats, uas7022SESFE=uas7022SESFE, uas7022SystemTimingGenStatus=uas7022SystemTimingGenStatus, uas7022TimingLoss=uas7022TimingLoss, uas7022BBEFE=uas7022BBEFE, uas7022FarEndResetStats=uas7022FarEndResetStats, uas7022DownloadingMode=uas7022DownloadingMode, uas7022ESFE=uas7022ESFE, uas7022FDLMode=uas7022FDLMode, uas7022AlarmConfig=uas7022AlarmConfig, uas7022NearEndIntervalEntry=uas7022NearEndIntervalEntry, uas7022NEUAS=uas7022NEUAS, uas7022Configuration=uas7022Configuration, uas7022=uas7022, uas7022FarEndCurrent15MinStat=uas7022FarEndCurrent15MinStat, uas7022StoredFirmwareStatus=uas7022StoredFirmwareStatus, uas7022NearEndCurrent24HrEntry=uas7022NearEndCurrent24HrEntry, uas7022TestExecutionStatus=uas7022TestExecutionStatus, uas7022NearEndUnavailableTimeRegIndex=uas7022NearEndUnavailableTimeRegIndex, uas7022InterfaceType=uas7022InterfaceType, uas7022FarEndCurrent15MinIndex=uas7022FarEndCurrent15MinIndex, uas7022SESNE=uas7022SESNE, uas7022SysUpTime=uas7022SysUpTime, uas7022FarEndCurrent24HrIndex=uas7022FarEndCurrent24HrIndex, uas7022FallbackClockSource=uas7022FallbackClockSource, uas7022NearEndAlarmCountThreshold=uas7022NearEndAlarmCountThreshold, uas7022LocalAlarmConfigIndex=uas7022LocalAlarmConfigIndex, uas7022TmgLoss=uas7022TmgLoss, uas7022NIUaCircuitID=uas7022NIUaCircuitID, uas7022NEBBE=uas7022NEBBE, uas7022UASNE=uas7022UASNE, uas7022TransmitClockSource=uas7022TransmitClockSource, uas7022UASFE=uas7022UASFE, uas7022NearEndRecent24HrStat=uas7022NearEndRecent24HrStat, uas7022FarEndStatLastInit=uas7022FarEndStatLastInit, uas7022Diagnostics=uas7022Diagnostics, uas7022NearEndAlarmConfigTable=uas7022NearEndAlarmConfigTable, uas7022FarEndAlarmCountWindow=uas7022FarEndAlarmCountWindow, uas7022RAI=uas7022RAI, uas7022NearEndCurrent24HrStat=uas7022NearEndCurrent24HrStat, uas7022NearEndCurrent15MinIndex=uas7022NearEndCurrent15MinIndex, uas7022LCVs=uas7022LCVs, uas7022NearEndAlarmConfigIdentifier=uas7022NearEndAlarmConfigIdentifier, uas7022ESNE=uas7022ESNE, uas7022NearEndIntervalStat=uas7022NearEndIntervalStat, uas7022LCV=uas7022LCV, uas7022BBENE=uas7022BBENE, uas7022MaintenanceLineIndex=uas7022MaintenanceLineIndex, uas7022NearEndStatLastInit=uas7022NearEndStatLastInit, uas7022NearEndCurrent15MinStat=uas7022NearEndCurrent15MinStat, uas7022DefaultInit=uas7022DefaultInit, uas7022ActiveFirmwareRev=uas7022ActiveFirmwareRev, uas7022DiagIndex=uas7022DiagIndex, uas7022NearEndAlarmConfigEntry=uas7022NearEndAlarmConfigEntry, uas7022LossOfFrame=uas7022LossOfFrame, uas7022Performance=uas7022Performance, uas7022NearEndValidIntervals=uas7022NearEndValidIntervals, uas7022FarEndCurrent15MinTable=uas7022FarEndCurrent15MinTable, uas7022FEES=uas7022FEES, uas7022TestExceptions=uas7022TestExceptions, uas7022NoResponseAlm=uas7022NoResponseAlm, uas7022AIS=uas7022AIS, uas7022Impedance=uas7022Impedance, uas7022DiagTable=uas7022DiagTable, uas7022DiagEntry=uas7022DiagEntry, uas7022FarEndIntervalNumber=uas7022FarEndIntervalNumber, uas7022NearEndAlarmCountWindow=uas7022NearEndAlarmCountWindow, uas7022LocalAlarmConfigTable=uas7022LocalAlarmConfigTable, uas7022NIUbCircuitID=uas7022NIUbCircuitID, uas7022NearEndIntervalNumber=uas7022NearEndIntervalNumber, uas7022FEUAS=uas7022FEUAS, uas7022FarEndUnavailableTimeRegTable=uas7022FarEndUnavailableTimeRegTable, uas7022FarEndCurrent24HrStat=uas7022FarEndCurrent24HrStat, uas7022Maintenance=uas7022Maintenance, uas7022MIBversion=uas7022MIBversion, uas7022RcvrRange=uas7022RcvrRange, uas7022Framing=uas7022Framing, uas7022AlarmStatus=uas7022AlarmStatus, uas7022FarEndAlarmConfigIdentifier=uas7022FarEndAlarmConfigIdentifier, uas7022TestLimit=uas7022TestLimit, uas7022Alarms=uas7022Alarms, uas7022NearEndUnavailableTimeRegStart=uas7022NearEndUnavailableTimeRegStart, uas7022FarEndIntervalTable=uas7022FarEndIntervalTable, uas7022FarEndUnavailableTimeRegIndex=uas7022FarEndUnavailableTimeRegIndex, uas7022MaintenanceTable=uas7022MaintenanceTable, uas7022DiagConfig=uas7022DiagConfig, uas7022StoredFirmwareRev=uas7022StoredFirmwareRev, uas7022NearEndUnavailableTimeRegTable=uas7022NearEndUnavailableTimeRegTable, uas7022NearEndIntervalIndex=uas7022NearEndIntervalIndex, uas7022FarEndCurrent24HrTable=uas7022FarEndCurrent24HrTable, uas7022FarEndUnavailableTimeRegEntry=uas7022FarEndUnavailableTimeRegEntry, uas7022NearEndRecent24HrEntry=uas7022NearEndRecent24HrEntry, uas7022SwitchActiveFirmware=uas7022SwitchActiveFirmware, uas7022FarEndIntervalIndex=uas7022FarEndIntervalIndex, uas7022MaintenanceEntry=uas7022MaintenanceEntry, uas7022FESES=uas7022FESES, uas7022FarEndAlarmConfigEntry=uas7022FarEndAlarmConfigEntry, uas7022FarEndUnavailableTimeRegStart=uas7022FarEndUnavailableTimeRegStart, uas7022SysTimingGen=uas7022SysTimingGen, uas7022PowerUpAlm=uas7022PowerUpAlm, uas7022Highway=uas7022Highway, uas7022FarEndIntervalStat=uas7022FarEndIntervalStat, uas7022FarEndRecent24HrTable=uas7022FarEndRecent24HrTable, uas7022FarEndRecent24HrEntry=uas7022FarEndRecent24HrEntry, uas7022NearEndAlarmConfigIndex=uas7022NearEndAlarmConfigIndex, uas7022NearEndCurrent24HrIndex=uas7022NearEndCurrent24HrIndex, uas7022LossOfSignal=uas7022LossOfSignal, uas7022NearEndRecent24HrTable=uas7022NearEndRecent24HrTable, dsx1=dsx1, uas7022FarEndIntervalEntry=uas7022FarEndIntervalEntry, uas7022NearEndUnavailableTimeRegEntry=uas7022NearEndUnavailableTimeRegEntry, uas7022ConfigEntry=uas7022ConfigEntry, uas7022FarEndRecent24HrIndex=uas7022FarEndRecent24HrIndex, uas7022LedStatus=uas7022LedStatus, uas7022NtwkRAI=uas7022NtwkRAI, uas7022NearEndUnavailableTimeRegNumber=uas7022NearEndUnavailableTimeRegNumber, uas7022FarEndAlarmConfigTable=uas7022FarEndAlarmConfigTable, gdc=gdc, uas7022VersionEntry=uas7022VersionEntry, uas7022FarEndAlarmConfigIndex=uas7022FarEndAlarmConfigIndex, uas7022NearEndIntervalTable=uas7022NearEndIntervalTable, uas7022LOS=uas7022LOS, uas7022LOF=uas7022LOF, uas7022VersionIndex=uas7022VersionIndex, uas7022FarEndRecent24HrStat=uas7022FarEndRecent24HrStat, uas7022FarEndUnavailableTimeRegNumber=uas7022FarEndUnavailableTimeRegNumber, uas7022NearEndCurrent24HrTable=uas7022NearEndCurrent24HrTable, uas7022NEES=uas7022NEES, uas7022Version=uas7022Version, uas7022NearEndRecent24HrIndex=uas7022NearEndRecent24HrIndex, uas7022FarEndAlarmCountThreshold=uas7022FarEndAlarmCountThreshold, uas7022TimeSlot16Content=uas7022TimeSlot16Content, uas7022FEBBE=uas7022FEBBE, uas7022ConfigTable=uas7022ConfigTable, uas7022FarEndValidIntervals=uas7022FarEndValidIntervals, uas7022AlarmIndSignal=uas7022AlarmIndSignal, uas7022ConfigIndex=uas7022ConfigIndex, uas7022NESES=uas7022NESES, uas7022FarEndUnavailableTimeRegStop=uas7022FarEndUnavailableTimeRegStop, uas7022LocalAlarmConfigEntry=uas7022LocalAlarmConfigEntry, uas7022VersionTable=uas7022VersionTable, uas7022NearEndCurrent15MinEntry=uas7022NearEndCurrent15MinEntry, uas7022FarEndCurrent15MinEntry=uas7022FarEndCurrent15MinEntry, uas7022FarEndCurrent24HrEntry=uas7022FarEndCurrent24HrEntry, uas7022NearEndCurrent15MinTable=uas7022NearEndCurrent15MinTable, uas7022SoftReset=uas7022SoftReset)
