#
# PySNMP MIB module SSG-5000-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SSG-5000-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:02:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
shastaExperiment, = mibBuilder.importSymbols("SHASTA-MIB", "shastaExperiment")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Counter32, Gauge32, Integer32, IpAddress, iso, NotificationType, Bits, Counter64, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Counter32", "Gauge32", "Integer32", "IpAddress", "iso", "NotificationType", "Bits", "Counter64", "ModuleIdentity", "MibIdentifier")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ssg5000ChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3199, 10, 28))
if mibBuilder.loadTexts: ssg5000ChassisMIB.setLastUpdated('9907140000Z')
if mibBuilder.loadTexts: ssg5000ChassisMIB.setOrganization('Nortel Networks Shasta IP Services Business Unit')
class PSOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("empty", 2), ("ok", 3), ("fault", 4), ("partialFault", 5), ("diagFault", 6))

class AdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("adminStateDisabled", 0), ("adminStateEnabled", 1), ("adminStateAbsent", 2), ("adminStateStandby", 3))

class OperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("operStateDown", 0), ("operStateUP", 1), ("operStateAbsent", 2), ("operStateStandby", 3))

class PsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ac264", 1), ("dc48V", 2), ("empty", 3))

class CardType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("cardAbsent", 0), ("controlManagementCard", 1), ("subscriberServiceCard", 2), ("switchFabricCard", 3), ("oc3AtmLineCard", 4), ("ds3AtmLineCard", 5), ("hsiLineCard", 6), ("e3AtmLineCard", 7), ("oc12SAtmLineCard", 8), ("oc12DAtmLineCard", 9), ("cardTypeUnknown", 10), ("ds3ChannelizedFrameCard", 11), ("ethnetLineCard", 12))

class SystemAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("nodeDead", 1), ("nodeReboot", 2), ("fanDead", 3), ("fanFailure", 4), ("temperatureOverheat", 5), ("dcPowerFailure", 6), ("acDcShelfFailure", 7), ("acDcShelfOverheat", 8), ("batteryFailure", 9), ("batteryOverheat", 10), ("pcmciaCardInserted", 11), ("pcmciaCardRemoved", 12), ("sysSSMsAreUp", 13))

class CardAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("cardMissing", 1), ("cardInserted", 2), ("cardRemoved", 3), ("cardMismatch", 4), ("cardBoot", 5), ("cardReboot", 6), ("cardRevMismatch", 7), ("cardFailed", 8), ("cardMalfunction", 9), ("cardFailDiag", 10), ("cardDead", 11), ("cardSwitchToActive", 12), ("cardStandbyNotInRedundant", 13))

class ALCPortAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("portUp", 1), ("portDown", 2), ("portLoop", 3), ("portLOS", 4), ("portLOF", 5), ("portLAIS", 6), ("portLRDI", 7), ("portLOP", 8), ("portPAIS", 9), ("portPRDI", 10), ("portLCD", 11))

class SSMAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("ssmFailed", 1), ("ssmReset", 2), ("ssmUp", 3), ("ssmDead", 4), ("ssmDown", 5))

class CT3PortAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("ct3Failed", 1), ("ct3Reset", 2), ("ct3Up", 3), ("ct3Dead", 4), ("ct3Down", 5), ("ct3DS3LOS", 6), ("ct3DS3OOF", 7), ("ct3DS3AIS", 8), ("ct3DS3FERF", 9), ("ct3DS3RED", 10))

class CT3DS2AlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ds2OOF", 1), ("ds2AIS", 2), ("ds2RAI", 3))

class CT3DS1AlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ds1OOF", 1), ("ds1AIS", 2), ("ds1RAI", 3))

class ServiceAlarmSeverityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("infomational", 1), ("warning", 2), ("critical", 3))

class ETHPortAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("ethLinkDown", 1))

class ALARMStateType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("alarmOccur", 1), ("alarmClear", 2))

class PVCAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("connectionDown", 1))

ssg5000ChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1))
ssg5000ChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1))
ssg5000SysHealthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2))
ssg5000TrapIndexGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3))
ssg5000SysStatus = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysStatus.setStatus('current')
ssg5000SysFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 1), PSOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysFanStatus.setStatus('current')
ssg5000SysTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("overTemperature", 2), ("underTemperature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysTempStatus.setStatus('current')
ssg5000SysFabricCellsDropped = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysFabricCellsDropped.setStatus('current')
ssg5000SysFabricMemUtilization = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysFabricMemUtilization.setStatus('current')
ssg5000SysActiveAccessConn = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysActiveAccessConn.setStatus('current')
ssg5000SysActiveTrunkConn = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysActiveTrunkConn.setStatus('current')
ssg5000SysPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysPacketsDropped.setStatus('current')
ssg5000SysCellsDropped = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SysCellsDropped.setStatus('current')
ssg5000CmcCPUIdleTics5Sec = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUIdleTics5Sec.setStatus('current')
ssg5000CmcCPUTotalTics5Sec = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUTotalTics5Sec.setStatus('current')
ssg5000CmcCPUIdleTicsReboot = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUIdleTicsReboot.setStatus('current')
ssg5000CmcCPUTotalTicsReboot = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUTotalTicsReboot.setStatus('current')
ssg5000CmcCPUMemHeapFree = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUMemHeapFree.setStatus('current')
ssg5000CmcCPUMemHeapTotal = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUMemHeapTotal.setStatus('current')
ssg5000CmcCPUMBufClusterFree = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUMBufClusterFree.setStatus('current')
ssg5000CmcCPUMBufClusterTotal = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUMBufClusterTotal.setStatus('current')
ssg5000CmcCPUAverageLoad = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CmcCPUAverageLoad.setStatus('current')
ssg5000SspCPUnoEncryptionAverageLoad = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SspCPUnoEncryptionAverageLoad.setStatus('current')
ssg5000SspCPUwEncryptionAverageLoad = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SspCPUwEncryptionAverageLoad.setStatus('current')
ssg5000SlotTable = MibTable((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2), )
if mibBuilder.loadTexts: ssg5000SlotTable.setStatus('current')
ssg5000SlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1), ).setIndexNames((0, "SSG-5000-CHASSIS-MIB", "ssg5000SlotIndex"))
if mibBuilder.loadTexts: ssg5000SlotEntry.setStatus('current')
ssg5000SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotIndex.setStatus('current')
ssg5000SlotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 2), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotCardType.setStatus('current')
ssg5000SlotCardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotCardDescr.setStatus('current')
ssg5000SlotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 4), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotAdminStatus.setStatus('current')
ssg5000SlotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotOperStatus.setStatus('current')
ssg5000SlotCardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotCardNumPorts.setStatus('current')
ssg5000SlotCardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotCardHwVersion.setStatus('current')
ssg5000SlotCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotCardSerialNumber.setStatus('current')
ssg5000SlotAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SlotAlarms.setStatus('current')
ssg5000SSMStatTable = MibTable((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3), )
if mibBuilder.loadTexts: ssg5000SSMStatTable.setStatus('current')
ssg5000SSMStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1), ).setIndexNames((0, "SSG-5000-CHASSIS-MIB", "ssg5000SlotIndex"), (0, "SSG-5000-CHASSIS-MIB", "ssg5000SSMIndex"))
if mibBuilder.loadTexts: ssg5000SSMStatEntry.setStatus('current')
ssg5000SSMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMIndex.setStatus('current')
ssg5000SSMAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 2), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMAdminStatus.setStatus('current')
ssg5000SSMOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMOperStatus.setStatus('current')
ssg5000SSMCPUIdleTics5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUIdleTics5Sec.setStatus('current')
ssg5000SSMCPUTics5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUTics5Sec.setStatus('current')
ssg5000SSMCPUIdleTicsReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUIdleTicsReboot.setStatus('current')
ssg5000SSMCPUTicsReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUTicsReboot.setStatus('current')
ssg5000SSMCPUMemHeapFree = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUMemHeapFree.setStatus('current')
ssg5000SSMCPUMemHeapTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUMemHeapTotal.setStatus('current')
ssg5000SSMCPUMBufClusterFree = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUMBufClusterFree.setStatus('current')
ssg5000SSMCPUMBufClusterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMCPUMBufClusterTotal.setStatus('current')
ssg5000SSMActiveAccessConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMActiveAccessConn.setStatus('current')
ssg5000SSMActiveSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMActiveSubscribers.setStatus('current')
ssg5000SSMPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMPacketsDropped.setStatus('current')
ssg5000SSMPacketsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMPacketsForwarded.setStatus('current')
ssg5000SSMAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000SSMAlarms.setStatus('current')
ssg5000ALCPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4), )
if mibBuilder.loadTexts: ssg5000ALCPortStatTable.setStatus('current')
ssg5000ALCPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1), ).setIndexNames((0, "SSG-5000-CHASSIS-MIB", "ssg5000SlotIndex"), (0, "SSG-5000-CHASSIS-MIB", "ssg5000ALCPortIndex"))
if mibBuilder.loadTexts: ssg5000ALCPortStatEntry.setStatus('current')
ssg5000ALCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortIndex.setStatus('current')
ssg5000ALCPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortIfIndex.setStatus('current')
ssg5000ALCPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 3), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortAdminStatus.setStatus('current')
ssg5000ALCPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 4), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortOperStatus.setStatus('current')
ssg5000ALCPortActiveAccessConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortActiveAccessConn.setStatus('current')
ssg5000ALCPortActiveTrunkConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortActiveTrunkConn.setStatus('current')
ssg5000ALCPortCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortCellsReceived.setStatus('current')
ssg5000ALCPortCellsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortCellsTransmitted.setStatus('current')
ssg5000ALCPortCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortCellsDropped.setStatus('current')
ssg5000ALCPortAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ALCPortAlarms.setStatus('current')
ssg5000ETHPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 5), )
if mibBuilder.loadTexts: ssg5000ETHPortStatTable.setStatus('current')
ssg5000ETHPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 5, 1), ).setIndexNames((0, "SSG-5000-CHASSIS-MIB", "ssg5000SlotIndex"), (0, "SSG-5000-CHASSIS-MIB", "ssg5000ETHPortIndex"))
if mibBuilder.loadTexts: ssg5000ETHPortStatEntry.setStatus('current')
ssg5000ETHPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ETHPortIndex.setStatus('current')
ssg5000ETHPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 5, 1, 2), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ETHPortAdminStatus.setStatus('current')
ssg5000ETHPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 5, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ETHPortOperStatus.setStatus('current')
ssg5000ETHPortAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000ETHPortAlarms.setStatus('current')
ssg5000CT3PortStatTable = MibTable((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 6), )
if mibBuilder.loadTexts: ssg5000CT3PortStatTable.setStatus('current')
ssg5000CT3PortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 6, 1), ).setIndexNames((0, "SSG-5000-CHASSIS-MIB", "ssg5000SlotIndex"), (0, "SSG-5000-CHASSIS-MIB", "ssg5000CT3PortIndex"))
if mibBuilder.loadTexts: ssg5000CT3PortStatEntry.setStatus('current')
ssg5000CT3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CT3PortIndex.setStatus('current')
ssg5000CT3PortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 6, 1, 2), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CT3PortAdminStatus.setStatus('current')
ssg5000CT3PortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 6, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CT3PortOperStatus.setStatus('current')
ssg5000CT3PortAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssg5000CT3PortAlarms.setStatus('current')
ssg5000TrapSystemAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 1), SystemAlarmType())
if mibBuilder.loadTexts: ssg5000TrapSystemAlarmId.setStatus('current')
ssg5000TrapCardAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 2), CardAlarmType())
if mibBuilder.loadTexts: ssg5000TrapCardAlarmId.setStatus('current')
ssg5000TrapALCPortAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 3), ALCPortAlarmType())
if mibBuilder.loadTexts: ssg5000TrapALCPortAlarmId.setStatus('current')
ssg5000TrapSSMAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 4), SSMAlarmType())
if mibBuilder.loadTexts: ssg5000TrapSSMAlarmId.setStatus('current')
ssg5000TrapSlotId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 5), Integer32())
if mibBuilder.loadTexts: ssg5000TrapSlotId.setStatus('current')
ssg5000TrapCardType = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 6), CardType())
if mibBuilder.loadTexts: ssg5000TrapCardType.setStatus('current')
ssg5000TrapPortId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 7), Integer32())
if mibBuilder.loadTexts: ssg5000TrapPortId.setStatus('current')
ssg5000TrapOccurClearTag = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 8), ALARMStateType())
if mibBuilder.loadTexts: ssg5000TrapOccurClearTag.setStatus('current')
ssg5000TrapPVCAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 9), PVCAlarmType())
if mibBuilder.loadTexts: ssg5000TrapPVCAlarmId.setStatus('current')
ssg5000TrapInterfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 10), Integer32())
if mibBuilder.loadTexts: ssg5000TrapInterfaceNumber.setStatus('current')
ssg5000TrapVPINumber = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 11), Integer32())
if mibBuilder.loadTexts: ssg5000TrapVPINumber.setStatus('current')
ssg5000TrapVCINumber = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 12), Integer32())
if mibBuilder.loadTexts: ssg5000TrapVCINumber.setStatus('current')
ssg5000TrapCT3PortAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 13), CT3PortAlarmType())
if mibBuilder.loadTexts: ssg5000TrapCT3PortAlarmId.setStatus('current')
ssg5000TrapETHPortAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 14), ETHPortAlarmType())
if mibBuilder.loadTexts: ssg5000TrapETHPortAlarmId.setStatus('current')
ssg5000TrapSSGHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 15), IpAddress())
if mibBuilder.loadTexts: ssg5000TrapSSGHostAddress.setStatus('current')
ssg5000TrapCT3DS2AlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 16), CT3DS2AlarmType())
if mibBuilder.loadTexts: ssg5000TrapCT3DS2AlarmId.setStatus('current')
ssg5000TrapCT3DS1AlarmId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 17), CT3DS1AlarmType())
if mibBuilder.loadTexts: ssg5000TrapCT3DS1AlarmId.setStatus('current')
ssg5000TrapDS2ChannelId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 18), Integer32())
if mibBuilder.loadTexts: ssg5000TrapDS2ChannelId.setStatus('current')
ssg5000TrapDS1ChannelId = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 19), Integer32())
if mibBuilder.loadTexts: ssg5000TrapDS1ChannelId.setStatus('current')
ssg5000TrapServiceModuleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 20), DisplayString())
if mibBuilder.loadTexts: ssg5000TrapServiceModuleAlarm.setStatus('current')
ssg5000TrapServiceAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 21), ServiceAlarmSeverityType())
if mibBuilder.loadTexts: ssg5000TrapServiceAlarmSeverity.setStatus('current')
ssg5000TrapServiceAlarmDescription = MibScalar((1, 3, 6, 1, 4, 1, 3199, 10, 28, 1, 3, 22), DisplayString())
if mibBuilder.loadTexts: ssg5000TrapServiceAlarmDescription.setStatus('current')
ssg5000MIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2))
ssg5000MIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0))
ssg5000ChassisFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 1)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000SysFanStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysTempStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000ChassisFailureNotification.setStatus('current')
ssg5000SysAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 2)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapSystemAlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000SysAlarmNotification.setStatus('current')
ssg5000CardAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 3)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardAlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000CardAlarmNotification.setStatus('current')
ssg5000PortAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 4)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapALCPortAlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapPortId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000PortAlarmNotification.setStatus('current')
ssg5000SSMAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 5)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSMAlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapPortId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000SSMAlarmNotification.setStatus('current')
ssg5000PVCAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 6)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapPVCAlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapPortId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapInterfaceNumber"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapVPINumber"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapVCINumber"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000PVCAlarmNotification.setStatus('current')
ssg5000CT3PortAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 7)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapCT3PortAlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapPortId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000CT3PortAlarmNotification.setStatus('current')
ssg5000ETHPortAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 8)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapETHPortAlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapPortId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000ETHPortAlarmNotification.setStatus('current')
ssg5000CT3DS2AlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 9)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapCT3DS2AlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapPortId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapDS2ChannelId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000CT3DS2AlarmNotification.setStatus('current')
ssg5000CT3DS1AlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 10)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapCT3DS1AlarmId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSlotId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapPortId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapDS1ChannelId"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapOccurClearTag"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000CT3DS1AlarmNotification.setStatus('current')
ssg5000ServiceAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3199, 10, 28, 2, 0, 11)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000TrapServiceModuleAlarm"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapServiceAlarmSeverity"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapServiceAlarmDescription"), ("SSG-5000-CHASSIS-MIB", "ssg5000TrapSSGHostAddress"))
if mibBuilder.loadTexts: ssg5000ServiceAlarmNotification.setStatus('current')
ssg5000ChassisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 3))
ssg5000ChassisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 3, 1))
ssg5000ChassisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3199, 10, 28, 3, 2))
ssg5000ChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3199, 10, 28, 3, 1, 1)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000ChassisMIBGroup"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysHealthMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssg5000ChassisMIBCompliance = ssg5000ChassisMIBCompliance.setStatus('current')
ssg5000ChassisMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3199, 10, 28, 3, 2, 1)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000SysStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotIndex"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotCardType"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotCardDescr"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotAdminStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotOperStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotCardNumPorts"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotCardHwVersion"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotCardSerialNumber"), ("SSG-5000-CHASSIS-MIB", "ssg5000SlotAlarms"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMIndex"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMAdminStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMOperStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUIdleTics5Sec"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUTics5Sec"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUIdleTicsReboot"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUTicsReboot"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUMemHeapFree"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUMemHeapTotal"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUMBufClusterFree"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMCPUMBufClusterTotal"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMActiveAccessConn"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMActiveSubscribers"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMPacketsDropped"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMPacketsForwarded"), ("SSG-5000-CHASSIS-MIB", "ssg5000SSMAlarms"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortIndex"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortIfIndex"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortAdminStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortOperStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortActiveAccessConn"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortActiveTrunkConn"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortCellsReceived"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortCellsTransmitted"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortCellsDropped"), ("SSG-5000-CHASSIS-MIB", "ssg5000ALCPortAlarms"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssg5000ChassisMIBGroup = ssg5000ChassisMIBGroup.setStatus('current')
ssg5000SysHealthMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3199, 10, 28, 3, 2, 2)).setObjects(("SSG-5000-CHASSIS-MIB", "ssg5000SysFanStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysTempStatus"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysFabricCellsDropped"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysFabricMemUtilization"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysActiveAccessConn"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysActiveTrunkConn"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysPacketsDropped"), ("SSG-5000-CHASSIS-MIB", "ssg5000SysCellsDropped"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUIdleTics5Sec"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUTotalTics5Sec"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUIdleTicsReboot"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUTotalTicsReboot"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUMemHeapFree"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUMemHeapTotal"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUMBufClusterFree"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUMBufClusterTotal"), ("SSG-5000-CHASSIS-MIB", "ssg5000CmcCPUAverageLoad"), ("SSG-5000-CHASSIS-MIB", "ssg5000SspCPUnoEncryptionAverageLoad"), ("SSG-5000-CHASSIS-MIB", "ssg5000SspCPUwEncryptionAverageLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssg5000SysHealthMIBGroup = ssg5000SysHealthMIBGroup.setStatus('current')
mibBuilder.exportSymbols("SSG-5000-CHASSIS-MIB", ssg5000ChassisMIBCompliances=ssg5000ChassisMIBCompliances, ssg5000SlotIndex=ssg5000SlotIndex, ssg5000TrapSlotId=ssg5000TrapSlotId, ssg5000CT3PortIndex=ssg5000CT3PortIndex, ssg5000SspCPUwEncryptionAverageLoad=ssg5000SspCPUwEncryptionAverageLoad, ssg5000SlotCardType=ssg5000SlotCardType, ssg5000SysAlarmNotification=ssg5000SysAlarmNotification, ssg5000ChassisMIBGroups=ssg5000ChassisMIBGroups, ssg5000TrapPortId=ssg5000TrapPortId, OperStatus=OperStatus, ssg5000ETHPortStatTable=ssg5000ETHPortStatTable, ALARMStateType=ALARMStateType, ssg5000SSMStatEntry=ssg5000SSMStatEntry, CardAlarmType=CardAlarmType, ssg5000TrapSSGHostAddress=ssg5000TrapSSGHostAddress, ssg5000TrapServiceModuleAlarm=ssg5000TrapServiceModuleAlarm, ssg5000CmcCPUTotalTics5Sec=ssg5000CmcCPUTotalTics5Sec, ssg5000SSMOperStatus=ssg5000SSMOperStatus, ssg5000SlotCardSerialNumber=ssg5000SlotCardSerialNumber, ssg5000PVCAlarmNotification=ssg5000PVCAlarmNotification, ssg5000ALCPortActiveAccessConn=ssg5000ALCPortActiveAccessConn, ssg5000TrapDS2ChannelId=ssg5000TrapDS2ChannelId, PsType=PsType, ssg5000ETHPortStatEntry=ssg5000ETHPortStatEntry, ssg5000ETHPortAdminStatus=ssg5000ETHPortAdminStatus, ssg5000ChassisMIB=ssg5000ChassisMIB, ssg5000SSMCPUMBufClusterTotal=ssg5000SSMCPUMBufClusterTotal, ssg5000TrapOccurClearTag=ssg5000TrapOccurClearTag, ssg5000MIBNotification=ssg5000MIBNotification, ssg5000TrapDS1ChannelId=ssg5000TrapDS1ChannelId, ssg5000TrapVCINumber=ssg5000TrapVCINumber, ssg5000ETHPortAlarms=ssg5000ETHPortAlarms, ssg5000SSMCPUTics5Sec=ssg5000SSMCPUTics5Sec, ssg5000ALCPortIfIndex=ssg5000ALCPortIfIndex, ssg5000TrapInterfaceNumber=ssg5000TrapInterfaceNumber, ssg5000SysStatus=ssg5000SysStatus, ssg5000SSMCPUMBufClusterFree=ssg5000SSMCPUMBufClusterFree, ssg5000SSMPacketsDropped=ssg5000SSMPacketsDropped, ssg5000CmcCPUMBufClusterFree=ssg5000CmcCPUMBufClusterFree, ssg5000ETHPortIndex=ssg5000ETHPortIndex, ssg5000TrapIndexGroup=ssg5000TrapIndexGroup, ssg5000CT3PortStatTable=ssg5000CT3PortStatTable, ssg5000TrapServiceAlarmSeverity=ssg5000TrapServiceAlarmSeverity, ssg5000SysFanStatus=ssg5000SysFanStatus, ssg5000CT3DS2AlarmNotification=ssg5000CT3DS2AlarmNotification, ssg5000SSMCPUMemHeapTotal=ssg5000SSMCPUMemHeapTotal, ssg5000TrapServiceAlarmDescription=ssg5000TrapServiceAlarmDescription, ssg5000SSMAlarms=ssg5000SSMAlarms, ssg5000SspCPUnoEncryptionAverageLoad=ssg5000SspCPUnoEncryptionAverageLoad, ssg5000MIBNotificationPrefix=ssg5000MIBNotificationPrefix, ssg5000TrapALCPortAlarmId=ssg5000TrapALCPortAlarmId, ssg5000SlotOperStatus=ssg5000SlotOperStatus, ssg5000SSMIndex=ssg5000SSMIndex, ssg5000SlotCardNumPorts=ssg5000SlotCardNumPorts, ssg5000TrapCardAlarmId=ssg5000TrapCardAlarmId, ssg5000ALCPortCellsTransmitted=ssg5000ALCPortCellsTransmitted, ssg5000ALCPortCellsReceived=ssg5000ALCPortCellsReceived, ssg5000CT3PortAdminStatus=ssg5000CT3PortAdminStatus, ssg5000ChassisMIBGroup=ssg5000ChassisMIBGroup, ssg5000CmcCPUIdleTics5Sec=ssg5000CmcCPUIdleTics5Sec, ssg5000ALCPortIndex=ssg5000ALCPortIndex, ssg5000ETHPortAlarmNotification=ssg5000ETHPortAlarmNotification, ssg5000TrapCT3DS1AlarmId=ssg5000TrapCT3DS1AlarmId, CT3DS2AlarmType=CT3DS2AlarmType, ssg5000ALCPortActiveTrunkConn=ssg5000ALCPortActiveTrunkConn, ssg5000SysHealthGroup=ssg5000SysHealthGroup, ssg5000SSMPacketsForwarded=ssg5000SSMPacketsForwarded, ssg5000SysActiveAccessConn=ssg5000SysActiveAccessConn, ssg5000SSMCPUIdleTicsReboot=ssg5000SSMCPUIdleTicsReboot, ssg5000CT3PortOperStatus=ssg5000CT3PortOperStatus, CT3DS1AlarmType=CT3DS1AlarmType, ALCPortAlarmType=ALCPortAlarmType, CT3PortAlarmType=CT3PortAlarmType, ssg5000SSMAdminStatus=ssg5000SSMAdminStatus, ServiceAlarmSeverityType=ServiceAlarmSeverityType, CardType=CardType, PVCAlarmType=PVCAlarmType, ssg5000ChassisMIBObjects=ssg5000ChassisMIBObjects, ssg5000ALCPortOperStatus=ssg5000ALCPortOperStatus, ssg5000CmcCPUMBufClusterTotal=ssg5000CmcCPUMBufClusterTotal, ssg5000TrapSSMAlarmId=ssg5000TrapSSMAlarmId, ssg5000TrapPVCAlarmId=ssg5000TrapPVCAlarmId, ssg5000CmcCPUTotalTicsReboot=ssg5000CmcCPUTotalTicsReboot, ssg5000SSMCPUIdleTics5Sec=ssg5000SSMCPUIdleTics5Sec, ssg5000SlotCardDescr=ssg5000SlotCardDescr, ssg5000TrapETHPortAlarmId=ssg5000TrapETHPortAlarmId, PYSNMP_MODULE_ID=ssg5000ChassisMIB, ssg5000CT3PortAlarms=ssg5000CT3PortAlarms, ssg5000SysActiveTrunkConn=ssg5000SysActiveTrunkConn, ssg5000TrapCardType=ssg5000TrapCardType, ssg5000ChassisFailureNotification=ssg5000ChassisFailureNotification, ssg5000SysFabricMemUtilization=ssg5000SysFabricMemUtilization, ssg5000CmcCPUMemHeapTotal=ssg5000CmcCPUMemHeapTotal, PSOperStatus=PSOperStatus, ssg5000CT3PortAlarmNotification=ssg5000CT3PortAlarmNotification, ssg5000CardAlarmNotification=ssg5000CardAlarmNotification, ssg5000SSMCPUTicsReboot=ssg5000SSMCPUTicsReboot, ssg5000CmcCPUAverageLoad=ssg5000CmcCPUAverageLoad, ssg5000CT3DS1AlarmNotification=ssg5000CT3DS1AlarmNotification, ssg5000TrapSystemAlarmId=ssg5000TrapSystemAlarmId, ssg5000SSMActiveAccessConn=ssg5000SSMActiveAccessConn, ssg5000TrapVPINumber=ssg5000TrapVPINumber, ssg5000SysFabricCellsDropped=ssg5000SysFabricCellsDropped, ssg5000SSMAlarmNotification=ssg5000SSMAlarmNotification, ssg5000CT3PortStatEntry=ssg5000CT3PortStatEntry, ETHPortAlarmType=ETHPortAlarmType, SystemAlarmType=SystemAlarmType, ssg5000SSMStatTable=ssg5000SSMStatTable, ssg5000SysPacketsDropped=ssg5000SysPacketsDropped, ssg5000SysCellsDropped=ssg5000SysCellsDropped, ssg5000ChassisMIBConformance=ssg5000ChassisMIBConformance, ssg5000ALCPortAdminStatus=ssg5000ALCPortAdminStatus, ssg5000CmcCPUMemHeapFree=ssg5000CmcCPUMemHeapFree, ssg5000SSMActiveSubscribers=ssg5000SSMActiveSubscribers, ssg5000SlotAlarms=ssg5000SlotAlarms, ssg5000ServiceAlarmNotification=ssg5000ServiceAlarmNotification, ssg5000SysTempStatus=ssg5000SysTempStatus, ssg5000ALCPortStatEntry=ssg5000ALCPortStatEntry, ssg5000ALCPortAlarms=ssg5000ALCPortAlarms, ssg5000SlotCardHwVersion=ssg5000SlotCardHwVersion, ssg5000SlotEntry=ssg5000SlotEntry, ssg5000ALCPortCellsDropped=ssg5000ALCPortCellsDropped, ssg5000ChassisMIBCompliance=ssg5000ChassisMIBCompliance, ssg5000SysHealthMIBGroup=ssg5000SysHealthMIBGroup, ssg5000SlotAdminStatus=ssg5000SlotAdminStatus, ssg5000TrapCT3DS2AlarmId=ssg5000TrapCT3DS2AlarmId, ssg5000SlotTable=ssg5000SlotTable, ssg5000TrapCT3PortAlarmId=ssg5000TrapCT3PortAlarmId, ssg5000PortAlarmNotification=ssg5000PortAlarmNotification, ssg5000CmcCPUIdleTicsReboot=ssg5000CmcCPUIdleTicsReboot, ssg5000ChassisGroup=ssg5000ChassisGroup, ssg5000SSMCPUMemHeapFree=ssg5000SSMCPUMemHeapFree, ssg5000ETHPortOperStatus=ssg5000ETHPortOperStatus, SSMAlarmType=SSMAlarmType, AdminStatus=AdminStatus, ssg5000ALCPortStatTable=ssg5000ALCPortStatTable)
