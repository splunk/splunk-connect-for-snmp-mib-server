#
# PySNMP MIB module DSD-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSD-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, Integer32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, enterprises, Gauge32, Unsigned32, ObjectIdentity, TimeTicks, MibIdentifier, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Integer32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "enterprises", "Gauge32", "Unsigned32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Counter32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500dsdControls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 3))
class DisplayString(OctetString):
    pass

cdx6500GCTDSDTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15), )
if mibBuilder.loadTexts: cdx6500GCTDSDTable.setStatus('mandatory')
cdx6500dsdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1), ).setIndexNames((0, "DSD-OPT-MIB", "cdx6500dsdCfgMainChanNum"))
if mibBuilder.loadTexts: cdx6500dsdCfgEntry.setStatus('mandatory')
cdx6500dsdCfgMainChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdCfgMainChanNum.setStatus('mandatory')
cdx6500dsdMainChanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanAddr.setStatus('mandatory')
cdx6500dsdCallControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 50))).clone(namedValues=NamedValues(("callOptAuto", 1), ("newvalCallOptNone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdCallControl.setStatus('mandatory')
cdx6500dsdMainChanAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanAutocallMnem.setStatus('mandatory')
cdx6500dsdAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdAutocallTimeout.setStatus('mandatory')
cdx6500dsdMaxAutocallTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMaxAutocallTries.setStatus('mandatory')
cdx6500dsdSubChanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanAddr.setStatus('mandatory')
cdx6500dsdNumOfSubChans = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdNumOfSubChans.setStatus('mandatory')
cdx6500OSTDSDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2))
cdx6500dsdMainChanStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: cdx6500dsdMainChanStatTable.setStatus('mandatory')
cdx6500dsdMainChanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "DSD-OPT-MIB", "cdx6500dsdStatMainChanNum"))
if mibBuilder.loadTexts: cdx6500dsdMainChanStatEntry.setStatus('mandatory')
cdx6500dsdStatMainChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdStatMainChanNum.setStatus('mandatory')
cdx6500dsdMainChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 50))).clone(namedValues=NamedValues(("pvc", 1), ("newvalSvc", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanType.setStatus('mandatory')
cdx6500dsdMainChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 50))).clone(namedValues=NamedValues(("dsdCalling", 1), ("dsdConnected", 2), ("newvalDsdDisconnected", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanState.setStatus('mandatory')
cdx6500dsdMainChanRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanRemoteAddr.setStatus('mandatory')
cdx6500dsdMainChanCharIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanCharIn.setStatus('mandatory')
cdx6500dsdMainChanCharOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanCharOut.setStatus('mandatory')
cdx6500dsdMainChanPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanPktIn.setStatus('mandatory')
cdx6500dsdMainChanPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdMainChanPktOut.setStatus('mandatory')
cdx6500dsdSubChanStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2), )
if mibBuilder.loadTexts: cdx6500dsdSubChanStatTable.setStatus('mandatory')
cdx6500dsdSubChanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1), ).setIndexNames((0, "DSD-OPT-MIB", "cdx6500dsdDropStatMainChanNum"), (0, "DSD-OPT-MIB", "cdx6500dsdDropStatSubChanNum"))
if mibBuilder.loadTexts: cdx6500dsdSubChanStatEntry.setStatus('mandatory')
cdx6500dsdDropStatMainChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdDropStatMainChanNum.setStatus('mandatory')
cdx6500dsdDropStatSubChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdDropStatSubChanNum.setStatus('mandatory')
cdx6500dsdSubChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 50))).clone(namedValues=NamedValues(("pvc", 1), ("newvalSvc", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanType.setStatus('mandatory')
cdx6500dsdSubChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 50))).clone(namedValues=NamedValues(("dsdCalling", 1), ("dsdConnected", 2), ("newvalDsdDisconnected", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanState.setStatus('mandatory')
cdx6500dsdSubChanRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanRemoteAddr.setStatus('mandatory')
cdx6500dsdSubChanCharIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanCharIn.setStatus('mandatory')
cdx6500dsdSubChanCharOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanCharOut.setStatus('mandatory')
cdx6500dsdSubChanPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanPktIn.setStatus('mandatory')
cdx6500dsdSubChanPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dsdSubChanPktOut.setStatus('mandatory')
cdx6500dsdBoot = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500dsdBoot.setStatus('mandatory')
cdx6500dsdResetStats = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500dsdResetStats.setStatus('mandatory')
mibBuilder.exportSymbols("DSD-OPT-MIB", cdx6500dsdMaxAutocallTries=cdx6500dsdMaxAutocallTries, cdx6500dsdSubChanPktIn=cdx6500dsdSubChanPktIn, cdx6500dsdCfgEntry=cdx6500dsdCfgEntry, cdx6500dsdResetStats=cdx6500dsdResetStats, cdx6500dsdNumOfSubChans=cdx6500dsdNumOfSubChans, cdx6500dsdDropStatSubChanNum=cdx6500dsdDropStatSubChanNum, cdx6500dsdCfgMainChanNum=cdx6500dsdCfgMainChanNum, cdx6500dsdSubChanPktOut=cdx6500dsdSubChanPktOut, cdx6500dsdSubChanStatTable=cdx6500dsdSubChanStatTable, cdx6500dsdAutocallTimeout=cdx6500dsdAutocallTimeout, cdx6500dsdMainChanCharOut=cdx6500dsdMainChanCharOut, cdx6500dsdMainChanType=cdx6500dsdMainChanType, cdx6500dsdMainChanPktIn=cdx6500dsdMainChanPktIn, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, cdx6500dsdCallControl=cdx6500dsdCallControl, cdx6500dsdSubChanAddr=cdx6500dsdSubChanAddr, cdx6500dsdBoot=cdx6500dsdBoot, cdx6500dsdMainChanAutocallMnem=cdx6500dsdMainChanAutocallMnem, cdx6500Configuration=cdx6500Configuration, cdx6500dsdStatMainChanNum=cdx6500dsdStatMainChanNum, cdx6500dsdDropStatMainChanNum=cdx6500dsdDropStatMainChanNum, cdx6500OSTDSDGroup=cdx6500OSTDSDGroup, cdx6500dsdSubChanCharIn=cdx6500dsdSubChanCharIn, cdx6500dsdSubChanStatEntry=cdx6500dsdSubChanStatEntry, cdx6500dsdSubChanCharOut=cdx6500dsdSubChanCharOut, cdx6500GCTDSDTable=cdx6500GCTDSDTable, cdxProductSpecific=cdxProductSpecific, cdx6500dsdMainChanStatEntry=cdx6500dsdMainChanStatEntry, cdx6500dsdMainChanState=cdx6500dsdMainChanState, cdx6500Statistics=cdx6500Statistics, codex=codex, cdx6500dsdMainChanPktOut=cdx6500dsdMainChanPktOut, cdx6500dsdSubChanType=cdx6500dsdSubChanType, cdx6500dsdControls=cdx6500dsdControls, cdx6500Controls=cdx6500Controls, cdx6500dsdMainChanCharIn=cdx6500dsdMainChanCharIn, cdx6500dsdMainChanStatTable=cdx6500dsdMainChanStatTable, cdx6500=cdx6500, DisplayString=DisplayString, cdx6500dsdMainChanRemoteAddr=cdx6500dsdMainChanRemoteAddr, cdx6500dsdSubChanState=cdx6500dsdSubChanState, cdx6500dsdMainChanAddr=cdx6500dsdMainChanAddr, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500dsdSubChanRemoteAddr=cdx6500dsdSubChanRemoteAddr)
