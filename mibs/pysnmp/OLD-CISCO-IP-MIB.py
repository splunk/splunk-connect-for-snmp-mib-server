#
# PySNMP MIB module OLD-CISCO-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
ipAdEntAddr, = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr")
ipRouteDest, = mibBuilder.importSymbols("RFC1213-MIB", "ipRouteDest")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, ModuleIdentity, Unsigned32, Bits, Counter32, Gauge32, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "ModuleIdentity", "Unsigned32", "Bits", "Counter32", "Gauge32", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lip = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 4))
lipAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 1), )
if mibBuilder.loadTexts: lipAddrTable.setStatus('mandatory')
lipAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1), ).setIndexNames((0, "IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: lipAddrEntry.setStatus('mandatory')
locIPHow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPHow.setStatus('mandatory')
locIPWho = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPWho.setStatus('mandatory')
locIPHelper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPHelper.setStatus('mandatory')
locIPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPSecurity.setStatus('mandatory')
locIPRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPRedirects.setStatus('mandatory')
locIPUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPUnreach.setStatus('mandatory')
lipRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 2), )
if mibBuilder.loadTexts: lipRouteTable.setStatus('mandatory')
lipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1), ).setIndexNames((0, "RFC1213-MIB", "ipRouteDest"))
if mibBuilder.loadTexts: lipRouteEntry.setStatus('mandatory')
locRtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtMask.setStatus('mandatory')
locRtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtCount.setStatus('mandatory')
locRtUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtUses.setStatus('mandatory')
actThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actThresh.setStatus('mandatory')
actLostPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLostPkts.setStatus('mandatory')
actLostByts = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLostByts.setStatus('mandatory')
lipAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 7), )
if mibBuilder.loadTexts: lipAccountingTable.setStatus('mandatory')
lipAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1), ).setIndexNames((0, "OLD-CISCO-IP-MIB", "actSrc"), (0, "OLD-CISCO-IP-MIB", "actDst"))
if mibBuilder.loadTexts: lipAccountEntry.setStatus('mandatory')
actSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actSrc.setStatus('mandatory')
actDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDst.setStatus('mandatory')
actPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actPkts.setStatus('mandatory')
actByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actByts.setStatus('mandatory')
actViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actViolation.setStatus('mandatory')
actAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAge.setStatus('mandatory')
lipCkAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 9), )
if mibBuilder.loadTexts: lipCkAccountingTable.setStatus('mandatory')
lipCkAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1), ).setIndexNames((0, "OLD-CISCO-IP-MIB", "ckactSrc"), (0, "OLD-CISCO-IP-MIB", "ckactDst"))
if mibBuilder.loadTexts: lipCkAccountEntry.setStatus('mandatory')
ckactSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactSrc.setStatus('mandatory')
ckactDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactDst.setStatus('mandatory')
ckactPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactPkts.setStatus('mandatory')
ckactByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactByts.setStatus('mandatory')
ckactViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactViolation.setStatus('mandatory')
ckactAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactAge.setStatus('mandatory')
actCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actCheckPoint.setStatus('mandatory')
ipNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNoaccess.setStatus('mandatory')
mibBuilder.exportSymbols("OLD-CISCO-IP-MIB", ckactPkts=ckactPkts, lipAddrTable=lipAddrTable, lipRouteTable=lipRouteTable, locRtMask=locRtMask, actDst=actDst, actAge=actAge, actLostPkts=actLostPkts, locIPHow=locIPHow, actCheckPoint=actCheckPoint, ckactAge=ckactAge, actSrc=actSrc, actLostByts=actLostByts, actViolation=actViolation, locIPWho=locIPWho, ckactByts=ckactByts, locIPHelper=locIPHelper, lipRouteEntry=lipRouteEntry, locRtCount=locRtCount, ckactSrc=ckactSrc, lipAccountingTable=lipAccountingTable, actPkts=actPkts, ipNoaccess=ipNoaccess, lipAccountEntry=lipAccountEntry, actThresh=actThresh, locIPUnreach=locIPUnreach, lipCkAccountEntry=lipCkAccountEntry, locIPSecurity=locIPSecurity, lipCkAccountingTable=lipCkAccountingTable, locIPRedirects=locIPRedirects, ckactViolation=ckactViolation, locRtUses=locRtUses, actByts=actByts, ckactDst=ckactDst, lip=lip, lipAddrEntry=lipAddrEntry)
