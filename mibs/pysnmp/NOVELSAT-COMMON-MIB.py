#
# PySNMP MIB module NOVELSAT-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOVELSAT-COMMON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ItuPerceivedSeverity, = mibBuilder.importSymbols("ITU-ALARM-TC-MIB", "ItuPerceivedSeverity")
nsRoot, = mibBuilder.importSymbols("NOVELSAT-ROOT-MIB", "nsRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, IpAddress, Unsigned32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Counter64, ObjectIdentity, Bits, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "IpAddress", "Unsigned32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Counter64", "ObjectIdentity", "Bits", "iso", "TimeTicks")
DisplayString, TextualConvention, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "DateAndTime")
nsCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 37576, 2))
nsCommon.setRevisions(('2010-09-12 15:00',))
if mibBuilder.loadTexts: nsCommon.setLastUpdated('201009121500Z')
if mibBuilder.loadTexts: nsCommon.setOrganization('Novelsat')
nsCommonConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1))
if mibBuilder.loadTexts: nsCommonConfig.setStatus('current')
nsCommonConfigManagementIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3))
if mibBuilder.loadTexts: nsCommonConfigManagementIP.setStatus('current')
nsCommonConfigMgmtHostIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostIP.setStatus('current')
nsCommonConfigMgmtHostMask = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostMask.setStatus('current')
nsCommonConfigMgmtHostGW = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostGW.setStatus('current')
nsCommonConfigMgmtHostDHCP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostDHCP.setStatus('current')
nsCommonConfigMgmtHostDNS = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostDNS.setStatus('current')
nsCommonConfigManagementOta = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 8))
if mibBuilder.loadTexts: nsCommonConfigManagementOta.setStatus('current')
nsCommonConfigMgmtOtaIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtOtaIP.setStatus('current')
nsCommonConfigMgmtOtaMask = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtOtaMask.setStatus('current')
nsCommonConfigManagementRollback = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 9))
if mibBuilder.loadTexts: nsCommonConfigManagementRollback.setStatus('current')
nsCommonConfigMgmtRollbackMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtRollbackMode.setStatus('current')
nsCommonConfigMgmtRollbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 9, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtRollbackTimeout.setStatus('current')
nsCommonConfigManagementRateLimiter = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 10))
if mibBuilder.loadTexts: nsCommonConfigManagementRateLimiter.setStatus('current')
nsCommonConfigMgmtRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 10, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtRateLimit.setStatus('current')
nsCommonConfigAlarmsEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11))
if mibBuilder.loadTexts: nsCommonConfigAlarmsEvents.setStatus('current')
nsCommonConfigAlarmsEventsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1), )
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsTable.setStatus('current')
nsCommonConfigAlarmsEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigAlarmsEventsIndex"))
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsEntry.setStatus('current')
nsCommonConfigAlarmsEventsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsIndex.setStatus('current')
nsCommonConfigAlarmsEventsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsName.setStatus('current')
nsCommonConfigAlarmsEventsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsMask.setStatus('current')
nsCommonConfigAlarmsEventsRelayMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsRelayMask.setStatus('current')
nsCommonConfig10MhzClock = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4))
if mibBuilder.loadTexts: nsCommonConfig10MhzClock.setStatus('current')
nsCommonConfig10MhzClockSource = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("external", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockSource.setStatus('current')
nsCommonConfig10MhzClockOut = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockOut.setStatus('current')
nsCommonConfig10MhzClockTxPortClock = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("lband", 1), ("buc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockTxPortClock.setStatus('current')
nsCommonConfig10MhzClockLnbRefClock = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockLnbRefClock.setStatus('current')
nsCommonConfigSerialPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5))
if mibBuilder.loadTexts: nsCommonConfigSerialPort.setStatus('current')
nsCommonConfigSerialPortBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("baudRate9600", 0), ("baudRate19200", 1), ("baudRate38400", 2), ("baudRate115200", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortBaudRate.setStatus('current')
nsCommonConfigSerialPortParity = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("odd", 0), ("even", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortParity.setStatus('current')
nsCommonConfigSerialPortDataBits = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dataBits5", 0), ("dataBits6", 1), ("dataBits7", 2), ("dataBits8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortDataBits.setStatus('current')
nsCommonConfigSerialPortStopBit = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopBit1", 0), ("stopBit2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortStopBit.setStatus('current')
nsCommonConfigDateTime = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 6))
if mibBuilder.loadTexts: nsCommonConfigDateTime.setStatus('current')
nsCommonConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 6, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigDateAndTime.setStatus('current')
nsCommonConfigNetwork = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7))
if mibBuilder.loadTexts: nsCommonConfigNetwork.setStatus('current')
nsCommonConfigNetworkForwardingMode = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 1))
if mibBuilder.loadTexts: nsCommonConfigNetworkForwardingMode.setStatus('current')
nsCommonConfigNetworkMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("l2TransparentBridging", 0), ("l2VlanSwitching", 1), ("l3IpRouting", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkMode.setStatus('current')
nsCommonConfigNetworkInterfaces = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfaces.setStatus('current')
nsCommonConfigNetworkInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesTable.setStatus('current')
nsCommonConfigNetworkInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkInterfacesIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesEntry.setStatus('current')
nsCommonConfigNetworkInterfacesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesIndex.setStatus('current')
nsCommonConfigNetworkInterfacesName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesName.setStatus('current')
nsCommonConfigNetworkInterfacesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesAdminStatus.setStatus('current')
nsCommonConfigNetworkInterfacesPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("lan", 0), ("wan", 1), ("mngmt", 2), ("loopback", 3), ("bridge", 4), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesPortType.setStatus('current')
nsCommonConfigNetworkInterfacesMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesMtu.setStatus('current')
nsCommonConfigNetworkInterfacesVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesVlan.setStatus('current')
nsCommonConfigNetworkInterfacesIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesIp.setStatus('current')
nsCommonConfigNetworkInterfacesMac = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesMac.setStatus('current')
nsCommonConfigNetworkInterfacesSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesSubnetMask.setStatus('current')
nsCommonConfigNetworkInterfacesEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("encapsulationEth", 0), ("encapsulationEth8021q", 1), ("ule", 2), ("gse", 3), ("nspe", 4), ("nspe2", 5), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesEncapsulation.setStatus('current')
nsCommonConfigNetworkInterfacesManagementControl = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesManagementControl.setStatus('current')
nsCommonConfigNetworkInterfacesAcmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesAcmControl.setStatus('current')
nsCommonConfigNetworkInterfacesNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesNotifyRowStatus.setStatus('current')
nsCommonConfigNetworkNeighbors = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3))
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighbors.setStatus('current')
nsCommonConfigNetworkNeighborsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsTable.setStatus('current')
nsCommonConfigNetworkNeighborsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkNeighborsIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsEntry.setStatus('current')
nsCommonConfigNetworkNeighborsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIndex.setStatus('current')
nsCommonConfigNetworkNeighborsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsName.setStatus('current')
nsCommonConfigNetworkNeighborsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIfIndex.setStatus('current')
nsCommonConfigNetworkNeighborsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIp.setStatus('current')
nsCommonConfigNetworkNeighborsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsMac.setStatus('current')
nsCommonConfigNetworkNeighborsSignalingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsSignalingIp.setStatus('current')
nsCommonConfigNetworkNeighborsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsModulation.setStatus('current')
nsCommonConfigNetworkNeighborsFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsFecRate.setStatus('current')
nsCommonConfigNetworkNeighborsNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsNotifyRowStatus.setStatus('current')
nsCommonConfigNetworkRouting = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4))
if mibBuilder.loadTexts: nsCommonConfigNetworkRouting.setStatus('current')
nsCommonConfigNetworkPolicyRoute = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1))
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRoute.setStatus('current')
nsCommonConfigNetworkPolicyRouteTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteTable.setStatus('current')
nsCommonConfigNetworkPolicyRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkPolicyRouteIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteEntry.setStatus('current')
nsCommonConfigNetworkPolicyRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteIndex.setStatus('current')
nsCommonConfigNetworkPolicyRouteInputInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteInputInterfaceId.setStatus('current')
nsCommonConfigNetworkPolicyRouteRoutingTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteRoutingTableId.setStatus('current')
nsCommonConfigNetworkPolicyRouteNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteNotifyRowStatus.setStatus('current')
nsCommonConfigNetworkRoutes = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutes.setStatus('current')
nsCommonConfigNetworkRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesTable.setStatus('current')
nsCommonConfigNetworkRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesDestIpAddress"), (0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesDestSubnetMask"), (0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesNexthopIpAddress"), (0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesTableId"))
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesEntry.setStatus('current')
nsCommonConfigNetworkRoutesDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesDestIpAddress.setStatus('current')
nsCommonConfigNetworkRoutesDestSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesDestSubnetMask.setStatus('current')
nsCommonConfigNetworkRoutesNexthopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesNexthopIpAddress.setStatus('current')
nsCommonConfigNetworkRoutesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesTableId.setStatus('current')
nsCommonConfigNetworkRoutesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesAdminStatus.setStatus('current')
nsCommonConfigNetworkRoutesNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesNotifyRowStatus.setStatus('current')
nsCommonConfigNetworkVlanSwitching = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5))
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitching.setStatus('current')
nsCommonConfigNetworkVlanSwitchingTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingTable.setStatus('current')
nsCommonConfigNetworkVlanSwitchingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkVlanSwitchingVid"))
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingEntry.setStatus('current')
nsCommonConfigNetworkVlanSwitchingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingVid.setStatus('current')
nsCommonConfigNetworkVlanSwitchingNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingNeighborIndex.setStatus('current')
nsCommonConfigNetworkVlanSwitchingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingAdminStatus.setStatus('current')
nsCommonConfigNetworkVlanSwitchingNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingNotifyRowStatus.setStatus('current')
nsCommonConfigNetworkQoS = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6))
if mibBuilder.loadTexts: nsCommonConfigNetworkQoS.setStatus('current')
nsCommonConfigNetworkClassification = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification.setStatus('current')
nsCommonConfigNetworkClassificationMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("classMode802", 0), ("classModeTos", 1), ("classModeMf", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMode.setStatus('current')
nsCommonConfigNetworkClassification802 = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802.setStatus('current')
nsCommonConfigNetworkClassification802Table = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Table.setStatus('current')
nsCommonConfigNetworkClassification802Entry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkClassification802Priority"))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Entry.setStatus('current')
nsCommonConfigNetworkClassification802Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Priority.setStatus('current')
nsCommonConfigNetworkClassification802CoS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802CoS.setStatus('current')
nsCommonConfigNetworkClassificationTos = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTos.setStatus('current')
nsCommonConfigNetworkClassificationTosTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosTable.setStatus('current')
nsCommonConfigNetworkClassificationTosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkClassificationTosPriority"))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosEntry.setStatus('current')
nsCommonConfigNetworkClassificationTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosPriority.setStatus('current')
nsCommonConfigNetworkClassificationTosFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosFieldValue.setStatus('current')
nsCommonConfigNetworkClassificationTosFieldMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosFieldMask.setStatus('current')
nsCommonConfigNetworkClassificationTosCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosCoS.setStatus('current')
nsCommonConfigNetworkClassificationTosNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosNotifyRowStatus.setStatus('current')
nsCommonConfigNetworkClassificationTosColor = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosColor.setStatus('current')
nsCommonConfigNetworkClassificationMf = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMf.setStatus('current')
nsCommonConfigNetworkClassificationMfTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfTable.setStatus('current')
nsCommonConfigNetworkClassificationMfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkClassificationMfPriority"))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfEntry.setStatus('current')
nsCommonConfigNetworkClassificationMfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfPriority.setStatus('current')
nsCommonConfigNetworkClassificationMfName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfName.setStatus('current')
nsCommonConfigNetworkClassificationMfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfAdminStatus.setStatus('current')
nsCommonConfigNetworkClassificationMfVidHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfVidHigh.setStatus('current')
nsCommonConfigNetworkClassificationMfVidLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfVidLow.setStatus('current')
nsCommonConfigNetworkClassificationMfSrcIpAddressHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcIpAddressHigh.setStatus('current')
nsCommonConfigNetworkClassificationMfSrcIpAddressLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcIpAddressLow.setStatus('current')
nsCommonConfigNetworkClassificationMfDestIpAddressHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestIpAddressHigh.setStatus('current')
nsCommonConfigNetworkClassificationMfDestIpAddressLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestIpAddressLow.setStatus('current')
nsCommonConfigNetworkClassificationMfProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfProtocolStatus.setStatus('current')
nsCommonConfigNetworkClassificationMfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfProtocol.setStatus('current')
nsCommonConfigNetworkClassificationMfSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcPortHigh.setStatus('current')
nsCommonConfigNetworkClassificationMfSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcPortLow.setStatus('current')
nsCommonConfigNetworkClassificationMfDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestPortHigh.setStatus('current')
nsCommonConfigNetworkClassificationMfDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestPortLow.setStatus('current')
nsCommonConfigNetworkClassificationMfCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfCoS.setStatus('current')
nsCommonConfigNetworkClassificationMfNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfNotifyRowStatus.setStatus('current')
nsCommonConfigNetworkQueues = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkQueues.setStatus('current')
nsCommonConfigNetworkQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesTable.setStatus('current')
nsCommonConfigNetworkQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkQueuesCos"))
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesEntry.setStatus('current')
nsCommonConfigNetworkQueuesCos = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesCos.setStatus('current')
nsCommonConfigNetworkQueuesSchedulingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("strictPriority", 0), ("drr", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesSchedulingMethod.setStatus('current')
nsCommonConfigNetworkQueuesWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesWeight.setStatus('current')
nsCommonConfigNetworkQueuesQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesQueueDepth.setStatus('current')
nsCommonConfigNetworkQueuesDropDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("tailDrop", 0), ("wred", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesDropDiscipline.setStatus('current')
nsCommonConfigNetworkRemoteScheduling = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3))
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteScheduling.setStatus('current')
nsCommonConfigNetworkRemoteSchedulingMethod = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("proprietry", 0), ("drr", 1), ("wrr", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingMethod.setStatus('current')
nsCommonConfigNetworkRemoteSchedulingFrameMerging = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingFrameMerging.setStatus('current')
nsCommonConfigNetworkRemoteSchedulingCosSignificance = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("global", 0), ("perRemote", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingCosSignificance.setStatus('current')
nsCommonConfigNetworkBwManagement = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4))
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagement.setStatus('current')
nsCommonConfigNetworkBwManagementTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementTable.setStatus('current')
nsCommonConfigNetworkBwManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkBwManagementIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEntry.setStatus('current')
nsCommonConfigNetworkBwManagementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementIndex.setStatus('current')
nsCommonConfigNetworkBwManagementNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementNeighborIndex.setStatus('current')
nsCommonConfigNetworkBwManagementAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementAdminStatus.setStatus('current')
nsCommonConfigNetworkBwManagementCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementCIR.setStatus('current')
nsCommonConfigNetworkBwManagementCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementCBS.setStatus('current')
nsCommonConfigNetworkBwManagementEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEIR.setStatus('current')
nsCommonConfigNetworkBwManagementEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEBS.setStatus('current')
nsCommonConfigNetworkBwManagementRefModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementRefModulation.setStatus('current')
nsCommonConfigNetworkBwManagementRefFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementRefFecRate.setStatus('current')
nsCommonConfigNetworkBwManagementPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementPercentage.setStatus('current')
nsCommonConfigNetworkBwManagementNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementNotifyRowStatus.setStatus('current')
nsCommonMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2))
if mibBuilder.loadTexts: nsCommonMonitor.setStatus('current')
nsCommonMonitorNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 0))
if mibBuilder.loadTexts: nsCommonMonitorNotifications.setStatus('current')
nsCommonMonitorEventNotification = NotificationType((1, 3, 6, 1, 4, 1, 37576, 2, 2, 0, 1)).setObjects(("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsDateAndTime"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsType"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsSeverity"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsSource"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsEvent"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsDescription"))
if mibBuilder.loadTexts: nsCommonMonitorEventNotification.setStatus('current')
nsCommonMonitorAlarms = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1))
if mibBuilder.loadTexts: nsCommonMonitorAlarms.setStatus('current')
nsCommonMonitorAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nsCommonMonitorAlarmsTable.setStatus('current')
nsCommonMonitorAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcSecondsLow"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcNanoSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcNanoSecondsLow"))
if mibBuilder.loadTexts: nsCommonMonitorAlarmsEntry.setStatus('current')
nsCommonMonitorAlarmsUtcSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcSecondsHigh.setStatus('current')
nsCommonMonitorAlarmsUtcSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcSecondsLow.setStatus('current')
nsCommonMonitorAlarmsUtcNanoSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 3), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcNanoSecondsHigh.setStatus('current')
nsCommonMonitorAlarmsUtcNanoSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 4), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcNanoSecondsLow.setStatus('current')
nsCommonMonitorAlarmsDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsDateAndTime.setStatus('current')
nsCommonMonitorAlarmsSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 6), ItuPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsSeverity.setStatus('current')
nsCommonMonitorAlarmsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsSource.setStatus('current')
nsCommonMonitorAlarmsEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsEvent.setStatus('current')
nsCommonMonitorAlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsDescription.setStatus('current')
nsCommonMonitorEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2))
if mibBuilder.loadTexts: nsCommonMonitorEvents.setStatus('current')
nsCommonMonitorEventsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nsCommonMonitorEventsTable.setStatus('current')
nsCommonMonitorEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcSecondsLow"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcNanoSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcNanoSecondsLow"))
if mibBuilder.loadTexts: nsCommonMonitorEventsEntry.setStatus('current')
nsCommonMonitorEventsUtcSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcSecondsHigh.setStatus('current')
nsCommonMonitorEventsUtcSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcSecondsLow.setStatus('current')
nsCommonMonitorEventsUtcNanoSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 3), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcNanoSecondsHigh.setStatus('current')
nsCommonMonitorEventsUtcNanoSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 4), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcNanoSecondsLow.setStatus('current')
nsCommonMonitorEventsDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsDateAndTime.setStatus('current')
nsCommonMonitorEventsType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("info", 1), ("alarmOn", 2), ("alarmOff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsType.setStatus('current')
nsCommonMonitorEventsSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 7), ItuPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsSeverity.setStatus('current')
nsCommonMonitorEventsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsSource.setStatus('current')
nsCommonMonitorEventsEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsEvent.setStatus('current')
nsCommonMonitorEventsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsDescription.setStatus('current')
nsCommonMonitorVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3))
if mibBuilder.loadTexts: nsCommonMonitorVoltage.setStatus('current')
nsCommonMonitorVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1), )
if mibBuilder.loadTexts: nsCommonMonitorVoltageTable.setStatus('current')
nsCommonMonitorVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorVoltageIndex"))
if mibBuilder.loadTexts: nsCommonMonitorVoltageEntry.setStatus('current')
nsCommonMonitorVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorVoltageIndex.setStatus('current')
nsCommonMonitorVoltageName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorVoltageName.setStatus('current')
nsCommonMonitorVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorVoltageValue.setStatus('current')
nsCommonMonitorPowerSupply = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4))
if mibBuilder.loadTexts: nsCommonMonitorPowerSupply.setStatus('current')
nsCommonMonitorPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1), )
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyTable.setStatus('current')
nsCommonMonitorPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorPowerSupplyIndex"))
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyEntry.setStatus('current')
nsCommonMonitorPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyIndex.setStatus('current')
nsCommonMonitorPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyName.setStatus('current')
nsCommonMonitorPowerSupplyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyValue.setStatus('current')
nsCommonMonitorNetwork = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5))
if mibBuilder.loadTexts: nsCommonMonitorNetwork.setStatus('current')
nsCommonMonitorNetworkInterfaces = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaces.setStatus('current')
nsCommonMonitorNetworkInterfacesLanTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanTable.setStatus('current')
nsCommonMonitorNetworkInterfacesLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkInterfacesLanIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanEntry.setStatus('current')
nsCommonMonitorNetworkInterfacesLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanIndex.setStatus('current')
nsCommonMonitorNetworkInterfacesLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanName.setStatus('current')
nsCommonMonitorNetworkInterfacesLanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanAdminStatus.setStatus('current')
nsCommonMonitorNetworkInterfacesLanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanOperStatus.setStatus('current')
nsCommonMonitorNetworkInterfacesLanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanPort.setStatus('current')
nsCommonMonitorNetworkInterfacesLanVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanVlan.setStatus('current')
nsCommonMonitorNetworkInterfacesLanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanMacAddress.setStatus('current')
nsCommonMonitorNetworkInterfacesLanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanIpAddress.setStatus('current')
nsCommonMonitorNetworkInterfacesLanSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanSubnetMask.setStatus('current')
nsCommonMonitorNetworkInterfacesSatTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatTable.setStatus('current')
nsCommonMonitorNetworkInterfacesSatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkInterfacesSatIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatEntry.setStatus('current')
nsCommonMonitorNetworkInterfacesSatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatIndex.setStatus('current')
nsCommonMonitorNetworkInterfacesSatName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatName.setStatus('current')
nsCommonMonitorNetworkInterfacesSatAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatAdminStatus.setStatus('current')
nsCommonMonitorNetworkInterfacesSatOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatOperStatus.setStatus('current')
nsCommonMonitorNetworkInterfacesSatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatPort.setStatus('current')
nsCommonMonitorNetworkInterfacesSatPid = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatPid.setStatus('current')
nsCommonMonitorNetworkInterfacesSatMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatMacAddress.setStatus('current')
nsCommonMonitorNetworkInterfacesSatIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatIpAddress.setStatus('current')
nsCommonMonitorNetworkInterfacesSatSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatSubnetMask.setStatus('current')
nsCommonMonitorNetworkInterfacesSatEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("encapsulationEth", 0), ("encapsulationEth8021q", 1), ("ule", 2), ("gse", 3), ("nspe", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatEncapsulation.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTable.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkInterfaceStatisticsIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsEntry.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsIndex.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsMtu.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxOk.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxError.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxDrop.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsRxOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxOvr.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxOk.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxError.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsTxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxDrop.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsTxOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxOvr.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxBytes.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxBytes.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsRxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxBps.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsTxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxBps.setStatus('current')
nsCommonMonitorNetworkInterfaceStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsName.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsTable.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkQueuesStatisticsNeighborIndex"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkQueuesStatisticsCos"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEntry.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsNeighborIndex.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsCos = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255))))
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsCos.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets.setStatus('current')
nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets.setStatus('current')
nsCommonMonitorNetworkNeighborsStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTable.setStatus('current')
nsCommonMonitorNetworkNeighborsStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkNeighborsStatisticsIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsEntry.setStatus('current')
nsCommonMonitorNetworkNeighborsStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsIndex.setStatus('current')
nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate.setStatus('current')
nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate.setStatus('current')
nsCommonMonitorNetworkNeighborsStatisticsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTxBytes.setStatus('current')
nsCommonMonitorNetworkNeighborsStatisticsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTxPackets.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsTable.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsEntry.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsGreenPackets.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsGreenRates = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsGreenRates.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsYellowPackets.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsYellowRates = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsYellowRates.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsRedPackets.setStatus('current')
nsCommonMonitorNetworkBwManagementStatisticsRedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsRedRates.setStatus('current')
nsCommonMonitorNetworkInterfaceClrCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceClrCmd.setStatus('current')
nsCommonSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3))
if mibBuilder.loadTexts: nsCommonSystem.setStatus('current')
nsCommonSystemSwVersion = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1))
if mibBuilder.loadTexts: nsCommonSystemSwVersion.setStatus('current')
nsCommonSystemSwVersionFirmware = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionFirmware.setStatus('current')
nsCommonSystemSwVersionOs = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionOs.setStatus('current')
nsCommonSystemSwVersionFs = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionFs.setStatus('current')
nsCommonSystemSwVersionDb = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionDb.setStatus('current')
nsCommonSystemSwVersionAppTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5), )
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppTable.setStatus('current')
nsCommonSystemSwVersionAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemSwVersionAppType"))
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppEntry.setStatus('current')
nsCommonSystemSwVersionAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("main", 2), ("backup", 3))))
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppType.setStatus('current')
nsCommonSystemSwVersionAppWeb = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppWeb.setStatus('current')
nsCommonSystemSwVersionAppFP = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppFP.setStatus('current')
nsCommonSystemSwVersionAppCLI = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppCLI.setStatus('current')
nsCommonSystemSwVersionAppNsmd = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppNsmd.setStatus('current')
nsCommonSystemSwVersionAppPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppPIC.setStatus('current')
nsCommonSystemHwConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2))
if mibBuilder.loadTexts: nsCommonSystemHwConfig.setStatus('current')
nsCommonSystemHwConfigProductType = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigProductType.setStatus('current')
nsCommonSystemHwConfigSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigSerialNumber.setStatus('current')
nsCommonSystemHwConfigHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigHardwareVersion.setStatus('current')
nsCommonSystemHwConfigMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigMacAddress.setStatus('current')
nsCommonSystemHwConfigInternalClockType = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigInternalClockType.setStatus('current')
nsCommonSystemHwConfigCardTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6), )
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardTable.setStatus('current')
nsCommonSystemHwConfigCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemHwConfigCardID"))
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardEntry.setStatus('current')
nsCommonSystemHwConfigCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardID.setStatus('current')
nsCommonSystemHwConfigCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardType.setStatus('current')
nsCommonSystemHwConfigCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardSerialNumber.setStatus('current')
nsCommonSystemHwConfigCardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardHwVersion.setStatus('current')
nsCommonSystemHwConfigCardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardSwVersion.setStatus('current')
nsCommonSystemHwConfigBUCFeeder = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigBUCFeeder.setStatus('current')
nsCommonSystemSwUpdate = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3))
if mibBuilder.loadTexts: nsCommonSystemSwUpdate.setStatus('current')
nsCommonSystemSwUpdateServerIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateServerIP.setStatus('current')
nsCommonSystemSwUpdateUserName = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateUserName.setStatus('current')
nsCommonSystemSwUpdatePassword = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdatePassword.setStatus('current')
nsCommonSystemSwUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateFileName.setStatus('current')
nsCommonSystemSwUpdateCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateCmd.setStatus('current')
nsCommonSystemSwUpdateComplete = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("inProgress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateComplete.setStatus('current')
nsCommonSystemSwUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("ok", 0), ("error", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateStatus.setStatus('current')
nsCommonSystemSwActivateBackupCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwActivateBackupCmd.setStatus('current')
nsCommonSystemDatabase = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4))
if mibBuilder.loadTexts: nsCommonSystemDatabase.setStatus('current')
nsCommonSystemDatabaseCmdDbName = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemDatabaseCmdDbName.setStatus('current')
nsCommonSystemDatabaseServerIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemDatabaseServerIP.setStatus('current')
nsCommonSystemDatabaseCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("none", 0), ("save", 1), ("load", 2), ("delete", 3), ("defaults", 4), ("upload", 5), ("download", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemDatabaseCmd.setStatus('current')
nsCommonSystemDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4), )
if mibBuilder.loadTexts: nsCommonSystemDatabaseTable.setStatus('current')
nsCommonSystemDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemDatabaseID"))
if mibBuilder.loadTexts: nsCommonSystemDatabaseEntry.setStatus('current')
nsCommonSystemDatabaseID = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonSystemDatabaseID.setStatus('current')
nsCommonSystemDatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemDatabaseName.setStatus('current')
nsCommonSystemLicense = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5))
if mibBuilder.loadTexts: nsCommonSystemLicense.setStatus('current')
nsCommonSystemLicenseIssueDate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseIssueDate.setStatus('current')
nsCommonSystemLicenseID = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseID.setStatus('current')
nsCommonSystemLicenseFeaturesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3), )
if mibBuilder.loadTexts: nsCommonSystemLicenseFeaturesTable.setStatus('current')
nsCommonSystemLicenseFeaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemLicenseFeatureIndx"))
if mibBuilder.loadTexts: nsCommonSystemLicenseFeaturesEntry.setStatus('current')
nsCommonSystemLicenseFeatureIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureIndx.setStatus('current')
nsCommonSystemLicenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureName.setStatus('current')
nsCommonSystemLicenseFeatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notExist", 0), ("permanent", 1), ("temporary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureType.setStatus('current')
nsCommonSystemLicenseFeatureDaysLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureDaysLeft.setStatus('current')
nsCommonProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 4))
if mibBuilder.loadTexts: nsCommonProducts.setStatus('current')
nsNS1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 37576, 2, 4, 1))
nsNS2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 37576, 2, 4, 2))
nsNS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 37576, 2, 4, 3))
mibBuilder.exportSymbols("NOVELSAT-COMMON-MIB", nsCommonConfig10MhzClockOut=nsCommonConfig10MhzClockOut, nsCommonConfigNetworkClassificationMfSrcIpAddressHigh=nsCommonConfigNetworkClassificationMfSrcIpAddressHigh, nsCommonMonitorEventsSource=nsCommonMonitorEventsSource, nsCommonSystemHwConfigCardSwVersion=nsCommonSystemHwConfigCardSwVersion, nsCommonMonitorEventsUtcSecondsLow=nsCommonMonitorEventsUtcSecondsLow, nsCommonConfigNetworkRemoteSchedulingCosSignificance=nsCommonConfigNetworkRemoteSchedulingCosSignificance, nsCommonConfigNetworkRoutesDestSubnetMask=nsCommonConfigNetworkRoutesDestSubnetMask, nsCommonConfigDateAndTime=nsCommonConfigDateAndTime, nsCommonMonitorAlarmsEntry=nsCommonMonitorAlarmsEntry, nsCommonSystemSwUpdatePassword=nsCommonSystemSwUpdatePassword, nsCommonConfigNetworkClassification802CoS=nsCommonConfigNetworkClassification802CoS, nsCommonConfigSerialPortStopBit=nsCommonConfigSerialPortStopBit, nsCommonConfigNetworkClassificationMfVidLow=nsCommonConfigNetworkClassificationMfVidLow, nsCommonMonitorNetworkInterfaceStatisticsTxOk=nsCommonMonitorNetworkInterfaceStatisticsTxOk, nsCommonConfigNetworkVlanSwitchingEntry=nsCommonConfigNetworkVlanSwitchingEntry, nsCommonConfigNetworkClassificationMfCoS=nsCommonConfigNetworkClassificationMfCoS, nsCommonConfigNetworkBwManagementNotifyRowStatus=nsCommonConfigNetworkBwManagementNotifyRowStatus, nsCommonConfigNetworkClassificationMfVidHigh=nsCommonConfigNetworkClassificationMfVidHigh, nsCommonSystemSwVersionAppPIC=nsCommonSystemSwVersionAppPIC, nsCommonConfigNetworkClassificationTos=nsCommonConfigNetworkClassificationTos, nsCommonConfigMgmtRateLimit=nsCommonConfigMgmtRateLimit, nsCommonMonitorNetworkBwManagementStatisticsYellowRates=nsCommonMonitorNetworkBwManagementStatisticsYellowRates, nsCommonConfigAlarmsEventsRelayMask=nsCommonConfigAlarmsEventsRelayMask, nsCommonSystemSwVersionAppEntry=nsCommonSystemSwVersionAppEntry, nsCommonConfigNetworkPolicyRouteIndex=nsCommonConfigNetworkPolicyRouteIndex, nsCommonConfigManagementRollback=nsCommonConfigManagementRollback, nsCommonConfigNetworkClassificationMfSrcPortLow=nsCommonConfigNetworkClassificationMfSrcPortLow, nsCommonConfigNetworkInterfacesAcmControl=nsCommonConfigNetworkInterfacesAcmControl, nsCommonMonitorEventsDateAndTime=nsCommonMonitorEventsDateAndTime, nsCommonMonitorNetworkInterfacesLanSubnetMask=nsCommonMonitorNetworkInterfacesLanSubnetMask, nsCommonConfigMgmtOtaMask=nsCommonConfigMgmtOtaMask, nsCommonConfigNetworkBwManagement=nsCommonConfigNetworkBwManagement, nsCommonProducts=nsCommonProducts, nsCommonMonitorNetworkQueuesStatisticsCos=nsCommonMonitorNetworkQueuesStatisticsCos, nsCommonSystemHwConfigCardID=nsCommonSystemHwConfigCardID, nsCommonConfigAlarmsEventsEntry=nsCommonConfigAlarmsEventsEntry, nsCommonSystemSwVersionDb=nsCommonSystemSwVersionDb, nsCommonConfigNetworkVlanSwitchingVid=nsCommonConfigNetworkVlanSwitchingVid, nsCommonSystemSwUpdateCmd=nsCommonSystemSwUpdateCmd, nsCommonMonitorPowerSupplyName=nsCommonMonitorPowerSupplyName, nsCommonSystemHwConfigCardHwVersion=nsCommonSystemHwConfigCardHwVersion, nsCommonMonitorAlarmsEvent=nsCommonMonitorAlarmsEvent, nsCommonConfigNetworkClassificationMfDestIpAddressHigh=nsCommonConfigNetworkClassificationMfDestIpAddressHigh, nsCommonSystemHwConfigProductType=nsCommonSystemHwConfigProductType, nsCommonMonitorEventsUtcSecondsHigh=nsCommonMonitorEventsUtcSecondsHigh, nsCommonMonitorNetworkInterfaceStatisticsName=nsCommonMonitorNetworkInterfaceStatisticsName, nsCommonConfigManagementOta=nsCommonConfigManagementOta, nsCommonMonitorAlarmsSeverity=nsCommonMonitorAlarmsSeverity, nsCommonMonitorEventsType=nsCommonMonitorEventsType, nsCommonConfigNetworkClassificationMfProtocol=nsCommonConfigNetworkClassificationMfProtocol, nsCommonConfigNetworkInterfacesTable=nsCommonConfigNetworkInterfacesTable, nsCommonConfigNetworkClassificationTosPriority=nsCommonConfigNetworkClassificationTosPriority, nsCommonConfigManagementIP=nsCommonConfigManagementIP, nsCommonMonitorNetworkInterfaceStatisticsRxOvr=nsCommonMonitorNetworkInterfaceStatisticsRxOvr, nsCommonConfigNetworkNeighborsNotifyRowStatus=nsCommonConfigNetworkNeighborsNotifyRowStatus, nsCommonMonitorVoltageValue=nsCommonMonitorVoltageValue, nsCommonConfigNetworkVlanSwitchingTable=nsCommonConfigNetworkVlanSwitchingTable, nsCommonConfigNetworkNeighborsEntry=nsCommonConfigNetworkNeighborsEntry, nsCommonConfigNetworkBwManagementPercentage=nsCommonConfigNetworkBwManagementPercentage, nsCommonConfigNetworkVlanSwitching=nsCommonConfigNetworkVlanSwitching, nsCommonMonitorVoltageEntry=nsCommonMonitorVoltageEntry, nsCommonConfigNetworkBwManagementEBS=nsCommonConfigNetworkBwManagementEBS, nsCommonConfigNetworkClassificationMf=nsCommonConfigNetworkClassificationMf, nsCommonConfigNetworkInterfacesEncapsulation=nsCommonConfigNetworkInterfacesEncapsulation, nsCommonMonitorPowerSupplyTable=nsCommonMonitorPowerSupplyTable, nsCommonMonitorNetworkInterfaceStatisticsTable=nsCommonMonitorNetworkInterfaceStatisticsTable, nsCommonMonitorEventsUtcNanoSecondsHigh=nsCommonMonitorEventsUtcNanoSecondsHigh, nsCommonSystemDatabaseCmdDbName=nsCommonSystemDatabaseCmdDbName, nsCommonMonitorNetworkInterfacesSatEntry=nsCommonMonitorNetworkInterfacesSatEntry, nsCommonMonitorNetworkQueuesStatisticsTable=nsCommonMonitorNetworkQueuesStatisticsTable, nsCommonConfigSerialPortDataBits=nsCommonConfigSerialPortDataBits, nsCommonSystemLicenseFeatureType=nsCommonSystemLicenseFeatureType, nsCommonMonitorNetworkInterfaceStatisticsTxDrop=nsCommonMonitorNetworkInterfaceStatisticsTxDrop, nsCommonConfigNetworkRoutesDestIpAddress=nsCommonConfigNetworkRoutesDestIpAddress, nsCommonSystemHwConfigCardTable=nsCommonSystemHwConfigCardTable, nsCommonMonitorEventsTable=nsCommonMonitorEventsTable, nsCommonConfigNetworkNeighborsModulation=nsCommonConfigNetworkNeighborsModulation, nsCommonConfigNetworkNeighborsName=nsCommonConfigNetworkNeighborsName, nsCommonConfigNetworkQueuesDropDiscipline=nsCommonConfigNetworkQueuesDropDiscipline, nsCommonConfigNetworkQoS=nsCommonConfigNetworkQoS, nsCommonConfigAlarmsEventsMask=nsCommonConfigAlarmsEventsMask, nsCommonMonitorNetworkInterfacesLanName=nsCommonMonitorNetworkInterfacesLanName, nsCommonMonitorVoltage=nsCommonMonitorVoltage, nsCommonMonitorEventsEntry=nsCommonMonitorEventsEntry, nsCommonSystemHwConfigMacAddress=nsCommonSystemHwConfigMacAddress, nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets=nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets, nsCommonConfigNetworkClassification802Table=nsCommonConfigNetworkClassification802Table, nsCommonConfigNetworkInterfacesMac=nsCommonConfigNetworkInterfacesMac, nsCommonConfigNetworkInterfacesName=nsCommonConfigNetworkInterfacesName, nsCommonMonitorVoltageIndex=nsCommonMonitorVoltageIndex, nsCommonConfigNetworkPolicyRouteTable=nsCommonConfigNetworkPolicyRouteTable, nsCommonConfigNetworkNeighborsFecRate=nsCommonConfigNetworkNeighborsFecRate, nsCommonConfigNetworkInterfacesNotifyRowStatus=nsCommonConfigNetworkInterfacesNotifyRowStatus, nsCommonSystemSwVersion=nsCommonSystemSwVersion, nsCommonMonitorNetworkInterfacesSatName=nsCommonMonitorNetworkInterfacesSatName, nsCommonConfigMgmtRollbackTimeout=nsCommonConfigMgmtRollbackTimeout, nsCommonConfig10MhzClock=nsCommonConfig10MhzClock, nsCommonConfigSerialPortBaudRate=nsCommonConfigSerialPortBaudRate, nsCommon=nsCommon, nsCommonConfigDateTime=nsCommonConfigDateTime, nsCommonMonitorNetworkInterfaceStatisticsRxOk=nsCommonMonitorNetworkInterfaceStatisticsRxOk, nsCommonConfig10MhzClockTxPortClock=nsCommonConfig10MhzClockTxPortClock, nsCommonConfigNetworkBwManagementIndex=nsCommonConfigNetworkBwManagementIndex, nsCommonMonitorAlarmsUtcSecondsHigh=nsCommonMonitorAlarmsUtcSecondsHigh, nsCommonMonitorNotifications=nsCommonMonitorNotifications, nsCommonMonitorAlarmsUtcSecondsLow=nsCommonMonitorAlarmsUtcSecondsLow, nsCommonSystemLicense=nsCommonSystemLicense, nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate=nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate, nsCommonConfigNetworkClassificationMfDestPortLow=nsCommonConfigNetworkClassificationMfDestPortLow, nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes=nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes, nsCommonConfigNetworkRemoteScheduling=nsCommonConfigNetworkRemoteScheduling, nsCommonSystemHwConfigHardwareVersion=nsCommonSystemHwConfigHardwareVersion, nsCommonConfigNetworkClassificationMfNotifyRowStatus=nsCommonConfigNetworkClassificationMfNotifyRowStatus, nsCommonMonitorNetworkInterfaceStatisticsRxBytes=nsCommonMonitorNetworkInterfaceStatisticsRxBytes, nsCommonConfigMgmtHostMask=nsCommonConfigMgmtHostMask, nsCommonSystemSwVersionAppType=nsCommonSystemSwVersionAppType, nsCommonMonitorEventNotification=nsCommonMonitorEventNotification, nsCommonConfigNetworkQueuesEntry=nsCommonConfigNetworkQueuesEntry, nsCommonConfigNetworkQueuesCos=nsCommonConfigNetworkQueuesCos, nsCommonMonitorNetworkInterfacesLanPort=nsCommonMonitorNetworkInterfacesLanPort, nsCommonConfigNetworkPolicyRouteInputInterfaceId=nsCommonConfigNetworkPolicyRouteInputInterfaceId, nsCommonMonitorAlarms=nsCommonMonitorAlarms, nsCommonConfigManagementRateLimiter=nsCommonConfigManagementRateLimiter, nsCommonConfigNetworkForwardingMode=nsCommonConfigNetworkForwardingMode, nsCommonConfigAlarmsEventsIndex=nsCommonConfigAlarmsEventsIndex, nsCommonSystemDatabase=nsCommonSystemDatabase, nsCommonSystemSwVersionFs=nsCommonSystemSwVersionFs, nsCommonMonitorNetworkQueuesStatisticsEntry=nsCommonMonitorNetworkQueuesStatisticsEntry, nsCommonConfigNetworkRemoteSchedulingFrameMerging=nsCommonConfigNetworkRemoteSchedulingFrameMerging, nsCommonConfigMgmtHostGW=nsCommonConfigMgmtHostGW, nsCommonConfigNetworkRoutesTableId=nsCommonConfigNetworkRoutesTableId, nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets=nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets, nsCommonConfigNetwork=nsCommonConfigNetwork, nsCommonMonitorNetworkInterfacesSatPid=nsCommonMonitorNetworkInterfacesSatPid, nsCommonSystemLicenseFeaturesTable=nsCommonSystemLicenseFeaturesTable, nsCommonConfigMgmtHostDHCP=nsCommonConfigMgmtHostDHCP, nsCommonConfigMgmtOtaIP=nsCommonConfigMgmtOtaIP, nsCommonConfigNetworkClassification=nsCommonConfigNetworkClassification, nsCommonSystemSwVersionAppFP=nsCommonSystemSwVersionAppFP, nsCommonSystemDatabaseServerIP=nsCommonSystemDatabaseServerIP, nsCommonMonitorEventsUtcNanoSecondsLow=nsCommonMonitorEventsUtcNanoSecondsLow, nsCommonMonitorNetworkInterfacesSatIndex=nsCommonMonitorNetworkInterfacesSatIndex, nsCommonConfigNetworkQueuesWeight=nsCommonConfigNetworkQueuesWeight, nsCommonMonitorNetworkInterfaceStatisticsTxOvr=nsCommonMonitorNetworkInterfaceStatisticsTxOvr, nsCommonMonitorEventsDescription=nsCommonMonitorEventsDescription, nsCommonSystemSwUpdateFileName=nsCommonSystemSwUpdateFileName, nsCommonSystemDatabaseTable=nsCommonSystemDatabaseTable, nsCommonMonitorNetworkInterfacesSatMacAddress=nsCommonMonitorNetworkInterfacesSatMacAddress, nsCommonConfigSerialPortParity=nsCommonConfigSerialPortParity, nsCommonConfigNetworkClassificationTosFieldValue=nsCommonConfigNetworkClassificationTosFieldValue, nsCommonConfigNetworkRoutesEntry=nsCommonConfigNetworkRoutesEntry, nsCommonConfigNetworkClassification802Priority=nsCommonConfigNetworkClassification802Priority, nsCommonConfigNetworkInterfacesManagementControl=nsCommonConfigNetworkInterfacesManagementControl, nsCommonConfigNetworkPolicyRouteNotifyRowStatus=nsCommonConfigNetworkPolicyRouteNotifyRowStatus, nsCommonMonitorNetworkInterfaceStatisticsRxError=nsCommonMonitorNetworkInterfaceStatisticsRxError, nsCommonConfigNetworkClassificationMode=nsCommonConfigNetworkClassificationMode, nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets=nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets, nsCommonConfig=nsCommonConfig, nsCommonConfigNetworkQueuesTable=nsCommonConfigNetworkQueuesTable, nsCommonConfigNetworkClassificationMfName=nsCommonConfigNetworkClassificationMfName, nsCommonConfigNetworkInterfacesVlan=nsCommonConfigNetworkInterfacesVlan, nsCommonMonitorAlarmsDateAndTime=nsCommonMonitorAlarmsDateAndTime, nsCommonConfigNetworkBwManagementTable=nsCommonConfigNetworkBwManagementTable, nsCommonConfigNetworkClassificationTosNotifyRowStatus=nsCommonConfigNetworkClassificationTosNotifyRowStatus, nsCommonConfigNetworkBwManagementRefModulation=nsCommonConfigNetworkBwManagementRefModulation, nsCommonConfigNetworkBwManagementEntry=nsCommonConfigNetworkBwManagementEntry, nsCommonConfigNetworkClassificationMfTable=nsCommonConfigNetworkClassificationMfTable, nsCommonConfigNetworkBwManagementNeighborIndex=nsCommonConfigNetworkBwManagementNeighborIndex, nsCommonSystemSwActivateBackupCmd=nsCommonSystemSwActivateBackupCmd, nsCommonConfigNetworkInterfacesAdminStatus=nsCommonConfigNetworkInterfacesAdminStatus, nsCommonConfigNetworkRemoteSchedulingMethod=nsCommonConfigNetworkRemoteSchedulingMethod, nsCommonConfigNetworkClassificationTosEntry=nsCommonConfigNetworkClassificationTosEntry, nsCommonConfigMgmtHostIP=nsCommonConfigMgmtHostIP, nsCommonMonitorNetworkBwManagementStatisticsGreenRates=nsCommonMonitorNetworkBwManagementStatisticsGreenRates, nsCommonConfigNetworkBwManagementRefFecRate=nsCommonConfigNetworkBwManagementRefFecRate, nsCommonMonitorNetworkQueuesStatisticsNeighborIndex=nsCommonMonitorNetworkQueuesStatisticsNeighborIndex, nsCommonSystemLicenseID=nsCommonSystemLicenseID, nsCommonConfigNetworkClassification802=nsCommonConfigNetworkClassification802, nsCommonConfigNetworkInterfacesPortType=nsCommonConfigNetworkInterfacesPortType, nsCommonConfigNetworkNeighborsSignalingIp=nsCommonConfigNetworkNeighborsSignalingIp, nsCommonMonitorNetworkInterfaceStatisticsRxDrop=nsCommonMonitorNetworkInterfaceStatisticsRxDrop, nsNS2000=nsNS2000, nsCommonConfigNetworkPolicyRoute=nsCommonConfigNetworkPolicyRoute, nsCommonMonitorNetworkInterfaceStatisticsEntry=nsCommonMonitorNetworkInterfaceStatisticsEntry, nsCommonMonitorNetworkBwManagementStatisticsTable=nsCommonMonitorNetworkBwManagementStatisticsTable, nsCommonConfigNetworkInterfacesSubnetMask=nsCommonConfigNetworkInterfacesSubnetMask, nsCommonConfigNetworkVlanSwitchingNeighborIndex=nsCommonConfigNetworkVlanSwitchingNeighborIndex, nsCommonMonitorNetworkInterfacesSatTable=nsCommonMonitorNetworkInterfacesSatTable, nsCommonSystemSwUpdateStatus=nsCommonSystemSwUpdateStatus, nsCommonSystemHwConfigCardEntry=nsCommonSystemHwConfigCardEntry, nsCommonConfigNetworkRouting=nsCommonConfigNetworkRouting, nsCommonConfigNetworkInterfacesIndex=nsCommonConfigNetworkInterfacesIndex, nsCommonMonitorAlarmsSource=nsCommonMonitorAlarmsSource, nsCommonSystemHwConfigCardType=nsCommonSystemHwConfigCardType, nsCommonSystemDatabaseName=nsCommonSystemDatabaseName, nsCommonConfigNetworkQueues=nsCommonConfigNetworkQueues, nsCommonConfigNetworkClassificationTosTable=nsCommonConfigNetworkClassificationTosTable, nsCommonConfigNetworkPolicyRouteEntry=nsCommonConfigNetworkPolicyRouteEntry, nsCommonMonitorNetworkInterfaceStatisticsTxError=nsCommonMonitorNetworkInterfaceStatisticsTxError, nsCommonMonitorAlarmsTable=nsCommonMonitorAlarmsTable, nsCommonMonitorEventsEvent=nsCommonMonitorEventsEvent, nsCommonConfig10MhzClockSource=nsCommonConfig10MhzClockSource, nsCommonConfigNetworkInterfacesMtu=nsCommonConfigNetworkInterfacesMtu, nsCommonSystemDatabaseCmd=nsCommonSystemDatabaseCmd, nsCommonSystemHwConfigSerialNumber=nsCommonSystemHwConfigSerialNumber, nsCommonMonitorVoltageName=nsCommonMonitorVoltageName, nsCommonConfigNetworkRoutesNotifyRowStatus=nsCommonConfigNetworkRoutesNotifyRowStatus, nsCommonConfigNetworkPolicyRouteRoutingTableId=nsCommonConfigNetworkPolicyRouteRoutingTableId, nsCommonMonitorEventsSeverity=nsCommonMonitorEventsSeverity, nsCommonConfigNetworkClassificationMfSrcIpAddressLow=nsCommonConfigNetworkClassificationMfSrcIpAddressLow, nsCommonMonitorNetworkBwManagementStatisticsRedRates=nsCommonMonitorNetworkBwManagementStatisticsRedRates, nsCommonMonitorNetworkInterfaceStatisticsRxBps=nsCommonMonitorNetworkInterfaceStatisticsRxBps, nsCommonSystemDatabaseEntry=nsCommonSystemDatabaseEntry, nsCommonConfigNetworkMode=nsCommonConfigNetworkMode, nsCommonMonitorNetworkBwManagementStatisticsRedPackets=nsCommonMonitorNetworkBwManagementStatisticsRedPackets, nsCommonConfigNetworkQueuesSchedulingMethod=nsCommonConfigNetworkQueuesSchedulingMethod, nsCommonConfigNetworkQueuesQueueDepth=nsCommonConfigNetworkQueuesQueueDepth, nsCommonMonitorNetworkInterfacesLanAdminStatus=nsCommonMonitorNetworkInterfacesLanAdminStatus, nsCommonConfigNetworkClassificationTosFieldMask=nsCommonConfigNetworkClassificationTosFieldMask, nsCommonConfigMgmtHostDNS=nsCommonConfigMgmtHostDNS, nsCommonConfigNetworkClassificationMfDestIpAddressLow=nsCommonConfigNetworkClassificationMfDestIpAddressLow, nsCommonMonitorNetworkBwManagementStatisticsYellowPackets=nsCommonMonitorNetworkBwManagementStatisticsYellowPackets, nsCommonConfigAlarmsEvents=nsCommonConfigAlarmsEvents, nsCommonSystemSwUpdateComplete=nsCommonSystemSwUpdateComplete, nsCommonConfigNetworkNeighborsIp=nsCommonConfigNetworkNeighborsIp, nsCommonMonitorAlarmsUtcNanoSecondsLow=nsCommonMonitorAlarmsUtcNanoSecondsLow, nsCommonConfigNetworkClassificationMfSrcPortHigh=nsCommonConfigNetworkClassificationMfSrcPortHigh, nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate=nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate, nsCommonMonitorNetworkNeighborsStatisticsTxBytes=nsCommonMonitorNetworkNeighborsStatisticsTxBytes, PYSNMP_MODULE_ID=nsCommon, nsCommonConfigNetworkClassificationMfPriority=nsCommonConfigNetworkClassificationMfPriority, nsCommonMonitorPowerSupplyIndex=nsCommonMonitorPowerSupplyIndex, nsCommonConfigNetworkInterfacesEntry=nsCommonConfigNetworkInterfacesEntry, nsCommonMonitorNetworkInterfacesSatSubnetMask=nsCommonMonitorNetworkInterfacesSatSubnetMask, nsCommonConfigNetworkClassificationTosCoS=nsCommonConfigNetworkClassificationTosCoS, nsCommonConfigNetworkClassificationMfAdminStatus=nsCommonConfigNetworkClassificationMfAdminStatus, nsCommonMonitorNetworkInterfacesLanVlan=nsCommonMonitorNetworkInterfacesLanVlan, nsCommonMonitorNetworkInterfaceStatisticsMtu=nsCommonMonitorNetworkInterfaceStatisticsMtu, nsCommonMonitorPowerSupplyEntry=nsCommonMonitorPowerSupplyEntry, nsCommonConfigNetworkInterfacesIp=nsCommonConfigNetworkInterfacesIp, nsCommonMonitorNetworkInterfacesLanIpAddress=nsCommonMonitorNetworkInterfacesLanIpAddress, nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex=nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex, nsCommonSystemLicenseFeaturesEntry=nsCommonSystemLicenseFeaturesEntry, nsCommonSystemSwVersionAppNsmd=nsCommonSystemSwVersionAppNsmd, nsCommonMonitorNetworkInterfacesSatPort=nsCommonMonitorNetworkInterfacesSatPort, nsCommonConfigNetworkInterfaces=nsCommonConfigNetworkInterfaces, nsCommonConfigNetworkNeighborsIndex=nsCommonConfigNetworkNeighborsIndex, nsCommonConfig10MhzClockLnbRefClock=nsCommonConfig10MhzClockLnbRefClock, nsCommonSystemLicenseIssueDate=nsCommonSystemLicenseIssueDate, nsCommonMonitorNetworkNeighborsStatisticsIndex=nsCommonMonitorNetworkNeighborsStatisticsIndex, nsCommonMonitorNetworkInterfaceClrCmd=nsCommonMonitorNetworkInterfaceClrCmd, nsCommonMonitorNetworkInterfacesLanTable=nsCommonMonitorNetworkInterfacesLanTable, nsCommonSystemSwVersionAppCLI=nsCommonSystemSwVersionAppCLI, nsCommonSystemSwVersionOs=nsCommonSystemSwVersionOs)
mibBuilder.exportSymbols("NOVELSAT-COMMON-MIB", nsCommonConfigNetworkClassification802Entry=nsCommonConfigNetworkClassification802Entry, nsCommonSystemSwUpdate=nsCommonSystemSwUpdate, nsCommonMonitorNetworkBwManagementStatisticsGreenPackets=nsCommonMonitorNetworkBwManagementStatisticsGreenPackets, nsCommonConfigNetworkBwManagementCBS=nsCommonConfigNetworkBwManagementCBS, nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes=nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes, nsCommonMonitorNetworkInterfacesLanOperStatus=nsCommonMonitorNetworkInterfacesLanOperStatus, nsCommonConfigNetworkRoutesAdminStatus=nsCommonConfigNetworkRoutesAdminStatus, nsCommonMonitor=nsCommonMonitor, nsCommonConfigNetworkClassificationMfDestPortHigh=nsCommonConfigNetworkClassificationMfDestPortHigh, nsCommonConfigNetworkNeighbors=nsCommonConfigNetworkNeighbors, nsCommonSystemLicenseFeatureName=nsCommonSystemLicenseFeatureName, nsCommonConfigNetworkBwManagementCIR=nsCommonConfigNetworkBwManagementCIR, nsCommonSystemSwUpdateUserName=nsCommonSystemSwUpdateUserName, nsCommonConfigSerialPort=nsCommonConfigSerialPort, nsCommonSystemDatabaseID=nsCommonSystemDatabaseID, nsCommonConfigNetworkNeighborsMac=nsCommonConfigNetworkNeighborsMac, nsCommonMonitorNetworkInterfacesLanIndex=nsCommonMonitorNetworkInterfacesLanIndex, nsCommonSystemSwVersionFirmware=nsCommonSystemSwVersionFirmware, nsNS3000=nsNS3000, nsCommonSystemHwConfigInternalClockType=nsCommonSystemHwConfigInternalClockType, nsCommonConfigNetworkClassificationTosColor=nsCommonConfigNetworkClassificationTosColor, nsCommonMonitorNetworkInterfacesSatOperStatus=nsCommonMonitorNetworkInterfacesSatOperStatus, nsCommonSystemSwVersionAppTable=nsCommonSystemSwVersionAppTable, nsCommonSystemLicenseFeatureDaysLeft=nsCommonSystemLicenseFeatureDaysLeft, nsCommonConfigAlarmsEventsTable=nsCommonConfigAlarmsEventsTable, nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets=nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets, nsCommonConfigNetworkRoutesNexthopIpAddress=nsCommonConfigNetworkRoutesNexthopIpAddress, nsCommonSystemLicenseFeatureIndx=nsCommonSystemLicenseFeatureIndx, nsCommonConfigNetworkVlanSwitchingAdminStatus=nsCommonConfigNetworkVlanSwitchingAdminStatus, nsCommonConfigNetworkVlanSwitchingNotifyRowStatus=nsCommonConfigNetworkVlanSwitchingNotifyRowStatus, nsCommonMonitorAlarmsUtcNanoSecondsHigh=nsCommonMonitorAlarmsUtcNanoSecondsHigh, nsCommonMonitorNetworkInterfaceStatisticsTxBps=nsCommonMonitorNetworkInterfaceStatisticsTxBps, nsCommonMonitorNetworkBwManagementStatisticsEntry=nsCommonMonitorNetworkBwManagementStatisticsEntry, nsCommonMonitorNetworkInterfacesSatEncapsulation=nsCommonMonitorNetworkInterfacesSatEncapsulation, nsCommonConfigNetworkClassificationMfProtocolStatus=nsCommonConfigNetworkClassificationMfProtocolStatus, nsCommonSystemSwVersionAppWeb=nsCommonSystemSwVersionAppWeb, nsCommonSystem=nsCommonSystem, nsCommonSystemSwUpdateServerIP=nsCommonSystemSwUpdateServerIP, nsNS1000=nsNS1000, nsCommonMonitorNetworkNeighborsStatisticsTxPackets=nsCommonMonitorNetworkNeighborsStatisticsTxPackets, nsCommonMonitorNetworkInterfacesSatAdminStatus=nsCommonMonitorNetworkInterfacesSatAdminStatus, nsCommonMonitorNetworkInterfaceStatisticsTxBytes=nsCommonMonitorNetworkInterfaceStatisticsTxBytes, nsCommonSystemHwConfigCardSerialNumber=nsCommonSystemHwConfigCardSerialNumber, nsCommonConfigNetworkBwManagementEIR=nsCommonConfigNetworkBwManagementEIR, nsCommonMonitorEvents=nsCommonMonitorEvents, nsCommonMonitorNetworkNeighborsStatisticsTable=nsCommonMonitorNetworkNeighborsStatisticsTable, nsCommonMonitorNetwork=nsCommonMonitorNetwork, nsCommonMonitorNetworkInterfacesSatIpAddress=nsCommonMonitorNetworkInterfacesSatIpAddress, nsCommonSystemHwConfig=nsCommonSystemHwConfig, nsCommonConfigNetworkRoutes=nsCommonConfigNetworkRoutes, nsCommonConfigNetworkNeighborsIfIndex=nsCommonConfigNetworkNeighborsIfIndex, nsCommonMonitorVoltageTable=nsCommonMonitorVoltageTable, nsCommonConfigNetworkNeighborsTable=nsCommonConfigNetworkNeighborsTable, nsCommonConfigNetworkClassificationMfEntry=nsCommonConfigNetworkClassificationMfEntry, nsCommonMonitorNetworkInterfacesLanMacAddress=nsCommonMonitorNetworkInterfacesLanMacAddress, nsCommonMonitorPowerSupplyValue=nsCommonMonitorPowerSupplyValue, nsCommonSystemHwConfigBUCFeeder=nsCommonSystemHwConfigBUCFeeder, nsCommonMonitorNetworkInterfaceStatisticsIndex=nsCommonMonitorNetworkInterfaceStatisticsIndex, nsCommonMonitorNetworkInterfaces=nsCommonMonitorNetworkInterfaces, nsCommonConfigNetworkBwManagementAdminStatus=nsCommonConfigNetworkBwManagementAdminStatus, nsCommonMonitorNetworkInterfacesLanEntry=nsCommonMonitorNetworkInterfacesLanEntry, nsCommonMonitorNetworkNeighborsStatisticsEntry=nsCommonMonitorNetworkNeighborsStatisticsEntry, nsCommonMonitorPowerSupply=nsCommonMonitorPowerSupply, nsCommonConfigMgmtRollbackMode=nsCommonConfigMgmtRollbackMode, nsCommonMonitorAlarmsDescription=nsCommonMonitorAlarmsDescription, nsCommonConfigAlarmsEventsName=nsCommonConfigAlarmsEventsName, nsCommonConfigNetworkRoutesTable=nsCommonConfigNetworkRoutesTable)
