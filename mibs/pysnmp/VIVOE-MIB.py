#
# PySNMP MIB module VIVOE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VIVOE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:27:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Counter32, iso, Gauge32, MibIdentifier, Bits, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Integer32, ObjectIdentity, Unsigned32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "iso", "Gauge32", "MibIdentifier", "Bits", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Integer32", "ObjectIdentity", "Unsigned32", "enterprises")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
vivoeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 35990, 3, 1))
vivoeMIB.setRevisions(('2012-02-16 13:24', '2010-11-04 15:53',))
if mibBuilder.loadTexts: vivoeMIB.setLastUpdated('201202161324Z')
if mibBuilder.loadTexts: vivoeMIB.setOrganization('Defence Equipment and Support (DE&S) Land Equipment')
class DisplayString16(TextualConvention, OctetString):
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class DisplayString32(TextualConvention, OctetString):
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class DisplayString64(TextualConvention, OctetString):
    status = 'current'
    displayHint = '64a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

desle = MibIdentifier((1, 3, 6, 1, 4, 1, 35990))
desleProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 35990, 3))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1))
deviceDesc = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 1), DisplayString32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDesc.setStatus('current')
deviceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 2), DisplayString64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceManufacturer.setStatus('current')
devicePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 3), DisplayString32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePartNumber.setStatus('current')
deviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 4), DisplayString32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumber.setStatus('current')
deviceHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 5), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHardwareVersion.setStatus('current')
deviceSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 6), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSoftwareVersion.setStatus('current')
deviceFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 7), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFirmwareVersion.setStatus('current')
deviceMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 8), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMibVersion.setStatus('current')
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serviceProvider", 1), ("serviceUser", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('current')
deviceUserDesc = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 10), DisplayString64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceUserDesc.setStatus('current')
ethernetIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetIfNumber.setStatus('current')
ethernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12), )
if mibBuilder.loadTexts: ethernetIfTable.setStatus('current')
ethernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12, 1), ).setIndexNames((0, "VIVOE-MIB", "ethernetIfIndex"))
if mibBuilder.loadTexts: ethernetIfEntry.setStatus('current')
ethernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ethernetIfIndex.setStatus('current')
ethernetIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12, 1, 2), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetIfSpeed.setStatus('current')
ethernetIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetIfMacAddress.setStatus('current')
ethernetIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetIfIpAddress.setStatus('current')
ethernetIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetIfSubnetMask.setStatus('current')
ethernetIfIpAddressConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 12, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetIfIpAddressConflict.setStatus('current')
deviceNatoStockNumber = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 13), DisplayString32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNatoStockNumber.setStatus('current')
deviceMode = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("defaultStartUp", 2), ("maintenanceMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMode.setStatus('current')
deviceReset = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceReset.setStatus('current')
videoFormatInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2))
videoFormatNumber = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatNumber.setStatus('current')
videoFormatTable = MibTable((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2), )
if mibBuilder.loadTexts: videoFormatTable.setStatus('current')
videoFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1), ).setIndexNames((0, "VIVOE-MIB", "videoFormatIndex"))
if mibBuilder.loadTexts: videoFormatEntry.setStatus('current')
videoFormatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: videoFormatIndex.setStatus('current')
videoFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("videoChannel", 1), ("roi", 2), ("serviceUser", 3), ("rawData", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatType.setStatus('current')
videoFormatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatStatus.setStatus('current')
videoFormatBase = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 4), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatBase.setStatus('current')
videoFormatSampling = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 5), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatSampling.setStatus('current')
videoFormatBitDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatBitDepth.setStatus('current')
videoFormatFps = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('Frame per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatFps.setStatus('current')
videoFormatColorimetry = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 8), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatColorimetry.setStatus('current')
videoFormatInterlaced = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interlaced", 1), ("progressive", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatInterlaced.setStatus('current')
videoFormatCompressionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("targetRate", 1), ("targetQuality", 2), ("lossless", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatCompressionFactor.setStatus('current')
videoFormatCompressionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatCompressionRate.setStatus('current')
videoFormatMaxHorzRes = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 12), Integer32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatMaxHorzRes.setStatus('current')
videoFormatMaxVertRes = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 13), Integer32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: videoFormatMaxVertRes.setStatus('current')
videoFormatRoiHorzRes = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 14), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatRoiHorzRes.setStatus('current')
videoFormatRoiVertRes = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 15), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatRoiVertRes.setStatus('current')
videoFormatRoiOriginTop = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 16), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatRoiOriginTop.setStatus('current')
videoFormatRoiOriginLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 17), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatRoiOriginLeft.setStatus('current')
videoFormatRoiExtentBottom = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 18), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatRoiExtentBottom.setStatus('current')
videoFormatRoiExtentRight = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 19), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatRoiExtentRight.setStatus('current')
videoFormatRtpPt = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoFormatRtpPt.setStatus('current')
channelControl = MibIdentifier((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3))
channelReset = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelReset.setStatus('current')
channelNumber = MibScalar((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumber.setStatus('current')
channelTable = MibTable((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3), )
if mibBuilder.loadTexts: channelTable.setStatus('current')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1), ).setIndexNames((0, "VIVOE-MIB", "channelIndex"))
if mibBuilder.loadTexts: channelEntry.setStatus('current')
channelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: channelIndex.setStatus('current')
channelType = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("videoChannel", 1), ("roi", 2), ("serviceUser", 3), ("rawData", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelType.setStatus('current')
channelUserDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 3), DisplayString64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelUserDesc.setStatus('current')
channelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("singleFrame", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelStatus.setStatus('current')
channelVideoFormatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelVideoFormatIndex.setStatus('current')
channelVideoFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 6), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelVideoFormat.setStatus('current')
channelVideoSampling = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 7), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelVideoSampling.setStatus('current')
channelVideoBitDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelVideoBitDepth.setStatus('current')
channelFps = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Frames per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: channelFps.setStatus('current')
channelColorimetry = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 10), DisplayString16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelColorimetry.setStatus('current')
channelInterlaced = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interlaced", 1), ("progressive", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelInterlaced.setStatus('current')
channelCompressionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("targetRate", 1), ("targetQuality", 2), ("lossless", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelCompressionFactor.setStatus('current')
channelCompressionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelCompressionRate.setStatus('current')
channelHorzRes = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 14), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelHorzRes.setStatus('current')
channelVertRes = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 15), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelVertRes.setStatus('current')
channelRoiOriginTop = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 16), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelRoiOriginTop.setStatus('current')
channelRoiOriginLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 17), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelRoiOriginLeft.setStatus('current')
channelRoiExtentBottom = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 18), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelRoiExtentBottom.setStatus('current')
channelRoiExtentRight = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 19), Integer32()).setUnits('pixels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelRoiExtentRight.setStatus('current')
channelRtpPt = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRtpPt.setStatus('current')
channelReceiveIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelReceiveIpAddress.setStatus('current')
channelInterPacketDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 22), Integer32()).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelInterPacketDelay.setStatus('current')
channelSapMessageInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSapMessageInterval.setStatus('current')
channelDefaultVideoFormatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelDefaultVideoFormatIndex.setStatus('current')
channelDefaultReceiveIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35990, 3, 1, 3, 3, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelDefaultReceiveIpAddress.setStatus('current')
vivoeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 35990, 3, 1, 4))
deviceError = NotificationType((1, 3, 6, 1, 4, 1, 35990, 3, 1, 4, 1)).setObjects(("VIVOE-MIB", "deviceUserDesc"), ("VIVOE-MIB", "deviceMode"))
if mibBuilder.loadTexts: deviceError.setStatus('current')
ipAddressConflict = NotificationType((1, 3, 6, 1, 4, 1, 35990, 3, 1, 4, 2)).setObjects(("VIVOE-MIB", "ethernetIfIpAddress"), ("VIVOE-MIB", "ethernetIfIpAddressConflict"))
if mibBuilder.loadTexts: ipAddressConflict.setStatus('current')
vivoeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35990, 3, 1, 5))
presetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35990, 3, 1, 5, 1)).setObjects(("VIVOE-MIB", "deviceDesc"), ("VIVOE-MIB", "deviceManufacturer"), ("VIVOE-MIB", "devicePartNumber"), ("VIVOE-MIB", "deviceSerialNumber"), ("VIVOE-MIB", "deviceHardwareVersion"), ("VIVOE-MIB", "deviceSoftwareVersion"), ("VIVOE-MIB", "deviceFirmwareVersion"), ("VIVOE-MIB", "deviceMibVersion"), ("VIVOE-MIB", "deviceType"), ("VIVOE-MIB", "ethernetIfNumber"), ("VIVOE-MIB", "ethernetIfSpeed"), ("VIVOE-MIB", "ethernetIfMacAddress"), ("VIVOE-MIB", "deviceNatoStockNumber"), ("VIVOE-MIB", "videoFormatNumber"), ("VIVOE-MIB", "videoFormatType"), ("VIVOE-MIB", "videoFormatStatus"), ("VIVOE-MIB", "videoFormatBase"), ("VIVOE-MIB", "videoFormatSampling"), ("VIVOE-MIB", "videoFormatBitDepth"), ("VIVOE-MIB", "videoFormatFps"), ("VIVOE-MIB", "videoFormatColorimetry"), ("VIVOE-MIB", "videoFormatInterlaced"), ("VIVOE-MIB", "videoFormatCompressionFactor"), ("VIVOE-MIB", "videoFormatMaxHorzRes"), ("VIVOE-MIB", "videoFormatMaxVertRes"), ("VIVOE-MIB", "channelNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    presetGroup = presetGroup.setStatus('current')
setChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35990, 3, 1, 5, 2)).setObjects(("VIVOE-MIB", "channelType"), ("VIVOE-MIB", "channelVideoFormat"), ("VIVOE-MIB", "channelVideoSampling"), ("VIVOE-MIB", "channelVideoBitDepth"), ("VIVOE-MIB", "channelFps"), ("VIVOE-MIB", "channelColorimetry"), ("VIVOE-MIB", "channelInterlaced"), ("VIVOE-MIB", "channelCompressionFactor"), ("VIVOE-MIB", "channelCompressionRate"), ("VIVOE-MIB", "channelHorzRes"), ("VIVOE-MIB", "channelVertRes"), ("VIVOE-MIB", "channelRoiOriginTop"), ("VIVOE-MIB", "channelRoiOriginLeft"), ("VIVOE-MIB", "channelRoiExtentBottom"), ("VIVOE-MIB", "channelRoiExtentRight"), ("VIVOE-MIB", "channelRtpPt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    setChannelGroup = setChannelGroup.setStatus('current')
maintenanceModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35990, 3, 1, 5, 3)).setObjects(("VIVOE-MIB", "deviceUserDesc"), ("VIVOE-MIB", "ethernetIfIpAddress"), ("VIVOE-MIB", "ethernetIfSubnetMask"), ("VIVOE-MIB", "ethernetIfIpAddressConflict"), ("VIVOE-MIB", "deviceReset"), ("VIVOE-MIB", "videoFormatCompressionRate"), ("VIVOE-MIB", "videoFormatRoiHorzRes"), ("VIVOE-MIB", "videoFormatRoiVertRes"), ("VIVOE-MIB", "videoFormatRoiOriginTop"), ("VIVOE-MIB", "videoFormatRoiOriginLeft"), ("VIVOE-MIB", "videoFormatRoiExtentBottom"), ("VIVOE-MIB", "videoFormatRoiExtentRight"), ("VIVOE-MIB", "videoFormatRtpPt"), ("VIVOE-MIB", "channelReset"), ("VIVOE-MIB", "channelUserDesc"), ("VIVOE-MIB", "channelInterPacketDelay"), ("VIVOE-MIB", "channelSapMessageInterval"), ("VIVOE-MIB", "channelDefaultVideoFormatIndex"), ("VIVOE-MIB", "channelDefaultReceiveIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    maintenanceModeGroup = maintenanceModeGroup.setStatus('current')
volatileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35990, 3, 1, 5, 4)).setObjects(("VIVOE-MIB", "deviceMode"), ("VIVOE-MIB", "deviceReset"), ("VIVOE-MIB", "channelReset"), ("VIVOE-MIB", "channelType"), ("VIVOE-MIB", "channelStatus"), ("VIVOE-MIB", "channelVideoFormatIndex"), ("VIVOE-MIB", "channelVideoFormat"), ("VIVOE-MIB", "channelVideoSampling"), ("VIVOE-MIB", "channelVideoBitDepth"), ("VIVOE-MIB", "channelFps"), ("VIVOE-MIB", "channelColorimetry"), ("VIVOE-MIB", "channelInterlaced"), ("VIVOE-MIB", "channelCompressionFactor"), ("VIVOE-MIB", "channelCompressionRate"), ("VIVOE-MIB", "channelHorzRes"), ("VIVOE-MIB", "channelVertRes"), ("VIVOE-MIB", "channelRoiOriginTop"), ("VIVOE-MIB", "channelRoiOriginLeft"), ("VIVOE-MIB", "channelRoiExtentBottom"), ("VIVOE-MIB", "channelRoiExtentRight"), ("VIVOE-MIB", "channelRtpPt"), ("VIVOE-MIB", "channelReceiveIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    volatileGroup = volatileGroup.setStatus('current')
notificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 35990, 3, 1, 5, 5)).setObjects(("VIVOE-MIB", "deviceError"), ("VIVOE-MIB", "ipAddressConflict"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationGroup = notificationGroup.setStatus('current')
mibBuilder.exportSymbols("VIVOE-MIB", videoFormatBase=videoFormatBase, ethernetIfNumber=ethernetIfNumber, channelIndex=channelIndex, PYSNMP_MODULE_ID=vivoeMIB, channelEntry=channelEntry, videoFormatStatus=videoFormatStatus, ethernetIfSubnetMask=ethernetIfSubnetMask, deviceMode=deviceMode, videoFormatColorimetry=videoFormatColorimetry, videoFormatRoiExtentBottom=videoFormatRoiExtentBottom, videoFormatCompressionRate=videoFormatCompressionRate, videoFormatInterlaced=videoFormatInterlaced, videoFormatNumber=videoFormatNumber, DisplayString64=DisplayString64, channelUserDesc=channelUserDesc, DisplayString32=DisplayString32, desleProducts=desleProducts, ethernetIfTable=ethernetIfTable, channelDefaultReceiveIpAddress=channelDefaultReceiveIpAddress, deviceUserDesc=deviceUserDesc, vivoeNotifications=vivoeNotifications, desle=desle, videoFormatRtpPt=videoFormatRtpPt, videoFormatBitDepth=videoFormatBitDepth, ethernetIfIndex=ethernetIfIndex, videoFormatCompressionFactor=videoFormatCompressionFactor, channelFps=channelFps, vivoeGroups=vivoeGroups, notificationGroup=notificationGroup, channelRtpPt=channelRtpPt, ethernetIfMacAddress=ethernetIfMacAddress, videoFormatRoiOriginTop=videoFormatRoiOriginTop, deviceType=deviceType, videoFormatType=videoFormatType, ethernetIfEntry=ethernetIfEntry, deviceSoftwareVersion=deviceSoftwareVersion, channelRoiOriginLeft=channelRoiOriginLeft, deviceDesc=deviceDesc, volatileGroup=volatileGroup, channelStatus=channelStatus, channelReceiveIpAddress=channelReceiveIpAddress, channelHorzRes=channelHorzRes, channelNumber=channelNumber, videoFormatRoiHorzRes=videoFormatRoiHorzRes, ipAddressConflict=ipAddressConflict, channelDefaultVideoFormatIndex=channelDefaultVideoFormatIndex, channelReset=channelReset, deviceInfo=deviceInfo, ethernetIfIpAddress=ethernetIfIpAddress, presetGroup=presetGroup, ethernetIfIpAddressConflict=ethernetIfIpAddressConflict, channelVertRes=channelVertRes, channelInterPacketDelay=channelInterPacketDelay, videoFormatMaxVertRes=videoFormatMaxVertRes, videoFormatRoiVertRes=videoFormatRoiVertRes, channelVideoBitDepth=channelVideoBitDepth, videoFormatMaxHorzRes=videoFormatMaxHorzRes, channelCompressionRate=channelCompressionRate, deviceHardwareVersion=deviceHardwareVersion, videoFormatSampling=videoFormatSampling, deviceReset=deviceReset, videoFormatInfo=videoFormatInfo, channelTable=channelTable, channelCompressionFactor=channelCompressionFactor, deviceSerialNumber=deviceSerialNumber, videoFormatIndex=videoFormatIndex, videoFormatTable=videoFormatTable, channelSapMessageInterval=channelSapMessageInterval, deviceMibVersion=deviceMibVersion, deviceFirmwareVersion=deviceFirmwareVersion, channelRoiExtentBottom=channelRoiExtentBottom, devicePartNumber=devicePartNumber, channelColorimetry=channelColorimetry, channelVideoFormatIndex=channelVideoFormatIndex, channelVideoSampling=channelVideoSampling, maintenanceModeGroup=maintenanceModeGroup, setChannelGroup=setChannelGroup, videoFormatEntry=videoFormatEntry, videoFormatRoiOriginLeft=videoFormatRoiOriginLeft, videoFormatFps=videoFormatFps, channelVideoFormat=channelVideoFormat, channelRoiOriginTop=channelRoiOriginTop, ethernetIfSpeed=ethernetIfSpeed, videoFormatRoiExtentRight=videoFormatRoiExtentRight, channelRoiExtentRight=channelRoiExtentRight, channelControl=channelControl, deviceNatoStockNumber=deviceNatoStockNumber, channelType=channelType, channelInterlaced=channelInterlaced, vivoeMIB=vivoeMIB, DisplayString16=DisplayString16, deviceError=deviceError, deviceManufacturer=deviceManufacturer)
