#
# PySNMP MIB module NETSWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:24:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, TimeTicks, Integer32, Gauge32, Counter64, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, iso, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Integer32", "Gauge32", "Counter64", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpOpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

hpBuf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1))
hpMsgBuf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1))
hpPktBuf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2))
hpMsgBufTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hpMsgBufTable.setStatus('mandatory')
hpMsgBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpMsgBufSlotIndex"))
if mibBuilder.loadTexts: hpMsgBufEntry.setStatus('mandatory')
hpMsgBufSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufSlotIndex.setStatus('mandatory')
hpMsgBufCorrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufCorrupted.setStatus('mandatory')
hpMsgBufFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufFree.setStatus('mandatory')
hpMsgBufInit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufInit.setStatus('mandatory')
hpMsgBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufMin.setStatus('mandatory')
hpMsgBufMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufMiss.setStatus('mandatory')
hpMsgBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufSize.setStatus('mandatory')
hpPktBufTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hpPktBufTable.setStatus('mandatory')
hpPktBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpPktBufSlotIndex"))
if mibBuilder.loadTexts: hpPktBufEntry.setStatus('mandatory')
hpPktBufSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufSlotIndex.setStatus('mandatory')
hpPktBufCorrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufCorrupted.setStatus('mandatory')
hpPktBufFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufFree.setStatus('mandatory')
hpPktBufInit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufInit.setStatus('mandatory')
hpPktBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufMin.setStatus('mandatory')
hpPktBufMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufMiss.setStatus('mandatory')
hpPktBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufSize.setStatus('mandatory')
hpMem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2))
hpLocalMem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1))
hpGlobalMem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2))
hpLocalMemTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hpLocalMemTable.setStatus('mandatory')
hpLocalMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpLocalMemSlotIndex"))
if mibBuilder.loadTexts: hpLocalMemEntry.setStatus('mandatory')
hpLocalMemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemSlotIndex.setStatus('mandatory')
hpLocalMemSlabCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemSlabCnt.setStatus('mandatory')
hpLocalMemFreeSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemFreeSegCnt.setStatus('mandatory')
hpLocalMemAllocSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemAllocSegCnt.setStatus('mandatory')
hpLocalMemTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemTotalBytes.setStatus('mandatory')
hpLocalMemFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemFreeBytes.setStatus('mandatory')
hpLocalMemAllocBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemAllocBytes.setStatus('mandatory')
hpGlobalMemTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: hpGlobalMemTable.setStatus('mandatory')
hpGlobalMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpGlobalMemSlotIndex"))
if mibBuilder.loadTexts: hpGlobalMemEntry.setStatus('mandatory')
hpGlobalMemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemSlotIndex.setStatus('mandatory')
hpGlobalMemSlabCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemSlabCnt.setStatus('mandatory')
hpGlobalMemFreeSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemFreeSegCnt.setStatus('mandatory')
hpGlobalMemAllocSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemAllocSegCnt.setStatus('mandatory')
hpGlobalMemTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemTotalBytes.setStatus('mandatory')
hpGlobalMemFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemFreeBytes.setStatus('mandatory')
hpGlobalMemAllocBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemAllocBytes.setStatus('mandatory')
hpSwitchOsVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchOsVersion.setStatus('mandatory')
hpSwitchRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRomVersion.setStatus('mandatory')
hpSwitchSmartCardType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("fddi", 2), ("atm", 3), ("fddiAndATM", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSmartCardType.setStatus('mandatory')
hpSwitchBaseMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchBaseMACAddress.setStatus('mandatory')
mibBuilder.exportSymbols("NETSWITCH-MIB", hpMem=hpMem, hpGlobalMemTable=hpGlobalMemTable, hpPktBufEntry=hpPktBufEntry, hpGlobalMemEntry=hpGlobalMemEntry, hpMsgBufSize=hpMsgBufSize, hpPktBufSize=hpPktBufSize, hpGlobalMemSlotIndex=hpGlobalMemSlotIndex, hpGlobalMemFreeSegCnt=hpGlobalMemFreeSegCnt, hpPktBufCorrupted=hpPktBufCorrupted, hpLocalMemAllocBytes=hpLocalMemAllocBytes, hpGlobalMem=hpGlobalMem, hpPktBufInit=hpPktBufInit, hpLocalMemEntry=hpLocalMemEntry, hpGlobalMemAllocSegCnt=hpGlobalMemAllocSegCnt, hpGlobalMemTotalBytes=hpGlobalMemTotalBytes, hpMsgBufTable=hpMsgBufTable, hpSwitchSmartCardType=hpSwitchSmartCardType, hpPktBuf=hpPktBuf, hpLocalMem=hpLocalMem, hpLocalMemSlabCnt=hpLocalMemSlabCnt, hpSwitchBaseMACAddress=hpSwitchBaseMACAddress, hpMsgBufEntry=hpMsgBufEntry, hpMsgBufInit=hpMsgBufInit, hpLocalMemFreeSegCnt=hpLocalMemFreeSegCnt, hpGlobalMemAllocBytes=hpGlobalMemAllocBytes, hpMsgBufSlotIndex=hpMsgBufSlotIndex, hpSwitchRomVersion=hpSwitchRomVersion, hpMsgBufMiss=hpMsgBufMiss, hpLocalMemTable=hpLocalMemTable, MacAddress=MacAddress, hpMsgBufMin=hpMsgBufMin, hpLocalMemSlotIndex=hpLocalMemSlotIndex, hpLocalMemAllocSegCnt=hpLocalMemAllocSegCnt, hpPktBufFree=hpPktBufFree, hpLocalMemFreeBytes=hpLocalMemFreeBytes, hpOpSystem=hpOpSystem, hpMsgBufCorrupted=hpMsgBufCorrupted, hpMsgBuf=hpMsgBuf, hpPktBufSlotIndex=hpPktBufSlotIndex, hpMsgBufFree=hpMsgBufFree, hpLocalMemTotalBytes=hpLocalMemTotalBytes, hpSwitchOsVersion=hpSwitchOsVersion, hpBuf=hpBuf, hpGlobalMemSlabCnt=hpGlobalMemSlabCnt, hpPktBufMin=hpPktBufMin, hpPktBufMiss=hpPktBufMiss, hpPktBufTable=hpPktBufTable, hpGlobalMemFreeBytes=hpGlobalMemFreeBytes)
