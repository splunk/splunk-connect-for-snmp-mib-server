#
# PySNMP MIB module HUAWEI-LswDEVM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-LswDEVM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:34:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
huaweiUtility, lswCommon = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "huaweiUtility", "lswCommon")
hwLswSlotIndex, hwLswFrameIndex = mibBuilder.importSymbols("HUAWEI-LSW-DEV-ADM-MIB", "hwLswSlotIndex", "hwLswFrameIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ObjectIdentity, MibIdentifier, TimeTicks, Counter32, Integer32, Gauge32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Integer32", "Gauge32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hwLswdevMMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9))
hwLswdevMMib.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hwLswdevMMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hwLswdevMMib.setOrganization('')
hwDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 1))
hwCpuTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 1, 1), )
if mibBuilder.loadTexts: hwCpuTable.setStatus('current')
hwCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 1, 1, 1), ).setIndexNames((0, "HUAWEI-LswDEVM-MIB", "hwCpuIndex"))
if mibBuilder.loadTexts: hwCpuEntry.setStatus('current')
hwCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCpuIndex.setStatus('current')
hwCpuCostRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuCostRate.setStatus('current')
hwCpuCostRatePer1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuCostRatePer1Min.setStatus('current')
hwCpuCostRatePer5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuCostRatePer5Min.setStatus('current')
hwMem = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2))
hwMemTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1), )
if mibBuilder.loadTexts: hwMemTable.setStatus('current')
hwMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-LswDEVM-MIB", "hwMemModuleIndex"))
if mibBuilder.loadTexts: hwMemEntry.setStatus('current')
hwMemModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMemModuleIndex.setStatus('current')
hwMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemSize.setStatus('current')
hwMemFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemFree.setStatus('current')
hwMemRawSliceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemRawSliceUsed.setStatus('current')
hwMemLgFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemLgFree.setStatus('current')
hwMemFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemFail.setStatus('current')
hwMemFailNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemFailNoMem.setStatus('current')
hwBufTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 2), )
if mibBuilder.loadTexts: hwBufTable.setStatus('current')
hwBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-LswDEVM-MIB", "hwBufModuleIndex"), (0, "HUAWEI-LswDEVM-MIB", "hwBufSize"))
if mibBuilder.loadTexts: hwBufEntry.setStatus('current')
hwBufModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwBufModuleIndex.setStatus('current')
hwBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hwBufSize.setStatus('current')
hwBufCurrentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBufCurrentTotal.setStatus('current')
hwBufCurrentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 1, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBufCurrentUsed.setStatus('current')
hwFlh = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 1, 3))
hwFlhTotalSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhTotalSize.setStatus('current')
hwFlhTotalFree = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhTotalFree.setStatus('current')
hwFlhLastDelTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 1, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhLastDelTime.setStatus('current')
hwFlhDelState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("executing", 1), ("ok", 2), ("error", 3), ("readOnly", 4), ("failtoopen", 5), ("blockMallocFail", 6), ("noneDelOperationSinceStart", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhDelState.setStatus('current')
hwFlhState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("free", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhState.setStatus('current')
hwLswdevMMibObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1))
if mibBuilder.loadTexts: hwLswdevMMibObject.setStatus('current')
hwdevMFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 1), )
if mibBuilder.loadTexts: hwdevMFanStatusTable.setStatus('current')
hwdevMFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 1, 1), ).setIndexNames((0, "HUAWEI-LswDEVM-MIB", "hwDevMFanNum"))
if mibBuilder.loadTexts: hwdevMFanStatusEntry.setStatus('current')
hwDevMFanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevMFanNum.setStatus('current')
hwDevMFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("deactive", 2), ("not-install", 3), ("unsupport", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevMFanStatus.setStatus('current')
hwdevMPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 2), )
if mibBuilder.loadTexts: hwdevMPowerStatusTable.setStatus('current')
hwdevMPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 2, 1), ).setIndexNames((0, "HUAWEI-LswDEVM-MIB", "hwDevMPowerNum"))
if mibBuilder.loadTexts: hwdevMPowerStatusEntry.setStatus('current')
hwDevMPowerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevMPowerNum.setStatus('current')
hwDevMPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("deactive", 2), ("not-install", 3), ("unsupport", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevMPowerStatus.setStatus('current')
hwdevMSlotEnvironmentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 3), )
if mibBuilder.loadTexts: hwdevMSlotEnvironmentTable.setStatus('current')
hwdevMSlotEnvironmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 3, 1), ).setIndexNames((0, "HUAWEI-LSW-DEV-ADM-MIB", "hwLswFrameIndex"), (0, "HUAWEI-LSW-DEV-ADM-MIB", "hwLswSlotIndex"), (0, "HUAWEI-LswDEVM-MIB", "hwdevMSlotEnvironmentType"))
if mibBuilder.loadTexts: hwdevMSlotEnvironmentEntry.setStatus('current')
hwdevMSlotEnvironmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("fog", 3))))
if mibBuilder.loadTexts: hwdevMSlotEnvironmentType.setStatus('current')
hwDevMSlotEnvironmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("upper", 2), ("lower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevMSlotEnvironmentStatus.setStatus('current')
hwDevMSlotEnvironmentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevMSlotEnvironmentValue.setStatus('current')
hwDevMSlotEnvironmentUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDevMSlotEnvironmentUpperLimit.setStatus('current')
hwDevMSlotEnvironmentLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDevMSlotEnvironmentLowerLimit.setStatus('current')
hwLinkUpDownTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableBoth", 1), ("disableBoth", 2), ("enableLinkUpTrapOnly", 3), ("enableLinkDownTrapOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLinkUpDownTrapEnable.setStatus('current')
hwdot1qTpFdbLearnStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qTpFdbLearnStatus.setStatus('current')
hwCfmWriteFlash = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("write", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfmWriteFlash.setStatus('current')
hwCfmEraseFlash = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfmEraseFlash.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-LswDEVM-MIB", hwdevMSlotEnvironmentTable=hwdevMSlotEnvironmentTable, hwMemFail=hwMemFail, hwCpuCostRatePer1Min=hwCpuCostRatePer1Min, hwCpuIndex=hwCpuIndex, hwCpuTable=hwCpuTable, hwMem=hwMem, PYSNMP_MODULE_ID=hwLswdevMMib, hwBufModuleIndex=hwBufModuleIndex, hwCfmEraseFlash=hwCfmEraseFlash, hwMemTable=hwMemTable, hwdevMSlotEnvironmentType=hwdevMSlotEnvironmentType, hwDevMSlotEnvironmentStatus=hwDevMSlotEnvironmentStatus, hwdevMFanStatusEntry=hwdevMFanStatusEntry, hwdevMFanStatusTable=hwdevMFanStatusTable, hwBufTable=hwBufTable, hwCpuEntry=hwCpuEntry, hwDevMSlotEnvironmentLowerLimit=hwDevMSlotEnvironmentLowerLimit, hwMemLgFree=hwMemLgFree, hwCpuCostRate=hwCpuCostRate, hwBufSize=hwBufSize, hwFlhLastDelTime=hwFlhLastDelTime, hwMemRawSliceUsed=hwMemRawSliceUsed, hwDevMSlotEnvironmentValue=hwDevMSlotEnvironmentValue, hwBufCurrentTotal=hwBufCurrentTotal, hwDevMFanStatus=hwDevMFanStatus, hwMemEntry=hwMemEntry, hwCpuCostRatePer5Min=hwCpuCostRatePer5Min, hwMemSize=hwMemSize, hwdot1qTpFdbLearnStatus=hwdot1qTpFdbLearnStatus, hwDevMSlotEnvironmentUpperLimit=hwDevMSlotEnvironmentUpperLimit, hwDevMPowerStatus=hwDevMPowerStatus, hwLinkUpDownTrapEnable=hwLinkUpDownTrapEnable, hwDevMPowerNum=hwDevMPowerNum, hwDevice=hwDevice, hwdevMSlotEnvironmentEntry=hwdevMSlotEnvironmentEntry, hwMemFailNoMem=hwMemFailNoMem, hwBufCurrentUsed=hwBufCurrentUsed, hwdevMPowerStatusEntry=hwdevMPowerStatusEntry, hwFlhState=hwFlhState, hwDevMFanNum=hwDevMFanNum, hwBufEntry=hwBufEntry, hwFlhTotalSize=hwFlhTotalSize, hwLswdevMMib=hwLswdevMMib, hwMemModuleIndex=hwMemModuleIndex, hwFlh=hwFlh, hwLswdevMMibObject=hwLswdevMMibObject, hwFlhDelState=hwFlhDelState, hwFlhTotalFree=hwFlhTotalFree, hwCfmWriteFlash=hwCfmWriteFlash, hwdevMPowerStatusTable=hwdevMPowerStatusTable, hwMemFree=hwMemFree)
