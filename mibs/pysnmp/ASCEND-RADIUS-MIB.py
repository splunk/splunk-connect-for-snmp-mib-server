#
# PySNMP MIB module ASCEND-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-RADIUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:13:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
radiusGroup, = mibBuilder.importSymbols("ASCEND-MIB", "radiusGroup")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Integer32, Unsigned32, MibIdentifier, iso, Counter64, ModuleIdentity, IpAddress, Gauge32, NotificationType, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Integer32", "Unsigned32", "MibIdentifier", "iso", "Counter64", "ModuleIdentity", "IpAddress", "Gauge32", "NotificationType", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
radiusNumAuthServers = MibScalar((1, 3, 6, 1, 4, 1, 529, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusNumAuthServers.setStatus('mandatory')
radiusNumAcctServers = MibScalar((1, 3, 6, 1, 4, 1, 529, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusNumAcctServers.setStatus('mandatory')
radiusAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 529, 13, 3), )
if mibBuilder.loadTexts: radiusAuthStatsTable.setStatus('mandatory')
radiusAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 13, 3, 1), ).setIndexNames((0, "ASCEND-RADIUS-MIB", "radAuthServerIndex"))
if mibBuilder.loadTexts: radiusAuthStatsEntry.setStatus('mandatory')
radAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthServerIndex.setStatus('mandatory')
radAuthLoginRqstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthLoginRqstSent.setStatus('mandatory')
radAuthOtherRqstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthOtherRqstSent.setStatus('mandatory')
radAuthRqstTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthRqstTimedOut.setStatus('mandatory')
radAuthOtherRqstTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthOtherRqstTimedOut.setStatus('mandatory')
radAuthRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthRspRcvd.setStatus('mandatory')
radAuthOtherRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthOtherRspRcvd.setStatus('mandatory')
radAuthUnexpRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthUnexpRspRcvd.setStatus('mandatory')
radAuthBadRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthBadRspRcvd.setStatus('mandatory')
radAuthAckRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthAckRspRcvd.setStatus('mandatory')
radAuthHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthHostIPAddress.setStatus('mandatory')
radAuthCurrentServerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("current", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthCurrentServerFlag.setStatus('mandatory')
radiusAcctStatsTable = MibTable((1, 3, 6, 1, 4, 1, 529, 13, 4), )
if mibBuilder.loadTexts: radiusAcctStatsTable.setStatus('mandatory')
radiusAcctStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 13, 4, 1), ).setIndexNames((0, "ASCEND-RADIUS-MIB", "radAcctServerIndex"))
if mibBuilder.loadTexts: radiusAcctStatsEntry.setStatus('mandatory')
radAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctServerIndex.setStatus('mandatory')
radAcctRqstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctRqstSent.setStatus('mandatory')
radAcctRqstTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctRqstTimedOut.setStatus('mandatory')
radAcctRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctRspRcvd.setStatus('mandatory')
radAcctUnexpRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctUnexpRspRcvd.setStatus('mandatory')
radAcctHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctHostIPAddress.setStatus('mandatory')
radAcctCurrentServerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctCurrentServerFlag.setStatus('mandatory')
radiusNewNASPortIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 529, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNewNASPortIDFormat.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-RADIUS-MIB", radAuthOtherRspRcvd=radAuthOtherRspRcvd, radAuthRqstTimedOut=radAuthRqstTimedOut, radAuthServerIndex=radAuthServerIndex, radiusNewNASPortIDFormat=radiusNewNASPortIDFormat, radiusNumAuthServers=radiusNumAuthServers, radiusAcctStatsEntry=radiusAcctStatsEntry, radAcctUnexpRspRcvd=radAcctUnexpRspRcvd, radAuthHostIPAddress=radAuthHostIPAddress, radAcctCurrentServerFlag=radAcctCurrentServerFlag, radAcctRqstTimedOut=radAcctRqstTimedOut, radAuthAckRspRcvd=radAuthAckRspRcvd, radAcctRspRcvd=radAcctRspRcvd, radiusNumAcctServers=radiusNumAcctServers, radiusAuthStatsTable=radiusAuthStatsTable, radAuthBadRspRcvd=radAuthBadRspRcvd, radAuthOtherRqstTimedOut=radAuthOtherRqstTimedOut, radiusAcctStatsTable=radiusAcctStatsTable, radAcctServerIndex=radAcctServerIndex, radiusAuthStatsEntry=radiusAuthStatsEntry, radAuthOtherRqstSent=radAuthOtherRqstSent, radAcctHostIPAddress=radAcctHostIPAddress, radAuthCurrentServerFlag=radAuthCurrentServerFlag, radAuthLoginRqstSent=radAuthLoginRqstSent, radAcctRqstSent=radAcctRqstSent, radAuthUnexpRspRcvd=radAuthUnexpRspRcvd, radAuthRspRcvd=radAuthRspRcvd)
