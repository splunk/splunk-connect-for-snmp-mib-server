#
# PySNMP MIB module HM2-LICENSE-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-LICENSE-MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hm2ConfigurationMibs, = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, NotificationType, ModuleIdentity, Unsigned32, Counter32, IpAddress, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "NotificationType", "ModuleIdentity", "Unsigned32", "Counter32", "IpAddress", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hm2LicenseMgmtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 3))
hm2LicenseMgmtMib.setRevisions(('2012-08-03 00:00',))
if mibBuilder.loadTexts: hm2LicenseMgmtMib.setLastUpdated('201208030000Z')
if mibBuilder.loadTexts: hm2LicenseMgmtMib.setOrganization('Hirschmann Automation and Control GmbH')
class HmLmSwLvlCap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("sw-lvl-default", 0), ("sw-lvl-2e", 1), ("sw-lvl-2s", 2), ("sw-lvl-2a", 3), ("sw-lvl-3s", 4), ("sw-lvl-3a", 5))

class HmLmLicenseLvlCap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("none", 0), ("unicast-routing", 1), ("multicast-routing", 2))

hm2LicenseMgmtMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 0))
hm2LicenseMgmtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1))
hm2LMLicenseKeyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1))
hm2LMLicenseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2))
hm2LMFeatureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3))
hm2LMSwLvlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4))
hm2LMLicenseKeyUdi = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseKeyUdi.setStatus('current')
hm2LMLicenseKeyInstall = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMLicenseKeyInstall.setStatus('current')
hm2LMLicenseKeyDelete = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMLicenseKeyDelete.setStatus('current')
hm2LMLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hm2LMLicenseTable.setStatus('current')
hm2LMLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1), ).setIndexNames((0, "HM2-LICENSE-MGMT-MIB", "hm2LMLicenseId"))
if mibBuilder.loadTexts: hm2LMLicenseEntry.setStatus('current')
hm2LMLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LMLicenseId.setStatus('current')
hm2LMLicenseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseDescription.setStatus('current')
hm2LMLicenseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseVersion.setStatus('current')
hm2LMLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseKey.setStatus('current')
hm2LMLicenseModel = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("demo", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseModel.setStatus('current')
hm2LMLicenseExpiryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseExpiryPeriod.setStatus('current')
hm2LMLicenseOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("expired", 3), ("error", 4), ("no-license", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseOperStatus.setStatus('current')
hm2LMLicenseAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMLicenseAdminStatus.setStatus('current')
hm2LMLicenseSwLvlCap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 11), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseSwLvlCap.setStatus('current')
hm2LMFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1), )
if mibBuilder.loadTexts: hm2LMFeatureTable.setStatus('current')
hm2LMFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1), ).setIndexNames((1, "HM2-LICENSE-MGMT-MIB", "hm2LMFeatureId"))
if mibBuilder.loadTexts: hm2LMFeatureEntry.setStatus('current')
hm2LMFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LMFeatureId.setStatus('current')
hm2LMFeatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureDescription.setStatus('current')
hm2LMFeatureBinaryID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureBinaryID.setStatus('current')
hm2LMFeatureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureCount.setStatus('current')
hm2LMFeatureLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureLicenseId.setStatus('current')
hm2LMFeatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("expired", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureStatus.setStatus('current')
hm2LMFeatureSwLvlCap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 10), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureSwLvlCap.setStatus('current')
hm2LMFeatureSwLicCap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 11), HmLmLicenseLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureSwLicCap.setStatus('current')
hm2LMSwLvlDescription = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMSwLvlDescription.setStatus('current')
hm2LMSwLvlCap = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 2), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMSwLvlCap.setStatus('current')
hm2LMSwLvlAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 3), HmLmSwLvlCap().clone(namedValues=NamedValues(("sw-lvl-default", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMSwLvlAdminStatus.setStatus('current')
hm2LMSwLvlOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 4), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMSwLvlOperStatus.setStatus('current')
hm2LMLicenseChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 3, 0, 1)).setObjects(("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseId"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseDescription"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseVersion"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseKey"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseModel"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseExpiryPeriod"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseOperStatus"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseAdminStatus"))
if mibBuilder.loadTexts: hm2LMLicenseChangeTrap.setStatus('current')
hm2LMFeatureChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 3, 0, 2)).setObjects(("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureId"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureDescription"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureBinaryID"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureCount"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureLicenseId"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureStatus"))
if mibBuilder.loadTexts: hm2LMFeatureChangeTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-LICENSE-MGMT-MIB", hm2LMFeatureEntry=hm2LMFeatureEntry, hm2LMLicenseOperStatus=hm2LMLicenseOperStatus, hm2LMFeatureSwLvlCap=hm2LMFeatureSwLvlCap, hm2LMSwLvlAdminStatus=hm2LMSwLvlAdminStatus, hm2LMSwLvlGroup=hm2LMSwLvlGroup, hm2LMFeatureCount=hm2LMFeatureCount, hm2LMLicenseChangeTrap=hm2LMLicenseChangeTrap, hm2LMLicenseKeyGroup=hm2LMLicenseKeyGroup, hm2LMFeatureChangeTrap=hm2LMFeatureChangeTrap, HmLmSwLvlCap=HmLmSwLvlCap, PYSNMP_MODULE_ID=hm2LicenseMgmtMib, hm2LMLicenseKey=hm2LMLicenseKey, hm2LMLicenseExpiryPeriod=hm2LMLicenseExpiryPeriod, hm2LMFeatureSwLicCap=hm2LMFeatureSwLicCap, hm2LMLicenseTable=hm2LMLicenseTable, hm2LMFeatureStatus=hm2LMFeatureStatus, hm2LMLicenseSwLvlCap=hm2LMLicenseSwLvlCap, hm2LMSwLvlOperStatus=hm2LMSwLvlOperStatus, hm2LMLicenseAdminStatus=hm2LMLicenseAdminStatus, hm2LMSwLvlCap=hm2LMSwLvlCap, hm2LMLicenseEntry=hm2LMLicenseEntry, hm2LMSwLvlDescription=hm2LMSwLvlDescription, hm2LicenseMgmtMib=hm2LicenseMgmtMib, HmLmLicenseLvlCap=HmLmLicenseLvlCap, hm2LMLicenseKeyDelete=hm2LMLicenseKeyDelete, hm2LMLicenseKeyInstall=hm2LMLicenseKeyInstall, hm2LMLicenseKeyUdi=hm2LMLicenseKeyUdi, hm2LMFeatureGroup=hm2LMFeatureGroup, hm2LMLicenseDescription=hm2LMLicenseDescription, hm2LMLicenseModel=hm2LMLicenseModel, hm2LMFeatureId=hm2LMFeatureId, hm2LicenseMgmtMibNotifications=hm2LicenseMgmtMibNotifications, hm2LMLicenseGroup=hm2LMLicenseGroup, hm2LMLicenseId=hm2LMLicenseId, hm2LMFeatureDescription=hm2LMFeatureDescription, hm2LMFeatureTable=hm2LMFeatureTable, hm2LMLicenseVersion=hm2LMLicenseVersion, hm2LMFeatureBinaryID=hm2LMFeatureBinaryID, hm2LMFeatureLicenseId=hm2LMFeatureLicenseId, hm2LicenseMgmtMibObjects=hm2LicenseMgmtMibObjects)
