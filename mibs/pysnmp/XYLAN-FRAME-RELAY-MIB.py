#
# PySNMP MIB module XYLAN-FRAME-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-FRAME-RELAY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, iso, ModuleIdentity, IpAddress, Counter64, Gauge32, TimeTicks, Bits, ObjectIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "iso", "ModuleIdentity", "IpAddress", "Counter64", "Gauge32", "TimeTicks", "Bits", "ObjectIdentity", "Integer32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanFrArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanFrArch")
frxPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 8, 1))
frxVcControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 8, 2))
frxServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 8, 3))
frxVcStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 8, 4))
frxPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1), )
if mibBuilder.loadTexts: frxPortTable.setStatus('mandatory')
frxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1), ).setIndexNames((0, "XYLAN-FRAME-RELAY-MIB", "frxPortSlotIndex"), (0, "XYLAN-FRAME-RELAY-MIB", "frxPortPortIndex"))
if mibBuilder.loadTexts: frxPortEntry.setStatus('mandatory')
frxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortSlotIndex.setStatus('mandatory')
frxPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortPortIndex.setStatus('mandatory')
frxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDescription.setStatus('mandatory')
frxPortDefaultBridgingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDefaultBridgingVLAN.setStatus('mandatory')
frxPortDefaultBridgingServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDefaultBridgingServiceNumber.setStatus('mandatory')
frxPortDefaultRoutingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDefaultRoutingVLAN.setStatus('mandatory')
frxPortDefaultCompressionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDefaultCompressionAdminStatus.setStatus('mandatory')
frxPortDefaultCompressionPRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDefaultCompressionPRetryTime.setStatus('mandatory')
frxPortDefaultCompressionPRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDefaultCompressionPRetryCount.setStatus('mandatory')
frxPortDefaultBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortDefaultBridgingMode.setStatus('mandatory')
frxVcControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1), )
if mibBuilder.loadTexts: frxVcControlTable.setStatus('mandatory')
frxVcControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1), ).setIndexNames((0, "XYLAN-FRAME-RELAY-MIB", "frxVcControlSlotIndex"), (0, "XYLAN-FRAME-RELAY-MIB", "frxVcControlPortIndex"), (0, "XYLAN-FRAME-RELAY-MIB", "frxVcControlDlci"))
if mibBuilder.loadTexts: frxVcControlEntry.setStatus('mandatory')
frxVcControlSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcControlSlotIndex.setStatus('mandatory')
frxVcControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcControlPortIndex.setStatus('mandatory')
frxVcControlDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcControlDlci.setStatus('mandatory')
frxVcControlCompressionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxVcControlCompressionAdminStatus.setStatus('mandatory')
frxVcControlCompressionOperPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("initialization", 2), ("operation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcControlCompressionOperPhase.setStatus('mandatory')
frxVcControlCompressionPRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxVcControlCompressionPRetryTime.setStatus('mandatory')
frxVcControlCompressionPRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxVcControlCompressionPRetryCount.setStatus('mandatory')
frxVcControlBridgingInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxVcControlBridgingInUse.setStatus('mandatory')
frxServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1), )
if mibBuilder.loadTexts: frxServiceTable.setStatus('mandatory')
frxServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1), ).setIndexNames((0, "XYLAN-FRAME-RELAY-MIB", "frxServiceSlotIndex"), (0, "XYLAN-FRAME-RELAY-MIB", "frxServicePortIndex"), (0, "XYLAN-FRAME-RELAY-MIB", "frxServiceNumber"), (0, "XYLAN-FRAME-RELAY-MIB", "frxServiceType"))
if mibBuilder.loadTexts: frxServiceEntry.setStatus('mandatory')
frxServiceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceSlotIndex.setStatus('mandatory')
frxServicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServicePortIndex.setStatus('mandatory')
frxServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxServiceNumber.setStatus('mandatory')
frxServiceTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceTableEntryType.setStatus('mandatory')
frxServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceDescription.setStatus('mandatory')
frxServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("trunking", 4), ("routing", 5), ("bridging", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceType.setStatus('mandatory')
frxServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxServiceOperStatus.setStatus('mandatory')
frxServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceAdminStatus.setStatus('mandatory')
frxServiceVirtualCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceVirtualCircuits.setStatus('mandatory')
frxServiceVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceVlans.setStatus('mandatory')
frxServiceBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxServiceBridgingMode.setStatus('mandatory')
frxVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1), )
if mibBuilder.loadTexts: frxVcStatsTable.setStatus('mandatory')
frxVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1), ).setIndexNames((0, "XYLAN-FRAME-RELAY-MIB", "frxVcStatsSlotIndex"), (0, "XYLAN-FRAME-RELAY-MIB", "frxVcStatsPortIndex"), (0, "XYLAN-FRAME-RELAY-MIB", "frxVcStatsDlci"))
if mibBuilder.loadTexts: frxVcStatsEntry.setStatus('mandatory')
frxVcStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsSlotIndex.setStatus('mandatory')
frxVcStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsPortIndex.setStatus('mandatory')
frxVcStatsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsDlci.setStatus('mandatory')
frxVcStatsTxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxIPOctets.setStatus('mandatory')
frxVcStatsTxIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxIPFrames.setStatus('mandatory')
frxVcStatsRxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxIPOctets.setStatus('mandatory')
frxVcStatsRxIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxIPFrames.setStatus('mandatory')
frxVcStatsTxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxIPXOctets.setStatus('mandatory')
frxVcStatsTxIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxIPXFrames.setStatus('mandatory')
frxVcStatsRxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxIPXOctets.setStatus('mandatory')
frxVcStatsRxIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxIPXFrames.setStatus('mandatory')
frxVcStatsTxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxBPDUOctets.setStatus('mandatory')
frxVcStatsTxBPDUFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxBPDUFrames.setStatus('mandatory')
frxVcStatsRxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxBPDUOctets.setStatus('mandatory')
frxVcStatsRxBPDUFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxBPDUFrames.setStatus('mandatory')
frxVcStatsTxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxEthernetOctets.setStatus('mandatory')
frxVcStatsTxEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxEthernetFrames.setStatus('mandatory')
frxVcStatsRxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxEthernetOctets.setStatus('mandatory')
frxVcStatsRxEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxEthernetFrames.setStatus('mandatory')
frxVcStatsTx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTx8025Octets.setStatus('mandatory')
frxVcStatsTx8025Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTx8025Frames.setStatus('mandatory')
frxVcStatsRx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRx8025Octets.setStatus('mandatory')
frxVcStatsRx8025Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRx8025Frames.setStatus('mandatory')
frxVcStatsTxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxFDDIOctets.setStatus('mandatory')
frxVcStatsTxFDDIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxFDDIFrames.setStatus('mandatory')
frxVcStatsRxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxFDDIOctets.setStatus('mandatory')
frxVcStatsRxFDDIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxFDDIFrames.setStatus('mandatory')
frxVcStatsTxCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxCompressedOctets.setStatus('mandatory')
frxVcStatsTxCompressedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxCompressedFrames.setStatus('mandatory')
frxVcStatsRxCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxCompressedOctets.setStatus('mandatory')
frxVcStatsRxCompressedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxCompressedFrames.setStatus('mandatory')
frxVcStatsTxPrecompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsTxPrecompressedOctets.setStatus('mandatory')
frxVcStatsRxDecompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxDecompressedOctets.setStatus('mandatory')
frxVcStatsRxCompressedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 8, 4, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxVcStatsRxCompressedDiscards.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-FRAME-RELAY-MIB", frxServiceAdminStatus=frxServiceAdminStatus, frxServiceGroup=frxServiceGroup, frxVcStatsTxIPFrames=frxVcStatsTxIPFrames, frxVcControlCompressionPRetryCount=frxVcControlCompressionPRetryCount, frxVcStatsRxIPFrames=frxVcStatsRxIPFrames, frxVcControlPortIndex=frxVcControlPortIndex, frxVcStatsRxBPDUOctets=frxVcStatsRxBPDUOctets, frxVcControlTable=frxVcControlTable, frxVcStatsRxFDDIOctets=frxVcStatsRxFDDIOctets, frxVcStatsRxIPXOctets=frxVcStatsRxIPXOctets, frxVcStatsRxCompressedFrames=frxVcStatsRxCompressedFrames, frxVcStatsTx8025Octets=frxVcStatsTx8025Octets, frxVcStatsRx8025Octets=frxVcStatsRx8025Octets, frxPortDefaultBridgingServiceNumber=frxPortDefaultBridgingServiceNumber, frxServicePortIndex=frxServicePortIndex, frxPortGroup=frxPortGroup, frxServiceBridgingMode=frxServiceBridgingMode, frxVcStatsRxFDDIFrames=frxVcStatsRxFDDIFrames, frxServiceEntry=frxServiceEntry, frxPortEntry=frxPortEntry, frxVcStatsTxIPXOctets=frxVcStatsTxIPXOctets, frxServiceDescription=frxServiceDescription, frxPortDefaultBridgingVLAN=frxPortDefaultBridgingVLAN, frxPortDefaultCompressionPRetryTime=frxPortDefaultCompressionPRetryTime, frxServiceType=frxServiceType, frxPortDefaultRoutingVLAN=frxPortDefaultRoutingVLAN, frxVcStatsRxCompressedDiscards=frxVcStatsRxCompressedDiscards, frxServiceSlotIndex=frxServiceSlotIndex, frxVcStatsRx8025Frames=frxVcStatsRx8025Frames, frxVcControlBridgingInUse=frxVcControlBridgingInUse, frxVcStatsRxEthernetOctets=frxVcStatsRxEthernetOctets, frxVcControlGroup=frxVcControlGroup, frxVcControlEntry=frxVcControlEntry, frxVcStatsDlci=frxVcStatsDlci, frxVcStatsTxIPOctets=frxVcStatsTxIPOctets, frxServiceNumber=frxServiceNumber, frxServiceOperStatus=frxServiceOperStatus, frxVcStatsTxIPXFrames=frxVcStatsTxIPXFrames, frxPortPortIndex=frxPortPortIndex, frxVcStatsTxPrecompressedOctets=frxVcStatsTxPrecompressedOctets, frxVcStatsTable=frxVcStatsTable, frxPortDefaultBridgingMode=frxPortDefaultBridgingMode, frxVcControlSlotIndex=frxVcControlSlotIndex, frxVcControlDlci=frxVcControlDlci, frxVcStatsRxIPOctets=frxVcStatsRxIPOctets, frxVcControlCompressionOperPhase=frxVcControlCompressionOperPhase, frxVcStatsTxFDDIFrames=frxVcStatsTxFDDIFrames, frxVcStatsTxCompressedFrames=frxVcStatsTxCompressedFrames, frxVcStatsRxIPXFrames=frxVcStatsRxIPXFrames, frxVcStatsRxDecompressedOctets=frxVcStatsRxDecompressedOctets, frxVcStatsRxBPDUFrames=frxVcStatsRxBPDUFrames, frxVcStatsTxEthernetFrames=frxVcStatsTxEthernetFrames, frxPortDefaultCompressionPRetryCount=frxPortDefaultCompressionPRetryCount, frxPortDefaultCompressionAdminStatus=frxPortDefaultCompressionAdminStatus, frxVcStatsPortIndex=frxVcStatsPortIndex, frxPortTable=frxPortTable, frxPortSlotIndex=frxPortSlotIndex, frxVcControlCompressionPRetryTime=frxVcControlCompressionPRetryTime, frxServiceTableEntryType=frxServiceTableEntryType, frxVcStatsTx8025Frames=frxVcStatsTx8025Frames, frxVcStatsTxEthernetOctets=frxVcStatsTxEthernetOctets, frxServiceVlans=frxServiceVlans, frxVcStatsEntry=frxVcStatsEntry, frxVcStatsTxBPDUOctets=frxVcStatsTxBPDUOctets, frxVcStatsRxEthernetFrames=frxVcStatsRxEthernetFrames, frxVcStatsTxFDDIOctets=frxVcStatsTxFDDIOctets, frxVcStatsRxCompressedOctets=frxVcStatsRxCompressedOctets, frxVcStatsTxBPDUFrames=frxVcStatsTxBPDUFrames, frxServiceVirtualCircuits=frxServiceVirtualCircuits, frxVcStatsTxCompressedOctets=frxVcStatsTxCompressedOctets, frxPortDescription=frxPortDescription, frxVcStatsSlotIndex=frxVcStatsSlotIndex, frxVcStatsGroup=frxVcStatsGroup, frxServiceTable=frxServiceTable, frxVcControlCompressionAdminStatus=frxVcControlCompressionAdminStatus)
