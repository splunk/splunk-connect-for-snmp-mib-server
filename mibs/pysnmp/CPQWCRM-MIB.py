#
# PySNMP MIB module CPQWCRM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQWCRM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:12:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, sysLocation, sysDescr, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation", "sysDescr", "sysContact")
Counter64, Bits, Gauge32, ModuleIdentity, NotificationType, MibIdentifier, ObjectIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, iso, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "ModuleIdentity", "NotificationType", "MibIdentifier", "ObjectIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "iso", "Unsigned32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqWcrm = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167))
cpqWcrmMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 1))
cpqWcrmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2))
cpqWcrmStatusSensorInternal = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3))
cpqWcrmStatusInternalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5))
cpqWcrmStatusInternalOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6))
cpqWcrmStatusInternalMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7))
cpqWcrmStatusSensorWaterCoolUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4))
cpqWcrmStatusWaterCoolUnitSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5))
cpqWcrmStatusWaterCoolUnitOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6))
cpqWcrmStatusWaterCoolUnitMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7))
cpqWcrmSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 3))
cpqWcrmSetupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 3, 1))
cpqWcrmTimerTable1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8))
cpqWcrmTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 4))
cpqWcrmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 4, 7))
cpqWcrmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 5))
cpqWcrmMibMajRev = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmMibMajRev.setStatus('mandatory')
cpqWcrmMibMinRev = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmMibMinRev.setStatus('mandatory')
cpqWcrmMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("configChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmMibCondition.setStatus('mandatory')
cpqWcrmStatusDeviceEnvironmentalController = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmStatusDeviceEnvironmentalController.setStatus('mandatory')
cpqWcrmUnitsConnected = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmUnitsConnected.setStatus('mandatory')
cpqWcrmURL = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmURL.setStatus('mandatory')
cpqWcrmInternalTypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvail", 1), ("unitWcrm", 2), ("unitIO", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalTypeOfDevice.setStatus('mandatory')
cpqWcrmInternalText = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmInternalText.setStatus('mandatory')
cpqWcrmInternalSerial = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalSerial.setStatus('mandatory')
cpqWcrmInternalStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("reset", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalStatus.setStatus('mandatory')
cpqWcrmInternalNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfSensors.setStatus('mandatory')
cpqWcrmInternalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2), )
if mibBuilder.loadTexts: cpqWcrmInternalSensorTable.setStatus('mandatory')
cpqWcrmInternalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "internalSensorIndex"))
if mibBuilder.loadTexts: cpqWcrmInternalSensorEntry.setStatus('mandatory')
internalSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorIndex.setStatus('mandatory')
internalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("leakage", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorType.setStatus('mandatory')
internalSensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorText.setStatus('mandatory')
internalSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorStatus.setStatus('mandatory')
internalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorValue.setStatus('mandatory')
internalSensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorSetHigh.setStatus('mandatory')
internalSensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorSetLow.setStatus('mandatory')
internalSensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorSetWarn.setStatus('mandatory')
cpqWcrmInternalNumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfOutputs.setStatus('mandatory')
cpqWcrmInternalOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2), )
if mibBuilder.loadTexts: cpqWcrmInternalOutputTable.setStatus('mandatory')
cpqWcrmInternalOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "internalOutputIndex"))
if mibBuilder.loadTexts: cpqWcrmInternalOutputEntry.setStatus('mandatory')
internalOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalOutputIndex.setStatus('mandatory')
internalOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("universalOut", 4), ("powerOut", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalOutputType.setStatus('mandatory')
internalOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputText.setStatus('mandatory')
internalOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputStatus.setStatus('mandatory')
internalOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputValue.setStatus('mandatory')
internalOutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputSet.setStatus('mandatory')
internalOutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputConfig.setStatus('mandatory')
internalOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputDelay.setStatus('mandatory')
internalOutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputTimeoutAction.setStatus('mandatory')
cpqWcrmInternalNumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfMsgs.setStatus('mandatory')
cpqWcrmInternalMsgTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2), )
if mibBuilder.loadTexts: cpqWcrmInternalMsgTable.setStatus('mandatory')
cpqWcrmInternalMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "internalMsgIndex"))
if mibBuilder.loadTexts: cpqWcrmInternalMsgEntry.setStatus('mandatory')
internalMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMsgIndex.setStatus('mandatory')
internalMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgText.setStatus('mandatory')
internalMsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMsgStatus.setStatus('mandatory')
internalMsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgRelay.setStatus('mandatory')
internalMsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgBeeper.setStatus('mandatory')
internalMsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap1.setStatus('mandatory')
internalMsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap2.setStatus('mandatory')
internalMsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap3.setStatus('mandatory')
internalMsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap4.setStatus('mandatory')
internalMsgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgReset.setStatus('mandatory')
cpqWcrmWaterCoolUnitTypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvail", 1), ("unitWcrm", 2), ("unitIO", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitTypeOfDevice.setStatus('mandatory')
cpqWcrmWaterCoolUnitText = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitText.setStatus('mandatory')
cpqWcrmWaterCoolUnitSerial = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSerial.setStatus('mandatory')
cpqWcrmWaterCoolUnitStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("reset", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitStatus.setStatus('mandatory')
cpqWcrmWaterCoolUnitNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfSensors.setStatus('mandatory')
cpqWcrmWaterCoolUnitSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2), )
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSensorTable.setStatus('mandatory')
cpqWcrmWaterCoolUnitSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "waterCoolUnitSensorIndex"))
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSensorEntry.setStatus('mandatory')
waterCoolUnitSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorIndex.setStatus('mandatory')
waterCoolUnitSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("tempIn", 4), ("tempOut", 5), ("heatFlow", 6), ("alarm", 7), ("warning", 8), ("rpmFan1", 9), ("rpmFan2", 10), ("rpmFan3", 11), ("fanSpeed", 12), ("tempIn1", 13), ("tempOut1", 14), ("tempIn2", 15), ("tempOut2", 16), ("tempIn3", 17), ("tempOut3", 18), ("tempWaterIn", 19), ("tempWaterOut", 20), ("waterFlow", 21), ("valve", 22), ("status", 23), ("condensateDuration", 24), ("condensateCycles", 25), ("rpmFan4", 26), ("rpmFan5", 27), ("rpmFan6", 28), ("transfSwitch", 29), ("valveActValue", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorType.setStatus('mandatory')
waterCoolUnitSensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorText.setStatus('mandatory')
waterCoolUnitSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorStatus.setStatus('mandatory')
waterCoolUnitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorValue.setStatus('mandatory')
waterCoolUnitSensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorSetHigh.setStatus('mandatory')
waterCoolUnitSensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorSetLow.setStatus('mandatory')
waterCoolUnitSensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorSetWarn.setStatus('mandatory')
cpqWcrmWaterCoolUnitNumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfOutputs.setStatus('mandatory')
cpqWcrmWaterCoolUnitOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2), )
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitOutputTable.setStatus('mandatory')
cpqWcrmWaterCoolUnitOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "waterCoolUnitOutputIndex"))
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitOutputEntry.setStatus('mandatory')
waterCoolUnitOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitOutputIndex.setStatus('mandatory')
waterCoolUnitOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("setpoint", 4), ("hysteresis", 5), ("command", 6), ("controlMode", 7), ("fanSpeedMin", 8), ("dTmin", 9), ("dTmax", 10), ("cpWatert", 11), ("setHeatload", 12), ("setEdoFlow", 13), ("setEdoHeat", 14), ("setCondCycles", 15), ("setCondRun", 16), ("doorControl", 17), ("pidContrKP", 18), ("pidContrKI", 19), ("pidContrKD", 20), ("pidSampleTime", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitOutputType.setStatus('mandatory')
waterCoolUnitOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputText.setStatus('mandatory')
waterCoolUnitOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputStatus.setStatus('mandatory')
waterCoolUnitOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputValue.setStatus('mandatory')
waterCoolUnitOutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputSet.setStatus('mandatory')
waterCoolUnitOutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputConfig.setStatus('mandatory')
waterCoolUnitOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputDelay.setStatus('mandatory')
waterCoolUnitOutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputTimeoutAction.setStatus('mandatory')
cpqWcrmWaterCoolUnitNumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfMsgs.setStatus('mandatory')
cpqWcrmWaterCoolUnitMsgTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2), )
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitMsgTable.setStatus('mandatory')
cpqWcrmWaterCoolUnitMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "waterCoolUnitMsgIndex"))
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitMsgEntry.setStatus('mandatory')
waterCoolUnitMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitMsgIndex.setStatus('mandatory')
waterCoolUnitMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgText.setStatus('mandatory')
waterCoolUnitMsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitMsgStatus.setStatus('mandatory')
waterCoolUnitMsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgRelay.setStatus('mandatory')
waterCoolUnitMsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgBeeper.setStatus('mandatory')
waterCoolUnitMsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap1.setStatus('mandatory')
waterCoolUnitMsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap2.setStatus('mandatory')
waterCoolUnitMsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap3.setStatus('mandatory')
waterCoolUnitMsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap4.setStatus('mandatory')
waterCoolUnitMsgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgReset.setStatus('mandatory')
cpqWcrmSetTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetTempUnit.setStatus('mandatory')
cpqWcrmSetBeeper = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetBeeper.setStatus('mandatory')
cpqWcrmResetRelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmResetRelay.setStatus('mandatory')
cpqWcrmLogicRelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closeAtAlarm", 1), ("openAtAlarm", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmLogicRelay.setStatus('mandatory')
cpqWcrmWebAccess = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("viewOnly", 1), ("fullAccess", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmWebAccess.setStatus('mandatory')
cpqWcrmSetupDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetupDate.setStatus('mandatory')
cpqWcrmSetupTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetupTime.setStatus('mandatory')
cpqWcrmTimerNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTimerNumber.setStatus('mandatory')
cpqWcrmTimerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2), )
if mibBuilder.loadTexts: cpqWcrmTimerTable.setStatus('mandatory')
cpqWcrmTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "cpqWcrmTimerIndex"))
if mibBuilder.loadTexts: cpqWcrmTimerEntry.setStatus('mandatory')
cpqWcrmTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTimerIndex.setStatus('mandatory')
cpqWcrmTimerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchedOff", 1), ("switchedOn", 2), ("noTime", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTimerStatus.setStatus('mandatory')
cpqWcrmTimerDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7), ("sat-sun", 8), ("mon-fri", 9), ("mon-sun", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimerDayOfWeek.setStatus('mandatory')
cpqWcrmTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimeOn.setStatus('mandatory')
cpqWcrmTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimeOff.setStatus('mandatory')
cpqWcrmTimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimeControl.setStatus('mandatory')
cpqWcrmTimerFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disTrapRec1", 1), ("disTrapRec2", 2), ("disTrapRec3", 3), ("disTrapRec4", 4), ("schedule1", 5), ("schedule2", 6), ("schedule3", 7), ("schedule4", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimerFunction.setStatus('mandatory')
cpqWcrmSetFlowUnit = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("literMin", 1), ("gallonMin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetFlowUnit.setStatus('mandatory')
cpqWcrmTraptableNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTraptableNumber.setStatus('mandatory')
cpqWcrmTrapTableTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2), )
if mibBuilder.loadTexts: cpqWcrmTrapTableTable.setStatus('mandatory')
cpqWcrmTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "trapIndex"))
if mibBuilder.loadTexts: cpqWcrmTrapTableEntry.setStatus('mandatory')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
trapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPaddress.setStatus('mandatory')
cpqWcrmResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmResetUnit.setStatus('mandatory')
alarmSensorInternal = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,1)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "internalMsgIndex"), ("CPQWCRM-MIB", "internalMsgText"), ("CPQWCRM-MIB", "internalMsgStatus"), ("CPQWCRM-MIB", "internalSensorValue"), ("CPQWCRM-MIB", "cpqWcrmURL"))
alarmSensorWaterCoolUnit = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,2)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "waterCoolUnitMsgIndex"), ("CPQWCRM-MIB", "waterCoolUnitMsgText"), ("CPQWCRM-MIB", "waterCoolUnitMsgStatus"), ("CPQWCRM-MIB", "waterCoolUnitSensorValue"), ("CPQWCRM-MIB", "cpqWcrmURL"))
alarmInternal = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,5)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "cpqWcrmInternalText"), ("CPQWCRM-MIB", "cpqWcrmInternalStatus"), ("CPQWCRM-MIB", "cpqWcrmURL"))
alarmWaterCoolUnit = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,6)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "cpqWcrmWaterCoolUnitText"), ("CPQWCRM-MIB", "cpqWcrmWaterCoolUnitStatus"), ("CPQWCRM-MIB", "cpqWcrmURL"))
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,10)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "cpqWcrmURL"))
mibBuilder.exportSymbols("CPQWCRM-MIB", cpqWcrmTimerTable=cpqWcrmTimerTable, waterCoolUnitMsgIndex=waterCoolUnitMsgIndex, cpqWcrmSetupDate=cpqWcrmSetupDate, waterCoolUnitOutputConfig=waterCoolUnitOutputConfig, cpqWcrmResetUnit=cpqWcrmResetUnit, cpqWcrmTrapControl=cpqWcrmTrapControl, cpqWcrmInternalSensorEntry=cpqWcrmInternalSensorEntry, internalSensorStatus=internalSensorStatus, cpqWcrmTimerEntry=cpqWcrmTimerEntry, cpqWcrmInternalStatus=cpqWcrmInternalStatus, cpqWcrmTimerStatus=cpqWcrmTimerStatus, waterCoolUnitOutputText=waterCoolUnitOutputText, waterCoolUnitMsgReset=waterCoolUnitMsgReset, waterCoolUnitOutputType=waterCoolUnitOutputType, alarmSensorInternal=alarmSensorInternal, internalSensorIndex=internalSensorIndex, waterCoolUnitMsgText=waterCoolUnitMsgText, waterCoolUnitMsgTrap1=waterCoolUnitMsgTrap1, cpqWcrmInternalNumberOfOutputs=cpqWcrmInternalNumberOfOutputs, waterCoolUnitOutputIndex=waterCoolUnitOutputIndex, internalSensorValue=internalSensorValue, cpqWcrmInternalNumberOfMsgs=cpqWcrmInternalNumberOfMsgs, cpqWcrmWaterCoolUnitNumberOfSensors=cpqWcrmWaterCoolUnitNumberOfSensors, cpqWcrmMibMajRev=cpqWcrmMibMajRev, waterCoolUnitMsgTrap2=waterCoolUnitMsgTrap2, internalMsgBeeper=internalMsgBeeper, internalMsgReset=internalMsgReset, internalMsgText=internalMsgText, cpqWcrmTimerNumber=cpqWcrmTimerNumber, cpqWcrmSetFlowUnit=cpqWcrmSetFlowUnit, waterCoolUnitOutputDelay=waterCoolUnitOutputDelay, internalOutputIndex=internalOutputIndex, cpqWcrmInternalOutputEntry=cpqWcrmInternalOutputEntry, cpqWcrmTraptableNumber=cpqWcrmTraptableNumber, trapIPaddress=trapIPaddress, cpqWcrmStatus=cpqWcrmStatus, waterCoolUnitOutputValue=waterCoolUnitOutputValue, cpqWcrmSetTempUnit=cpqWcrmSetTempUnit, alarmSensorWaterCoolUnit=alarmSensorWaterCoolUnit, cpqWcrmWaterCoolUnitSensorTable=cpqWcrmWaterCoolUnitSensorTable, testTrap=testTrap, cpqWcrmWaterCoolUnitNumberOfMsgs=cpqWcrmWaterCoolUnitNumberOfMsgs, internalOutputText=internalOutputText, cpqWcrmStatusWaterCoolUnitOutputs=cpqWcrmStatusWaterCoolUnitOutputs, cpqWcrmSetupTime=cpqWcrmSetupTime, internalMsgTrap3=internalMsgTrap3, internalOutputValue=internalOutputValue, cpqWcrmStatusInternalMsg=cpqWcrmStatusInternalMsg, cpqWcrmStatusDeviceEnvironmentalController=cpqWcrmStatusDeviceEnvironmentalController, cpqWcrmSetBeeper=cpqWcrmSetBeeper, cpqWcrm=cpqWcrm, waterCoolUnitMsgBeeper=waterCoolUnitMsgBeeper, waterCoolUnitMsgTrap4=waterCoolUnitMsgTrap4, cpqWcrmMibRev=cpqWcrmMibRev, cpqWcrmWaterCoolUnitStatus=cpqWcrmWaterCoolUnitStatus, internalMsgTrap2=internalMsgTrap2, cpqWcrmStatusSensorWaterCoolUnit=cpqWcrmStatusSensorWaterCoolUnit, cpqWcrmInternalSensorTable=cpqWcrmInternalSensorTable, internalOutputDelay=internalOutputDelay, waterCoolUnitOutputSet=waterCoolUnitOutputSet, internalMsgStatus=internalMsgStatus, internalSensorText=internalSensorText, waterCoolUnitOutputTimeoutAction=waterCoolUnitOutputTimeoutAction, alarmWaterCoolUnit=alarmWaterCoolUnit, waterCoolUnitMsgRelay=waterCoolUnitMsgRelay, cpqWcrmUnitsConnected=cpqWcrmUnitsConnected, cpqWcrmInternalSerial=cpqWcrmInternalSerial, cpqWcrmWaterCoolUnitSensorEntry=cpqWcrmWaterCoolUnitSensorEntry, cpqWcrmInternalNumberOfSensors=cpqWcrmInternalNumberOfSensors, waterCoolUnitSensorType=waterCoolUnitSensorType, internalMsgIndex=internalMsgIndex, trapIndex=trapIndex, waterCoolUnitSensorStatus=waterCoolUnitSensorStatus, waterCoolUnitSensorSetLow=waterCoolUnitSensorSetLow, waterCoolUnitSensorSetHigh=waterCoolUnitSensorSetHigh, waterCoolUnitSensorValue=waterCoolUnitSensorValue, cpqWcrmTimeOn=cpqWcrmTimeOn, cpqWcrmStatusSensorInternal=cpqWcrmStatusSensorInternal, cpqWcrmLogicRelay=cpqWcrmLogicRelay, cpqWcrmSetup=cpqWcrmSetup, cpqWcrmWebAccess=cpqWcrmWebAccess, cpqWcrmMibMinRev=cpqWcrmMibMinRev, waterCoolUnitMsgTrap3=waterCoolUnitMsgTrap3, internalOutputStatus=internalOutputStatus, cpqWcrmTimerTable1=cpqWcrmTimerTable1, cpqWcrmInternalMsgTable=cpqWcrmInternalMsgTable, cpqWcrmWaterCoolUnitTypeOfDevice=cpqWcrmWaterCoolUnitTypeOfDevice, cpqWcrmTimerFunction=cpqWcrmTimerFunction, cpqWcrmTimeOff=cpqWcrmTimeOff, waterCoolUnitSensorSetWarn=waterCoolUnitSensorSetWarn, internalSensorSetLow=internalSensorSetLow, waterCoolUnitOutputStatus=waterCoolUnitOutputStatus, cpqWcrmInternalText=cpqWcrmInternalText, cpqWcrmWaterCoolUnitMsgTable=cpqWcrmWaterCoolUnitMsgTable, cpqWcrmTraps=cpqWcrmTraps, internalSensorSetHigh=internalSensorSetHigh, waterCoolUnitMsgStatus=waterCoolUnitMsgStatus, cpqWcrmSetupGeneral=cpqWcrmSetupGeneral, internalOutputSet=internalOutputSet, cpqWcrmInternalTypeOfDevice=cpqWcrmInternalTypeOfDevice, trapStatus=trapStatus, cpqWcrmWaterCoolUnitMsgEntry=cpqWcrmWaterCoolUnitMsgEntry, cpqWcrmTrapTableEntry=cpqWcrmTrapTableEntry, internalMsgTrap4=internalMsgTrap4, waterCoolUnitSensorIndex=waterCoolUnitSensorIndex, cpqWcrmStatusInternalSensors=cpqWcrmStatusInternalSensors, cpqWcrmStatusWaterCoolUnitMsg=cpqWcrmStatusWaterCoolUnitMsg, cpqWcrmURL=cpqWcrmURL, cpqWcrmResetRelay=cpqWcrmResetRelay, cpqWcrmTimerIndex=cpqWcrmTimerIndex, internalOutputConfig=internalOutputConfig, cpqWcrmStatusInternalOutputs=cpqWcrmStatusInternalOutputs, cpqWcrmWaterCoolUnitSerial=cpqWcrmWaterCoolUnitSerial, internalSensorType=internalSensorType, waterCoolUnitSensorText=waterCoolUnitSensorText, internalMsgTrap1=internalMsgTrap1, cpqWcrmInternalMsgEntry=cpqWcrmInternalMsgEntry, internalOutputTimeoutAction=internalOutputTimeoutAction, cpqWcrmMibCondition=cpqWcrmMibCondition, internalSensorSetWarn=internalSensorSetWarn, internalMsgRelay=internalMsgRelay, cpqWcrmInternalOutputTable=cpqWcrmInternalOutputTable, cpqWcrmStatusWaterCoolUnitSensors=cpqWcrmStatusWaterCoolUnitSensors, cpqWcrmControl=cpqWcrmControl, cpqWcrmWaterCoolUnitText=cpqWcrmWaterCoolUnitText, cpqWcrmWaterCoolUnitOutputTable=cpqWcrmWaterCoolUnitOutputTable, cpqWcrmWaterCoolUnitOutputEntry=cpqWcrmWaterCoolUnitOutputEntry, cpqWcrmTrapTableTable=cpqWcrmTrapTableTable, cpqWcrmTimerDayOfWeek=cpqWcrmTimerDayOfWeek, alarmInternal=alarmInternal, cpqWcrmTimeControl=cpqWcrmTimeControl, cpqWcrmWaterCoolUnitNumberOfOutputs=cpqWcrmWaterCoolUnitNumberOfOutputs, internalOutputType=internalOutputType)
