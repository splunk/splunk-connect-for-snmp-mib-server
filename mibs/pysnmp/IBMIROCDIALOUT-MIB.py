#
# PySNMP MIB module IBMIROCDIALOUT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMIROCDIALOUT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Integer32, IpAddress, iso, Bits, MibIdentifier, NotificationType, enterprises, TimeTicks, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Integer32", "IpAddress", "iso", "Bits", "MibIdentifier", "NotificationType", "enterprises", "TimeTicks", "Counter32", "Gauge32")
TextualConvention, RowStatus, TestAndIncr, DisplayString, PhysAddress, TruthValue, AutonomousType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TestAndIncr", "DisplayString", "PhysAddress", "TruthValue", "AutonomousType")
ibmIROCroutingDialOut = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm2210 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72))
ibmIROC = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119))
ibmIROCrouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4))
ibmDialOutTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 0))
ibmDialOutMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1))
ibmDialOutDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 2))
ibmDialOutConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 3))
ibmDialOutGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 1))
dialOutCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 3, 1))
dialOutGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 3, 2))
dialOutIfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2), )
if mibBuilder.loadTexts: dialOutIfTable.setStatus('mandatory')
dialOutIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dialOutIfEntry.setStatus('mandatory')
dialOutIfUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutIfUserName.setStatus('mandatory')
dialOutIfTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutIfTimeRemaining.setStatus('mandatory')
dialOutIfInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutIfInactivityTimer.setStatus('mandatory')
dialOutIfDTRState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noChange", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutIfDTRState.setStatus('mandatory')
dialOutIfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("hose", 2), ("telnet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutIfProtocol.setStatus('mandatory')
dialOutEnableComport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutEnableComport.setStatus('mandatory')
dialOutSendBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutSendBinary.setStatus('mandatory')
dialOutSupressGoAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutSupressGoAhead.setStatus('mandatory')
dialOutDisableEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialOutDisableEcho.setStatus('mandatory')
dialOutPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialOutPortName.setStatus('mandatory')
dialOutIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 3, 2, 1))
dialOutCoreCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6, 3, 1, 1))
mibBuilder.exportSymbols("IBMIROCDIALOUT-MIB", dialOutIfProtocol=dialOutIfProtocol, ibm=ibm, ibmIROCrouting=ibmIROCrouting, ibmDialOutTraps=ibmDialOutTraps, dialOutIfTable=dialOutIfTable, dialOutGroups=dialOutGroups, dialOutCoreCompliance=dialOutCoreCompliance, ibmProd=ibmProd, dialOutIfTimeRemaining=dialOutIfTimeRemaining, ibm2210=ibm2210, dialOutIfEntry=dialOutIfEntry, dialOutCompliances=dialOutCompliances, ibmDialOutMIB=ibmDialOutMIB, dialOutDisableEcho=dialOutDisableEcho, ibmDialOutDomains=ibmDialOutDomains, ibmDialOutGeneral=ibmDialOutGeneral, ibmDialOutConformance=ibmDialOutConformance, ibmIROCroutingDialOut=ibmIROCroutingDialOut, dialOutPortName=dialOutPortName, ibmIROC=ibmIROC, dialOutIfUserName=dialOutIfUserName, dialOutIfGroup=dialOutIfGroup, dialOutIfInactivityTimer=dialOutIfInactivityTimer, dialOutIfDTRState=dialOutIfDTRState, dialOutEnableComport=dialOutEnableComport, dialOutSendBinary=dialOutSendBinary, dialOutSupressGoAhead=dialOutSupressGoAhead)
