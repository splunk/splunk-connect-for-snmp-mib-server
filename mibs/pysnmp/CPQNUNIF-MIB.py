#
# PySNMP MIB module CPQNUNIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQNUNIF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibIdentifier, iso, ModuleIdentity, enterprises, IpAddress, Bits, NotificationType, Integer32, Unsigned32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "iso", "ModuleIdentity", "enterprises", "IpAddress", "Bits", "NotificationType", "Integer32", "Unsigned32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
compaq = MibIdentifier((1, 3, 6, 1, 4, 1, 232))
cpqnCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121))
cpqnMibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121, 1))
cpqnUnitControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121, 2))
cpqnVersionInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121, 3))
cpqnAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121, 4))
cpqnTrapDestinations = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121, 5))
cpqnNetworkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121, 6))
cpqnBootpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 121, 7))
class CpqnRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("row-valid", 1), ("row-invalid", 2))

class IpxAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

cpqnMibModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 1, 1), )
if mibBuilder.loadTexts: cpqnMibModuleTable.setStatus('mandatory')
cpqnMibModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 1, 1, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnMibModuleIndex"))
if mibBuilder.loadTexts: cpqnMibModuleEntry.setStatus('mandatory')
cpqnMibModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnMibModuleIndex.setStatus('mandatory')
cpqnMibModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnMibModuleDescr.setStatus('mandatory')
cpqnMibModuleOid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 1, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnMibModuleOid.setStatus('mandatory')
cpqnUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 232, 121, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("reset", 2), ("warm-start", 3), ("reset-to-factory-values", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnUnitReset.setStatus('mandatory')
cpqnPrimarySerialPort = MibScalar((1, 3, 6, 1, 4, 1, 232, 121, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnPrimarySerialPort.setStatus('mandatory')
cpqnSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 2, 3), )
if mibBuilder.loadTexts: cpqnSerialPortTable.setStatus('mandatory')
cpqnSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 2, 3, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnSPortIndex"))
if mibBuilder.loadTexts: cpqnSerialPortEntry.setStatus('mandatory')
cpqnSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnSPortIndex.setStatus('mandatory')
cpqnSPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnSPortIfIndex.setStatus('mandatory')
cpqnSPortModemInitStringEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnSPortModemInitStringEnable.setStatus('mandatory')
cpqnSPortModemInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnSPortModemInitString.setStatus('mandatory')
cpqnSPortModemAutoNegotiateState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnSPortModemAutoNegotiateState.setStatus('mandatory')
cpqnSPortBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnSPortBaudRate.setStatus('mandatory')
cpqnSupportedBaudRateTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 2, 4), )
if mibBuilder.loadTexts: cpqnSupportedBaudRateTable.setStatus('mandatory')
cpqnSupportedBaudRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 2, 4, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnBaudRatePortIndex"), (0, "CPQNUNIF-MIB", "cpqnBaudRateIndex"))
if mibBuilder.loadTexts: cpqnSupportedBaudRateEntry.setStatus('mandatory')
cpqnBaudRatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnBaudRatePortIndex.setStatus('mandatory')
cpqnBaudRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnBaudRateIndex.setStatus('mandatory')
cpqnBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnBaudRate.setStatus('mandatory')
class CpqnVersionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("hardware", 2), ("software", 3))

class CpqnVersionStep(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("engineering", 2), ("alpha", 3), ("beta", 4), ("prototype", 5), ("pilot", 6), ("pre-production", 7), ("production", 8), ("post-production", 9), ("simple-revision", 10))

cpqnVersionTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 3, 1), )
if mibBuilder.loadTexts: cpqnVersionTable.setStatus('mandatory')
cpqnVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnVersionIndex"))
if mibBuilder.loadTexts: cpqnVersionEntry.setStatus('mandatory')
cpqnVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionIndex.setStatus('mandatory')
cpqnVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 2), CpqnVersionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionType.setStatus('mandatory')
cpqnVersionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionDesc.setStatus('mandatory')
cpqnVersionMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionMajor.setStatus('mandatory')
cpqnVersionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionMinor.setStatus('mandatory')
cpqnVersionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 6), CpqnVersionStep()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionStep.setStatus('mandatory')
cpqnVersionRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionRev.setStatus('mandatory')
cpqnVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionSerialNumber.setStatus('mandatory')
cpqnVersionUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionUnitId.setStatus('mandatory')
cpqnVersionParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnVersionParentIndex.setStatus('mandatory')
cpqnAclTelnetControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 121, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclTelnetControl.setStatus('mandatory')
cpqnCommunityAccessIPTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 4, 2), )
if mibBuilder.loadTexts: cpqnCommunityAccessIPTable.setStatus('mandatory')
cpqnCommAccessIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 4, 2, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnAclIPIndex"))
if mibBuilder.loadTexts: cpqnCommAccessIPEntry.setStatus('mandatory')
cpqnAclIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnAclIPIndex.setStatus('mandatory')
cpqnAclIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 2, 1, 2), CpqnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPRowStatus.setStatus('mandatory')
cpqnAclIPAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPAddrMask.setStatus('mandatory')
cpqnAclIPAddrMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPAddrMatch.setStatus('mandatory')
cpqnAclIPCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPCommunity.setStatus('mandatory')
cpqnAclIPRights = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-access", 1), ("read-only-prevent-telnet", 2), ("read-only-allow-telnet", 3), ("read-write-allow-telnet", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPRights.setStatus('mandatory')
cpqnCommunityAccessIPXTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 4, 3), )
if mibBuilder.loadTexts: cpqnCommunityAccessIPXTable.setStatus('mandatory')
cpqnCommAccessIPXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 4, 3, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnAclIPXIndex"))
if mibBuilder.loadTexts: cpqnCommAccessIPXEntry.setStatus('mandatory')
cpqnAclIPXIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnAclIPXIndex.setStatus('mandatory')
cpqnAclIPXRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 3, 1, 2), CpqnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPXRowStatus.setStatus('mandatory')
cpqnAclIPXAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 3, 1, 3), IpxAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPXAddrMask.setStatus('mandatory')
cpqnAclIPXAddrMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 3, 1, 4), IpxAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPXAddrMatch.setStatus('mandatory')
cpqnAclIPXCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPXCommunity.setStatus('mandatory')
cpqnAclIPXRights = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-access", 1), ("read-only-access", 2), ("read-write-access", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnAclIPXRights.setStatus('mandatory')
cpqnIPTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 5, 1), )
if mibBuilder.loadTexts: cpqnIPTrapDestTable.setStatus('mandatory')
cpqnIPTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 5, 1, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnIPTrapDestIndex"))
if mibBuilder.loadTexts: cpqnIPTrapDestEntry.setStatus('mandatory')
cpqnIPTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnIPTrapDestIndex.setStatus('mandatory')
cpqnIPTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 1, 1, 2), CpqnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIPTrapDestRowStatus.setStatus('mandatory')
cpqnIPTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIPTrapDestCommunity.setStatus('mandatory')
cpqnIPTrapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIPTrapDestAddress.setStatus('mandatory')
cpqnIPXTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 5, 2), )
if mibBuilder.loadTexts: cpqnIPXTrapDestTable.setStatus('mandatory')
cpqnIPXTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 5, 2, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnIPXTrapDestIndex"))
if mibBuilder.loadTexts: cpqnIPXTrapDestEntry.setStatus('mandatory')
cpqnIPXTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnIPXTrapDestIndex.setStatus('mandatory')
cpqnIPXTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 2, 1, 2), CpqnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIPXTrapDestRowStatus.setStatus('mandatory')
cpqnIPXTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIPXTrapDestCommunity.setStatus('mandatory')
cpqnIPXTrapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 5, 2, 1, 4), IpxAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIPXTrapDestAddress.setStatus('mandatory')
cpqnIpNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 6, 1), )
if mibBuilder.loadTexts: cpqnIpNetworkTable.setStatus('mandatory')
cpqnIpNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnIpIfIndex"))
if mibBuilder.loadTexts: cpqnIpNetworkEntry.setStatus('mandatory')
cpqnIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnIpIfIndex.setStatus('mandatory')
cpqnIpPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnIpPhysAddr.setStatus('mandatory')
cpqnIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpAddr.setStatus('mandatory')
cpqnIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpNetMask.setStatus('mandatory')
cpqnIpRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpRouter.setStatus('mandatory')
cpqnIpFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("ethernet-ii", 2), ("ieee-802-2-snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpFrameType.setStatus('mandatory')
cpqnIpAutoDiscoveryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discover", 1), ("do-not-discover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpAutoDiscoveryStatus.setStatus('mandatory')
cpqnIpPingPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(55, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpPingPktRate.setStatus('mandatory')
cpqnIpInfoSave = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ignore-changes", 1), ("write-changes-to-nvram", 2), ("values-changed", 3), ("values-valid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpInfoSave.setStatus('mandatory')
cpqnIpxNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 6, 2), )
if mibBuilder.loadTexts: cpqnIpxNetworkTable.setStatus('mandatory')
cpqnIpxNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 6, 2, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnIpxIfIndex"))
if mibBuilder.loadTexts: cpqnIpxNetworkEntry.setStatus('mandatory')
cpqnIpxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnIpxIfIndex.setStatus('mandatory')
cpqnIpxPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnIpxPhysAddr.setStatus('mandatory')
cpqnIpxFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-applicable", 1), ("ethernet-ii", 2), ("ethernet-802-3-raw", 3), ("ieee-802-2", 4), ("ieee-802-2-snap", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpxFrameType.setStatus('mandatory')
cpqnIpxNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnIpxNetworkNumber.setStatus('mandatory')
cpqnIpxSAPBcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-ipx-SAPs", 1), ("no-ipx-SAPs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnIpxSAPBcastStatus.setStatus('mandatory')
cpqnBootpTable = MibTable((1, 3, 6, 1, 4, 1, 232, 121, 7, 1), )
if mibBuilder.loadTexts: cpqnBootpTable.setStatus('mandatory')
cpqnBootpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 121, 7, 1, 1), ).setIndexNames((0, "CPQNUNIF-MIB", "cpqnBootpIfIndex"))
if mibBuilder.loadTexts: cpqnBootpEntry.setStatus('mandatory')
cpqnBootpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnBootpIfIndex.setStatus('mandatory')
cpqnBootpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable-bootp", 1), ("enable-bootp-ethernet-ii", 2), ("enable-bootp-ieee-802-2-snap", 3), ("enable-bootp-both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnBootpEnable.setStatus('mandatory')
cpqnBootpRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnBootpRetries.setStatus('mandatory')
cpqnBootpRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqnBootpRetryInterval.setStatus('mandatory')
cpqnBootpServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 121, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqnBootpServerIpAddr.setStatus('mandatory')
mibBuilder.exportSymbols("CPQNUNIF-MIB", cpqnIPTrapDestCommunity=cpqnIPTrapDestCommunity, cpqnAclIPXCommunity=cpqnAclIPXCommunity, cpqnTrapDestinations=cpqnTrapDestinations, cpqnSPortModemInitString=cpqnSPortModemInitString, CpqnRowStatus=CpqnRowStatus, cpqnIpNetMask=cpqnIpNetMask, cpqnMibModuleDescr=cpqnMibModuleDescr, cpqnVersionDesc=cpqnVersionDesc, cpqnAclIPRowStatus=cpqnAclIPRowStatus, cpqnSerialPortEntry=cpqnSerialPortEntry, cpqnIPTrapDestAddress=cpqnIPTrapDestAddress, cpqnPrimarySerialPort=cpqnPrimarySerialPort, cpqnIPXTrapDestIndex=cpqnIPXTrapDestIndex, cpqnVersionMajor=cpqnVersionMajor, cpqnBootpRetries=cpqnBootpRetries, cpqnAclIPRights=cpqnAclIPRights, cpqnSPortIndex=cpqnSPortIndex, cpqnMibModuleTable=cpqnMibModuleTable, cpqnIpAddr=cpqnIpAddr, cpqnIpxNetworkEntry=cpqnIpxNetworkEntry, cpqnAclIPXRights=cpqnAclIPXRights, cpqnBootpEntry=cpqnBootpEntry, cpqnIpxIfIndex=cpqnIpxIfIndex, cpqnAclIPAddrMask=cpqnAclIPAddrMask, cpqnMibModuleOid=cpqnMibModuleOid, cpqnIpxNetworkNumber=cpqnIpxNetworkNumber, cpqnVersionIndex=cpqnVersionIndex, cpqnUnitControl=cpqnUnitControl, cpqnSPortModemAutoNegotiateState=cpqnSPortModemAutoNegotiateState, cpqnIPXTrapDestRowStatus=cpqnIPXTrapDestRowStatus, CpqnVersionStep=CpqnVersionStep, cpqnIPTrapDestEntry=cpqnIPTrapDestEntry, cpqnCommunityAccessIPTable=cpqnCommunityAccessIPTable, cpqnVersionEntry=cpqnVersionEntry, cpqnSPortBaudRate=cpqnSPortBaudRate, cpqnIpxFrameType=cpqnIpxFrameType, cpqnBootpEnable=cpqnBootpEnable, cpqnIPTrapDestTable=cpqnIPTrapDestTable, cpqnCommAccessIPXEntry=cpqnCommAccessIPXEntry, cpqnIPXTrapDestAddress=cpqnIPXTrapDestAddress, cpqnAccessControl=cpqnAccessControl, cpqnIpNetworkEntry=cpqnIpNetworkEntry, cpqnVersionUnitId=cpqnVersionUnitId, cpqnAclIPAddrMatch=cpqnAclIPAddrMatch, cpqnAclIPXRowStatus=cpqnAclIPXRowStatus, cpqnBaudRateIndex=cpqnBaudRateIndex, cpqnIPTrapDestIndex=cpqnIPTrapDestIndex, cpqnIpFrameType=cpqnIpFrameType, cpqnVersionMinor=cpqnVersionMinor, cpqnAclTelnetControl=cpqnAclTelnetControl, cpqnSPortIfIndex=cpqnSPortIfIndex, cpqnVersionParentIndex=cpqnVersionParentIndex, cpqnIpxNetworkTable=cpqnIpxNetworkTable, cpqnIpIfIndex=cpqnIpIfIndex, cpqnBootpTable=cpqnBootpTable, cpqnVersionInformation=cpqnVersionInformation, cpqnMibModules=cpqnMibModules, cpqnSupportedBaudRateTable=cpqnSupportedBaudRateTable, cpqnMibModuleEntry=cpqnMibModuleEntry, cpqnIPTrapDestRowStatus=cpqnIPTrapDestRowStatus, cpqnBootpRetryInterval=cpqnBootpRetryInterval, cpqnSupportedBaudRateEntry=cpqnSupportedBaudRateEntry, cpqnIPXTrapDestEntry=cpqnIPXTrapDestEntry, cpqnSerialPortTable=cpqnSerialPortTable, cpqnBaudRatePortIndex=cpqnBaudRatePortIndex, CpqnVersionType=CpqnVersionType, compaq=compaq, cpqnIpxPhysAddr=cpqnIpxPhysAddr, cpqnVersionRev=cpqnVersionRev, cpqnBootpConfig=cpqnBootpConfig, cpqnAclIPIndex=cpqnAclIPIndex, cpqnIpPingPktRate=cpqnIpPingPktRate, cpqnVersionTable=cpqnVersionTable, cpqnIpxSAPBcastStatus=cpqnIpxSAPBcastStatus, cpqnVersionType=cpqnVersionType, cpqnIPXTrapDestTable=cpqnIPXTrapDestTable, cpqnIpPhysAddr=cpqnIpPhysAddr, cpqnIpRouter=cpqnIpRouter, cpqnCommon=cpqnCommon, cpqnMibModuleIndex=cpqnMibModuleIndex, cpqnVersionSerialNumber=cpqnVersionSerialNumber, cpqnIpInfoSave=cpqnIpInfoSave, IpxAddress=IpxAddress, cpqnSPortModemInitStringEnable=cpqnSPortModemInitStringEnable, cpqnVersionStep=cpqnVersionStep, cpqnAclIPXAddrMatch=cpqnAclIPXAddrMatch, cpqnCommunityAccessIPXTable=cpqnCommunityAccessIPXTable, cpqnAclIPXAddrMask=cpqnAclIPXAddrMask, cpqnBaudRate=cpqnBaudRate, cpqnIpNetworkTable=cpqnIpNetworkTable, cpqnIpAutoDiscoveryStatus=cpqnIpAutoDiscoveryStatus, cpqnUnitReset=cpqnUnitReset, cpqnBootpIfIndex=cpqnBootpIfIndex, cpqnIPXTrapDestCommunity=cpqnIPXTrapDestCommunity, cpqnNetworkInfo=cpqnNetworkInfo, cpqnCommAccessIPEntry=cpqnCommAccessIPEntry, cpqnAclIPCommunity=cpqnAclIPCommunity, cpqnAclIPXIndex=cpqnAclIPXIndex, cpqnBootpServerIpAddr=cpqnBootpServerIpAddr)
