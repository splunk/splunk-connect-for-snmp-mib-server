#
# PySNMP MIB module PAIRGAIN-ATMTC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAIRGAIN-ATMTC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:27:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgAtmTcMIB, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgAtmTcMIB")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, Gauge32, ObjectIdentity, MibIdentifier, iso, Counter64, IpAddress, Bits, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Gauge32", "ObjectIdentity", "MibIdentifier", "iso", "Counter64", "IpAddress", "Bits", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString, TimeStamp, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue", "RowStatus")
pgatmTcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1))
if mibBuilder.loadTexts: pgatmTcMIB.setLastUpdated('0003170000Z')
if mibBuilder.loadTexts: pgatmTcMIB.setOrganization('PairGain Technologies Inc.')
pgatmTcMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1))
pgatmTcLayerTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1), )
if mibBuilder.loadTexts: pgatmTcLayerTable.setStatus('current')
pgatmTcLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgatmTcLayerEntry.setStatus('current')
pgatmTcTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgatmTcTxCellCount.setStatus('current')
pgatmTcRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgatmTcRxCellCount.setStatus('current')
pgatmTcNonMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgatmTcNonMatchCount.setStatus('current')
pgatmTcLOCDEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgatmTcLOCDEventCount.setStatus('current')
pgatmTcCorrHECError = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgatmTcCorrHECError.setStatus('current')
pgatmTcUnCorrHECError = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgatmTcUnCorrHECError.setStatus('current')
pgatmTcLayerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("loopback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgatmTcLayerMode.setStatus('current')
pgatmTcScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("sss", 1), ("dss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgatmTcScramble.setStatus('current')
pgatmTcClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgatmTcClearStats.setStatus('current')
pgatmTcStatsLastCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 16, 1, 1, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgatmTcStatsLastCleared.setStatus('current')
mibBuilder.exportSymbols("PAIRGAIN-ATMTC-MIB", pgatmTcTxCellCount=pgatmTcTxCellCount, pgatmTcMIB=pgatmTcMIB, pgatmTcUnCorrHECError=pgatmTcUnCorrHECError, pgatmTcClearStats=pgatmTcClearStats, pgatmTcRxCellCount=pgatmTcRxCellCount, pgatmTcScramble=pgatmTcScramble, pgatmTcLayerMode=pgatmTcLayerMode, pgatmTcStatsLastCleared=pgatmTcStatsLastCleared, pgatmTcLayerTable=pgatmTcLayerTable, pgatmTcCorrHECError=pgatmTcCorrHECError, pgatmTcLayerEntry=pgatmTcLayerEntry, pgatmTcLOCDEventCount=pgatmTcLOCDEventCount, pgatmTcMibObjects=pgatmTcMibObjects, pgatmTcNonMatchCount=pgatmTcNonMatchCount, PYSNMP_MODULE_ID=pgatmTcMIB)
