#
# PySNMP MIB module RFC1243-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1243-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, iso, Integer32, ModuleIdentity, Unsigned32, IpAddress, Bits, TimeTicks, mib_2, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "Unsigned32", "IpAddress", "Bits", "TimeTicks", "mib-2", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
appletalk = MibIdentifier((1, 3, 6, 1, 2, 1, 13))
class DdpAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

llap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 1))
aarp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 2))
atport = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 3))
ddp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4))
rtmp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 5))
kip = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 6))
zip = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 7))
nbp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 8))
atecho = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 9))
llapTable = MibTable((1, 3, 6, 1, 2, 1, 13, 1, 1), )
if mibBuilder.loadTexts: llapTable.setStatus('mandatory')
llapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 1, 1, 1), ).setIndexNames((0, "RFC1243-MIB", "llapIfIndex"))
if mibBuilder.loadTexts: llapEntry.setStatus('mandatory')
llapIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapIfIndex.setStatus('mandatory')
llapInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInPkts.setStatus('mandatory')
llapOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapOutPkts.setStatus('mandatory')
llapInNoHandlers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInNoHandlers.setStatus('mandatory')
llapInLengthErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInLengthErrors.setStatus('mandatory')
llapInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInErrors.setStatus('mandatory')
llapCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapCollisions.setStatus('mandatory')
llapDefers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapDefers.setStatus('mandatory')
llapNoDataErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapNoDataErrors.setStatus('mandatory')
llapRandomCTSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapRandomCTSErrors.setStatus('mandatory')
llapFCSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapFCSErrors.setStatus('mandatory')
aarpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 2, 1), )
if mibBuilder.loadTexts: aarpTable.setStatus('mandatory')
aarpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 2, 1, 1), ).setIndexNames((0, "RFC1243-MIB", "aarpIfIndex"), (0, "RFC1243-MIB", "aarpNetAddress"))
if mibBuilder.loadTexts: aarpEntry.setStatus('mandatory')
aarpIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aarpIfIndex.setStatus('mandatory')
aarpPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aarpPhysAddress.setStatus('mandatory')
aarpNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 3), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aarpNetAddress.setStatus('mandatory')
atportTable = MibTable((1, 3, 6, 1, 2, 1, 13, 3, 1), )
if mibBuilder.loadTexts: atportTable.setStatus('mandatory')
atportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 3, 1, 1), ).setIndexNames((0, "RFC1243-MIB", "atportIndex"))
if mibBuilder.loadTexts: atportEntry.setStatus('mandatory')
atportIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportIndex.setStatus('mandatory')
atportDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportDescr.setStatus('mandatory')
atportType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("localtalk", 2), ("ethertalk1", 3), ("ethertalk2", 4), ("tokentalk", 5), ("iptalk", 6), ("serial-ppp", 7), ("serial-nonstandard", 8), ("virtual", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportType.setStatus('mandatory')
atportNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportNetStart.setStatus('mandatory')
atportNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportNetEnd.setStatus('mandatory')
atportNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 6), DdpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportNetAddress.setStatus('mandatory')
atportStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operational", 1), ("unconfigured", 2), ("off", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportStatus.setStatus('mandatory')
atportNetConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configured", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportNetConfig.setStatus('mandatory')
atportZoneConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configured", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportZoneConfig.setStatus('mandatory')
atportZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZone.setStatus('mandatory')
atportIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportIfIndex.setStatus('mandatory')
ddpOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutRequests.setStatus('mandatory')
ddpOutShorts = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutShorts.setStatus('mandatory')
ddpOutLongs = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutLongs.setStatus('mandatory')
ddpInReceives = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpInReceives.setStatus('mandatory')
ddpForwRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwRequests.setStatus('mandatory')
ddpInLocalDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpInLocalDatagrams.setStatus('mandatory')
ddpNoProtocolHandlers = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpNoProtocolHandlers.setStatus('mandatory')
ddpOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutNoRoutes.setStatus('mandatory')
ddpTooShortErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpTooShortErrors.setStatus('mandatory')
ddpTooLongErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpTooLongErrors.setStatus('mandatory')
ddpBroadcastErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpBroadcastErrors.setStatus('mandatory')
ddpShortDDPErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpShortDDPErrors.setStatus('mandatory')
ddpHopCountErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpHopCountErrors.setStatus('mandatory')
ddpChecksumErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpChecksumErrors.setStatus('mandatory')
rtmpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 5, 1), )
if mibBuilder.loadTexts: rtmpTable.setStatus('mandatory')
rtmpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 5, 1, 1), ).setIndexNames((0, "RFC1243-MIB", "rtmpRangeStart"))
if mibBuilder.loadTexts: rtmpEntry.setStatus('mandatory')
rtmpRangeStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpRangeStart.setStatus('mandatory')
rtmpRangeEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpRangeEnd.setStatus('mandatory')
rtmpNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpNextHop.setStatus('mandatory')
rtmpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("appletalk", 2), ("serial-ppp", 3), ("serial-nonstandard", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpType.setStatus('mandatory')
rtmpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpPort.setStatus('mandatory')
rtmpHops = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpHops.setStatus('mandatory')
rtmpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 1), ("suspect", 2), ("goingBad", 3), ("bad", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpState.setStatus('mandatory')
kipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 6, 1), )
if mibBuilder.loadTexts: kipTable.setStatus('mandatory')
kipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 6, 1, 1), ).setIndexNames((0, "RFC1243-MIB", "kipNetStart"))
if mibBuilder.loadTexts: kipEntry.setStatus('mandatory')
kipNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipNetStart.setStatus('mandatory')
kipNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipNetEnd.setStatus('mandatory')
kipNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipNextHop.setStatus('mandatory')
kipHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipHopCount.setStatus('mandatory')
kipBCastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipBCastAddr.setStatus('mandatory')
kipCore = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("core", 1), ("notcore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipCore.setStatus('mandatory')
kipType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kipRouter", 1), ("net", 2), ("host", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipType.setStatus('mandatory')
kipState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configured", 1), ("learned", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipState.setStatus('mandatory')
kipShare = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shared", 1), ("private", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipShare.setStatus('mandatory')
zipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 7, 1), )
if mibBuilder.loadTexts: zipTable.setStatus('mandatory')
zipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 7, 1, 1), ).setIndexNames((0, "RFC1243-MIB", "zipZoneNetStart"), (0, "RFC1243-MIB", "zipZoneIndex"))
if mibBuilder.loadTexts: zipEntry.setStatus('mandatory')
zipZoneName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zipZoneName.setStatus('mandatory')
zipZoneIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneIndex.setStatus('mandatory')
zipZoneNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zipZoneNetStart.setStatus('mandatory')
zipZoneNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zipZoneNetEnd.setStatus('mandatory')
zipZoneState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zipZoneState.setStatus('mandatory')
nbpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 8, 1), )
if mibBuilder.loadTexts: nbpTable.setStatus('mandatory')
nbpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 8, 1, 1), ).setIndexNames((0, "RFC1243-MIB", "nbpIndex"))
if mibBuilder.loadTexts: nbpEntry.setStatus('mandatory')
nbpIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpIndex.setStatus('mandatory')
nbpObject = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpObject.setStatus('mandatory')
nbpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpType.setStatus('mandatory')
nbpZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpZone.setStatus('mandatory')
nbpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpState.setStatus('mandatory')
atechoRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atechoRequests.setStatus('mandatory')
atechoReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atechoReplies.setStatus('mandatory')
mibBuilder.exportSymbols("RFC1243-MIB", atecho=atecho, zipZoneState=zipZoneState, ddpBroadcastErrors=ddpBroadcastErrors, atportNetStart=atportNetStart, nbpObject=nbpObject, appletalk=appletalk, ddpChecksumErrors=ddpChecksumErrors, kipTable=kipTable, atportDescr=atportDescr, nbpType=nbpType, ddpTooShortErrors=ddpTooShortErrors, llapRandomCTSErrors=llapRandomCTSErrors, nbpState=nbpState, atportNetConfig=atportNetConfig, aarp=aarp, llapOutPkts=llapOutPkts, kipEntry=kipEntry, kipCore=kipCore, ddp=ddp, atportEntry=atportEntry, rtmpRangeStart=rtmpRangeStart, llapIfIndex=llapIfIndex, rtmpState=rtmpState, rtmpNextHop=rtmpNextHop, nbpZone=nbpZone, ddpForwRequests=ddpForwRequests, llapInLengthErrors=llapInLengthErrors, rtmpType=rtmpType, kipShare=kipShare, rtmp=rtmp, rtmpTable=rtmpTable, llap=llap, llapInNoHandlers=llapInNoHandlers, llapInPkts=llapInPkts, ddpInLocalDatagrams=ddpInLocalDatagrams, kipHopCount=kipHopCount, ddpOutNoRoutes=ddpOutNoRoutes, ddpNoProtocolHandlers=ddpNoProtocolHandlers, llapEntry=llapEntry, kipNetStart=kipNetStart, kip=kip, ddpHopCountErrors=ddpHopCountErrors, atportIfIndex=atportIfIndex, llapDefers=llapDefers, zipZoneNetStart=zipZoneNetStart, zip=zip, zipTable=zipTable, rtmpHops=rtmpHops, ddpOutRequests=ddpOutRequests, llapTable=llapTable, zipZoneName=zipZoneName, llapInErrors=llapInErrors, atportIndex=atportIndex, aarpNetAddress=aarpNetAddress, llapFCSErrors=llapFCSErrors, atportTable=atportTable, nbpTable=nbpTable, ddpShortDDPErrors=ddpShortDDPErrors, atechoRequests=atechoRequests, aarpPhysAddress=aarpPhysAddress, ddpOutLongs=ddpOutLongs, atportStatus=atportStatus, llapCollisions=llapCollisions, ddpOutShorts=ddpOutShorts, atportNetEnd=atportNetEnd, kipNextHop=kipNextHop, DdpAddress=DdpAddress, aarpTable=aarpTable, zipZoneIndex=zipZoneIndex, atportNetAddress=atportNetAddress, aarpEntry=aarpEntry, rtmpEntry=rtmpEntry, rtmpPort=rtmpPort, nbpIndex=nbpIndex, kipNetEnd=kipNetEnd, atechoReplies=atechoReplies, atportZone=atportZone, nbp=nbp, atport=atport, atportType=atportType, kipState=kipState, aarpIfIndex=aarpIfIndex, zipEntry=zipEntry, nbpEntry=nbpEntry, ddpTooLongErrors=ddpTooLongErrors, kipType=kipType, rtmpRangeEnd=rtmpRangeEnd, atportZoneConfig=atportZoneConfig, llapNoDataErrors=llapNoDataErrors, kipBCastAddr=kipBCastAddr, zipZoneNetEnd=zipZoneNetEnd, ddpInReceives=ddpInReceives)
