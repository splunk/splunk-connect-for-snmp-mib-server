#
# PySNMP MIB module MRV-IN-REACH-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-RADIUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:05:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
mrvInReachProductDivision, = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, Unsigned32, ModuleIdentity, Gauge32, IpAddress, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, MibIdentifier, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Unsigned32", "ModuleIdentity", "Gauge32", "IpAddress", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "MibIdentifier", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35))
xRadiusPort = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 1))
xRadiusCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 2))
xRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 3))
xRadiusServers = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4))
xRadiusCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5))
xRadiusPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 35, 1, 1), )
if mibBuilder.loadTexts: xRadiusPortTable.setStatus('mandatory')
xRadiusPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-RADIUS-MIB", "xRadiusPortIndex"))
if mibBuilder.loadTexts: xRadiusPortEntry.setStatus('mandatory')
xRadiusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPortIndex.setStatus('mandatory')
xRadiusPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPortStatus.setStatus('mandatory')
xRadiusPortSolicitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusPortSolicitStatus.setStatus('mandatory')
xRadiusAcctPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("limited", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctPortStatus.setStatus('mandatory')
xRadiusCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 33, 35, 2, 1), )
if mibBuilder.loadTexts: xRadiusCircuitTable.setStatus('mandatory')
xRadiusCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 35, 2, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-RADIUS-MIB", "xRadiusCircuitIndex"))
if mibBuilder.loadTexts: xRadiusCircuitEntry.setStatus('mandatory')
xRadiusCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusCircuitIndex.setStatus('mandatory')
xRadiusCircAcctOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("limited", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusCircAcctOnOff.setStatus('mandatory')
xRadiusAuthServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1645)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAuthServerPort.setStatus('mandatory')
xRadiusAcctServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1646)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAcctServerPort.setStatus('mandatory')
xRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusTimeout.setStatus('mandatory')
xRadiusServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerRetries.setStatus('mandatory')
xRadiusAcctLogAttempts = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAcctLogAttempts.setStatus('mandatory')
xRadiusChapChallengeSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusChapChallengeSize.setStatus('mandatory')
xRadiusLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusLogging.setStatus('mandatory')
xRadiusMessage = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusMessage.setStatus('mandatory')
xRadServer1SubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4, 1))
xRadServer2SubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4, 2))
xRadiusServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(51, 51)).setFixedLength(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerName1.setStatus('mandatory')
xRadiusSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32).clone('Default_Secret')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusSecret1.setStatus('obsolete')
xRadiusServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccess1.setStatus('mandatory')
xRadiusServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccessFailed1.setStatus('mandatory')
xRadiusServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(51, 51)).setFixedLength(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerName2.setStatus('mandatory')
xRadiusSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32).clone('Default_Secret')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusSecret2.setStatus('obsolete')
xRadiusServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccess2.setStatus('mandatory')
xRadiusServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccessFailed2.setStatus('mandatory')
xRadAuthCtsSubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5, 1))
xRadAcctCtsSubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5, 2))
xRadiusLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusLogins.setStatus('mandatory')
xRadiusLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusLoginsFailed.setStatus('mandatory')
xRadiusConfigFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusConfigFailed.setStatus('mandatory')
xRadiusPolicyFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPolicyFailed.setStatus('mandatory')
xRadiusAcctSuccess = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctSuccess.setStatus('mandatory')
xRadiusAcctFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctFailed.setStatus('mandatory')
xRadiusAcctReqWait = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctReqWait.setStatus('mandatory')
mibBuilder.exportSymbols("MRV-IN-REACH-RADIUS-MIB", xRadiusAcctSuccess=xRadiusAcctSuccess, xRadiusTimeout=xRadiusTimeout, xRadiusPortSolicitStatus=xRadiusPortSolicitStatus, xRadiusAcctLogAttempts=xRadiusAcctLogAttempts, xRadiusCircuitIndex=xRadiusCircuitIndex, xRadiusPortStatus=xRadiusPortStatus, xRadiusServerAccess1=xRadiusServerAccess1, xRadiusPortIndex=xRadiusPortIndex, xRadiusLogins=xRadiusLogins, xRadiusServerAccess2=xRadiusServerAccess2, xRadiusConfigFailed=xRadiusConfigFailed, xRadiusAcctFailed=xRadiusAcctFailed, xRadiusCircuit=xRadiusCircuit, xRadiusCircAcctOnOff=xRadiusCircAcctOnOff, xRadiusAcctPortStatus=xRadiusAcctPortStatus, xRadiusSecret1=xRadiusSecret1, xRadiusServerAccessFailed2=xRadiusServerAccessFailed2, xRadServer1SubGrp=xRadServer1SubGrp, xRadServer2SubGrp=xRadServer2SubGrp, xRadiusCounters=xRadiusCounters, xRadAcctCtsSubGrp=xRadAcctCtsSubGrp, xRadiusPort=xRadiusPort, xRadiusConfig=xRadiusConfig, xRadiusServerAccessFailed1=xRadiusServerAccessFailed1, xRadiusCircuitTable=xRadiusCircuitTable, xRadiusAcctServerPort=xRadiusAcctServerPort, xRadiusSecret2=xRadiusSecret2, xRadiusAcctReqWait=xRadiusAcctReqWait, xRadiusServerName2=xRadiusServerName2, xRadiusMessage=xRadiusMessage, xRadiusServers=xRadiusServers, xRadiusLoginsFailed=xRadiusLoginsFailed, xRadiusServerRetries=xRadiusServerRetries, xRadiusServerName1=xRadiusServerName1, xRadius=xRadius, xRadiusPolicyFailed=xRadiusPolicyFailed, xRadiusPortEntry=xRadiusPortEntry, xRadiusAuthServerPort=xRadiusAuthServerPort, xRadiusLogging=xRadiusLogging, xRadAuthCtsSubGrp=xRadAuthCtsSubGrp, xRadiusChapChallengeSize=xRadiusChapChallengeSize, xRadiusPortTable=xRadiusPortTable, xRadiusCircuitEntry=xRadiusCircuitEntry)
