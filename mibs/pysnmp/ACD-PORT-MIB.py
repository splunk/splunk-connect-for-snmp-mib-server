#
# PySNMP MIB module ACD-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACD-PORT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:57:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, NotificationType, Unsigned32, Counter64, iso, ModuleIdentity, IpAddress, Gauge32, ObjectIdentity, MibIdentifier, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "NotificationType", "Unsigned32", "Counter64", "iso", "ModuleIdentity", "IpAddress", "Gauge32", "ObjectIdentity", "MibIdentifier", "Bits", "Counter32")
DisplayString, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "MacAddress")
acdPort = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 9))
acdPort.setRevisions(('2011-10-10 01:00', '2010-10-01 01:00', '2008-05-01 01:00',))
if mibBuilder.loadTexts: acdPort.setLastUpdated('201110100100Z')
if mibBuilder.loadTexts: acdPort.setOrganization('Accedian Networks, Inc.')
acdPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1))
acdPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2))
acdPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1))
acdPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2))
acdPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3))
acdPortTableTid = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 4))
acdPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1), )
if mibBuilder.loadTexts: acdPortConfigTable.setStatus('current')
acdPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortConfigIndex"))
if mibBuilder.loadTexts: acdPortConfigEntry.setStatus('current')
acdPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortConfigIndex.setStatus('current')
acdPortConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigName.setStatus('current')
acdPortConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigAlias.setStatus('current')
acdPortConfigMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortConfigMacAddress.setStatus('current')
acdPortConfigConnectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortConfigConnectorId.setStatus('current')
acdPortConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigState.setStatus('current')
acdPortConfigMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigMtu.setStatus('current')
acdPortConfigAutoNegoState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigAutoNegoState.setStatus('current')
acdPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigSpeed.setStatus('current')
acdPortConfigDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigDuplex.setStatus('current')
acdPortConfigMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoMdi", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigMdi.setStatus('current')
acdPortConfigPauseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("local", 2), ("forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigPauseMode.setStatus('current')
acdPortConfigAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 13), Bits().clone(namedValues=NamedValues(("bHalfDuplex10Mbps", 0), ("bFullDuplex10Mbps", 1), ("bHalfDuplex100Mbps", 2), ("bFullDuplex100Mbps", 3), ("bHalfDuplex1Gbps", 4), ("bFullDuplex1Gbps", 5), ("bPauseSymmetric", 6), ("bPauseAsymmetric", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigAdvertisement.setStatus('current')
acdPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1), )
if mibBuilder.loadTexts: acdPortStatusTable.setStatus('current')
acdPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortStatusIndex"))
if mibBuilder.loadTexts: acdPortStatusEntry.setStatus('current')
acdPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortStatusIndex.setStatus('current')
acdPortStatusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusSpeed.setStatus('current')
acdPortStatusDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusDuplex.setStatus('current')
acdPortStatusMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusMdi.setStatus('current')
acdPortStatusTxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusTxPause.setStatus('current')
acdPortStatusRxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusRxPause.setStatus('current')
acdPortStatusLinkPartnerAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 7), Bits().clone(namedValues=NamedValues(("bHalfDuplex10Mbps", 0), ("bFullDuplex10Mbps", 1), ("bHalfDuplex100Mbps", 2), ("bFullDuplex100Mbps", 3), ("bHalfDuplex1Gbps", 4), ("bFullDuplex1Gbps", 5), ("bPauseSymmetric", 6), ("bPauseAsymmetric", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusLinkPartnerAbility.setStatus('current')
acdPortStatusLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusLinkStatus.setStatus('current')
acdPortStatusMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("bOther", 0), ("bAUI", 1), ("b10base5", 2), ("bFoirl", 3), ("b10base2", 4), ("b10baseT", 5), ("b10baseFP", 6), ("b10baseFB", 7), ("b10baseFL", 8), ("b10broad36", 9), ("b10baseTHD", 10), ("b10baseTFD", 11), ("b10baseFLHD", 12), ("b10baseFLFD", 13), ("b100baseT4", 14), ("b100baseTXHD", 15), ("b100baseTXFD", 16), ("b100baseFXHD", 17), ("b100baseFXFD", 18), ("b100baseT2HD", 19), ("b100baseT2FD", 20), ("b1000baseXHD", 21), ("b1000baseXFD", 22), ("b1000baseLXHD", 23), ("b1000baseLXFD", 24), ("b1000baseSXHD", 25), ("b1000baseSXFD", 26), ("b1000baseCXHD", 27), ("b1000baseCXFD", 28), ("b1000baseTHD", 29), ("b1000baseTFD", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusMedia.setStatus('current')
acdPortStatusIsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsMonitor.setStatus('current')
acdPortStatusIsManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsManagement.setStatus('current')
acdPortStatusIsSFP = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsSFP.setStatus('current')
acdPortStatusIsFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsFiber.setStatus('current')
acdPortTxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1), )
if mibBuilder.loadTexts: acdPortTxStatsTable.setStatus('current')
acdPortTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortTxStatsIndex"))
if mibBuilder.loadTexts: acdPortTxStatsEntry.setStatus('current')
acdPortTxStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortTxStatsIndex.setStatus('current')
acdPortTxStatsSupportBits = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 2), Bits().clone(namedValues=NamedValues(("bBytesGood", 0), ("bBytesTotal", 1), ("bUnicastPkts", 2), ("bMulticastPkts", 3), ("bBroadcastPkts", 4), ("bPauseFrames", 5), ("bTaggedFrames", 6), ("bCRCErrors", 7), ("bDeferred", 8), ("bExcessiveDeferrals", 9), ("bSingleCollisions", 10), ("bMultipleCollisions", 11), ("bExcessiveCollisions", 12), ("bLateCollisions", 13), ("bNormalCollisions", 14), ("bFifoErrors", 15), ("bPkts64", 16), ("bPkts65to127", 17), ("bPkts128to255", 18), ("bPkts256to511", 19), ("bPkts512to1023", 20), ("bPkts1024to1518", 21), ("bPkts1519to2047", 22), ("bPkts2048to4095", 23), ("bPkts4096to8191", 24), ("bPkts8192andMore", 25), ("bPktsLarge", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsSupportBits.setStatus('current')
acdPortTxStatsBytesGood = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 3), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsBytesGood.setStatus('current')
acdPortTxStatsBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsBytesTotal.setStatus('current')
acdPortTxStatsUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsUnicastPkts.setStatus('current')
acdPortTxStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsMulticastPkts.setStatus('current')
acdPortTxStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsBroadcastPkts.setStatus('current')
acdPortTxStatsPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPauseFrames.setStatus('current')
acdPortTxStatsTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsTaggedFrames.setStatus('current')
acdPortTxStatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsCRCErrors.setStatus('current')
acdPortTxStatsDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsDeferred.setStatus('current')
acdPortTxStatsExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsExcessiveDeferrals.setStatus('current')
acdPortTxStatsSingleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 13), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsSingleCollisions.setStatus('current')
acdPortTxStatsMultipleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 14), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsMultipleCollisions.setStatus('current')
acdPortTxStatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 15), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsExcessiveCollisions.setStatus('current')
acdPortTxStatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsLateCollisions.setStatus('current')
acdPortTxStatsNormalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 17), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsNormalCollisions.setStatus('current')
acdPortTxStatsFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 18), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsFifoErrors.setStatus('current')
acdPortTxStatsPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts64.setStatus('current')
acdPortTxStatsPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 20), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts65to127.setStatus('current')
acdPortTxStatsPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 21), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts128to255.setStatus('current')
acdPortTxStatsPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 22), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts256to511.setStatus('current')
acdPortTxStatsPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 23), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts512to1023.setStatus('current')
acdPortTxStatsPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 24), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts1024to1518.setStatus('current')
acdPortTxStatsPkts1519to2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 25), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts1519to2047.setStatus('current')
acdPortTxStatsPkts2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 26), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts2048to4095.setStatus('current')
acdPortTxStatsPkts4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 27), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts4096to8191.setStatus('current')
acdPortTxStatsPkts8192andMore = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 28), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts8192andMore.setStatus('current')
acdPortTxStatsPktsLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 29), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPktsLarge.setStatus('current')
acdPortRxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2), )
if mibBuilder.loadTexts: acdPortRxStatsTable.setStatus('current')
acdPortRxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortRxStatsIndex"))
if mibBuilder.loadTexts: acdPortRxStatsEntry.setStatus('current')
acdPortRxStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortRxStatsIndex.setStatus('current')
acdPortRxStatsSupportBits = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 2), Bits().clone(namedValues=NamedValues(("bBytesGood", 0), ("bBytesTotal", 1), ("bRxStatsShortOk", 2), ("bRxStatsShortBad", 3), ("bRxStatsLongOk", 4), ("bRxStatsLongBad", 5), ("bUnicastPkts", 6), ("bMulticastPkts", 7), ("bBroadcastPkts", 8), ("bPauseFrames", 9), ("bTaggedFrames", 10), ("bCRCErrors", 11), ("bAlignErrors", 12), ("bRuntFrames", 13), ("bLengthErrors", 14), ("bFalseCRS", 15), ("bPhyErrors", 16), ("bFifoErrors", 17), ("bIgnored", 18), ("bBadOpcode", 19), ("bPkts64", 20), ("bPkts65to127", 21), ("bPkts128to255", 22), ("bPkts256to511", 23), ("bPkts512to1023", 24), ("bPkts1024to1518", 25), ("bPkts1519to2047", 26), ("bPkts2048to4095", 27), ("bPkts4096to8191", 28), ("bPkts8192andMore", 29), ("bPktsLarge", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsSupportBits.setStatus('current')
acdPortRxStatsBytesGood = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 3), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBytesGood.setStatus('current')
acdPortRxStatsBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBytesTotal.setStatus('current')
acdPortRxStatsShortOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsShortOk.setStatus('current')
acdPortRxStatsShortBad = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsShortBad.setStatus('current')
acdPortRxStatsLongOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsLongOk.setStatus('current')
acdPortRxStatsLongBad = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsLongBad.setStatus('current')
acdPortRxStatsUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsUnicastPkts.setStatus('current')
acdPortRxStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsMulticastPkts.setStatus('current')
acdPortRxStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBroadcastPkts.setStatus('current')
acdPortRxStatsPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPauseFrames.setStatus('current')
acdPortRxStatsTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 13), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsTaggedFrames.setStatus('current')
acdPortRxStatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 14), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsCRCErrors.setStatus('current')
acdPortRxStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 15), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsAlignErrors.setStatus('current')
acdPortRxStatsRuntFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsRuntFrames.setStatus('current')
acdPortRxStatsLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 17), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsLengthErrors.setStatus('current')
acdPortRxStatsFalseCRS = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 18), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsFalseCRS.setStatus('current')
acdPortRxStatsPhyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPhyErrors.setStatus('current')
acdPortRxStatsFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 20), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsFifoErrors.setStatus('current')
acdPortRxStatsIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 21), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsIgnored.setStatus('current')
acdPortRxStatsBadOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 22), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBadOpcode.setStatus('current')
acdPortRxStatsPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 23), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts64.setStatus('current')
acdPortRxStatsPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 24), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts65to127.setStatus('current')
acdPortRxStatsPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 25), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts128to255.setStatus('current')
acdPortRxStatsPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 26), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts256to511.setStatus('current')
acdPortRxStatsPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 27), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts512to1023.setStatus('current')
acdPortRxStatsPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 28), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts1024to1518.setStatus('current')
acdPortRxStatsPkts1519to2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 29), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts1519to2047.setStatus('current')
acdPortRxStatsPkts2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 30), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts2048to4095.setStatus('current')
acdPortRxStatsPkts4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 31), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts4096to8191.setStatus('current')
acdPortRxStatsPkts8192andMore = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 32), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts8192andMore.setStatus('current')
acdPortRxStatsPktsLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 33), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPktsLarge.setStatus('current')
acdPortConfigTableLastChangeTid = MibScalar((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortConfigTableLastChangeTid.setStatus('current')
acdPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 1))
acdPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2))
acdPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 1)).setObjects(("ACD-PORT-MIB", "acdPortConfigName"), ("ACD-PORT-MIB", "acdPortConfigAlias"), ("ACD-PORT-MIB", "acdPortConfigMacAddress"), ("ACD-PORT-MIB", "acdPortConfigConnectorId"), ("ACD-PORT-MIB", "acdPortConfigState"), ("ACD-PORT-MIB", "acdPortConfigMtu"), ("ACD-PORT-MIB", "acdPortConfigAutoNegoState"), ("ACD-PORT-MIB", "acdPortConfigSpeed"), ("ACD-PORT-MIB", "acdPortConfigDuplex"), ("ACD-PORT-MIB", "acdPortConfigMdi"), ("ACD-PORT-MIB", "acdPortConfigPauseMode"), ("ACD-PORT-MIB", "acdPortConfigAdvertisement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortConfigGroup = acdPortConfigGroup.setStatus('current')
acdPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 2)).setObjects(("ACD-PORT-MIB", "acdPortStatusSpeed"), ("ACD-PORT-MIB", "acdPortStatusDuplex"), ("ACD-PORT-MIB", "acdPortStatusMdi"), ("ACD-PORT-MIB", "acdPortStatusTxPause"), ("ACD-PORT-MIB", "acdPortStatusRxPause"), ("ACD-PORT-MIB", "acdPortStatusLinkPartnerAbility"), ("ACD-PORT-MIB", "acdPortStatusLinkStatus"), ("ACD-PORT-MIB", "acdPortStatusMedia"), ("ACD-PORT-MIB", "acdPortStatusIsMonitor"), ("ACD-PORT-MIB", "acdPortStatusIsManagement"), ("ACD-PORT-MIB", "acdPortStatusIsSFP"), ("ACD-PORT-MIB", "acdPortStatusIsFiber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortStatusGroup = acdPortStatusGroup.setStatus('current')
acdPortTxStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 3)).setObjects(("ACD-PORT-MIB", "acdPortTxStatsSupportBits"), ("ACD-PORT-MIB", "acdPortTxStatsBytesGood"), ("ACD-PORT-MIB", "acdPortTxStatsBytesTotal"), ("ACD-PORT-MIB", "acdPortTxStatsUnicastPkts"), ("ACD-PORT-MIB", "acdPortTxStatsMulticastPkts"), ("ACD-PORT-MIB", "acdPortTxStatsBroadcastPkts"), ("ACD-PORT-MIB", "acdPortTxStatsPauseFrames"), ("ACD-PORT-MIB", "acdPortTxStatsTaggedFrames"), ("ACD-PORT-MIB", "acdPortTxStatsCRCErrors"), ("ACD-PORT-MIB", "acdPortTxStatsDeferred"), ("ACD-PORT-MIB", "acdPortTxStatsExcessiveDeferrals"), ("ACD-PORT-MIB", "acdPortTxStatsSingleCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsMultipleCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsExcessiveCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsLateCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsNormalCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsFifoErrors"), ("ACD-PORT-MIB", "acdPortTxStatsPkts64"), ("ACD-PORT-MIB", "acdPortTxStatsPkts65to127"), ("ACD-PORT-MIB", "acdPortTxStatsPkts128to255"), ("ACD-PORT-MIB", "acdPortTxStatsPkts256to511"), ("ACD-PORT-MIB", "acdPortTxStatsPkts512to1023"), ("ACD-PORT-MIB", "acdPortTxStatsPkts1024to1518"), ("ACD-PORT-MIB", "acdPortTxStatsPkts1519to2047"), ("ACD-PORT-MIB", "acdPortTxStatsPkts2048to4095"), ("ACD-PORT-MIB", "acdPortTxStatsPkts4096to8191"), ("ACD-PORT-MIB", "acdPortTxStatsPkts8192andMore"), ("ACD-PORT-MIB", "acdPortTxStatsPktsLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortTxStatsGroup = acdPortTxStatsGroup.setStatus('current')
acdPortRxStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 4)).setObjects(("ACD-PORT-MIB", "acdPortRxStatsSupportBits"), ("ACD-PORT-MIB", "acdPortRxStatsBytesGood"), ("ACD-PORT-MIB", "acdPortRxStatsBytesTotal"), ("ACD-PORT-MIB", "acdPortRxStatsShortOk"), ("ACD-PORT-MIB", "acdPortRxStatsShortBad"), ("ACD-PORT-MIB", "acdPortRxStatsLongOk"), ("ACD-PORT-MIB", "acdPortRxStatsLongBad"), ("ACD-PORT-MIB", "acdPortRxStatsUnicastPkts"), ("ACD-PORT-MIB", "acdPortRxStatsMulticastPkts"), ("ACD-PORT-MIB", "acdPortRxStatsBroadcastPkts"), ("ACD-PORT-MIB", "acdPortRxStatsPauseFrames"), ("ACD-PORT-MIB", "acdPortRxStatsTaggedFrames"), ("ACD-PORT-MIB", "acdPortRxStatsCRCErrors"), ("ACD-PORT-MIB", "acdPortRxStatsAlignErrors"), ("ACD-PORT-MIB", "acdPortRxStatsRuntFrames"), ("ACD-PORT-MIB", "acdPortRxStatsLengthErrors"), ("ACD-PORT-MIB", "acdPortRxStatsFalseCRS"), ("ACD-PORT-MIB", "acdPortRxStatsPhyErrors"), ("ACD-PORT-MIB", "acdPortRxStatsFifoErrors"), ("ACD-PORT-MIB", "acdPortRxStatsIgnored"), ("ACD-PORT-MIB", "acdPortRxStatsBadOpcode"), ("ACD-PORT-MIB", "acdPortRxStatsPkts64"), ("ACD-PORT-MIB", "acdPortRxStatsPkts65to127"), ("ACD-PORT-MIB", "acdPortRxStatsPkts128to255"), ("ACD-PORT-MIB", "acdPortRxStatsPkts256to511"), ("ACD-PORT-MIB", "acdPortRxStatsPkts512to1023"), ("ACD-PORT-MIB", "acdPortRxStatsPkts1024to1518"), ("ACD-PORT-MIB", "acdPortRxStatsPkts1519to2047"), ("ACD-PORT-MIB", "acdPortRxStatsPkts2048to4095"), ("ACD-PORT-MIB", "acdPortRxStatsPkts4096to8191"), ("ACD-PORT-MIB", "acdPortRxStatsPkts8192andMore"), ("ACD-PORT-MIB", "acdPortRxStatsPktsLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortRxStatsGroup = acdPortRxStatsGroup.setStatus('current')
acdPortTidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 5)).setObjects(("ACD-PORT-MIB", "acdPortConfigTableLastChangeTid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortTidGroup = acdPortTidGroup.setStatus('current')
acdPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 1, 1)).setObjects(("ACD-PORT-MIB", "acdPortConfigGroup"), ("ACD-PORT-MIB", "acdPortStatusGroup"), ("ACD-PORT-MIB", "acdPortTxStatsGroup"), ("ACD-PORT-MIB", "acdPortRxStatsGroup"), ("ACD-PORT-MIB", "acdPortTidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortCompliance = acdPortCompliance.setStatus('current')
mibBuilder.exportSymbols("ACD-PORT-MIB", acdPortRxStatsBroadcastPkts=acdPortRxStatsBroadcastPkts, acdPortTxStatsPkts64=acdPortTxStatsPkts64, acdPortConfigMdi=acdPortConfigMdi, acdPortRxStatsBytesTotal=acdPortRxStatsBytesTotal, acdPortStatusDuplex=acdPortStatusDuplex, acdPortTxStatsPkts1024to1518=acdPortTxStatsPkts1024to1518, acdPortRxStatsUnicastPkts=acdPortRxStatsUnicastPkts, PYSNMP_MODULE_ID=acdPort, acdPortTxStatsBytesGood=acdPortTxStatsBytesGood, acdPortTxStatsPkts4096to8191=acdPortTxStatsPkts4096to8191, acdPortConfigDuplex=acdPortConfigDuplex, acdPortConfigState=acdPortConfigState, acdPortTxStatsPkts128to255=acdPortTxStatsPkts128to255, acdPortStatusEntry=acdPortStatusEntry, acdPortTxStatsUnicastPkts=acdPortTxStatsUnicastPkts, acdPortRxStatsRuntFrames=acdPortRxStatsRuntFrames, acdPortTxStatsLateCollisions=acdPortTxStatsLateCollisions, acdPortTxStatsIndex=acdPortTxStatsIndex, acdPortTxStatsBytesTotal=acdPortTxStatsBytesTotal, acdPortRxStatsSupportBits=acdPortRxStatsSupportBits, acdPortTxStatsMulticastPkts=acdPortTxStatsMulticastPkts, acdPortStatusIsManagement=acdPortStatusIsManagement, acdPortTxStatsBroadcastPkts=acdPortTxStatsBroadcastPkts, acdPortStatusIsFiber=acdPortStatusIsFiber, acdPortMIBObjects=acdPortMIBObjects, acdPortStatusIsSFP=acdPortStatusIsSFP, acdPortStats=acdPortStats, acdPortRxStatsPkts2048to4095=acdPortRxStatsPkts2048to4095, acdPortRxStatsShortBad=acdPortRxStatsShortBad, acdPortConfigMtu=acdPortConfigMtu, acdPortTxStatsCRCErrors=acdPortTxStatsCRCErrors, acdPortRxStatsTaggedFrames=acdPortRxStatsTaggedFrames, acdPortConfigConnectorId=acdPortConfigConnectorId, acdPortConfig=acdPortConfig, acdPortRxStatsPkts64=acdPortRxStatsPkts64, acdPortTxStatsTable=acdPortTxStatsTable, acdPortConformance=acdPortConformance, acdPortTxStatsDeferred=acdPortTxStatsDeferred, acdPortRxStatsPktsLarge=acdPortRxStatsPktsLarge, acdPortRxStatsPkts512to1023=acdPortRxStatsPkts512to1023, acdPortConfigPauseMode=acdPortConfigPauseMode, acdPortTxStatsGroup=acdPortTxStatsGroup, acdPortTxStatsMultipleCollisions=acdPortTxStatsMultipleCollisions, acdPortRxStatsEntry=acdPortRxStatsEntry, acdPortTxStatsPktsLarge=acdPortTxStatsPktsLarge, acdPortTxStatsPkts512to1023=acdPortTxStatsPkts512to1023, acdPortRxStatsLengthErrors=acdPortRxStatsLengthErrors, acdPortCompliances=acdPortCompliances, acdPortConfigName=acdPortConfigName, acdPortTxStatsPkts1519to2047=acdPortTxStatsPkts1519to2047, acdPortRxStatsPauseFrames=acdPortRxStatsPauseFrames, acdPortTxStatsNormalCollisions=acdPortTxStatsNormalCollisions, acdPortStatusRxPause=acdPortStatusRxPause, acdPortStatusIsMonitor=acdPortStatusIsMonitor, acdPortTxStatsPauseFrames=acdPortTxStatsPauseFrames, acdPortRxStatsFifoErrors=acdPortRxStatsFifoErrors, acdPortRxStatsPkts65to127=acdPortRxStatsPkts65to127, acdPortStatusGroup=acdPortStatusGroup, acdPortTxStatsFifoErrors=acdPortTxStatsFifoErrors, acdPortRxStatsPkts4096to8191=acdPortRxStatsPkts4096to8191, acdPortRxStatsBadOpcode=acdPortRxStatsBadOpcode, acdPortRxStatsAlignErrors=acdPortRxStatsAlignErrors, acdPortStatusSpeed=acdPortStatusSpeed, acdPortRxStatsCRCErrors=acdPortRxStatsCRCErrors, acdPortRxStatsPhyErrors=acdPortRxStatsPhyErrors, acdPortRxStatsMulticastPkts=acdPortRxStatsMulticastPkts, acdPortStatusIndex=acdPortStatusIndex, acdPortRxStatsIndex=acdPortRxStatsIndex, acdPortConfigTable=acdPortConfigTable, acdPortRxStatsLongOk=acdPortRxStatsLongOk, acdPortConfigSpeed=acdPortConfigSpeed, acdPortRxStatsGroup=acdPortRxStatsGroup, acdPortRxStatsPkts1024to1518=acdPortRxStatsPkts1024to1518, acdPortConfigAutoNegoState=acdPortConfigAutoNegoState, acdPortTableTid=acdPortTableTid, acdPortStatus=acdPortStatus, acdPortConfigEntry=acdPortConfigEntry, acdPortTxStatsTaggedFrames=acdPortTxStatsTaggedFrames, acdPortTxStatsPkts256to511=acdPortTxStatsPkts256to511, acdPortRxStatsFalseCRS=acdPortRxStatsFalseCRS, acdPortConfigAdvertisement=acdPortConfigAdvertisement, acdPortStatusMdi=acdPortStatusMdi, acdPortStatusTxPause=acdPortStatusTxPause, acdPortTxStatsPkts2048to4095=acdPortTxStatsPkts2048to4095, acdPortStatusMedia=acdPortStatusMedia, acdPortStatusTable=acdPortStatusTable, acdPortRxStatsLongBad=acdPortRxStatsLongBad, acdPortConfigAlias=acdPortConfigAlias, acdPortTxStatsEntry=acdPortTxStatsEntry, acdPortCompliance=acdPortCompliance, acdPortTxStatsPkts65to127=acdPortTxStatsPkts65to127, acdPortTxStatsExcessiveCollisions=acdPortTxStatsExcessiveCollisions, acdPortTxStatsSingleCollisions=acdPortTxStatsSingleCollisions, acdPortStatusLinkPartnerAbility=acdPortStatusLinkPartnerAbility, acdPortRxStatsTable=acdPortRxStatsTable, acdPortRxStatsBytesGood=acdPortRxStatsBytesGood, acdPortRxStatsIgnored=acdPortRxStatsIgnored, acdPortTxStatsPkts8192andMore=acdPortTxStatsPkts8192andMore, acdPortStatusLinkStatus=acdPortStatusLinkStatus, acdPortConfigGroup=acdPortConfigGroup, acdPortTxStatsSupportBits=acdPortTxStatsSupportBits, acdPortRxStatsPkts128to255=acdPortRxStatsPkts128to255, acdPortRxStatsShortOk=acdPortRxStatsShortOk, acdPortRxStatsPkts8192andMore=acdPortRxStatsPkts8192andMore, acdPortTxStatsExcessiveDeferrals=acdPortTxStatsExcessiveDeferrals, acdPortConfigMacAddress=acdPortConfigMacAddress, acdPort=acdPort, acdPortConfigIndex=acdPortConfigIndex, acdPortRxStatsPkts1519to2047=acdPortRxStatsPkts1519to2047, acdPortGroups=acdPortGroups, acdPortRxStatsPkts256to511=acdPortRxStatsPkts256to511, acdPortConfigTableLastChangeTid=acdPortConfigTableLastChangeTid, acdPortTidGroup=acdPortTidGroup)
