#
# PySNMP MIB module RH-ATT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RH-ATT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:48:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter32, Bits, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, NotificationType, enterprises, Unsigned32, Integer32, Gauge32, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Bits", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "NotificationType", "enterprises", "Unsigned32", "Integer32", "Gauge32", "MibIdentifier", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
att_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 74)).setLabel("att-2")
att_products = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1)).setLabel("att-products")
att_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2)).setLabel("att-mgmt")
att_rh1products = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1, 6)).setLabel("att-rh1products")
att_rh1xe = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1, 6, 1)).setLabel("att-rh1xe")
att_rh1mgt = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14)).setLabel("att-rh1mgt")
rh1BasicCtrlCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14, 1))
rh1SelfTestCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14, 2))
rh1PerfMonCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14, 3))
rh1DownloadCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14, 4))
rh1AddrTrackCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14, 5))
rh1EnhCtrlCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14, 6))
rh1SecurityCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 14, 7))
rh1BasicCtrlRackMAC = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicCtrlRackMAC.setStatus('mandatory')
rh1BasicCtrlCardCapacity = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicCtrlCardCapacity.setStatus('mandatory')
rh1BasicCtrlCardTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 3), )
if mibBuilder.loadTexts: rh1BasicCtrlCardTable.setStatus('mandatory')
rh1BasicCtrlCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 3, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1BasicCtrlCardID"))
if mibBuilder.loadTexts: rh1BasicCtrlCardEntry.setStatus('mandatory')
rh1BasicCtrlCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicCtrlCardID.setStatus('mandatory')
rh1BasicCtrlNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicCtrlNumberOfPorts.setStatus('mandatory')
rh1BasicCtrlPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 4), )
if mibBuilder.loadTexts: rh1BasicCtrlPortTable.setStatus('mandatory')
rh1BasicCtrlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 4, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1BasicPortCtrlCardID"), (0, "RH-ATT-MIB", "rh1BasicCtrlPortID"))
if mibBuilder.loadTexts: rh1BasicCtrlPortEntry.setStatus('mandatory')
rh1BasicPortCtrlCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicPortCtrlCardID.setStatus('mandatory')
rh1BasicCtrlPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicCtrlPortID.setStatus('mandatory')
rh1BasicCtrlPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("repeater", 2), ("tenBASE-F-Async", 3), ("tenBASE-F-Synch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicCtrlPortType.setStatus('mandatory')
rh1BasicCtrlPortCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1BasicCtrlPortCtrl.setStatus('mandatory')
rh1BasicCtrlAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("not-auto-partitioned", 2), ("auto-partitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1BasicCtrlAutoPartitionState.setStatus('mandatory')
rh1SelfTestResetRack = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SelfTestResetRack.setStatus('mandatory')
rh1SelfTestExecuteSelfTest1 = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-test", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SelfTestExecuteSelfTest1.setStatus('mandatory')
rh1SelfTestExecuteSelfTest2 = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-test", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SelfTestExecuteSelfTest2.setStatus('mandatory')
rh1SelfTestRackHealthState = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SelfTestRackHealthState.setStatus('mandatory')
rh1SelfTestRackHealthData = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SelfTestRackHealthData.setStatus('mandatory')
rh1SelfTestCardTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6), )
if mibBuilder.loadTexts: rh1SelfTestCardTable.setStatus('mandatory')
rh1SelfTestCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1SelfTestCardID"))
if mibBuilder.loadTexts: rh1SelfTestCardEntry.setStatus('mandatory')
rh1SelfTestCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SelfTestCardID.setStatus('mandatory')
rh1SelfTestCardResetTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SelfTestCardResetTimeStamp.setStatus('mandatory')
rh1SelfTestResetCard = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SelfTestResetCard.setStatus('mandatory')
rh1SelfTestResetMPR = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SelfTestResetMPR.setStatus('mandatory')
rh1SelfTestExecuteCardSelfTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-test", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SelfTestExecuteCardSelfTest1.setStatus('mandatory')
rh1SelfTestExecuteCardSelfTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-test", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SelfTestExecuteCardSelfTest2.setStatus('mandatory')
rh1SelfTestCardHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SelfTestCardHealthState.setStatus('mandatory')
rh1SelfTestCardHealthData = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 2, 6, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SelfTestCardHealthData.setStatus('mandatory')
rh1PerfMonSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1), )
if mibBuilder.loadTexts: rh1PerfMonSegmentTable.setStatus('mandatory')
rh1PerfMonSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1PerfMonSegmentID"))
if mibBuilder.loadTexts: rh1PerfMonSegmentEntry.setStatus('mandatory')
rh1PerfMonSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegmentID.setStatus('mandatory')
rh1PerfMonSegFrameSize1Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1PerfMonSegFrameSize1Bound.setStatus('mandatory')
rh1PerfMonSegFrameSize2Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1PerfMonSegFrameSize2Bound.setStatus('mandatory')
rh1PerfMonSegFrameSize3Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1PerfMonSegFrameSize3Bound.setStatus('mandatory')
rh1PerfMonSegFrameSize4Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1PerfMonSegFrameSize4Bound.setStatus('mandatory')
rh1PerfMonSegTotalFramesProcessedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalFramesProcessedOk.setStatus('mandatory')
rh1PerfMonSegTotalOctetsProcessedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalOctetsProcessedOk.setStatus('mandatory')
rh1PerfMonSegTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalCollisions.setStatus('mandatory')
rh1PerfMonSegTotalLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalLateCollisions.setStatus('mandatory')
rh1PerfMonSegTotalRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalRunts.setStatus('mandatory')
rh1PerfMonSegTotalShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalShortEvents.setStatus('mandatory')
rh1PerfMonSegTotalFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalFrameTooLongs.setStatus('mandatory')
rh1PerfMonSegTotalAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalAutoPartitions.setStatus('mandatory')
rh1PerfMonSegTotalLongFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalLongFragments.setStatus('mandatory')
rh1PerfMonSegTotalFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalFifoErrors.setStatus('mandatory')
rh1PerfMonSegTotalErrorEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalErrorEnergy.setStatus('mandatory')
rh1PerfMonSegTotalNondataEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalNondataEnergy.setStatus('mandatory')
rh1PerfMonSegTotalManchesterViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalManchesterViolations.setStatus('mandatory')
rh1PerfMonSegTotalBand1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalBand1Frames.setStatus('mandatory')
rh1PerfMonSegTotalBand2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalBand2Frames.setStatus('mandatory')
rh1PerfMonSegTotalBand3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalBand3Frames.setStatus('mandatory')
rh1PerfMonSegTotalBand4Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalBand4Frames.setStatus('mandatory')
rh1PerfMonSegTotalBand5Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegTotalBand5Frames.setStatus('mandatory')
rh1PerfMonSegCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonSegCounts.setStatus('mandatory')
rh1PerfMonPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2), )
if mibBuilder.loadTexts: rh1PerfMonPortTable.setStatus('mandatory')
rh1PerfMonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1PerfMonCardID"), (0, "RH-ATT-MIB", "rh1PerfMonPortID"))
if mibBuilder.loadTexts: rh1PerfMonPortEntry.setStatus('mandatory')
rh1PerfMonCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonCardID.setStatus('mandatory')
rh1PerfMonPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonPortID.setStatus('mandatory')
rh1PerfMonFramesReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFramesReceivedOk.setStatus('mandatory')
rh1PerfMonOctetsReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonOctetsReceivedOk.setStatus('mandatory')
rh1PerfMonCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonCollisions.setStatus('mandatory')
rh1PerfMonLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonLateCollisions.setStatus('mandatory')
rh1PerfMonRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonRunts.setStatus('mandatory')
rh1PerfMonShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonShortEvents.setStatus('mandatory')
rh1PerfMonFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFrameTooLongs.setStatus('mandatory')
rh1PerfMonAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonAutoPartitions.setStatus('mandatory')
rh1PerfMonLongFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonLongFragments.setStatus('mandatory')
rh1PerfMonFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFifoErrors.setStatus('mandatory')
rh1PerfMonFramesTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFramesTransmittedOk.setStatus('mandatory')
rh1PerfMonOctetsTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonOctetsTransmittedOk.setStatus('mandatory')
rh1PerfMonErrorEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonErrorEnergy.setStatus('mandatory')
rh1PerfMonNondataEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonNondataEnergy.setStatus('mandatory')
rh1PerfMonManchesterViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonManchesterViolations.setStatus('mandatory')
rh1PerfMonBand1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonBand1Frames.setStatus('mandatory')
rh1PerfMonBand2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonBand2Frames.setStatus('mandatory')
rh1PerfMonBand3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonBand3Frames.setStatus('mandatory')
rh1PerfMonBand4Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonBand4Frames.setStatus('mandatory')
rh1PerfMonBand5Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonBand5Frames.setStatus('mandatory')
rh1PerfMonPortCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonPortCounts.setStatus('mandatory')
rh1PerfMonFrameSize1Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFrameSize1Bound.setStatus('mandatory')
rh1PerfMonFrameSize2Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFrameSize2Bound.setStatus('mandatory')
rh1PerfMonFrameSize3Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFrameSize3Bound.setStatus('mandatory')
rh1PerfMonFrameSize4Bound = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1PerfMonFrameSize4Bound.setStatus('mandatory')
rh1DownloadImageFile = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1DownloadImageFile.setStatus('mandatory')
rh1DownloadIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1DownloadIpAddr.setStatus('mandatory')
rh1DownloadMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1DownloadMacAddr.setStatus('mandatory')
rh1DownloadCardTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 4, 4), )
if mibBuilder.loadTexts: rh1DownloadCardTable.setStatus('mandatory')
rh1DownloadCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 4, 4, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1DownloadCardID"))
if mibBuilder.loadTexts: rh1DownloadCardEntry.setStatus('mandatory')
rh1DownloadCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1DownloadCardID.setStatus('mandatory')
rh1DownloadExecute = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-execute", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1DownloadExecute.setStatus('mandatory')
rh1AddrTrackSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 1), )
if mibBuilder.loadTexts: rh1AddrTrackSegmentTable.setStatus('mandatory')
rh1AddrTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 1, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1AddrTrackSegmentID"))
if mibBuilder.loadTexts: rh1AddrTrackEntry.setStatus('mandatory')
rh1AddrTrackSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1AddrTrackSegmentID.setStatus('mandatory')
rh1AddrTrackSendHubLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learning", 1), ("send-learn-packet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1AddrTrackSendHubLearn.setStatus('mandatory')
rh1AddrTrackSendHubLearnCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("inhibit-learn-packet", 2), ("allow-learn-packet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1AddrTrackSendHubLearnCtrl.setStatus('mandatory')
rh1AddrTrackPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2), )
if mibBuilder.loadTexts: rh1AddrTrackPortTable.setStatus('mandatory')
rh1AddrTrackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1AddrTrackCardID"), (0, "RH-ATT-MIB", "rh1AddrTrackPortID"))
if mibBuilder.loadTexts: rh1AddrTrackPortEntry.setStatus('mandatory')
rh1AddrTrackCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1AddrTrackCardID.setStatus('mandatory')
rh1AddrTrackPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1AddrTrackPortID.setStatus('mandatory')
rh1AddrTrackDetectedMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1AddrTrackDetectedMacAddr.setStatus('mandatory')
rh1AddrTrackDetectedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("singly-connected", 2), ("connected-to-another-hub", 3), ("multiply-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1AddrTrackDetectedAddrType.setStatus('mandatory')
rh1AddrTrackAuthMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1AddrTrackAuthMacAddr.setStatus('mandatory')
rh1AddrTrackAuthAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("singly-connected", 2), ("connected-to-another-hub", 3), ("multiply-connected", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1AddrTrackAuthAddrType.setStatus('mandatory')
rh1AddrTrackNewHubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 5, 2, 1, 7), OctetString())
if mibBuilder.loadTexts: rh1AddrTrackNewHubAddr.setStatus('mandatory')
rh1EnhCtrlResetRackConfig = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlResetRackConfig.setStatus('mandatory')
rh1EnhCtrlRackVersion = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlRackVersion.setStatus('mandatory')
rh1EnhCtrlPowerTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 3), )
if mibBuilder.loadTexts: rh1EnhCtrlPowerTable.setStatus('mandatory')
rh1EnhCtrlPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 3, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1EnhCtrlPowerID"))
if mibBuilder.loadTexts: rh1EnhCtrlPowerEntry.setStatus('mandatory')
rh1EnhCtrlPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlPowerID.setStatus('mandatory')
rh1EnhCtrlPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("alternate", 3), ("standard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlPowerType.setStatus('mandatory')
rh1EnhCtrlCardMap = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlCardMap.setStatus('mandatory')
rh1EnhCtrlRackMap = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlRackMap.setStatus('mandatory')
rh1EnhCtrlRackmaster = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlRackmaster.setStatus('mandatory')
rh1EnhCtrlLastRackmaster = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlLastRackmaster.setStatus('mandatory')
rh1EnhCtrlGatewayIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlGatewayIpAddr.setStatus('mandatory')
rh1EnhCtrlNetworkMask = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlNetworkMask.setStatus('mandatory')
rh1EnhCtrlRackIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlRackIpAddr.setStatus('mandatory')
rh1EnhCtrlRs232State = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-connected", 1), ("connected", 2), ("connected-logged-in", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlRs232State.setStatus('mandatory')
rh1EnhCtrlRs232DataRate = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bps-300", 1), ("bps-1200", 2), ("bps-2400", 3), ("bps-4800", 4), ("bps-9600", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlRs232DataRate.setStatus('mandatory')
rh1EnhCtrlTrapCountPeriodCtrl = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlTrapCountPeriodCtrl.setStatus('mandatory')
rh1EnhCtrlFlashRackStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noflash", 2), ("flash", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlFlashRackStatusLED.setStatus('mandatory')
rh1EnhCtrlSendTrapConfig = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sending", 1), ("send-trap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlSendTrapConfig.setStatus('mandatory')
rh1EnhCtrlMngrTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 16), )
if mibBuilder.loadTexts: rh1EnhCtrlMngrTable.setStatus('mandatory')
rh1EnhCtrlMngrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 16, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1EnhCtrlMngrID"))
if mibBuilder.loadTexts: rh1EnhCtrlMngrEntry.setStatus('mandatory')
rh1EnhCtrlMngrID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlMngrID.setStatus('mandatory')
rh1EnhCtrlTrapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 16, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlTrapMacAddr.setStatus('mandatory')
rh1EnhCtrlTrapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 16, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlTrapIpAddr.setStatus('mandatory')
rh1EnhCtrlCardTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17), )
if mibBuilder.loadTexts: rh1EnhCtrlCardTable.setStatus('mandatory')
rh1EnhCtrlCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1EnhCtrlCardID"))
if mibBuilder.loadTexts: rh1EnhCtrlCardEntry.setStatus('mandatory')
rh1EnhCtrlCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlCardID.setStatus('mandatory')
rh1EnhCtrlSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlSegment.setStatus('mandatory')
rh1EnhCtrlCardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlCardVersion.setStatus('mandatory')
rh1EnhCtrlCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlCardType.setStatus('mandatory')
rh1EnhCtrlCardIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlCardIpAddr.setStatus('mandatory')
rh1EnhCtrlResetCardConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlResetCardConfig.setStatus('mandatory')
rh1EnhCtrlFlashCardStatusLED = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noflash", 2), ("flash", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlFlashCardStatusLED.setStatus('mandatory')
rh1EnhCtrlPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18), )
if mibBuilder.loadTexts: rh1EnhCtrlPortTable.setStatus('mandatory')
rh1EnhCtrlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1EnhPortCtrlCardID"), (0, "RH-ATT-MIB", "rh1EnhCtrlPortID"))
if mibBuilder.loadTexts: rh1EnhCtrlPortEntry.setStatus('mandatory')
rh1EnhPortCtrlCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhPortCtrlCardID.setStatus('mandatory')
rh1EnhCtrlPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlPortID.setStatus('mandatory')
rh1EnhCtrlLinkIntegrityCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlLinkIntegrityCtrl.setStatus('mandatory')
rh1EnhCtrlLinkIntegrityAlarmingCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlLinkIntegrityAlarmingCtrl.setStatus('mandatory')
rh1EnhCtrlLinkIntegrityState = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("connected", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlLinkIntegrityState.setStatus('mandatory')
rh1EnhCtrlExtendedDistanceCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlExtendedDistanceCtrl.setStatus('mandatory')
rh1EnhCtrlPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 18, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlPortConfig.setStatus('mandatory')
rh1EnhCtrlPAPortCtrl = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlPAPortCtrl.setStatus('mandatory')
rh1EnhCtrlPALinkIntegrityState = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("connected", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlPALinkIntegrityState.setStatus('mandatory')
rh1EnhCtrlSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 21), )
if mibBuilder.loadTexts: rh1EnhCtrlSegmentTable.setStatus('mandatory')
rh1EnhCtrlSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 21, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1EnhCtrlSegmentID"))
if mibBuilder.loadTexts: rh1EnhCtrlSegmentEntry.setStatus('mandatory')
rh1EnhCtrlSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlSegmentID.setStatus('mandatory')
rh1EnhCtrlSegConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlSegConfigReset.setStatus('mandatory')
rh1EnhCtrlConfigResetHub = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1EnhCtrlConfigResetHub.setStatus('mandatory')
rh1EnhCtrlSegmentMap = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 6, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1EnhCtrlSegmentMap.setStatus('mandatory')
rh1SecPassword = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 1), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: rh1SecPassword.setStatus('mandatory')
rh1SecBadComPasswords = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecBadComPasswords.setStatus('mandatory')
rh1SecSettingAdminMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecSettingAdminMacAddr.setStatus('mandatory')
rh1SecSettingAdminIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecSettingAdminIpAddr.setStatus('mandatory')
rh1SecInbandSetsState = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable-all", 2), ("disable-public", 3), ("disable-private", 4), ("enabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecInbandSetsState.setStatus('mandatory')
rh1SecSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 6), )
if mibBuilder.loadTexts: rh1SecSegmentTable.setStatus('mandatory')
rh1SecSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 6, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1SecSegmentID"))
if mibBuilder.loadTexts: rh1SecSegmentEntry.setStatus('mandatory')
rh1SecSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecSegmentID.setStatus('mandatory')
rh1SecEavesdroppingCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SecEavesdroppingCtrl.setStatus('mandatory')
rh1SecIntrusionCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SecIntrusionCtrl.setStatus('mandatory')
rh1SecIntrusionAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rh1SecIntrusionAlarmCtrl.setStatus('mandatory')
rh1SecPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 7), )
if mibBuilder.loadTexts: rh1SecPortTable.setStatus('mandatory')
rh1SecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 7, 1), ).setIndexNames((0, "RH-ATT-MIB", "rh1SecCardID"), (0, "RH-ATT-MIB", "rh1SecPortID"))
if mibBuilder.loadTexts: rh1SecPortEntry.setStatus('mandatory')
rh1SecCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecCardID.setStatus('mandatory')
rh1SecPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecPortID.setStatus('mandatory')
rh1SecIntrusionAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecIntrusionAddr.setStatus('mandatory')
rh1SecIntrusionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 7, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecIntrusionTimeStamp.setStatus('mandatory')
rh1SecIntrusions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 14, 7, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rh1SecIntrusions.setStatus('mandatory')
mibBuilder.exportSymbols("RH-ATT-MIB", rh1SecBadComPasswords=rh1SecBadComPasswords, rh1AddrTrackSendHubLearnCtrl=rh1AddrTrackSendHubLearnCtrl, rh1SecPassword=rh1SecPassword, rh1PerfMonSegmentEntry=rh1PerfMonSegmentEntry, rh1PerfMonSegTotalManchesterViolations=rh1PerfMonSegTotalManchesterViolations, rh1SelfTestResetRack=rh1SelfTestResetRack, rh1AddrTrackSegmentTable=rh1AddrTrackSegmentTable, rh1SecSettingAdminIpAddr=rh1SecSettingAdminIpAddr, rh1EnhCtrlLinkIntegrityCtrl=rh1EnhCtrlLinkIntegrityCtrl, rh1BasicPortCtrlCardID=rh1BasicPortCtrlCardID, rh1EnhCtrlNetworkMask=rh1EnhCtrlNetworkMask, rh1AddrTrackEntry=rh1AddrTrackEntry, rh1SelfTestExecuteSelfTest2=rh1SelfTestExecuteSelfTest2, rh1PerfMonSegTotalBand4Frames=rh1PerfMonSegTotalBand4Frames, rh1BasicCtrlPortTable=rh1BasicCtrlPortTable, rh1PerfMonBand2Frames=rh1PerfMonBand2Frames, att_2=att_2, rh1EnhCtrlRackMap=rh1EnhCtrlRackMap, rh1EnhCtrlCardVersion=rh1EnhCtrlCardVersion, rh1SelfTestExecuteCardSelfTest2=rh1SelfTestExecuteCardSelfTest2, rh1PerfMonCapability=rh1PerfMonCapability, rh1PerfMonLongFragments=rh1PerfMonLongFragments, rh1SelfTestRackHealthData=rh1SelfTestRackHealthData, rh1SelfTestCardHealthData=rh1SelfTestCardHealthData, rh1PerfMonOctetsTransmittedOk=rh1PerfMonOctetsTransmittedOk, att_products=att_products, rh1EnhCtrlPortTable=rh1EnhCtrlPortTable, rh1SecInbandSetsState=rh1SecInbandSetsState, rh1EnhCtrlRackmaster=rh1EnhCtrlRackmaster, rh1PerfMonSegFrameSize2Bound=rh1PerfMonSegFrameSize2Bound, rh1EnhCtrlSegmentID=rh1EnhCtrlSegmentID, rh1SecSettingAdminMacAddr=rh1SecSettingAdminMacAddr, rh1DownloadCardID=rh1DownloadCardID, rh1PerfMonBand4Frames=rh1PerfMonBand4Frames, rh1EnhCtrlPortConfig=rh1EnhCtrlPortConfig, rh1PerfMonPortID=rh1PerfMonPortID, rh1EnhCtrlLastRackmaster=rh1EnhCtrlLastRackmaster, rh1BasicCtrlCardEntry=rh1BasicCtrlCardEntry, rh1PerfMonSegTotalBand3Frames=rh1PerfMonSegTotalBand3Frames, rh1EnhCtrlPAPortCtrl=rh1EnhCtrlPAPortCtrl, rh1PerfMonSegFrameSize4Bound=rh1PerfMonSegFrameSize4Bound, rh1AddrTrackNewHubAddr=rh1AddrTrackNewHubAddr, rh1AddrTrackAuthAddrType=rh1AddrTrackAuthAddrType, rh1PerfMonAutoPartitions=rh1PerfMonAutoPartitions, rh1PerfMonFrameSize3Bound=rh1PerfMonFrameSize3Bound, rh1PerfMonPortCounts=rh1PerfMonPortCounts, rh1BasicCtrlCardTable=rh1BasicCtrlCardTable, rh1SelfTestExecuteCardSelfTest1=rh1SelfTestExecuteCardSelfTest1, rh1PerfMonSegmentTable=rh1PerfMonSegmentTable, rh1DownloadCardTable=rh1DownloadCardTable, rh1SecIntrusionAlarmCtrl=rh1SecIntrusionAlarmCtrl, rh1PerfMonFrameSize4Bound=rh1PerfMonFrameSize4Bound, rh1EnhCtrlRackVersion=rh1EnhCtrlRackVersion, rh1PerfMonSegTotalFramesProcessedOk=rh1PerfMonSegTotalFramesProcessedOk, rh1EnhCtrlCardType=rh1EnhCtrlCardType, att_rh1xe=att_rh1xe, rh1EnhCtrlLinkIntegrityAlarmingCtrl=rh1EnhCtrlLinkIntegrityAlarmingCtrl, rh1BasicCtrlNumberOfPorts=rh1BasicCtrlNumberOfPorts, rh1SelfTestCardEntry=rh1SelfTestCardEntry, rh1SelfTestRackHealthState=rh1SelfTestRackHealthState, rh1BasicCtrlRackMAC=rh1BasicCtrlRackMAC, rh1SecSegmentID=rh1SecSegmentID, rh1SecIntrusionCtrl=rh1SecIntrusionCtrl, rh1SelfTestCardTable=rh1SelfTestCardTable, rh1AddrTrackSegmentID=rh1AddrTrackSegmentID, rh1EnhCtrlResetCardConfig=rh1EnhCtrlResetCardConfig, rh1EnhCtrlSegment=rh1EnhCtrlSegment, rh1EnhCtrlSegmentTable=rh1EnhCtrlSegmentTable, rh1EnhCtrlCapability=rh1EnhCtrlCapability, rh1AddrTrackCapability=rh1AddrTrackCapability, rh1PerfMonFrameTooLongs=rh1PerfMonFrameTooLongs, rh1EnhCtrlTrapCountPeriodCtrl=rh1EnhCtrlTrapCountPeriodCtrl, rh1PerfMonSegTotalCollisions=rh1PerfMonSegTotalCollisions, rh1SelfTestCardResetTimeStamp=rh1SelfTestCardResetTimeStamp, rh1SecSegmentEntry=rh1SecSegmentEntry, rh1BasicCtrlPortID=rh1BasicCtrlPortID, rh1PerfMonSegTotalFifoErrors=rh1PerfMonSegTotalFifoErrors, rh1AddrTrackDetectedAddrType=rh1AddrTrackDetectedAddrType, rh1EnhCtrlCardTable=rh1EnhCtrlCardTable, rh1SecPortTable=rh1SecPortTable, att_rh1mgt=att_rh1mgt, rh1EnhCtrlCardMap=rh1EnhCtrlCardMap, rh1SecIntrusions=rh1SecIntrusions, rh1EnhCtrlExtendedDistanceCtrl=rh1EnhCtrlExtendedDistanceCtrl, rh1SecEavesdroppingCtrl=rh1SecEavesdroppingCtrl, rh1BasicCtrlPortEntry=rh1BasicCtrlPortEntry, rh1PerfMonBand5Frames=rh1PerfMonBand5Frames, rh1SecPortID=rh1SecPortID, rh1AddrTrackCardID=rh1AddrTrackCardID, rh1PerfMonSegTotalShortEvents=rh1PerfMonSegTotalShortEvents, rh1EnhCtrlRs232DataRate=rh1EnhCtrlRs232DataRate, rh1BasicCtrlCapability=rh1BasicCtrlCapability, rh1BasicCtrlAutoPartitionState=rh1BasicCtrlAutoPartitionState, rh1PerfMonRunts=rh1PerfMonRunts, rh1EnhCtrlCardEntry=rh1EnhCtrlCardEntry, rh1EnhCtrlCardID=rh1EnhCtrlCardID, rh1EnhCtrlMngrEntry=rh1EnhCtrlMngrEntry, rh1SelfTestResetCard=rh1SelfTestResetCard, rh1PerfMonSegFrameSize1Bound=rh1PerfMonSegFrameSize1Bound, rh1PerfMonSegCounts=rh1PerfMonSegCounts, rh1PerfMonFrameSize1Bound=rh1PerfMonFrameSize1Bound, rh1DownloadCapability=rh1DownloadCapability, rh1PerfMonSegTotalBand2Frames=rh1PerfMonSegTotalBand2Frames, rh1SelfTestExecuteSelfTest1=rh1SelfTestExecuteSelfTest1, rh1EnhCtrlRs232State=rh1EnhCtrlRs232State, rh1EnhCtrlTrapMacAddr=rh1EnhCtrlTrapMacAddr, rh1PerfMonSegFrameSize3Bound=rh1PerfMonSegFrameSize3Bound, rh1EnhCtrlMngrID=rh1EnhCtrlMngrID, rh1PerfMonSegTotalErrorEnergy=rh1PerfMonSegTotalErrorEnergy, rh1PerfMonSegTotalLongFragments=rh1PerfMonSegTotalLongFragments, rh1PerfMonManchesterViolations=rh1PerfMonManchesterViolations, rh1AddrTrackAuthMacAddr=rh1AddrTrackAuthMacAddr, att_rh1products=att_rh1products, rh1PerfMonFramesTransmittedOk=rh1PerfMonFramesTransmittedOk, rh1SecPortEntry=rh1SecPortEntry, rh1DownloadCardEntry=rh1DownloadCardEntry, rh1EnhCtrlPowerTable=rh1EnhCtrlPowerTable, rh1EnhCtrlGatewayIpAddr=rh1EnhCtrlGatewayIpAddr, rh1BasicCtrlCardID=rh1BasicCtrlCardID, rh1SelfTestResetMPR=rh1SelfTestResetMPR, rh1PerfMonSegTotalBand1Frames=rh1PerfMonSegTotalBand1Frames, rh1AddrTrackDetectedMacAddr=rh1AddrTrackDetectedMacAddr, rh1PerfMonSegTotalNondataEnergy=rh1PerfMonSegTotalNondataEnergy, rh1PerfMonBand1Frames=rh1PerfMonBand1Frames, rh1EnhCtrlResetRackConfig=rh1EnhCtrlResetRackConfig, rh1PerfMonOctetsReceivedOk=rh1PerfMonOctetsReceivedOk, rh1PerfMonSegTotalAutoPartitions=rh1PerfMonSegTotalAutoPartitions, rh1EnhCtrlTrapIpAddr=rh1EnhCtrlTrapIpAddr, rh1EnhCtrlPowerEntry=rh1EnhCtrlPowerEntry, rh1PerfMonSegmentID=rh1PerfMonSegmentID, rh1PerfMonPortEntry=rh1PerfMonPortEntry, rh1EnhCtrlPortEntry=rh1EnhCtrlPortEntry, rh1PerfMonSegTotalFrameTooLongs=rh1PerfMonSegTotalFrameTooLongs, rh1PerfMonSegTotalRunts=rh1PerfMonSegTotalRunts, rh1EnhCtrlPowerType=rh1EnhCtrlPowerType, rh1DownloadImageFile=rh1DownloadImageFile, rh1SecIntrusionAddr=rh1SecIntrusionAddr, rh1EnhCtrlPowerID=rh1EnhCtrlPowerID, rh1AddrTrackSendHubLearn=rh1AddrTrackSendHubLearn, rh1PerfMonSegTotalOctetsProcessedOk=rh1PerfMonSegTotalOctetsProcessedOk, rh1SelfTestCapability=rh1SelfTestCapability, rh1SelfTestCardHealthState=rh1SelfTestCardHealthState, rh1SecSegmentTable=rh1SecSegmentTable, rh1EnhCtrlRackIpAddr=rh1EnhCtrlRackIpAddr, rh1PerfMonNondataEnergy=rh1PerfMonNondataEnergy, rh1PerfMonShortEvents=rh1PerfMonShortEvents, rh1PerfMonFifoErrors=rh1PerfMonFifoErrors, rh1AddrTrackPortID=rh1AddrTrackPortID, rh1PerfMonCardID=rh1PerfMonCardID, rh1DownloadExecute=rh1DownloadExecute, rh1PerfMonSegTotalLateCollisions=rh1PerfMonSegTotalLateCollisions, rh1AddrTrackPortTable=rh1AddrTrackPortTable, rh1EnhCtrlSegConfigReset=rh1EnhCtrlSegConfigReset, rh1EnhCtrlMngrTable=rh1EnhCtrlMngrTable, rh1EnhCtrlPortID=rh1EnhCtrlPortID, att_mgmt=att_mgmt, rh1PerfMonPortTable=rh1PerfMonPortTable, rh1PerfMonFramesReceivedOk=rh1PerfMonFramesReceivedOk, rh1SelfTestCardID=rh1SelfTestCardID, rh1PerfMonLateCollisions=rh1PerfMonLateCollisions, rh1EnhCtrlCardIpAddr=rh1EnhCtrlCardIpAddr, rh1EnhCtrlFlashCardStatusLED=rh1EnhCtrlFlashCardStatusLED, rh1PerfMonSegTotalBand5Frames=rh1PerfMonSegTotalBand5Frames, rh1EnhCtrlSegmentEntry=rh1EnhCtrlSegmentEntry, rh1EnhCtrlFlashRackStatusLED=rh1EnhCtrlFlashRackStatusLED, rh1EnhCtrlSegmentMap=rh1EnhCtrlSegmentMap, rh1EnhCtrlPALinkIntegrityState=rh1EnhCtrlPALinkIntegrityState, rh1EnhCtrlLinkIntegrityState=rh1EnhCtrlLinkIntegrityState, rh1SecCardID=rh1SecCardID, rh1EnhPortCtrlCardID=rh1EnhPortCtrlCardID, rh1DownloadIpAddr=rh1DownloadIpAddr, rh1PerfMonFrameSize2Bound=rh1PerfMonFrameSize2Bound, rh1DownloadMacAddr=rh1DownloadMacAddr, rh1SecIntrusionTimeStamp=rh1SecIntrusionTimeStamp, rh1EnhCtrlSendTrapConfig=rh1EnhCtrlSendTrapConfig, rh1EnhCtrlConfigResetHub=rh1EnhCtrlConfigResetHub, rh1BasicCtrlPortCtrl=rh1BasicCtrlPortCtrl, rh1AddrTrackPortEntry=rh1AddrTrackPortEntry, rh1SecurityCapability=rh1SecurityCapability, rh1BasicCtrlCardCapacity=rh1BasicCtrlCardCapacity, rh1BasicCtrlPortType=rh1BasicCtrlPortType, rh1PerfMonErrorEnergy=rh1PerfMonErrorEnergy, rh1PerfMonBand3Frames=rh1PerfMonBand3Frames, rh1PerfMonCollisions=rh1PerfMonCollisions)
