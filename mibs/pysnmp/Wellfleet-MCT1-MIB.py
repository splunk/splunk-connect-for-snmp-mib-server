#
# PySNMP MIB module Wellfleet-MCT1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-MCT1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, Unsigned32, IpAddress, NotificationType, ModuleIdentity, iso, Bits, Counter64, TimeTicks, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Unsigned32", "IpAddress", "NotificationType", "ModuleIdentity", "iso", "Bits", "Counter64", "TimeTicks", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfMcT1Group, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfMcT1Group")
wfMcT1ModTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1), )
if mibBuilder.loadTexts: wfMcT1ModTable.setStatus('mandatory')
wfMcT1ModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1ModSlot"))
if mibBuilder.loadTexts: wfMcT1ModEntry.setStatus('mandatory')
wfMcT1ModDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1ModDelete.setStatus('mandatory')
wfMcT1ModDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1ModDisable.setStatus('mandatory')
wfMcT1ModSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1ModSlot.setStatus('mandatory')
wfMcT1ModPrimaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("loop0", 2), ("loop1", 3), ("int", 4))).clone('int')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1ModPrimaryClock.setStatus('mandatory')
wfMcT1ModSecondaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("loop0", 2), ("loop1", 3), ("int", 4))).clone('loop0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1ModSecondaryClock.setStatus('mandatory')
wfMcT1ModCurrentClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("int", 3))).clone('primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1ModCurrentClock.setStatus('mandatory')
wfMcT1ModExtClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oper", 1), ("unoper", 2))).clone('oper')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1ModExtClockOperational.setStatus('mandatory')
wfMcT1ModLoop0ClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oper", 1), ("unoper", 2))).clone('oper')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1ModLoop0ClockOperational.setStatus('mandatory')
wfMcT1ModLoop1ClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oper", 1), ("unoper", 2))).clone('oper')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1ModLoop1ClockOperational.setStatus('mandatory')
wfMcT1ModRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1ModRestart.setStatus('mandatory')
wfMcT1Table = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2), )
if mibBuilder.loadTexts: wfMcT1Table.setStatus('mandatory')
wfMcT1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1Slot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1Connector"))
if mibBuilder.loadTexts: wfMcT1Entry.setStatus('mandatory')
wfMcT1Delete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Delete.setStatus('mandatory')
wfMcT1Disable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Disable.setStatus('mandatory')
wfMcT1State = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("init", 1), ("up", 2), ("bert", 3), ("loopback", 4), ("redalarm", 5), ("yelalarm", 6), ("bluealarm", 7), ("notpresent", 8))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1State.setStatus('mandatory')
wfMcT1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Slot.setStatus('mandatory')
wfMcT1Connector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Connector.setStatus('mandatory')
wfMcT1OperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("bert", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1OperationMode.setStatus('mandatory')
wfMcT1Mtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4608)).clone(4608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Mtu.setStatus('mandatory')
wfMcT1MunichVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1MunichVersion.setStatus('mandatory')
wfMcT1Dsx1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("esf", 2), ("d4", 3))).clone('d4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1LineType.setStatus('mandatory')
wfMcT1Dsx1ZeroCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5))).clone(namedValues=NamedValues(("b8zs", 2), ("ami", 5))).clone('ami')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1ZeroCoding.setStatus('mandatory')
wfMcT1Dsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noloop", 1), ("mgrpayloadloop", 2), ("mgrlineloop", 3), ("netreqpayloadloop", 4), ("netreqlineloop", 5), ("otherloop", 6))).clone('noloop')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1LoopbackConfig.setStatus('mandatory')
wfMcT1Dsx1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("noalarm", 1), ("farendalarm", 2), ("alarmindicationsignal", 4), ("lossofframe", 8), ("lossofsignal", 16), ("loopbackstate", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1LineStatus.setStatus('mandatory')
wfMcT1Dsx1SetupAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 10))).clone(namedValues=NamedValues(("threshold2", 2), ("threshold4", 4), ("threshold6", 6), ("threshold8", 8), ("threshold10", 10))).clone('threshold2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1SetupAlarmThreshold.setStatus('mandatory')
wfMcT1Dsx1ClearAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 10))).clone(namedValues=NamedValues(("threshold2", 2), ("threshold4", 4), ("threshold6", 6), ("threshold8", 8), ("threshold10", 10))).clone('threshold2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1ClearAlarmThreshold.setStatus('mandatory')
wfMcT1Dsx1SignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("minus15", 1), ("minus7point5", 2), ("minus0", 3), ("pluspoint5", 4), ("pluspoint8", 5), ("plus1point1", 6), ("plus1point5", 7))).clone('minus0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1SignalLevel.setStatus('mandatory')
wfMcT1LoopbackDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LoopbackDisable.setStatus('mandatory')
wfMcT1Dsx1FDLOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oper54016", 1), ("opert1403", 2))).clone('opert1403')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1FDLOperationMode.setStatus('mandatory')
wfMcT1BertTxOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("minus15", 1), ("minus7point5", 2), ("minus0", 3), ("pluspoint5", 4), ("pluspoint8", 5), ("plus1point1", 6), ("plus1point5", 7))).clone('minus0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertTxOutputLevel.setStatus('mandatory')
wfMcT1BertTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1", 1), ("sf", 2), ("esf", 3))).clone('sf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertTestMode.setStatus('mandatory')
wfMcT1BertLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2))).clone('ami')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertLineCode.setStatus('mandatory')
wfMcT1BertTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zeros", 1), ("ones", 2), ("qrss", 3), ("fifteen", 4), ("fifteeninv", 5), ("twenty", 6), ("twentythree", 7), ("twentythreeinv", 8))).clone('ones')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertTestPattern.setStatus('mandatory')
wfMcT1BertSendAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blue", 1), ("yellow", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertSendAlarm.setStatus('mandatory')
wfMcT1DS2282Version = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1DS2282Version.setStatus('mandatory')
wfMcT1Restart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Restart.setStatus('mandatory')
wfMcT1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linelb", 1), ("payldlb", 2), ("deactivate", 3))).clone('deactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Loopback.setStatus('mandatory')
wfMcT1FDLTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("az", 1), ("by", 2))).clone('by')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1FDLTargetAddress.setStatus('mandatory')
wfMcT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3), )
if mibBuilder.loadTexts: wfMcT1ConfigTable.setStatus('mandatory')
wfMcT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1ConfigSlot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1ConfigConnector"))
if mibBuilder.loadTexts: wfMcT1ConfigEntry.setStatus('mandatory')
wfMcT1ConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1ConfigSlot.setStatus('mandatory')
wfMcT1ConfigConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1ConfigConnector.setStatus('mandatory')
wfMcT1BertRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10))).clone(namedValues=NamedValues(("restart", 1), ("noaction", 10))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertRestart.setStatus('mandatory')
wfMcT1BertPayldLb = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("act", 1), ("deact", 2), ("noaction", 10))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertPayldLb.setStatus('mandatory')
wfMcT1BertLineLb = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("lpup", 1), ("lpdn", 2), ("fdlact", 3), ("fdldeact", 4), ("noaction", 10))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertLineLb.setStatus('mandatory')
wfMcT1BertErrorInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("config", 1), ("thousandconfig", 2), ("millionconfig", 3), ("disable", 4), ("noaction", 10))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1BertErrorInsert.setStatus('mandatory')
wfMcT1Dsx1SendLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("loopup", 1), ("loopdn", 2), ("noaction", 10))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1SendLoopCode.setStatus('mandatory')
wfMcT1Dsx1SendFDLCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("ci", 1), ("univlbdeact", 2), ("ia", 3), ("linelbdeact", 4), ("pyldlbact", 5), ("pyldlbdeact", 6), ("ib", 7), ("noaction", 10))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1Dsx1SendFDLCode.setStatus('mandatory')
wfMcT1LineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4), )
if mibBuilder.loadTexts: wfMcT1LineTable.setStatus('mandatory')
wfMcT1LineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1LineSlot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1LineConnector"), (0, "Wellfleet-MCT1-MIB", "wfMcT1LineLine"))
if mibBuilder.loadTexts: wfMcT1LineEntry.setStatus('mandatory')
wfMcT1LineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineDelete.setStatus('mandatory')
wfMcT1LineDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineDisable.setStatus('mandatory')
wfMcT1LineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("loopback", 4), ("wait", 5), ("channel", 6), ("stop", 7), ("notpresent", 8))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineState.setStatus('mandatory')
wfMcT1LineSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineSlot.setStatus('mandatory')
wfMcT1LineConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineConnector.setStatus('mandatory')
wfMcT1LineLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineLine.setStatus('mandatory')
wfMcT1LineCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineCct.setStatus('mandatory')
wfMcT1LineBofl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineBofl.setStatus('mandatory')
wfMcT1LineBoflTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineBoflTmo.setStatus('mandatory')
wfMcT1LineFractionalLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineFractionalLpbk.setStatus('mandatory')
wfMcT1LineChannelAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineChannelAssignment.setStatus('mandatory')
wfMcT1LineMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineMadr.setStatus('mandatory')
wfMcT1LineWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standard", 1), ("ppp", 2), ("smds", 3), ("framerelay", 4), ("switch", 5), ("sw", 6))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineWanProtocol.setStatus('mandatory')
wfMcT1LineService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdlc", 1), ("llc1", 2))).clone('hdlc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineService.setStatus('mandatory')
wfMcT1LineRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adaption64k", 1), ("msb", 2), ("lsb", 3))).clone('lsb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineRateAdaption.setStatus('mandatory')
wfMcT1LineIFTF = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flags", 1), ("idles", 2))).clone('flags')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineIFTF.setStatus('mandatory')
wfMcT1LineCRCSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc32", 1), ("crc16", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineCRCSize.setStatus('mandatory')
wfMcT1LineRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxOctets.setStatus('mandatory')
wfMcT1LineRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxFrames.setStatus('mandatory')
wfMcT1LineTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineTxOctets.setStatus('mandatory')
wfMcT1LineTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineTxFrames.setStatus('mandatory')
wfMcT1LineRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxErrors.setStatus('mandatory')
wfMcT1LineTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineTxErrors.setStatus('mandatory')
wfMcT1LineLackRxResources = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineLackRxResources.setStatus('mandatory')
wfMcT1LineLackTxResources = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineLackTxResources.setStatus('mandatory')
wfMcT1LineTxUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineTxUnderflows.setStatus('mandatory')
wfMcT1LineRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxOverflows.setStatus('mandatory')
wfMcT1LineRxNullFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxNullFrames.setStatus('mandatory')
wfMcT1LineRxShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxShortFrames.setStatus('mandatory')
wfMcT1LineRxLossSyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxLossSyncs.setStatus('mandatory')
wfMcT1LineRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxCRCErrors.setStatus('mandatory')
wfMcT1LineRxNonOctetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxNonOctetBits.setStatus('mandatory')
wfMcT1LineRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxLongFrames.setStatus('mandatory')
wfMcT1LineRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxAbortFrames.setStatus('mandatory')
wfMcT1LineRxDescOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxDescOverflows.setStatus('mandatory')
wfMcT1LineTurboBofl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineTurboBofl.setStatus('mandatory')
wfMcT1LineBoflNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineBoflNum.setStatus('mandatory')
wfMcT1LineBoflLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(22, 4450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineBoflLen.setStatus('mandatory')
wfMcT1LineRxIntProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxIntProcs.setStatus('mandatory')
wfMcT1LineTxIntProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineTxIntProcs.setStatus('mandatory')
wfMcT1LineRxPktCorruptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxPktCorruptions.setStatus('mandatory')
wfMcT1LineRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxReplenMisses.setStatus('mandatory')
wfMcT1LineRxIFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxIFCs.setStatus('mandatory')
wfMcT1LineCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 336))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineCfgTxQueueLength.setStatus('mandatory')
wfMcT1LineCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 336))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineCfgRxQueueLength.setStatus('mandatory')
wfMcT1LineTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineTxQueueLength.setStatus('mandatory')
wfMcT1LineRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineRxQueueLength.setStatus('mandatory')
wfMcT1LineTxQueueEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineTxQueueEmpty.setStatus('mandatory')
wfMcT1LineMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1LineMtu.setStatus('mandatory')
wfMcT1LineRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineRestart.setStatus('mandatory')
wfMcT1LineLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 4, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMcT1LineLineNumber.setStatus('mandatory')
wfMcT1Dsx1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5), )
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentTable.setStatus('mandatory')
wfMcT1Dsx1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1Dsx1CurrentSlot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1Dsx1CurrentConnector"))
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentEntry.setStatus('mandatory')
wfMcT1Dsx1CurrentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentSlot.setStatus('mandatory')
wfMcT1Dsx1CurrentConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentConnector.setStatus('mandatory')
wfMcT1Dsx1CurrentIntervalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentIntervalTimer.setStatus('mandatory')
wfMcT1Dsx1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentESs.setStatus('mandatory')
wfMcT1Dsx1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentSESs.setStatus('mandatory')
wfMcT1Dsx1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentBESs.setStatus('mandatory')
wfMcT1Dsx1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentUASs.setStatus('mandatory')
wfMcT1Dsx1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentCSSs.setStatus('mandatory')
wfMcT1Dsx1CurrentBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1CurrentBPVs.setStatus('mandatory')
wfMcT1Dsx1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6), )
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalTable.setStatus('mandatory')
wfMcT1Dsx1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1Dsx1IntervalSlot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1Dsx1IntervalConnector"), (0, "Wellfleet-MCT1-MIB", "wfMcT1Dsx1IntervalNumber"))
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalEntry.setStatus('mandatory')
wfMcT1Dsx1IntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalSlot.setStatus('mandatory')
wfMcT1Dsx1IntervalConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalConnector.setStatus('mandatory')
wfMcT1Dsx1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalNumber.setStatus('mandatory')
wfMcT1Dsx1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalESs.setStatus('mandatory')
wfMcT1Dsx1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalSESs.setStatus('mandatory')
wfMcT1Dsx1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalBESs.setStatus('mandatory')
wfMcT1Dsx1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalUASs.setStatus('mandatory')
wfMcT1Dsx1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalCSSs.setStatus('mandatory')
wfMcT1Dsx1IntervalBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1IntervalBPVs.setStatus('mandatory')
wfMcT1Dsx1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7), )
if mibBuilder.loadTexts: wfMcT1Dsx1TotalTable.setStatus('mandatory')
wfMcT1Dsx1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1Dsx1TotalSlot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1Dsx1TotalConnector"))
if mibBuilder.loadTexts: wfMcT1Dsx1TotalEntry.setStatus('mandatory')
wfMcT1Dsx1TotalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalSlot.setStatus('mandatory')
wfMcT1Dsx1TotalConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalConnector.setStatus('mandatory')
wfMcT1Dsx1TotalVITR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalVITR.setStatus('mandatory')
wfMcT1Dsx1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalESs.setStatus('mandatory')
wfMcT1Dsx1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalSESs.setStatus('mandatory')
wfMcT1Dsx1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalBESs.setStatus('mandatory')
wfMcT1Dsx1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalUASs.setStatus('mandatory')
wfMcT1Dsx1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalCSSs.setStatus('mandatory')
wfMcT1Dsx1TotalBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1Dsx1TotalBPVs.setStatus('mandatory')
wfMcT1AnsiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8), )
if mibBuilder.loadTexts: wfMcT1AnsiTable.setStatus('mandatory')
wfMcT1AnsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1AnsiSlot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1AnsiConnector"))
if mibBuilder.loadTexts: wfMcT1AnsiEntry.setStatus('mandatory')
wfMcT1AnsiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiSlot.setStatus('mandatory')
wfMcT1AnsiConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiConnector.setStatus('mandatory')
wfMcT1AnsiCRCCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiCRCCounts.setStatus('mandatory')
wfMcT1AnsiBPVCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiBPVCounts.setStatus('mandatory')
wfMcT1AnsiOOFCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiOOFCounts.setStatus('mandatory')
wfMcT1AnsiFECounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiFECounts.setStatus('mandatory')
wfMcT1AnsiESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiESCounts.setStatus('mandatory')
wfMcT1AnsiSESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiSESCounts.setStatus('mandatory')
wfMcT1AnsiUASCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiUASCounts.setStatus('mandatory')
wfMcT1AnsiPRMR0Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiPRMR0Counts.setStatus('mandatory')
wfMcT1AnsiPRMR1Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiPRMR1Counts.setStatus('mandatory')
wfMcT1AnsiPRMR2Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiPRMR2Counts.setStatus('mandatory')
wfMcT1AnsiPRMR3Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiPRMR3Counts.setStatus('mandatory')
wfMcT1AnsiPRMESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiPRMESCounts.setStatus('mandatory')
wfMcT1AnsiPRMSESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiPRMSESCounts.setStatus('mandatory')
wfMcT1AnsiPRMECounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1AnsiPRMECounts.setStatus('mandatory')
wfMcT1BertStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 9), )
if mibBuilder.loadTexts: wfMcT1BertStatsTable.setStatus('mandatory')
wfMcT1BertStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 9, 1), ).setIndexNames((0, "Wellfleet-MCT1-MIB", "wfMcT1BertStatsSlot"), (0, "Wellfleet-MCT1-MIB", "wfMcT1BertStatsConnector"))
if mibBuilder.loadTexts: wfMcT1BertStatsEntry.setStatus('mandatory')
wfMcT1BertStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1BertStatsSlot.setStatus('mandatory')
wfMcT1BertStatsConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1BertStatsConnector.setStatus('mandatory')
wfMcT1BertStatsBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1BertStatsBitErrors.setStatus('mandatory')
wfMcT1BertStatsBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMcT1BertStatsBits.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-MCT1-MIB", wfMcT1Dsx1IntervalConnector=wfMcT1Dsx1IntervalConnector, wfMcT1Dsx1CurrentBESs=wfMcT1Dsx1CurrentBESs, wfMcT1Dsx1IntervalESs=wfMcT1Dsx1IntervalESs, wfMcT1BertLineCode=wfMcT1BertLineCode, wfMcT1LineBoflNum=wfMcT1LineBoflNum, wfMcT1LineRxFrames=wfMcT1LineRxFrames, wfMcT1LineLineNumber=wfMcT1LineLineNumber, wfMcT1Dsx1TotalBPVs=wfMcT1Dsx1TotalBPVs, wfMcT1Dsx1ClearAlarmThreshold=wfMcT1Dsx1ClearAlarmThreshold, wfMcT1Dsx1IntervalUASs=wfMcT1Dsx1IntervalUASs, wfMcT1LineRxNonOctetBits=wfMcT1LineRxNonOctetBits, wfMcT1Dsx1TotalVITR=wfMcT1Dsx1TotalVITR, wfMcT1BertStatsTable=wfMcT1BertStatsTable, wfMcT1Connector=wfMcT1Connector, wfMcT1LineRxQueueLength=wfMcT1LineRxQueueLength, wfMcT1Dsx1TotalEntry=wfMcT1Dsx1TotalEntry, wfMcT1LineRxNullFrames=wfMcT1LineRxNullFrames, wfMcT1Dsx1CurrentConnector=wfMcT1Dsx1CurrentConnector, wfMcT1Dsx1CurrentSESs=wfMcT1Dsx1CurrentSESs, wfMcT1AnsiBPVCounts=wfMcT1AnsiBPVCounts, wfMcT1BertStatsSlot=wfMcT1BertStatsSlot, wfMcT1Dsx1CurrentEntry=wfMcT1Dsx1CurrentEntry, wfMcT1LineRxCRCErrors=wfMcT1LineRxCRCErrors, wfMcT1AnsiPRMESCounts=wfMcT1AnsiPRMESCounts, wfMcT1LineRxDescOverflows=wfMcT1LineRxDescOverflows, wfMcT1LineCfgTxQueueLength=wfMcT1LineCfgTxQueueLength, wfMcT1AnsiPRMR2Counts=wfMcT1AnsiPRMR2Counts, wfMcT1AnsiSlot=wfMcT1AnsiSlot, wfMcT1Delete=wfMcT1Delete, wfMcT1LineEntry=wfMcT1LineEntry, wfMcT1Table=wfMcT1Table, wfMcT1AnsiFECounts=wfMcT1AnsiFECounts, wfMcT1LineTxErrors=wfMcT1LineTxErrors, wfMcT1LineRestart=wfMcT1LineRestart, wfMcT1BertLineLb=wfMcT1BertLineLb, wfMcT1LineRateAdaption=wfMcT1LineRateAdaption, wfMcT1LineRxIFCs=wfMcT1LineRxIFCs, wfMcT1LineCct=wfMcT1LineCct, wfMcT1AnsiPRMR1Counts=wfMcT1AnsiPRMR1Counts, wfMcT1BertTxOutputLevel=wfMcT1BertTxOutputLevel, wfMcT1BertPayldLb=wfMcT1BertPayldLb, wfMcT1ConfigTable=wfMcT1ConfigTable, wfMcT1ConfigEntry=wfMcT1ConfigEntry, wfMcT1Dsx1IntervalCSSs=wfMcT1Dsx1IntervalCSSs, wfMcT1Dsx1IntervalBESs=wfMcT1Dsx1IntervalBESs, wfMcT1LineLine=wfMcT1LineLine, wfMcT1AnsiOOFCounts=wfMcT1AnsiOOFCounts, wfMcT1LineCRCSize=wfMcT1LineCRCSize, wfMcT1AnsiPRMR3Counts=wfMcT1AnsiPRMR3Counts, wfMcT1LineTxIntProcs=wfMcT1LineTxIntProcs, wfMcT1ConfigConnector=wfMcT1ConfigConnector, wfMcT1LineTxUnderflows=wfMcT1LineTxUnderflows, wfMcT1AnsiTable=wfMcT1AnsiTable, wfMcT1Dsx1CurrentIntervalTimer=wfMcT1Dsx1CurrentIntervalTimer, wfMcT1Dsx1TotalBESs=wfMcT1Dsx1TotalBESs, wfMcT1LineTurboBofl=wfMcT1LineTurboBofl, wfMcT1AnsiPRMR0Counts=wfMcT1AnsiPRMR0Counts, wfMcT1Dsx1SendLoopCode=wfMcT1Dsx1SendLoopCode, wfMcT1BertStatsBits=wfMcT1BertStatsBits, wfMcT1Dsx1CurrentTable=wfMcT1Dsx1CurrentTable, wfMcT1LineTable=wfMcT1LineTable, wfMcT1LineLackTxResources=wfMcT1LineLackTxResources, wfMcT1LineRxOverflows=wfMcT1LineRxOverflows, wfMcT1BertStatsConnector=wfMcT1BertStatsConnector, wfMcT1Dsx1IntervalNumber=wfMcT1Dsx1IntervalNumber, wfMcT1AnsiUASCounts=wfMcT1AnsiUASCounts, wfMcT1AnsiConnector=wfMcT1AnsiConnector, wfMcT1LineMadr=wfMcT1LineMadr, wfMcT1LineFractionalLpbk=wfMcT1LineFractionalLpbk, wfMcT1LineConnector=wfMcT1LineConnector, wfMcT1LineState=wfMcT1LineState, wfMcT1LoopbackDisable=wfMcT1LoopbackDisable, wfMcT1Dsx1TotalCSSs=wfMcT1Dsx1TotalCSSs, wfMcT1Dsx1CurrentUASs=wfMcT1Dsx1CurrentUASs, wfMcT1Dsx1CurrentCSSs=wfMcT1Dsx1CurrentCSSs, wfMcT1LineRxReplenMisses=wfMcT1LineRxReplenMisses, wfMcT1ConfigSlot=wfMcT1ConfigSlot, wfMcT1ModSecondaryClock=wfMcT1ModSecondaryClock, wfMcT1LineTxFrames=wfMcT1LineTxFrames, wfMcT1LineRxShortFrames=wfMcT1LineRxShortFrames, wfMcT1AnsiCRCCounts=wfMcT1AnsiCRCCounts, wfMcT1LineLackRxResources=wfMcT1LineLackRxResources, wfMcT1Entry=wfMcT1Entry, wfMcT1Mtu=wfMcT1Mtu, wfMcT1LineCfgRxQueueLength=wfMcT1LineCfgRxQueueLength, wfMcT1BertStatsBitErrors=wfMcT1BertStatsBitErrors, wfMcT1ModPrimaryClock=wfMcT1ModPrimaryClock, wfMcT1FDLTargetAddress=wfMcT1FDLTargetAddress, wfMcT1ModExtClockOperational=wfMcT1ModExtClockOperational, wfMcT1BertStatsEntry=wfMcT1BertStatsEntry, wfMcT1ModCurrentClock=wfMcT1ModCurrentClock, wfMcT1LineService=wfMcT1LineService, wfMcT1Dsx1CurrentSlot=wfMcT1Dsx1CurrentSlot, wfMcT1ModLoop0ClockOperational=wfMcT1ModLoop0ClockOperational, wfMcT1State=wfMcT1State, wfMcT1Dsx1SetupAlarmThreshold=wfMcT1Dsx1SetupAlarmThreshold, wfMcT1ModEntry=wfMcT1ModEntry, wfMcT1LineRxPktCorruptions=wfMcT1LineRxPktCorruptions, wfMcT1Loopback=wfMcT1Loopback, wfMcT1LineChannelAssignment=wfMcT1LineChannelAssignment, wfMcT1LineRxLongFrames=wfMcT1LineRxLongFrames, wfMcT1Dsx1TotalSESs=wfMcT1Dsx1TotalSESs, wfMcT1Dsx1IntervalSESs=wfMcT1Dsx1IntervalSESs, wfMcT1Dsx1LoopbackConfig=wfMcT1Dsx1LoopbackConfig, wfMcT1AnsiESCounts=wfMcT1AnsiESCounts, wfMcT1OperationMode=wfMcT1OperationMode, wfMcT1Dsx1LineStatus=wfMcT1Dsx1LineStatus, wfMcT1BertTestPattern=wfMcT1BertTestPattern, wfMcT1BertSendAlarm=wfMcT1BertSendAlarm, wfMcT1DS2282Version=wfMcT1DS2282Version, wfMcT1LineRxAbortFrames=wfMcT1LineRxAbortFrames, wfMcT1LineWanProtocol=wfMcT1LineWanProtocol, wfMcT1MunichVersion=wfMcT1MunichVersion, wfMcT1AnsiSESCounts=wfMcT1AnsiSESCounts, wfMcT1Dsx1SignalLevel=wfMcT1Dsx1SignalLevel, wfMcT1AnsiEntry=wfMcT1AnsiEntry, wfMcT1Dsx1TotalUASs=wfMcT1Dsx1TotalUASs, wfMcT1BertRestart=wfMcT1BertRestart, wfMcT1LineRxErrors=wfMcT1LineRxErrors, wfMcT1ModTable=wfMcT1ModTable, wfMcT1Dsx1LineType=wfMcT1Dsx1LineType, wfMcT1LineTxQueueEmpty=wfMcT1LineTxQueueEmpty, wfMcT1LineRxIntProcs=wfMcT1LineRxIntProcs, wfMcT1LineDisable=wfMcT1LineDisable, wfMcT1Dsx1SendFDLCode=wfMcT1Dsx1SendFDLCode, wfMcT1BertTestMode=wfMcT1BertTestMode, wfMcT1ModRestart=wfMcT1ModRestart, wfMcT1AnsiPRMECounts=wfMcT1AnsiPRMECounts, wfMcT1LineBofl=wfMcT1LineBofl, wfMcT1ModDisable=wfMcT1ModDisable, wfMcT1LineBoflTmo=wfMcT1LineBoflTmo, wfMcT1Disable=wfMcT1Disable, wfMcT1Slot=wfMcT1Slot, wfMcT1Dsx1IntervalEntry=wfMcT1Dsx1IntervalEntry, wfMcT1ModSlot=wfMcT1ModSlot, wfMcT1Dsx1CurrentBPVs=wfMcT1Dsx1CurrentBPVs, wfMcT1AnsiPRMSESCounts=wfMcT1AnsiPRMSESCounts, wfMcT1LineDelete=wfMcT1LineDelete, wfMcT1Dsx1IntervalSlot=wfMcT1Dsx1IntervalSlot, wfMcT1Dsx1TotalESs=wfMcT1Dsx1TotalESs, wfMcT1Dsx1CurrentESs=wfMcT1Dsx1CurrentESs, wfMcT1Dsx1ZeroCoding=wfMcT1Dsx1ZeroCoding, wfMcT1BertErrorInsert=wfMcT1BertErrorInsert, wfMcT1Dsx1FDLOperationMode=wfMcT1Dsx1FDLOperationMode, wfMcT1LineRxOctets=wfMcT1LineRxOctets, wfMcT1LineSlot=wfMcT1LineSlot, wfMcT1LineMtu=wfMcT1LineMtu, wfMcT1LineIFTF=wfMcT1LineIFTF, wfMcT1Dsx1IntervalTable=wfMcT1Dsx1IntervalTable, wfMcT1LineTxQueueLength=wfMcT1LineTxQueueLength, wfMcT1Dsx1TotalSlot=wfMcT1Dsx1TotalSlot, wfMcT1Dsx1TotalTable=wfMcT1Dsx1TotalTable, wfMcT1Restart=wfMcT1Restart, wfMcT1Dsx1IntervalBPVs=wfMcT1Dsx1IntervalBPVs, wfMcT1LineRxLossSyncs=wfMcT1LineRxLossSyncs, wfMcT1Dsx1TotalConnector=wfMcT1Dsx1TotalConnector, wfMcT1LineTxOctets=wfMcT1LineTxOctets, wfMcT1LineBoflLen=wfMcT1LineBoflLen, wfMcT1ModLoop1ClockOperational=wfMcT1ModLoop1ClockOperational, wfMcT1ModDelete=wfMcT1ModDelete)
