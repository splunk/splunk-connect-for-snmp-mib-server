#
# PySNMP MIB module ED-1032-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ED-1032-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, ModuleIdentity, iso, Counter32, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, NotificationType, ObjectIdentity, Bits, Counter64, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "ModuleIdentity", "iso", "Counter32", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "NotificationType", "ObjectIdentity", "Bits", "Counter64", "MibIdentifier", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mcData = MibIdentifier((1, 3, 6, 1, 4, 1, 289))
commDev = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2))
fibreChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1))
fcSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1))
ed_1032 = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1)).setLabel("ed-1032")
class DisplayString(OctetString):
    pass

class Ed1032SysOperStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operational", 1), ("redundant-failure", 2), ("minor-failure", 3), ("major-failure", 4), ("not-operational", 5))

class Ed1032SysState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("coming-online", 2), ("offline", 3), ("going-offline", 4))

class Ed1032FruCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("fru-bkplane", 1), ("fru-ctp", 2), ("fru-mpc", 3), ("fru-cmm", 4), ("fru-fan", 5), ("fru-power", 6), ("fru-panel", 7), ("fru-gsm", 8), ("fru-gls", 9), ("fru-glx", 10), ("fru-lsm", 11), ("fru-gxx", 12))

class Ed1032FruPosition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Ed1032FruStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("backup", 2), ("update-busy", 3), ("failed", 4))

class Ed1032PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2048)

class Ed1032PortPhyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("psNotInstalled", 1), ("psAvailable", 2), ("psBlocked", 3), ("psUnavailable", 4), ("psLinkFailure", 5), ("psLinkFailLOL", 6), ("psIntDiags", 7), ("psExtLoop", 8), ("psPortFail", 9), ("psSR", 10), ("psLR", 11))

class Ed1032PortStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4))

class Ed1032PortAdmStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3))

ed1032Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1))
ed1032Fru = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2))
ed1032Port = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3))
ed1032SysCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysCurrentDate.setStatus('mandatory')
ed1032SysBootDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysBootDate.setStatus('mandatory')
ed1032SysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysFirmwareVersion.setStatus('mandatory')
ed1032SysTypeNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysTypeNum.setStatus('mandatory')
ed1032SysModelNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysModelNum.setStatus('mandatory')
ed1032SysMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysMfg.setStatus('mandatory')
ed1032SysPlantOfMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysPlantOfMfg.setStatus('mandatory')
ed1032SysSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysSeqNum.setStatus('mandatory')
ed1032SysEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysEcLevel.setStatus('mandatory')
ed1032SysOemSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysOemSerialNum.setStatus('mandatory')
ed1032SysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 11), Ed1032SysOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysOperStatus.setStatus('mandatory')
ed1032SysState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 12), Ed1032SysState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysState.setStatus('mandatory')
ed1032SysAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ed1032SysAdmStatus.setStatus('mandatory')
ed1032FruTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ed1032FruTable.setStatus('mandatory')
ed1032FruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "ED-1032-MIB", "ed1032FruCode"), (0, "ED-1032-MIB", "ed1032FruPosition"))
if mibBuilder.loadTexts: ed1032FruEntry.setStatus('mandatory')
ed1032FruCode = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 1), Ed1032FruCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruCode.setStatus('mandatory')
ed1032FruPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 2), Ed1032FruPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruPosition.setStatus('mandatory')
ed1032FruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 3), Ed1032FruStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruStatus.setStatus('mandatory')
ed1032FruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruPartNumber.setStatus('mandatory')
ed1032FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruSerialNumber.setStatus('mandatory')
ed1032FruPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruPowerOnHours.setStatus('mandatory')
ed1032FruTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruTestDate.setStatus('mandatory')
ed1032PortTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ed1032PortTable.setStatus('mandatory')
ed1032PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "ED-1032-MIB", "ed1032PortIndex"))
if mibBuilder.loadTexts: ed1032PortEntry.setStatus('mandatory')
ed1032PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 1), Ed1032PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortIndex.setStatus('mandatory')
ed1032PortPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 2), Ed1032PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortPhyState.setStatus('mandatory')
ed1032PortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 3), Ed1032PortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortOpStatus.setStatus('mandatory')
ed1032PortAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 4), Ed1032PortAdmStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ed1032PortAdmStatus.setStatus('mandatory')
ed1032PortTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxWords.setStatus('mandatory')
ed1032PortRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxWords.setStatus('mandatory')
ed1032PortTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxFrames.setStatus('mandatory')
ed1032PortRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxFrames.setStatus('mandatory')
ed1032PortRxC2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxC2Frames.setStatus('mandatory')
ed1032PortRxC3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxC3Frames.setStatus('mandatory')
ed1032PortRxLCs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxLCs.setStatus('mandatory')
ed1032PortRxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxMcasts.setStatus('mandatory')
ed1032PortTooManyRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTooManyRdys.setStatus('mandatory')
ed1032PortNoTxCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortNoTxCredits.setStatus('mandatory')
ed1032PortRxEncFrs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxEncFrs.setStatus('mandatory')
ed1032PortRxCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxCrcs.setStatus('mandatory')
ed1032PortRxTruncs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxTruncs.setStatus('mandatory')
ed1032PortRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxTooLongs.setStatus('mandatory')
ed1032PortRxBadEofs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxBadEofs.setStatus('mandatory')
ed1032PortRxBadOs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxBadOs.setStatus('mandatory')
ed1032PortC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortC3Discards.setStatus('mandatory')
ed1032PortMcastTimedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortMcastTimedOuts.setStatus('mandatory')
ed1032PortTxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxMcasts.setStatus('mandatory')
ed1032PortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxThroughput.setStatus('mandatory')
ed1032PortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxThroughput.setStatus('mandatory')
ed1032PortScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,1)).setObjects(("ED-1032-MIB", "ed1032PortOpStatus"))
ed1032FruScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,2)).setObjects(("ED-1032-MIB", "ed1032FruStatus"))
mibBuilder.exportSymbols("ED-1032-MIB", Ed1032PortStatus=Ed1032PortStatus, ed1032PortAdmStatus=ed1032PortAdmStatus, ed1032FruCode=ed1032FruCode, ed1032SysCurrentDate=ed1032SysCurrentDate, ed1032PortTxFrames=ed1032PortTxFrames, ed1032FruStatus=ed1032FruStatus, ed1032PortOpStatus=ed1032PortOpStatus, ed1032PortScn=ed1032PortScn, ed1032SysModelNum=ed1032SysModelNum, ed1032FruTable=ed1032FruTable, ed1032PortRxCrcs=ed1032PortRxCrcs, ed1032PortNoTxCredits=ed1032PortNoTxCredits, ed_1032=ed_1032, ed1032SysMfg=ed1032SysMfg, Ed1032FruCode=Ed1032FruCode, ed1032PortRxTooLongs=ed1032PortRxTooLongs, fibreChannel=fibreChannel, ed1032Port=ed1032Port, ed1032PortPhyState=ed1032PortPhyState, ed1032PortRxC2Frames=ed1032PortRxC2Frames, ed1032PortTooManyRdys=ed1032PortTooManyRdys, ed1032PortTxWords=ed1032PortTxWords, ed1032PortRxMcasts=ed1032PortRxMcasts, Ed1032FruStatus=Ed1032FruStatus, ed1032SysTypeNum=ed1032SysTypeNum, ed1032SysBootDate=ed1032SysBootDate, Ed1032SysOperStatus=Ed1032SysOperStatus, ed1032PortEntry=ed1032PortEntry, ed1032PortRxBadOs=ed1032PortRxBadOs, ed1032Fru=ed1032Fru, ed1032SysAdmStatus=ed1032SysAdmStatus, ed1032SysOperStatus=ed1032SysOperStatus, fcSwitch=fcSwitch, ed1032PortIndex=ed1032PortIndex, ed1032FruEntry=ed1032FruEntry, ed1032PortRxC3Frames=ed1032PortRxC3Frames, ed1032PortC3Discards=ed1032PortC3Discards, ed1032FruPowerOnHours=ed1032FruPowerOnHours, ed1032FruPosition=ed1032FruPosition, ed1032PortRxFrames=ed1032PortRxFrames, mcData=mcData, ed1032FruScn=ed1032FruScn, ed1032SysEcLevel=ed1032SysEcLevel, ed1032SysOemSerialNum=ed1032SysOemSerialNum, ed1032FruTestDate=ed1032FruTestDate, ed1032Sys=ed1032Sys, ed1032PortRxEncFrs=ed1032PortRxEncFrs, Ed1032PortIndex=Ed1032PortIndex, ed1032SysState=ed1032SysState, Ed1032FruPosition=Ed1032FruPosition, ed1032PortMcastTimedOuts=ed1032PortMcastTimedOuts, ed1032FruPartNumber=ed1032FruPartNumber, ed1032FruSerialNumber=ed1032FruSerialNumber, ed1032PortTxMcasts=ed1032PortTxMcasts, ed1032PortTable=ed1032PortTable, ed1032PortRxWords=ed1032PortRxWords, ed1032PortRxBadEofs=ed1032PortRxBadEofs, ed1032SysPlantOfMfg=ed1032SysPlantOfMfg, ed1032PortTxThroughput=ed1032PortTxThroughput, ed1032PortRxThroughput=ed1032PortRxThroughput, DisplayString=DisplayString, Ed1032PortPhyState=Ed1032PortPhyState, commDev=commDev, ed1032SysSeqNum=ed1032SysSeqNum, ed1032PortRxTruncs=ed1032PortRxTruncs, Ed1032PortAdmStatus=Ed1032PortAdmStatus, ed1032PortRxLCs=ed1032PortRxLCs, ed1032SysFirmwareVersion=ed1032SysFirmwareVersion, Ed1032SysState=Ed1032SysState)
